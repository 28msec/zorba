/** \page build_prepare Preparing to Build Zorba

The following outlines the common steps for building Zorba once the
required and optional tools and libraries (as described in \ref
build_prerequisites) have been installed.

\section build_gettingsrc Getting the Zorba Source Code

You may get the Zorba source code in one of two ways: downloading a
released source distribution, or getting the code from our Launchpad
code repository. The directory that the Zorba source code is placed
into will be referred to as \c {ZORBASRC} in later instructions.

\subsection download_source Getting a Source Code Release

You may download the latest Zorba release source code as either a
<b>.zip</b> or <b>.tar.gz</b> file from Launchpad:
https://github.com/28msec/zorba/releases .

\subsection checkout_source Getting the Latest Code from Github

If you want the very latest and greatest Zorba source, you can check
out our source code trunk from our github repository https://github.com/28msec/zorba. This is
actually a pretty "safe" option, compared to many projects, as Zorba
attempts to enforce a "trunk is always releasable" policy through
extensive regression testing on every trunk checkin.

Once you have git installed, check out the Zorba repository:

\code
git clone git@github.com:28msec/zorba.git 
\endcode

\section noncore_download Downloading source code for non-core modules

Zorba offers a number of optional ("non-core") modules which provide
additional functionality; see \ref non_core_modules for a list. When
you build Zorba, you may also build any non-core modules at the same
time, and these modules will then be available in your Zorba
installation.

Currently, the Zorba team does not provide source downloads for the
non-core modules. However, there is a simple CMake script inside Zorba
which will allow you to check out these modules from source control
easily. Note that this requires having the Bazaar utility available
on your system; see \ref checkout_source for more information.

From your {ZORBASRC} directory, type
\code
  cmake -Doutdir=../zorba_modules -Dmodname=NAME -P modules/DownloadModules.cmake
\endcode

to download the particular module package NAME (see \ref
non_core_modules for a complete list of module packages and their
contents), or

\code
  cmake -Doutdir=../zorba_modules -Dallmodules=1 -P modules/DownloadModules.cmake
\endcode

to download all the modules. (On Windows, you will need to use backslashes instead of forward slashes in the above paths.)

This will place the downloaded module source code in the directory
<tt>../zorba_modules</tt>, which is where the Zorba build will look
for them by default. If you wish to download them to some other
location, you may do so; in that case, when you configure the Zorba
build with CMake, provide the \c
-DZORBA_MODULES_DIR=/full/path/to/modules argument.

\note
Please note that some of these modules depend on other modules.  Most
notably, the EXPath http-client module (in the
<a href="/modules/latest/expath.org/ns/http-client">http-client</a> module
package) depends on the
<a href="/modules/latest/www.zorba-xquery.com/modules/converters/html">html</a>
module, which is in the <b>data-converters</b> module package. So, if you
download the <b>http-client</b> package, you must also download the
<b>data-converters</b> package (and ensure that
<a href="http://tidy.sourceforge.net/">libtidy</a> is installed; see \ref noncore_requirements).
\note
Please see our <a href="/images/doxygen/modules.svg">module-interdependency graph</a> for details.

\section create_build_dir Creating a Build Directory

Zorba requires an <a
href="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F"
target="_blank">out-of-source build</a>, which means you need to
create a separate (empty) build directory. A common convention is to
create a directory named <b>"build"</b> in the Zorba source directory,
but you may name it and place it anywhere you like.  We refer to this
directory as \c {ZORBABUILD} in the following steps.

\section prepare_next What's next?

Now, go on to \ref configure_zorba.

*/
