/** \page ft_stemmer Full Text Stemming

\section ft_stemmer_intro Introduction

The Zorba XQuery engine implements the
<a href="http://www.w3.org/TR/xpath-full-text-10/">XQuery and XPath Full Text 1.0</a>
specification that, among other things,
adds the ability to use stemming for text-matching
via the <a href="http://www.w3.org/TR/xpath-full-text-10/#ftstemoption">stemming option</a>.
For example, the query:

\code
let $x := <msg>Self Improvement</msg>
return $x contains text "improve"
  using stemming
\endcode

returns \c true because \c $x contains "Improvment"
that has the same stem as "improve".

The initial implementation of the stemming option uses the
<a href="http://snowball.tartarus.org/texts/stemmersoverview.html">Snowball stemmers</a>
and therefore can stem words in the following languages:
Danish,
Dutch,
English,
Finnish,
French,
German,
Hungarian,
Italian,
Norwegian,
Portuguese,
Romanian,
Russian,
Spanish,
Swedish,
and
Turkish.

\section ft_stemmer_providing Providing Your Own Stemmer

Using the Zorba C++ API,
you can provide your own stemmer
by deriving from two classes:
\c Stemmer
and
\c StemmerProvider.

\subsection ft_class_stemmer The Stemmer Class

The \c Stemmer class is:

\code
class Stemmer {
public:
  virtual ~Stemmer();
  virtual void stem( String const &word, locale::iso639_1::type lang, String *result ) const = 0;
};
\endcode

To implement it,
you need only implement the \c stem() function where:

<table>
  <tr>
    <td>\c word</td>
    <td>The word to be stemmed.</td>
  </tr>
  <tr>
    <td>\c lang</td>
    <td>The language of the word.</td>
  </tr>
  <tr>
    <td>\c result</td>
    <td>The stemmed word goes here.</td>
  </tr>
</table>

A very simple stemmer that stems the word "foobar" to "foo"
can be implemented as:

\code
class MyStemmer : public Stemmer {
public:
  void stem( String const &word, locale::iso639_1::type lang, String *result ) const;
};

void MyStemmer::stem( String const &word, locale::iso639_1::type lang, String *result ) const {
  if ( word == "foobar" )
    *result = "foo";
  else
    *result = word; // Don't know how to stem word: set result to word as-is.
}
\endcode

A real stemmer would either use a stemming algorithm
or a dictionary look-up
to stem many words,
of course.

Although not used in this simple example,
\c lang can be used to allow a single stemmer instance
to stem words in more than one language.

\subsection ft_class_stemmer_provider The StemmerProvider Class

In addition to a \c Stemmer,
you must also implement a \c StemmerProvider
that, given a language, provides a \c Stemmer for that language:

\code
class StemmerProvider {
public:
  virtual ~StemmerProvider();
  virtual Stemmer const* getStemmer( locale::iso639_1::type lang ) const = 0;
};
\endcode

A simple \c StemmerProvider for our simple stemmer can be implemented as:

\code
class MyStemmerProvider : public StemmerProvider {
public:
  Stemmer const* getStemmer( locale::iso639_1::type lang ) const;
};

Stemmer const* MyStemmerProvider::getStemmer( locale::iso639_1::type lang ) const {
  static MyStemmer stemmer;
  switch ( lang ) {
    case iso639_1::en:
    case iso639_1::unknown: // Handle "unknown" language since, in many cases, the language is not known.
      return &stemmer;
    default: 
      //
      // We have no stemmer for the given language: return null to indicate this.
      // Zorba will then use the built-in stemmer for the given language.
      //
      return 0;
  }
}
\endcode

\subsection ft_stemmer_enable Using Your Stemmer

To enable your stemmer to be used,
you need to add it to a static context:

\code
StaticContext_t sctx = zorba->createStaticContext();
MyStemmerProvider provider;
sctx->addStemmerProvider( &provider );
\endcode

*/
/* vim:set et sw=2 ts=2: */
