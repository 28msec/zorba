/** \page xqdoc Commenting XQuery Code with xqDoc

\section intro_xqdoc Introduction
The goal of xqDoc is to provide a simple vendor neutral solution for documenting XQuery modules, as well as tools to generate a user friendly presentation of this documentation and cross referencing information.
Therefore, xqDoc proposes a new commenting convention that extends the currently defined XQuery comment style.
This convention is modeled after Java's Javadoc commenting style, and provides a simple, uniform way to document XQuery source code.
You can find more information about xqDoc on the <a href="http://xqdoc.org" target="_blank">website of the xqDoc project</a>.

\section xqdoc_process Using xqDoc
Generating a user friendly presentation of the documentation is accomplished in the following steps:

<ul>
  <li> xqDoc proposes a new commenting convention that extends the currently defined XQuery comment style.
    For example, an xqDoc commented XQuery function might looks as follows:
    \code
      (:~
       : The controller for constructing the xqDoc HTML information for
       : the specified library module. The following information for
       : each library module will be generated.
       : <ul>
       : <li> Module introductory information</li>
       : <li> Global variables declared in this module</li>
       : <li> Modules imported by this module</li>
       : <li> Summary information for each function defined in the module</li>
       : <li> Detailed information for each function defined in the module</li>
       : </ul>
       :
       : @param $uri the URI for the library module
       : @param $local indicates whether to build static HTML link for offline
       : viewing or dynamic links for real-time viewing.
       : @return XHTML.
       :)
      define function print-module($uri as xs:string, $local as xs:boolean) as element()*
    \endcode

  <li> In the second step, a xqDoc-enabled processor can parse such documentation and generate a vendor neutral XML document which stores all the information about the code and the comments.
       Such a document adheres to the xqDoc Schema. 
       Zorba imple
  <li> In the last step, the information of an XML document generated by the second step, can be transformed into arbitrary presentation formats (e.g. html).
</ul>

Zorba implements the first and second step of this process.
That is, Zorba can parse XQuery modules which are annotated with xqDoc-style documentation and generate the vendor neutral XML representation.
In order to do this, Zorba provides an XQuery module that is described in the following.

\section xqdoc_module xqDoc with Zorba
The xqDoc functionality available in Zorba is provided in an XQuery module.
The module is in the namespace with URI <tt>"http://www.zorba-xquery.com/zorba/xqdoc-functions"</tt> and has to be included as follows:

\code
  import module namespace zorba-xqoc = "http://www.zorba-xquery.com/zorba/xqdoc-functions";
\endcode

The module currently declares one function which takes the URI of an XQuery module as input and returns an xqDoc document.
The signature of this function is

\code
  declare function xqdoc($query as xs:string) as node()+
\endcode

The parameter <tt>query</tt> is interpreted as an <tt>xs:anyURI</tt> (eventually resolving it if the given string is not an absolute URI).
The result of this function can be used to in a query which generates some kind of presentation friendly documentation.
Please note that so far you can use the xqDoc function to generate an single file documentation.

\subsection ex_xqdoc Example:
\code
  import module namespace
  fn-zorba-xqdoc="http://www.zorba-xquery.com/zorba/xqdoc-functions";
  fn-zorba-xqdoc:xqdoc("atom.xq")
\endcode

You can use xqDoc XML schema to validate the generated documentation. 
\code
  import module namespace
  fn-zorba-xqdoc="http://www.zorba-xquery.com/zorba/xqdoc-functions";
  import schema namespace xqoc="http://www.xqdoc.org/1.0" at "xqdoc-1.0.xsd"

  validate { fn-zorba-xqdoc:xqdoc("atom.xq") }
\endcode


*/

