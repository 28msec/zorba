/** \page build Build Instructions

\section requirements Requirements

\subsection buildsystem Build System
In order to build Zorba, you need the Cross-Platform Make CMake 2.4 or higher. You can download it from http://www.cmake.org/.

\subsection compilers Compilers
Zorba is tested with the following compilers:
- GNU Compiler: GCC 3.4.x (32bit & 64bit) and GCC 4.x.x
- Microsoft Compiler: MS VC++ 2005 and MS VC++ 2008


\subsection packages Packages
In order ot build Zorba, you need the following libraries and development headers to be installed:
- Libxml2 2.2.16 or higher (http://xmlsoft.org/ )
  - Iconv 1.12 (used by Libxml2; http://www.gnu.org/software/libiconv/)
- ICU 2.6 or higher (http://www.icu-project.org/)
- Boost 1.32 or higher (http://www.boost.org/) 
  - boost_program_options
  - boost_date_time
  - boost_filesystem
- Xerces-C 2.7.0 or higher (http://xerces.apache.org/xerces-c/)
- <em>Optional Packages</em>
  - CURL 7.12 (used to enable REST and HTTP; http://curl.haxx.se/)
- <em>Optional Packages that are required if you want to build the scanner and parser</em>
  - Flex 2.5.33 or higher (http://flex.sourceforge.net/)
  - Bison 2.3 or higher (http://www.gnu.org/software/bison/)

\subsection buildingzorba Building Zorba
-# Install the Zorba source distribution (see \ref installation). The directory in which the Zorba
           sources are installed is refered to as <tt>[ZORBA]</tt> in the following.
-# Change the working directory into <tt>[ZORBA]</tt>.
-# The recommended way to build Zorba is by creating and <a href="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F" target="_blank">out-of-source build</a>. We suggest to create the directory <tt>[ZORBA]/build</tt> and refer to this directory as <tt>[ZORBABUILD]</tt> in the following.
-# Change the working directory into the <tt>[ZORBABUILD]</tt> directory and execute cmake as follows: <tt>cmake [ZORBA]</tt>. In case the <tt>[ZORBABUILD]</tt> is located directly within the <tt>[ZORBA]</tt> directory just type <tt>cmake ..</tt> . This command should configure Zorba and prepare for the build. CMake will tell you if your installation is missing some of the required libraries or development headers.
-# If CMake was executed successfully, you should be able to run <tt>make</tt>. Running make will take some time. If make finished successfully, you're ready to install and run Zorba (see \ref installation).

\subsection buildoptions Build Options
- CMake is a meta build system, meaning it is able to generate native makefiles (e.g. GNU Make or NMake) and workspaces (e.g. KDevelop or Visual Studio Projects). For example, you can create
  a KDevelop Project by executing the following command in the <tt>[ZORBA]</tt> directory: <tt>cmake -G KDevelop3 [ZORBABUILD]</tt>.
- CMake supports multiple build configurations (e.g. Debug, Release, or MinSizeRel. By default, Zorba is build with the Release configuration. To change the build mode (to Debug, Release, RelWithDebInfo or MinSizeRel), you can pass an additional parameter to CMake, e.g. <tt>cmake -D CMAKE_BUILD_TYPE=Debug [ZORBA]</tt>.

\section mac Note for Mac OS Users
The easiest way to install the required packages (like CMake, Boost, etc.) is to use Darwin Ports (http://darwinports.com/). After installating Darwin Ports, you should run <tt>sudo port -d selfupdate</tt> to upgrade the package lists. If this was successfull, you can simply install packages by typing e.g. <tt>sudo port install cmake</tt>.
Note that libxml2 is already installed as part of Mac OS X.

\subsection universal Building as Universal binaries

To build zorba as a universal binary one must also build the required
external libaries as universal.  In most cases this is as easy as
building them non-universal.   Following are instructions on how to do so.

For ICU and Xerces-C the 
<a href="http://developer.apple.com/documentation/Porting/Conceptual/PortingUnix/compiling/chapter_4_section_3.html">

instructions given by Apple </a> almost just work.  One should change
the CFLAGS to CXXFLAGS.  Zorba developers prefer a variation on those
instructions like this ...

@verbatim
./configure CXXFLAGS="-arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.5.sdk" \
-disable-dependency-tracking LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.5.sdk \
-arch i386 -arch ppc"
@endverbatim

As noted by Apple, dependency generation by gcc doesn't work when building universal, thus it is turned off with the above command.

Since Boost uses @em bjam instead of @em make, it's not obvious how to
build it for universal binaries.  However, the following patch was
found by another project that uses Boost and works for Boost-1.33.1

@verbatim
$ cd boost_1_33_1
$ patch -p0 <<EOF
--- tools/build/v1/darwin-tools.jam.orig        2006-08-07 11:52:23.000000000 +\0200
+++ tools/build/v1/darwin-tools.jam     2006-08-07 11:40:26.000000000 +0200
@@ -104,6 +105,8 @@
 {
     flags darwin C++FLAGS : -fcoalesce-templates ;
 }
+flags darwin CFLAGS : -arch i386 -arch ppc ;
+flags darwin LINKFLAGS : -arch i386 -arch ppc ;
 flags darwin LINKFLAGS <runtime-link>static : -static-libgcc ;
 flags darwin CFLAGS <debug-symbols>on : -g ;
 flags darwin LINKFLAGS <debug-symbols>on : -g ;
EOF
@endverbatim

Note this patch adds two lines to the specified file..  After making
this patch one can procced as if Boost was using the standard GNU
autotools, namely 
\verbatim 
> configure 
> make 
> sudo make install
\endverbatim

Note the above is not documented in the Boost documentation but it
works just fine on Mac OS X and Linux as well.

For Boost-1.35 life has changed.  After configuring Boost as above, modify the
top of the generated Makefile with a line that reads

\verbatim
BJAM_CONFIG=architecture=combined
\endverbatim

One last problem is that the "make install" doesn't install the
variation of the Boost libraries required by Zorba.  The quick fix is
to create symbolic links by hand in @em /usr/local/lib.  So that one has

\verbatim
libboost_date_time-mt.dylib -> libboost_date_time-mt-1_35.dylib
libboost_date_time.dylib -> libboost_date_time-mt-1_35.dylib
libboost_filesystem-mt.dylib -> libboost_filesystem-mt-1_35.dylib
libboost_filesystem.dylib -> libboost_filesystem-mt-1_35.dylib
libboost_program_options-mt.dylib -> libboost_program_options-mt-1_35.dylib
libboost_program_options.dylib -> libboost_program_options-mt-1_35.dylib
\endverbatim

After installing the external libraries as universal binaries, Zorba
itself can be built universal by adding an argument to the cmake
command as follows

\verbatim
> cmake -D UNIVERSAL ..
\endverbatim



\section windows Notes for Windows Users
- In order to compile Zorba on Windows, you need a working Visual Studio installation.
- Additionally, you need the following packages to be installed for your Visual Studio installation.
  -# CMake (http://www.cmake.org/)
  -# Boost (program_options, date_time, filesystem). We recommend to use the package provided by boost consulting (http://www.boost-consulting.com/products/free/).
  -# Libxml2 and Iconv (http://www.zlatkovic.com/pub/libxml/) 
  -# ICU (http://download.icu-project.org/files/icu4c/)
- Note that the path to all of the installed libraries need to be included in the <tt>PATH</tt> environment variable.
  \code path_to_boost\bin;path_to_libxml2\bin;path_to_icu\bin;path_to_iconv\bin;path_to_xerces\bin \endcode

\subsection nmake Building Zorba using a NMake Project
-# Start a Visual Studio Command Line
-# Change the current working directory into the <tt>[ZORBA]</tt> directory.
-# The recommended way to build Zorba is by creating and <a href="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F" target="_blank">out-of-source build</a>. We suggest to create the directory <tt>[ZORBA]/build</tt> and refer to this directory as <tt>[ZORBABUILD]</tt> in the following.
-# Execute CMake as follows <tt>cmake -G "NMake Makefiles" [ZORBA]</tt>. Unfortunately, CMake does not find all the development headers and libraries itself. Hence, you need to tell CMake where they are located. This can be done by the following command:
\code
"cmake" 
-G "NMake Makefiles"
-D ICU_LIBRARY="path_to_icu\lib\icuuc.lib" 
-D ICU_DATA_LIBRARY="path_to_icu\lib\icudt.lib" 
-D ICU_I18N_LIBRARY="path_to_icu\lib\icuin.lib" 
-D ICU_INCLUDE="path_to_icu\include" 
-D ICONV_INCLUDE_DIR="path_to_iconv\include" 
-D ICONV_LIBRARY="path_to_iconv\lib\iconv.lib" 
-D LIBXML2_INCLUDE_DIR="path_to_libxml2\include" 
-D LIBXML2_LIBRARIES="path_to_libxml2\lib\libxml2.lib" 
-D BOOST_ROOT="path_to_boost" 
-D XERCESC_INCLUDE="path_to_xerces\include" 
-D XERCESC_LIBRARY="path_to_xerces\lib\xerces-c_2.lib"
..\
\endcode
-# Compile Zorba by calling <tt>nmake</tt> from the <tt>[ZORBABUILD]</tt> directory.

\subsection visualstuido Building Visual Studio Project
-# Start Visual Studio Command Line
-# Change the current working directory into the <tt>[ZORBA]</tt> directory.
-# Execute CMake as described above but with the <tt>-G "Visual Stuido X 200Y</tt> option instead of <tt>-G "NMake Makefiles"</tt>.
-# Start Visual Studio, open the generated zorba.svl project file, and start compilation.
*/
