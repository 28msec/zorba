												/** \page build Build Instructions

  <ul>
    <li> Table of Contents
    <ul>
      <li> \ref requirements
      <ul>
        <li> \ref buildsystem
        <li> \ref compilers
        <li> \ref packages
        <li> \ref buildingzorba
        <li> \ref buildoptions
      </ul>
      <li> \ref mac
      <ul>
        <li> \ref universal
        <li> \ref mac_installer
      </ul>
      <li> \ref windows
      <ul>
        <li> \ref nmake
        <li> \ref visualstudio
        <li> \ref https_support
      </ul>
    </ul>
 </ul>

\section requirements Requirements

\subsection buildsystem Build System

In order to build Zorba, you need the Cross-Platform Make CMake 2.4 or
higher, but not CMake 2.6.3 which has a serious bug preventing Zorba
build. You can download it from http://www.cmake.org/.

\subsection compilers Compilers
Zorba is tested with the following compilers:
- GNU Compiler: GCC 3.4.x (32bit & 64bit) and GCC 4.x.x
- Microsoft Compiler: MS VC++ 2005 and MS VC++ 2008


\subsection packages Packages
In order to build Zorba, you need the following libraries and development headers to be installed:
- Libxml2 2.2.16 or higher (http://xmlsoft.org/ )
  - Iconv 1.12 (used by Libxml2; http://www.gnu.org/software/libiconv/)
- ICU4C 3.6 or higher (http://www.icu-project.org/)
- Xerces-C 2.8.0 or 3.0.0 (http://xerces.apache.org/xerces-c/)
- <em>Optional Packages</em>
  - CURL 7.12 or higher (used to enable REST and HTTP; http://curl.haxx.se/)
  - Tidy (used to enable tidy functions; http://tidy.sourceforge.net)
  - LibXslt (used for compiling XQueryX code (http://xmlsoft.org/XSLT/); version 1.1.24 has been tested)
  - IMAP CClient (http://www.washington.edu/imap/) used for email sending functions
  - Java (http://java.sun.com/javase/downloads/index.jsp) + Apache FOP (http://xmlgraphics.apache.org/fop/download.html) if the FOP library should be used.
- <em>Optional Packages that are required if you want to build language bindings</em>
  - Swig (http://www.swig.org/download.html) + Java (http://java.sun.com/javase/downloads/index.jsp) for the Java language binding
  - Swig (http://www.swig.org/download.html) + Ruby (http://www.ruby-lang.org/en/downloads/) for the Ruby language binding
  - Swig (http://www.swig.org/download.html) + PHP (http://www.php.net/downloads.php) for the PHP language binding
  - Swig (http://www.swig.org/download.html) + Python (http://www.python.org/download/) for the Python language binding
- <em>Optional Packages that are required if you want to build the scanner and parser</em>
  - Flex 2.5.33 or higher (http://flex.sourceforge.net/)
  - Bison 2.4 or higher (http://www.gnu.org/software/bison/)

\subsection buildingzorba Building Zorba
-# Install the Zorba source distribution (see \ref installation). The directory in which the Zorba
           sources are installed is referred to as <tt>[ZORBA]</tt> in the following.
-# Change the working directory into <tt>[ZORBA]</tt>.
-# The recommended way to build Zorba is by creating an <a href="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F" target="_blank">out-of-source build</a>. We suggest to create the directory <tt>[ZORBA]/build</tt> and refer to this directory as <tt>[ZORBABUILD]</tt> in the following.
-# Change the working directory into the <tt>[ZORBABUILD]</tt> directory and execute cmake as follows: <tt>cmake [ZORBA]</tt>. In case the <tt>[ZORBABUILD]</tt> is located directly within the <tt>[ZORBA]</tt> directory just type <tt>cmake ..</tt> . This command should configure Zorba and prepare for the build. CMake will tell you if your installation is missing some of the required libraries or development headers.
-# If CMake was executed successfully, you should be able to run <tt>make</tt>. Running make will take some time. If make finished successfully, you're ready to install and run Zorba (see \ref installation).

\subsection buildoptions Build Options
- CMake is a meta build system, meaning it is able to generate native makefiles (e.g. GNU Make or NMake) and workspaces (e.g. KDevelop or Visual Studio Projects). For example, you can create
  a KDevelop Project by executing the following command in the <tt>[ZORBA]</tt> directory: <tt>cmake -G KDevelop3 [ZORBABUILD]</tt>.
- CMake supports multiple build configurations (e.g. Debug, Release, or MinSizeRel. By default, Zorba is build with the Release configuration. To change the build mode (to Debug, Release, RelWithDebInfo or MinSizeRel), you can pass an additional parameter to CMake, e.g. <tt>cmake -D CMAKE_BUILD_TYPE=Debug [ZORBA]</tt>.
- Zorba has other options as well. You can tweak the performance and library footprint by enabling or disabling various features from Zorba. Details here \ref zorba_options.

\section mac Note for Mac OS Users 

The easiest way to install the required packages (like CMake, etc.) is
to use Darwin Ports (http://darwinports.com/). After installing Darwin
Ports, you should run <tt>sudo port -d selfupdate</tt> to upgrade the
package lists. If this was successful, you can simply install packages
by typing e.g. <tt>sudo port install cmake</tt>.  Note that versions
of libcurl and libtidy, that are already installed as part of Mac OS X
are sufficient.  However, a newer version of libxml2 than the one that
is part of Mac OS X (v 2.6.16) is needed which can be obtained from
Darwin Ports (v 2.6.31) or from source (v 2.2.7 ).  Assumming the
latter, one add the following to the cmake configuration options

\verbatim
cmake -D LIBXML2_LIBRARIES=/usr/local/lib/libxml2.dylib
\endverbatim


\subsection universal Building as Universal binaries

To build zorba as a universal binary one must also build the required
external libraries as universal.  In most cases this is as easy as
building them non-universal.   Following are instructions on how to do so.

For  Xerces-C the 
<a href="http://developer.apple.com/documentation/Porting/Conceptual/PortingUnix/compiling/chapter_4_section_3.html">

instructions given by Apple </a> almost just work.  One should change
the CFLAGS to CXXFLAGS because Xerces is written in C++.  Zorba
developers prefer a variation on those instructions like this ...

@verbatim
./configure CXXFLAGS="-arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.5.sdk" \
-disable-dependency-tracking LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.5.sdk \
-arch i386 -arch ppc"
@endverbatim

Since libxml2 is written in C, change CXXFLAGS to CFLAGS in the above.
As noted by Apple, dependency generation by gcc doesn't work when
building universal, thus it is turned off with the above command.


For ICU, one must build the libraries seperately on PPC and Intel
platforms then combine the them into a Universal library.  The reason
for this is that ICU tests for endianess at configure time (i.e. before
compiling), thus the compiled code will only have endianess correct
for one platform.  The script <em> zorba/scripts/makefat.sh </em>
shows one how to do the combining.

Once all the external libraries are built and installed Universal, one
can build zorba Universal setting the CMake variable UNIVERSAL on like this

\verbatim
cmake -D UNIVERSAL=1 ..
\endverbatim

\subsection mac_installer Building Mac OS X Installer

In order to build an installer package, one should run cmake with an
extra flag as follows...

@verbatim
> cmake -DCMAKE_SKIP_BUILD_RPATH=1 .. 
@endverbatim

This will remove the build path from the installed executables and
libraries.  It will also add some symbolic links to the libraries.

\section windows Notes for Windows Users
- In order to compile Zorba on Windows, you need a working Visual Studio (Express) installation.
- Additionally, you need the following packages to be installed for your Visual Studio installation. Make sure that the libraries are compiled for your version of Visual Studio.
  -# CMake (http://www.cmake.org/)
  -# Libxml2 and Iconv (http://www.zlatkovic.com/pub/libxml/) 
  -# ICU (http://download.icu-project.org/files/icu4c/)
  -# Xerces-C (http://xerces.apache.org/xerces-c/download.cgi)
- Optional 
  -# CURL (http://curl.haxx.se/download.html)(if you want to have REST support or call http URIs)
  -# Tidy (http://dev.int64.org/tidy.html) (if you intend to use HTML files and have to transform them into syntactically valid XML)
  -# Libxslt (http://www.zlatkovic.com/pub/libxml/)
  -# IMAP CClient (http://www.washington.edu/imap/) used for email sending functions
  -# Java (http://java.sun.com/javase/downloads/index.jsp) + Apache FOP (http://xmlgraphics.apache.org/fop/download.html) if the FOP library should be used.
  -# <em>Optional Packages that are required if you want to build language bindings</em>
    -# Swig (http://www.swig.org/download.html) + Java (http://java.sun.com/javase/downloads/index.jsp) for the Java language binding
    -# Swig (http://www.swig.org/download.html) + Ruby (http://www.ruby-lang.org/en/downloads/) for the Ruby language binding
    -# Swig (http://www.swig.org/download.html) + PHP (http://www.php.net/downloads.php) for the PHP language binding
    -# Swig (http://www.swig.org/download.html) + Python (http://www.python.org/download/) for the Python language binding
  -# <em>Optional Packages that are required if you want to build the scanner and parser</em>
    -# Flex 2.5.33 or higher (http://flex.sourceforge.net/)
    -# Bison 2.4 or higher (http://www.gnu.org/software/bison/)
- In order to execute Zorba, please note that the paths to all of the installed libraries need to be included in the <tt>PATH</tt> environment variable.
  \code path_to_libxml2\bin;path_to_icu\bin;path_to_iconv\bin;path_to_xerces\bin \endcode
  To do this, right click on My Computer -> Properties -> Advanced -> Environment Variables and edit the PATH variable. Alternatively, you can also copy all the dlls
  in the same directory as the zorba.exe file (or your own executable if you build an application that is using Zorba).
- Note, you can also use CMake's graphical interface. This can usually be found in Start menu. This eases up setup and makes it more intuitive.

\subsection nmake Building Zorba using a NMake Project
-# Start a Visual Studio Command Line
-# Change the current working directory into the <tt>[ZORBA]</tt> directory.
-# The recommended way to build Zorba is by creating an <a href="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F" target="_blank">out-of-source build</a>. We suggest to create the directory <tt>[ZORBA]/build</tt> and refer to this directory as <tt>[ZORBABUILD]</tt> in the following.
-# Execute CMake as follows <tt>cmake -G "NMake Makefiles" [ZORBA]</tt>. Unfortunately, CMake does not find all the development headers and libraries itself. Hence, you need to tell CMake where they are located. This can be done by the following command:
\code
"cmake" 
-G "NMake Makefiles"
-D ICU_LIBRARY="path_to_icu\lib\icuuc.lib" 
-D ICU_DATA_LIBRARY="path_to_icu\lib\icudt.lib" 
-D ICU_I18N_LIBRARY="path_to_icu\lib\icuin.lib" 
-D ICU_INCLUDE="path_to_icu\include" 
-D ICONV_INCLUDE_DIR="path_to_iconv\include" 
-D ICONV_LIBRARY="path_to_iconv\lib\iconv.lib" 
-D LIBXML2_INCLUDE_DIR="path_to_libxml2\include" 
-D LIBXML2_LIBRARIES="path_to_libxml2\lib\libxml2.lib" 
-D XERCESC_INCLUDE="path_to_xerces\include" 
-D XERCESC_LIBRARY="path_to_xerces\lib\xerces-c_2.lib"
..\
\endcode

If you need CURL (e.g. to have REST support) you have to point two CMake variables to CURL's include directory and the CURL library.
\code
- D ZORBA_WITH_REST=ON
- D CURL_INCLUDE_DIR="path_to_curl\include"
- D CURL_LIBRARY="path_to_curl\lib\curllib.lib"
\endcode

If you additionally want to have support for Tidy in order to syntactically cleanup HTML documents,  you have to set the following CMake variables:
\code
- D ZORBA_WITH_TIDY=ON
- D LIBTIDY_INCLUDE_DIR="path_to_tidy\include"
- D LIBTIDY_LIBRARIES="path_to_tidy\lib\tidy.lib"
\endcode

In order to add XQueryX support you have to add ZORBA_XQUERYX=ON and add the paths to libxslt
\code
-D ZORBA_XQUERYX=ON
-D LIBXSLT_INCLUDE_DIR="path_to_libxslt\include"
-D LIBXSLT_LIBRARIES="path_to_libxslt\lib\libxslt.lib"
\endcode

For using the email functionality you have to add the cclient lib:
\code
-D CCLIENT_INCLUDE="path_to_imap_2007e\c-client"
-D CCLIENT_LIBRARY="path_to_imap_2007e\c-client\release\cclient.lib"
\endcode

After you've provided all of the required variables, you are ready to call <tt>nmake</tt> from the <tt>[ZORBABUILD]</tt> directory.

\subsection visualstudio Building Visual Studio Project
-# Start Visual Studio Command Line
-# Change the current working directory into the <tt>[ZORBA]</tt> directory.
-# Execute CMake as described above but with the <tt> -G "Visual Studio X 200Y" </tt> option instead of <tt> -G "NMake Makefiles"</tt>.
-# Start Visual Studio, open the generated <tt>zorba.sln</tt> project file, and start compilation.

\subsection https_support HTTPS support
- In order to have SSL support in Zorba you have to use the CURL library that has SSL support. 
- To use CURL+SSL you have to set ZORBA_WITH_REST and ZORBA_WITH_SSL to ON in cmake.
- There is one more thing: in order to validate the server's certificate, CURL+SSL needs to know
about the root Certificates of Authenticity (CA), this is a set of public keys freely available on the internet. 
- On Windows, Zorba expects this file to be called "cacert.pem" and searches for it in current dir and system paths. 
- This "cacert.pem" file can be found on curl page: http://curl.haxx.se/docs/caextract.html .
- In order to disable the validation of server certificate, the ZORBA_VERIFY_PEER_SSL_CERTIFICATE can be set to OFF in cmake 
(and actually this is the default value). Set it to ON to validate server certificate chain on every access to https:// .
- More read about CURL+SSL : http://curl.haxx.se/docs/sslcerts.html .
- As a https test page we used for example the rss feed fn:doc('https://www.npr.org/rss/rss.php?id=1001') .

*/
