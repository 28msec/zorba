/** \page build Zorba Build Instructions

\section requirements Requirements

\subsection buildsystem Build System

In order to build Zorba, you need the Cross-Platform Make CMake 2.6 or later
(except CMake 2.6.3 that has a serious bug preventing Zorba from building).
You can download CMake from http://www.cmake.org/.

\subsection compilers Compilers
Zorba is tested with the following compilers:
- GNU Compiler: GCC 3.4.x (32-bit & 64-bit) and GCC 4.x.x
- Microsoft Compiler: MS VC++ 2008, and MS VC++ 2010 (including Express)

\subsection required_libs Required Libraries
In order to build Zorba, you need the following libraries and development headers:

\subsubsection required_core_zorba Required for Core Zorba
The following packages are mandatory to build the core part of Zorba.

<ul>
  <li>Libxml2 2.2.16 or later (http://xmlsoft.org/)</li>
  <li>Iconv 1.12 (used by Libxml2; http://www.gnu.org/software/libiconv/)</li>
  <li>ICU4C 3.6 or later (http://www.icu-project.org/)</li>
</ul>

\subsubsection optional_core_zorba Optional for Core Zorba
The following packages are only required to build Zorba with some features (e.g. XML Schema or HTTP support).

<ul>
  <li>Xerces-C 2.8.0, 3.0.0 or later (http://xerces.apache.org/xerces-c/). This package is only required if built
    with XML schema support. This feature is enabled by default. In order to disable XML schema support, you need
    to provide the CMake configuration variable \c ZORBA_NO_XMLSCHEMA=ON.
  </li>
  <li>CURL 7.12 or later (http://curl.haxx.se/). This package is only required if
    <a href="../../zorba/xqdoc/xhtml/www.zorba-xquery.com_modules_http-client.html">Zorba's HTTP module</a>
    should be available.
    Zorba will automatically be built with this module if the curl packages are installed. In order to suppress
    HTTP support even though curl is installed, please set the CMake configuration variable \c ZORBA_SUPPRESS_CURL=ON.
    Please note that other modules depend on this module (i.e. import it). Hence, those depending modules
    will not work if the http module is not available. Please see our
    <a href="../../zorba/xqdoc/xhtml/images/modules.svg">module dependency graph</a> for the
    module inter-dependencies.
  </li>
  <li>LibXslt version 1.1.24 or later (http://xmlsoft.org/XSLT/). The LibXslt package is required for XQueryX support
    (XQuery 1.0, XQuery 3.0, XQuery Update, and XQuery Full Text). This feature is not enabled by default.
    It can be enabled if Zorba is compiled using the the CMake configuration variable \c ZORBA_XQUERYX=ON.
  </li>
  <li>Flex 2.5.33 or later (http://flex.sourceforge.net/) and Bison 2.4 or later (http://www.gnu.org/software/bison/)
    are required to generate the XQuery scanner and XQuery parser. These packages are optional and only required
    if you want to make modifications to the scanner or parser, respectively.
  </li>
</ul>

\subsubsection required_language_bindings Required for Language Bindings
In order to build the various language bindings that come with Zorba, you need
at least Swig 1.3.40 or later (http://www.swig.org/download.html).
All bindings are generated using Swig.

For a particular language binding, you need the corresponding language tools
and development headers.

- Java (http://java.sun.com/javase/downloads/index.jsp)
- Ruby (http://www.ruby-lang.org/en/downloads/)
- PHP (http://www.php.net/downloads.php)
- Python (http://www.python.org/download/)

  
\section buildingzorba Building Zorba
-# Install the Zorba source distribution (see \ref installation).
  The directory in which the Zorba sources are installed
  is referred to as \c [ZORBA] in the following.
-# If desired, also install or download the source for any non-core modules
  that you would like to build along with Zorba, and ensure that you have
  any libraries required by those modules available. See \ref build_noncore
  for more details.
-# Zorba requires an
   <a href="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F" target="_blank">out-of-source build</a>.
   We suggest to create the directory \c [ZORBA]/build
   and refer to this directory as \c [ZORBABUILD] in the following.
-# Change the working directory into the \c [ZORBABUILD] directory
   and execute cmake as follows:
   <tt>cmake [ZORBA]</tt>.
   In case the \c [ZORBABUILD]
   is located directly within the \c [ZORBA] directory,
   you can just type <tt>cmake ..</tt> .
   This command should configure Zorba and prepare for the build.
   CMake will tell you if your installation is missing
   some of the required libraries or development headers.
-# If CMake executed successfully,
   you should be able to build the project. For Makefile-based builds,
   just type \c make (or \c make -j2 to do a parallel build on a multi-core
   machine). For IDE-based builds, open the project created in the previous
   step and build the \c ALL target.
   The build will take some time.
   If it finishes successfully,
   you're ready to install and run Zorba
   (see \ref installation).

\subsection buildoptions Build Options

- CMake is a meta build system,
  meaning that it is able to generate native makefiles
  (e.g. GNU Make or NMake)
  and workspaces
  (e.g. KDevelop or Visual Studio Projects).
  For example,
  you can create a KDevelop Project by executing the following command
  in the \c [ZORBA] directory:
  <tt>cmake -G KDevelop3 [ZORBABUILD]</tt>.
- CMake supports multiple build configurations
  (e.g. Debug, Release, or MinSizeRel).
  By default,
  Zorba is built in the Release configuration.
  To change the build mode (to Debug, Release, RelWithDebInfo or MinSizeRel),
  you can pass an additional parameter to CMake, e.g.,
  <tt>cmake -D CMAKE_BUILD_TYPE=Debug [ZORBA]</tt>.
- Zorba has other options as well.
  You can tweak the performance and library footprint
  by enabling or disabling various features from Zorba.

\section mac Notes for Mac OS X Users 

The easiest way to install the required packages (like CMake or Xerces-C) is
to use Macports (http://macports.org/).

Once all the required packages are installed you can execute CMake.
By default,
CMake on Mac OS X uses the Makefile generator.
Alternatively,
you can specify different generators (e.g., Xcode)
by starting CMake using the -G option (e.g., -G Xcode). 

\subsection swig Swig Version
Due to a bug in older swig version,
Zorba with SWIG support requires SWIG 
version 1.3.40 or later.

To do this,
the swig package from macports should be installed
and point cmake to use the new version:

\code
sudo port install swig
cmake -DCMAKE_PREFIX_PATH=/opt/local ..
\endcode

\section windows Notes for Windows Users
- In order to compile Zorba on Windows,
  you need a working Visual Studio (Express) installation (2008, 2010).
- If you want to compile Zorba using Visual Studio 2008,
  you will need to install the
  <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyId=D466226B-8DAB-445F-A7B4-448B326C48E7" target="_blank">Visual C++ 2008 Feature Pack Release</a>.
- Make sure that the libraries required for Zorba
  are built with the same version of Visual Studio that you use.
- The Windows version of some required packages
  are distributed by other web sites
  (all of them are pointed to from the main package web sites
  indicated in the \ref required section):
  - Libxml2 and Iconv: http://www.zlatkovic.com/libxml.en.html
  - CURL: http://curl.haxx.se/download.html
  - Libxslt: http://www.zlatkovic.com/pub/libxml/

- Zorba has in place an automatic DLL detection mechanism.
  This will try to automatically gather all the DLLs
  from the third party librbaries
  and install them with Zorba when you do "name install"
  or you build the Visual Studio INSTALL project.
  Zorba will search for the third party libraries in order in:
  - all the directories pointed by the \c ZORBA_THIRD_PARTY_REQUIREMENTS
    cmake variable
    - e.g. if you have Xerces in "C:\tools" and IConv in "D:\tools",
      you must build with -D ZORBA_THIRD_PARTY_REQUIREMENTS=C:\tools;D:\tool
      and Zorba will find all it needs from Xerces and Iconv.
      (The directory names must contain "xerces" and "iconv" respectively, case insensitive)
  - in the program files directory on your system
    - e.g. if you have cURL installed in "C:\Program Files\*cURL*",
      Zorba will find all it needs from cURL.
      (The directory must contain "curl" case insensitive.)
  - all the paths in the \c PATH variable
    - e.g. if you have "C:\tools\*ICU*\bin" in your path,
      Zorba will find all it needs from ICU.
      (The directory must only contain "icu".)
- Note: you can also use CMake's graphical interface.
  This can usually be found in the \e Start menu.
  This eases the setup and makes it more intuitive.

\subsection nmake Building Zorba using a NMake Project
-# Start a Visual Studio Command Line.
-# Change the current working directory to the \c [ZORBA] directory.
-# It is not allowed to have
   <a href="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F" target="_blank">in-source builds</a>.
   So you must create a build directory (e.g., <tt>[ZORBA]/build</tt>).
   We refer to this directory as \c [ZORBABUILD] in the following steps.
-# Change the current working directory to the \c [ZORBABUILD] directory.
-# Execute CMake as follows <tt>cmake -G "NMake Makefiles" [ZORBA]</tt>.
   CMake will try to find the necessary packages
   in the program files directory
   on your system and in the \c PATH environment variable. If one of the required dependencies were not found, CMake will stop with an error. See the next step only if this step did not find the required third party dependencies on your system.
-# If the command above fails or if you see that some optional packages were not found, you can help CMake a little by providing the lists of path where it should look for the libraries you need. In this case the CMake command should look like:
\code
"cmake" -G "NMake Makefiles" -D ZORBA_THIRD_PARTY_REQUIREMENTS=path\to\dir1;path\to\dir2;...
\endcode

But you can also manually set the paths to individual libraries and include directory by directly providing the variables set by each find package module (in the \c cmake_modules directory).

In order to add XQueryX support you have to add ZORBA_XQUERYX=ON and add the paths to libxslt
\code
-D ZORBA_XQUERYX=ON
-D LIBXSLT_INCLUDE_DIR="path_to_libxslt\include"
-D LIBXSLT_LIBRARIES="path_to_libxslt\lib\libxslt.lib"
\endcode

Now you are ready to call \c nmake from the \c [ZORBABUILD] directory.

\subsection visualstudio Building Visual Studio Project
-# Start Visual Studio Command Line
-# Change the current working directory into the \c [ZORBA] directory.
-# Execute CMake as described above
   but with the appropriate CMake Visual Studio generator
   (<tt>-G "Visual Studio ..."</tt> instead of <tt>-G "NMake Makefiles"</tt>.
-# Start Visual Studio,
   open the generated \c zorba.sln project file,
   and start compilation.

\subsection https_support HTTPS support
- In order to have SSL support in Zorba,
  you have to use the CURL library that has SSL support. 
- There is one more thing:
  in order to validate the server's certificate,
  CURL+SSL needs to know about the root Certificates of Authenticity (CA):
  a set of public keys freely available on the internet. 
- On Windows,
  Zorba expects this file to be called \c cacert.pem
  and searches for it in current directory and system paths. 
- This \c cacert.pem file can be found on the curl page:
  http://curl.haxx.se/docs/caextract.html .
- In order to disable the validation of server certificate,
  the \c ZORBA_VERIFY_PEER_SSL_CERTIFICATE can be set to \c OFF
  in cmake 
  (and actually this is the default value).
  Set it to \c ON to validate server certificate chain
  on every access to \c https:// .
- To read more about CURL+SSL: http://curl.haxx.se/docs/sslcerts.html .
- As an \c https test page,
  we used for example the rss feed
  fn:doc('https://www.npr.org/rss/rss.php?id=1001') .

*/
