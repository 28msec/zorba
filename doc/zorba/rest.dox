/** \page rest REST

  <ul>
    <li> Table of Contents
    <ul>
      <li> \ref intro_rest
      <li> \ref installation_rest
      <ul>
        <li> \ref https_rest
        <li> \ref proxy_rest
      </ul>
      <li> \ref restfunctions
      <ul>
        <li> \ref getfunctions
          <ul>
            <li> \ref getfunctions_tidy
          </ul> 
        <li> \ref postfunctions
          <ul>
            <li> \ref postfunctions_tidy
          </ul> 
        <li> \ref putfunctions
        <li> \ref headfunctions
        <li> \ref deletefunctions>
        <li> \ref parameterdesc
        <ul>
          <li> \ref resturl
          <li> \ref restpayload
          <li> \ref restheaders
          <li> \ref restresult
          <li> \ref resterrors
        </ul>
        <li> \ref restexamples
        <ul>
          <li> \ref restgetexamples
          <li> \ref restpostexamples
          <!--li> \ref restputexamples
          <li> \ref restheadexamples
          <li> \ref restdeleteexamples-->
        </ul>
      </ul>
    </ul>
 </ul>

\section intro_rest 1 Introduction
In order to use Zorba's REST functionality, the module "http://www.zorba-xquery.com/zorba/rest-functions" has
to be included at the beginning of a query. For example

\code
  import module namespace zorba-rest = "http://www.zorba-xquery.com/zorba/rest-functions";
\endcode

Currently, Zorba provides function to setup HTTP GET, POST, PUT, HEAD and DELETE requests. We'll add additional functions with a later release.
Moreover, all of the functions will be declared nondeterministic (as in the upcoming XQuery 1.1. specification) and 
sequential (as in the upcoming XQuery Scripting specification).

\section installation_rest 2 Configuring

\subsection https_rest 2.1 HTTPS note
Please make sure to read the \ref https_support from the build instructions.

\subsection proxy_rest 2.2 Proxy note
If you have a Proxy installed cURL allows you to configure proxy settings using environment variables.
Set the following environment variable according to your settings:

<i><b>http_proxy=http://username:password@proxyserver.example.org:8123/</b></i>

\section restfunctions 3 REST Functions
The following section defines the various REST XQuery functions (and their parameters) provided by Zorba.

\subsection getfunctions 3.1 GET Functions

\code
 declare nondeterministic sequential function zorba-rest:get( url as xs:string)                         as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:get( url as xs:string,
                                                              payload as element(zorba-rest:payload))   as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:get( url as xs:string,
                                                              payload as element(zorba-rest:payload),
                                                              headers as element(zorba-rest:headers)*)  as element(zorba-rest:result);
\endcode

\subsection getfunctions_tidy 3.1.1 GetTidy Functions

Tidy functions allow parsing HTML imput that is not valid XML.
In order to use the functions that require Tidy you have to:\n
- install Tidy either from <a href="http://tidy.sourceforge.net/#binaries" target="_blank">binaries</a> or <a href="http://tidy.sourceforge.net/#source" target="_blank">source code</a>.\n
- rebuild Zorba with ZORBA_WITH_TIDY set to ON.\n

\code
 declare nondeterministic sequential function zorba-rest:getTidy( url as xs:string,
                                                                  $tidyOptions as xs:string)                as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:getTidy( url as xs:string,
                                                                  $tidyOptions as xs:string,
                                                                  payload as element(zorba-rest:payload))   as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:getTidy( url as xs:string,
                                                                  $tidyOptions as xs:string
                                                                  payload as element(zorba-rest:payload),
                                                                  headers as element(zorba-rest:headers)*)  as element(zorba-rest:result);
\endcode

A complete set of options that can be set for the Tidy call can be found at <a href="http://tidy.sourceforge.net/docs/quickref.html" target="_blank">HTML Tidy Configuration Options</a> \n

By default Zorba sets these values for the following options: \n
- char-encoding=utf8 \n
- newline=LF \n
- tidy-mark=true \n
- quote-nbsp=no \n

These options can be overwritten by passing different <b>$tidyOptions</b>. \n
For instance if <b>$tidyOptions</b> is '"newline=CRLF","doctype=omit","force-output","bare=yes"' that would mean that: \n
- <i>newline</i> will be set to <i>CRLF</i> (see <a href="http://tidy.sourceforge.net/docs/quickref.html#newline" target="_blank">newline</a>) \n
- <i>doctype</i> will be set to <i>omit</i> (see <a href="http://tidy.sourceforge.net/docs/quickref.html#doctype" target="_blank">doctype</a>) \n
- <i>force-output</i> will be set to <i>true</i> (see <a href="http://tidy.sourceforge.net/docs/quickref.html#force-output" target="_blank">force-output</a>) \n
- <i>bare</i> will be set to <i>true</i> (see <a href="http://tidy.sourceforge.net/docs/quickref.html#bare" target="_blank">bare</a>) \n

Note: you can set a boolean parameter to true by either of the following methods: \n
- passing only the option name (like <i>force-output</i> in the above example) \n
- passing the option name and the value (like <i>bare</i> in the above example) \n


\subsection postfunctions 3.2 POST Functions

\code
 declare nondeterministic sequential function zorba-rest:post( url as xs:string)                         as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:post( url as xs:string,
                                                               payload as element(zorba-rest:payload))   as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:post( url as xs:string,
                                                               payload as element(zorba-rest:payload),
                                                               headers as element(zorba-rest:headers)*)  as element(zorba-rest:result);
\endcode

\subsection postfunctions_tidy 3.2.1 PostTidy Functions

\code
 declare nondeterministic sequential function zorba-rest:postTidy( url as xs:string,
                                                                  $tidyOptions as xs:string
                                                                  payload as element(zorba-rest:payload),
                                                                  headers as element(zorba-rest:headers)*)  as element(zorba-rest:result);
\endcode

\subsection putfunctions 3.3 PUT Functions

\code
 declare nondeterministic sequential function zorba-rest:put( url as xs:string)                         as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:put( url as xs:string,
                                                              payload as element(zorba-rest:payload))   as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:put( url as xs:string,
                                                              payload as element(zorba-rest:payload),
                                                              headers as element(zorba-rest:headers)*)  as element(zorba-rest:result);
\endcode


\subsection headfunctions 3.4 HEAD Functions

\code
 declare nondeterministic sequential function zorba-rest:head( url as xs:string)                         as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:head( url as xs:string,
                                                               payload as element(zorba-rest:payload))   as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:head( url as xs:string,
                                                               payload as element(zorba-rest:payload),
                                                               headers as element(zorba-rest:headers)*)  as element(zorba-rest:result);
\endcode


\subsection deletefunctions 3.5 DELETE Functions

\code
 declare nondeterministic sequential function zorba-rest:delete( url as xs:string)                         as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:delete( url as xs:string,
                                                                 payload as element(zorba-rest:payload))   as element(zorba-rest:result);
 declare nondeterministic sequential function zorba-rest:delete( url as xs:string,
                                                                 payload as element(zorba-rest:payload),
                                                                 headers as element(zorba-rest:headers)*)  as element(zorba-rest:result);
\endcode



\subsection parameterdesc 3.6 Parameter Descriptions

\subsubsection resturl 3.3.1 URL
The URL as an xs:string. This can be either a HTTP or a HTTPS URL optionally containing additional parameters.

\subsubsection restpayload 3.3.2 Payload

For the GET function, the payload should have the form:

\code
 <zorba-rest:payload>
   <zorba-rest:part name="parameter name">parameter value</zorba-rest:part>
     ...
 </zorba-rest:payload>
\endcode

Accepted parameter values are text nodes. The payload will be assembled as key-value pairs and appended to the URL address.

The POST function accepts any of the following three forms for the payload:

\code
 <zorba-rest:payload filename="filename" content-type="type"/>

 <zorba-rest:payload content-type="content-type">data</zorba-rest:payload>

 <zorba-rest:payload content-type="multipart/form-data">
   <zorba-rest:part name="part name">part value</zorba-rest:part>
   <zorba-rest:part name="part name" filename="file" content-type="type"/>
     ...
 </zorba-rest:payload>
\endcode

In the first two forms the content-type attribute is optional and if missing, a default value is used. In the first form the given file will be posted,
with the default content type of "application/octet-stream". In the second form data may either be a string or an XML part, with the
default content type of "text/plain" and "text/xml", respectively. The third form can be used to post HTML form data and the part values may
be either text nodes or XML parts.


\subsubsection restheaders 3.3.3 Headers
Custom headers to be sent with the HTTP request.

\code
 <zorba-rest:headers>
   <zorba-rest:header name="header name">header value</zorba-rest:header>
   ...
 <zorba-rest:headers>
\endcode

\subsubsection restresult 3.3.4 Result
Contains the reply of the HTTP request.

\code
  <zorba-rest:result>
    <zorba-rest:status_code>code</zorba-rest:status_code>
    <zorba-rest:headers>
      <zorba-rest:header name="header name">header value</zorba:rest:header>
      ...
    </zorba-rest:headers>
    <zorba-rest:payload>
      Payload contents 
      ...
    </zorba-rest:payload>
  </zorba-rest:result>
\endcode

The headers part contains the headers sent by the servers, e.g. content-type, content-length, etc.
The payload will be: an XML part when the content type is xml or xhtml, a text node for all content-types that begin with "text/" (except "text/xml"), and 
a Base64 encoded value in all the other cases.

\subsubsection resterrors 3.3.5 Errors

An error will be generated for any reply that has a status code different from 200. 
The payload, however, will be returned too, if available.

\section restexamples 3.4 REST Examples

\subsection restgetexamples 3.4.1 REST GET Examples

\subsubsection restexample2 Example 1
\include rest_get1.xq

\subsubsection restexample3 Example 2
\include rest_get_tidy1.xq

\subsubsection restexample4 Example 3
\include rest_get_tidy2.xq

\subsubsection restexample5 Example 4
\include rest_get_tidy3.xq

\subsection restpostexamples 3.4.2 REST POST Examples

\subsubsection restpostexample1 Example 1
\include rest_put_tidy1.xq

More examples with the Rest functions can be found on the <a
href="http://try.zorba-xquery.org/" target="_blank">Try Zorba site</a>.

*/
