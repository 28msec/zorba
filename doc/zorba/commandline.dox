/** \page commandline The Zorba Command Line Utility

\section commandLineUsage Usage
%zorba [options]  [-i Query ...] | [-f QueryFile ... ]

\section commandLineHelp Help

\subsection cmdGenericOptions Generic options:

<table border="0">
 <tr>
  <td><tt>  --version</tt></td>
  <td>Print program version.</td>
 </tr>
 <tr>
  <td><tt>  -h [ --help ]</tt></td>
  <td>Print the help list.</td>
 </tr>
</table>

\subsection cmdOutputOptions Output options:

<table border="0">
 <tr>
  <td><tt>  -t [ --timing ]</tt></td>
  <td>Print timing information. In case of multiple queries the timing information if provided per each query.</td>
 </tr>
 <tr>
  <td><tt>  -o [ --output-file ] arg</tt></td>
  <td>Write the result to the given file.</td>
 </tr>
 <tr>
  <td><tt>  --serialize-html</tt></td>
  <td>Serialize the result as HTML.</td>
 </tr>
 <tr>
  <td><tt>  --indent</tt></td>
  <td>Indent output.</td>
 </tr>
 <tr>
  <td><tt>  --print-query</tt></td>
  <td>Print the queries.</td>
 </tr>
 <tr>
  <td><tt>  --byte-order-mark</tt></td>
  <td>Set the byte-order-mark for the serializer.</td>
 </tr>
 <tr>
  <td><tt>  --omit-xml-declaration </tt></td>
  <td>Omit the XML declaration.</td>
 </tr>
</table>

\subsection cmdStaticContextOptions Static context options:

<table border="0">
 <tr>
  <td><tt>  --base-uri arg</tt></td>
  <td>Specify the base URI property of the static context.</td>
 </tr>
 <tr>
  <td><tt>  --boundary-space arg</tt></td>
  <td>Sets the boundary-space policy in the static context. Values allowed are strip or preserve.</td>
 </tr>
 <tr>
  <td><tt>  --default-collation arg</tt></td>
  <td>Add the given collation and set the value of the default collation in the static context to the given collation.</td>
 </tr>
 <tr>
  <td><tt>  --construction-mode arg</tt></td>
  <td>Set the construction mode in the static context. Values allowed are strip or preserve.</td>
 </tr>
 <tr>
  <td><tt>  --ordering-mode arg</tt></td>
  <td>Set the ordering mode in the static context. Values allowed are ordered or unordered.</td>
 </tr>
</table>

\subsection cmdExecuteOptions Execute options:
<table border="0">
 <tr>
  <td><tt>  -m [ --multiple ] arg</tt></td>
  <td>Execute the given queries multiple times.</td>
 </tr>
 <tr>
  <td><tt>  -i [ --inline ] arg</tt></td>
  <td>Inline the queries. All file options (-f) that are provided will be ignored.</td>
 </tr>
 <tr>
  <td><tt>  -f [ --file ] arg</tt></td>
  <td>Treat the arguments as files. In case inline option (-i) is provided, the file option is ignored.</td>
 </tr>
 <tr>
  <td><tt>  -e [ --external-variable ] arg</tt></td>
  <td>Provide the value for a variable given a file (name=file) or a value (name:=value).</td>
 </tr>
 <tr>
  <td><tt>  --context-item arg</tt></td>
  <td>Provide the context item given an XML document in a file.</td>
 </tr>
 <tr>
  <td><tt>  --optimization-level arg</tt></td>
  <td>Optimization level for compiling the query. Values allowed are O0, O1.</td>
 </tr>
</table>

\section commandlineexamples Examples

\subsection cmdlineExample1 Execute inline queries:
This example shows the use of <tt>-t</tt>, <tt>--print-query</tt> output options and <tt>-i</tt> execute option.

Zorba command:
\verbatim
zorba -t --print-query -i "1+1" -i "fn:concat('un', 'grateful')" -i "fn:matches('abracadabra', '^a.*a$')"
\endverbatim

Output:
\verbatim
Query number 1 :
1+1
<?xml version="1.0" encoding="UTF-8"?>
2
Number of executions = 1
Compilation time: 31 milliseconds
First Execution time: 0 milliseconds (i.e. parsing the document is included)

Query number 2 :
fn:concat('un', 'grateful')
<?xml version="1.0" encoding="UTF-8"?>
ungrateful
Number of executions = 1
Compilation time: 9 milliseconds
First Execution time: 0 milliseconds (i.e. parsing the document is included)

Query number 3 :
fn:matches('abracadabra', '^a.*a$')
<?xml version="1.0" encoding="UTF-8"?>
true
Number of executions = 1
Compilation time: 8 milliseconds
First Execution time: 0 milliseconds (i.e. parsing the document is included)
\endverbatim

\subsection cmdlineExample2 Execute update queries:
The purpose of this example is to demonstrate the use of <tt>-f</tt> and <tt>-e</tt> execute options.

 These are the files used in this example and their meaning:
<table border="0">
 <tr>
  <td><tt>  works-mod.xml</tt></td>
  <td>File that will be used as external variable.</td>
 </tr>
 <tr>
  <td><tt>  id-typeswitch-expr-04.xq</tt></td>
  <td>This is an update query. For details please see below.</td>
 </tr>
 <tr>
  <td><tt>  id-typeswitch-expr-04-test.xq</tt></td>
  <td>Query used to see the results of the update query. For details please see below.</td>
 </tr>
</table>

works-mod.xml :
\verbatim
<?xml version="1.0"?>
 <works>
  <employee name="Jane Doe 1" gender="female">
   <empnum>E1</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee>
  <employee name = "John Doe 2" gender="male">
   <empnum>E1</empnum>
   <pnum>P2</pnum>
   <hours>70</hours>
   <hours>20</hours>Text data from Employee[2]
  </employee>
 </works>
\endverbatim

id-typeswitch-expr-04.xq :
\verbatim
(: Description: Evaluation of insert expression used with typeswitch expression where branch (a "case") is an updating expression. :)
(: All other branches return "fn:error()". :)

(: insert-start :)
declare variable $input-context external;
(: insert-end :)

typeswitch(xs:int(1))
 case $i as xs:int
    return (insert node <hours>30</hours> into $input-context/works[1]/employee[1])
 case $i as xs:double
    return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
 default
    return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
\endverbatim

id-typeswitch-expr-04-test.xq :
\verbatim
(: insert-start :)
declare variable $input-context external;
(: insert-end :)

$input-context/works[1]/employee[1]
\endverbatim

%Zorba command:
\verbatim
zorba -e input-context=works-mod.xml -f id-typeswitch-expr-04.xq -f id-typeswitch-expr-04-test.xq
\endverbatim

\Note Make sure you give the correct path to the works-mod.xml, id-typeswitch-expr-04.xq and id-typeswitch-expr-04-test.xq files.
 
Expected result:
\verbatim
<employee name="Jane Doe 1" gender="female">
  <empnum>E1</empnum>
  <pnum>P1</pnum>
  <hours>40</hours>
<hours>30</hours></employee></td>
\endverbatim
*/
