/** \page trace The fn:trace Function

\section trace_introduction Introduction

The fn:trace function can be used to retrieve an execution trace of a query.
For example, the user can trace the sequence passed as parameters to a function or the sequence that is returned by a function.
This can be very useful for debugging queries.

The signature of the function specified in the XQuery specification is as follows:

\code
  fn:trace($value as item()*, $label as xs:string) as item()*
\endcode

For every item of the input sequence, passed by the <tt>value</tt> parameter,
the function prints a line consisting of the value of the <tt>label</tt> parameter, the position of the item in the sequence, and the type and string-value of this item to an output stream.
If no output stream is provided by the user, the trace is printed to the standard error stream.
The sequence of the <tt>value</tt> parameter is returned unchanged.

For example, the execution trace of the query <tt>fn:trace(1 to 10, "foo")</tt> is as follows:

\code
foo [0]: xs:integer(1)
foo [1]: xs:integer(2)
foo [2]: xs:integer(3)
foo [3]: xs:integer(4)
foo [4]: xs:integer(5)
foo [5]: xs:integer(6)
foo [6]: xs:integer(7)
foo [7]: xs:integer(8)
foo [8]: xs:integer(9)
foo [9]: xs:integer(10)
\endcode

\section trace_configure Configuring fn:trace

Zorba provides two ways to affect the behavior of the fn:trace function.
They are decribed in the following.

\subsection trace_disable Configuring and Disabling fn:trace

Having the execution trace for a particular XQuery application is very useful for debugging purposes.
However, when the XQuery appication is used in production, the execution trace is usually not necessary.
Even worse, tracing huge sequences also affects performance.
Hence, Zorba allows the user/programmer to disable the fn:trace function using options (see \ref options).

The user can disable execution tracing in the prolog of the modulem, in which he wants the tracing to be disabled,  using the following option declaration.

\code
  declare namespace op = "http://www.zorba-xquery.org/options";

  declare option op:trace "disable";
\endcode

If this option declaration is present in the prolog of a module, the fn:trace function is not even present in the compiled execution plan of the query.

Besides using an option declaration in the prolog of a query/module, tracing can also be disabled by setting this option in the static context of the host language.

For an example in C++, please refer to the context_example_12 function in the context.cpp file of the <a class="el" href="../../cxx/html/examples.html">examples</a>.

This example also shows how the programmer of a host application can provide an output stream to which the execution trace will be written.


*/
