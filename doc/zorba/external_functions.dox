/** 

\page external_functions Writing Your Own External Functions

\section external External Functions

In XQuery, a module may declare both user-defined and external functions (see
<a href=" http://www.w3.org/TR/xquery-30/#FunctionDeclns" target="_blank">
http://www.w3.org/TR/xquery-30/#FunctionDeclns</a>). User-defined functions are 
implemented as XQuery expressions and their implementation is provided together 
with their declaration. In contrast, external functions are typically implemented
in a host language other than XQuery, and their implementation is not inside the
declaring module. As a result, to support external functions, XQuery processors 
must provide mechanisms by which (1) the implementation of an external function 
can be located, (2) values for function parameters are passed from the XQuery 
runtime environment to the host language, and (3) the result of the function is 
passed back from the host language to the XQuery runtime environment. We call 
step (1) <b>external function resolution</b>. Steps (2) and (3) are part of 
<b>external function invocation</b>.

In Zorba, the C++ API provides the "glue" between the XQuery processor and the
hosting environment into which external functions are implemented. Related code 
examples can be found 
<a href="../../cxx/html/external_functions_8cpp-example.html" target="_blank">here</a>.


\subsection Implementation

In Zorba, external functions must be implemented as instances of the 
<a href="../../cxx/html/classzorba_1_1ExternalFunction.html" target="_blank">
ExternalFunction</a> class. We refer to such instances as <b>external function
objects</b>. During its evaluation, an external function may or may not need to 
access the static or dynamic contexts of the invoking XQuery module. If the 
function implementation does need to access either context, the function is 
referred to as <b>contextual</b>; otherwise, it is <b>non-contextual</b>. 
Zorba provides classes 
<a href="../../cxx/html/classzorba_1_1ContextualExternalFunction.html" target="_blank">
ContextualExternalFunction</a> and 
<a href="../../cxx/html/classzorba_1_1NonContextualExternalFunction.html" target="_blank">
NonContextualExternalFunction</a> to differentiate between contextual and 
non-contextual external functions, respectively. Both are abstract subclasses 
of ExternalFunction and provide a (virtual) evaluate() method that serves as 
the implementation of an external function. For each external function, an 
application must provide a concrete subclass of either of these classes.


\subsection Invocation

Invoking an external function boils down to invoking the evaluate() method on
the associated function object. The first parameter of evaluate() is a vector
of pointers to <a href="../../cxx/html/classzorba_1_1ItemSequence.html" target="_blank">
ItemSequence</a> objects. During invocation, the given vector will contain 
one entry for each parameter listed in the external function declaration.
The Zorba XQuery processor makes sure that the types of the item sequences 
given to evaluate() match the types of the formal parameters. Similarly,  
evaluate() returns the result of the function as an ItemSequence. Again,
Zorba makes sure that the type of the returned ItemSequence matches the
declared return type of the function. If the function is contextual, its
evaluate() method has two additional parameters; they are pointers to the
static and dynamic contextes of the module declaring the function.


\subsection Resolution

Before it can invoke an external function, Zorba must locate its function
object. For this, Zorba looks-up the function object in the static context,
using the function QName as the key. However, it is the responsibility of
the application to register the function objects to the static context.
For this, Zorba provides the
<a href="../../cxx/html/classzorba_1_1ExternalModule.html" target="_blank">
ExternalModule</a> abstract class. ExternalModule represents a group of 
external functions, all belonging to the same XQuery module (and thus
having the same target namespace). It provides the interface for retrieving
the function object of each contained external function given the function's 
QName. Applications are responsible for implementing concrete subclasses 
of ExternalModule and for registering instances of such subclasses into 
the static context. Registration can be done in either of the two following 
ways. 

First, an ExternalModule object can be registered explicitly using the 
registerModule() method of 
<a href="../../cxx/html/classzorba_1_1StaticContext.html" target="_blank">
StaticContext</a>. Second, an implementation of ExternalModule and its 
associated ExternalFunction's can be packaged into a dynamic library (dll, 
so, or dylib). The dynamic library must have a createModule() function as an
entry point, and createModule() must return a pointer to an ExternalModule
object. We define the target namespace of such a dynamic library to be the
target namespace of the XQuery module whose external functions are implemented
by the dynamic library. The application must give an appropriate name to 
each such dynamic library and place it in an appropriate directory so that Zorba 
can locate the file using the process described below. Assuming a library has
been named and placed appropriately, Zorba will automatically load it when it 
compiles the XQuery module with the same target namespace. At this time, Zorba 
will also extract the ExternalModule object from the library and register it
into the static context. Notice that in this case, Zorba assumes ownership of 
the ExternalModule object, and will destroy it when the containing static
context is destroyed. In contrast, if an application registers an ExternalModule
object directly into the static contexts, then it retains its ownership.

To locate a dynamic libary, Zorba first transforms its target namespace URI 
to a relative file path and then uses the "modules path" mechanism (described 
in <a href="uriresolvers.html" target="_blank">URI Resolvers</a>) to turn this relative
path to the absolute path name of the dynamic library file. The transformation 
of the URI to a relative path is done using the following steps. In describing
the steps, we will use the URI "http://www.example.com/modules/utils" as an 
example and assume we are working with a Linux system.

<ol>

<li>
The domain component of the URI is extracted and transformed into a path 
notation by replacing its "." characters (if any) into forward slashes and 
reversing the order of the path steps. The result of this step on the example 
URI is "com/example/www".
</li>

<li>
The path component of the URI is extracted and separated into a branch name and
a file name: (a) if the path component does not contain any "/" charcters, the 
branch name is empty and the file name is the full path component, else (b) if 
the path component ends with a "/", the branch name is the full path component 
and the file name is empty, else (c) the file name is set to the last step of 
the path component (the substring after the last "/") and the branch name is 
set to the path component minus the last step. The branch name is then appended 
to the result of the previous step. The result of this step on the example URI is 
"com/example/www/modules/".
</li>

<li>
On Unix or Mac systems, the string "lib" is appended to the result of the 
previous step. The result of this step on the example URI is 
"com/example/www/modules/lib".
</li>

<li>
The file name is appended to the result of the previous step. The result of 
this step on the example URI is "com/example/www/modules/libutils".
</li>

<li>
If the XQuery module being imported contains a version option, the character "_"
followed by the version string are appended. Assuming that the module being
imported via the example URI has a version option with the value "1.2", the
result of this step on the example URI is "com/example/www/modules/libutils_1.2".
</li>

<li>
Finally, the appropriate suffix is appended to the file name: ".so" for Unix, 
".dll" for Windows, or "dylib" for MacOS. The result of this step on the 
example URI is "com/example/www/modules/libutils_1.2.so".
</li>

</ol>
 
*/
