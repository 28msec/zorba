/** \page build_windows Zorba Build Notes for Windows Users

\section windows_requirements Requirements for Windows Builds
- In order to compile Zorba on Windows,
  you need a working Visual Studio (Express) installation (2008, 2010, 2012, 2013). 
  This page will focus on Visual Studio 2013, as it is the latest version at the time of writing
- If you want to compile Zorba using Visual Studio 2008,
  you will need to install the
  <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyId=D466226B-8DAB-445F-A7B4-448B326C48E7" target="_blank">Visual C++ 2008 Feature Pack Release</a>.
- Make sure that the libraries required for Zorba
  are built with the same version of Visual Studio that you use.

\section windows_autodll Zorba's Automatic DLL Detection Mechanism

Zorba has in place an automatic DLL detection mechanism.  This will
try to automatically gather all the DLLs from the third party
libraries and install them with Zorba when you do "make install" or
you build the Visual Studio INSTALL project, to ensure that your
installation will function regardless of the system or user's PATH.

Zorba will search for the third party libraries in order in:
-# all the directories pointed by the \c ZORBA_THIRD_PARTY_REQUIREMENTS
   CMake configuration parameter
    - e.g. if you have Xerces in "C:\tools" and IConv in "D:\tools",
      you must configure your build as follows:
      \code
      cmake -D ZORBA_THIRD_PARTY_REQUIREMENTS=C:\tools;D:\tool {ZORBASRC}
      \endcode
      and Zorba will find all it needs from Xerces and Iconv.
      (The directory names must contain "xerces" and "iconv" respectively, case insensitive)
-# the <tt>Program Files</tt> directory on your system
    - e.g. if you have cURL installed in "C:\Program Files\*cURL*",
      Zorba will find all it needs from cURL.
      (The directory must contain "curl", case insensitive.)
-# all the paths in the \c PATH variable
    - e.g. if you have "C:\tools\*ICU*\bin" in your path,
      Zorba will find all it needs from ICU.
      (The directory must only contain "icu".)

The important thing to note here is that if you have any third-party
requirements installed in unusual locations, you should use the CMake
configuration parameter \c ZORBA_THIRD_PARTY_REQUIREMENTS instead of
\c CMAKE_PREFIX_PATH to specify those locations when configuring
Zorba.

\section windows_preparation Preparation of required libraries for building core Zorba

We we will use two folders:
 <LIBRARIES_SOURCE>, where we will keep the source code of libraries that require a complex compilation, and
 <LIBRARIES>, where we will keep the libraries includes and binaries for compiling zorba

LibIconv
 - Download the source LibIconv archive from https://www.gnu.org/software/libiconv/, for instance
   http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz
 - Extract the archive to the <LIBRARIES_SOURCE> folder
 - Follow the instructions at http://www.codeproject.com/Articles/302012/How-to-Build-libiconv-with-Microsoft-Visual-Studio, but:
   - name the solution/project iconv rather than libiconv
   - create the project in <LIBRARIES_SOURCE>/libiconv
 - From the Configuration Manager, add a new Solution Platform (x64) copying the settings from Win32 and make sure x64 is 
   the active platform
 - Build the solution
 - Create a folder <LIBRARIES>/libiconv
 - Copy the <LIBRARIES_SOURCE>/libiconv/include folder to <LIBRARIES>/libiconv
 - Copy the <LIBRARIES_SOURCE>/libiconv/Release_x64 folder to <LIBRARIES>/libiconv and rename it bin
 
LibXml2
 - Download the source LibXml archive from http://www.xmlsoft.org/downloads.html, for instance
   ftp://xmlsoft.org/libxml2/libxml2-2.9.2.tar.gz
 - Extract the archive to the <LIBRARIES_SOURCE> folder
 - Edit the file win32/configure.js, replace 
 var configFile = srcDirXml + "\\configure.in"; 
 with 
 var configFile = srcDirXml + "\\configure.ac";
 - Run from a VS2013 x64 Native Command Line Tools Command prompt: 
   <LIBRARIES_SOURCE>\libxml2-2.9.2\win32>cscript configure.js compiler=msvc include=<LIBRARIES_SOURCE>\libiconv\include lib=<LIBRARIES_SOURCE>\libiconv\Release_x64 debug=no prefix=<LIBRARIES_SOURCE>\libxml2-2.9.2\Release_x64
   nmake /f Makefile.msvc 
   nmake /f Makefile.msvc install
- Copy the <LIBRARIES_SOURCE>/libxml2-2.9.2/Release_x64 folder to the <LIBRARIES> and rename it libxml2
   
LibICU
 - Download the source LibICU archive from http://site.icu-project.org/download/, for instance
   http://download.icu-project.org/files/icu4c/55.1/icu4c-55_1-src.zip
- Extract the archive to the <LIBRARIES_SOURCE> folder
- Open the solution <LIBRARIES_SOURCE>\icu4c-55_1-src\icu\source\allinone\allinone.sln
- Switch the Active solution platform to x64 from the configuration manager
- Switch to the Release build
- Build the solution
- Create a folder <LIBRARIES>\libicu
- Copy the <LIBRARIES_SOURCE>\icu4c-55_1-src\icu\bin64 folder to <LIBRARIES>\libicu folder and rename it bin
- Copy the <LIBRARIES_SOURCE>\icu4c-55_1-src\icu\lib64 folder to <LIBRARIES>\libicu folder and rename it lib
- Copy the <LIBRARIES_SOURCE>\icu4c-55_1-src\icu\include folder to <LIBRARIES>\libicu folder


\section windows_nmake Building Zorba using a NMake Project
-# Start a Visual Studio Command Line.
-# Change the current working directory to the \c {ZORBABUILD} directory (as described in \ref create_build_dir).
-# Execute CMake as follows:
\code
cmake -G "NMake Makefiles" {ZORBASRC}
\endcode
-# Now you are ready to call \"\c nmake\" from the \c {ZORBABUILD} directory.

\section windows_visualstudio Building Zorba using a Visual Studio Project
-# Start Visual Studio Command Line
-# Change the current working directory into the \c {ZORBABUILD} directory (as described in \ref create_build_dir).
-# Execute CMake with the appropriate CMake Visual Studio generator for your installation (see <tt>cmake --help</tt> for a list of generators). For instance,
\code
cmake -G "Visual Studio 10" {ZORBASRC}
\endcode
-# Start Visual Studio,
   open the generated \c zorba.sln project file in \c {ZORBABUILD},
   and build the \c ALL project.

\section windows_https_support HTTPS support
- In order to have SSL support in Zorba,
  you have to use the CURL library that has SSL support. 
- There is one more thing:
  in order to validate the server's certificate,
  CURL+SSL needs to know about the root Certificates of Authenticity (CA):
  a set of public keys freely available on the internet. 
- On Windows,
  Zorba expects this file to be called \c cacert.pem
  and searches for it in the current directory and system paths. 
- This \c cacert.pem file can be found on the curl page:
  http://curl.haxx.se/docs/caextract.html .
- In order to disable the validation of the server certificate,
  the \c ZORBA_VERIFY_PEER_SSL_CERTIFICATE can be set to \c OFF
  in cmake 
  (and actually this is the default value).
  Set it to \c ON to validate server certificate chain
  on every access to \c https:// .
- To read more about CURL+SSL: http://curl.haxx.se/docs/sslcerts.html .
- As an \c https test page,
  we used for example the rss feed
  fn:doc('https://www.npr.org/rss/rss.php?id=1001') .

\section windows_noncore_modules Downloads for Non-Core Modules

\subsection windows_imagemagick ImageMagick (image-processing modules)

Just download the ImageMagick Windows binary from http://www.imagemagick.org/script/binary-releases.php and install it. We recommend the latest "Q8-windows-dll" version.


*/
