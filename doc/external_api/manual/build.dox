/** \page build Build Instructions

\section requirements Requirements

\subsection buildsystem Build System
Zorba users the Cross-Platform Make CMAKE 2.4 or higher to build (http://www.cmake.org/).

\subsection compilers Compilers
Zorba is tested with the following compilers:
- C++ Compiler gcc 3.4.x and gcc 4.x
- MS VC++ 2005 and MS VC++ 2008


\subsection packages Packages
In order ot build Zorba, you need the following packages inclusive development headers installed:
- BOOST 1.32 or higher (http://www.boost.org/) 
  - boost_program_options
  - boost_date_time
  - boost_filesystem
- XERCES 2.7.0 or higher (http://www.boost.org/)
- ICONV 1.12 (http://www.gnu.org/software/libiconv/)
- <em>Optional Packages used to modify Scanner and Parser</em>
  - FLEX 2.5.33 or higher (http://flex.sourceforge.net/)
  - BISON 2.3 or higher (http://www.gnu.org/software/bison/)
  - CURL 7.12 (http://curl.haxx.se/)
- <em>Option Package used to enable REST and HTTP</em>
  - CURL 7.12 (http://curl.haxx.se/)

\subsection buildingzorba Building Zorba
-# Unpack Zorba tarball. Let's call the path of the unpacked Zorba directory <tt>[ZORBA]</tt>.
-# Move into <tt>[ZORBA]/xquery</tt>, the root directory of Zorba.
-# Because CMake claims to make out-of-place builds, we propose to build an extra build directory. This directory can be made somewhere. Mostly, it is created directly into the root directory, e.g. <tt>[ZORBA]/xquery/build</tt>.
  - If the build directory is broken for any reason, it just can be removed and created newly, because source and build files are strictely seperated.
  - Several build directories can be used simultaneously.
-# Move with Termial into the build directory and execute cmake with the Zorba root path as argument, e.g. <tt>cmake [ZORBA]/xquery</tt> or just <tt>cmake ..</tt> .
-# execute <tt>make</tt>.

\subsection buildoptions Build Options
- CMake is able to produce projects for several IDE's.
  - E.g. to produce a KDevelop Project, the cmake command would be <tt>cmake .. -G KDevelop3</tt>
  - Read cmake help to see all available generators.
- By default, Zorba is build in MinSizeRel-mode (minimal size release). To change the build mode (to Debug, Release, RelWithDebInfo or MinSizeRel), you must execute cmake with an additial parameter, e.g. <tt>cmake .. -D CMAKE_BUILD_TYPE:STRING=Debug</tt> (cmake with additional parameters can also be execute over an existing build directory, it will just overwrite the options).


\section mac Note for Mac OS Users
The easiest way to install the required packages (like CMAKE, BOOST, etc.) is to use Darwin Ports (http://darwinports.com/). After installation, you should run <tt>sudo port -d selfupdate</tt> to upgrade the package lists. If this was successfull, you can simply install by typing e.g. <tt>sudo port install cmake</tt>.

\section windows Notes for Windows Users
\subsection Windows Requirements
- Windows 32Bit
- Visual Studio Installation
- CMake Installation (http://www.cmake.org/)
- BOOST (program_options, date_time, filesystem) Installation (http://www.boost-consulting.com/products/free/)  
- Libxml2 and Iconv (http://www.zlatkovic.com/pub/libxml/) 
- ICU (http://download.icu-project.org/files/icu4c/)
- Optional: Flex (http://gnuwin32.sourceforge.net/packages/flex.htm) and Bison (http://gnuwin32.sourceforge.net/packages/bison.htm)

\subsection nmake Building NMake Project
-# Start Visual Studio Command Line
-# Go into zorba root directory (<tt>[ZORBA]/xquery</tt>)
-# Executing CMAKE. Pre default, CMAKE does not find out the paths to the used packages by itself. Thus, the paths must be passed to the CMAKE command over parameters. E.g.: 
\code
"path_to_cmake\bin\cmake" 
-G "NMake Makefiles"
-D ICU_LIBRARY="path_to_icu\lib\icuuc.lib" 
-D ICU_DATA_LIBRARY="path_to_icu\lib\icudt.lib" -D ICU_I18N_LIBRARY="C:\Users\dagraf\Desktop\icu4c-3_8_1-Win32-msvc8\icu\lib\icuin.lib" -D ICU_INCLUDE="C:\Users\dagraf\Desktop\icu4c-3_8_1-Win32-msvc8\icu\include" -D ICONV_INCLUDE_DIR="C:\Users\dagraf\Desktop\iconv-1.9.2.win32\iconv-1.9.2.win32\include" -D ICONV_LIBRARY="C:\Users\dagraf\Desktop\iconv-1.9.2.win32\iconv-1.9.2.win32\lib\iconv.lib" -D LIBXML2_INCLUDE_DIR="C:\Users\dagraf\Desktop\libxml2-2.6.30\libxml2-2.6.30+.win32\include" -D LIBXML2_LIBRARIES="C:\Users\dagraf\Desktop\libxml2-2.6.30\libxml2-2.6.30+.win32\lib\libxml2.lib" -D Boost_INCLUDE_DIR="C:\Program Files\boost\boost_1_34_1" -D Boost_LIBRARY_DIRS="C:\Program Files\boost\boost_1_34_1\lib" -D XERCESC_INCLUDE="C:\Users\dagraf\Desktop\xerces-c_2_8_0-x86-windows-vc_8_0\include" ..\
\endcode
*/
