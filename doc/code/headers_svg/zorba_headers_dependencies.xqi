(:
 : Copyright 2006-2009 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)

(:
 : author Sorin Nasoi
 :)
module namespace z = "http://www.zorba-xquery.com/header-dependencies";

import module namespace file = "http://expath.org/ns/file";
import module namespace dot = "http://www.zorba-xquery.com/modules/image/graphviz";
import module namespace html = "http://www.zorba-xquery.com/modules/converters/html";
import module namespace functx = "http://www.functx.com/";

declare namespace ann = "http://www.zorba-xquery.com/annotations";

declare variable $z:headersCollector := <headers/>;

declare variable $z:dependenciesCollector := <dependencies/>;

(: This function fills the $z:headersCollector :)
declare %private %ann:sequential function z:collect-header (
  $folderPath as xs:string,
  $headerName as xs:string,
  $dependenciesFileName as xs:string) 
{
  insert node <header folderPath          ="{$folderPath}"
                      headerName          ="{$headerName}" 
                      dependenciesFileName="{$dependenciesFileName}" /> 
  as last into $z:headersCollector;
};

(: This function fills the $z:dependenciesCollector :)
declare %private %ann:sequential function z:collect-dependency (
  $header1 as xs:string,
  $header1URL as xs:string,
  $header2Original as xs:string,
  $header2Processed as xs:string) 
{
  insert node <dependency  header1          ="{$header1}"
                           header1URL       ="{$header1URL}"
                           header2Original  ="{$header2Original}" 
                           header2Processed ="{$header2Processed}" /> 
  as last into $z:dependenciesCollector;
};

(: This function collects the information from files.html file :)
declare %ann:sequential function z:fill-headersCollector (
  $doxygenCodePath as xs:string
)
{
  let $file := html:parse(file:read-text(concat($doxygenCodePath,file:path-separator(),"files.html")))
  return
    for $tr in $file//*:tr
    let $path := tokenize(normalize-space(substring-before(data($tr/td[@class="indexkey"]),"[code]"))," ")
    return
      z:collect-header(replace($path[1],"/",file:path-separator()),
                       $path[2],
                       data($tr//*:a[@class="el"]/@href))
};

declare %private function z:get-path(
  $header) as xs:string
{
  concat(data($header/@folderPath),data($header/@headerName))
};

(: This function processes the include < ...> statements trying to replace it with the actual file :)
declare %private function z:process-zorba-include-compiler(
  $includedHeader as xs:string) as xs:string
{
  let $tok := tokenize($includedHeader,file:path-separator())
  let $fileName := $tok[last()]
  let $path := substring-before($includedHeader,$fileName)
  let $candidates := $z:headersCollector//header[@headerName=$fileName]
  let $lcount := count($candidates)
  return
    if($lcount eq xs:integer(1)) then
      z:get-path($candidates[1])
    else if ($lcount eq xs:integer(0)) then
      $includedHeader
    else
    (
      let $return := for $candidate in $candidates
                     return
                      if(ends-with(data($candidate/@folderPath),$path)) then
                        concat(data($candidate/@folderPath),$fileName)
                      else if(contains($path,"..")) then
                        concat(data($candidate/@folderPath),$includedHeader)
                      else
                        ()
     return string-join($return,'-')
    )
};


(: This function processes the include statement trying to replace it with the actual file:)
declare %private function z:process-include(
  $folderPath as xs:string,
  $headerName as xs:string,
  $includeHeader as xs:string) as xs:string
{
  let $tmp := replace(replace(normalize-space($includeHeader),"#include ","")," ","")
  return
    if(starts-with($tmp,'&lt;')) then
    (
      let $tmp2 := replace(replace($tmp,'&lt;',''),'&gt;','')
      return
        if( starts-with($tmp2,"curl/") or
            starts-with($tmp2,"libxml/") or
            starts-with($tmp2,"sys/") or
            starts-with($tmp2,"unicode/") or
            starts-with($tmp2,"wand/") or
            starts-with($tmp2,"xercesc/")) then  (: this is a C++ system include or a library include :)
          $tmp2
        else
          z:process-zorba-include-compiler($tmp2)          
    )
    else if (starts-with($tmp,'"')) then
      z:process-zorba-include-compiler(replace($tmp,'"',''))
    else
      "not processed"
};


(: This function collects the information from every *.html file generated by Doxygen:)
declare %ann:sequential function z:fill-dependenciesCollector (
    $doxygenCodePath as xs:string
)
{
  for $header in $z:headersCollector//header
  return 
    let $file := html:parse(file:read-text(concat($doxygenCodePath,file:path-separator(),data($header/@dependenciesFileName))))
    return
      for $dep in $file//*:code
      where starts-with(data($dep),"#include")
      return
        z:collect-dependency(z:get-path($header),
                             (:concat(data($header/@folderPath),data($header/@headerName)), :)
                             data($header/@dependenciesFileName),
                             replace(replace(normalize-space(data($dep)),"#include ","")," ",""),
                             (:replace(replace(normalize-space(data($dep)),"#include ","")," ","") :)
                             z:process-include(data($header/@folderPath),data($header/@headerName),data($dep)) )
};

declare function z:list-headersCollector() as xs:string
{
  fn:string-join(for $header in $z:headersCollector//header 
                 return concat(functx:pad-string-to-length(data($header/@folderPath)," ",70),
                               functx:pad-string-to-length(data($header/@headerName)," ",35),
                               functx:pad-string-to-length(data($header/@dependenciesFileName)," ",30))
  ,"
")
};

declare function z:list-dependenciesCollector() as xs:string
{
  fn:string-join(for $dependency in $z:dependenciesCollector//dependency
                 (:where contains(data($dependency/@header2Processed),'-') :)
                 order by data($dependency/@header2Original)
                 return concat(functx:pad-string-to-length(data($dependency/@header1)," ",80),
                               functx:pad-string-to-length(data($dependency/@header1URL)," ",50),
                               functx:pad-string-to-length(data($dependency/@header2Original)," ",40),
                               functx:pad-string-to-length(data($dependency/@header2Processed)," ",100))
  ,"
")
};

(: get the URL of the header if we are dealing with a Zorba header, otherwise return '-'  :)
declare %private function z:get-URL-helper($header1 as xs:string, $doxygenCodePath as xs:string) as xs:string?
{
 (: we could optimize this search by looking into $z:headersCollector because it's a little smaller:)
  let $candidates := $z:dependenciesCollector//dependency[@header1=$header1]
  return
    if((count($candidates) gt xs:integer(1)) or 
       (count($candidates) eq xs:integer(1))) then
      (: we can add a link to the Zorba generated documentation only :)
      concat('URL="',"..",file:path-separator(),"html", file:path-separator(), data($candidates[1]/@header1URL),'"')
    else
      ()
};

(: get the nodes that will be added to the graph :)
declare %private function z:get-nodes($doxygenCodePath as xs:string) as xs:string
{
  let $headers := for $dependency in $z:dependenciesCollector//dependency order by data($dependency/@header1) return data($dependency/@header1)
  let $depHeaders := for $dependency in $z:dependenciesCollector//dependency order by data($dependency/@header2Processed) return data($dependency/@header2Processed)
  let $nodes := functx:value-union($headers,$depHeaders)
  return
    string-join(for $node in $nodes
                let $label := tokenize($node,file:path-separator())[last()]
                return
                  concat(translate($node,concat(file:path-separator(),'_.-+'),'_____'),'[',z:get-URL-helper($node, $doxygenCodePath),' tooltip="',$node,'" label="',$label,'"]')
    ,';
    ')
};

(: get the edges that will be added to the graph i.e. the dependencies between nodes :)
declare %private function z:get-edges() as xs:string
{
    string-join(for $dependency in $z:dependenciesCollector//dependency order by data($dependency/@header1)
                return
                  concat(translate(data($dependency/@header1),concat(file:path-separator(),'_.-+'),'_____'),'->',
                         translate(data($dependency/@header2Processed),concat(file:path-separator(),'_.-+'),'_____'))
    ,';
    ')
};


(:~
 : Generate the BIG cluster.
 :)
declare function z:create-graph($doxygenCodePath as xs:string) as xs:string
{
concat('digraph Headers {
    ',z:get-nodes($doxygenCodePath),';
    ',z:get-edges(),';
}')
};