
include $(ROOT_PATH)/Makefile.conf

##############################################################################
# Functions
##############################################################################

DEPENDENCIES	=

DF				= $(BUILD_FOLDER)/$(*F)

EXES			= $(patsubst %,$(BUILD_FOLDER)/%,$(notdir $(BINARIES)))

MAKE_OBJS		= $(foreach target,$(1),$(dir $(target))$(BUILD_FOLDER)/$(notdir $(basename $(target))).$(SUFX))

PATH_FROM_ROOT	= $(filter-out /,$(abspath $(subst $(abspath $(dir $(abspath $(1)))../$(ROOT_PATH)),,$(dir $(abspath $(1))))..))
PATH_PREFIX		= $(subst /,\/,$(call PATH_FROM_ROOT,$(1)))

define MAKEDEP
	@sed -e "s/ \([^ \n\t]\+\):/ $$\(ROOT_PATH\)\/$(call PATH_PREFIX,$(1))\/\1:/g" \
	     \
	     -e "s/ \([^ $$\n\t\\]\+\) / $$\(ROOT_PATH\)$(call PATH_PREFIX,$(1))\/\1 /g" \
		 -e "s/ \([^ $$\n\t\\]\+\) / $$\(ROOT_PATH\)$(call PATH_PREFIX,$(1))\/\1 /g" \
		 -e "s/ \([^ $$\n\t\\]\+\)$$/ $$\(ROOT_PATH\)$(call PATH_PREFIX,$(1))\/\1 /g" \
		 \
		 -e "s/[^ $$\n\t\/\.]\+\/\.\.\///g" \
		 -e "s/[^ $$\n\t\/\.]\+\/\.\.\///g" \
		 -e "s/[^ $$\n\t\/\.]\+\/\.\.\///g" \
		 < $(1).d > $(1).P
	
	@rm -f $(1).d
endef


define MAKE_DEPENDENCY

ifneq ($(dir $(1)),)
ifneq ($(dir $(1)),./)

$(call MAKE_OBJS,$(1)):
	$(MAKE) -C $$(subst /$(BUILD_FOLDER)/,,$$(dir $$@)) SOURCES=$(notdir $(1))

-include $(patsubst %.$(SUFX),%.P,$(call MAKE_OBJS,$(1))) 

endif
endif

endef


define CONCAT_DEPENDENCIES
DEPENDENCIES 	+= $($(1))
endef


define MAKE_TARGET

$$(BUILD_FOLDER)/$(1): $(call MAKE_OBJS,$(2))
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $$^ $(LDLIBS) -o $$@

endef


##############################################################################
# Targets
##############################################################################


all: TARGET=all
test: TARGET=test
clean: TARGET=clean

all build: update_gch build_objs subdirs

build_objs: $(BUILD_FOLDER) $(call MAKE_OBJS,$(SOURCES))

test: $(BUILD_FOLDER) $(EXES) subdirs

clean: subdirs
	rm -rf $(BUILD_FOLDER)

subdirs: $(SUBDIRS)


.PHONY: all build update_gch build_objs test clean subdirs $(SUBDIRS)

# .SECONDARY with no prerequisites causes all targets to be treated as secondary (i.e., no target is removed because it is considered intermediate). 
.SECONDARY:


##############################################################################
# Precompiled headers handling
##############################################################################

ifeq ($(USE_GCH),yes)

HEADER_FILE = precompiled_headers.h
override CXXFLAGS := -I$(ROOT_PATH)/Build -DUSE_GCH -include $(HEADER_FILE) $(CXXFLAGS)

update_gch: $(ROOT_PATH)/$(BUILD_FOLDER) $(ROOT_PATH)/$(BUILD_FOLDER)/$(HEADER_FILE).gch

ifneq ($(ROOT_PATH),.)
$(ROOT_PATH)/$(BUILD_FOLDER):
	mkdir -p $(ROOT_PATH)/$(BUILD_FOLDER)
endif

$(ROOT_PATH)/$(BUILD_FOLDER)/%.h.gch: $(ROOT_PATH)/%.h
	$(CXX) $(CXXFLAGS) -x c++-header -MMD -MF $(patsubst %.h.gch,%.d,$@) -MT $@ -o $@ $<
	$(call MAKEDEP,$(ROOT_PATH)/$(DF))

-include $(patsubst %.h,%.P,$(ROOT_PATH)/$(BUILD_FOLDER)/$(HEADER_FILE)) 

endif


##############################################################################
# Rules
##############################################################################

$(foreach target,$(BINARIES),$(eval $(call MAKE_TARGET,$(target),$($(target)))))

$(foreach dependency,$(BINARIES),$(eval $(call CONCAT_DEPENDENCIES,$(dependency))))

$(foreach dependency,$(sort $(DEPENDENCIES)),$(eval $(call MAKE_DEPENDENCY,$(dependency))))


$(SUBDIRS):
	$(MAKE) $(TARGET) -C $@

$(BUILD_FOLDER):
	mkdir -p $(BUILD_FOLDER)

$(BUILD_FOLDER)/%.$(SUFX): %.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -MF $(patsubst %.$(SUFX),%.d,$@) -MT $@ $< -o $@
	$(call MAKEDEP,$(DF))

%.cpp: %.l
	$(LEX.l) $< > $@

%.cpp: %.y
	$(YACC.y) $< -o $(subst .cpp,.tab.c,$@)
	mv -f $*.tab.c $@

%.tab.h: %.cpp


-include $(patsubst %.$(SUFX),%.P,$(call MAKE_OBJS,$(SOURCES))) $(ROOT_PATH)/Makefile.conf
