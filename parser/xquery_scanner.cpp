#line 2 "xquery_scanner.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 481
#define YY_END_OF_BUFFER 482
static yyconst short int yy_acclist[1876] =
    {   0,
      450,  450,  457,  457,  423,  423,  434,  434,  454,  454,
      482,  159,  481,    1,  481,    2,  481,  481,  110,  159,
      481,  159,  481,   75,  159,  481,  159,  481,  159,  481,
       22,  159,  481,   58,  159,  481,   60,  159,  481,   35,
      159,  481,   21,  159,  481,   34,  159,  481,   65,  159,
      481,   36,  159,  481,   52,   53,   54,  159,  481,   20,
      159,  481,   86,  159,  481,   51,  159,  481,   57,  159,
      481,   57,  159,  481,   57,  159,  481,   57,  159,  481,
       57,  159,  481,   57,  159,  481,   57,  159,  481,   57,
      159,  481,   57,  159,  481,   57,  159,  481,   57,  159,

      481,   57,  159,  481,   57,  159,  481,   57,  159,  481,
       57,  159,  481,   57,  159,  481,   57,  159,  481,   57,
      159,  481,   57,  159,  481,   57,  159,  481,   17,  159,
      481,  159,  481,   94,  159,  481,  476,  481,  481,  473,
      481,  476,  481,  474,  481,  481,  464,  481,  464,  481,
      412,  481,  412,  481,  407,  412,  481,  408,  412,  481,
      411,  412,  481,  409,  412,  481,  481,  481,  448,  481,
      443,  481,  443,  448,  481,  448,  481,  442,  448,  481,
      438,  448,  481,  448,  481,  452,  481,  450,  481,  450,
      452,  481,  449,  452,  481,  451,  452,  481,  457,  481,

      457,  481,  481,  393,  481,  393,  481,  328,  393,  481,
      370,  393,  481,  393,  481,  352,  393,  481,  374,  393,
      481,  393,  481,  344,  393,  481,  373,  393,  481,  354,
      393,  481,  364,  393,  481,  369,  393,  481,  330,  341,
      393,  481,  330,  341,  393,  481,  330,  341,  393,  481,
      330,  341,  393,  481,  330,  341,  393,  481,  330,  341,
      393,  481,  330,  341,  393,  481,  330,  341,  393,  481,
      330,  341,  393,  481,  330,  341,  393,  481,  330,  341,
      393,  481,  330,  341,  393,  481,  330,  341,  393,  481,
      330,  341,  393,  481,  330,  341,  393,  481,  330,  341,

      393,  481,  330,  341,  393,  481,  330,  341,  393,  481,
      384,  393,  481,  401,  481,  401,  481,  398,  401,  481,
      395,  401,  481,  396,  401,  481,  396,  401,  481,  396,
      401,  481,  394,  401,  481,  406,  481,  406,  481,  406,
      481,  406,  481,  402,  406,  481,  404,  406,  481,  309,
      481,  309,  481,  309,  481,  309,  481,  305,  309,  481,
      303,  309,  481,  307,  309,  481,  308,  309,  481,  308,
      309,  481,  320,  481,  320,  481,  320,  481,  320,  481,
      319,  320,  481,  320,  481,  320,  481,  320,  481,  320,
      481,  417,  481,  417,  481,  414,  417,  481,  415,  417,

      481,  413,  417,  481,  298,  481,  249,  298,  481,  298,
      481,  231,  298,  481,  298,  481,  298,  481,  298,  481,
      238,  298,  481,  207,  298,  481,  212,  298,  481,  171,
      298,  481,  205,  298,  481,  215,  298,  481,  298,  481,
      163,  298,  481,  204,  298,  481,  173,  298,  481,  183,
      298,  481,  239,  298,  481,  201,  298,  481,  245,  298,
      481,  298,  481,  298,  481,  298,  481,  298,  481,  298,
      481,  298,  481,  298,  481,  298,  481,  298,  481,  298,
      481,  298,  481,  298,  481,  298,  481,  298,  481,  298,
      481,  298,  481,  298,  481,  298,  481,  298,  481,  162,

      298,  481,  220,  298,  481,  237,  298,  481,  419,  481,
      418,  419,  481,  421,  481,  420,  421,  481,  425,  481,
      423,  424,  481,  423,  425,  481,  424,  425,  481,  424,
      425,  481,  458,  460,  481,  458,  481,  481,  481,  460,
      481,  481,  462,  481,  462,  481,  468,  481,  465,  481,
      481,  466,  481,  481,  327,  481,  327,  481,  325,  327,
      481,  436,  481,  434,  481,  434,  436,  481,  430,  436,
      481,  431,  436,  481,  436,  481,  432,  436,  481,  429,
      436,  481,  435,  436,  481,  481,  481,  428,  481,  428,
      481,  426,  428,  481,  324,  481,  324,  481,  324,  481,

      324,  481,  454,  481,  454,  481,  481,  481,  299,  481,
      481,    1,    2,   61,  109,   61,   91,   88,   64,   53,
       54,   37,   38,   52,   53,   54,   84,   33,   57,   57,
       57,   57,   57,  107,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  111,
      476,  475,  476,  479,  480,  464,  464,  410,  443,  437,
      440,  446,  447,  450,  451,  457,  456,  457,  455,  376,

      343,  331,  351,  372,  371,  362,  363,  330,  341,  330,
      341,  330,  341,  391,  330,  341,  350,  330,  341,  330,
      341,  330,  341,  330,  341,  330,  341,  330,  341,  356,
      330,  341,  330,  341,  357,  330,  341,  358,  330,  341,
      330,  341,  367,  330,  341,  368,  330,  341,  330,  341,
      359,  330,  341,  360,  330,  341,  330,  341,  361,  330,
      341,  330,  341,  379,  330,  341,  330,  341,  330,  341,
      330,  341,  330,  341,  330,  341,  330,  341,  330,  341,
      382,  330,  341,  330,  341,  330,  341,  330,  341,  397,
      396,  396,  396,  405,  405,  403,  404,  304,  304,  302,

      308,  306,  308,  311,  311,  315,  416,  208,  246,  248,
      246,  235,  216,  217,  170,  203,  202,  181,  182,  229,
      168,  175,  176,  177,  199,  200,  178,  179,  180,  211,
      218,  250,  418,  420,  423,  424,  423,  424,  422,  424,
      458,  460,  458,  460,  459,  460,  460,  462,  461,  462,
      468,  467,  471,  472,  326,  325,  434,  433,  435,  310,
      310,  427,  426,  323,  454,  454,  454,  454,  300,  300,
       59,   53,   54,   54,   56,   57,   57,   57,  113,   57,
       57,  115,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   23,   33,   57,   57,   57,   57,   57,   57,   57,
       57,   55,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
      476,  463,  464,  451,  457,  392,  330,  341,  330,  341,
      349,  330,  341,  330,  341,  330,  341,  330,  341,  353,
      330,  341,  330,  341,  330,  341,  330,  341,  330,  341,
      330,  341,  330,  341,  330,  341,  330,  341,  330,  341,
      375,  330,  341,  330,  341,  330,  341,  330,  341,  330,
      341,  330,  341,  330,  341,  330,  341,  330,  341,  330,

      341,  330,  341,  330,  341,  330,  341,  396,  396,  396,
      230,  259,  167,  261,  172,  206,  418,  420,  458,  460,
      460,  460,  460,  325,  435,  426,  453,  454,   82,   59,
       83,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  130,   57,   57,  100,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  138,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  106,
       57,   57,  478,  476,  445,  444,  439,  451,  330,  341,

      330,  341,  330,  341,  390,  330,  341,  330,  341,  330,
      341,  330,  341,  330,  341,  346,  330,  341,  330,  341,
      330,  341,  365,  330,  341,  330,  341,  330,  341,  330,
      341,  330,  341,  330,  341,  330,  341,  330,  341,  330,
      341,  330,  341,  330,  341,  330,  341,  345,  330,  341,
      330,  341,  330,  341,  330,  341,  396,  396,  396,  228,
      165,  256,  184,  186,  192,  278,  164,  187,  418,  420,
      458,  460,  460,  460,  460,  460,  470,  469,  325,  435,
      426,   57,  103,   57,   93,   93,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   76,   57,   57,   77,   57,   57,   57,   57,
       30,   33,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  139,   57,   29,   33,   11,   57,  142,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  158,
       57,  476,  347,  347,  330,  341,  330,  341,  330,  341,
      330,  341,  330,  341,  330,  341,  330,  341,  330,  341,
      330,  341,  338,  330,  341,  330,  341,  330,  341,  330,
      341,  330,  341,  330,  341,  337,  330,  341,  330,  341,
      383,  330,  341,  385,  396,  396,  195,  232,  233,  169,
      279,  223,  282,  219,  221,  297,  322,   57,  117,   57,

       57,  104,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  132,   57,   57,  108,
       57,   57,  134,   57,   57,   57,   57,  136,   57,   57,
       57,   57,   50,   57,   78,   57,   57,   57,   57,   57,
       57,  144,   57,  145,   57,   57,  476,  330,  341,  330,
      341,  330,  341,  330,  341,  330,  341,  330,  341,  355,
      330,  341,  330,  341,  330,  341,  342,  330,  341,  330,
      341,  380,  330,  341,  330,  341,  330,  341,  329,  396,
      396,  263,  196,  174,  273,  198,  257,  276,  213,  284,
      258,   57,  119,   57,   42,   57,   57,   57,   57,   57,

       57,   57,   57,   79,   57,  129,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  476,  160,  330,  341,  387,  330,  341,  330,
      341,  330,  341,  330,  341,  330,  341,  330,  341,  330,
      341,  330,  341,  330,  341,  330,  341,  396,  396,  313,
      253,  225,  244,  255,   57,  116,  118,  120,   57,   28,
       33,   14,   57,   57,   57,   57,   57,  127,   57,   24,
       33,    6,   57,   57,  131,   57,   18,   57,   47,   57,
       57,   57,   57,   57,   57,  140,   57,   57,   57,   57,
       57,  105,  476,  330,  341,  330,  341,  336,  330,  341,

      332,  330,  341,  348,  330,  341,  330,  341,  377,  330,
      341,  330,  341,  330,  341,  330,  341,  389,  399,  396,
      317,  262,  252,  264,  254,  166,  272,  209,  222,  280,
      227,  197,  321,  301,   85,  114,   57,   57,   57,   57,
       57,   57,  126,   97,   96,   99,   57,   10,   57,  102,
       57,  133,  112,   57,  135,   57,   57,   57,   57,   57,
       57,  141,   57,   57,   57,   57,  143,    3,  476,  161,
      441,  330,  341,  330,  341,  330,  341,  366,  330,  341,
      330,  341,  381,  330,  341,  330,  341,  396,  312,  260,
      242,  236,  270,  189,  188,  191,  185,  194,  274,  251,

      275,  214,  281,  283,   57,   40,   25,   33,    7,   57,
       57,   57,   98,   57,    9,  101,   57,   57,   57,   57,
       57,   57,   57,   19,  476,  333,  330,  341,  330,  341,
      330,  341,  330,  341,  396,  314,  243,  190,  193,  247,
       57,   41,   57,   57,   57,   57,   46,   57,   49,   57,
       57,   57,   57,    5,   33,  476,  386,  330,  341,  388,
      330,  341,  330,  341,  330,  341,  396,  318,  224,  241,
      226,  234,   57,    8,   57,   57,   44,   57,   57,   57,
       57,   57,  137,   57,   57,    4,  476,  330,  341,  330,
      341,  330,  341,  330,  341,  396,  277,   57,   57,   57,

       57,   57,   73,   72,   57,   57,   57,   57,  154,  476,
      330,  341,  330,  341,  330,  341,  330,  341,  396,  293,
       57,  122,   92,   57,   57,   31,   33,  128,   57,   57,
       57,   57,   57,  156,  157,   90,  476,  339,  330,  341,
      330,  341,  330,  341,  396,  266,  240,  271,  295,  296,
       57,   57,   57,   57,   57,   57,   57,   26,   33,  153,
      155,  146,  476,  330,  341,  330,  341,  334,  378,  400,
      316,  210,  292,  294,  285,   57,  121,   69,  123,   15,
       89,   57,   57,   57,   68,   57,   57,   57,   81,  148,
      476,  330,  341,  330,  341,  265,  267,  287,   67,   57,

       57,   57,   57,   57,   27,   33,  150,  151,  476,  330,
      341,  335,  289,  290,   39,   80,   57,   57,   57,  147,
      149,  476,  330,  341,  286,  288,   57,  125,   45,   48,
       57,  476,  477,  330,  341,   62,   57,   57,   43,   57,
      330,  341,  269,   63,   57,   57,   57,   57,  330,  341,
       87,   57,   95,   57,   57,  124,   57,  330,  341,  268,
       74,   70,   95,   57,   32,   33,   12,  152,  340,  291,
       71,   57,   66,   16,   13
    } ;

static yyconst short int yy_accept[2460] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    8,    9,    9,    9,    9,
        9,    9,    9,   10,   11,   11,   11,   12,   14,   16,
       18,   19,   22,   24,   27,   29,   31,   34,   37,   40,
       43,   46,   49,   52,   55,   60,   63,   66,   69,   72,
       75,   78,   81,   84,   87,   90,   93,   96,   99,  102,
      105,  108,  111,  114,  117,  120,  123,  126,  129,  132,

      134,  137,  139,  140,  142,  144,  146,  147,  149,  151,
      153,  155,  158,  161,  164,  167,  168,  169,  171,  173,
      176,  178,  181,  184,  186,  188,  190,  193,  196,  199,
      201,  203,  204,  206,  208,  211,  214,  216,  219,  222,
      224,  227,  230,  233,  236,  239,  243,  247,  251,  255,
      259,  263,  267,  271,  275,  279,  283,  287,  291,  295,
      299,  303,  307,  311,  314,  316,  318,  321,  324,  327,
      330,  333,  336,  338,  340,  342,  344,  347,  350,  352,
      354,  356,  358,  361,  364,  367,  370,  373,  375,  377,
      379,  381,  384,  386,  388,  390,  392,  394,  396,  399,

      402,  405,  407,  410,  412,  415,  417,  419,  421,  424,
      427,  430,  433,  436,  439,  441,  444,  447,  450,  453,
      456,  459,  462,  464,  466,  468,  470,  472,  474,  476,
      478,  480,  482,  484,  486,  488,  490,  492,  494,  496,
      498,  500,  503,  506,  509,  511,  514,  516,  519,  521,
      524,  527,  530,  533,  536,  538,  539,  540,  542,  543,
      545,  547,  549,  551,  552,  554,  555,  557,  559,  562,
      564,  566,  569,  572,  575,  577,  580,  583,  586,  587,
      588,  590,  592,  595,  597,  599,  601,  603,  605,  607,
      608,  609,  611,  612,  613,  614,  614,  615,  616,  616,

      617,  618,  619,  619,  619,  620,  622,  623,  624,  624,
      627,  627,  627,  628,  628,  629,  630,  630,  631,  632,
      633,  635,  636,  637,  638,  639,  640,  641,  642,  643,
      644,  645,  646,  647,  648,  649,  650,  651,  652,  653,
      654,  655,  656,  657,  658,  659,  660,  661,  662,  663,
      664,  665,  666,  667,  668,  669,  670,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  680,  681,  682,  682,
      683,  684,  685,  686,  687,  688,  689,  689,  689,  690,
      690,  690,  690,  690,  690,  690,  690,  691,  692,  693,
      694,  695,  696,  696,  697,  698,  699,  700,  701,  702,

      703,  703,  703,  704,  705,  706,  707,  708,  710,  710,
      712,  715,  718,  720,  722,  724,  726,  728,  731,  733,
      736,  739,  741,  744,  747,  749,  752,  755,  757,  760,
      762,  765,  767,  769,  771,  773,  775,  777,  779,  782,
      784,  786,  788,  790,  791,  792,  792,  793,  794,  794,
      795,  795,  796,  797,  798,  798,  799,  799,  800,  801,
      802,  804,  804,  805,  805,  806,  807,  807,  807,  807,
      807,  807,  808,  809,  809,  810,  811,  811,  812,  813,
      813,  813,  814,  815,  816,  817,  818,  819,  820,  820,
      820,  820,  821,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  823,  823,  823,  823,  823,  823,  824,
      825,  825,  826,  827,  827,  828,  828,  829,  829,  830,
      830,  830,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  833,  834,  834,  835,  835,  837,  838,  839,
      841,  843,  844,  845,  845,  846,  847,  848,  849,  851,
      852,  853,  853,  853,  853,  853,  853,  853,  854,  855,
      856,  857,  857,  858,  859,  860,  860,  860,  861,  861,
      862,  863,  864,  864,  865,  865,  865,  866,  867,  868,
      869,  869,  870,  870,  871,  871,  871,  872,  874,  874,

      875,  875,  875,  876,  877,  878,  880,  881,  883,  883,
      884,  885,  886,  887,  888,  889,  890,  891,  892,  893,
      893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
      902,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  941,  941,  941,
      942,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  945,  946,  947,  949,  952,  952,  954,
      956,  958,  961,  963,  965,  967,  969,  971,  973,  975,

      977,  979,  982,  984,  986,  988,  990,  992,  994,  996,
      998, 1000, 1002, 1004, 1006, 1008, 1009, 1010, 1011, 1011,
     1011, 1011, 1011, 1011, 1012, 1012, 1013, 1014, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1018, 1019, 1021, 1022,
     1022, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,

     1025, 1026, 1027, 1027, 1027, 1029, 1029, 1030, 1031, 1032,
     1032, 1033, 1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
     1044, 1045, 1045, 1045, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1052, 1054, 1055, 1057, 1058, 1059, 1059, 1060,
     1061, 1062, 1063, 1064, 1064, 1065, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091,
     1092, 1093, 1094, 1094, 1094, 1095, 1095, 1095, 1096, 1096,
     1096, 1096, 1097, 1097, 1097, 1098, 1098, 1099, 1101, 1101,

     1101, 1103, 1106, 1108, 1110, 1112, 1114, 1117, 1119, 1121,
     1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142,
     1144, 1146, 1149, 1151, 1153, 1155, 1157, 1158, 1159, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1163, 1163, 1164, 1164, 1164,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1167, 1167, 1167, 1167, 1167,
     1167, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,

     1169, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178,
     1178, 1178, 1178, 1179, 1179, 1179, 1180, 1181, 1182, 1182,
     1182, 1182, 1182, 1184, 1184, 1185, 1185, 1185, 1186, 1186,
     1187, 1187, 1187, 1187, 1187, 1188, 1189, 1189, 1190, 1191,
     1192, 1193, 1194, 1195, 1196, 1196, 1196, 1196, 1197, 1198,
     1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1206, 1207,
     1208, 1209, 1210, 1211, 1211, 1213, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1220, 1221, 1222, 1224, 1224, 1225, 1225,
     1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
     1237, 1238, 1238, 1239, 1241, 1242, 1242, 1243, 1243, 1243,

     1243, 1243, 1243, 1244, 1244, 1245, 1247, 1247, 1249, 1251,
     1253, 1255, 1257, 1259, 1261, 1263, 1263, 1263, 1263, 1264,
     1266, 1268, 1270, 1272, 1274, 1276, 1276, 1277, 1279, 1282,
     1282, 1282, 1285, 1286, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1289,
     1289, 1289, 1289, 1289, 1289, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1292,
     1292, 1292, 1293, 1294, 1294, 1295, 1295, 1295, 1295, 1296,

     1296, 1296, 1296, 1297, 1297, 1297, 1298, 1298, 1298, 1298,
     1299, 1299, 1300, 1300, 1300, 1300, 1301, 1303, 1303, 1303,
     1303, 1304, 1305, 1306, 1307, 1308, 1309, 1309, 1309, 1309,
     1309, 1310, 1311, 1312, 1312, 1313, 1313, 1314, 1315, 1316,
     1316, 1318, 1319, 1321, 1322, 1322, 1324, 1325, 1326, 1327,
     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
     1339, 1340, 1341, 1341, 1343, 1345, 1345, 1345, 1345, 1345,
     1346, 1347, 1348, 1348, 1348, 1348, 1350, 1350, 1352, 1354,
     1356, 1358, 1361, 1363, 1365, 1367, 1367, 1368, 1368, 1370,
     1373, 1375, 1377, 1379, 1379, 1379, 1380, 1381, 1382, 1382,

     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1383, 1383,
     1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1386, 1386, 1387, 1387, 1388, 1388, 1388, 1389, 1389, 1389,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393,
     1393, 1394, 1394, 1395, 1395, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1402, 1402, 1402, 1402, 1403, 1404, 1404,
     1405, 1407, 1407, 1408, 1408, 1409, 1409, 1410, 1410, 1410,

     1411, 1412, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1423,
     1423, 1424, 1425, 1425, 1425, 1427, 1428, 1430, 1432, 1434,
     1436, 1438, 1440, 1442, 1442, 1444, 1446, 1448, 1448, 1448,
     1449, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,

     1455, 1455, 1455, 1456, 1457, 1458, 1459, 1460, 1460, 1460,
     1460, 1462, 1463, 1463, 1464, 1465, 1466, 1467, 1469, 1469,
     1469, 1469, 1469, 1470, 1470, 1472, 1473, 1473, 1473, 1474,
     1474, 1474, 1476, 1476, 1477, 1477, 1477, 1477, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1487, 1488, 1489, 1490,
     1491, 1492, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1494, 1494, 1494, 1496, 1498, 1498, 1499, 1501, 1501,
     1502, 1505, 1507, 1509, 1510, 1512, 1514, 1516, 1518, 1518,
     1519, 1519, 1520, 1521, 1521, 1521, 1521, 1521, 1522, 1522,
     1523, 1523, 1524, 1525, 1525, 1525, 1525, 1525, 1525, 1525,

     1525, 1525, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528,
     1529, 1529, 1530, 1530, 1530, 1531, 1531, 1532, 1532, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1534, 1535, 1536,
     1537, 1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1540, 1541, 1542, 1544, 1545,
     1546, 1547, 1547, 1547, 1548, 1549, 1549, 1549, 1549, 1550,
     1550, 1550, 1551, 1553, 1553, 1554, 1556, 1557, 1558, 1559,
     1560, 1561, 1563, 1564, 1565, 1566, 1568, 1568, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,

     1569, 1570, 1571, 1572, 1574, 1574, 1576, 1576, 1579, 1581,
     1584, 1586, 1588, 1588, 1589, 1589, 1590, 1590, 1590, 1591,
     1592, 1592, 1592, 1592, 1593, 1593, 1593, 1593, 1594, 1595,
     1596, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1598,
     1599, 1599, 1600, 1601, 1602, 1602, 1603, 1604, 1604, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1606, 1607, 1607, 1609, 1609, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1611, 1612, 1612, 1613, 1614, 1615, 1615, 1615, 1615,
     1616, 1616, 1617, 1618, 1618, 1618, 1618, 1618, 1619, 1619,

     1620, 1621, 1622, 1623, 1623, 1624, 1624, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1626, 1626, 1627, 1627, 1629, 1629, 1631, 1633,
     1635, 1635, 1636, 1636, 1637, 1637, 1637, 1637, 1637, 1637,
     1638, 1638, 1639, 1639, 1639, 1639, 1640, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1642, 1642, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1644, 1645, 1645, 1645, 1645, 1646, 1646, 1646, 1647,
     1648, 1648, 1648, 1648, 1649, 1650, 1651, 1652, 1653, 1654,

     1654, 1654, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1657,
     1658, 1660, 1661, 1663, 1665, 1667, 1667, 1668, 1668, 1669,
     1669, 1669, 1670, 1670, 1670, 1670, 1671, 1671, 1672, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1676, 1677, 1678, 1678, 1678, 1679,
     1679, 1679, 1680, 1680, 1680, 1680, 1681, 1682, 1684, 1685,
     1686, 1686, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,

     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1688, 1690,
     1692, 1694, 1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1700, 1701, 1701, 1701, 1702, 1702,
     1703, 1704, 1705, 1705, 1706, 1707, 1708, 1709, 1709, 1709,
     1709, 1709, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1711, 1713, 1715, 1717, 1719, 1719, 1720,
     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,

     1720, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
     1721, 1722, 1722, 1722, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1724, 1724, 1724, 1724, 1724, 1725, 1726,
     1726, 1726, 1726, 1728, 1729, 1730, 1730, 1731, 1732, 1733,
     1734, 1734, 1734, 1734, 1734, 1734, 1735, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1737, 1738, 1738, 1739, 1741, 1743,
     1745, 1745, 1746, 1746, 1746, 1747, 1747, 1747, 1747, 1748,
     1749, 1749, 1749, 1749, 1749, 1750, 1751, 1751, 1751, 1751,
     1751, 1751, 1751, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1753, 1754, 1754,

     1754, 1755, 1755, 1756, 1757, 1758, 1758, 1760, 1760, 1760,
     1761, 1762, 1763, 1763, 1763, 1763, 1763, 1763, 1764, 1766,
     1768, 1768, 1769, 1770, 1770, 1771, 1772, 1772, 1772, 1772,
     1772, 1773, 1773, 1774, 1775, 1776, 1776, 1776, 1776, 1776,
     1776, 1777, 1778, 1779, 1779, 1779, 1779, 1779, 1780, 1781,
     1781, 1782, 1782, 1782, 1782, 1783, 1784, 1784, 1784, 1785,
     1786, 1787, 1788, 1789, 1790, 1790, 1790, 1791, 1791, 1791,
     1791, 1792, 1794, 1796, 1797, 1798, 1798, 1798, 1798, 1798,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,
     1799, 1799, 1800, 1800, 1800, 1800, 1801, 1802, 1802, 1802,

     1803, 1804, 1805, 1805, 1807, 1807, 1807, 1807, 1808, 1809,
     1810, 1812, 1812, 1813, 1813, 1813, 1813, 1813, 1813, 1814,
     1815, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1817, 1818, 1819, 1819, 1819, 1819, 1819, 1820, 1820,
     1821, 1822, 1823, 1825, 1825, 1825, 1825, 1826, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1828, 1828,
     1829, 1829, 1830, 1831, 1832, 1832, 1834, 1836, 1836, 1836,
     1836, 1836, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,
     1838, 1839, 1840, 1840, 1841, 1841, 1843, 1843, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 1845, 1845, 1845, 1845, 1846,

     1847, 1848, 1848, 1849, 1849, 1851, 1851, 1851, 1852, 1852,
     1852, 1852, 1852, 1852, 1852, 1852, 1852, 1854, 1855, 1856,
     1857, 1858, 1858, 1860, 1861, 1861, 1862, 1862, 1863, 1863,
     1864, 1864, 1864, 1864, 1865, 1865, 1867, 1868, 1869, 1869,
     1870, 1871, 1871, 1872, 1872, 1872, 1873, 1873, 1874, 1874,
     1875, 1875, 1875, 1875, 1875, 1875, 1875, 1876, 1876
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   42,
       30,   11,   31,   11,   32,   11,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   42,   58,   59,   60,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,    1,    1
    } ;

static yyconst int yy_meta[62] =
    {   0,
        1,    2,    2,    3,    2,    2,    4,    5,    4,    4,
        4,    6,    7,    8,    4,    9,    4,    4,   10,   10,
        4,   10,   11,    4,    6,    4,    4,    4,    4,    4,
        4,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,    6,
        4
    } ;

static yyconst short int yy_base[2589] =
    {   0,
        0,    0,   61,   65,   63,   67,   77,   82,   23,   28,
      140,  200,  260,    0,  103,  110,  321,    0,  382,    0,
      443,    0,  504,    0,  564,  611,  145,  152,  659,    0,
      720,    0,  781,    0,  173,  182,  842,    0,  102,  111,
      572,  582,  903,    0,  964,    0,  114,  121, 1025,    0,
      205,  590,  152,  195,  205,  207, 6227, 6228,   87, 6223,
     6228, 6228, 6217, 6228, 6212, 6210,   93,  230, 6199, 6228,
     6228, 6228,   79,  143,  172, 6228,  153, 6228,  631, 1085,
      203, 1060, 1077, 1086,  568,  205,  190,  541,  606, 1106,
     1088,  611, 1110, 1111, 1126, 1062, 1130, 1129, 6228, 6162,

     6228,    0, 6211, 6206, 6168, 6159, 6156,    0, 6184, 6228,
     6191, 6228, 6228, 6228, 6228, 6163, 6166, 6228,    0,    0,
     1146,  578, 6153, 6150, 6228, 1178, 1194, 6228, 6186,    0,
     6185, 6192, 6228, 6180, 6228,  109, 1199, 6228, 6228, 6179,
     6228,  111, 6228,  163, 6228, 6181,  170,  556,  579, 1071,
     1170, 1183, 1171,  201, 1189,  147,  548, 1152, 1192, 1191,
       85,  564, 1073, 6228, 6228, 6180, 6228, 6228, 6179,  599,
     1099, 6228, 6228, 6193, 6187, 6176, 6228,    0, 6228, 6190,
     6184, 6173, 6228, 6228, 6228,    0, 6143, 6228, 6186, 6180,
     6169, 6228, 6154, 6144, 1177, 6139, 6228, 6165, 6228, 6228,

     6228, 6228, 6161, 6178, 6228, 6173, 6171, 6160, 1243, 6228,
     6228, 6228, 6228, 1095, 6156, 6228,  602, 6228,  623, 6228,
     6228, 6228, 1212, 6144, 1183, 1196, 1216, 1227, 1112, 1206,
     1233, 6133,   91, 1204, 1238, 6142, 1249, 1249,  180, 6145,
     1257, 6228, 6118, 6228, 6228, 6153, 6228, 6152, 6228, 1303,
     1308, 6170,  242, 1313, 1318,    0, 6146, 6168, 1323,    0,
     6144,    0, 6162, 1376, 6111, 6108, 6228, 6144, 6143, 6228,
     1384, 1389, 6228, 6228, 6138, 6228, 6228, 6141, 6155, 6149,
     6228, 6138, 6137, 6228, 6136, 6108, 6105, 6137, 6136, 6146,
     6140, 6228, 6106,  161, 6148, 6142, 6141, 6228, 6135, 6134,

     6228, 6228, 1394,    0, 6228, 1218, 6228, 6228, 6124, 1381,
     1169, 1073, 6228, 1402, 6228, 1426, 6129, 1431,  579, 1367,
     6092, 1408, 1215,  604, 1113,  523, 1240, 1405, 1459, 1250,
     6091, 1389, 1248, 1159, 1398, 1166, 1464, 1169, 6090, 1400,
     1241, 1392, 1387, 1407, 1419, 1423, 1436, 1424, 1427, 1443,
     1053, 1437, 1444, 1441, 1447, 1217, 1452, 1448, 1369, 1451,
     1453, 1207, 1461, 1460, 1457, 1462, 6228,    0, 1464, 6228,
     6104, 6228, 6228,    0, 6113, 6228, 6103, 6091,    0, 1486,
     1473, 6085, 6084, 6101, 6081, 1498, 6228, 6228, 6228, 6228,
     1520, 6110,    0,    0, 6228,    0, 6228, 6228, 6228, 6228,

     1527, 6081, 6228, 6228, 6228, 6228, 6228, 6108,    0, 1504,
     6107, 1532, 1496,  172, 1487, 1516, 1520, 6106, 1521, 6105,
     6104, 1522, 1523, 6103, 1525, 6102, 6101, 1529, 6100, 1530,
     1531, 1280, 1526, 1527, 1536, 1535, 1164, 1546, 6099, 1549,
     1541, 1547, 1554, 6228, 6098,    0, 1557, 1558, 6112, 6111,
     6105, 6104, 6228,    0, 6108, 6107, 6101, 6100, 6228,    0,
        0, 6104, 6103, 6097, 6096, 6228, 6070, 6067, 6061, 6086,
     6067, 6228, 6228, 6095, 6094, 6228, 6088, 6087, 6228, 1597,
     6048, 6228, 6228, 6228, 6228, 6228, 6228, 6228, 6046, 6053,
     1549, 6061, 1605, 6057, 6043, 6049, 1554, 1580, 1617, 6041,

     6043, 6038, 6228, 1560, 6039, 6038, 6040, 6051, 6228, 6228,
     6044, 1545, 6228, 1578, 1562, 6029, 6228, 6047, 6228, 6030,
     6046, 6044, 6029, 6028, 6040, 1573, 1581, 6029, 6029, 1554,
     6037, 6028, 6228, 6035, 6030, 6022, 6025, 6027, 6030, 1586,
     6016, 6228, 6042,    0, 6041,    0, 1637, 1642, 6059, 6058,
     1647, 1652, 6057,    0,    0,    0, 1657,    0,    0,    0,
     6228, 1605, 1674, 6008, 6007, 6024, 6004, 6228, 6228, 6228,
     6033,    0, 1721, 6228, 6032,    0, 6046, 6045, 6039, 6038,
     6228, 6027,    0, 6228, 6012, 5998, 6028, 6027, 6026, 1609,
     6036, 6035, 6029, 6028, 6005, 5988,    0, 1698, 6016, 6015,

     6017, 6000, 6228, 1726, 1739, 1744, 1766, 1779, 1815, 1684,
     1714, 5997, 1715, 1718, 1720, 1600, 1701, 1728, 1702, 1790,
     1737, 1741, 1696, 1723, 1740, 1750, 1754, 1804, 1760, 1830,
     6228, 1765, 1777, 1774, 1763, 1843, 5996, 5995, 1801, 5994,
     5993, 1800, 1790, 5992, 1818, 1820, 1821, 1826, 1831, 5991,
     5990, 1825, 1832, 1813, 5989, 1830, 5988,   26, 5987, 1834,
     5986, 1835, 1840, 1837, 1841, 1849, 5985, 1865, 1861, 5985,
        0, 5983, 5969, 1868, 1869, 5970, 5970, 5992, 5964, 5967,
     5994, 5977,    0,    0, 6228,    0, 5988, 1906, 1870, 1878,
     1877, 5987,  568, 1890, 1894, 1895, 1900, 1776, 1538, 1901,

     1898, 5986, 1902, 1903, 1893, 1904, 1906, 1911, 1910, 1913,
     1733, 1918, 1919, 1922, 1923,    0, 1926, 1927, 5975, 5970,
     5969, 1911, 5954, 6228, 5967, 1972, 6228, 1977, 5966, 1982,
     5955, 1916, 5957, 5956, 5966, 5963, 5962, 5958, 5943, 6228,
     1987, 5957, 5941, 5951, 5956, 5953, 5952, 5937, 1992, 5942,
     5939, 5931, 5932, 1923, 5944, 5930, 1997, 5944, 5943, 5938,
     5953, 5924, 5939, 5942, 5941, 5922, 5939, 5918, 5933, 5928,
     5918, 5915, 5932, 5924, 5918, 5926, 5929, 5914, 5923, 5906,
     5919, 5907, 5920, 5915, 5918,    0,    0, 2002, 5949,    0,
        0, 2036, 1932, 2076, 5904, 5904, 5926, 5898, 5901,    0,

        0,    0, 5896, 5905, 5926, 5897, 6228,    0, 6228, 5907,
     2007, 1979, 2101, 1918, 2114, 5934, 5928, 5894, 5902, 5891,
     5885, 1926, 1980, 2120, 1925, 5899, 1981, 5898, 1985, 5897,
     1987, 5896, 5886, 5894, 1995, 5893, 2071,  202, 2090, 2092,
     1978, 2129, 5892, 2099, 5891, 2093, 2148, 2156, 2101, 2118,
     2062, 2103, 2169, 5876, 2126, 2127, 1997, 2141, 2128, 5889,
     5888, 2130, 5887, 2143, 5886, 2158, 5885, 2187, 2194, 2164,
     2165, 2166, 2065, 2157, 2168, 5884, 2172, 2173, 2223, 2181,
     2184, 5908, 2211, 2229, 5882, 5868, 5881, 5904, 2247, 2253,
     5864, 6228, 5866, 5861, 6228, 5876,    0,    0, 5903, 5897,

     2196, 5886, 2290, 2199, 2216, 2217, 5885, 2163, 2191, 5884,
     2190, 2207, 2295, 2301, 2279, 2219, 2285, 2227, 2287, 2215,
     2334, 5883, 2220, 2288, 2339, 2289,    0, 2291, 2302, 5852,
     5854, 5852, 5856, 5851, 5863, 5849, 2361, 2366, 5852, 5851,
     5859, 5848, 5842, 5843, 2371, 2376, 5859, 5858, 5837, 5850,
     5835, 5847, 5850, 5845, 5835, 5843, 6228, 5818, 5823, 5820,
     5823, 5820, 5817, 2381, 6228, 5822, 6228, 5828, 5810, 6228,
     5806, 2390, 2395, 5814, 5807, 5818, 5800, 5800, 5799, 5808,
     5795, 5808, 5792, 5787, 6228, 5785, 5798, 5797, 5789, 5784,
     6228, 5776, 5774, 5779, 5773, 5785, 5781, 5783, 5768, 2408,

     5709,    0,    0, 2420, 5753,    0,    0,    0, 5742, 2395,
     2414, 5691, 6228, 5682, 5663,    0,    0,    0, 5675, 5658,
     5664, 5663, 5651, 5638, 2221, 5626, 5658, 5657, 5649, 5644,
     5619, 5621, 5602, 5619, 2242, 5611, 2439, 2293, 2285, 2218,
     2309, 2100, 2283, 2312, 5602, 5593, 2271, 5606, 2313, 5605,
     2454, 2317, 2459, 2351, 6228, 2352, 2319, 2464, 6228, 2383,
     2400, 2370, 5604, 2469, 6228, 5589, 2403, 5562, 2353, 2440,
     5550, 2445, 2442, 2447, 2452, 5507, 2392, 2314, 2496, 2509,
     6228, 6228, 5506, 2449, 2439, 5504, 2460, 2470, 2514, 2472,
     2467, 2566, 2365, 5492, 2471, 5508, 5467, 5383, 5354, 5346,

     5314, 5335, 5327, 5311, 5308, 2498, 2531, 2504, 2502, 2503,
     2506, 2507, 2508, 2516, 2522, 2572, 2579, 2585, 6228, 2601,
     2542, 2520, 2518, 2524, 2521, 2606, 6228, 2623, 5286, 2628,
     2633, 5279, 2569, 2527, 5257, 5257, 5247, 5254, 5252, 5237,
     6228, 5239, 5238, 5248, 5183, 5174, 5113, 5130, 5124, 2647,
     2652, 5115, 5085, 5002, 4979, 4933, 4934, 4917, 4910, 4909,
     4890, 2507, 2657, 4897, 4889, 4878, 4879, 2662, 6228, 4871,
     4876, 4870, 4887, 2667, 6228, 4686, 4669, 4684, 4661, 4668,
     4664, 2672, 4664, 4676, 4662, 4670, 4664, 4671, 6228, 4662,
     4670, 6228, 6228, 2677, 6228, 4671, 2687, 4653, 6228, 4649,

     2697, 4650, 6228, 4693, 4651, 6228, 4659, 4647, 4648, 2576,
     4647, 6228, 4645, 4643, 4644, 2526, 4656, 4646, 4653, 2526,
     2509, 4652, 2559, 2564, 4651, 2563, 4650, 4649, 4652, 4640,
     2649, 2657, 2708, 2713, 2647, 2726, 2603, 2732, 2604, 4637,
     4645, 2687, 4644, 2751, 4653, 4641, 2660, 2688, 2721, 4640,
     2685, 2709, 2704, 2668, 6228, 2610, 6228, 2724, 2702, 2713,
     2729, 2722, 2773,   83,  135, 2727, 1073, 1120, 1242, 2728,
     2779, 1432, 1579, 1738, 1770, 2719, 1788, 2747, 2750, 2763,
     2766, 1949, 2767, 2769, 2770, 2793, 6228, 2808, 2771, 2008,
     2778, 2798, 2821, 2826, 2831, 6228, 2815, 2820, 2096, 2132,

     2241, 2284, 2276, 2385, 2547, 2564, 2578, 6228, 2571, 2654,
     2657, 6228, 2701, 2766, 2754, 2762, 2774, 2803, 2789, 2809,
     2795, 2811, 2814, 2813, 2814, 2819, 2809, 2852, 2858, 2808,
     6228, 2833, 2866, 2840, 2839, 2838, 2837, 2831, 2831, 6228,
     2846, 6228, 2853, 6228, 2879, 2853, 6228, 2833, 2841, 6228,
     2848, 2855, 2895, 2900, 2859, 2906, 6228, 6228, 2877, 2841,
     2854, 2854, 2863, 2862, 2871, 2886, 2884, 2884, 2886, 2871,
     6228, 2872, 2888, 2875, 2881, 6228, 2933, 2926, 2908, 2905,
     2906, 2907, 2896, 2899, 2905, 2918, 2917, 2953, 2968, 6228,
     2923, 2915, 2929, 2975, 2925, 2912, 2946, 2982, 2924, 2996,

     2956, 2989, 2969, 2953, 2970, 2976, 2931, 2958, 2973, 2955,
     2980, 2977, 2980, 2981, 2988, 2985, 2986, 2980, 3032, 3037,
     2981, 6228, 2992, 2997, 3021, 6228, 3022, 3044, 3029, 3060,
     3032, 3033, 3037, 2996, 3034, 3045, 3055, 3091, 3010, 3096,
     3048, 3101, 6228, 3042, 3029, 3043, 3047, 3050, 3051, 3043,
     3038, 6228, 3056, 3058, 3065, 6228, 3075, 3066, 3112, 6228,
     3079, 3080, 3076, 3086, 3072, 3075, 3081, 3094, 3078, 3092,
     3128, 6228, 3091, 3090, 3096, 3102, 3105, 3104, 3090, 3093,
     3093, 3104, 3089, 3099, 3111, 3103, 3113, 3114, 3150, 3106,
     3107, 3121, 3122, 3128, 3125, 3127, 3121, 3164, 3134, 3134,

     3144, 3124, 3157, 6228, 6228, 6228, 3140, 3141, 3128, 3179,
     6228, 6228, 3236, 3149, 3150, 3153, 3152, 3154, 3155, 3143,
     3161, 3164, 3206, 3215, 6228, 6228, 3153, 3149, 3166, 3155,
     3171, 3170, 3166, 3177, 3182, 3170, 3230, 6228, 3186, 6228,
     3185, 3208, 3209, 3210, 3211, 3212, 3214, 3193, 3216, 3190,
     3263, 6228, 3198, 3221, 3212, 3210, 3210, 3239, 3320, 3239,
     3240, 3242, 3249, 3257, 3293, 3299, 6228, 3262, 3304, 6228,
     3261, 3325, 3268, 6228, 3269, 3288, 3289, 3270, 3237, 6228,
     3340, 6228, 3294, 3347, 3282, 3291, 3283, 6228, 3284, 6228,
     3297, 6228, 6228, 3300, 3289, 3355, 3301, 3360, 3321, 3333,

     3317, 6228, 3333, 3321, 3337, 3341, 3340, 3345, 3332, 6228,
     3328, 3335, 3383, 3330, 6228, 3336, 3353, 3354, 3346, 6228,
     3353, 6228, 3343, 3344, 3345, 3347, 6228, 3362, 6228, 3367,
     3366, 3357, 3355, 3353, 3369, 3404, 6228, 6228, 6228, 6228,
     3374, 3396, 3411, 3372, 3379, 3389, 3376, 3387, 3374, 3395,
     3381, 3393, 3384, 3400, 3398, 3401, 3439, 3400, 6228, 6228,
     6228, 3409, 3458, 3411, 6228, 3475, 3401, 3402, 3431, 3415,
     3418, 6228, 3428, 3421, 6228, 3430, 3451, 3434, 3445, 3447,
     3438, 3446, 3489, 3449, 3498, 3450, 3503, 6228, 3443, 3447,
     3465, 3509, 3485, 3484, 3473, 3480, 3470, 3483, 3483, 3475,

     3491, 6228, 6228, 3526, 3539, 3511, 3560, 3513, 3514, 3515,
     3516, 3523, 3512, 3532, 3506, 6228, 3499, 3498, 6228, 6228,
     3512, 3518, 3571, 6228, 3515, 3531, 3520, 6228, 6228, 6228,
     6228, 3541, 3546, 3529, 3535, 3535, 3532, 3582, 6228, 6228,
     3587, 6228, 6228, 6228, 3554, 6228, 6228, 3559, 6228, 3543,
     3547, 3553, 3597, 3572, 3571, 3561, 3568, 3558, 3571, 3571,
     3576, 6228, 3613, 6228, 3598, 6228, 3569, 3570, 3572, 3571,
     3582, 3587, 3584, 3586, 3588, 3582, 3599, 3582, 3601, 3588,
     3606, 3621, 3643, 3648, 6228, 3618, 3657, 3664,    0, 6228,
     3589, 6228, 3605, 3656, 3611, 3636, 3637, 3638, 3660, 3658,

     3641, 3643, 3647, 3694, 3699, 3714, 6228, 3648, 3669, 3642,
     3647, 3649, 3721, 3638, 3673, 3661, 3676, 3693, 3673, 3667,
     3663, 3694, 3739, 6228, 3681, 3710, 3696, 3716, 3714, 3715,
     3709, 3724, 3711, 6228, 3712, 3699, 3699, 3701, 3707, 6228,
     3775, 6228, 3703, 3704, 3706, 6228, 6228, 3721, 3780, 3720,
     3725, 3719, 3724, 3725, 3789, 3714, 3735, 3724, 3738, 3750,
     3736, 3730, 3769, 3796, 6228, 3734, 3748, 3759, 3757, 3753,
     3748, 3774, 3760, 3774, 3773, 3770, 3775, 3780, 3781, 3774,
     3779, 3780, 3802, 3783, 3826, 3785, 3831, 3787, 3801, 6228,
     3782, 3794, 3790, 3806, 6228, 3808, 3809, 3811, 3813, 3804,

     3856, 6228, 3797, 3814, 3806, 3811, 3812, 3819, 3819, 3818,
     3819, 3819, 3837, 3828, 3826, 3824, 3840, 3836, 3832, 6228,
     3856, 6228, 3857, 3858, 3859, 3833, 3863, 3839, 6228, 3844,
     3846, 6228, 3840, 3899, 3853, 6228, 3854, 6228, 6228, 3845,
     3844, 3843, 3845, 3860, 3860, 3858, 3859, 3858, 3876, 3867,
     3865, 3863, 3879, 3879, 3915, 3920,    0, 6228, 3875, 3874,
     3910, 3895, 3880, 3914, 3881, 3883, 3884, 3886, 3891, 3889,
     3897, 3890, 3911, 3908, 3909, 6228, 3901, 3902, 3914, 3950,
     3911, 3924, 3923, 3929, 3915, 3930, 3928, 3929, 3934, 3933,
     3921, 6228, 3924, 3934, 3978, 3935, 3938, 3935, 3933, 3951,

     3951, 3939, 3945, 3989, 3963, 3962, 3951, 3947, 3977, 3978,
     3979, 3980, 4013, 3981, 3968, 3954, 3953, 3957, 3964, 3974,
     3961, 3974, 6228, 4026, 4031, 3980, 3983, 3973, 3972, 4002,
     4002, 3990, 3996, 4040, 4014, 4013, 4012, 4048, 4014, 4019,
     4004, 4025, 4009, 4014, 4017, 4021, 4022, 4016, 4019, 4025,
     4026, 4027, 4035, 4034, 4053, 4022, 4023, 4073, 4028, 4044,
     6228, 6228, 4049, 4047, 4046, 4048, 4052, 4029, 4057, 4109,
     4058, 6228, 4058, 4044, 4045, 4052, 4058, 4059, 4114, 4049,
     4070, 4059, 4066, 4119, 4085, 4086, 4103, 4125, 4109, 4088,
     4094, 4100, 4097, 4089, 4095, 4091, 4092, 4143, 4148, 4121,

     6228, 4121, 4107, 4111, 4117, 4123, 4124, 4168, 4113, 4134,
     4131, 4176, 4122, 6228, 4133, 4134, 4132, 4153, 4135, 4141,
     4142, 4157, 6228, 4145, 4156, 4147, 4150, 4163, 4158, 4156,
     4161, 4199, 6228, 6228, 4169, 4172, 4171, 4174, 4177, 4213,
     4233, 4168, 4169, 4171, 4173, 6228, 6228, 4173, 4176, 4184,
     4184, 4182, 4183, 6228, 4188, 4239, 6228, 4223, 4224, 4254,
     4191, 4259, 4197, 4197, 6228, 4205, 4217, 4204, 6228, 6228,
     4209, 4215, 4218, 4219, 6228, 6228, 4219, 4220, 4228, 4231,
     4229, 4230, 4246, 4244, 4244, 4229, 4252, 4243, 4287, 4248,
     4249, 4261, 4258, 4265, 4260, 4263, 4264, 4265, 4251, 4258,

     4268, 4269, 4271, 4270, 4272, 4319, 6228, 4324, 4263, 6228,
     6228, 6228, 4270, 4273, 4263, 4262, 4282, 4262, 4308, 4309,
     4333, 6228, 6228, 4338, 6228, 6228, 4308, 4302, 4303, 4309,
     6228, 4304, 6228, 6228, 6228, 4312, 4315, 4305, 4303, 4321,
     4336, 6228, 6228, 4341, 4309, 4325, 4361, 6228, 6228, 4331,
     6228, 4317, 4372, 4377, 4347, 4348, 4329, 4320, 4350, 6228,
     4354, 4349, 4401, 6228, 4324, 4355, 6228, 4358, 4344, 4346,
     4350, 4378, 4407, 6228, 6228, 4363, 4364, 4369, 4383, 6228,
     4383, 4369, 4371, 4409, 4372, 4383, 4375, 4380, 4384, 4376,
     4383, 6228, 4393, 4437, 4442, 4412, 4398, 4383, 4409, 4428,

     4430, 4419, 4458, 6228, 4474, 4404, 4406, 6228, 6228, 4421,
     4446, 4480, 6228, 4425, 4427, 4485, 4419, 4420, 6228, 6228,
     6228, 4425, 4427, 4444, 4449, 4458, 4450, 4461, 4451, 4446,
     6228, 4463, 4478, 4465, 4451, 4488, 4489, 4469, 4514, 6228,
     6228, 4469, 4485, 4458, 4459, 4520, 6228, 6228, 4481, 4481,
     4495, 4485, 4485, 4496, 4495, 4487, 4488, 4498, 4520, 6228,
     4497, 6228, 6228, 4503, 4492,    0, 4518, 4504, 4509, 4500,
     4513, 6228, 4515, 4518, 4515, 4501, 4504, 4511, 4521, 4524,
     4521, 6228, 4506, 4529, 4513, 4542, 4513, 6228, 4518, 4533,
     4534, 4520, 4528, 4536, 6228, 4545, 4536, 4528, 4544, 4545,

     4546, 4547, 4548, 4551, 4567, 4554, 4556, 6228, 4542, 4554,
     4545, 4551, 4543, 4560, 4552, 4562, 4567, 4568, 4569, 6228,
     4615, 4556, 4620, 6228, 4557, 6228, 4562, 6228, 4565, 6228,
     4564, 4573, 4568, 4593, 4633, 6228, 6228, 6228, 4646, 6228,
     6228, 4581, 6228, 4596, 4586, 4603, 4598, 6228, 4589, 6228,
     4596, 4611, 4600, 4609, 4659, 4664, 6228, 6228, 4722, 4735,
     4748, 4761, 4774, 4787, 4800, 4813, 4826, 4839, 4852, 4865,
     4878, 4891, 4904, 4916, 4927, 4938, 4950, 4953, 4964, 4976,
     4980, 4983, 4995, 5008, 5012, 5024, 5037, 5041, 5053, 5066,
     5079, 5092, 5096, 5099, 5110, 5122, 5134, 5146, 5158, 5161,

     5164, 5176, 5189, 5193, 5204, 5216, 5229, 5242, 5255, 5268,
     4641, 5280, 5284, 5295, 5306, 5318, 5321, 4642, 5332, 5344,
     5348, 4644, 5351, 4645, 5363, 5376, 5380, 5392, 5405, 5409,
     5421, 5434, 5447, 5460, 5464, 4646, 5467, 4647, 5478, 5490,
     5502, 5514, 5526, 5538, 5541, 4659, 5544, 4660, 5556, 5569,
     5573, 4662, 5584, 5596, 5609, 5622, 5626, 5637, 5648, 5659,
     5670, 5674, 5685, 5689, 5692, 5695, 5698, 5701, 5704, 5715,
     5727, 5739, 5743, 5746, 5749, 5761, 5774, 5787, 5800, 5805,
     5816, 5828, 5840, 4663, 5852, 5864, 4664, 5876
    } ;

static yyconst short int yy_def[2589] =
    {   0,
     2458,    1, 2459, 2459, 2460, 2460, 2461, 2461, 2462, 2462,
     2463, 2463, 2458,   13, 2464, 2464, 2458,   17, 2458,   19,
     2458,   21, 2458,   23, 2465, 2465, 2466, 2466, 2458,   29,
     2458,   31, 2458,   33, 2467, 2467, 2458,   37, 2468, 2468,
     2469, 2469, 2458,   43, 2458,   45, 2462, 2462, 2458,   49,
     2470, 2470, 2471, 2471, 2462, 2462, 2458, 2458, 2458, 2458,
     2458, 2458, 2472, 2458, 2458, 2473, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2474, 2474,
       80,   80,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82, 2458, 2458,

     2458, 2475, 2458, 2458, 2475, 2458, 2458, 2476, 2476, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2477, 2477,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2478, 2479,
     2479, 2480, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2481, 2481, 2481, 2481, 2481,
     2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481,
     2481, 2481, 2481, 2458, 2458, 2458, 2458, 2458, 2482, 2482,
     2482, 2458, 2458, 2483, 2484, 2458, 2458, 2485, 2458, 2486,
     2487, 2458, 2458, 2458, 2458, 2488, 2488, 2458, 2489, 2490,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2491, 2458, 2458, 2492, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2493, 2458, 2494, 2458, 2495,
     2458, 2495, 2495, 2496, 2458, 2497, 2497, 2496, 2458, 2498,
     2498, 2499, 2458, 2458, 2458, 2458, 2458, 2458, 2500, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2501, 2502, 2503,
     2458, 2458, 2504, 2458, 2458, 2458, 2458, 2505, 2506, 2507,
     2508, 2458, 2458, 2458, 2458, 2509, 2458, 2458, 2510, 2458,

     2458, 2458, 2458, 2511, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2512, 2513, 2512,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318, 2458, 2514, 2458, 2458,
     2514, 2458, 2458, 2515, 2515, 2458, 2458, 2458, 2516, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2517, 2518, 2519, 2458, 2520, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2521, 2522, 2521,
     2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521,
     2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521,
     2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521,
     2521, 2521, 2521, 2458, 2523, 2524, 2523, 2523, 2525, 2458,
     2526, 2458, 2458, 2527, 2528, 2458, 2529, 2458, 2458, 2530,
     2530, 2531, 2458, 2532, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2533, 2458, 2458, 2534, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2535, 2536, 2537, 2538, 2539, 2458, 2539, 2539,
     2540, 2458, 2540, 2541, 2541, 2542, 2458, 2543, 2543, 2544,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2545, 2546, 2458, 2458, 2547, 2548, 2549, 2458, 2550, 2458,
     2458, 2551, 2552, 2458, 2458, 2458, 2553, 2554, 2554, 2554,
     2555, 2458, 2556, 2458, 2458, 2458, 2557, 2458, 2458, 2458,

     2458, 2458, 2458, 2558, 2559, 2559, 2559,  607, 2458,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607, 2458,
      607,  607,  607,  607,  607,  607,  607,  607,  607, 2458,
     2458,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607, 2458, 2458, 2560,
     2561, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2562, 2563, 2458, 2564, 2565, 2458, 2565, 2565,
     2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565,

     2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565,
     2565, 2565, 2565, 2565, 2565, 2566, 2567, 2567, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2568, 2569, 2570, 2570, 2571,
     2572, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2573,

     2574, 2575, 2458, 2458, 2554, 2458, 2458, 2557, 2458, 2458,
     2558,  607, 2458,  607, 2458, 2576, 2577, 2458, 2458, 2458,
     2458,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607, 2458, 2458, 2458,  607,  607,  607,  607,  607,  607,
      607, 2458,  607,  607,  607,  607,  607, 2458,  607,  607,
      607,  607,  607, 2458,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607, 2458, 2458, 2458, 2560, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2562, 2564, 2578, 2579,

     2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565,
     2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565,
     2565, 2565, 2565, 2565, 2565, 2565, 2566, 2567, 2567, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2568, 2569, 2570, 2570, 2571, 2572,  792, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2573, 2574, 2575, 2458, 2458,
     2458, 2458,  607, 2458,  607, 2458, 2576, 2458, 2577, 2458,
     2458, 2458, 2458, 2458,  607,  607, 2458,  607,  607,  607,
      607,  607,  607,  607, 2458, 2458, 2458,  607,  607,  607,
      607,  607,  607,  607, 2458,  607,  607, 2458, 2458,  607,
      607,  607,  607, 2458, 2458, 2458,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607, 2580,  607, 2458, 2458,
     2458, 2458,  607,  607,  607,  607,  607,  607,  607,  607,
      607, 2458,  607,  607,  607, 2458, 2560, 2458, 2458, 2458,

     2458, 2578, 2458, 2579, 2458, 2565, 2458, 2565, 2565, 2565,
     2565, 2565, 2565, 2565, 2565, 2458, 2458, 2458, 2458, 2565,
     2565, 2565, 2565, 2565, 2565, 2458, 2458, 2565, 2565, 2458,
     2458, 2565, 2567, 2567, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,  607,
     2458, 2458, 2458, 2458, 2458,  607,  607, 2458, 2458, 2580,
      607,  607,  607,  607,  607,  607, 2458, 2458, 2458, 2458,
      607,  607,  607, 2458,  607, 2458,  607,  607,  607, 2458,
      607,  607,  607,  607, 2458,  607,  607,  607,  607,  607,
      607,  607,  607,  607, 2458,  607, 2458,  607,  607,  607,
      607,  607, 2458,  607,  607, 2458, 2458, 2458, 2458,  607,
      607, 2560, 2458, 2458, 2458, 2565, 2458, 2565, 2565, 2565,
     2565, 2565, 2565, 2565, 2565, 2458, 2458, 2458, 2565, 2565,
     2565, 2565, 2565, 2458, 2458, 2458, 2567, 2567, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458,  607, 2458, 2458,
     2458, 2458,  607, 2458, 2458, 2458,  869,  607,  607,  607,
      607,  607, 2458, 2458, 2458, 2458,  607,  869, 2458, 2458,
      607, 2458,  607, 2458,  607, 2458,  607, 2458, 2458,  607,

      607, 2580,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607, 2458, 2458, 2458, 2458, 2458, 2458,  607, 2458,
     2560, 2458, 2458, 2458, 2565, 2458, 2565, 2565, 2565, 2565,
     2565, 2565, 2565, 2458, 2565, 2565, 2565, 2458, 2458, 2567,
     2567, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458,  607, 2458, 2458, 2458,  607, 2458, 2458, 2458,
     2458, 2458, 2458,  607,  607,  607,  607,  607, 2458, 2458,
     2458, 2458,  607, 2581, 2458, 2458, 2458, 2458,  607, 2458,
     2458,  607, 2458,  607, 2458, 2458, 2458, 2458,  607, 2458,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2560, 2458, 2458, 2565, 2565, 2458, 2458, 2565, 2458, 2458,
     2565, 2565, 2565, 2458, 2565, 2565, 2565, 2565, 2458, 2458,
     2458, 2458, 2567, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
      607, 2580,  869, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458,  607,  607,  607,  607, 2458, 2458,
     2458, 2458, 2458,  607, 2458, 2582, 2458, 2458,  607, 2458,
     2458, 2458,  607, 2458, 2458,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2560, 2458, 2458, 2565, 2458, 2565, 2458, 2565, 2565, 2565,
     2565, 2565, 2458, 2567, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
      607, 2458, 2583, 2458, 2580, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
      607,  607, 2458,  607, 2458,  607, 2458, 2582, 2584, 2458,
     2458, 2458,  607, 2580, 2458, 2458, 2458,  607, 2580,  607,

      607,  607,  607, 2458,  607, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2560, 2458, 2458, 2458, 2565, 2458, 2565, 2565, 2565,
     2458, 2567, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458,  607, 2585, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
      607,  607, 2580, 2458, 2458,  607, 2586, 2458,  607, 2458,
     2458, 2458, 2458,  607, 2458,  607,  607,  607,  607, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2560, 2458,
     2565, 2458, 2565, 2565, 2565, 2458, 2567, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458,  607, 2458, 2585, 2587, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458,  607,  607, 2458, 2458, 2458,  607, 2586,
     2458,  607, 2458, 2458, 2458,  607,  607,  607,  607,  607,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2560, 2565, 2565,
     2565, 2565, 2458, 2567, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458,  607, 2588, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458,  607,  607, 2458, 2458,  607, 2458,  607,
     2458, 2458, 2458,  607,  607,  607,  607, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2560, 2565, 2565, 2565, 2565, 2458, 2567, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
      607, 2588, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458,  607,  607, 2458,
     2458, 2458, 2458, 2458,  607, 2458,  607,  607,  607,  607,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2560, 2458, 2458, 2565, 2565, 2565,
     2458, 2567, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458,  607, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458,  607,  607, 2458, 2458,

      607, 2458,  607,  607,  607, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2560, 2565, 2565,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
      607, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458,  607,  607, 2458, 2458,  607, 2458,
      607,  607,  607, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2560, 2565, 2565, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2580, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458,  607,  607, 2458, 2458,  607,

      607,  607, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2560,
     2565, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458,  607,  607, 2458, 2458, 2580, 2580,  607, 2458, 2458,
     2458, 2560, 2565, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458,  607, 2580, 2458,
     2458, 2458, 2458,  607, 2458, 2560, 2565, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,  607,
      607, 2458, 2458,  607, 2458, 2565, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,  607,  607,

      607, 2458,  607, 2458, 2565, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458,  607,  607,  607, 2458,
      869, 2458, 2565, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458,  607, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458,  607, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458,    0, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458
    } ;

static yyconst short int yy_nxt[6290] =
    {   0,
       58,   59,   60,   58,   61,   59,   62,   63,   58,   64,
       58,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   58,   76,   77,   58,   58,   58,   78,   58,
       58,   79,   80,   81,   82,   83,   84,   85,   79,   79,
       86,   79,   79,   87,   88,   89,   90,   91,   79,   92,
       93,   94,   95,   96,   97,   98,   79,   99,  100,  101,
       58,   61,  316,   61,   61,   61,   61,   61,   61,  116,
       61,  871,  103,  104,  116,  117,  103,  104,   61,   61,
      117,   61,   61,   61,   61,   61,   61,   61,  294,   61,
      111,  112,  294,  109,  113,  111,  112,  109,  305,  113,

      306,  301,   61,   61,  114,   61,   61,  409,  105,  114,
       61,   61,  105,   61,   61,  302,  131,  399,  106,  316,
      107,  279,  106,  131,  107,  132,  280,  519,  279,  261,
      441,  400,  132,  280,  115,  404,  405,  520,  261,  115,
      118,  119,  119,  118,  119,  119,   61,   61,  307,   61,
       61,  121,   61,   61,   61,   61,   61,   61,  198,  312,
      199,  200,  294,  308,  122,  198,  294,  199,  200,  409,
      289,  316,  201,  249,  250,  250,  251,  250,  250,  201,
      313,  253,  249,  250,  250,  251,  250,  250,  406,  407,
      253,  309,  409,  310,  409,   61,  431,  123,   61,  124,

      118,  119,  119,  118,  119,  119,   61,   61,  311,   61,
       61,  121,  290,  289,  290,  410,  691,  291,  285,  291,
      411,  412,  340,  409,  122,  535,  341,  536,  292,  316,
      292,  303,  303,  303,  303,  303,  342,  316,  316,  323,
      316,  293,  337,  293,  316, 2458,  316,  428,  316,  338,
      339,  316,  286,  316,  316,  287,  550,  123, 1051,  124,
      125,  126,  126,  127,  126,  126,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  128,  125,  125,  125,
      125,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  125,  125,  125,
      125,  133,   61,   61,  133,   61,   61,  134,  133,  133,
      135,  133,  133,  133,  136,  137,  133,  133,  138,  139,
      133,  133,  133,  140,  141,  142,  143,  144,  133,  133,
      145,  133,  146,  147,  146,  148,  149,  150,  146,  151,
      146,  152,  146,  146,  153,  154,  155,  156,  157,  146,
      158,  159,  160,  161,  162,  163,  146,  146,  133,  164,
      133,  133,  165,   61,   61,  165,   61,   61,  165,  165,
      165,  165,  165,  165,  165,  166,  167,  168,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  169,  169,  169,  169,  169,  170,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  171,  169,  169,  169,  169,  169,  169,  172,
      165,  165,  165,  173,   61,   61,  173,   61,   61,  173,
      174,  173,  173,  173,  173,  175,  176,  177,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      173,  173,  173,  173,  179,   61,   61,  179,   61,   61,
      179,  180,  179,  179,  179,  179,  181,  182,  179,  179,
      179,  183,  179,  179,  179,  179,  179,  184,  179,  185,
      179,  179,  179,  179,  179,  186,  187,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  179,  179,  179,  179,   61,   61,  614,   61,   61,
      409,  189,   61,  316,  316,   61,  190,  191,  409,  263,
      316,  192,   61,  264,  386,   61,  409,  343,  413,  263,
      409,   61,   61,  264,   61,   61,   61,  432,  387,  193,

      316,  409,  414,  285,  194,  388,   61,  316,  334,  195,
      442,  196,   61,   61,  335,   61,   61,  336,  189,  415,
      905,  446,  606,  190,  191,  416,  485,  486,  192,  265,
      316,  266,  314,  314,  314,  314,  314,  286,  344,  265,
      287,  266,  447,  316,  315,  316,  193,  351,  487,  488,
      316,  194,  345,  317,  612,  316,  195,  316,  196,  202,
       61,   61,  202,   61,   61,  203,  204,  202,  205,  202,
      206,  207,  208,  209,  210,  211,  212,  213,  202,  214,
      202,  215,  216,  217,  218,  219,  220,  202,  221,  222,
      202,  223,  224,  225,  226,  227,  228,  229,  202,  230,

      202,  202,  231,  232,  233,  234,  235,  202,  236,  237,
      238,  239,  240,  241,  202,  202,  242,  243,  244,  202,
      245,   61,   61,  245,   61,   61,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  245,  245,  245,
      245,  247,   61,   61,  247,   61,   61,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  247,  247,
      247,  247,   61,  254,  254,  255,  254,  254,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  257,
      256,  256,  256,  256,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  259,  258,  258,

      258,  258,  258,  267,   61,   61,  267,   61,   61,  267,
      267,  267,  267,  267,  267,  267,  268,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      267,  267,  267,  267,  270,  271,  271,  272,  271,  271,
      270,  273,  270,  270,  270,  270,  274,  270,  270,  270,
      270,  270,  270,  270,  275,  270,  270,  270,  270,  276,
      277,  270,  270,  270,  270,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  270,  270,  270,  270,  281,   61,   61,  281,   61,
       61,  281,  281,  281,  281,  281,  281,  281,  282,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  281,  281,  281,  281,  314,  314,  314,  314,
      314,  601,  324,  409,  362,  409,  649,  316,  315,  325,

      482,  316,  602,  316,  316,  316,  326,  317,  316,  316,
      316,  316,  443,  327,  417,  483,  316,  328,  316,  418,
      348,  446,  318,  329, 1416,  316,  419,  349,  319,  330,
      320,  331,  316,  448,  316,  321,  322,  350,  316,  332,
      346,  333,  352,  316,  353,  316,  354,  356,  509,  316,
      316,  357,  316,  613,  380,  347,  355,  316,  316, 1417,
      358,  316,  316,  510,  316,  316,  363,  359,  316,  316,
      364,  360,  316,  361,  409,  316,  365,  366,  381,  391,
      391,  391,  391,  391,  382,  599,  409,  599,  433,  383,
      600,  384,  409,  409,  385,  391,  391,  391,  391,  391,

      401,  401,  401,  401,  401,  409,  420,  426,  626,  469,
      316,  409,  629,  409,  409,  495,  632,  316,  422,  710,
      316,  421,  427,  470,  434,  429,  435,  437,  423,  496,
      438,  402,  497,  424,  425,  430,  498,  439,  521,  306,
      440,  511,  499,  436,  480,  480,  480,  480,  480,  489,
      662,  512,  611,  522,  311,  490,  513,  491,  316,  500,
      501,  502,  492,  493,  503,  514,  316,  505,  316,  515,
      523,  504,  656,  506,  615,  481,  507,  524,  508,  516,
      625,  527, 1418,  528,  517,  529,  622,  525,  531,  532,
      616,  316,  636,  538,  637,  533,  539,  540,  534,  316,

      530,  316,  409,  541,  547,  547,  548,  547,  547,  548,
      548,  548,  548,  548,  551,  551,  552,  551,  551,  552,
      552,  552,  552,  552,  556,  556,  705,  556,  556,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  557,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  562,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  303,  303,  303,  303,  303,

      309,  607,  310,  314,  314,  314,  314,  314,  563,  609,
      609,  609,  609,  609,  564,  315,  659,  311,  316,  565,
      316,  566,  639,  608,  567,  624,  596,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  617,  316,  315,
      316,  627,  618,  316,  315,  634,  638,  628,  317,  316,
      635,  316,  640,  317,  641,  619,  316,  643,  316,  610,
      620,  620,  620,  620,  620,  630,  630,  630,  630,  630,
      642,  644, 1421,  645,  316,  316,  646,  631,  316,  647,
      658,  650,  605,  651,  653,  668,  654,  316,  316,  648,
      652,  655,  316,  621,  316,  316,  657,  660,  316,  316,

      661,  663,  316,  316,  316,  664,  666,  674,  316,  409,
      316,  665,  316,  316,  667,  316,  681,  676,  409,  669,
      677,  391,  391,  391,  391,  391,  409,  682,  401,  401,
      401,  401,  401,  688,  688,  688,  688,  688,  409,  687,
      692,  675,  409,  409,  409,  409,  690,  409,  409,  409,
      693,  409,  409,  409,  409,  696,  694,  409,  409,  402,
      409,  701,  698,  409,  702,  703,  704,  709,  409,  409,
      695,  409,  697,  699,  700,  708,  409,  706,  707,  446,
      446,  713,  711,  689,  727,  712,  773,  714,  734,  911,
      715,  735,  745,  717,  746,  753,  754,  718,  480,  480,

      480,  480,  480,  774,  736,  728,  730,  730,  730,  730,
      730,  747,  737,  757, 1422,  758,  767,  738,  741,  741,
      741,  741,  741,  755,  768,  769,  793,  588,  756,  481,
      739,  783,  770,  740,  828,  805,  316,  784,  547,  547,
      548,  547,  547,  548,  548,  548,  548,  548,  788,  788,
      552,  788,  788,  552,  552,  552,  552,  552,  792,  792,
      794,  792,  792,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      790,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  795,  598,
      316,  796,  573,  573,  573,  573,  573,  314,  314,  314,
      314,  314,  316,  822,  311,  829,  837,  316,  316,  315,
      314,  314,  314,  314,  314,  813,  813,  813,  813,  813,
      316,  316,  315,  831,  316,  409,  316,  315,  825,  316,
      823,  317,  826,  827,  316,  830,  317,  314,  314,  314,
      314,  314,  838,  316,  839,  812,  316,  316,  922,  315,
      815,  815,  815,  815,  815,  836,  316, 1423,  317,  835,
      316,  620,  620,  620,  620,  620,  316,  841,  409,  316,

      840,  316,  814,  315,  843,  842,  842,  842,  842,  842,
      316,  844,  846,  316,  847,  316,  609,  609,  609,  609,
      609, 1424,  816,  845,  854,  832,  316,  817,  315,  910,
      833,  630,  630,  630,  630,  630,  316,  316, 1426,  834,
      316,  851,  855,  631,  848,  848,  848,  848,  848,  316,
      857,  818,  859,  852,  858,  860,  316,  316,  819,  820,
      861,  316,  316,  862,  867,  821,  316,  316,  316,  866,
      316,  316,  878,  316,  865,  875,  316,  316,  877,  316,
      879,  869,  883,  873,  880,  316,  668,  876,  882,  674,
      889,  888,  409,  884,  884,  884,  884,  884,  884,  409,

      409,  890,  890,  890,  890,  890,  890,  688,  688,  688,
      688,  688,  409,  899,  902,  409,  409,  409,  900,  901,
      409,  904,  409,  409,  409,  409,  409,  916,  409,  903,
      907,  908,  409,  409,  906,  409,  909,  912,  914,  915,
      409,  409,  913,  920,  409,  409,  918,  919,  446,  446,
      923,  933,  945,  793,  316, 1009,  917,  925,  934,  969,
     1038,  316,  316,  929,  921,  924, 1035,  946, 1025,  970,
      928,  409,  926,  937,  937,  937,  937,  937,  938,  938,
      938,  938,  938,  730,  730,  730,  730,  730,  741,  741,
      741,  741,  741,  964,  964,  964,  964,  964,  973,  973,

      973,  973,  973, 1004, 1004,  552, 1004, 1004,  314,  314,
      314,  314,  314, 1040,  316,  316,  316,  316,  940, 1044,
      315,  316,  954,  316, 1054,  941,  942,  955, 1023, 1036,
      409,  316,  943,  316, 1042, 1069,  956, 1008, 1008, 1048,
     1008, 1008, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1006,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1010,  316, 1062,

     1086,  316,  813,  813,  813,  813,  813,  316, 1011, 1011,
     1011, 1011, 1011, 1011,  315,  815,  815,  815,  815,  815,
     1050, 1037, 1037, 1037, 1037, 1037,  316,  315,  316,  316,
      842,  842,  842,  842,  842,  316,  316,  316, 1055,  316,
     1224, 1052,  315, 1053, 1060, 1057, 1063, 1442, 1056, 1058,
     1058, 1058, 1058, 1058,  316, 1024,  316,  848,  848,  848,
      848,  848,  316,  316,  316, 1059,  316, 1061, 1026,  315,
     1064, 1064, 1064, 1064, 1064, 1067, 1068,  316, 1071,  316,
     1077, 1074, 1065, 1443,  316,  409, 1070, 1075, 1079, 1079,
     1079, 1079, 1079,  316,  316, 1080, 1080, 1080, 1080, 1080,

      316,  316,  316, 1088,  316,  316, 1087, 1081,  316,  316,
     1112, 1090,  409,  409, 1083, 1084, 1085,  316,  409, 1091,
      316,  409, 1114,  316, 1092, 1092, 1092, 1092, 1092,  409,
      316, 1094,  883, 1095,  882, 1109, 1106,  409,  409,  409,
     1113,  409,  409,  884,  884,  884,  884,  884,  884,  409,
      883, 1082,  882, 1111,  316, 1121, 1115,  316, 1125,  316,
     1110,  884,  884,  884,  884,  884,  884, 1222,  889, 1093,
      888, 1128, 1210, 1444,  889, 1216,  888, 1123,  316,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890, 1107, 1107, 1107, 1107, 1107, 1116, 1116, 1116, 1116,

     1116,  409, 1118, 1118, 1118, 1118, 1118,  409, 1117,  409,
      409,  409,  409,  446, 1119, 1220, 1229,  409, 1230,  316,
     1445,  316, 1108,  409,  446, 1132, 1446, 1133, 1120,  316,
     1221, 1124, 1225, 1129, 1122, 1126, 1126, 1126, 1126, 1126,
     1130, 1130, 1130, 1130, 1130,  316, 1134, 1127,  316,  316,
      316, 1239, 1131,  316, 1223,  316,  409, 1226, 1232, 1256,
     1235,  409,  937,  937,  937,  937,  937,  938,  938,  938,
      938,  938, 1150, 1150, 1150, 1150, 1150, 1151, 1151, 1151,
     1151, 1151,  964,  964,  964,  964,  964,  316,  316,  316,
     1169, 1174, 1174, 1174, 1174, 1174,  973,  973,  973,  973,

      973,  316, 1248, 1238, 1175, 1237,  316,  603, 1152, 1201,
     1201, 1201, 1201, 1201, 1255, 1142, 1010, 1270, 1009,  316,
     1143, 1004, 1004,  552, 1004, 1004, 1243, 1011, 1011, 1011,
     1011, 1011, 1011, 1241, 1242, 1010,  316, 1009, 1447,  316,
     1037, 1037, 1037, 1037, 1037, 1176, 1011, 1011, 1011, 1011,
     1011, 1011,  315, 1246, 1202, 1234, 1234, 1234, 1234, 1234,
     1236, 1236, 1236, 1236, 1236, 1058, 1058, 1058, 1058, 1058,
     1064, 1064, 1064, 1064, 1064,  316,  316,  315,  316, 1218,
     1251,  316, 1065,  316, 1254,  316, 1258, 1253,  316, 1219,
      316, 1249, 1252, 1259, 1261,  316,  316, 1079, 1079, 1079,

     1079, 1079, 1262,  316, 1240, 1257,  316,  316,  316,  315,
     1080, 1080, 1080, 1080, 1080, 1263, 1263, 1263, 1263, 1263,
      409, 1265, 1081, 1264,  409,  409,  409, 1271,  409,  409,
      409, 1276, 1107, 1107, 1107, 1107, 1107, 1278,  409, 1280,
      409,  603,  409,  409,  409,  316,  409, 1279, 1376,  446,
      316, 1281, 1326, 1283, 1327, 1291, 1292, 1293, 1282, 1298,
     1377, 1284,  316, 1277,  409, 1290, 1082, 1092, 1092, 1092,
     1092, 1092, 1285, 1116, 1116, 1116, 1116, 1116, 1373,  315,
     1286, 1286, 1286, 1286, 1286, 1117, 1118, 1118, 1118, 1118,
     1118,  446, 1289, 1287, 1379,  316, 1448, 1382, 1119,  316,

      316, 1266, 1288, 1288, 1288, 1288, 1288, 1126, 1126, 1126,
     1126, 1126,  316, 1449, 1297, 1380, 1267, 1268, 1450, 1127,
     1269, 1451, 1368,  409, 1294, 1294, 1294, 1294, 1294, 1130,
     1130, 1130, 1130, 1130, 1295, 1295, 1295, 1295, 1295,  316,
      316, 1131, 1395, 1393, 1407,  409,  316, 1296, 1150, 1150,
     1150, 1150, 1150, 1151, 1151, 1151, 1151, 1151, 1328, 1328,
     1328, 1328, 1328, 1333, 1333, 1333, 1333, 1333, 1174, 1174,
     1174, 1174, 1174, 1345, 1345, 1345, 1345, 1345, 1354, 1354,
     1354, 1354, 1354,  316, 1315,  316, 1406, 1313, 1356, 1356,
     1356, 1356, 1356,  316, 1387, 1400,  316, 1314, 1201, 1201,

     1201, 1201, 1201, 1391,  316, 1452, 1453, 1338, 1388, 1389,
     1389, 1389, 1389, 1389, 1234, 1234, 1234, 1234, 1234, 1397,
     1401,  316, 1390,  316,  316, 1403,  315, 1236, 1236, 1236,
     1236, 1236, 1359, 1394, 1394, 1394, 1394, 1394,  316,  315,
      316,  409, 1409, 1402,  316,  316, 1454, 1360, 1361,  316,
     1405, 1362, 1398, 1398, 1398, 1398, 1398,  316,  316, 1404,
      316, 1411, 1410, 1414,  316,  316, 1392, 1415,  316,  409,
     1408, 1425,  409, 1412, 1263, 1263, 1263, 1263, 1263, 1419,
     1420, 1420, 1420, 1420, 1420,  409,  315,  316,  409,  409,
     1427,  409,  409,  409, 1286, 1286, 1286, 1286, 1286, 1431,

      409, 1428, 1455, 1432, 1456, 1457, 1433, 1287, 1429, 1288,
     1288, 1288, 1288, 1288, 1458,  316, 1437, 1430, 1436, 1413,
      409, 1435, 1438, 1438, 1438, 1438, 1438, 1294, 1294, 1294,
     1294, 1294, 1295, 1295, 1295, 1295, 1295,  446, 1441, 1459,
     1460, 1434,  446,  409, 1461, 1296, 1462, 1463, 1464, 1465,
     1466, 1467, 1468, 1328, 1328, 1328, 1328, 1328, 1439, 1471,
     1471, 1471, 1471, 1471, 1472, 1473, 1440, 1333, 1333, 1333,
     1333, 1333, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
     1345, 1345, 1345, 1345, 1345, 1484, 1485, 1486, 1487, 1488,
     1469, 1491, 1495, 1496, 1497, 1470, 1489, 1489, 1489, 1489,

     1489, 1354, 1354, 1354, 1354, 1354, 1474, 1356, 1356, 1356,
     1356, 1356, 1483, 1493, 1498, 1499, 1500, 1494, 1501, 1502,
      316, 1504, 1505, 1506,  316, 1508, 1509, 1513, 1513, 1513,
     1513, 1513, 1490, 1503, 1510, 1510, 1510, 1510, 1510, 1507,
     1515,  316,  316, 1518,  316, 1516, 1511, 1519, 1520, 1521,
     1522, 1517, 1492,  316, 1524, 1524, 1524, 1524, 1524,  316,
     1528, 1532,  316, 1533, 1536,  316, 1525, 1546, 1523, 1389,
     1389, 1389, 1389, 1389, 1529, 1514, 1394, 1394, 1394, 1394,
     1394,  315,  316, 1398, 1398, 1398, 1398, 1398,  315,  316,
     1512, 1549,  316, 1542,  316,  315, 1534, 1537, 1537, 1537,

     1537, 1537, 1527, 1539,  603,  316,  316, 1547, 1544,  316,
     1526, 1540, 1545, 1551, 1541, 1543,  316, 1552, 1553, 1530,
     1554, 1555, 1557, 1558, 1548, 1531, 1561, 1535, 1562, 1563,
     1550, 1556,  316, 1559, 1559, 1559, 1559, 1559, 1420, 1420,
     1420, 1420, 1420,  409,  409, 1566, 1566, 1566, 1566, 1566,
      315,  409, 1574, 1538,  409,  409,  409, 1567, 1565,  409,
     1580, 1569, 1569, 1569, 1569, 1569,  409,  409,  316, 1572,
      446, 1573, 1564, 1570, 1575, 1571, 1585,  409, 1586, 1587,
     1568, 1576,  409, 1588, 1583, 1589, 1590, 1577, 1591, 1592,
     1560, 1578, 1438, 1438, 1438, 1438, 1438, 1581, 1581, 1581,

     1581, 1581, 1584, 1584, 1584, 1584, 1584, 1593, 1594, 1582,
     1595, 1596, 1597, 1598, 1598, 1598, 1598, 1598,  446, 1599,
     1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1471,
     1471, 1471, 1471, 1471, 1610, 1611, 1612, 1579, 1613, 1614,
     1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
     1625, 1489, 1489, 1489, 1489, 1489, 1627, 1628, 1629, 1630,
     1631, 1632, 1609, 1634, 1635, 1636, 1636, 1636, 1636, 1636,
     1637, 1633, 1638, 1639, 1640, 1641, 1643, 1644, 1645, 1642,
     1510, 1510, 1510, 1510, 1510, 1655,  316, 1657,  316,  316,
      316, 1659, 1511,  316, 1660, 1656, 1626, 1661, 1662, 1667,

     1668, 1670,  316, 1658, 1669, 1671,  316, 1663, 1663, 1663,
     1663, 1663, 1672, 1673, 1674, 1675, 1524, 1524, 1524, 1524,
     1524,  316,  316, 1677, 1664, 1676, 1686, 1684, 1525,  316,
     1689, 1537, 1537, 1537, 1537, 1537, 1512, 1513, 1513, 1513,
     1513, 1513,  316,  315,  316,  316,  316,  316,  316,  315,
      316, 1685,  316, 1678, 1681, 1690, 1691, 1692, 1683, 1679,
     1693, 1680, 1682, 1665, 1687, 1687, 1687, 1687, 1687, 1646,
     1647, 1648, 1526, 1649, 1694, 1700, 1701, 1702, 1703,  409,
     1706, 1650, 1651,  409,  409, 1652, 1713, 1538, 1653, 1654,
      409,  409,  409, 1704, 1705, 1705, 1705, 1705, 1705,  316,

     1566, 1566, 1566, 1566, 1566, 1569, 1569, 1569, 1569, 1569,
      409,  409, 1567, 1712, 1709,  409,  446, 1570, 1716, 1708,
     1688, 1559, 1559, 1559, 1559, 1559, 1707, 1707, 1707, 1707,
     1707, 1717, 1718,  315, 1719, 1720, 1721, 1714, 1710, 1722,
     1711, 1581, 1581, 1581, 1581, 1581, 1724,  409, 1584, 1584,
     1584, 1584, 1584, 1582, 1695, 1696, 1723, 1723, 1723, 1723,
     1723, 1598, 1598, 1598, 1598, 1598, 1726, 1727, 1728, 1729,
     1697, 1698, 1730, 1731, 1699, 1732, 1733, 1734, 1735, 1736,
     1737, 1739, 1740, 1715, 1738, 1738, 1738, 1738, 1738, 1741,
     1742, 1743, 1744, 1745, 1746, 1747, 1748, 1725, 1749, 1750,

     1751, 1752, 1753, 1754, 1755, 1636, 1636, 1636, 1636, 1636,
      316,  603, 1763, 1763, 1763, 1763, 1763, 1767, 1762, 1768,
     1761, 1769, 1771, 1772, 1764, 1773, 1774, 1775, 1776, 1778,
     1777, 1779, 1780, 1765,  316, 1770,  316,  316, 1756, 1757,
     1783, 1783, 1783, 1783, 1783, 1785, 1791,  316, 1792, 1793,
     1795, 1781, 1782, 1794, 1758, 1759, 1786, 1796, 1760, 1663,
     1663, 1663, 1663, 1663,  316, 1797,  316,  316, 1766, 1798,
      316,  315, 1800, 1799, 1803,  316, 1787, 1787, 1787, 1787,
     1787,  316,  316,  316, 1801,  316,  316,  316, 1805, 1784,
     1804, 1804, 1804, 1804, 1804, 1810, 1811, 1789, 1802, 1806,

     1806, 1806, 1806, 1806, 1687, 1687, 1687, 1687, 1687, 1812,
     1813, 1813, 1813, 1813, 1813, 1665,  315, 1814, 1815, 1816,
     1817, 1818, 1819, 1820, 1821,  316, 1822, 1823, 1823, 1823,
     1823, 1823, 1790,  409,  316,  409,  409,  409,  409, 1824,
     1705, 1705, 1705, 1705, 1705,  409, 1808, 1831,  409, 1833,
     1834, 1835, 1828, 1809,  446, 1807, 1826, 1836, 1837, 1830,
     1688, 1707, 1707, 1707, 1707, 1707, 1839, 1829, 1832, 1840,
     1841, 1825, 1723, 1723, 1723, 1723, 1723, 1842, 1843, 1844,
     1845, 1846, 1847, 1738, 1738, 1738, 1738, 1738, 1849, 1849,
     1849, 1849, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1855,

     1855, 1855, 1855, 1838, 1856, 1857, 1827, 1858, 1859, 1860,
     1861, 1862,  316,  603, 1763, 1763, 1763, 1763, 1763, 1866,
     1865, 1867, 1868, 1869, 1872, 1863, 1764, 1870, 1848, 1871,
     1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
     1888,  316,  316, 1883, 1783, 1783, 1783, 1783, 1783, 1885,
     1885, 1885, 1885, 1885,  316, 1889,  315,  316, 1787, 1787,
     1787, 1787, 1787, 1891, 1886, 1787, 1787, 1787, 1787, 1787,
     1766,  603, 1892, 1893,  316,  603, 1896,  316, 1890,  316,
     1903, 1897, 1895,  316,  316, 1906, 1789, 1907, 1894, 1908,
     1910, 1899, 1898, 1884,  316, 1804, 1804, 1804, 1804, 1804,

     1901, 1901, 1901, 1901, 1901, 1911, 1912,  315, 1913, 1916,
     1917, 1904, 1902, 1918, 1790, 1806, 1806, 1806, 1806, 1806,
     1905, 1790, 1813, 1813, 1813, 1813, 1813,  315, 1900, 1914,
     1919, 1920,  409, 1922, 1923,  316,  409,  409,  409, 1915,
     1823, 1823, 1823, 1823, 1823, 1926,  446, 1928, 1929, 1930,
     1931, 1932, 1824, 1933, 1935, 1936, 1921, 1937, 1938, 1925,
     1940, 1941, 1942, 1924, 1943, 1944, 1946, 1947, 1927, 1948,
     1949, 1807, 1952, 1953, 1959, 1909, 1934, 1934, 1934, 1934,
     1934, 1849, 1849, 1849, 1849, 1849, 1950, 1954, 1960, 1939,
     1855, 1855, 1855, 1855, 1855, 1961, 1951, 1955, 1955, 1955,

     1955, 1955, 1962, 1963, 1964,  316, 1965, 1966, 1967, 1968,
     1969, 1970, 1971, 1972, 1973,  316,  316,  603, 1957, 1977,
     1979,  316, 1974, 1981, 1976, 1983, 1975, 1885, 1885, 1885,
     1885, 1885, 1787, 1787, 1787, 1787, 1787,  316, 1984,  315,
     1985, 1982,  316, 1945,  316,  316, 1986,  316, 1987, 1990,
     1991, 1989, 1992, 1958, 1993, 1994, 1988, 1901, 1901, 1901,
     1901, 1901, 1995, 1996, 1997, 1998, 1978, 1999, 2000, 1902,
     2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,  409,  409,
      409,  409, 2013, 2015, 2016,  446, 2017, 2018, 1790, 2021,
     2022, 2009, 2023, 2024, 2025, 2012, 2026, 2010, 2011, 2014,

     1934, 1934, 1934, 1934, 1934, 2027, 2028, 2029, 2030, 2031,
     2032, 2033, 2034, 2035, 2036,  316, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 2039, 2040, 2041, 2037,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2019,
     2051, 2052, 1957, 2053,  316,  316, 2056, 2057, 2054, 2020,
     2058, 1787, 1787, 1787, 1787, 1787, 2059, 2060, 2055, 2061,
      316, 2062, 2063, 2064,  316,  316,  316, 2066, 2068,  316,
      316, 1992, 1958, 2065, 2069, 2071, 2072, 1958, 2067, 2070,
     2070, 2070, 2070, 2070, 2073, 2074, 2075, 2076, 2077, 2078,
     2079, 2079, 2079, 2079, 2079, 2080, 2081, 2082, 2083,  409,

      409,  409,  409,  446, 2090, 2091, 2092, 1790, 2093, 2094,
     2095, 2096, 2086, 2084, 2088, 2088, 2088, 2088, 2088, 2097,
     2100, 2101, 2102, 2085, 2103, 2087, 2089, 2098, 2098, 2098,
     2098, 2098, 2099, 2099, 2099, 2099, 2099, 2104, 2105, 2106,
     2107, 2108, 2108, 2108, 2108, 2108, 2109, 2110, 2111, 1955,
     1955, 1955, 1955, 1955, 2113, 2114, 2115, 2116, 2117, 2118,
     2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
      316, 2129, 2130, 2131, 2132, 2132, 2132, 2132, 2132, 2134,
      316, 2136,  316,  316,  316, 2141, 2133, 2135,  316,  316,
     2137, 2142, 2144, 2145, 2146, 2147, 2138, 2148, 2149, 2150,

     2139, 2152, 2153, 2140, 2154, 1958, 2155,  409,  409,  316,
     2070, 2070, 2070, 2070, 2070, 2079, 2079, 2079, 2079, 2079,
     2156, 2156, 2156, 2156, 2156,  409, 2088, 2088, 2088, 2088,
     2088,  446, 2157, 2163, 2164, 2158, 2165, 2166, 2159, 2167,
     2168,  409, 2169, 2170, 2098, 2098, 2098, 2098, 2098, 2099,
     2099, 2099, 2099, 2099, 2160, 2173, 2174, 2175, 2161, 2143,
     2162, 2176, 2177, 2178, 2179, 2181, 2182,  316, 2151, 2108,
     2108, 2108, 2108, 2108, 2183, 2184, 2171, 1955, 1955, 1955,
     1955, 1955, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
     2193, 2194, 2195, 2196,  316, 2197, 2199, 2200, 2172,  316,

     2132, 2132, 2132, 2132, 2132,  316, 2202,  316, 2198, 2201,
      316, 2203, 2133,  316, 2206, 2206, 2206, 2206, 2206, 1992,
     2209, 2210, 2180, 2211, 2212, 2204, 2207, 2213, 2205, 2214,
     2215, 2216, 2217, 1958, 2208, 2208, 2208, 2208, 2208, 2218,
     2156, 2156, 2156, 2156, 2156,  409,  409, 2223, 2226,  316,
     2227, 2228, 2157, 2229, 2230, 2221, 2221, 2221, 2221, 2221,
     2224, 2224, 2224, 2224, 2224, 2231, 2232, 2222, 2233, 2234,
     2235, 2236, 2225, 2237, 2219, 2220,  409, 2238, 2239, 2240,
     2242,  446,  316, 2241, 2243, 2244, 2245, 2246, 2247, 2247,
     2247, 2247, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,

      316, 2256, 2257, 2258,  316, 2260,  316,  316, 2263, 2265,
     2266, 2267, 2268, 2259, 2269, 2255, 2261, 2270, 2271, 2262,
     2206, 2206, 2206, 2206, 2206, 2208, 2208, 2208, 2208, 2208,
      409,  409, 2207, 2264, 2221, 2221, 2221, 2221, 2221, 2224,
     2224, 2224, 2224, 2224, 2274, 2273, 2222, 2275, 2276, 2277,
     2278, 2225, 2279, 2280, 2281, 2282, 2283, 2272, 2284, 2285,
     2286, 2287, 2247, 2247, 2247, 2247, 2247, 2292, 2293, 2298,
     2299, 2305,  316, 2294, 2294, 2294, 2294, 2294, 2295, 2295,
     2295, 2295, 2295,  316,  316,  316,  316, 2296, 2300, 2306,
      316, 2297, 2301, 2307, 2308, 2288, 2309, 2289, 2290, 2310,

      409, 2302, 2303, 2303, 2303, 2303, 2303, 2291, 2312, 2312,
     2312, 2312, 2312, 2314, 2304, 2315, 2316, 2317, 2318, 2319,
     2313, 2320, 2322, 2323,  603, 2324, 2325, 2326, 2327,  409,
     2311, 2321, 2328, 2329,  316, 2333, 2334,  316, 2294, 2294,
     2294, 2294, 2294, 2295, 2295, 2295, 2295, 2295,  316, 2335,
     2336, 2331, 2337, 2338, 2340,  316, 2341, 2342, 2332, 2303,
     2303, 2303, 2303, 2303,  316, 2344,  316, 2345,  409, 2347,
     2348, 2304, 2349, 2350, 2330, 2339, 2339, 2339, 2339, 2339,
     2343, 2312, 2312, 2312, 2312, 2312, 2346, 2346, 2346, 2346,
     2346, 2351, 2352, 2313, 2353, 2354, 2355, 2356, 2357,  316,

     2359, 2360, 2361,  603,  603,  316, 2366,  409, 2358, 2368,
     2362, 2363, 2369, 2371,  316, 2339, 2339, 2339, 2339, 2339,
     2364, 2346, 2346, 2346, 2346, 2346, 2372, 2373, 2374, 2375,
     2376, 2377, 2378, 2379,  316,  603, 2367, 2383, 2385,  316,
      409, 2380, 2382, 2384, 2387, 2388, 2389, 2390, 2381, 2391,
     2392, 2393, 2394, 2395, 2396, 2398, 2399,  316, 2386, 2402,
      316, 2397, 2404, 2400,  409,  316, 2406, 2407, 2365, 2408,
     2409, 2410, 2401, 2411, 2370, 2403, 2412, 2413, 2414, 2416,
      316,  316,  316, 2420,  316, 2418, 2422, 2415, 2405,  409,
     2424, 2425, 2426, 2421, 2427, 2419, 2428, 2429, 2430, 2417,

     2431, 2432, 2433,  316,  316,  316, 2438, 2441, 2442, 2434,
     2443, 2430, 2423, 2444, 2445, 2417, 2435, 2435, 2435, 2435,
     2435, 2439, 2439, 2439, 2439, 2439, 2448, 2446, 2436,  316,
     2449, 2450, 2451, 2440, 2435, 2435, 2435, 2435, 2435,  316,
     2430, 2452,  409, 2453, 2454, 2455, 2436, 2439, 2439, 2439,
     2439, 2439,  597,  683, 2417,  686,  716,  786,  787, 2440,
     2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
      800,  801, 2437,  802, 1887, 2038,  316,  316, 2447, 1399,
      316,  316, 1396, 1386, 1385, 1384, 1383, 1381, 1378, 1375,
     2437, 1374,  316, 1372, 1371, 1370, 1369, 1367, 1366, 1365,

     1364,  562, 1363, 1358, 1357, 1355, 1353, 1352, 1351, 1350,
     1349, 1348, 1347, 1346, 1344, 1343, 2457, 1342, 1341, 1340,
     1339, 2457,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  316,  316, 1337,
     1336, 1335, 1334,  316, 1332,  316,  316,  316,  368, 1331,
      368,  368, 1330, 1329,  368,  368,  368,  368,  368,  374,
     1325,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  379, 1324,  379,  379, 1323,  379,  379,  379,  379,
      379,  379,  392,  392,  392,  394, 1322,  394,  394,  394,
      394,  394,  394,  394, 1321,  394,  394,  396, 1320,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  408,
      408,  408,  445,  445,  445,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  454, 1319,  454,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      460, 1318,  460,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  543,  543,  543,  545,  545,
      545,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  554, 1317,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  558, 1316,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  560,
     1312,  560, 1311, 1310,  560,  560,  560,  560,  560,  560,
      571,  571,  571,  575,  575,  575,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  582,  582,  582,  587, 1309,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  589, 1308,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  316,  316, 1307, 1306, 1305, 1304,  316, 1303,  316,
      316,  316,  604, 1302, 1301,  604,  368, 1300,  368,  368,

     1299,  409,  368,  368,  368,  368,  368,  374,  409,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  379,
     1104,  379,  379, 1105,  379,  379,  379,  379,  379,  379,
      392,  392,  392,  394, 1102,  394,  394,  394,  394,  394,
      394,  394, 1103,  394,  394,  684, 1275,  684,  684,  684,
      684,  684,  684,  684,  380,  684,  684,  408,  408,  408,
      445,  445,  445,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  454,
     1274,  454,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  460, 1273,
      460,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  543,  543,  543,  545,  545,  545,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  790, 1272,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  791,  369,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  558,  316,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  560,
     1260,  560,  316,  316,  560,  560,  560,  560,  560,  560,
      571,  571,  571,  575,  575,  575,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  582,  582,  582,  587, 1250,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  589, 1247,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  808, 1245,  808,  811,  811,
     1244, 1233, 1231, 1228,  811, 1227,  811, 1217,  811,  316,
      316, 1215, 1214, 1213, 1212,  316, 1029,  316,  316,  316,
      368, 1030,  368,  368, 1027, 1028,  368,  368,  368,  368,
      368,  374, 1211,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  897, 1209,  897,  684,  316,  684,  684,
      684,  684,  684,  684,  684, 1208,  684,  684,  898, 1207,

      898,  408,  408,  408,  927, 1206,  927,  445,  445,  445,
     1002, 1205, 1002, 1003,  797, 1003, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1006,  797,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1007,  797, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1016, 1204, 1016, 1017, 2458, 1017, 1018, 1203,
     1018, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,

     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104,  604, 1200,  604,  604, 1666, 1666, 1199,
     1198, 1197, 1196, 1666, 1195, 1194, 1193, 1666, 1666, 1788,
     1788, 1192, 1191, 1190, 1189, 1188, 1187, 1788, 1788, 1788,
     1788, 1864, 1864, 1186, 1185, 1184, 1183, 1864, 1182, 1181,
     1180, 1864, 1864, 1956, 1956, 1179, 1178, 1177, 1173, 1172,
     1171, 1956, 1956, 1956, 1956, 1980, 1980, 1170, 1168, 1167,
     1166, 1165, 1164, 1980, 1163, 1980, 1980, 2112, 2112, 1162,
     1161, 1160, 1159, 1158, 1157, 2112, 1156, 2112, 2112, 1155,
     1154, 1153, 1149, 1148, 1147, 1146, 1145, 1144, 1141, 1140,

     1139, 1138, 1137, 1136, 1135,  409,  409,  409,  409, 1105,
     1103, 1101,  678,  678,  678, 1100, 1099, 1098, 1097, 1096,
     1089, 1078, 1076,  316, 1073, 1072, 1066,  316,  316, 1049,
     1047, 1046, 1045, 1043, 1041, 1039, 1034, 1033, 1032, 1031,
     1030, 1028, 1022, 1021,  588, 1020, 1019, 1015, 1014, 1013,
     1012,  797, 2458, 1001, 1000,  999,  998,  997,  996,  995,
      994,  993,  992,  991,  990,  989,  988,  987,  986,  985,
      984,  983,  982,  981,  980,  979,  978,  977,  976,  975,
      974,  972,  971,  968,  967,  966,  965,  963,  962,  961,
      960,  959,  958,  957,  953,  952,  951,  950,  949,  948,

      947,  944,  939,  936,  935,  932,  931,  930,  409,  409,
      409,  896,  895,  894,  893,  892,  891,  678,  887,  886,
      885,  881,  874,  872,  870,  868,  864,  863,  856,  853,
      316,  850,  849,  824,  810,  809,  600,  600,  807,  806,
      593,  594,  591,  592,  588,  588,  588,  804,  803,  583,
      579,  580,  577,  578,  576,  572,  799,  798,  797,  797,
     2458, 2458, 2458,  546,  544,  785,  782,  781,  780,  779,
      778,  777,  776,  775,  772,  771,  766,  765,  764,  763,
      762,  761,  760,  759,  752,  751,  750,  749,  748,  744,
      743,  742,  733,  732,  731,  729,  726,  725,  724,  477,

      478,  474,  475,  723,  722,  721,  720,  719,  464,  465,
      462,  463,  457,  458,  455,  456,  451,  452,  449,  450,
      446,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  685,  393,  680,  679,  678,  678,  673,  672,  671,
      670,  633,  623,  316,  603,  598,  299,  300,  296,  297,
      295,  595,  594,  592,  590,  588,  586,  585,  584,  583,
      581,  580,  578,  576,  574,  572,  570,  569,  568,  561,
      559, 2458,  555, 2458,  546,  544,  542,  537,  526,  518,
      494,  484,  479,  478,  476,  475,  473,  472,  471,  468,
      467,  466,  465,  463,  461,  459,  458,  456,  453,  452,

      450,  446,  444,  409,  403,  398,  397,  395,  393,  390,
      389,  378,  377,  376,  375,  373,  372,  371,  370,  369,
      367,  304,  300,  298,  297,  295, 2458,   57, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458
    } ;

static yyconst short int yy_chk[6290] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,  658,    5,    3,    4,    5,    6,    4,    9,
        6,  658,    3,    3,   10,    9,    4,    4,    7,    7,
       10,    7,    7,    8,    8,    3,    8,    8,   59,    4,
        7,    7,   59,    5,    7,    8,    8,    6,   73,    8,

       73,   67,   39,   15,    7,   39,   15,  161,    3,    8,
       16,   40,    4,   16,   40,   67,   15,  136,    3, 1264,
        3,   47,    4,   16,    4,   15,   47,  233,   48,   39,
      161,  136,   16,   48,    7,  142,  142,  233,   40,    8,
       11,   11,   11,   11,   11,   11,   27,   27,   74,   27,
       27,   11,   53,   28,   28,   53,   28,   28,   27,   77,
       27,   27,  294,   74,   11,   28,  294,   28,   28,  156,
       53, 1265,   27,   35,   35,   35,   35,   35,   35,   28,
       77,   35,   36,   36,   36,   36,   36,   36,  144,  144,
       36,   75,  147,   75,  414,   54,  156,   11,   54,   11,

       12,   12,   12,   12,   12,   12,   51,   51,   75,   51,
       51,   12,   55,   54,   56,  147,  414,   55,   51,   56,
      147,  147,   87,  154,   12,  239,   87,  239,   55,   87,
       56,   68,   68,   68,   68,   68,   87,   86,  838,   81,
       81,   55,   86,   56,   86,  253,   81,  154,   81,   86,
       86,   86,   51,   81,   81,   51,  253,   12,  838,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   25,   25,  326,   25,   25,
      157,   25,   41,   88,  326,   41,   25,   25,  148,   41,
       88,   25,   42,   41,  122,   42,  162,   88,  148,   42,
      693,   52,   52,   42,   52,   52,   41,  157,  122,   25,

       85,  149,  148,   52,   25,  122,   42,   85,   85,   25,
      162,   25,   26,   26,   85,   26,   26,   85,   26,  149,
      693,  170,  319,   26,   26,  149,  217,  217,   26,   41,
      319,   41,   79,   79,   79,   79,   79,   52,   89,   42,
       52,   42,  170,   92,   79,   89,   26,   92,  219,  219,
       92,   26,   89,   79,  324,  324,   26,   92,   26,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   80,   80,   80,   80,
       80,  312,   82,  150,   96,  163,  351,   82,   80,   82,

      214,   96,  312,   82,  351,   82,   82,   80,   96,   83,
       82,   82,  163,   83,  150,  214,   83,   83,   84,  150,
       91,  171,   80,   83, 1267,   84,  150,   91,   80,   84,
       80,   84,   84,  171,   91,   80,   80,   91,   90,   84,
       90,   84,   93,   94,   93,   90,   93,   94,  229,   93,
       94,   94,   90,  325,  121,   90,   93,   94,   95, 1268,
       94,   98,   97,  229,  325,   95,   97,   94,   98,   97,
       97,   95,   95,   95,  158,   98,   97,   98,  121,  126,
      126,  126,  126,  126,  121,  311,  437,  311,  158,  121,
      311,  121,  151,  153,  121,  127,  127,  127,  127,  127,

      137,  137,  137,  137,  137,  152,  151,  153,  334,  195,
      334,  155,  336,  160,  159,  225,  338,  336,  152,  437,
      338,  151,  153,  195,  159,  155,  159,  160,  152,  225,
      160,  137,  226,  152,  152,  155,  226,  160,  234,  306,
      160,  230,  226,  159,  209,  209,  209,  209,  209,  223,
      362,  230,  323,  234,  306,  223,  230,  223,  362,  227,
      227,  227,  223,  223,  227,  231,  323,  228,  356,  231,
      235,  227,  356,  228,  327,  209,  228,  235,  228,  231,
      333,  237, 1269,  237,  231,  237,  330,  235,  238,  238,
      327,  327,  341,  241,  341,  238,  241,  241,  238,  333,

      237,  330,  432,  241,  250,  250,  250,  250,  250,  251,
      251,  251,  251,  251,  254,  254,  254,  254,  254,  255,
      255,  255,  255,  255,  259,  259,  432,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  264,  271,  271,  271,  271,  271,
      272,  272,  272,  272,  272,  303,  303,  303,  303,  303,

      310,  320,  310,  314,  314,  314,  314,  314,  264,  322,
      322,  322,  322,  322,  264,  314,  359,  310,  320,  264,
      359,  264,  343,  320,  264,  332,  303,  316,  316,  316,
      316,  316,  318,  318,  318,  318,  318,  328,  343,  316,
      332,  335,  328,  342,  318,  340,  342,  335,  316,  335,
      340,  340,  344,  318,  345,  328,  328,  346,  344,  322,
      329,  329,  329,  329,  329,  337,  337,  337,  337,  337,
      345,  347, 1272,  348,  346,  348,  349,  337,  349,  350,
      358,  352,  318,  353,  354,  369,  354,  347,  352,  350,
      353,  355,  354,  329,  350,  353,  357,  360,  355,  358,

      361,  363,  360,  357,  361,  364,  365,  380,  365,  415,
      329,  364,  363,  366,  366,  337,  386,  381,  413,  369,
      381,  391,  391,  391,  391,  391,  410,  386,  401,  401,
      401,  401,  401,  412,  412,  412,  412,  412,  416,  410,
      415,  380,  417,  419,  422,  423,  413,  425,  433,  434,
      416,  428,  430,  431,  412,  419,  417,  436,  435,  401,
      699,  425,  422,  441,  428,  430,  431,  436,  438,  442,
      417,  440,  419,  423,  423,  435,  443,  433,  434,  447,
      448,  441,  438,  412,  491,  440,  530,  442,  497,  699,
      443,  497,  504,  447,  504,  512,  512,  448,  480,  480,

      480,  480,  480,  530,  497,  491,  493,  493,  493,  493,
      493,  504,  498,  515, 1273,  515,  526,  498,  499,  499,
      499,  499,  499,  514,  526,  527,  562,  590,  514,  480,
      498,  540,  527,  498,  616,  590,  616,  540,  547,  547,
      547,  547,  547,  548,  548,  548,  548,  548,  551,  551,
      551,  551,  551,  552,  552,  552,  552,  552,  557,  557,
      562,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,

      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  563,  598,
      610,  563,  573,  573,  573,  573,  573,  604,  604,  604,
      604,  604,  623,  610,  598,  617,  623,  617,  619,  604,
      605,  605,  605,  605,  605,  606,  606,  606,  606,  606,
      611,  613,  605,  619,  614,  711,  615,  606,  613,  624,
      611,  605,  614,  615,  618,  618,  606,  607,  607,  607,
      607,  607,  624,  621,  625,  605,  625,  622,  711,  607,
      608,  608,  608,  608,  608,  622,  626, 1274,  607,  621,
      627,  620,  620,  620,  620,  620,  629,  627,  698,  635,

      626,  632,  607,  620,  629,  628,  628,  628,  628,  628,
      634,  632,  634,  633,  635,  608,  609,  609,  609,  609,
      609, 1275,  609,  633,  642,  620,  643,  609,  609,  698,
      620,  630,  630,  630,  630,  630,  642,  639, 1277,  620,
      628,  639,  643,  630,  636,  636,  636,  636,  636,  654,
      645,  609,  646,  639,  645,  647,  646,  647,  609,  609,
      648,  652,  648,  649,  654,  609,  656,  649,  653,  653,
      660,  662,  664,  664,  652,  662,  663,  665,  663,  636,
      665,  656,  669,  660,  666,  666,  668,  662,  668,  674,
      675,  674,  689,  669,  669,  669,  669,  669,  669,  691,

      690,  675,  675,  675,  675,  675,  675,  688,  688,  688,
      688,  688,  694,  688,  690,  705,  695,  696,  688,  689,
      701,  691,  697,  700,  703,  704,  706,  705,  707,  690,
      695,  696,  709,  708,  694,  710,  697,  700,  703,  704,
      712,  713,  701,  709,  714,  715,  707,  708,  717,  718,
      712,  722,  732,  793,  814,  793,  706,  714,  722,  754,
      825,  825,  822,  718,  710,  713,  822,  732,  814,  754,
      717, 1282,  715,  726,  726,  726,  726,  726,  728,  728,
      728,  728,  728,  730,  730,  730,  730,  730,  741,  741,
      741,  741,  741,  749,  749,  749,  749,  749,  757,  757,

      757,  757,  757,  788,  788,  788,  788,  788,  811,  811,
      811,  811,  811,  827,  841,  812,  823,  827,  730,  831,
      811,  829,  741,  831,  841,  730,  730,  741,  812,  823,
     1290,  835,  730,  857,  829,  857,  741,  792,  792,  835,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  794,  851,  851,

      873,  873,  813,  813,  813,  813,  813,  837,  794,  794,
      794,  794,  794,  794,  813,  815,  815,  815,  815,  815,
      837,  824,  824,  824,  824,  824,  839,  815,  840,  846,
      842,  842,  842,  842,  842,  844, 1042,  849,  842,  852,
     1042,  839,  842,  840,  849,  846,  852, 1299,  844,  847,
      847,  847,  847,  847,  850,  813,  824,  848,  848,  848,
      848,  848,  855,  856,  859,  848,  862,  850,  815,  848,
      853,  853,  853,  853,  853,  855,  856,  858,  859,  864,
      866,  862,  853, 1300,  847,  908,  858,  864,  868,  868,
      868,  868,  868,  874,  866,  869,  869,  869,  869,  869,

      870,  871,  872,  875,  875,  853,  874,  869,  877,  878,
      908,  877,  911,  909,  870,  871,  872,  880,  901,  878,
      881,  904,  911,  868,  879,  879,  879,  879,  879,  912,
      869,  880,  883,  881,  883,  904,  901,  920,  905,  906,
      909,  916,  923,  883,  883,  883,  883,  883,  883,  918,
      884,  869,  884,  906, 1040,  916,  912, 1025,  920,  879,
      905,  884,  884,  884,  884,  884,  884, 1040,  889,  879,
      889,  923, 1025, 1301,  890, 1035,  890,  918, 1035,  889,
      889,  889,  889,  889,  889,  890,  890,  890,  890,  890,
      890,  903,  903,  903,  903,  903,  913,  913,  913,  913,

      913,  915,  914,  914,  914,  914,  914,  917,  913,  919,
      924,  926,  903,  928,  914, 1038, 1047,  913, 1047, 1043,
     1302, 1039,  903,  914,  929,  926, 1303,  928,  915, 1038,
     1039,  919, 1043,  924,  917,  921,  921,  921,  921,  921,
      925,  925,  925,  925,  925, 1041,  929,  921, 1044, 1049,
     1078, 1057,  925, 1052, 1041, 1057,  921, 1044, 1049, 1078,
     1052,  925,  937,  937,  937,  937,  937,  938,  938,  938,
      938,  938,  945,  945,  945,  945,  945,  946,  946,  946,
      946,  946,  964,  964,  964,  964,  964, 1054, 1056, 1069,
      964,  972,  972,  972,  972,  972,  973,  973,  973,  973,

      973, 1093, 1069, 1056,  973, 1054, 1062, 1077,  946, 1000,
     1000, 1000, 1000, 1000, 1077,  937, 1010, 1093, 1010, 1060,
      938, 1004, 1004, 1004, 1004, 1004, 1062, 1010, 1010, 1010,
     1010, 1010, 1010, 1060, 1061, 1011, 1061, 1011, 1304, 1067,
     1037, 1037, 1037, 1037, 1037,  973, 1011, 1011, 1011, 1011,
     1011, 1011, 1037, 1067, 1000, 1051, 1051, 1051, 1051, 1051,
     1053, 1053, 1053, 1053, 1053, 1058, 1058, 1058, 1058, 1058,
     1064, 1064, 1064, 1064, 1064, 1085, 1070, 1058, 1073, 1037,
     1072, 1072, 1064, 1074, 1075, 1084, 1084, 1074, 1075, 1037,
     1051, 1070, 1073, 1085, 1087, 1053, 1087, 1079, 1079, 1079,

     1079, 1079, 1088, 1091, 1058, 1079, 1088, 1095, 1090, 1079,
     1080, 1080, 1080, 1080, 1080, 1089, 1089, 1089, 1089, 1089,
     1106, 1091, 1080, 1090, 1109, 1110, 1108, 1095, 1111, 1112,
     1113, 1106, 1107, 1107, 1107, 1107, 1107, 1108, 1114, 1110,
     1123, 1220, 1122, 1125, 1115, 1221, 1124, 1109, 1220, 1134,
     1089, 1111, 1162, 1113, 1162, 1123, 1124, 1125, 1112, 1134,
     1221, 1114, 1216, 1107, 1121, 1122, 1080, 1092, 1092, 1092,
     1092, 1092, 1115, 1116, 1116, 1116, 1116, 1116, 1216, 1092,
     1117, 1117, 1117, 1117, 1117, 1116, 1118, 1118, 1118, 1118,
     1118, 1133, 1121, 1117, 1223, 1223, 1305, 1226, 1118, 1226,

     1224, 1092, 1120, 1120, 1120, 1120, 1120, 1126, 1126, 1126,
     1126, 1126, 1210, 1306, 1133, 1224, 1092, 1092, 1307, 1126,
     1092, 1309, 1210, 1120, 1128, 1128, 1128, 1128, 1128, 1130,
     1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131, 1237,
     1239, 1130, 1239, 1237, 1256, 1128, 1256, 1131, 1150, 1150,
     1150, 1150, 1150, 1151, 1151, 1151, 1151, 1151, 1163, 1163,
     1163, 1163, 1163, 1168, 1168, 1168, 1168, 1168, 1174, 1174,
     1174, 1174, 1174, 1182, 1182, 1182, 1182, 1182, 1194, 1194,
     1194, 1194, 1194, 1235, 1151, 1231, 1254, 1150, 1197, 1197,
     1197, 1197, 1197, 1232, 1231, 1247, 1247, 1150, 1201, 1201,

     1201, 1201, 1201, 1235, 1254, 1310, 1311, 1174, 1232, 1233,
     1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1242,
     1248, 1251, 1234, 1242, 1248, 1251, 1234, 1236, 1236, 1236,
     1236, 1236, 1201, 1238, 1238, 1238, 1238, 1238, 1259, 1236,
     1253, 1276, 1259, 1249, 1233, 1252, 1313, 1201, 1201, 1260,
     1253, 1201, 1244, 1244, 1244, 1244, 1244, 1249, 1262, 1252,
     1258, 1261, 1260, 1266, 1270, 1261, 1236, 1266, 1238, 1278,
     1258, 1276, 1279, 1262, 1263, 1263, 1263, 1263, 1263, 1270,
     1271, 1271, 1271, 1271, 1271, 1280, 1263, 1244, 1281, 1283,
     1278, 1284, 1285, 1289, 1286, 1286, 1286, 1286, 1286, 1283,

     1291, 1279, 1314, 1284, 1315, 1316, 1285, 1286, 1280, 1288,
     1288, 1288, 1288, 1288, 1317, 1271, 1292, 1281, 1291, 1263,
     1292, 1289, 1293, 1293, 1293, 1293, 1293, 1294, 1294, 1294,
     1294, 1294, 1295, 1295, 1295, 1295, 1295, 1297, 1298, 1318,
     1319, 1288, 1298, 1293, 1320, 1295, 1321, 1322, 1323, 1324,
     1325, 1326, 1327, 1328, 1328, 1328, 1328, 1328, 1294, 1329,
     1329, 1329, 1329, 1329, 1330, 1332, 1297, 1333, 1333, 1333,
     1333, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1343,
     1345, 1345, 1345, 1345, 1345, 1346, 1348, 1349, 1351, 1352,
     1328, 1355, 1360, 1361, 1362, 1328, 1353, 1353, 1353, 1353,

     1353, 1354, 1354, 1354, 1354, 1354, 1333, 1356, 1356, 1356,
     1356, 1356, 1345, 1359, 1363, 1364, 1365, 1359, 1366, 1367,
     1368, 1369, 1370, 1372, 1373, 1374, 1375, 1378, 1378, 1378,
     1378, 1378, 1354, 1368, 1377, 1377, 1377, 1377, 1377, 1373,
     1379, 1380, 1381, 1382, 1379, 1380, 1377, 1383, 1384, 1385,
     1386, 1381, 1356, 1387, 1388, 1388, 1388, 1388, 1388, 1391,
     1392, 1395, 1378, 1396, 1399, 1393, 1388, 1407, 1387, 1389,
     1389, 1389, 1389, 1389, 1393, 1378, 1394, 1394, 1394, 1394,
     1394, 1389, 1397, 1398, 1398, 1398, 1398, 1398, 1394, 1404,
     1377, 1410, 1401, 1404, 1408, 1398, 1397, 1400, 1400, 1400,

     1400, 1400, 1389, 1401, 1402, 1403, 1405, 1408, 1406, 1409,
     1388, 1402, 1406, 1412, 1403, 1405, 1411, 1413, 1414, 1394,
     1415, 1416, 1417, 1418, 1409, 1394, 1421, 1398, 1423, 1424,
     1411, 1416, 1400, 1419, 1419, 1419, 1419, 1419, 1420, 1420,
     1420, 1420, 1420, 1425, 1427, 1428, 1428, 1428, 1428, 1428,
     1420, 1429, 1434, 1400, 1431, 1432, 1435, 1428, 1427, 1433,
     1439, 1430, 1430, 1430, 1430, 1430, 1428, 1436, 1419, 1432,
     1441, 1433, 1425, 1430, 1435, 1431, 1444, 1437, 1445, 1446,
     1429, 1436, 1430, 1447, 1441, 1448, 1449, 1437, 1450, 1451,
     1420, 1437, 1438, 1438, 1438, 1438, 1438, 1440, 1440, 1440,

     1440, 1440, 1442, 1442, 1442, 1442, 1442, 1453, 1454, 1440,
     1455, 1457, 1458, 1459, 1459, 1459, 1459, 1459, 1440, 1461,
     1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
     1471, 1471, 1471, 1471, 1473, 1474, 1475, 1438, 1476, 1477,
     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1489, 1489, 1489, 1489, 1490, 1491, 1492, 1493,
     1494, 1495, 1471, 1496, 1497, 1498, 1498, 1498, 1498, 1498,
     1499, 1495, 1500, 1501, 1502, 1503, 1507, 1508, 1509, 1503,
     1510, 1510, 1510, 1510, 1510, 1514, 1515, 1516, 1517, 1516,
     1518, 1519, 1510, 1503, 1520, 1515, 1489, 1521, 1522, 1527,

     1528, 1530, 1529, 1517, 1529, 1531, 1532, 1523, 1523, 1523,
     1523, 1523, 1533, 1534, 1535, 1536, 1524, 1524, 1524, 1524,
     1524, 1541, 1539, 1541, 1523, 1539, 1550, 1548, 1524, 1548,
     1553, 1537, 1537, 1537, 1537, 1537, 1510, 1513, 1513, 1513,
     1513, 1513, 1523, 1537, 1542, 1543, 1544, 1545, 1546, 1513,
     1547, 1549, 1549, 1542, 1545, 1554, 1555, 1556, 1547, 1543,
     1557, 1544, 1546, 1523, 1551, 1551, 1551, 1551, 1551, 1513,
     1513, 1513, 1524, 1513, 1558, 1560, 1561, 1562, 1563, 1564,
     1568, 1513, 1513, 1571, 1568, 1513, 1579, 1537, 1513, 1513,
     1573, 1575, 1578, 1564, 1565, 1565, 1565, 1565, 1565, 1551,

     1566, 1566, 1566, 1566, 1566, 1569, 1569, 1569, 1569, 1569,
     1576, 1577, 1566, 1578, 1575, 1565, 1583, 1569, 1585, 1573,
     1551, 1559, 1559, 1559, 1559, 1559, 1572, 1572, 1572, 1572,
     1572, 1586, 1587, 1559, 1589, 1591, 1594, 1583, 1576, 1595,
     1577, 1581, 1581, 1581, 1581, 1581, 1597, 1572, 1584, 1584,
     1584, 1584, 1584, 1581, 1559, 1559, 1596, 1596, 1596, 1596,
     1596, 1598, 1598, 1598, 1598, 1598, 1599, 1600, 1601, 1603,
     1559, 1559, 1604, 1605, 1559, 1606, 1607, 1608, 1609, 1611,
     1612, 1614, 1616, 1584, 1613, 1613, 1613, 1613, 1613, 1617,
     1618, 1619, 1621, 1623, 1624, 1625, 1626, 1598, 1628, 1630,

     1631, 1632, 1633, 1634, 1635, 1636, 1636, 1636, 1636, 1636,
     1641, 1642, 1643, 1643, 1643, 1643, 1643, 1644, 1642, 1645,
     1641, 1646, 1647, 1648, 1643, 1649, 1649, 1650, 1651, 1652,
     1651, 1653, 1654, 1643, 1655, 1646, 1658, 1656, 1636, 1636,
     1657, 1657, 1657, 1657, 1657, 1662, 1667, 1664, 1668, 1669,
     1670, 1655, 1656, 1669, 1636, 1636, 1664, 1671, 1636, 1663,
     1663, 1663, 1663, 1663, 1673, 1674, 1676, 1669, 1643, 1677,
     1678, 1663, 1678, 1677, 1681, 1657, 1666, 1666, 1666, 1666,
     1666, 1679, 1682, 1680, 1679, 1684, 1686, 1677, 1684, 1657,
     1683, 1683, 1683, 1683, 1683, 1689, 1690, 1666, 1680, 1685,

     1685, 1685, 1685, 1685, 1687, 1687, 1687, 1687, 1687, 1691,
     1692, 1692, 1692, 1692, 1692, 1663, 1687, 1693, 1694, 1695,
     1696, 1697, 1698, 1699, 1700, 1683, 1701, 1704, 1704, 1704,
     1704, 1704, 1666, 1706, 1685, 1708, 1709, 1710, 1711, 1704,
     1705, 1705, 1705, 1705, 1705, 1712, 1687, 1713, 1704, 1715,
     1717, 1718, 1709, 1687, 1714, 1685, 1706, 1721, 1722, 1712,
     1687, 1707, 1707, 1707, 1707, 1707, 1725, 1711, 1714, 1726,
     1727, 1705, 1723, 1723, 1723, 1723, 1723, 1732, 1733, 1734,
     1735, 1736, 1737, 1738, 1738, 1738, 1738, 1738, 1741, 1741,
     1741, 1741, 1741, 1745, 1748, 1750, 1751, 1752, 1753, 1753,

     1753, 1753, 1753, 1723, 1754, 1755, 1707, 1756, 1757, 1758,
     1759, 1760, 1761, 1765, 1763, 1763, 1763, 1763, 1763, 1767,
     1765, 1768, 1769, 1770, 1772, 1761, 1763, 1771, 1738, 1771,
     1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
     1791, 1793, 1781, 1782, 1783, 1783, 1783, 1783, 1783, 1784,
     1784, 1784, 1784, 1784, 1786, 1793, 1783, 1782, 1787, 1787,
     1787, 1787, 1787, 1795, 1786, 1788, 1788, 1788, 1788, 1788,
     1763, 1794, 1796, 1797, 1798, 1799, 1800, 1801, 1794, 1802,
     1808, 1801, 1799, 1803, 1784, 1810, 1788, 1811, 1798, 1812,
     1814, 1803, 1802, 1783, 1800, 1804, 1804, 1804, 1804, 1804,

     1805, 1805, 1805, 1805, 1805, 1815, 1816, 1804, 1817, 1819,
     1820, 1809, 1805, 1821, 1787, 1806, 1806, 1806, 1806, 1806,
     1809, 1788, 1813, 1813, 1813, 1813, 1813, 1806, 1804, 1818,
     1822, 1825, 1826, 1827, 1828, 1805, 1829, 1830, 1828, 1818,
     1823, 1823, 1823, 1823, 1823, 1831, 1832, 1833, 1835, 1836,
     1837, 1838, 1823, 1839, 1843, 1844, 1826, 1845, 1848, 1830,
     1850, 1851, 1852, 1829, 1853, 1854, 1856, 1857, 1832, 1858,
     1859, 1806, 1861, 1862, 1866, 1813, 1841, 1841, 1841, 1841,
     1841, 1849, 1849, 1849, 1849, 1849, 1860, 1863, 1867, 1849,
     1855, 1855, 1855, 1855, 1855, 1868, 1860, 1864, 1864, 1864,

     1864, 1864, 1869, 1870, 1871, 1863, 1872, 1873, 1874, 1875,
     1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1864, 1884,
     1886, 1886, 1881, 1888, 1883, 1891, 1882, 1885, 1885, 1885,
     1885, 1885, 1887, 1887, 1887, 1887, 1887, 1889, 1892, 1885,
     1893, 1889, 1894, 1855, 1896, 1897, 1894, 1898, 1896, 1899,
     1900, 1898, 1903, 1864, 1904, 1905, 1897, 1901, 1901, 1901,
     1901, 1901, 1906, 1907, 1908, 1909, 1885, 1910, 1911, 1901,
     1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1921, 1923,
     1924, 1925, 1926, 1928, 1930, 1927, 1931, 1933, 1887, 1935,
     1937, 1921, 1940, 1941, 1942, 1925, 1943, 1923, 1924, 1927,

     1934, 1934, 1934, 1934, 1934, 1944, 1945, 1946, 1947, 1948,
     1949, 1950, 1951, 1952, 1953, 1954, 1955, 1955, 1955, 1955,
     1955, 1956, 1956, 1956, 1956, 1956, 1959, 1960, 1961, 1954,
     1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1934,
     1971, 1972, 1956, 1973, 1974, 1975, 1977, 1978, 1974, 1934,
     1979, 1980, 1980, 1980, 1980, 1980, 1981, 1982, 1975, 1983,
     1982, 1984, 1985, 1986, 1987, 1988, 1986, 1989, 1991, 1990,
     1989, 1993, 1955, 1987, 1994, 1996, 1997, 1956, 1990, 1995,
     1995, 1995, 1995, 1995, 1998, 1999, 2000, 2001, 2002, 2003,
     2004, 2004, 2004, 2004, 2004, 2005, 2006, 2007, 2008, 2009,

     2010, 2011, 2012, 2014, 2015, 2016, 2017, 1980, 2018, 2019,
     2020, 2021, 2011, 2009, 2013, 2013, 2013, 2013, 2013, 2022,
     2026, 2027, 2028, 2010, 2029, 2012, 2014, 2024, 2024, 2024,
     2024, 2024, 2025, 2025, 2025, 2025, 2025, 2030, 2031, 2032,
     2033, 2034, 2034, 2034, 2034, 2034, 2035, 2036, 2037, 2038,
     2038, 2038, 2038, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
     2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
     2054, 2055, 2056, 2057, 2058, 2058, 2058, 2058, 2058, 2059,
     2060, 2063, 2065, 2064, 2066, 2068, 2058, 2060, 2067, 2055,
     2064, 2069, 2071, 2073, 2074, 2075, 2065, 2076, 2077, 2078,

     2066, 2080, 2081, 2067, 2082, 2038, 2083, 2085, 2086, 2058,
     2070, 2070, 2070, 2070, 2070, 2079, 2079, 2079, 2079, 2079,
     2084, 2084, 2084, 2084, 2084, 2087, 2088, 2088, 2088, 2088,
     2088, 2089, 2084, 2090, 2091, 2085, 2092, 2093, 2086, 2094,
     2095, 2084, 2096, 2097, 2098, 2098, 2098, 2098, 2098, 2099,
     2099, 2099, 2099, 2099, 2087, 2100, 2102, 2103, 2088, 2070,
     2089, 2104, 2105, 2106, 2107, 2109, 2110, 2111, 2079, 2108,
     2108, 2108, 2108, 2108, 2111, 2113, 2098, 2112, 2112, 2112,
     2112, 2112, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
     2124, 2125, 2126, 2127, 2129, 2128, 2130, 2131, 2099, 2128,

     2132, 2132, 2132, 2132, 2132, 2135, 2136, 2137, 2129, 2135,
     2138, 2137, 2132, 2139, 2140, 2140, 2140, 2140, 2140, 2142,
     2143, 2144, 2108, 2145, 2148, 2138, 2140, 2149, 2139, 2150,
     2151, 2152, 2153, 2112, 2141, 2141, 2141, 2141, 2141, 2155,
     2156, 2156, 2156, 2156, 2156, 2158, 2159, 2161, 2163, 2140,
     2164, 2166, 2156, 2167, 2168, 2160, 2160, 2160, 2160, 2160,
     2162, 2162, 2162, 2162, 2162, 2171, 2172, 2160, 2173, 2174,
     2177, 2178, 2162, 2179, 2158, 2159, 2160, 2180, 2181, 2182,
     2184, 2162, 2183, 2183, 2185, 2186, 2187, 2188, 2189, 2189,
     2189, 2189, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,

     2197, 2198, 2199, 2200, 2201, 2202, 2204, 2203, 2205, 2209,
     2213, 2214, 2215, 2201, 2216, 2197, 2203, 2217, 2218, 2204,
     2206, 2206, 2206, 2206, 2206, 2208, 2208, 2208, 2208, 2208,
     2219, 2220, 2206, 2208, 2221, 2221, 2221, 2221, 2221, 2224,
     2224, 2224, 2224, 2224, 2227, 2220, 2221, 2228, 2229, 2230,
     2232, 2224, 2236, 2237, 2238, 2239, 2240, 2219, 2241, 2244,
     2245, 2246, 2247, 2247, 2247, 2247, 2247, 2250, 2252, 2257,
     2258, 2265, 2241, 2253, 2253, 2253, 2253, 2253, 2254, 2254,
     2254, 2254, 2254, 2255, 2256, 2262, 2259, 2255, 2259, 2266,
     2261, 2256, 2261, 2268, 2269, 2247, 2270, 2247, 2247, 2271,

     2272, 2262, 2263, 2263, 2263, 2263, 2263, 2247, 2273, 2273,
     2273, 2273, 2273, 2276, 2263, 2277, 2278, 2279, 2281, 2282,
     2273, 2283, 2285, 2286, 2284, 2287, 2288, 2289, 2290, 2273,
     2272, 2284, 2291, 2293, 2297, 2297, 2298, 2263, 2294, 2294,
     2294, 2294, 2294, 2295, 2295, 2295, 2295, 2295, 2296, 2299,
     2300, 2295, 2301, 2302, 2306, 2302, 2307, 2310, 2296, 2303,
     2303, 2303, 2303, 2303, 2300, 2314, 2301, 2315, 2311, 2317,
     2318, 2303, 2322, 2323, 2294, 2305, 2305, 2305, 2305, 2305,
     2311, 2312, 2312, 2312, 2312, 2312, 2316, 2316, 2316, 2316,
     2316, 2324, 2325, 2312, 2326, 2327, 2328, 2329, 2330, 2332,

     2333, 2334, 2335, 2336, 2337, 2338, 2342, 2343, 2332, 2344,
     2336, 2337, 2345, 2349, 2333, 2339, 2339, 2339, 2339, 2339,
     2338, 2346, 2346, 2346, 2346, 2346, 2350, 2351, 2352, 2353,
     2354, 2355, 2356, 2357, 2358, 2359, 2343, 2361, 2365, 2364,
     2367, 2358, 2359, 2364, 2368, 2369, 2370, 2371, 2358, 2373,
     2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2367, 2383,
     2380, 2378, 2385, 2381, 2386, 2384, 2387, 2389, 2339, 2390,
     2391, 2392, 2381, 2393, 2346, 2384, 2394, 2396, 2397, 2398,
     2399, 2400, 2401, 2402, 2403, 2400, 2404, 2397, 2386, 2405,
     2406, 2407, 2409, 2403, 2410, 2401, 2411, 2412, 2413, 2399,

     2414, 2415, 2416, 2417, 2418, 2419, 2422, 2425, 2427, 2419,
     2429, 2431, 2405, 2432, 2433, 2418, 2421, 2421, 2421, 2421,
     2421, 2423, 2423, 2423, 2423, 2423, 2442, 2434, 2421, 2434,
     2444, 2445, 2447, 2423, 2435, 2435, 2435, 2435, 2435, 2446,
     2449, 2451, 2423, 2452, 2453, 2454, 2435, 2439, 2439, 2439,
     2439, 2439, 2511, 2518, 2446, 2522, 2524, 2536, 2538, 2439,
     2455, 2455, 2455, 2455, 2455, 2456, 2456, 2456, 2456, 2456,
     2546, 2548, 2421, 2552, 2584, 2587, 1250, 1246, 2435, 1245,
     1243, 1241, 1240, 1230, 1229, 1228, 1227, 1225, 1222, 1219,
     2435, 1218, 1217, 1215, 1214, 1213, 1211, 1209, 1208, 1207,

     1205, 1204, 1202, 1200, 1198, 1196, 1191, 1190, 1188, 1187,
     1186, 1185, 1184, 1183, 1181, 1180, 2455, 1179, 1178, 1177,
     1176, 2456, 2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
     2459, 2459, 2459, 2459, 2459, 2460, 2460, 2460, 2460, 2460,
     2460, 2460, 2460, 2460, 2460, 2460, 2460, 2460, 2461, 2461,
     2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461,
     2461, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462,
     2462, 2462, 2462, 2462, 2463, 2463, 2463, 2463, 2463, 2463,
     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2464, 2464, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464,

     2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465,
     2465, 2465, 2465, 2466, 2466, 2466, 2466, 2466, 2466, 2466,
     2466, 2466, 2466, 2466, 2466, 2466, 2467, 2467, 2467, 2467,
     2467, 2467, 2467, 2467, 2467, 2467, 2467, 2467, 2467, 2468,
     2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,
     2468, 2468, 2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469,
     2469, 2469, 2469, 2469, 2469, 2470, 2470, 2470, 2470, 2470,
     2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2471, 2471,
     2471, 2471, 2471, 2471, 2471, 2471, 2471, 2471, 2471, 2471,
     2471, 2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472,

     2472, 2472, 2472, 2472, 2473, 2473, 2473, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2473, 2474, 2474, 1173,
     1172, 1171, 1170, 2474, 1167, 2474, 2474, 2474, 2475, 1166,
     2475, 2475, 1165, 1164, 2475, 2475, 2475, 2475, 2475, 2476,
     1161, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
     2476, 2477, 1160, 2477, 2477, 1159, 2477, 2477, 2477, 2477,
     2477, 2477, 2478, 2478, 2478, 2479, 1158, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 1157, 2479, 2479, 2480, 1156, 2480,
     2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2481,
     2481, 2481, 2482, 2482, 2482, 2483, 2483, 2483, 2483, 2483,

     2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483, 2484, 2484,
     2484, 2484, 2484, 2484, 2484, 2484, 2484, 2484, 2484, 2484,
     2484, 2485, 1155, 2485, 2486, 2486, 2486, 2486, 2486, 2486,
     2486, 2486, 2486, 2486, 2486, 2486, 2486, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2488, 1154, 2488, 2489, 2489, 2489, 2489, 2489, 2489, 2489,
     2489, 2489, 2489, 2489, 2489, 2489, 2490, 2490, 2490, 2490,
     2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2491,
     2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
     2491, 2491, 2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,

     2492, 2492, 2492, 2492, 2492, 2493, 2493, 2493, 2494, 2494,
     2494, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2495, 2495, 2495, 2496, 2496, 2496, 2496, 2496, 2496, 2496,
     2496, 2496, 2496, 2496, 2496, 2497, 1153, 2497, 2497, 2497,
     2497, 2497, 2497, 2497, 2497, 2497, 2497, 2498, 1152, 2498,
     2498, 2498, 2498, 2498, 2498, 2498, 2498, 2498, 2498, 2499,
     1149, 2499, 1148, 1147, 2499, 2499, 2499, 2499, 2499, 2499,
     2500, 2500, 2500, 2501, 2501, 2501, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2503,
     2503, 2503, 2503, 2503, 2503, 2503, 2503, 2503, 2503, 2503,

     2503, 2503, 2504, 2504, 2504, 2505, 1146, 2505, 2505, 2505,
     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2506, 1145, 2506,
     2506, 2506, 2506, 2506, 2506, 2506, 2506, 2506, 2506, 2507,
     2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507,
     2507, 2507, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508,
     2508, 2508, 2508, 2508, 2508, 2509, 2509, 2509, 2509, 2509,
     2509, 2509, 2509, 2509, 2509, 2509, 2509, 2509, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2512, 2512, 1144, 1143, 1142, 1140, 2512, 1139, 2512,
     2512, 2512, 2513, 1138, 1137, 2513, 2514, 1136, 2514, 2514,

     1135, 1132, 2514, 2514, 2514, 2514, 2514, 2515, 1129, 2515,
     2515, 2515, 2515, 2515, 2515, 2515, 2515, 2515, 2515, 2516,
     1105, 2516, 2516, 1104, 2516, 2516, 2516, 2516, 2516, 2516,
     2517, 2517, 2517, 2519, 1103, 2519, 2519, 2519, 2519, 2519,
     2519, 2519, 1102, 2519, 2519, 2520, 1101, 2520, 2520, 2520,
     2520, 2520, 2520, 2520, 1100, 2520, 2520, 2521, 2521, 2521,
     2523, 2523, 2523, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2526, 2526, 2526, 2526,
     2526, 2526, 2526, 2526, 2526, 2526, 2526, 2526, 2526, 2527,
     1099, 2527, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,

     2528, 2528, 2528, 2528, 2528, 2529, 2529, 2529, 2529, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2530, 1098,
     2530, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2532, 2532, 2532, 2532, 2532, 2532,
     2532, 2532, 2532, 2532, 2532, 2532, 2532, 2533, 2533, 2533,
     2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533,
     2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534,
     2534, 2534, 2534, 2535, 2535, 2535, 2537, 2537, 2537, 2539,
     2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539,
     2539, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2541, 1097, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2542, 1096, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2543, 1094, 2543,
     2543, 2543, 2543, 2543, 2543, 2543, 2543, 2543, 2543, 2544,
     1086, 2544, 1083, 1076, 2544, 2544, 2544, 2544, 2544, 2544,
     2545, 2545, 2545, 2547, 2547, 2547, 2549, 2549, 2549, 2549,
     2549, 2549, 2549, 2549, 2549, 2549, 2549, 2549, 2549, 2550,
     2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550,
     2550, 2550, 2551, 2551, 2551, 2553, 1071, 2553, 2553, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2554, 1068, 2554,

     2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2555,
     2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2556, 2556, 2556, 2556, 2556, 2556, 2556, 2556,
     2556, 2556, 2556, 2556, 2556, 2557, 1066, 2557, 2558, 2558,
     1063, 1050, 1048, 1046, 2558, 1045, 2558, 1036, 2558, 2559,
     2559, 1034, 1033, 1032, 1031, 2559, 1030, 2559, 2559, 2559,
     2560, 1029, 2560, 2560, 1028, 1027, 2560, 2560, 2560, 2560,
     2560, 2561, 1026, 2561, 2561, 2561, 2561, 2561, 2561, 2561,
     2561, 2561, 2561, 2562, 1024, 2562, 2563, 1023, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 1022, 2563, 2563, 2564, 1021,

     2564, 2565, 2565, 2565, 2566, 1020, 2566, 2567, 2567, 2567,
     2568, 1019, 2568, 2569, 1015, 2569, 2570, 2570, 2570, 2570,
     2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2571, 1014,
     2571, 2571, 2571, 2571, 2571, 2571, 2571, 2571, 2571, 2571,
     2572, 1012, 2572, 2572, 2572, 2572, 2572, 2572, 2572, 2572,
     2572, 2572, 2573, 1009, 2573, 2574, 1005, 2574, 2575, 1001,
     2575, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576,
     2576, 2576, 2576, 2576, 2577, 2577, 2577, 2577, 2577, 2577,
     2577, 2577, 2577, 2577, 2577, 2577, 2577, 2578, 2578, 2578,
     2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578,

     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2580,  999, 2580, 2580, 2581, 2581,  998,
      997,  996,  995, 2581,  994,  993,  992, 2581, 2581, 2582,
     2582,  990,  989,  988,  987,  986,  984, 2582, 2582, 2582,
     2582, 2583, 2583,  983,  982,  981,  980, 2583,  979,  978,
      977, 2583, 2583, 2585, 2585,  976,  975,  974,  971,  969,
      968, 2585, 2585, 2585, 2585, 2586, 2586,  966,  963,  962,
      961,  960,  959, 2586,  958, 2586, 2586, 2588, 2588,  956,
      955,  954,  953,  952,  951, 2588,  950, 2588, 2588,  949,
      948,  947,  944,  943,  942,  941,  940,  939,  936,  935,

      934,  933,  932,  931,  930,  922,  910,  907,  902,  900,
      899,  896,  894,  893,  891,  888,  887,  886,  885,  882,
      876,  867,  865,  863,  861,  860,  854,  845,  843,  836,
      834,  833,  832,  830,  828,  826,  821,  820,  819,  818,
      817,  816,  810,  806,  805,  804,  803,  799,  798,  797,
      796,  795,  789,  785,  784,  783,  782,  781,  780,  779,
      778,  777,  776,  775,  774,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  764,  763,  762,  761,  760,  759,
      758,  756,  755,  753,  752,  751,  750,  748,  747,  746,
      745,  744,  743,  742,  739,  738,  737,  736,  735,  734,

      733,  731,  729,  725,  723,  721,  720,  719,  702,  692,
      687,  682,  681,  680,  679,  678,  677,  676,  673,  672,
      670,  667,  661,  659,  657,  655,  651,  650,  644,  641,
      640,  638,  637,  612,  602,  601,  600,  599,  596,  595,
      594,  593,  592,  591,  589,  588,  587,  586,  585,  582,
      580,  579,  578,  577,  575,  571,  567,  566,  565,  564,
      553,  550,  549,  545,  543,  541,  539,  538,  537,  536,
      535,  534,  532,  531,  529,  528,  525,  524,  523,  522,
      521,  520,  518,  516,  511,  508,  507,  506,  505,  502,
      501,  500,  496,  495,  494,  492,  490,  489,  481,  478,

      477,  475,  474,  471,  470,  469,  468,  467,  465,  464,
      463,  462,  458,  457,  456,  455,  452,  451,  450,  449,
      445,  439,  429,  427,  426,  424,  421,  420,  418,  411,
      408,  402,  392,  385,  384,  383,  382,  378,  377,  375,
      371,  339,  331,  321,  317,  309,  300,  299,  297,  296,
      295,  293,  291,  290,  289,  288,  287,  286,  285,  283,
      282,  280,  279,  278,  275,  269,  268,  266,  265,  263,
      261,  258,  257,  252,  248,  246,  243,  240,  236,  232,
      224,  215,  208,  207,  206,  204,  203,  198,  196,  194,
      193,  191,  190,  189,  187,  182,  181,  180,  176,  175,

      174,  169,  166,  146,  140,  134,  132,  131,  129,  124,
      123,  117,  116,  111,  109,  107,  106,  105,  104,  103,
      100,   69,   66,   65,   63,   60,   57, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[481] =
    {   0,
      228,  229,  248,  254,  261,  265,  271,  277,  284,  291,
      297,  303,  309,  315,  321,  325,  329,  335,  341,  347,
      350,  353,  356,  363,  369,  375,  381,  387,  393,  399,
      405,  414,  423,  429,  432,  435,  438,  441,  444,  447,
      450,  453,  456,  459,  462,  465,  468,  471,  474,  477,
      480,  487,  493,  499,  505,  510,  516,  522,  527,  533,
      538,  544,  549,  554,  559,  567,  572,  577,  582,  590,
      595,  600,  605,  610,  618,  623,  628,  633,  638,  643,
      649,  657,  665,  674,  683,  692,  701,  709,  716,  724,
      732,  740,  748,  757,  768,  771,  774,  777,  780,  784,

      787,  790,  793,  796,  799,  802,  805,  808,  818,  821,
      824,  827,  830,  833,  836,  839,  842,  845,  848,  851,
      854,  857,  860,  863,  866,  869,  872,  875,  878,  881,
      884,  887,  890,  893,  896,  899,  902,  905,  908,  911,
      914,  917,  920,  923,  926,  929,  932,  935,  938,  941,
      944,  947,  950,  953,  956,  959,  962,  965,  971,  990,
      995, 1016, 1020, 1024, 1028, 1032, 1036, 1040, 1049, 1055,
     1059, 1063, 1067, 1071, 1075, 1079, 1083, 1087, 1091, 1095,
     1099, 1103, 1107, 1111, 1115, 1123, 1127, 1131, 1135, 1139,
     1143, 1148, 1152, 1156, 1160, 1164, 1168, 1172, 1176, 1180,

     1184, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1220,
     1224, 1228, 1232, 1236, 1240, 1244, 1248, 1252, 1256, 1260,
     1264, 1268, 1272, 1282, 1286, 1294, 1298, 1302, 1306, 1319,
     1327, 1331, 1335, 1339, 1347, 1354, 1362, 1370, 1373, 1376,
     1379, 1382, 1385, 1388, 1391, 1394, 1408, 1413, 1417, 1421,
     1425, 1429, 1433, 1437, 1441, 1445, 1449, 1453, 1461, 1464,
     1467, 1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 1494,
     1497, 1500, 1503, 1506, 1509, 1512, 1515, 1518, 1521, 1524,
     1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 1551, 1554,
     1557, 1560, 1563, 1566, 1569, 1572, 1575, 1581, 1602, 1609,

     1614, 1635, 1639, 1646, 1651, 1655, 1659, 1663, 1668, 1685,
     1707, 1713, 1720, 1725, 1732, 1739, 1743, 1747, 1751, 1755,
     1777, 1782, 1789, 1793, 1814, 1822, 1826, 1847, 1854, 1859,
     1868, 1874, 1880, 1886, 1892, 1898, 1904, 1910, 1916, 1924,
     1932, 1937, 1944, 1951, 1956, 1961, 1968, 1976, 1981, 1986,
     1991, 1996, 2001, 2006, 2011, 2016, 2021, 2026, 2031, 2036,
     2041, 2046, 2051, 2056, 2061, 2066, 2071, 2076, 2081, 2086,
     2091, 2096, 2101, 2106, 2111, 2116, 2121, 2126, 2131, 2136,
     2141, 2146, 2151, 2156, 2161, 2168, 2173, 2180, 2184, 2188,
     2192, 2196, 2200, 2220, 2228, 2233, 2241, 2247, 2254, 2260,

     2268, 2288, 2296, 2302, 2307, 2312, 2332, 2339, 2346, 2354,
     2360, 2364, 2392, 2397, 2402, 2409, 2415, 2438, 2444, 2466,
     2472, 2493, 2500, 2504, 2509, 2531, 2539, 2543, 2567, 2574,
     2581, 2588, 2595, 2602, 2606, 2611, 2638, 2645, 2652, 2659,
     2666, 2673, 2680, 2685, 2690, 2695, 2699, 2705, 2726, 2733,
     2737, 2744, 2765, 2772, 2795, 2801, 2805, 2826, 2833, 2840,
     2863, 2870, 2892, 2899, 2927, 2934, 2941, 2945, 2950, 2954,
     2959, 2963, 2985, 2992, 3000, 3004, 3009, 3013, 3018, 3022
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "xquery_scanner.l"
#define INITIAL 0
/* -*- mode: c++; indent-tabs-mode: nil; tab-width: 2 -*-
 *
 *  $Id: xquery.l,v 1.4 2006/11/14 05:24:43 Paul Pedersen Exp $
 *
 */
/*______________________________________________________________________
|                                                                       
| 	An implementation of the w3c proposal:                              
|                                                                       
| 	"Building a Tokenizer for XPath or XQuery,                          
| 	 W3C Working Draft 4 April 2005"                                    
|                                                                       
| 	[http://www.w3.org/TR/xquery-xpath-parsing/]                        
|                                                                       
| 	Extensions including update, search, and XQueryP:                   
|                                                                       
| 	[http://www.w3.org/TR/xqupdate/]                                    
| 	[http://www.w3.org/TR/xquery-full-text/]                            
| 	[http://www.ximep-2006.org/papers/Paper-Chamberlin-Carey.pdf]       
|                                                                      
|_______________________________________________________________________*/
#line 26 "xquery_scanner.l"

#ifdef _WIN32
#pragma warning(disable: 4786)
#endif

#ifdef WIN32
#include "win32/compatib_defs.h"
#ifndef _WIN32_WCE
#include <io.h>
#endif
#endif

#include <cstdlib>
#ifndef _WIN32_WCE
#include <errno.h>
#endif
#include <limits.h>
#include <iostream>
#include <string>

#include "symbol_table.h"
#include "xquery_driver.h"
#include "xquery_parser.tab.h"

/*
	Work around an incompatibility in flex (at least versions
	2.5.31 through 2.5.33): it generates code that does
	not conform to C89.  See Debian bug 333231
	<http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
*/
#undef yywrap
#define yywrap() 1
     
/*
	By default yylex returns int, we use token_type.
	Unfortunately yyterminate by default returns 0, which is
	not of token_type.
*/
#define yyterminate() return token::END
/*______________________________________________________________________
*                                                                      *
*  Scanner options                                                     *
*______________________________________________________________________*/
/*%option nostdinit*/
#define YY_STACK_USED 1
/* known expensive option */
/*_____________________________________________________________________
|
|  Whitespace definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Basic character classes
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  XQuery allows '' to escape ', and "" to escape ".
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  NCName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  QName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  VarName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Entity definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Numeric literal definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  String literal definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Content character definitions
|______________________________________________________________________*/
/*______________________________________________________________________
| 
|  Exclusive start states
|______________________________________________________________________*/
#define MODE_APOS_ATTRIBUTE_CONTENT 1

#define MODE_CDATA_SECTION 2

#define MODE_CLOSE_KINDTEST 3

#define MODE_DECLAREORDERING 4

#define MODE_ELEMENT_CONTENT 5

#define MODE_END_TAG 6

#define MODE_EXPR_COMMENT 7

#define MODE_ITEMTYPE 8

#define MODE_KINDTEST 9

#define MODE_KINDTESTFORPI 10

#define MODE_NAMESPACEDECL 11

#define MODE_NAMESPACEKEYWORD 12

#define MODE_OCCURRENCE_INDICATOR 13

#define MODE_OPERATOR 14

#define MODE_OPTION 15

#define MODE_PRAGMA 16

#define MODE_PRAGMACONTENTS 17

#define MODE_PROCESSING_INSTRUCTION 18

#define MODE_PROCESSING_INSTRUCTION_CONTENT 19
 
#define MODE_QUOTE_ATTRIBUTE_CONTENT 20
 
#define MODE_SINGLETYPE 21

#define MODE_START_TAG 22

#define MODE_URITOOPERATOR 23

#define MODE_VARNAME 24

#define MODE_XMLSPACE_DECL 25

#define MODE_XML_COMMENT 26

#define MODE_XQUERY_VERSION 27

/*
	The macro YY_USER_ACTION can be defined to provide an action which is 
	always executed prior to the matched rule's action.

	The following paragraph suffices to track locations accurately. Each 
	time yylex is invoked, the begin position is moved onto the end 
	position. Then when a pattern is matched, the end position is advanced 
	of its width. In case it matched ends of lines, the end cursor is 
	adjusted, and each time blanks are matched, the begin cursor is moved 
	onto the end cursor to effectively ignore the blanks preceding tokens. 
	Comments would be treated equally. 
*/
#line 3046 "xquery_scanner.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 223 "xquery_scanner.l"


 yylloc->step ();


#line 3203 "xquery_scanner.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2459 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 2458 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 481 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 481 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 482 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 228 "xquery_scanner.l"
{ yylloc->step(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 229 "xquery_scanner.l"
{ yylloc->lines(yyleng); yylloc->step (); }
	YY_BREAK

typedef yy::xquery_parser::token token;

/*______________________________________________________________________
	 |
	 |  INITIAL State
	 |
	 |  This state is for patterns that occur at the beginning	of an
	 |  expression or subexpression.
	 |______________________________________________________________________*/
/* maintain INITIAL */
/* ---------------- */
case 3:
YY_RULE_SETUP
#line 248 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::VALIDATE_LBRACE;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 254 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext+9, yyleng-9);
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::VALIDATE_MODE;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 261 "xquery_scanner.l"
{
	return token::TYPESWITCH_LPAR;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 265 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::ELEMENT_LBRACE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 271 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::ATTRIBUTE_LBRACE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 277 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext+10, yyleng-10);
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::ATTRIBUTE_QNAME_LBRACE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 284 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext+8, yyleng-8);
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::ELEMENT_QNAME_LBRACE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 291 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::DOCUMENT_LBRACE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 297 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::TEXT_LBRACE;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 303 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::PI_LBRACE;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 309 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::PI_NCNAME_LBRACE;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 315 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::COMMENT_LBRACE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 321 "xquery_scanner.l"
{
	return token::DECLARE_FUNCTION;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 325 "xquery_scanner.l"
{
	return token::DECLARE_UPDATING_FUNCTION;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 329 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::LBRACE;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 335 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::ORDERED_LBRACE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 341 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::UNORDERED_LBRACE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 347 "xquery_scanner.l"
{
	return token::SEMI;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 350 "xquery_scanner.l"
{
	return token::COMMA;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 353 "xquery_scanner.l"
{
	return token::LPAR;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 356 "xquery_scanner.l"
{
	return token::IF_LPAR;
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 24:
YY_RULE_SETUP
#line 363 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::ELEMENT_LPAR;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 369 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::ATTRIBUTE_LPAR;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 375 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 381 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::SCHEMA_ATTRIBUTE_LPAR;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 387 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::COMMENT_LPAR;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 393 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::TEXT_LPAR;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 399 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::NODE_LPAR;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 405 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::DOCUMENT_NODE_LPAR;
}
	YY_BREAK
/* transition to KINDTESTFORPI */
/* --------------------------- */
case 32:
YY_RULE_SETUP
#line 414 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTESTFORPI);
	return token::PROCESSING_INSTRUCTION;
}
	YY_BREAK
/* order dependence: this must follow the rules: xxx{S}"(" */
case 33:
YY_RULE_SETUP
#line 423 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng-1);
	return token::QNAME_LPAR;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 429 "xquery_scanner.l"
{
	return token::MINUS;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 432 "xquery_scanner.l"
{
	return token::PLUS;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 435 "xquery_scanner.l"
{
	return token::SLASH;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 438 "xquery_scanner.l"
{
	return token::LEADING_LONE_SLASH;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 441 "xquery_scanner.l"
{
	return token::SLASH_SLASH;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 444 "xquery_scanner.l"
{
	return token::ANCESTOR_OR_SELF_AXIS;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 447 "xquery_scanner.l"
{
	return token::ANCESTOR_AXIS;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 450 "xquery_scanner.l"
{
	return token::ATTRIBUTE_AXIS;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 453 "xquery_scanner.l"
{
	return token::CHILD_AXIS;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 456 "xquery_scanner.l"
{
	return token::DESCENDANT_OR_SELF_AXIS;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 459 "xquery_scanner.l"
{
	return token::DESCENDANT_AXIS;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 462 "xquery_scanner.l"
{
	return token::FOLLOWING_SIBLING_AXIS;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 465 "xquery_scanner.l"
{
	return token::FOLLOWING_AXIS;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 468 "xquery_scanner.l"
{
	return token::PARENT_AXIS;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 471 "xquery_scanner.l"
{
	return token::PRECEDING_SIBLING_AXIS;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 474 "xquery_scanner.l"
{
	return token::PRECEDING_AXIS;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 477 "xquery_scanner.l"
{
	return token::SELF_AXIS;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 480 "xquery_scanner.l"
{
	return token::AT_SIGN;
}
	YY_BREAK
/* transition to OPERATOR */
/* ---------------------- */
case 52:
YY_RULE_SETUP
#line 487 "xquery_scanner.l"
{
	yylval->ival = driver.symtab.intval(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::INTEGER_LITERAL;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 493 "xquery_scanner.l"
{
	yylval->decval = driver.symtab.decimalval(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::DECIMAL_LITERAL;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 499 "xquery_scanner.l"
{
	yylval->dval = driver.symtab.doubleval(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::DOUBLE_LITERAL;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 505 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::NAN;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 510 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext, yyleng-2);
	BEGIN MODE_OPERATOR;
	return token::ELEM_WILDCARD;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 516 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::QNAME;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 522 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::RPAR;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 527 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext+2, yyleng-2);
	BEGIN MODE_OPERATOR;
	return token::PREFIX_WILDCARD;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 533 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::STAR;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 538 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::STRING_LITERAL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 544 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DECLARE_CONSTRUCTION;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 549 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DECLARE_DEFAULT_ORDER;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 554 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DOT_DOT;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 559 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DOT;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 66:
YY_RULE_SETUP
#line 567 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::DECLARE_DEFAULT_COLLATION;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 572 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::DECLARE_NAMESPACE;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 577 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::MODULE_NAMESPACE;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 582 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::DECLARE_BASE_URI;
}
	YY_BREAK
/* transition to NAMESPACEKEYWORD */
/* ------------------------------ */
case 70:
YY_RULE_SETUP
#line 590 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::DECLARE_DEFAULT_ELEMENT;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 595 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::DECLARE_DEFAULT_FUNCTION;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 600 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::IMPORT_SCHEMA;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 605 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::IMPORT_MODULE;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 610 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::DECLARE_COPY_NAMESPACES;
}
	YY_BREAK
/* transition to VARNAME */
/* --------------------- */
case 75:
YY_RULE_SETUP
#line 618 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DOLLAR;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 623 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::FOR_DOLLAR;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 628 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::LET_DOLLAR;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 633 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::SOME_DOLLAR;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 638 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::EVERY_DOLLAR;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 643 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DECLARE_VARIABLE_DOLLAR;
}
	YY_BREAK
/* update rule */
case 81:
YY_RULE_SETUP
#line 649 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::TRANSFORM_COPY_DOLLAR;
}
	YY_BREAK
/* transition to ITEMTYPE */
/* ---------------------- */
case 82:
YY_RULE_SETUP
#line 657 "xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::RPAR_AS;
}	
	YY_BREAK
/* transition to XML_COMMENT */
/* ------------------------- */
case 83:
YY_RULE_SETUP
#line 665 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_XML_COMMENT);
	return token::XML_COMMENT_BEGIN;
}
	YY_BREAK
/* transition to PROCESSING_INSTRUCTION */
/* ------------------------------------ */
case 84:
YY_RULE_SETUP
#line 674 "xquery_scanner.l"
{	
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_PROCESSING_INSTRUCTION);
	return token::PI_BEGIN;
}
	YY_BREAK
/* transition to CDATA_SECTION */
/* --------------------------- */
case 85:
YY_RULE_SETUP
#line 683 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_CDATA_SECTION);
	return token::CDATA_BEGIN;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 86:
YY_RULE_SETUP
#line 692 "xquery_scanner.l"
{ 	
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_START_TAG);
	return token::START_TAG;
}
	YY_BREAK
/* transition to XMLSPACE_DECL */
/* --------------------------- */
case 87:
YY_RULE_SETUP
#line 701 "xquery_scanner.l"
{
	BEGIN MODE_XMLSPACE_DECL;
	return token::DECLARE_BOUNDARY_SPACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 88:
YY_RULE_SETUP
#line 709 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* transition to DECLAREORDERING */
/* ----------------------------- */
case 89:
YY_RULE_SETUP
#line 716 "xquery_scanner.l"
{
	BEGIN MODE_DECLAREORDERING;
	return token::DECLARE_ORDERING;
}
	YY_BREAK
/* transition to XQUERY_VERSION */
/* ---------------------------- */
case 90:
YY_RULE_SETUP
#line 724 "xquery_scanner.l"
{
	BEGIN MODE_XQUERY_VERSION;
	return token::XQUERY_VERSION;
}
	YY_BREAK
/* transition to PRAGMA */
/* -------------------- */
case 91:
YY_RULE_SETUP
#line 732 "xquery_scanner.l"
{ 	
	BEGIN MODE_PRAGMA;
	return token::PRAGMA_BEGIN;
}
	YY_BREAK
/* transition to OPTION */
/* -------------------- */
case 92:
YY_RULE_SETUP
#line 740 "xquery_scanner.l"
{
	BEGIN MODE_OPTION;
	return token::DECLARE_OPTION;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 93:
YY_RULE_SETUP
#line 748 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext+3, yyleng-3);
	BEGIN MODE_NAMESPACEDECL;
	return token::AT_URI_LITERAL;
}
	YY_BREAK
/* pop previous state */
/* ------------------ */
case 94:
YY_RULE_SETUP
#line 757 "xquery_scanner.l"
{ 	
	yy_pop_state();
	return token::RBRACE;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | Update rules <INITIAL>
	 |______________________________________________________________________*/
case 95:
YY_RULE_SETUP
#line 768 "xquery_scanner.l"
{
	return token::DECLARE_REVALIDATION_MODE;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 771 "xquery_scanner.l"
{
	return token::DO_INSERT;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 774 "xquery_scanner.l"
{
	return token::DO_DELETE;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 777 "xquery_scanner.l"
{
	return token::DO_REPLACE;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 780 "xquery_scanner.l"
{
	driver.set_rename(true);
	return token::DO_RENAME;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 784 "xquery_scanner.l"
{
	return token::INTO;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 787 "xquery_scanner.l"
{
	return token::FIRST_INTO;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 790 "xquery_scanner.l"
{
	return token::LAST_INTO;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 793 "xquery_scanner.l"
{
	return token::AFTER;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 796 "xquery_scanner.l"
{
	return token::BEFORE;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 799 "xquery_scanner.l"
{
	return token::VALUE_OF;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 802 "xquery_scanner.l"
{
	return token::WITH;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 805 "xquery_scanner.l"
{
	return token::AS;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 808 "xquery_scanner.l"
{
	return token::MODIFY;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | FT rules <INITIAL>
	 |______________________________________________________________________*/
case 109:
YY_RULE_SETUP
#line 818 "xquery_scanner.l"
{
	return token::FTAND;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 821 "xquery_scanner.l"
{
	return token::FTNOT;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 824 "xquery_scanner.l"
{
	return token::FTOR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 827 "xquery_scanner.l"
{
	return token::FTNOT_IN;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 830 "xquery_scanner.l"
{
	return token::ALL;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 833 "xquery_scanner.l"
{
	return token::ALL_WORDS;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 836 "xquery_scanner.l"
{
	return token::ANY;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 839 "xquery_scanner.l"
{
	return token::ANY_WORD;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 842 "xquery_scanner.l"
{
	return token::AT_END;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 845 "xquery_scanner.l"
{
	return token::AT_LEAST;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 848 "xquery_scanner.l"
{
	return token::AT_MOST;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 851 "xquery_scanner.l"
{
	return token::AT_START;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 854 "xquery_scanner.l"
{
	return token::CASE_INSENSITIVE;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 857 "xquery_scanner.l"
{
	return token::CASE_SENSITIVE;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 860 "xquery_scanner.l"
{
	return token::DECLARE_FTOPTION;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 863 "xquery_scanner.l"
{
	return token::DIACRITICS_INSENSITIVE;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 866 "xquery_scanner.l"
{
	return token::DIACRITICS_SENSITIVE;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 869 "xquery_scanner.l"
{
	return token::DIFFERENT;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 872 "xquery_scanner.l"
{
	return token::DISTANCE;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 875 "xquery_scanner.l"
{
	return token::ENTIRE_CONTENT;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 878 "xquery_scanner.l"
{
	return token::EXACTLY;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 881 "xquery_scanner.l"
{
	return token::FROM;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 884 "xquery_scanner.l"
{
	return token::LANGUAGE;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 887 "xquery_scanner.l"
{
	return token::LEVELS;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 890 "xquery_scanner.l"
{
	return token::LOWERCASE;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 893 "xquery_scanner.l"
{
	return token::OCCURS;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 896 "xquery_scanner.l"
{
	return token::PARAGRAPH;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 899 "xquery_scanner.l"
{
	return token::PHRASE;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 902 "xquery_scanner.l"
{
	return token::RELATIONSHIP;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 905 "xquery_scanner.l"
{
	return token::SAME;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 908 "xquery_scanner.l"
{
	return token::SCORE;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 911 "xquery_scanner.l"
{
	return token::SENTENCE;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 914 "xquery_scanner.l"
{
	return token::SENTENCES;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 917 "xquery_scanner.l"
{
	return token::TIMES;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 920 "xquery_scanner.l"
{
	return token::UPPERCASE;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 923 "xquery_scanner.l"
{
	return token::WEIGHT;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 926 "xquery_scanner.l"
{
	return token::WINDOW;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 929 "xquery_scanner.l"
{
	return token::WITHOUT_CONTENT;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 932 "xquery_scanner.l"
{
	return token::WITHOUT_DIACRITICS;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 935 "xquery_scanner.l"
{
	return token::WITHOUT_STEMMING;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 938 "xquery_scanner.l"
{
	return token::WITHOUT_STOP_WORDS;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 941 "xquery_scanner.l"
{
	return token::WITHOUT_THESAURUS;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 944 "xquery_scanner.l"
{
	return token::WITHOUT_WILDCARDS;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 947 "xquery_scanner.l"
{
	return token::WITH_DEFAULT_STOP_WORDS;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 950 "xquery_scanner.l"
{
	return token::WITH_DIACRITICS;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 953 "xquery_scanner.l"
{
	return token::WITH_STEMMING;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 956 "xquery_scanner.l"
{
	return token::WITH_STOP_WORDS;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 959 "xquery_scanner.l"
{
	return token::WITH_THESAURUS;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 962 "xquery_scanner.l"
{
	return token::WITH_WILDCARDS;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 965 "xquery_scanner.l"
{
	return token::WORDS;
}
	YY_BREAK
/* catch all */
case 159:
YY_RULE_SETUP
#line 971 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 |	The DECLAREORDERING State
	 |
	 |	Special state to recognize declare ordering specific keywords. 
	 |	transition to INITIAL
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 160:
YY_RULE_SETUP
#line 990 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ORDERED;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 995 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::UNORDERED;
}
	YY_BREAK
/* <MODE_DECLAREORDERING> */
/*______________________________________________________________________  
	 |
	 |	OPERATOR State 
	 | 
	 |  This state is for patterns that are defined for operators.
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 162:
YY_RULE_SETUP
#line 1016 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ INITIAL);
	return token::LBRACE;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1020 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1024 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::THEN;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1028 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ELSE;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1032 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXTERNAL;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1036 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AND;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1040 "xquery_scanner.l"
{
	if (!driver.ftcontains()) {
		BEGIN INITIAL;
	}
	return token::AT;
}
	YY_BREAK
/* full-text rule */
case 169:
YY_RULE_SETUP
#line 1049 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SCORE;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1055 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GETS;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1059 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::COMMA;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1063 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DIV;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1067 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EQUALS;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1071 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXCEPT;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1075 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_EQ;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1079 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GE;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1083 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GT;
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1087 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LE;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1091 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LT;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1095 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_NE;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1099 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GE;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1103 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FOLLOWS;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1107 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GT;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1111 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IDIV;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1115 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTERSECT;
}
	YY_BREAK
/* Update rules */
case 186:
YY_RULE_SETUP
#line 1123 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTO;
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1127 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::WITH;
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1131 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DO_INSERT;
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1135 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DO_DELETE;
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1139 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DO_REPLACE;
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1143 "xquery_scanner.l"
{
	BEGIN INITIAL;
	driver.set_rename(true);
	return token::DO_RENAME;
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1148 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTO;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1152 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FIRST_INTO;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1156 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LAST_INTO;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1160 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AFTER;
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1164 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::BEFORE;
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1168 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VALUE_OF;
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1172 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MODIFY;
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1176 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::_IN_;
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1180 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IS;
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1184 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LBRACK;
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1188 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LE;
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1192 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRECEDES;
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1196 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LT;
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1200 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MINUS;
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1204 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MOD;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1208 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STAR;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1212 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::NE;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1216 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ORDER_BY;
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1220 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STABLE_ORDER_BY;
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1224 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::OR;
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1228 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PLUS;
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1232 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::RETURN;
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1236 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SATISFIES;
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1240 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SLASH;
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1244 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LEADING_LONE_SLASH;
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1248 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SLASH_SLASH;
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1252 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::TO;
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1256 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::UNION;
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1260 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VBAR;
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1264 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::WHERE;
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1268 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRESERVE;
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1272 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STRIP;
}
	YY_BREAK
/* transition to SINGLETYPE */
/* ------------------------ */
case 224:
YY_RULE_SETUP
#line 1282 "xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CASTABLE_AS;
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1286 "xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CAST_AS;
}
	YY_BREAK
/* transition to ITEMTYPE */
/* ---------------------- */
case 226:
YY_RULE_SETUP
#line 1294 "xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::INSTANCE_OF;
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 1298 "xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::TREAT_AS;
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1302 "xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::CASE;
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1306 "xquery_scanner.l"
{
	if (driver.rename()) {
		driver.set_rename(false);
		BEGIN INITIAL;
	}
	else if (driver.ftcontains()) {
		driver.set_ftcontains(false);
	}
	else {
		BEGIN MODE_ITEMTYPE;
	}
	return token::AS;
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 1319 "xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::RPAR_AS;
}
	YY_BREAK
/* transition to VARNAME */
/* --------------------- */
case 231:
YY_RULE_SETUP
#line 1327 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DOLLAR;
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 1331 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::FOR_DOLLAR;
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 1335 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::LET_DOLLAR;
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 1339 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::LET_SCORE_DOLLAR;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 235:
YY_RULE_SETUP
#line 1347 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* transition to URITOOPERATOR */
/* --------------------------- */
case 236:
YY_RULE_SETUP
#line 1354 "xquery_scanner.l"
{
	BEGIN MODE_URITOOPERATOR;
	return token::COLLATION;
}
	YY_BREAK
/* restore previous state on closing brace */
/* --------------------------------------- */
case 237:
YY_RULE_SETUP
#line 1362 "xquery_scanner.l"
{
	yy_pop_state();
	return token::RBRACE;
}
	YY_BREAK
/* maintain OPERATOR state */
/* ----------------------- */
case 238:
YY_RULE_SETUP
#line 1370 "xquery_scanner.l"
{
	return token::RPAR;
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 1373 "xquery_scanner.l"
{
	return token::HOOK;
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 1376 "xquery_scanner.l"
{
	return token::EMPTY_GREATEST;
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1379 "xquery_scanner.l"
{
	return token::EMPTY_LEAST;
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1382 "xquery_scanner.l"
{
	return token::ASCENDING;
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 1385 "xquery_scanner.l"
{
	return token::DESCENDING;
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 1388 "xquery_scanner.l"
{
	return token::DEFAULT;
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1391 "xquery_scanner.l"
{
	return token::RBRACK;
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1394 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	return token::STRING_LITERAL;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | FT rules <OPERATOR>
	 |______________________________________________________________________*/
/* transition to INITIAL state */
/* --------------------------- */
case 247:
YY_RULE_SETUP
#line 1408 "xquery_scanner.l"
{
	BEGIN INITIAL;
	driver.set_ftcontains(true);
	return token::FTCONTAINS;
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1413 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTAND;
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1417 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTNOT;
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 1421 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTOR;
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1425 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTNOT_IN;
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 1429 "xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::AT_LEAST;
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1433 "xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::AT_MOST;
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1437 "xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::DISTANCE;
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1441 "xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::EXACTLY;
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 1445 "xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::FROM;
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1449 "xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::OCCURS;
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1453 "xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::WINDOW;
}
	YY_BREAK
/* maintain OPERATOR state */
/* ----------------------- */
case 259:
YY_RULE_SETUP
#line 1461 "xquery_scanner.l"
{
	return token::ALL;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1464 "xquery_scanner.l"
{
	return token::ALL_WORDS;
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1467 "xquery_scanner.l"
{
	return token::ANY;
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1470 "xquery_scanner.l"
{
	return token::ANY_WORD;
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 1473 "xquery_scanner.l"
{
	return token::AT_END;
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 1476 "xquery_scanner.l"
{
	return token::AT_START;
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 1479 "xquery_scanner.l"
{
	return token::CASE_INSENSITIVE;
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 1482 "xquery_scanner.l"
{
	return token::CASE_SENSITIVE;
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1485 "xquery_scanner.l"
{
	return token::DECLARE_FTOPTION;
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 1488 "xquery_scanner.l"
{
	return token::DIACRITICS_INSENSITIVE;
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 1491 "xquery_scanner.l"
{
	return token::DIACRITICS_SENSITIVE;
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 1494 "xquery_scanner.l"
{
	return token::DIFFERENT;
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 1497 "xquery_scanner.l"
{
	return token::ENTIRE_CONTENT;
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 1500 "xquery_scanner.l"
{
	return token::LANGUAGE;
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1503 "xquery_scanner.l"
{
	return token::LEVELS;
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1506 "xquery_scanner.l"
{
	return token::LOWERCASE;
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1509 "xquery_scanner.l"
{
	return token::PARAGRAPH;
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1512 "xquery_scanner.l"
{
	return token::PHRASE;
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1515 "xquery_scanner.l"
{
	return token::RELATIONSHIP;
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1518 "xquery_scanner.l"
{
	return token::SAME;
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1521 "xquery_scanner.l"
{
	return token::SCORE;
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1524 "xquery_scanner.l"
{
	return token::SENTENCE;
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1527 "xquery_scanner.l"
{
	return token::SENTENCES;
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1530 "xquery_scanner.l"
{
	return token::TIMES;
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1533 "xquery_scanner.l"
{
	return token::UPPERCASE;
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1536 "xquery_scanner.l"
{
	return token::WEIGHT;
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1539 "xquery_scanner.l"
{
	return token::WITHOUT_CONTENT;
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1542 "xquery_scanner.l"
{
	return token::WITHOUT_DIACRITICS;
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1545 "xquery_scanner.l"
{
	return token::WITHOUT_STEMMING;
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1548 "xquery_scanner.l"
{
	return token::WITHOUT_STOP_WORDS;
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1551 "xquery_scanner.l"
{
	return token::WITHOUT_THESAURUS;
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1554 "xquery_scanner.l"
{
	return token::WITHOUT_WILDCARDS;
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1557 "xquery_scanner.l"
{
	return token::WITH_DEFAULT_STOP_WORDS;
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1560 "xquery_scanner.l"
{
	return token::WITH_DIACRITICS;
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1563 "xquery_scanner.l"
{
	return token::WITH_STEMMING;
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1566 "xquery_scanner.l"
{
	return token::WITH_STOP_WORDS;
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1569 "xquery_scanner.l"
{
	return token::WITH_THESAURUS;
}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1572 "xquery_scanner.l"
{
	return token::WITH_WILDCARDS;
}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1575 "xquery_scanner.l"
{
	return token::WORDS;
}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1581 "xquery_scanner.l"
{
  /*	maintain state */
}
	YY_BREAK
/* <MODE_OPERATOR> */
/*______________________________________________________________________  
	|
	| XQUERY_VERSION State
	|
	| This state is for recognition of XQuery version specific keywords. 
	|______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 299:
YY_RULE_SETUP
#line 1602 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
/* maintain XQUERYVERSION */
/* ---------------------- */
case 300:
YY_RULE_SETUP
#line 1609 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	return token::STRING_LITERAL;
}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1614 "xquery_scanner.l"
{
	return token::ENCODING;
}
	YY_BREAK
/* <MODE_XQUERY_VERSION> */
/*______________________________________________________________________  
	|
	| NAMESPACEDECL State
	|
	| This state occurs inside of a namespace declaration, and is needed
	| to recognize a NCName that is to be used as the prefix, as opposed
	| to allowing a QName to occur. (Otherwise, the difference between
	| NCName and QName becomes ambiguous.)
	|______________________________________________________________________*/

case 302:
YY_RULE_SETUP
#line 1635 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1639 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
/* maintain NAMESPACEDECL */
/* ---------------------- */
case 304:
YY_RULE_SETUP
#line 1646 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext, yyleng);
	return token::URI_LITERAL;
}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1651 "xquery_scanner.l"
{
	return token::COMMA;
}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1655 "xquery_scanner.l"
{
	return token::AT;
}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1659 "xquery_scanner.l"
{
	return token::EQUALS;
}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1663 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext, yyleng);
	return token::NCNAME;
}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1668 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_NAMESPACEDECL> */
/*______________________________________________________________________  
	 |
	 | URITOOPERATOR State
	 |
	 | This state is to recognize a URILiteral that transitions to the
	 | OPERATOR state.
	 |______________________________________________________________________*/
case 310:
YY_RULE_SETUP
#line 1685 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::URI_LITERAL;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | NAMESPACEKEYWORD State
	 |
	 | This state occurs at places where the keyword "namespace" is
	 | expected, which would otherwise be ambiguous compared to a QName.
	 | QNames can not occur in this state.
	 |______________________________________________________________________*/

/* transition to NAMESPACEDECL */
/* --------------------------- */
case 311:
YY_RULE_SETUP
#line 1707 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext, yyleng);
	BEGIN MODE_NAMESPACEDECL;
	return token::URI_LITERAL;
}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1713 "xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::NAMESPACE;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 313:
YY_RULE_SETUP
#line 1720 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INHERIT;
}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 1725 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::NO_INHERIT;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 315:
YY_RULE_SETUP
#line 1732 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* maintain NAMESPACEKEYWORD */
/* ------------------------- */
case 316:
YY_RULE_SETUP
#line 1739 "xquery_scanner.l"
{
	return token::DEFAULT_ELEMENT;
}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1743 "xquery_scanner.l"
{
	return token::PRESERVE;
}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 1747 "xquery_scanner.l"
{
	return token::NO_PRESERVE;
}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1751 "xquery_scanner.l"
{
	return token::COMMA;
}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 1755 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_NAMESPACEKEYWORD> */
/*______________________________________________________________________  
	 |
	 | XMLSPACE_DECL State
	 |
	 | This state occurs at places where the keywords "preserve" and
	 | "strip" is expected to support "declare xmlspace". QNames cannot
	 | occur in this state.
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 321:
YY_RULE_SETUP
#line 1777 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRESERVE;
}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 1782 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STRIP;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 323:
YY_RULE_SETUP
#line 1789 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 1793 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_XMLSPACE_DECL> */
/*______________________________________________________________________  
	 |
	 | SINGLETYPE State 
	 |
	 | This state distinguishes tokens that can occur only inside the
	 | SingleType production.
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 325:
YY_RULE_SETUP
#line 1814 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 326:
YY_RULE_SETUP
#line 1822 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 1826 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_SINGLETYPE> */
/*______________________________________________________________________  
	 |
	 | ITEMTYPE State
	 |
	 | This state distinguishes tokens that can occur only inside the
	 | ItemType production.
	 |______________________________________________________________________*/

/* transition to VARNAME */
/* --------------------- */
case 328:
YY_RULE_SETUP
#line 1847 "xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DOLLAR;
}
	YY_BREAK
/* transition to OPERATOR */
/* ---------------------- */
case 329:
YY_RULE_SETUP
#line 1854 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::VOID_TEST;
}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 1859 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	/* BEGIN MODE_OPERATOR; */
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 331:
YY_RULE_SETUP
#line 1868 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 332:
YY_RULE_SETUP
#line 1874 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::ELEMENT_LPAR;
}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 1880 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::ATTRIBUTE_LPAR;
}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 1886 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 1892 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::SCHEMA_ATTRIBUTE_LPAR;
}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 1898 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::COMMENT_LPAR;
}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 1904 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::TEXT_LPAR;
}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 1910 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::NODE_LPAR;
}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 1916 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::DOCUMENT_NODE_LPAR;
}
	YY_BREAK
/* transition to KINDTESTFORPI */
/* --------------------------- */
case 340:
YY_RULE_SETUP
#line 1924 "xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTESTFORPI);
	return token::PI_LPAR;
}
	YY_BREAK
/* transition to OCCURENCE_INDICATOR */
/* -------------------------------- */
case 341:
YY_RULE_SETUP
#line 1932 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	return token::QNAME;
}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 1937 "xquery_scanner.l"
{	
	BEGIN MODE_OCCURRENCE_INDICATOR;
	return token::ITEM_TEST;
}
	YY_BREAK
/* transition to PRAGMA */
/* -------------------- */
case 343:
YY_RULE_SETUP
#line 1944 "xquery_scanner.l"
{
	BEGIN MODE_PRAGMA;
	return token::PRAGMA_BEGIN;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 344:
YY_RULE_SETUP
#line 1951 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 1956 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::THEN;
}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 1961 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ELSE;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 347:
YY_RULE_SETUP
#line 1968 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext+3, yyleng-3);
	BEGIN MODE_NAMESPACEDECL;
	return token::AT_URI_LITERAL;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 348:
YY_RULE_SETUP
#line 1976 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXTERNAL;
}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 1981 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AND;
}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1986 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AT;
}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1991 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GETS;
}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 1996 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::COMMA;
}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 2001 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DIV;
}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 2006 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EQUALS;
}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 2011 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXCEPT;
}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 2016 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_EQ;
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 2021 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GE;
}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 2026 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GT;
}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 2031 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LE;
}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 2036 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LT;
}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 2041 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_NE;
}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 2046 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GE;
}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 2051 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FOLLOWS;
}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 2056 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GT;
}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 2061 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IDIV;
}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 2066 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTERSECT;
}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 2071 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::_IN_;
}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 2076 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IS;
}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 2081 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LBRACK;
}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 2086 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LPAR;
}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 2091 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LE;
}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 2096 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRECEDES;
}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 2101 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LT;
}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 2106 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MINUS;
}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 2111 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MOD;
}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 2116 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::NE;
}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 2121 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ORDER_BY;
}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 2126 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STABLE_ORDER_BY;
}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 2131 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::OR;
}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 2136 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::RETURN;
}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 2141 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SATISFIES;
}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 2146 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::TO;
}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 2151 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::UNION;
}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 2156 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VBAR;
}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 2161 "xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::WHERE;
}
	YY_BREAK
/* transition to SINGLETYPE */
/* ------------------------ */
case 386:
YY_RULE_SETUP
#line 2168 "xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CASTABLE_AS;
}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 2173 "xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CAST_AS;
}
	YY_BREAK
/* maintain ITEMTYPE */
/* ----------------- */
case 388:
YY_RULE_SETUP
#line 2180 "xquery_scanner.l"
{
	return token::INSTANCE_OF;
}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 2184 "xquery_scanner.l"
{
	return token::TREAT_AS;
}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 2188 "xquery_scanner.l"
{
	return token::CASE;
}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 2192 "xquery_scanner.l"
{
	return token::AS;
}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 2196 "xquery_scanner.l"
{
	return token::RPAR_AS;
}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 2200 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_ITEMTYPE> */
/*______________________________________________________________________  
	 |
	 | KINDTEST State
	 |
	 | This state is for the psuedo-parameters for the KindTest productions
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 394:
YY_RULE_SETUP
#line 2220 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::LBRACE;
}
	YY_BREAK
/* transition to CLOSE_KINDTEST */
/* --------------------------- */
case 395:
YY_RULE_SETUP
#line 2228 "xquery_scanner.l"
{
	BEGIN MODE_CLOSE_KINDTEST;
	return token::STAR;
}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 2233 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_CLOSE_KINDTEST;
	return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 397:
YY_RULE_SETUP
#line 2241 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* pop previous state on close paren */
/* --------------------------------- */
case 398:
YY_RULE_SETUP
#line 2247 "xquery_scanner.l"
{
	yy_pop_state();
	return token::RPAR;
}
	YY_BREAK
/* maintain KINDTEST */
/* ----------------- */
case 399:
YY_RULE_SETUP
#line 2254 "xquery_scanner.l"
{
	BEGIN MODE_KINDTEST;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::ELEMENT_LPAR;
}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 2260 "xquery_scanner.l"
{
	BEGIN MODE_KINDTEST;
	yy_push_state( /*and goto*/ MODE_KINDTEST);
	return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
/* catch-all */
/* --------- */
case 401:
YY_RULE_SETUP
#line 2268 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_KINDTEST> */
/*______________________________________________________________________  
	 |
	 | KINDTESTFORPI
	 |
	 | This state is similar to KINDTEST, but recognizes NCNames instead of
	 | QNames.
	 |______________________________________________________________________*/

/* pop previous state on close paren */
/* --------------------------------- */
case 402:
YY_RULE_SETUP
#line 2288 "xquery_scanner.l"
{
	yy_pop_state();
	return token::RPAR;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 403:
YY_RULE_SETUP
#line 2296 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* maintain KINDTESTFORPI */
/* ---------------------- */
case 404:
YY_RULE_SETUP
#line 2302 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext, yyleng);
	return token::NCNAME;
}
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 2307 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	return token::STRING_LITERAL;
}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 2312 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_KINDTESTFORPI> */
/*______________________________________________________________________  
	 |
	 | CLOSE_KINDTEST State
	 |
	 | This state is expecting to close a KINDTEST sequence.
	 |______________________________________________________________________*/ 

/* pop previous state */
/* ------------------ */
case 407:
YY_RULE_SETUP
#line 2332 "xquery_scanner.l"
{
	yy_pop_state();
	return token::RPAR;
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 408:
YY_RULE_SETUP
#line 2339 "xquery_scanner.l"
{
	BEGIN MODE_KINDTEST;
	return token::COMMA;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 409:
YY_RULE_SETUP
#line 2346 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL);
	return token::LBRACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 410:
YY_RULE_SETUP
#line 2354 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* maintain CLOSE_KINDTEST */
/* ---------------------- */
case 411:
YY_RULE_SETUP
#line 2360 "xquery_scanner.l"
{
	return token::HOOK;
}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 2364 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_CLOSE_KINDTEST> */
/*______________________________________________________________________  
	 |
	 | OCCURRENCE_INDICATOR State
	 |
	 | This special state is needed to distinguish occurrence indicators
	 | that appear in the SequenceType production. For instance, compare
	 | "foo instance of baz*" to "baz*foo". In the first case, the "*" is
	 | interpreted as an occurrence indicator, and in the second case, it
	 | must be interpreted as a multiplication operator. But, when in the
	 | OCCURRENCEINDICATOR state, if anything else other than "?", "*",
	 | "+", those symbols must be interpreted in the OPERATOR state. For
	 | instance, this would occur with the expression "foo instance of baz
	 | and $x", with the operator "and".
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 413:
YY_RULE_SETUP
#line 2392 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::OCCURS_HOOK;
}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 2397 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::OCCURS_STAR;
}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 2402 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::OCCURS_PLUS;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 416:
YY_RULE_SETUP
#line 2409 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
/* anything else: push back, goto OPERATOR */
/* --------------------------------------- */
case 417:
YY_RULE_SETUP
#line 2415 "xquery_scanner.l"
{
	yyless(1);
	BEGIN MODE_OPERATOR;
}
	YY_BREAK
/* MODE_OCCURRENCE_INDICATOR> */
/*______________________________________________________________________  
	 |
	 | OPTION State
	 |
	 | This state is entered in the prolog for an option declaration, and
	 | recognizes a QName that transits to a INITIAL state rather than a
	 | OPERATOR state.
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 418:
YY_RULE_SETUP
#line 2438 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN INITIAL;
	return token::QNAME;
}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 2444 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_OPTION> */
/*______________________________________________________________________  
	 |
	 | PRAGMA State
	 |
	 | This state is entered in a a pragma expression, and recognizes
	 | a QName that transits to a PRAGMACONTENTS state rather than an
	 | OPERATOR state.
	 |______________________________________________________________________*/

/* transition to PRAGMACONTENTS */
/* ---------------------------- */
case 420:
YY_RULE_SETUP
#line 2466 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_PRAGMACONTENTS;
	return token::QNAME;
}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 2472 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_PRAGMA> */
/*______________________________________________________________________  
	 |
	 | PRAGMACONTENTS State
	 |
	 | This state recognizes characters in pragma content and transitions
	 | out of this state when a '#)' pattern is recognized.
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 422:
YY_RULE_SETUP
#line 2493 "xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::PRAGMA_END;
}
	YY_BREAK
/* maintain PRAGMACONTENTS */
/* ----------------------- */
case 423:
YY_RULE_SETUP
#line 2500 "xquery_scanner.l"
{
	/* continue lexing */
}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 2504 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::PRAGMA_LITERAL;
}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 2509 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_PRAGMACONTENTS> */
/*______________________________________________________________________  
	 |
	 | VARNAME State
	 |
	 | This state differentiates variable names from qualified names. This
	 | allows only the pattern of a QName to be recognized when otherwise
	 | ambiguities could occur.
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 426:
YY_RULE_SETUP
#line 2531 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_varname(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::VARNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 427:
YY_RULE_SETUP
#line 2539 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 2543 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_VARNAME> */
/*______________________________________________________________________  
	 |
	 | START_TAG State
	 |
	 | This state allows attributes in the native XML syntax, and marks the
	 | beginning of an element construction. Element constructors also push
	 | the current state, popping it at the conclusion of an end tag. In
	 | the START_TAG state, the string ">" is recognized as a token which
	 | is associated with the transition to the original state.
	 |______________________________________________________________________*/

/* transition to ELEMENT_CONTENT */
/* ----------------------------- */
case 429:
YY_RULE_SETUP
#line 2567 "xquery_scanner.l"
{
	BEGIN MODE_ELEMENT_CONTENT;
	return token::TAG_END;
}
	YY_BREAK
/* transition to QUOT_ATTRIBUTE_CONTENT */
/* ------------------------------------ */
case 430:
YY_RULE_SETUP
#line 2574 "xquery_scanner.l"
{
	BEGIN MODE_QUOTE_ATTRIBUTE_CONTENT;
	return token::QUOTE;
}
	YY_BREAK
/* transition to APOS_ATTRIBUTE_CONTENT */
/* ------------------------------------ */
case 431:
YY_RULE_SETUP
#line 2581 "xquery_scanner.l"
{
	BEGIN MODE_APOS_ATTRIBUTE_CONTENT;
	return token::APOS;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 432:
YY_RULE_SETUP
#line 2588 "xquery_scanner.l"
{
	BEGIN MODE_START_TAG;
	return token::EQUALS;
}
	YY_BREAK
/* pop previous state on exit */
/* -------------------------- */
case 433:
YY_RULE_SETUP
#line 2595 "xquery_scanner.l"
{
	yy_pop_state();
	return token::EMPTY_TAG_END;
}
	YY_BREAK
/* maintain START_TAG */
/* ------------------ */
case 434:
YY_RULE_SETUP
#line 2602 "xquery_scanner.l"
{
	/* continue lexing */
}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 2606 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	return token::QNAME;
}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 2611 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_START_TAG> */
/*______________________________________________________________________  
	 |
	 | ELEMENT_CONTENT State
	 |
	 | This state allows XML-like content, without these characters being
	 | misinterpreted as expressions. The character "{" marks a transition
	 | to the INITIAL state, i.e. the start of an embedded expression, and
	 | the "}" character pops back to the ELEMENT_CONTENT state. To allow
	 | curly braces to be used as character content, a double left or right
	 | curly brace is interpreted as a single curly brace character. The
	 | string "</" is interpreted as the beginning of an end tag, which is
	 | associated with a transition to the END_TAG state.
	 |______________________________________________________________________*/

/* transition to END_TAG */
/* --------------------- */
case 437:
YY_RULE_SETUP
#line 2638 "xquery_scanner.l"
{
	BEGIN MODE_END_TAG;
	return token::START_TAG_END;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 438:
YY_RULE_SETUP
#line 2645 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ INITIAL);
	return token::LBRACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 439:
YY_RULE_SETUP
#line 2652 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_XML_COMMENT);
	return token::XML_COMMENT_BEGIN;
}
	YY_BREAK
/* transition to PROCESSING_INSTRUCTION */
/* ------------------------------------ */
case 440:
YY_RULE_SETUP
#line 2659 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_PROCESSING_INSTRUCTION);
	return token::PI_BEGIN;
}
	YY_BREAK
/* transition to CDATA_SECTION */
/* --------------------------- */
case 441:
YY_RULE_SETUP
#line 2666 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_CDATA_SECTION);
	return token::CDATA_BEGIN;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 442:
YY_RULE_SETUP
#line 2673 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_START_TAG);
	return token::START_TAG;
}
	YY_BREAK
/* maintain ELEMENT_CONTENT */
/* ------------------------ */
case 443:
YY_RULE_SETUP
#line 2680 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::ELEMENT_CONTENT;
}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 2685 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_entityref(yytext, yyleng);
	return token::ENTITY_REF;
}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 2690 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_charref(yytext, yyleng);
	return token::CHAR_REF_LITERAL;
}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 2695 "xquery_scanner.l"
{
	return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 2699 "xquery_scanner.l"
{
	return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* catch all else */
/* -------------- */
case 448:
YY_RULE_SETUP
#line 2705 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* MODE_ELEMENT_CONTENT> */
/*______________________________________________________________________  
	 |
	 | END_TAG State
	 |
	 | When the end tag is terminated, the state is popped to the state
	 | that was pushed at the start of the corresponding start tag.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 449:
YY_RULE_SETUP
#line 2726 "xquery_scanner.l"
{
	yy_pop_state();
	return token::TAG_END;
}
	YY_BREAK
/* maintain END_TAG */
/* ---------------- */
case 450:
YY_RULE_SETUP
#line 2733 "xquery_scanner.l"
{
	/* continue lexing */
}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 2737 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::QNAME;
}
	YY_BREAK
/* catch all else */
/* -------------- */
case 452:
YY_RULE_SETUP
#line 2744 "xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_END_TAG> */
/*______________________________________________________________________  
	 |
	 | XML_COMMENT State
	 | The "<--" token marks the beginning of an XML Comment, and the "-->"
	 | token marks the end. This allows no special interpretation of other
	 | characters in this state.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 453:
YY_RULE_SETUP
#line 2765 "xquery_scanner.l"
{
	yy_pop_state();
	return token::XML_COMMENT_END;
}
	YY_BREAK
/* maintain XML_COMMENT */
/* -------------------- */
case 454:
YY_RULE_SETUP
#line 2772 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::XML_COMMENT_LITERAL;
}
	YY_BREAK
/* <MODE_XML_COMMENT> */
/*______________________________________________________________________  
	 |
	 | EXPR_COMMENT State
	 |
	 | The "(:" token marks the beginning of an expression Comment, and
	 | the ":)" token marks the end. This allows no special interpretation
	 | of other characters in this state.
	 |______________________________________________________________________*/

/* pop previous state */
/* ------------------ */
case 455:
YY_RULE_SETUP
#line 2795 "xquery_scanner.l"
{
	yy_pop_state();
}
	YY_BREAK
/* maintain EXPR_COMMENT */
/* --------------------- */
case 456:
YY_RULE_SETUP
#line 2801 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT);
}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 2805 "xquery_scanner.l"
{
	/* do nothing */
}
	YY_BREAK
/* <MODE_EXPR_COMMENT> */
/*______________________________________________________________________  
	 |
	 | PROCESSING_INSTRUCTION State
	 |
	 | In this state, only patterns that are legal in a processing
	 | instruction name are recognized.
	 |______________________________________________________________________*/

/* transition to PROCESSING_INSTRUCTION_CONTENT */
/* -------------------------------------------- */
case 458:
YY_RULE_SETUP
#line 2826 "xquery_scanner.l"
{
	BEGIN MODE_PROCESSING_INSTRUCTION_CONTENT; 
	/* continue lexing */
}
	YY_BREAK
/* pop previous state on exit */
/* -------------------------- */
case 459:
YY_RULE_SETUP
#line 2833 "xquery_scanner.l"
{
	yy_pop_state();
	return token::PI_END;
}
	YY_BREAK
/* maintain PROCESSING_INSTRUCTION */
/* ------------------------------- */
case 460:
YY_RULE_SETUP
#line 2840 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	BEGIN MODE_PROCESSING_INSTRUCTION;
	return token::PI_TARGET;
}
	YY_BREAK
/* <MODE_PROCESSING_INSTRUCTION> */
/*______________________________________________________________________  
	 |
	 | PROCESSING_INSTRUCTION_CONTENT State
	 |
	 | In this state, only characters are that are legal in processing
	 | instruction content are recognized.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 461:
YY_RULE_SETUP
#line 2863 "xquery_scanner.l"
{
	yy_pop_state();
	return token::PI_BEGIN;
}
	YY_BREAK
/* maintain PROCESSING_INSTRUCTION_CONTENT */
/* --------------------------------------- */
case 462:
YY_RULE_SETUP
#line 2870 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::CHAR_LITERAL;
}
	YY_BREAK
/* <MODE_PROCESSING_INSTRUCTION_CONTENT> */
/*______________________________________________________________________  
	 |
	 | CDATA_SECTION State
	 |
	 | In this state, only lexemes that are legal in a CDATA section are
	 | recognized.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 463:
YY_RULE_SETUP
#line 2892 "xquery_scanner.l"
{
	yy_pop_state();
	return token::CDATA_END;
}
	YY_BREAK
/* maintain CDATA_SECTION */
/* ---------------------- */
case 464:
YY_RULE_SETUP
#line 2899 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::CHAR_LITERAL;
}
	YY_BREAK
/* <MODE_CDATA_SECTION> */
/*______________________________________________________________________  
	 |
	 | QUOTE_ATTRIBUTE_CONTENT State
	 |
	 | This state allows content legal for attributes. The character "{"
	 | marks a transition to the INITIAL state, i.e. the start of an
	 | embedded expression, and the "}" character pops back to the original
	 | state.  To allow curly braces to be used as character content, a
	 | double left or right curly brace is interpreted as a single curly
	 | brace character. This state is the same as APOS_ATTRIBUTE_CONTENT,
	 | except that apostrophes are allowed without escaping, and an
	 | unescaped quote marks the end of the state.
	 |______________________________________________________________________*/

/* transition to START_TAG */
/* ----------------------- */
case 465:
YY_RULE_SETUP
#line 2927 "xquery_scanner.l"
{
	BEGIN MODE_START_TAG;
	return token::QUOTE;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 466:
YY_RULE_SETUP
#line 2934 "xquery_scanner.l"
{
	yy_push_state( /*and goto*/ INITIAL);
	return token::LBRACE;
}
	YY_BREAK
/* maintain QUOTE_ATTRIBUTE_CONTENT */
/* -------------------------------- */
case 467:
YY_RULE_SETUP
#line 2941 "xquery_scanner.l"
{
	return token::ESCAPE_QUOTE;
}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 2945 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::QUOTE_ATTR_CONTENT;
}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 2950 "xquery_scanner.l"
{
	return token::ENTITY_REF;
}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 2954 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_charref(yytext, yyleng);
	return token::CHAR_REF_LITERAL;
}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 2959 "xquery_scanner.l"
{
	return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 2963 "xquery_scanner.l"
{
	return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* <MODE_QUOTE_ATTRIBUTE_CONTENT> */
/*______________________________________________________________________  
	 |
	 | APOS_ATTRIBUTE_CONTENT State
	 |
	 | This state is the same as QUOT_ATTRIBUTE_CONTENT, except that
	 | quotes are allowed, and an unescaped apostrophe marks the end of
	 | the state.
	 |______________________________________________________________________*/

/* transition to START_TAG */
/* ----------------------- */
case 473:
YY_RULE_SETUP
#line 2985 "xquery_scanner.l"
{
	BEGIN MODE_START_TAG;
	return token::APOS;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 474:
YY_RULE_SETUP
#line 2992 "xquery_scanner.l"
{
	BEGIN MODE_APOS_ATTRIBUTE_CONTENT;
	yy_push_state( /*and goto*/ INITIAL);
	return token::LBRACE;
}
	YY_BREAK
/* maintain APOS_ATTRIBUTE_CONTENT */
/* ------------------------------- */
case 475:
YY_RULE_SETUP
#line 3000 "xquery_scanner.l"
{
	return token::ESCAPE_APOS;
}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 3004 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::APOS_ATTR_CONTENT;
}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 3009 "xquery_scanner.l"
{
	return token::ENTITY_REF;
}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 3013 "xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_charref(yytext, yyleng);
	return token::CHAR_REF_LITERAL;
}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 3018 "xquery_scanner.l"
{
	return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 3022 "xquery_scanner.l"
{
	return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* <MODE_APOS_ATTRIBUTE_CONTENT> */
case 481:
YY_RULE_SETUP
#line 3028 "xquery_scanner.l"
ECHO;
	YY_BREAK
#line 7547 "xquery_scanner.yy.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MODE_APOS_ATTRIBUTE_CONTENT):
			case YY_STATE_EOF(MODE_CDATA_SECTION):
			case YY_STATE_EOF(MODE_CLOSE_KINDTEST):
			case YY_STATE_EOF(MODE_DECLAREORDERING):
			case YY_STATE_EOF(MODE_ELEMENT_CONTENT):
			case YY_STATE_EOF(MODE_END_TAG):
			case YY_STATE_EOF(MODE_EXPR_COMMENT):
			case YY_STATE_EOF(MODE_ITEMTYPE):
			case YY_STATE_EOF(MODE_KINDTEST):
			case YY_STATE_EOF(MODE_KINDTESTFORPI):
			case YY_STATE_EOF(MODE_NAMESPACEDECL):
			case YY_STATE_EOF(MODE_NAMESPACEKEYWORD):
			case YY_STATE_EOF(MODE_OCCURRENCE_INDICATOR):
			case YY_STATE_EOF(MODE_OPERATOR):
			case YY_STATE_EOF(MODE_OPTION):
			case YY_STATE_EOF(MODE_PRAGMA):
			case YY_STATE_EOF(MODE_PRAGMACONTENTS):
			case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION):
			case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION_CONTENT):
			case YY_STATE_EOF(MODE_QUOTE_ATTRIBUTE_CONTENT):
			case YY_STATE_EOF(MODE_SINGLETYPE):
			case YY_STATE_EOF(MODE_START_TAG):
			case YY_STATE_EOF(MODE_URITOOPERATOR):
			case YY_STATE_EOF(MODE_VARNAME):
			case YY_STATE_EOF(MODE_XMLSPACE_DECL):
			case YY_STATE_EOF(MODE_XML_COMMENT):
			case YY_STATE_EOF(MODE_XQUERY_VERSION):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2459 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2459 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2458);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 3028 "xquery_scanner.l"



/*
	Finally, because the scanner related driver's member function depend 
	on the scanner's data, it is simpler to implement them in this file. 
*/
namespace xqp {

void xquery_driver::scan_begin()
{
  yy_flex_debug = trace_scanning;
  if (!(yyin = fopen(file.c_str (), "r"))) {
    error (std::string("cannot open ") + file);
  }
}

void xquery_driver::scan_end()
{
  fclose(yyin);
}

}


std::string start_state()
{
	switch (YY_START) {
	case INITIAL: return "INITIAL";
	case MODE_APOS_ATTRIBUTE_CONTENT: return "MODE_APOS_ATTRIBUTE_CONTENT";
	case MODE_CDATA_SECTION: return "MODE_CDATA_SECTION";
	case MODE_CLOSE_KINDTEST: return "MODE_CLOSE_KINDTEST";
	case MODE_DECLAREORDERING: return "MODE_DECLAREORDERING";
	case MODE_ELEMENT_CONTENT: return "MODE_ELEMENT_CONTENT";
	case MODE_END_TAG: return "MODE_END_TAG";
	case MODE_EXPR_COMMENT: return "MODE_EXPR_COMMENT";
	case MODE_ITEMTYPE: return "MODE_ITEMTYPE";
	case MODE_KINDTEST: return "MODE_KINDTEST";
	case MODE_KINDTESTFORPI: return "MODE_KINDTESTFORPI";
	case MODE_NAMESPACEDECL: return "MODE_NAMESPACEDECL";
	case MODE_NAMESPACEKEYWORD: return "MODE_NAMESPACEKEYWORD";
	case MODE_OCCURRENCE_INDICATOR: return "MODE_OCCURRENCE_INDICATOR";
	case MODE_OPERATOR: return "MODE_OPERATOR";
	case MODE_OPTION: return "MODE_OPTION";
	case MODE_PRAGMA: return "MODE_PRAGMA";
	case MODE_PRAGMACONTENTS: return "MODE_PRAGMACONTENTS";
	case MODE_PROCESSING_INSTRUCTION: return "MODE_PROCESSING_INSTRUCTION";
	case MODE_PROCESSING_INSTRUCTION_CONTENT: return "MODE_PROCESSING_INSTRUCTION_CONTENT";
	case MODE_QUOTE_ATTRIBUTE_CONTENT: return "MODE_QUOTE_ATTRIBUTE_CONTENT";
	case MODE_SINGLETYPE: return "MODE_SINGLETYPE";
	case MODE_START_TAG: return "MODE_START_TAG";
	case MODE_URITOOPERATOR: return "MODE_URITOOPERATOR";
	case MODE_VARNAME: return "MODE_VARNAME";
	case MODE_XMLSPACE_DECL: return "MODE_XMLSPACE_DECL";
	case MODE_XML_COMMENT: return "MODE_XML_COMMENT";
	case MODE_XQUERY_VERSION: return "MODE_XQUERY_VERSION";
	default: return "Something's drastically wrong here, unrecognized start state!\n";
	}
}

/*
#define YY_USER_ACTION \
	{ \
		std::cout<<'<'<<start_state()<<"> [["<<yytext<<"]]"<<std::endl; \
		yylloc->columns(yyleng); \
	}
*/





