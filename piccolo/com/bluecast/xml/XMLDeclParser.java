/* The following code was generated by JFlex 1.3.5 on 7/11/04 2:35 PM */

package com.bluecast.xml;

import java.io.*;
import com.bluecast.io.*;

/*
 * $Id: XMLDeclParser.flex,v 1.3 2004/07/08 08:03:04 yuvalo Exp $
 *
 * (C) Copyright 2002-2004 by Yuval Oren. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * Parses an XML declaration (<?xml...?>). The parse() method returns
 * SUCCESS if a declaration was parsed, or NO_DECLARATION if none was found.
 */

/* This JFlex source file should be compiled with Yuval's "skeleton2" skeleton. */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 7/11/04 2:35 PM from the specification file
 * <tt>file:/C:/Library/Projects/piccolo/src/com/bluecast/xml/XMLDeclParser.flex</tt>
 */
final class XMLDeclParser {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 0;

  /** lexical states */
  final public static int GOT_ENCODING = 5;
  final public static int ENCODING = 4;
  final public static int XML_DECL = 1;
  final public static int YYINITIAL = 0;
  final public static int STANDALONE = 6;
  final public static int GOT_VERSION = 3;
  final public static int VERSION = 2;
  final public static int GOT_STANDALONE = 7;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\0\1\22\4\0"+
    "\1\26\5\0\1\40\1\24\1\0\1\25\1\23\3\5\1\50\1\46"+
    "\1\5\1\41\1\51\1\3\1\0\1\6\1\2\1\34\1\7\1\0"+
    "\1\43\1\4\1\44\2\4\1\37\2\4\1\45\5\4\1\47\3\4"+
    "\1\42\1\36\1\35\5\4\4\0\1\5\1\0\1\33\1\4\1\27"+
    "\1\30\1\14\1\4\1\31\1\4\1\17\2\4\1\12\1\11\1\21"+
    "\1\20\2\4\1\15\1\16\1\32\1\4\1\13\1\4\1\10\1\52"+
    "\1\4\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    43,    86,   129,   172,   215,   258,   301,   344,   387, 
      344,   430,   473,   516,   559,   602,   645,   688,   731,   774, 
      817,   860,   903,   430,   473,   946,   989,  1032,   344,  1075, 
     1118,  1161,  1204,   602,  1247,  1290,  1333,  1376,  1419,  1462, 
     1505,  1548,   731,  1591,  1634,  1677,  1720,   860,  1763,  1806, 
     1849,  1892,   344,  1935,  1978,   344,  2021,  2064,  2107,  2150, 
     2193,  2236,  2279,  2322,  2365,  2408,  2451,  2494,  2537,  2580, 
     2623,  2666,  2709,  2752,  2795,  2838,  2881,  2924,  2967,  3010, 
     3053,  3096,   344,  3139,  3182,  3225,  3268,  3311,  3354,   344, 
     3397,  3440,  3483,  3526,  3569,  3612,  3655,  3698,  3741,  3784, 
      344,  3225,  3827,  3870,  3913,  3956,   344,  3999,  4042,  4085, 
     4128,  4171,  4214,  4257,  4300,   344,   344,  4343,  4386,  4429, 
     4472,  4515,  4558,  4601,  4644,  4687,  4730,  4773,  4816,  4859, 
     4902,  4945,  4988,  5031,  5074,  5117,  5160,   344
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\6\11\1\12\44\11\1\13\1\14\5\13\1\15\65\13"+
    "\1\16\3\13\1\17\25\13\1\20\5\13\1\15\65\13"+
    "\1\21\3\13\1\22\25\13\1\23\5\13\1\15\65\13"+
    "\1\24\3\13\1\25\25\13\1\26\5\13\1\15\43\13"+
    "\62\0\1\27\44\0\1\30\5\0\1\31\3\0\1\32"+
    "\1\33\1\0\1\34\70\0\1\35\21\0\3\36\2\0"+
    "\12\36\1\0\1\37\2\36\1\0\5\36\1\0\16\36"+
    "\3\0\3\40\2\0\12\40\1\0\1\41\2\40\1\0"+
    "\5\40\1\0\16\40\1\0\1\42\5\0\1\31\4\0"+
    "\1\33\1\0\1\34\40\0\1\43\3\0\12\43\5\0"+
    "\5\43\1\0\1\44\2\43\2\0\1\43\1\45\1\43"+
    "\1\46\1\0\1\43\2\0\1\43\4\0\1\47\3\0"+
    "\12\47\5\0\5\47\1\0\1\50\2\47\2\0\1\47"+
    "\1\51\1\47\1\52\1\0\1\47\2\0\1\47\1\0"+
    "\1\53\5\0\1\31\6\0\1\34\55\0\1\54\30\0"+
    "\1\55\21\0\1\56\30\0\1\57\1\0\1\60\5\0"+
    "\1\31\53\0\1\61\56\0\1\62\57\0\1\63\63\0"+
    "\1\64\23\0\3\36\2\0\12\36\1\65\3\36\1\0"+
    "\5\36\1\0\16\36\3\0\3\36\2\0\12\36\1\65"+
    "\1\36\1\66\1\36\1\0\5\36\1\0\16\36\3\0"+
    "\3\40\2\0\12\40\1\0\3\40\1\65\5\40\1\0"+
    "\16\40\3\0\3\40\2\0\12\40\1\0\1\40\1\67"+
    "\1\40\1\65\5\40\1\0\16\40\4\0\2\43\2\0"+
    "\12\43\1\70\3\43\1\0\5\43\1\0\16\43\4\0"+
    "\2\43\2\0\12\43\1\70\3\43\1\0\5\43\1\0"+
    "\1\43\1\71\3\43\1\72\10\43\4\0\2\43\2\0"+
    "\12\43\1\70\3\43\1\0\5\43\1\0\5\43\1\73"+
    "\10\43\4\0\2\43\2\0\12\43\1\70\3\43\1\0"+
    "\5\43\1\0\5\43\1\74\10\43\4\0\2\47\2\0"+
    "\12\47\1\0\3\47\1\70\5\47\1\0\16\47\4\0"+
    "\2\47\2\0\12\47\1\0\3\47\1\70\5\47\1\0"+
    "\1\47\1\75\3\47\1\76\10\47\4\0\2\47\2\0"+
    "\12\47\1\0\3\47\1\70\5\47\1\0\5\47\1\77"+
    "\10\47\4\0\2\47\2\0\12\47\1\0\3\47\1\70"+
    "\5\47\1\0\5\47\1\100\10\47\20\0\1\101\46\0"+
    "\1\102\56\0\1\103\46\0\1\104\47\0\1\105\56\0"+
    "\1\106\64\0\1\107\56\0\1\110\22\0\3\36\2\0"+
    "\12\36\1\65\2\36\1\111\1\0\5\36\1\0\16\36"+
    "\3\0\3\40\2\0\12\40\1\0\2\40\1\112\1\65"+
    "\5\40\1\0\16\40\4\0\2\43\2\0\12\43\1\70"+
    "\3\43\1\0\5\43\1\0\2\43\1\113\13\43\4\0"+
    "\2\43\2\0\12\43\1\70\3\43\1\0\5\43\1\0"+
    "\3\43\1\114\12\43\4\0\2\43\2\0\12\43\1\70"+
    "\3\43\1\0\5\43\1\0\7\43\1\115\6\43\4\0"+
    "\2\43\2\0\12\43\1\70\3\43\1\0\5\43\1\0"+
    "\12\43\1\116\3\43\4\0\2\47\2\0\12\47\1\0"+
    "\3\47\1\70\5\47\1\0\2\47\1\117\13\47\4\0"+
    "\2\47\2\0\12\47\1\0\3\47\1\70\5\47\1\0"+
    "\3\47\1\120\12\47\4\0\2\47\2\0\12\47\1\0"+
    "\3\47\1\70\5\47\1\0\7\47\1\121\6\47\4\0"+
    "\2\47\2\0\12\47\1\0\3\47\1\70\5\47\1\0"+
    "\12\47\1\122\3\47\22\0\1\123\46\0\1\124\62\0"+
    "\1\123\42\0\1\125\46\0\1\126\56\0\1\127\54\0"+
    "\1\130\53\0\1\131\34\0\3\36\2\0\12\36\1\132"+
    "\3\36\1\0\5\36\1\0\16\36\3\0\3\40\2\0"+
    "\12\40\1\0\3\40\1\132\5\40\1\0\16\40\4\0"+
    "\2\43\2\0\12\43\1\70\1\133\2\43\1\0\5\43"+
    "\1\0\3\43\1\134\1\135\11\43\4\0\2\43\2\0"+
    "\12\43\1\70\3\43\1\0\5\43\1\0\6\43\1\45"+
    "\7\43\4\0\2\43\2\0\12\43\1\70\3\43\1\0"+
    "\5\43\1\0\10\43\1\136\5\43\4\0\2\43\2\0"+
    "\12\43\1\70\3\43\1\0\5\43\1\0\3\43\1\137"+
    "\12\43\4\0\2\47\2\0\12\47\1\0\1\140\2\47"+
    "\1\70\5\47\1\0\3\47\1\141\1\142\11\47\4\0"+
    "\2\47\2\0\12\47\1\0\3\47\1\70\5\47\1\0"+
    "\6\47\1\51\7\47\4\0\2\47\2\0\12\47\1\0"+
    "\3\47\1\70\5\47\1\0\10\47\1\143\5\47\4\0"+
    "\2\47\2\0\12\47\1\0\3\47\1\70\5\47\1\0"+
    "\3\47\1\144\12\47\22\0\1\145\56\0\1\145\25\0"+
    "\1\146\70\0\1\147\63\0\1\150\52\0\1\151\26\0"+
    "\2\43\2\0\12\43\1\70\3\43\1\0\5\43\1\0"+
    "\11\43\1\152\4\43\4\0\2\43\2\0\12\43\1\70"+
    "\1\133\2\43\1\0\5\43\1\0\4\43\1\135\11\43"+
    "\4\0\2\43\2\0\12\43\1\153\3\43\1\0\5\43"+
    "\1\0\16\43\4\0\2\43\2\0\12\43\1\70\3\43"+
    "\1\0\5\43\1\0\10\43\1\154\5\43\4\0\2\43"+
    "\2\0\12\43\1\70\3\43\1\0\5\43\1\0\4\43"+
    "\1\155\11\43\4\0\2\47\2\0\12\47\1\0\3\47"+
    "\1\70\5\47\1\0\11\47\1\156\4\47\4\0\2\47"+
    "\2\0\12\47\1\0\1\140\2\47\1\70\5\47\1\0"+
    "\4\47\1\142\11\47\4\0\2\47\2\0\12\47\1\0"+
    "\3\47\1\153\5\47\1\0\16\47\4\0\2\47\2\0"+
    "\12\47\1\0\3\47\1\70\5\47\1\0\10\47\1\157"+
    "\5\47\4\0\2\47\2\0\12\47\1\0\3\47\1\70"+
    "\5\47\1\0\4\47\1\160\11\47\20\0\1\161\51\0"+
    "\1\162\66\0\1\163\23\0\2\43\2\0\12\43\1\164"+
    "\3\43\1\0\5\43\1\0\16\43\4\0\2\43\2\0"+
    "\12\43\1\165\3\43\1\0\5\43\1\0\16\43\4\0"+
    "\2\43\2\0\12\43\1\70\3\43\1\0\5\43\1\0"+
    "\4\43\1\166\11\43\4\0\2\47\2\0\12\47\1\0"+
    "\3\47\1\164\5\47\1\0\16\47\4\0\2\47\2\0"+
    "\12\47\1\0\3\47\1\165\5\47\1\0\16\47\4\0"+
    "\2\47\2\0\12\47\1\0\3\47\1\70\5\47\1\0"+
    "\4\47\1\167\11\47\21\0\1\170\52\0\1\171\43\0"+
    "\1\172\44\0\2\43\2\0\12\43\1\70\3\43\1\0"+
    "\5\43\1\0\13\43\1\173\2\43\4\0\2\47\2\0"+
    "\12\47\1\0\3\47\1\70\5\47\1\0\13\47\1\174"+
    "\2\47\1\0\1\170\1\175\101\0\1\176\41\0\1\177"+
    "\36\0\2\43\2\0\12\43\1\70\3\43\1\0\5\43"+
    "\1\0\14\43\1\200\1\43\4\0\2\47\2\0\12\47"+
    "\1\0\3\47\1\70\5\47\1\0\14\47\1\201\1\47"+
    "\1\0\1\175\52\0\1\176\1\202\71\0\1\203\35\0"+
    "\2\43\2\0\12\43\1\70\3\43\1\0\5\43\1\0"+
    "\3\43\1\204\12\43\4\0\2\47\2\0\12\47\1\0"+
    "\3\47\1\70\5\47\1\0\3\47\1\205\12\47\1\0"+
    "\1\202\65\0\1\206\42\0\2\43\2\0\12\43\1\70"+
    "\1\207\2\43\1\0\5\43\1\0\16\43\4\0\2\47"+
    "\2\0\12\47\1\0\1\210\2\47\1\70\5\47\1\0"+
    "\16\47\1\0\1\206\1\211\54\0\2\43\2\0\12\43"+
    "\1\212\3\43\1\0\5\43\1\0\16\43\4\0\2\47"+
    "\2\0\12\47\1\0\3\47\1\212\5\47\1\0\16\47"+
    "\1\0\1\211\51\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;
  final private static int YY_SKIP_2BIG = 4;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large",
    "Error: skip value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  2,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  5,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  0,  0,  1,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** a pointer to the internal buffer, used to restore it when yyreset() changes
      the buffer to an externally created one. */
  private char yy_saved_buffer[] = null;

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;



  /* user code: */
    static public final int SUCCESS = 1;
    static public final int NO_DECLARATION = YYEOF;

    private String xmlVersion=null;
    private String xmlEncoding=null;
    private boolean xmlStandalone=false;
    private boolean xmlStandaloneDeclared=false;

    public XMLDeclParser(char[] buf,int off,int len) throws IOException {
        yyreset(buf,off,len);
    }

    public XMLDeclParser() { }

    public void reset(char[] buf, int off, int len) throws IOException {
        xmlVersion = xmlEncoding = null;
        xmlStandaloneDeclared = xmlStandalone = false;
        yyreset(buf,off,len);
    }

    public String getXMLVersion() { return xmlVersion; }
    public String getXMLEncoding() { return xmlEncoding; }
    public boolean isXMLStandaloneDeclared() { return xmlStandaloneDeclared; }
    public boolean isXMLStandalone() { return xmlStandalone; }
    public int getCharsRead() { return yychar+yylength(); }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  XMLDeclParser(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  XMLDeclParser(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[5203];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_markedPos >= yy_buffer.length || yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_buffer.length*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead,
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;
      return false;
    }
  }

  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }

  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();

    if (yy_saved_buffer != null) {
      yy_buffer = yy_saved_buffer;
      yy_saved_buffer = null;
    }

    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;

    yyline = yychar = yycolumn = 0;
    yy_state = yy_lexical_state = YYINITIAL;
    yy_sawCR = false;
    yyline_next = yycolumn_next = 0;
  }


  final public void yyreset(char[] buffer, int off, int len) throws java.io.IOException {
    yyclose();
    if (yy_saved_buffer == null)
      yy_saved_buffer = yy_buffer;
    yy_buffer = buffer;
    yy_reader = null;
    yy_atBOL  = true;
    yy_atEOF  = true;
    yy_currentPos = yy_markedPos = yy_pushbackPos = yy_startRead = off;

    yy_endRead = off + len;
    yyline = yychar = yycolumn = 0;
    yy_state = yy_lexical_state = YYINITIAL;
    yy_sawCR = false;
    yyline_next = yycolumn_next = 0;

    yy_endRead_l = yy_endRead;
    yy_buffer_l = yy_buffer;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the text matched by the current regular expression.
   *
   * @param start starting offset from the beginning of the current expression.
   * @param length number of characters to include in the string.
   */
  final public String yytext(int offset, int length) {
    return new String(yy_buffer,yy_startRead+offset,length);
  }


  /**
   * Accept the current action as completed and update line, column and
   * character counters accordingly. Used in conjunction with
   * yynextChar().
   *
   * @see #yynextChar()
   */
  final public void yynextAction() {
    yyline = yyline_next;
    yycolumn = yycolumn_next;
    // Uncomment for %char directive: yychar += (yy_markedPos - yy_startRead);
    yy_currentPos = yy_startRead = yy_markedPos;
  }


  /**
   * Extends the matched text by one character and returns it.
   *
   * @returns the next character, or YYEOF
   */
  final public int yynextChar() throws IOException {
    int yy_input;
    if (yy_markedPos < yy_endRead)
        yy_input = yy_buffer[yy_markedPos++];
    else if (yy_atEOF) {
        return YYEOF;
    }
    else {
        boolean eof  = yy_refill();
        yy_buffer_l  = yy_buffer;
        yy_endRead_l = yy_endRead;
        if (eof)
            return YYEOF;
        else
            yy_input = yy_buffer[yy_markedPos++];
    }

    yy_doCount(yy_input);
    return yy_input;
  }


  /**
   * Extends the matched text by one character and returns it.
   * Similar to yynextChar(), but the caller guarantees [by using
   * yybufferLeft()] that there is at least one more character in the
   * buffer.
   *
   *
   * @returns the next character, or YYEOF
   */
  final public int yynextBufferChar() throws IOException {
    int yy_input = yy_buffer[yy_markedPos++];
    yy_doCount(yy_input);
    return yy_input;
  }

  final private int yy_doCount(int yy_input) {
        switch (yy_input) {

            case '\r':
                yyline_next++;
                yycolumn_next = 0;
                yy_sawCR = true;
                break;

            case '\n':
                if (yy_sawCR)
                    yy_sawCR = false;
                else {
                    yyline_next++;
                    yycolumn_next = 0;
                }
                break;

            default:
                yy_sawCR = false;
                yycolumn_next++;
                break;
        }
    return yy_input;
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }

  /**
   * Returns the number of characters remaining in the buffer,
   * not including the matched text, before more
   * characters must be read from the input Reader.
   *
   */
  final public int yybufferLeft() {
    return yy_endRead - yy_markedPos;
  }

  /**
   * Skips past the specified number of characters.
   * These characters will be included in line, column, and character
   * counting, but they will not be used for matching.
   *
   * @param n the number of characters to skip
   */
   final public void yyskip(int n) {
     yy_markedPos += n;
     yy_markedPos_l = yy_markedPos;
     if (yy_markedPos > yy_endRead)
       yy_ScanError(YY_SKIP_2BIG);
   }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;

    // Recount the lines and columns
    yyline_next = yyline;
    yycolumn_next = yycolumn;
    yy_sawCR = yy_prev_sawCR;
    for (int pos=yy_startRead; pos < yy_markedPos; pos++)
        yy_doCount(yy_buffer[pos]);
  }



    // Yuval moved cached fields to class level so yypushStream() can set them.
    private int yy_currentPos_l;
    private int yy_startRead_l;
    private int yy_markedPos_l;
    private int yy_endRead_l;
    private char [] yy_buffer_l;
    private char [] yycmap_l;

    // Line and column counting variables.
    private boolean yy_sawCR = false; // Was the last character a CR?
    private boolean yy_prev_sawCR = false; // value of yy_sawCR before this action was parsed
    private int yyline_next = 0; // What yyline should be after matched text
    private int yycolumn_next = 0; // What yycolumn should be after matched text

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */

  public int parse() throws java.io.IOException, FileFormatException {
    int yy_input;
    int yy_action;

    // Set cached fields:
    yy_endRead_l = yy_endRead;
    yy_buffer_l = yy_buffer;
    yycmap_l = yycmap;


    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;
    int yyline_next_l,yycolumn_next_l;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      // Add the lines and columns found in the last matching text
//      yyline = yyline_next_l = yyline_next;
//      yycolumn = yycolumn_next_l = yycolumn_next;
//      yy_prev_sawCR = yy_sawCR;


      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos =
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
/*
            switch (yy_input) {
                case '\r':
                    yyline_next_l++;
                    yycolumn_next_l = 0;
                    yy_sawCR = true;
                    break;
                case '\n':
                    if (yy_sawCR)
                          yy_sawCR = false;
                    else {
                        yyline_next_l++;
                        yycolumn_next_l = 0;
                    }
                    break;

                default:
                    yy_sawCR = false;
                    yycolumn_next_l++;
                    break;
            }
*/
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state;
            yy_markedPos_l = yy_currentPos_l;
 //           yyline_next = yyline_next_l;
//            yycolumn_next = yycolumn_next_l;


            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 115: 
          { 
        xmlEncoding = "UTF-16";
        yybegin(GOT_ENCODING);
     }
        case 139: break;
        case 106: 
          { 
        xmlEncoding = "UTF-8";
        yybegin(GOT_ENCODING);
     }
        case 140: break;
        case 89: 
          { 
        xmlVersion = "1.0";
        yybegin(GOT_VERSION);
     }
        case 141: break;
        case 101: 
          {  yybegin(XML_DECL);  }
        case 142: break;
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
          { 
    throw new FileFormatException("XML Declaration not well-formed",
                                  -1,-1);
 }
        case 143: break;
        case 82: 
          {  xmlStandalone = false; yybegin(GOT_STANDALONE);  }
        case 144: break;
        case 100: 
          {  xmlStandalone = true; yybegin(GOT_STANDALONE);  }
        case 145: break;
        case 28: 
          { 
            return SUCCESS; // success
         }
        case 146: break;
        case 8: 
        case 9: 
          {  return NO_DECLARATION;  }
        case 147: break;
        case 124: 
          { 
    yybegin(VERSION);
 }
        case 148: break;
        case 52: 
          { 
            xmlVersion = yytext(1,yylength()-2);
            yybegin(GOT_VERSION);
     }
        case 149: break;
        case 55: 
          { 
        xmlEncoding = yytext(1,yylength()-2);
        yybegin(GOT_ENCODING);
     }
        case 150: break;
        case 129: 
          { 
        yybegin(ENCODING);
     }
        case 151: break;
        case 137: 
          { 
        xmlEncoding = "ISO-8859-1";
        yybegin(GOT_ENCODING);
     }
        case 152: break;
        case 136: 
          { 
            xmlStandaloneDeclared = true;
            yybegin(STANDALONE);
         }
        case 153: break;
        case 116: 
          { 
        xmlEncoding = "US-ASCII";
        yybegin(GOT_ENCODING);
     }
        case 154: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return YYEOF;
          }
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
