// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __com_bluecast_xml_PiccoloLexer__
#define __com_bluecast_xml_PiccoloLexer__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace com
  {
    namespace bluecast
    {
      namespace util
      {
        class StringStack;
        class LongStack;
        class CharStringConverter;
      }
      namespace xml
      {
        class PiccoloLexer;
        class FatalParsingException;
        class FastNamespaceSupport;
        class ElementDefinition;
        class AttributesHolder;
        class EntityManager;
        class Entity;
        class Piccolo;
      }
    }
  }
}

class com::bluecast::xml::PiccoloLexer : public ::java::lang::Object
{
public:
  PiccoloLexer (::com::bluecast::xml::Piccolo *);
  void reset (::com::bluecast::xml::Entity *);
public: // actually package-private
  void enableNamespaces (jboolean);
  void defineElement (::java::lang::String *, ::com::bluecast::xml::ElementDefinition *);
  ::com::bluecast::xml::ElementDefinition *getElement (::java::lang::String *);
public:
  jint getLineNumber ();
  jint getColumnNumber ();
public: // actually package-private
  ::java::lang::String *getPublicID ();
  ::java::lang::String *getSystemID ();
  ::java::lang::String *getVersion ();
  ::java::lang::String *getEncoding ();
  void setTokenize (jboolean);
  ::java::lang::String *normalizeValue (::java::lang::String *);
  void startCdata ();
  void endCdata ();
private:
  void appendToCbuf (jchar);
  void appendToCbuf (jcharArray, jint, jint);
  void clearCbuf ();
  jint stringToken (jint, ::java::lang::String *);
  jint cdataToken (jcharArray, jint, jint);
  jint cdataToken (jint, jcharArray, jint, jint);
  jint cdataToken (jchar);
  jint parseXML ();
  jint parseXMLNS ();
  jint parseTag ();
  jint parseTagNS ();
  jint parseOpenTag ();
  jint parseOpenTagNS ();
  jint parseAttributes ();
  jint parseAttributesNS ();
  void parseAttributeName ();
  void parseAttributeNameNS ();
  jint parseCloseTag ();
  jint parseCloseTagNS ();
  ::java::lang::String *parseElementName ();
  ::java::lang::String *parseElementNameNS ();
  static void calcAsciiTables ();
  static jboolean isASCIINameStartChar (jint);
  static jboolean isASCIINameStartCharNS (jint);
  static jboolean isASCIINameChar (jint);
  static jboolean isASCIINameCharNS (jint);
  jint parseWhitespace ();
  void parseCdata ();
  void parseCdataSection ();
public: // actually package-private
  void pushEntity (::java::lang::String *, ::com::bluecast::xml::Entity *, jboolean, jboolean);
  void pushEntity (::java::lang::String *, ::com::bluecast::xml::Entity *, jboolean, jboolean, jint);
  void pushEntity (::java::lang::String *, ::java::lang::String *, ::java::lang::String *, jboolean, jboolean);
  void pushEntity (::java::lang::String *, ::java::lang::String *, ::java::lang::String *, jboolean, jboolean, jint);
  jboolean parseExternalEntities (jint);
private:
  void pushEntityState (::java::lang::String *, jboolean, jboolean);
  void pushEntityState (::java::lang::String *, jboolean, jboolean, jint);
  void popEntityState ();
  void clearEntityState ();
  jint handleEntityRef (::java::lang::String *, jint);
  jboolean handleLiteralEntityRef (::java::lang::String *, jint);
  void handleUnknownEntityRef (::java::lang::String *, jint);
  jboolean isTopEntity ();
  void parseQuotedTagValue ();
  void parseSingleQuotedTagValue ();
  void parseCdataLiteral (jchar, jint);
  void parseEncodedChar (jcharArray, jint, jint, jint);
  void prepareComplexElement (::java::lang::String *);
  void processComplexElement ();
  void processNSContextEnd ();
  void addAttribute (::java::lang::String *, ::java::lang::String *, ::java::lang::String *, ::java::lang::String *, ::java::lang::String *);
  void processSimpleElement (::java::lang::String *);
public: // actually package-private
  ::java::lang::String *rescanAttributeValue (::java::lang::String *);
private:
  void resolveNamespacePrefixes ();
  void checkEndTag (::java::lang::String *);
  ::java::lang::String *yytext2 ();
  ::java::lang::String *yytext2 (jint, jint);
  ::com::bluecast::xml::FatalParsingException *fatalError (::java::lang::String *);
  ::com::bluecast::xml::FatalParsingException *fatalError (::java::lang::String *, ::java::lang::Exception *);
  void safeBacktrack ();
public: // actually package-private
  PiccoloLexer (::java::io::Reader *);
  PiccoloLexer (::java::io::InputStream *);
private:
  static jintArray yy_unpack ();
  static jint yy_unpack (::java::lang::String *, jint, jintArray);
  static jcharArray yy_unpack_cmap (::java::lang::String *);
  jboolean yy_refill ();
public:
  void yyclose ();
  void yypushStream (::java::io::Reader *);
  void yypushBuffer (jcharArray, jint, jint);
  void yypopStream ();
  jboolean yymoreStreams ();
  void yyreset (::java::io::Reader *);
  void yyreset (jcharArray, jint, jint);
  jint yystate () { return yy_lexical_state; }
  void yybegin (jint);
  ::java::lang::String *yytext ();
  ::java::lang::String *yytext (jint, jint);
  void yynextAction ();
  jint yynextChar ();
  jint yynextBufferChar ();
  void yycountChar (jint);
  jchar yycharat (jint);
  jint yybufferLeft ();
  void yyskip (jint);
  jint yylength ();
private:
  void yy_ScanError (jint);
  void yypushback (jint);
  void yy_do_eof ();
public:
  jint yylex ();
  static const jint YYEOF = -1L;
private:
  static const jint YY_BUFFERSIZE = 16384L;
public:
  static const jint DTD_TAG_START = 31L;
  static const jint CLOSE_TAG_NS = 20L;
  static const jint DTD_IGNORE = 28L;
  static const jint PI = 4L;
  static const jint DTD_TAG_SQSTRING_BUFFERED = 35L;
  static const jint TAG_VALUE_ENTITY = 11L;
  static const jint ENTITYREF = 3L;
  static const jint DTD_ATT_NAME = 23L;
  static const jint DTD_TAG = 30L;
  static const jint DTD_TAG_VALUE_EXTERNAL_ENTITY = 33L;
  static const jint TAG = 6L;
  static const jint TAG_VALUE_ENTITYREF = 12L;
  static const jint YYINITIAL = 0L;
  static const jint DTD_TAG_VALUE_PARAM_ENTITYREF = 37L;
  static const jint TAG_NS = 8L;
  static const jint DTD_NMTOKENS = 26L;
  static const jint TAG_SQSTRING_NORMALIZE = 16L;
  static const jint DTD_PUBLIC_ID = 29L;
  static const jint XML_TAG = 1L;
  static const jint TAG_QSTRING_NORMALIZE = 15L;
  static const jint TAG_START = 7L;
  static const jint DTD_COMMENT = 27L;
  static const jint DTD_TAG_VALUE_ENTITY = 32L;
  static const jint TAG_QSTRING_CDATA_BUFFERED = 13L;
  static const jint TAG_SQSTRING_CDATA_BUFFERED = 14L;
  static const jint DTD_TAG_VALUE_STD_ENTITYREF = 36L;
  static const jint PI_WS = 5L;
  static const jint DTD_TAG_QSTRING_BUFFERED = 34L;
  static const jint TAG_START_NS = 9L;
  static const jint DTD_ATTLIST_ELEMENT = 22L;
  static const jint DTD_ATT_TYPE = 24L;
  static const jint DTD_ENTITY_DECL = 25L;
  static const jint TAG_QSTRING_NORMALIZE_BUFFERED = 17L;
  static const jint TAG_SQSTRING_NORMALIZE_BUFFERED = 18L;
  static const jint TAG_VALUE = 10L;
  static const jint CLOSE_TAG = 19L;
  static const jint YYINITIAL_DIRECT = 2L;
  static const jint DTD = 21L;
private:
  static ::java::lang::String *yycmap_packed;
  static jcharArray yycmap;
  static jintArray yy_rowMap;
  static ::java::lang::String *yy_packed0;
  static jintArray yytrans;
  static const jint YY_UNKNOWN_ERROR = 0L;
  static const jint YY_ILLEGAL_STATE = 1L;
  static const jint YY_NO_MATCH = 2L;
  static const jint YY_PUSHBACK_2BIG = 3L;
  static const jint YY_SKIP_2BIG = 4L;
  static JArray< ::java::lang::String *> *YY_ERROR_MSG;
  static jbyteArray YY_ATTRIBUTE;
  ::java::io::Reader * __attribute__((aligned(__alignof__( ::java::lang::Object )))) yy_reader;
  jint yy_state;
  jint yy_lexical_state;
  jcharArray yy_buffer;
  jcharArray yy_saved_buffer;
  jint yy_markedPos;
  jint yy_savePos;
  jint yy_pushbackPos;
  jint yy_currentPos;
  jint yy_startRead;
  jint yy_endRead;
  jint yyline;
  jint yychar;
  jint yycolumn;
  jboolean yy_atBOL;
  jboolean yy_atEOF;
  ::java::util::Stack *yy_streams;
  jboolean yy_eof_done;
public: // actually package-private
  ::com::bluecast::xml::Piccolo *parser;
  ::com::bluecast::xml::Entity *currentEntity;
  ::com::bluecast::util::CharStringConverter *stringConverter;
  ::com::bluecast::xml::EntityManager *entityManager;
  ::java::util::Stack *entityStack;
  ::com::bluecast::xml::AttributesHolder *attribs;
  jcharArray cbuf;
  jint cbuflen;
  ::java::lang::String *stringValue;
  jcharArray oneCharBuffer;
  jcharArray cdataBuffer;
  jint cdataStart;
  jint cdataLength;
private:
  ::com::bluecast::util::LongStack *entityStateStack;
  ::com::bluecast::util::StringStack *entityNameStack;
  ::java::lang::String *currentEntityName;
  jint prevEntityLexState;
  jboolean returnEntityEndToken;
  jboolean isParamEntity;
  jint entityBaseDepth;
  jboolean isEntityBeingParsed;
  jboolean inCdataSection;
  jint baseState;
  jint prevState;
  jint piPrevState;
  jboolean isNamespaceDeclaration;
  jboolean entityWasSkipped;
  jint tagState;
  jint tagStartState;
  jboolean tokenizeInput;
  ::com::bluecast::util::StringStack *tagStack;
  jboolean bypassPERefs;
  jboolean bypassGERefs;
  jboolean needsNormalization;
  jint tagType;
  jboolean endOfTag;
  ::java::util::HashMap *elementMap;
  ::com::bluecast::xml::ElementDefinition *elementDefinition;
  ::java::lang::String *elementURI;
  ::java::lang::String *elementLocalName;
  ::java::lang::String *elementQName;
  ::java::lang::String *attributeURI;
  ::java::lang::String *attributeLocalName;
  ::java::lang::String *attributeQName;
  ::java::lang::String *attributeValueType;
public: // actually package-private
  jint tokenStartLine;
private:
  jbooleanArray defaultAttributeSpecified;
  jint numAttributesDefined;
  ::com::bluecast::xml::FastNamespaceSupport *nsSupport;
  static jbooleanArray asciiNameStartChars;
  static jbooleanArray asciiNameStartCharsNS;
  static jbooleanArray asciiNameChars;
  static jbooleanArray asciiNameCharsNS;
  jint yy_currentPos_l;
  jint yy_startRead_l;
  jint yy_markedPos_l;
  jint yy_endRead_l;
  jcharArray yy_buffer_l;
  jcharArray yycmap_l;
  jboolean yy_sawCR;
  jboolean yy_prev_sawCR;
  jint yyline_next;
  jint yycolumn_next;

  friend class com_bluecast_xml_PiccoloLexer$YY_StreamInfo;
public:

  static ::java::lang::Class class$;
};

#endif /* __com_bluecast_xml_PiccoloLexer__ */
