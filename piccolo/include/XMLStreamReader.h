// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __com_bluecast_xml_XMLStreamReader__
#define __com_bluecast_xml_XMLStreamReader__

#pragma interface

#include <com/bluecast/xml/XMLInputReader.h>
#include <gcj/array.h>

extern "Java"
{
  namespace com
  {
    namespace bluecast
    {
      namespace xml
      {
        class XMLStreamReader;
        class XMLStreamReader$XMLStreamDecoder;
        class XMLStreamReader$JavaStreamDecoder;
        class XMLStreamReader$FastStreamDecoder;
        class XMLDecoder;
      }
    }
  }
}

class com::bluecast::xml::XMLStreamReader : public ::com::bluecast::xml::XMLInputReader
{
public:
  XMLStreamReader ();
  XMLStreamReader (::java::io::InputStream *, jboolean);
  XMLStreamReader (::java::io::InputStream *, ::java::lang::String *, jboolean);
  void reset (::java::io::InputStream *, ::java::lang::String *, jboolean);
  ::java::lang::String *getEncoding () { return encoding; }
  void close ();
  void reset ();
  void mark (jint);
  jboolean markSupported ();
  jint read ();
  jint read (jcharArray);
  jint read (jcharArray, jint, jint);
  jboolean ready ();
  jlong skip (jlong);
private:
  void setEncoding (::java::lang::String *);
  jint fillByteBuffer ();
  ::java::lang::String *getJavaCharset (::java::lang::String *);
  ::java::lang::String *guessEncoding ();
  void processXMLDecl ();
public: // actually package-private
  static jint access$000 (::com::bluecast::xml::XMLStreamReader *) { return cbufEnd; }
  static jint access$100 (::com::bluecast::xml::XMLStreamReader *) { return cbufPos; }
  static jcharArray access$200 (::com::bluecast::xml::XMLStreamReader *) { return cbuf; }
  static jint access$108 (::com::bluecast::xml::XMLStreamReader *);
  static jint access$102 (::com::bluecast::xml::XMLStreamReader *, jint);
  static jint access$002 (::com::bluecast::xml::XMLStreamReader *, jint);
  static jint access$112 (::com::bluecast::xml::XMLStreamReader *, jint);
  static jint access$300 (::com::bluecast::xml::XMLStreamReader *) { return bbufEnd; }
  static jint access$400 (::com::bluecast::xml::XMLStreamReader *) { return bbufPos; }
  static jint access$500 (::com::bluecast::xml::XMLStreamReader *) { return maxBytesPerChar; }
  static jint access$600 (::com::bluecast::xml::XMLStreamReader *);
  static jint access$700 (::com::bluecast::xml::XMLStreamReader *) { return minBytesPerChar; }
  static jbyteArray access$800 (::com::bluecast::xml::XMLStreamReader *) { return bbuf; }
  static jintArray access$900 (::com::bluecast::xml::XMLStreamReader *) { return decodeResult; }
  static ::com::bluecast::xml::XMLDecoder *access$1000 (::com::bluecast::xml::XMLStreamReader *) { return decoder; }
  static jint access$412 (::com::bluecast::xml::XMLStreamReader *, jint);
  static jboolean access$1100 (::com::bluecast::xml::XMLStreamReader *) { return eofReached; }
  static ::java::io::InputStream *access$1200 (::com::bluecast::xml::XMLStreamReader *) { return in; }
  static jint access$114 (::com::bluecast::xml::XMLStreamReader *, jlong);
  static ::java::lang::String *access$1300 (::com::bluecast::xml::XMLStreamReader *) { return encoding; }
private:
  static const jint BYTE_BUFFER_SIZE = 8192L;
  ::com::bluecast::xml::XMLDecoder * __attribute__((aligned(__alignof__( ::com::bluecast::xml::XMLInputReader )))) decoder;
  jint minBytesPerChar;
  jint maxBytesPerChar;
  ::java::io::InputStream *in;
  jintArray decodeResult;
  ::java::lang::String *encoding;
  jboolean useDeclaredEncoding;
  jboolean rewindDeclaration;
  jcharArray cbuf;
  jbyteArray bbuf;
  jint cbufPos;
  jint cbufEnd;
  jint bbufPos;
  jint bbufEnd;
  jboolean eofReached;
  static const jint MAX_XML_DECL_CHARS = 100L;
  ::com::bluecast::xml::XMLStreamReader$FastStreamDecoder *fastStreamDecoder;
  ::com::bluecast::xml::XMLStreamReader$JavaStreamDecoder *javaStreamDecoder;
  ::com::bluecast::xml::XMLStreamReader$XMLStreamDecoder *activeStreamDecoder;
  static ::java::util::HashMap *charsetTable;

  friend class com_bluecast_xml_XMLStreamReader$JavaStreamDecoder;
  friend class com_bluecast_xml_XMLStreamReader$FastStreamDecoder;
  friend class com_bluecast_xml_XMLStreamReader$XMLStreamDecoder;
public:

  static ::java::lang::Class class$;
};

#endif /* __com_bluecast_xml_XMLStreamReader__ */
