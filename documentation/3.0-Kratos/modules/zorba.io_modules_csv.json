{ "ns" : "http://zorba.io/modules/csv", "description" : " Function library providing converters from CSV/TXT to XML and back.\n The functions are optimized to work with large amounts of data, in a streaming way.\n", "sees" : [  ], "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Daniel Turcanu</xqdoc:author>" ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://zorba.io/modules/csv", "prefix" : "csv" }, { "uri" : "http://zorba.io/modules/csv-options", "prefix" : "csv-options" }, { "uri" : "http://zorba.io/modules/schema", "prefix" : "schemaOptions" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" } ], "functions" : [ { "arity" : 2, "name" : "parse", "qname" : "csv:parse", "signature" : "($csv as xs:string, $options as element(csv-options:options)?) as element(*)*", "description" : " Parse a CSV or fixed size text and convert to XML.<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n By default each line is converted to a &lt;row&gt; element, and each field to a &lt;column&gt; element inside &lt;row&gt;.<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The format of the param $options is:<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n  <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n    &lt;csv-options:options&gt;\n        &lt;csv  [separator=\"default comma ,\"] ?\n          [quote-char=\"default double quotes &amp;quote;\"]?\n          [quote-escape=\"default double double quotes &amp;quote;&amp;quote;\"]? /&gt;\n        or\n        &lt;column-widths&gt;\n          &lt;column-width&gt;<i>[column fixed width, unsigned int]</i>&lt;column-width&gt;*\n        &lt;/column-widths&gt;\n        or\n        &lt;column-positions&gt;\n          &lt;column-position&gt;<i>[column position on line, unsigned int]</i>&lt;column-position&gt;*\n        &lt;/column-positions&gt;\n        &lt;first-row-is-header [line=\"<i>first_line[-last_line]?</i>\"]?/&gt;?\n        &lt;start-from-row line=\"<i>first_line[-last_line]?</i>\"/&gt;?\n        &lt;add-last-void-columns/&gt;?\n        &lt;xml-nodes&gt;\n          [&lt;<i>row-name</i>&gt;\n            [&lt;<i>column-name/</i>&gt;]?\n          &lt;/<i>row-name</i>&gt;]?\n        &lt;/xml-nodes&gt;?\n    &lt;/csv-options:options&gt;\n  </pre>\n    All the parameters are optional and can appear in any order.<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n    All the parameters are case sensitive. The namespace used is \"http://zorba.io/modules/csv-options\".<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n    All strings must have UTF-8 encoding.<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n    Parameters csv, column-widths, column-positions are mutually exclusive. If none is specified,\n    the input string is assumed to be csv.<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n    Description of parameters:\n    <dl xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n     <dt><b>csv</b></dt>\n     <dd> Specifies the parameters for parsing a csv string.<br/>\n       <dl>\n        <dt><b>separator</b></dt>\n        <dd>The character or group of characters used to separating fields in a row.\n            If it is not specified, it defaults to comma ','.\n        </dd>\n        <dt><b>quote-char</b></dt>\n        <dd>The character or group of characters used for quoting the fields that may contain special characters,\n             like separator, new line or this quote char. The default value is double quote \".<br/>\n        </dd>\n        <dt><b>quote-escape</b></dt>\n        <dd>The group of characters used for escaping the quote char inside a field. The whole quote escape group\n           is translated to a quote char during parsing. The default value is double double quotes \"\".<br/>\n        </dd>\n       </dl>\n     </dd>\n     <br/>\n     <dt><b>column-widths</b></dt>\n     <dd>Specifies the column widths for fixed size text. It contains multiple column-width child elements\n        specifying the fixed width of each column, from left to right.<br/>\n        If the line has more fields than specified, they are ignored.\n     </dd>\n     <dt><b>column-positions</b></dt>\n     <dd>This is an alternative to column-widths, and specifies instead the starting position of each column.\n        Column positions are 1 based, and are specified in order from left to right.\n        The last column is read until end of line. The first column position can be greater than 1, if you want\n        to parse only a part of the input text.\n     </dd>\n     <dt><b>first-row-is-header</b></dt>\n     <dd>The presence of this element indicates that the first row is to be treated as the name of the columns.\n        If it is not present, then each field is enclosed in a &lt;column&gt; element,\n        or how it is specified in &lt;xml-nodes&gt; parameter.<br/>\n        If the first row is the header, then each field is enclosed in an element with the corresponding name from the header.<br/>\n        For example, the csv:\n        <pre>\n        <i>ID,Name,Occupation\n        1,John,student</i>\n        </pre>\n        is parsed into:\n        <pre>\n        <i>&lt;row&gt;\n        &lt;ID&gt;1&lt;/ID&gt;\n        &lt;Name&gt;John&lt;/Name&gt;\n        &lt;Occupation&gt;student&lt;/Occupation&gt;\n        &lt;/row&gt;</i>\n        </pre>\n        If the header names contain characters that cannot be used in a QName, they are replaced with underscore '_'.<br/>\n        The namespace for the header QNames is taken from the column name specified in xml-nodes parameter, or from\n        the row name, or if that doesn't exist either then empty namespace is used. <br/>\n        If the header is not the first line in the input string, the starting line can be specified in the <b>line</b> attribute.<br/>\n        If a column does not have a name, a new name is constructed in the form <i>columnN</i> where N is the position of the column,\n        starting from 1.<br/>\n        <b>Subheaders</b><br/>\n        If the header consists of more than one line, this can be specified in the <b>line</b> attribute in the form\n        \"<i>first_line - last_line</i>\". Having more lines as the header translates into a hierarchy of elements in the xml.<br/>\n        For example, the csv:\n        <pre>\n        <i>ID,Name,,Occupation\n        ,First Name,Last Name,\n        1,John,Howard,student</i>\n        </pre>\n        is parsed into:\n        <pre>\n        <i>&lt;row&gt;\n        &lt;ID&gt;1&lt;/ID&gt;\n        &lt;Name&gt;\n          &lt;First_Name&gt;John&lt;/First_Name&gt;\n          &lt;Last_Name&gt;Howard&lt;/Last_Name&gt;\n        &lt;/Name&gt;\n        &lt;Occupation&gt;student&lt;/Occupation&gt;\n        &lt;/row&gt;</i>\n        </pre>\n        This element can have an attribute \"accept-all-lines\" with values \"false\" or \"true\" (default \"false\").\n        When set to true it tells the parser to not report lines that do not have the same number of items as\n        the header. If set to false, the parser will raise a csv:WrongInput error for these lines.<br/>\n     </dd>\n     <dt><b>start-from-row</b></dt>\n     <dd>If the data does not start from line 1 or immediately after the header,\n        you can specify the starting line in the <b>line</b> attribute.<br/>\n        Also you can use this attribute in the form \"<i>first_line - last_line</i>\" to specify also the last line\n        if you don't want the whole csv to be parsed.\n     </dd>\n     <dt><b>add-last-void-columns</b></dt>\n     <dd>In the case when using headers and some data lines are shorter than the header, by default the excess columns are ignored\n          for those lines. You can set the add-last-void-columns parameter to make all the columns appear in xml even if they are void.\n     </dd>\n     <dt><b>xml-nodes</b></dt>\n     <dd>With this parameter you can specify the names for the row element and for the column element if there is no header.<br/>\n        The first element child of this element specifies the desired QName of the row element in the output xml.\n        The name of this element will be used as the name of the row element.<br/>\n        The element child of this row element is the column element, and its name will be used as the name of the column elements\n        that enclose the fields in the output xml if there is no header. <br/>\n        If the csv has a header, only the namespace is used from the column element.<br/>\n        For example, with parameter:\n        <pre>\n        <i>&lt;xml-nodes&gt;\n        &lt;r&gt;\n          &lt;c/&gt;\n        &lt;/r&gt;\n        &lt;/xml-nodes&gt;</i>\n        </pre>\n        the output for each line will look like:\n        <pre>\n        <i>&lt;r&gt;\n          &lt;c&gt;field1&lt;/c&gt;\n          &lt;c&gt;field2&lt;/c&gt;\n          .......\n        &lt;/r&gt;</i>\n        </pre>\n     </dd>\n    </dl>\n", "summary" : "<p> Parse a CSV or fixed size text and convert to XML.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "csv", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string containing the csv or fixed size text.</div>" }, { "name" : "options", "type" : "element(csv-options:options)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> this parameter is validated against \"http://zorba.io/modules/csv-options\" schema. If this parameter is not specified, the row name is by default \"row\" and the column name is by default \"column\".</div>" } ], "returns" : { "type" : "element(*)*", "description" : "a sequence of row elements, one for each line in csv" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">csv:CSV001 if the input string is streamable string and cannot be rewinded</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">csv:WrongInput if the input string has lines with variable number of items, and the csv has headers and the options do not specify the ignore-foreign-input attribute</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:XQDY0027 if $options can not be validated against the csv-options schema</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:XQDY0084 if the options parameter doesn't have the name \"csv-options:options\".</xqdoc:error>" ] }, { "arity" : 2, "name" : "serialize", "qname" : "csv:serialize", "signature" : "($xml as element(*)*, $options as element(csv-options:options)?) as xs:string", "description" : " Convert XML into CSV or fixed size text.\n Note: if you want to serialize out the result, make sure that the serializer method is set to \"text\".\n For example, in zorba command line, you have to set the param --serialize-text.\n When using the <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">file:write(...)</pre> function, you have to set the\n method serialization parameter to \"text\":\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n &lt;output:serialization-parameters&lt;\n   &lt;output:method value=\"text\"/&lt;\n &lt;/output:serialization-parameters&lt;\n </pre>\n The <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$options</pre> parameter must have the following format:\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n    &lt;csv-options:options&gt;<br/>\n        &lt;csv  [separator=\"default comma ,\"] ? <br/>\n          [quote-char=\"default double quotes &amp;quote;\"]? <br/>\n          [quote-escape=\"default double double quotes &amp;quote;&amp;quote;\"]? /&gt; <br/>\n        <br/>\n        or<br/>\n        &lt;column-widths [align=\"left|right\"]?&gt;<br/>\n          &lt;column-width [align=\"left|right\"]?&gt;<i>[column fixed width, unsigned int]</i>&lt;column-width&gt;*<br/>\n        &lt;/column-widths&gt;<br/>\n        <br/>\n        or<br/>\n        &lt;column-positions [align=\"left|right\"]?&gt;<br/>\n          &lt;column-position [align=\"left|right\"]?&gt;<i>[column position on line, unsigned int]</i>&lt;column-position&gt;*<br/>\n        &lt;/column-positions&gt;<br/>\n        <br/>\n        &lt;first-row-is-header/&gt;?<br/>\n    &lt;/csv-options:options&gt;\n </pre>\n All the parameters are optional and can appear in any order.<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n All the parameters are case sensitive. The namespace used is \"http://zorba.io/modules/csv-options\".<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n All strings must have UTF-8 encoding.<br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Parameters csv, column-widths, column-positions are mutually exclusive.\n If none is specified, the xml is converted to csv.\n Description of parameters:\n    <dl xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n     <dt><b>csv</b></dt>\n     <dd> Specifies the parameters for converting to csv.<br/>\n       <dl>\n        <dt><b>separator</b></dt>\n        <dd>The character or group of characters used to separating fields in a row.\n            If it is not specified, it defaults to comma ','.\n        </dd>\n        <dt><b>quote-char</b></dt>\n        <dd>The character or group of characters used for quoting the fields that may contain special characters,\n             like separator, new line or this quote char. The default value is double quote \".<br/>\n        </dd>\n        <dt><b>quote-escape</b></dt>\n        <dd>The group of characters used for escaping the quote char inside a field. The whole quote escape group\n           is translated to a quote char during parsing. The default value is double double quotes \"\".<br/>\n        </dd>\n       </dl>\n     </dd>\n     <br/>\n     <dt><b>column-widths</b></dt>\n     <dd>Specifies the column widths for fixed size text. It contains multiple column-width child elements\n        specifying the fixed width of each column, from left to right.<br/>\n        With the attribute <b>align</b> you can specify how to align fields that are smaller than the column width.\n        The default alignment is left.<br/>\n     </dd>\n     <dt><b>column-positions</b></dt>\n     <dd>This is an alternative to column-widths, and specifies instead the starting position of each column.\n        Column positions are 1 based, and are specified in order from left to right.\n        The last column has a variable length.<br/>\n        With the attribute <b>align</b> you can specify how to align fields that are smaller than the column width.\n        The default alignment is left. The last column does not need alignment.<br/>\n     </dd>\n     <dt><b>first-row-is-header</b></dt>\n     <dd>The presence of this element indicates that the first row will contain the header, that is, the names of\n        the column elements. Only the column names from the first row element are taken into account.<br/>\n        For example, the row xml:<br/>\n        <i>&lt;row&gt;<br/>\n        &lt;ID&gt;1&lt;/ID&gt;<br/>\n        &lt;Name&gt;John&lt;/Name&gt;<br/>\n        &lt;Occupation&gt;student&lt;/Occupation&gt;<br/>\n        &lt;/row&gt;</i><br/>\n        <br/>\n        is converted to<br/>\n        <i>ID,Name,Occupation<br/>\n        1,John,student</i><br/>\n        <br/>\n        The header names are the localnames of the column elements, and the namespace is ignored.<br/>\n        <b>Subheaders</b><br/>\n        If the row-column hierarchy is more complex, then subheaders are also generated on subsequent lines.\n        The number of subheaders depends on the depth of the column hierarchy.<br/>\n        When generating the subheaders, the non-whitespace text nodes are also taken into account,\n        and a separate column is generated for them too.<br/>\n        For example, the xml row element:<br/>\n        <i>&lt;row&gt;<br/>\n        &lt;ID&gt;1&lt;/ID&gt;<br/>\n        &lt;Name&gt;<br/>\n          Mr.<br/>\n          &lt;First_Name&gt;John&lt;/First_Name&gt;<br/>\n          &lt;Last_Name&gt;Howard&lt;/Last_Name&gt;<br/>\n        &lt;/Name&gt;<br/>\n        &lt;Occupation&gt;student&lt;/Occupation&gt;<br/>\n        &lt;/row&gt;</i><br/>\n        is converted to<br/>\n        <i>ID,Name,,Occupation<br/>\n        ,,First Name,Last Name,<br/>\n        1,Mr.,John,Howard,student</i><br/>\n        <br/>\n        If first-row-is-header is not specified and the columns have a deeper hierarchy,\n          only the first layer of columns is processed, and the fields are the string values of each column.<br/>\n        This element can have an attribute \"ignore-foreign-input\" with values \"false\" or \"true\" (default \"false\").\n        When set to true it tells the serializer to ignore elements that to not match the header names.\n        If set to false, the serializer will raise a csv:ForeignInput error for these elements.<br/>\n     </dd>\n    </dl>\n", "summary" : "<p> Convert XML into CSV or fixed size text.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "xml", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> a sequence of elements, each element representing a row. The name of each row element is ignored. The childs of each row are the column fields.</div>" }, { "name" : "options", "type" : "element(csv-options:options)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The options parameter. See the function description for details. This parameter is validated against \"http://zorba.io/modules/csv-options\" schema.</div>" } ], "returns" : { "type" : "xs:string", "description" : "the csv or fixed size text as string containing all the lines" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">csv:CSV003 if the serialize output is streamable string and cannot be reset</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">csv:ForeignInput if there are input elements in subsequent rows that do not match the headers, and the options specify first-row-is-header and do not specify the ignore-foreign-input attribute</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:XQDY0027 if $options can not be validated against csv-options schema</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:XQDY0084 if the options parameter doesn't have the name \"csv-options:options\".</xqdoc:error>" ] } ], "variables" : [  ] }