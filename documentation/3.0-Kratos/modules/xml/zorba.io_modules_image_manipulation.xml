<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://zorba.io/modules/image/manipulation</xqdoc:uri><xqdoc:name>manipulation</xqdoc:name><xqdoc:comment><xqdoc:description> <p>This module provides functions to handle image manipulations like resizing, zooming,
 special effects etc.</p>
 <p>The errors raised by functions of this module have the namespace
 <tt>http://zorba.io/modules/image/error</tt> (associated with prefix ierr).</p>
</xqdoc:description><xqdoc:author>Daniel Thomas</xqdoc:author><xqdoc:custom tag="library"><a href="http://www.imagemagick.org/Magick++/">Magick++ C++ Library</a></xqdoc:custom><xqdoc:custom tag="project">Zorba/Image/Manipulation</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">3.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors" isSchema="false"/><xqdoc:namespace prefix="ierr" uri="http://zorba.io/modules/image/error" isSchema="false"/><xqdoc:namespace prefix="image" uri="http://zorba.io/modules/image/image" isSchema="true"/><xqdoc:namespace prefix="man" uri="http://zorba.io/modules/image/manipulation" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports><xqdoc:import type="schema"><xqdoc:uri>http://zorba.io/modules/image/image</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> <p>Get a copy of the passed image with changed width and height (without
 zooming the image's content).</p>
 <p>To change the size of the actual contents of an image, use the zoom function.</p>
 <p/>
 <p>More in detail: If the new dimensions are greater than the current dimensions
 the new image will have the passed image in the upper left corner and the rest
 will be filled with the current background color.</p>
 <p>If the passed dimensions are less than the current dimensions, the new image
 will contain the specified rectangle of the passed image beginning at the upper
 left corner.</p>
</xqdoc:description><xqdoc:param>$image image to resize</xqdoc:param><xqdoc:param>$width new width</xqdoc:param><xqdoc:param>$height new height</xqdoc:param><xqdoc:return>resized copy of the source image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_resize.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:resize</xqdoc:name><xqdoc:signature>declare function man:resize($image as xs:base64Binary, $width as xs:unsignedInt, $height as xs:unsignedInt) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>width</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>height</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Zoom the passed image by the specified factor while keeping the ratio between
 width and height.</p>
 <p/>
 <p>A ratio of less than 1 will make the image smaller.</p>
 <p>A ratio of less or equal than 0 will not effect the image.</p>
 <p>Important note: this function does not change the size information stored in the
 image (e.g. basic:width will not show a different value).</p>
</xqdoc:description><xqdoc:param>$image image to resize</xqdoc:param><xqdoc:param>$ratio ratio to zoom width and height by</xqdoc:param><xqdoc:return>A copy of $image with resized content</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_zoom.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:zoom</xqdoc:name><xqdoc:signature>declare function man:zoom($image as xs:base64Binary, $ratio as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>ratio</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Zoom the passed image to a given new width while keeping the ratio between
 width and height.</p>
 <p>So, the height is scaled accordingly.</p>
 <p>Important note: this function does not change the size information stored
 in the image (e.g. basic:width will not show a different value).</p>
</xqdoc:description><xqdoc:param>$image image to resize</xqdoc:param><xqdoc:param>$width new width for the image in pixels</xqdoc:param><xqdoc:return>A copy of $image with given $width and height changed accordingly</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_zoom_width.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:zoom-by-width</xqdoc:name><xqdoc:signature>declare function man:zoom-by-width($image as xs:base64Binary, $width as xs:unsignedInt) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>width</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Zoom the passed image to a given new height while keeping the ratio between
 width and height.</p>
 <p>So, the width is scaled accordingly.</p>
 <p>Important note: this function does not change the size information stored
 in the image (e.g. basic:width will not show a different value).</p>
</xqdoc:description><xqdoc:param>$image image to resize</xqdoc:param><xqdoc:param>$height new height for the image in pixels</xqdoc:param><xqdoc:return>A copy of $image with given $height and width adjusted accordingly</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_zoom_height.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:zoom-by-height</xqdoc:name><xqdoc:signature>declare function man:zoom-by-height($image as xs:base64Binary, $height as xs:unsignedInt) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>height</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="5"><xqdoc:comment><xqdoc:description> <p>Copy a part of the source image specified by a rectangle.</p>
 <p>If the passed parameters for the sub-image specify a rectangle that isn't
 entirely within the source image only the area that lies within the image
 boundaries will be returned.</p>
</xqdoc:description><xqdoc:param>$image the image from which to extract a sub-image</xqdoc:param><xqdoc:param>$left-upper-x is the x value of the upper left corner of the rectangle to cut out</xqdoc:param><xqdoc:param>$left-upper-y is the y value of the upper left corner of the rectangle to cut out.</xqdoc:param><xqdoc:param>$width width of the rectangle to cut out</xqdoc:param><xqdoc:param>$height height of the rectangle to cut out</xqdoc:param><xqdoc:return>A new image containing parts of the source image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_sub_image.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:sub-image</xqdoc:name><xqdoc:signature>declare function man:sub-image($image as xs:base64Binary, $left-upper-x as xs:unsignedInt, $left-upper-y as xs:unsignedInt, $width as xs:unsignedInt, $height as xs:unsignedInt) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>left-upper-x</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>left-upper-y</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>width</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>height</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="5"><xqdoc:comment><xqdoc:description> <p>Overlay $image with $overlay-image at the specfied position.</p>
 <p/>
 <p>The $operator defines the details of the overlay and can have one of the
 following values:</p>
 <ul>
   <li>OverCompositeOp: The result is the union of the two image shapes
       with the overlay image obscuring image in the region of overlap.</li>
   <li>InCompositeOp: The result is a simple overlay image cut by the shape
       of image. None of the image data of image is included in the result.</li>
   <li>OutCompositeOp: The resulting image is the overlay image with the shape
       of image cut out.</li>
   <li>AtopCompositeOp: The result is the same shape as image, with overlay
       image obscuring image there the image shapes overlap. Note that this
       differs from OverCompositeOp because the portion of composite image
       outside of image's shape does not appear in the result.</li>
   <li>XorCompositeOp: The result is the image data from both overlay image
       and image that is outside the overlap region. The overlap region will
       be blank.</li>
   <li>PlusCompositeOp: The result is just the sum of the image data of both
       images. Output values are cropped to 255 (no overflow). This operation
       is independent of the matte channels.</li>
   <li>MinusCompositeOp: The result of overlay image - image, with overflow
       cropped to zero. The matte chanel is ignored (set to 255, full
       coverage).</li>
   <li>AddCompositeOp: The result of overlay image + image, with overflow
       wrapping around (mod 256).</li>
   <li>SubtractCompositeOp: The result of overlay image - image, with underflow
       wrapping around (mod 256). The add and subtract operators can be used to
       perform reverible transformations.</li>
   <li>DifferenceCompositeOp: The result of abs(overlay image - image). This is
       useful for comparing two very similar images.</li>
   <li>BumpmapCompositeOp: The result image shaded by overlay image.</li>
 </ul>
</xqdoc:description><xqdoc:param>$image base image</xqdoc:param><xqdoc:param>$overlay-image image to overlay.</xqdoc:param><xqdoc:param>$overlay-upper-left-x horizontal position within $image where the left upper edge of the $overlay-image is placed</xqdoc:param><xqdoc:param>$overlay-upper-left-y vertical position within $image where the left upper edge of the $overlay-image is placed</xqdoc:param><xqdoc:param>$operator defines how the overlay image should be overlayed (see details in operator listing above)</xqdoc:param><xqdoc:return>A new image consisting of $image overlayed with $overlay-image.</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:error>err:FORG0001 unsupported operator</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_overlay.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:overlay</xqdoc:name><xqdoc:signature>declare function man:overlay($image as xs:base64Binary, $overlay-image as xs:base64Binary, $overlay-upper-left-x as xs:unsignedInt, $overlay-upper-left-y as xs:unsignedInt, $operator as xs:string) as xs:base64Binary</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>overlay-image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>overlay-upper-left-x</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>overlay-upper-left-y</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>operator</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/image/image</xqdoc:uri><xqdoc:name>compositeOperatorType</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="5"><xqdoc:uri>http://zorba.io/modules/image/manipulation</xqdoc:uri><xqdoc:name>overlay-impl</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="5"><xqdoc:name>man:overlay-impl</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="" namespace="http://www.w3.org/2005/xpath-functions" localname="private" value=""/></xqdoc:annotations><xqdoc:signature>declare %private function man:overlay-impl($image as xs:base64Binary, $overlay-image as xs:base64Binary, $overlay-upper-left-x as xs:unsignedInt, $overlay-upper-left-y as xs:unsignedInt, $operator as image:compositeOperatorType) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>overlay-image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>overlay-upper-left-x</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>overlay-upper-left-y</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>operator</xqdoc:name><xqdoc:type>image:compositeOperatorType</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> <p>Copy a part of a source image as new image.</p>
 <p>The copied part is all right of $upper-left-x and below $upper-left-y.</p>
</xqdoc:description><xqdoc:param>$image source image</xqdoc:param><xqdoc:param>$upper-left-x x position of the upper left corner of the part to copy</xqdoc:param><xqdoc:param>$upper-left-y y position of the upper left corner of the part to copy</xqdoc:param><xqdoc:return>A new image copied from a part of source image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_chop.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:chop</xqdoc:name><xqdoc:signature>declare function man:chop($image as xs:base64Binary, $upper-left-x as xs:unsignedInt, $upper-left-y as xs:unsignedInt) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upper-left-x</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upper-left-y</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> <p>Copy a part of a source image as new image.</p>
 <p>The copied part is all left of $lower-right-x and above $lower-right-y.</p>
</xqdoc:description><xqdoc:param>$image source image</xqdoc:param><xqdoc:param>$lower-right-x x position of the lower right corner of the part to copy</xqdoc:param><xqdoc:param>$lower-right-y y position of the lower right corner of the part to copy</xqdoc:param><xqdoc:return>A new image copied from a part of source image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_crop.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:crop</xqdoc:name><xqdoc:signature>declare function man:crop($image as xs:base64Binary, $lower-right-x as xs:unsignedInt, $lower-right-y as xs:unsignedInt) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lower-right-x</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lower-right-y</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Get a new image as rotated copy of a passed source image (rotated by -360 to
 360 degrees).</p>
 <p>The image is enlarged if this is required for containing the rotated image,
 but never shrunk even if the rotation would make a smaller image possible.</p>
</xqdoc:description><xqdoc:param>$image source image.</xqdoc:param><xqdoc:param>$angle between -360 to 360 degrees. Other values will be adjusted by modulo 360</xqdoc:param><xqdoc:return>A rotated copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_rotate.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:rotate</xqdoc:name><xqdoc:signature>declare function man:rotate($image as xs:base64Binary, $angle as xs:int) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>angle</xqdoc:name><xqdoc:type>xs:int</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Set all pixels of the image to the current backround color.</p>
 <p>In most cases, this will result in all pixels to be set to white.</p>
</xqdoc:description><xqdoc:param>$image image to erase</xqdoc:param><xqdoc:return>A copy of image with all pixels set to the current background color</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_erase.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:erase</xqdoc:name><xqdoc:signature>declare function man:erase($image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Flop an image (horizontal rotation).</p>
</xqdoc:description><xqdoc:param>$image source image</xqdoc:param><xqdoc:return>A horizontally rotated copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_flop.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:flop</xqdoc:name><xqdoc:signature>declare function man:flop($image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Flip an image (vertical rotation).</p>
</xqdoc:description><xqdoc:param>$image source image</xqdoc:param><xqdoc:return>A vertically rotated copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_flip.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:flip</xqdoc:name><xqdoc:signature>declare function man:flip($image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Trim edges of the image's background color from the image.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:return>A trimmed copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_trim.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:trim</xqdoc:name><xqdoc:signature>declare function man:trim($image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Add noise to an image.</p>
 <p/>
 <p>Allowed noise types are:</p>
 <ul>
  <li>UniformNoise</li>
  <li>GaussianNoise</li>
  <li>MultiplicativeGaussianNoise</li>
  <li>ImpulseNoise</li>
  <li>LaplaceianNoise</li>
  <li>PoissonNoise</li>
 </ul>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$noise-type specifies the type of noise to add</xqdoc:param><xqdoc:return>A copy of $image with added noise</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:error>err:FORG0001 unsupported noise type</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_add_noise.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:add-noise</xqdoc:name><xqdoc:signature>declare function man:add-noise($image as xs:base64Binary, $noise-type as xs:string) as xs:base64Binary</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>noise-type</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/image/image</xqdoc:uri><xqdoc:name>noiseType</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://zorba.io/modules/image/manipulation</xqdoc:uri><xqdoc:name>add-noise-impl</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>man:add-noise-impl</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="" namespace="http://www.w3.org/2005/xpath-functions" localname="private" value=""/></xqdoc:annotations><xqdoc:signature>declare %private function man:add-noise-impl($image as xs:base64Binary, $noise-type as image:noiseType) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>noise-type</xqdoc:name><xqdoc:type>image:noiseType</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> <p>Blur an image.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$radius is the radius of the Gaussian in pixels.</xqdoc:param><xqdoc:param>$sigma is the standard deviation of the Laplacian in pixels.</xqdoc:param><xqdoc:return>A blured copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_blur.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:blur</xqdoc:name><xqdoc:signature>declare function man:blur($image as xs:base64Binary, $radius as xs:int, $sigma as xs:int) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>radius</xqdoc:name><xqdoc:type>xs:int</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>sigma</xqdoc:name><xqdoc:type>xs:int</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Despeckle an image.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:return>A despeckled copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_despeckle.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:despeckle</xqdoc:name><xqdoc:signature>declare function man:despeckle($image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Enhance an images (minimizes noise).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:return>An enhanced copy of $image.</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_enhance.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:enhance</xqdoc:name><xqdoc:signature>declare function man:enhance($image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Equalize an images (histogramm equalization).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:return>An equalized copy of $image.</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_equalize.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:equalize</xqdoc:name><xqdoc:signature>declare function man:equalize($image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Highlight edges in an image.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$radius radius of the pixel neighborhood (0 for automatic selection)</xqdoc:param><xqdoc:return>An edged copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_edge.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:edge</xqdoc:name><xqdoc:signature>declare function man:edge($image as xs:base64Binary, $radius as xs:unsignedInt) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>radius</xqdoc:name><xqdoc:type>xs:unsignedInt</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> <p>Apply a charcoal effect to the image (looks like a charcoal sketch).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$radius radius of the Gaussian in pixels</xqdoc:param><xqdoc:param>$sigma standard deviation of the Laplacian in pixels</xqdoc:param><xqdoc:return>A charcoaled copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_charcoal.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:charcoal</xqdoc:name><xqdoc:signature>declare function man:charcoal($image as xs:base64Binary, $radius as xs:double, $sigma as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>radius</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>sigma</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> <p>Emboss an images (highlights edges with 3D effect).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$radius radius of the Gaussian in pixels</xqdoc:param><xqdoc:param>$sigma standard deviation of the Laplacian in pixels</xqdoc:param><xqdoc:return>An embossed copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_emboss.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:emboss</xqdoc:name><xqdoc:signature>declare function man:emboss($image as xs:base64Binary, $radius as xs:double, $sigma as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>radius</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>sigma</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Apply a solarize effect to the image (similar to the effect seen when
 exposing a photographic film to light during the development process).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$factor strength of the solarization (0 to 65535; 65535=100%)</xqdoc:param><xqdoc:return>A solarized copy of $image.</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_solarize.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:solarize</xqdoc:name><xqdoc:signature>declare function man:solarize($image as xs:base64Binary, $factor as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>factor</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Make two passed images appear as stereo image when viewed with red-blue glasses.</p>
 <p>Both images should be same but from a slightly different angle for this to work.</p>
 <p>Both images should have the same size, if not, the size of the left image will
 be taken.</p>
</xqdoc:description><xqdoc:param>$left-image left image for the stereo image.</xqdoc:param><xqdoc:param>$right-image right image for the stereo image.</xqdoc:param><xqdoc:return>A new image as combined stereo image of both source images</xqdoc:return><xqdoc:error>ierr:IM001 one of the passed images is invalid</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_stereo.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:stereo</xqdoc:name><xqdoc:signature>declare function man:stereo($left-image as xs:base64Binary, $right-image as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>left-image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>right-image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Make all pixels of the specfied color transparent.</p>
 <p/>
 <p>This works correctly only with image types supporting transparency
 (e.g GIF or PNG).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$color color to make transparent (e.g. '#FFFFFF')</xqdoc:param><xqdoc:return>A copy of $image with the specified color made transparent.</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:error>err:FORG0001 unsupported color</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_transparent.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:transparent</xqdoc:name><xqdoc:signature>declare function man:transparent($image as xs:base64Binary, $color as xs:string) as xs:base64Binary</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>color</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/image/image</xqdoc:uri><xqdoc:name>colorType</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://zorba.io/modules/image/manipulation</xqdoc:uri><xqdoc:name>transparent-impl</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>man:transparent-impl</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="" namespace="http://www.w3.org/2005/xpath-functions" localname="private" value=""/></xqdoc:annotations><xqdoc:signature>declare %private function man:transparent-impl($image as xs:base64Binary, $color as image:colorType) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>color</xqdoc:name><xqdoc:type>image:colorType</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Swirl an image (image pixels are rotated by degree).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$degree degree to swirl image pixels</xqdoc:param><xqdoc:return>A swirled copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_swirl.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:swirl</xqdoc:name><xqdoc:signature>declare function man:swirl($image as xs:base64Binary, $degree as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>degree</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Reduce noise of an image using a noise peak elemination filter.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$order defines how much the noise is reduced</xqdoc:param><xqdoc:return>A copy of $image with reduced noise</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_reduce_noise.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:reduce-noise</xqdoc:name><xqdoc:signature>declare function man:reduce-noise($image as xs:base64Binary, $order as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>order</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Contrast an image (enhances image intensity differences) by a given value.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$sharpen defines how much the image is contrasted.</xqdoc:param><xqdoc:return>A contrasted copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_contrast.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:contrast</xqdoc:name><xqdoc:signature>declare function man:contrast($image as xs:base64Binary, $sharpen as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>sharpen</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Gamma correct an image.</p>
 <p>Gamma values less than zero will erase the image.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$gamma-value value for which to gamma correct the image</xqdoc:param><xqdoc:return>A gamma corrected copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_gamma.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:gamma</xqdoc:name><xqdoc:signature>declare function man:gamma($image as xs:base64Binary, $gamma-value as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>gamma-value</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description> <p>Gamma correct an image for every color channel seperately.</p>
 <p>Gamma values less than zero for any color will erase the corresponding color.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$gamma-red value to gamma correct the red channel of the image</xqdoc:param><xqdoc:param>$gamma-green value to gamma correct the green channel of the image</xqdoc:param><xqdoc:param>$gamma-blue value to gamma correct the blue channel of the image</xqdoc:param><xqdoc:return>A gamma corrected copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_gamma2.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:gamma</xqdoc:name><xqdoc:signature>declare function man:gamma($image as xs:base64Binary, $gamma-red as xs:double, $gamma-green as xs:double, $gamma-blue as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>gamma-red</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>gamma-green</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>gamma-blue</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Apply an implode effect to an image (a sort of special effect).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$factor factor to implode to</xqdoc:param><xqdoc:return>An imploded copy of $image.</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_implode.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:implode</xqdoc:name><xqdoc:signature>declare function man:implode($image as xs:base64Binary, $factor as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>factor</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Apply an oil paint effect to an image (makes the image look as if it was
 an oil paint).</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$radius radius with which to oil paint</xqdoc:param><xqdoc:return>A oil-painted copy of $image</xqdoc:return><xqdoc:error>ierr:INVALID_IMAGE the passed image is invalid.</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_oil_paint.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:oil-paint</xqdoc:name><xqdoc:signature>declare function man:oil-paint($image as xs:base64Binary, $radius as xs:double) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>radius</xqdoc:name><xqdoc:type>xs:double</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Add a $watermark image to $image.</p>
</xqdoc:description><xqdoc:param>$image the source image</xqdoc:param><xqdoc:param>$watermark the watermark image</xqdoc:param><xqdoc:return>A watermarked copy of $image</xqdoc:return><xqdoc:error>ierr:IM001 one of the passed images is invalid</xqdoc:error><xqdoc:custom tag="example">test/Queries/image/manipulation_watermark.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>man:watermark</xqdoc:name><xqdoc:signature>declare function man:watermark($image as xs:base64Binary, $watermark as xs:base64Binary) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>image</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>watermark</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>