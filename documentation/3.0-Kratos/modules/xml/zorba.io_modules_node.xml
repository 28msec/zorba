<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://zorba.io/modules/node</xqdoc:uri><xqdoc:name>node</xqdoc:name><xqdoc:comment><xqdoc:description> This module defines a set of function which can be used
 to determine (1) the relationship between two nodes (e.g. if one
 is the ancestor if another) and (2) properties of given
 nodes (e.g. their level in the tree).
 The same functionality can be achieved with simple XPath expressions.
 However, please note that using the functions in this modules instead
 of path expressions guarantees better performance.
</xqdoc:description><xqdoc:author>Matthias Brantner</xqdoc:author><xqdoc:custom tag="project">Zorba/XML and JSON Data Model/Node/Node</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">1.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="node" uri="http://zorba.io/modules/node" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports/><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is an
 ancestor of the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential descendant</xqdoc:param><xqdoc:param>$node2 the potential ancestor</xqdoc:param><xqdoc:return>true if $node2 is an ancestor of $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:ancestor-of</xqdoc:name><xqdoc:signature>declare function node:ancestor-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is a
 descendant of the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential ancestor</xqdoc:param><xqdoc:param>$node2 the potential descendant</xqdoc:param><xqdoc:return>true if $node2 is a descendant of $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:descendant-of</xqdoc:name><xqdoc:signature>declare function node:descendant-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is a
 parent of the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential child</xqdoc:param><xqdoc:param>$node2 the potential parent</xqdoc:param><xqdoc:return>true if $node2 is a parent of $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:parent-of</xqdoc:name><xqdoc:signature>declare function node:parent-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is a
 child of the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential parent</xqdoc:param><xqdoc:param>$node2 the potential child</xqdoc:param><xqdoc:return>true if $node2 is a child of $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:child-of</xqdoc:name><xqdoc:signature>declare function node:child-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is a
 following-sibling of the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential preceding-sibling</xqdoc:param><xqdoc:param>$node2 the potential following-sibling</xqdoc:param><xqdoc:return>true if $node2 is a following-sibling of $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:following-sibling-of</xqdoc:name><xqdoc:signature>declare function node:following-sibling-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is a
 preceding-sibling of the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential following-sibling</xqdoc:param><xqdoc:param>$node2 the potential preceding-sibling</xqdoc:param><xqdoc:return>true if $node2 is a preceding-sibling of $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:preceding-sibling-of</xqdoc:name><xqdoc:signature>declare function node:preceding-sibling-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is
 following the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential preceding node</xqdoc:param><xqdoc:param>$node2 the potential following node</xqdoc:param><xqdoc:return>true if $node2 is following the node $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:following-of</xqdoc:name><xqdoc:signature>declare function node:following-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Determines whether the node given as second argument is
 preceding the node given as first argument.
</xqdoc:description><xqdoc:param>$node1 the potential following node</xqdoc:param><xqdoc:param>$node2 the potential preceding node</xqdoc:param><xqdoc:return>true if $node2 is preceding the node $node1; false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>node:preceding-of</xqdoc:name><xqdoc:signature>declare function node:preceding-of($node1 as node(), $node2 as node()) as xs:boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> Computes the level of a given node in the tree.
 Note: The first level has the number one.
</xqdoc:description><xqdoc:param>$node the node for which the level should be computed</xqdoc:param><xqdoc:return>The level as xs:integer of the given node in the tree.</xqdoc:return></xqdoc:comment><xqdoc:name>node:level</xqdoc:name><xqdoc:signature>declare function node:level($node as node()) as xs:integer external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:integer</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Computes the least common ancestor of two given nodes in
 the tree.
</xqdoc:description><xqdoc:param>$node1 the first node</xqdoc:param><xqdoc:param>$node2 the second node</xqdoc:param><xqdoc:return>the least common ancestor of the two given nodes or the empty sequence if the two nodes are not part of the same tree.</xqdoc:return></xqdoc:comment><xqdoc:name>node:least-common-ancestor</xqdoc:name><xqdoc:signature>declare function node:least-common-ancestor($node1 as node(), $node2 as node()) as node()? external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>node1</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>node2</xqdoc:name><xqdoc:type>node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">node()?</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> Return a deep copy of every given node according to the properties
 specified in the static context of the invoking module.<p/>
 Please note that a copy of a node is parentless.
</xqdoc:description><xqdoc:param>$input the node to copy</xqdoc:param><xqdoc:return>a deep copy of every node in the input sequence or the empty sequence if $input is the empty sequence.</xqdoc:return></xqdoc:comment><xqdoc:name>node:copy</xqdoc:name><xqdoc:signature>declare function node:copy($input as node()*) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>input</xqdoc:name><xqdoc:type occurrence="*">node()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>