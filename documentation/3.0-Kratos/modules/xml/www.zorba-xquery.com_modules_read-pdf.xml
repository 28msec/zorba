<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://www.zorba-xquery.com/modules/read-pdf</xqdoc:uri><xqdoc:name>read-pdf</xqdoc:name><xqdoc:comment><xqdoc:description> This module provides funtionality to read the text from PDF documents and
 to render PDF documents to images.
 <a href="http://pdfbox.apache.org">Apache PDFBox</a> library is used to
 implement these functions.
 <br/>
 <br/>
 <br/><b>Note:</b> Since this module has a Java library dependency a JVM required
 to be installed on the system. For Windows: jvm.dll is required on the system
 path ( usually located in "C:\Program Files\Java\jre6\bin\client".
 <br/><b>Note:</b> For Debian based Linux distributions install PdfBox and its dependencies:
 sudo apt-get install libpdfbox-java libfontbox-java libjempbox-java libcommons-logging-java .
 For Windows use PDFBOX_HOME environment variable.
</xqdoc:description><xqdoc:author>Cezar Andrei</xqdoc:author><xqdoc:see>http://pdfbox.apache.org/</xqdoc:see><xqdoc:custom tag="library"><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK - Java Development Kit</a></xqdoc:custom><xqdoc:custom tag="library"><a href="http://pdfbox.apache.org/">Apache PDFBox</a></xqdoc:custom><xqdoc:custom tag="project">Zorba/Data Processing/PDF Reader</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">3.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors" isSchema="false"/><xqdoc:namespace prefix="read-pdf" uri="http://www.zorba-xquery.com/modules/read-pdf" isSchema="false"/><xqdoc:namespace prefix="rp-options" uri="http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options" isSchema="true"/><xqdoc:namespace prefix="sch" uri="http://zorba.io/modules/schema" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports><xqdoc:import type="schema"><xqdoc:uri>http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>http://zorba.io/modules/schema</xqdoc:uri><xqdoc:comment><xqdoc:description> Import module for checking if options element is validated.
</xqdoc:description></xqdoc:comment></xqdoc:import></xqdoc:imports><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Extracts the text of the input pdf.
 <br/>
 Please consult the
 <a href="http://pdfbox.apache.org/">official PDFBox documentation for further
 information</a>.
 <br/>
 Example:<pre class="ace-static" ace-mode="xquery">
  import module namespace read-pdf = "http://www.zorba-xquery.com/modules/read-pdf";
  import module namespace file = "http://expath.org/ns/file";
  declare namespace rpo =
      "http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options";
  let $pdf := file:read-binary("path/to/my.pdf")
  let $options  :=
     <rpo:extract-text-options xmlns:rpo="http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options">
       <rpo:text-kind>simple</rpo:text-kind>
       <rpo:start-page>2</rpo:start-page>
       <rpo:end-page>3</rpo:end-page>
       <rpo:password>decription_password</rpo:password>
       <rpo:ignore-corrupt-objects>false</rpo:ignore-corrupt-objects>
       <rpo:ignore-beads>false</rpo:ignore-beads>
       <rpo:start-page-separator>---start-page-separator---</rpo:start-page-separator>
       <rpo:end-page-separator>---end-page-separator---</rpo:end-page-separator>
     </rpo:extract-text-options>
  return
      read-pdf:extract-text($pdf, $options)
 </pre>
 <br/>
</xqdoc:description><xqdoc:param>$pdf The input PDF instance as xs:base64Binary</xqdoc:param><xqdoc:param>$options Options:<br/> <ul> <li>text-kind: string (default html) html: format output as HTML, simple: plain text.</li> <li>start-page: int (default 1) Which page to start with.</li> <li>end-page: int (default last document page) Which page to end with.</li> <li>password: string The decription password. Optional if PDF is password protected. </li> <li>ignore-corrupt-objects: boolean (default false) If true try recoved in case of corrupt objects, othewise exit with error.</li> <li>ignore-beads: boolean (default false) If true disables the separation by beads.</li> <li>start-page-separator: string The optional separator at every start page. </li> <li>end-page-separator: string The optional separator at every end page. </li> </ul></xqdoc:param><xqdoc:return>The text contained in the PDF document.</xqdoc:return><xqdoc:error>read-pdf:VM001 If Zorba was unable to start the JVM.</xqdoc:error><xqdoc:error>read-pdf:JAVA-EXCEPTION If Apache PDFBox throws an exception.</xqdoc:error><xqdoc:custom tag="example">test/Queries/read-pdf/extractText-simple.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/extractText-html.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/extractText-text.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/extractText-pageDelim.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/extractText-badOpt.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/extractText-badPdf.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>read-pdf:extract-text</xqdoc:name><xqdoc:signature>declare function read-pdf:extract-text($pdf as xs:base64Binary, $options as element(rp-options:extract-text-options)?) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>pdf</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type occurrence="?">element(rp-options:extract-text-options)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>empty</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.zorba-xquery.com/modules/read-pdf</xqdoc:uri><xqdoc:name>extract-text-internal</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/schema</xqdoc:uri><xqdoc:name>is-validated</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>read-pdf:extract-text-internal</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="" namespace="http://www.w3.org/2005/xpath-functions" localname="private" value=""/></xqdoc:annotations><xqdoc:signature>declare %private function read-pdf:extract-text-internal($pdf as xs:base64Binary, $options as element(rp-options:extract-text-options,rp-options:extract-text-optionsType)?) as xs:string external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>pdf</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type occurrence="?">element(rp-options:extract-text-options,rp-options:extract-text-optionsType)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Renders each page of the PDF document as an image.
 <br/>
 Please consult the
 <a href="http://pdfbox.apache.org/">official PDFBox documentation for further
 information</a>.
 <br/>
 Example:<pre class="ace-static" ace-mode="xquery">
  import module namespace read-pdf = "http://www.zorba-xquery.com/modules/read-pdf";
  import module namespace file = "http://expath.org/ns/file";
  declare namespace rpo =
      "http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options";
  let $pdf := file:read-binary("path/to/my.pdf")
  let $options  :=
     <rpo:render-to-images-options xmlns:rpo="http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options">
       <rpo:image-kind>jpg</rpo:image-kind>
       <rpo:start-page>2</rpo:start-page>
       <rpo:end-page>3</rpo:end-page>
       <rpo:password>decription_password</rpo:password>
     </rpo:render-to-images-options>
  let $imgs := read-pdf:render-to-images($pdf, $options)
  for $img at $pos in $imgs
  return
  {
    file:write-binary("img-page" || $pos || ".jpg", $img);
    $pos
  }
 </pre>
 <br/>
</xqdoc:description><xqdoc:param>$pdf The input PDF instance as xs:base64Binary</xqdoc:param><xqdoc:param>$options Options:<br/> <ul> <li>image-kind: string (default jpg) Image type encoding. Supported encodings: jpg, png.</li> <li>start-page: int (default 1) Which page to start with.</li> <li>end-page: int (default last document page) Which page to end with.</li> <li>password: string The decription password. Optional if PDF is password protected. </li> </ul></xqdoc:param><xqdoc:return>The rendered pages in the PDF document, as images.</xqdoc:return><xqdoc:error>read-pdf:VM001 If Zorba was unable to start the JVM.</xqdoc:error><xqdoc:error>read-pdf:JAVA-EXCEPTION If Apache PDFBox throws an exception.</xqdoc:error><xqdoc:custom tag="example">test/Queries/read-pdf/render-simple.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/render-jpg.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/render-png.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/render-badOpt.xq</xqdoc:custom><xqdoc:custom tag="example">test/Queries/read-pdf/render-badPdf.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>read-pdf:render-to-images</xqdoc:name><xqdoc:signature>declare function read-pdf:render-to-images($pdf as xs:base64Binary, $options as element(rp-options:render-to-images-options)?) as xs:base64Binary*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>pdf</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type occurrence="?">element(rp-options:render-to-images-options)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:base64Binary*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>empty</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.zorba-xquery.com/modules/read-pdf</xqdoc:uri><xqdoc:name>render-to-images-internal</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/schema</xqdoc:uri><xqdoc:name>is-validated</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>read-pdf:render-to-images-internal</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="" namespace="http://www.w3.org/2005/xpath-functions" localname="private" value=""/></xqdoc:annotations><xqdoc:signature>declare %private function read-pdf:render-to-images-internal($pdf as xs:base64Binary, $options as element(rp-options:render-to-images-options,rp-options:render-to-images-optionsType)?) as xs:base64Binary* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>pdf</xqdoc:name><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type occurrence="?">element(rp-options:render-to-images-options,rp-options:render-to-images-optionsType)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:base64Binary*</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>