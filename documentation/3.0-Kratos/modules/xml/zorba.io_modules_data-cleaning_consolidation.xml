<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://zorba.io/modules/data-cleaning/consolidation</xqdoc:uri><xqdoc:name>consolidation</xqdoc:name><xqdoc:comment><xqdoc:description> <p>This library module provides data consolidation functions that generally take as input a sequence of XML nodes
 and apply some rule in order do decide which node is better suited to represent the entire sequence.</p>
 <p/>
 <p>The logic contained in this module is not specific to any particular XQuery implementation,
 although the consolidation functions based on matching sequences against XPath expressions require
 some form of dynamic evaluation for XPath expressions.</p>
</xqdoc:description><xqdoc:author>Bruno Martins</xqdoc:author><xqdoc:custom tag="project">Zorba/Data Cleaning/Consolidation</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">1.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="con" uri="http://zorba.io/modules/data-cleaning/consolidation" isSchema="false"/><xqdoc:namespace prefix="set" uri="http://zorba.io/modules/data-cleaning/set-similarity" isSchema="false"/><xqdoc:namespace prefix="simc" uri="http://zorba.io/modules/data-cleaning/character-based-string-similarity" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri></xqdoc:import><xqdoc:import type="library"><xqdoc:uri>http://zorba.io/modules/data-cleaning/character-based-string-similarity</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single most frequent node in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, returns the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-frequent( ( "a", "a", "b") )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">("a")</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The most frequent node in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-frequent.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-frequent</xqdoc:name><xqdoc:signature>declare function con:most-frequent($s) as item()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>deep-equal</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single less frequent node in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">least-frequent( ( "a", "a", "b") )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">("b")</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The least frequent node in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/leastfrequent_1.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-frequent</xqdoc:name><xqdoc:signature>declare function con:least-frequent($s) as item()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>item()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>deep-equal</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single longest string, in terms of the number of characters, in a sequence of strings provided as input.</p>
 <p>If more then one answer is possible, return the first string according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">con:longest( ( "a", "aa", "aaa") )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">("aaa")</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:return>The longest string in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/longest_1.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:longest</xqdoc:name><xqdoc:signature>declare function con:longest($s as xs:string*) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string?</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string-length</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single shortest string, in terms of the number of characters, in a sequence of strings provided as input.</p>
 <p>If more then one answer is possible, return the first string according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">shortest( ( "a", "aa", "aaa") )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">("a")</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:return>The shortest string in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/shortest_1.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:shortest</xqdoc:name><xqdoc:signature>declare function con:shortest($s as xs:string*) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string?</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>string-length</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the single longest string, in terms of the number of tokens, in a sequence of strings provided as input.</p>
 <p>If more then one answer is possible, return the first string according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-tokens( ( "a b c", "a b", "a"), " +" )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">("a b c")</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:param>$r A regular expression forming the delimiter character(s) which mark the boundaries between adjacent tokens.</xqdoc:param><xqdoc:return>The longest string in the input sequence, in terms of the number of tokens.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-tokens.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-tokens</xqdoc:name><xqdoc:signature>declare function con:most-tokens($s as xs:string*, $r as xs:string) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>r</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string?</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>tokenize</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the single shortest string, in terms of the number of tokens, in a sequence of strings provided as input.</p>
 <p>If more then one answer is possible, return the first string according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">least-tokens( ( "a b c", "a b", "a"), " +" )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">("a")</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:param>$r A regular expression forming the delimiter character(s) which mark the boundaries between adjacent tokens.</xqdoc:param><xqdoc:return>The shortest string in the input sequence, in terms of the number of tokens.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-tokens.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-tokens</xqdoc:name><xqdoc:signature>declare function con:least-tokens($s as xs:string*, $r as xs:string) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>r</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string?</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>tokenize</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the strings from an input sequence of strings that match a particular regular expression.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">matching( ( "a A b", "c AAA d", "e BB f"), "A+" )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">( "a A b", "c AAA d")</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:param>$r The regular expression to be used in the matching.</xqdoc:param><xqdoc:return>The strings in the input sequence that match the input regular expression.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/matching_1.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:matching</xqdoc:name><xqdoc:signature>declare function con:matching($s as xs:string*, $r as xs:string) as xs:string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>r</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:string*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>matches</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single string, from an input sequence of strings, that appears more frequently as part
 of the other strings in the sequence. If no such string exists, the function returns an empty sequence.</p>
 <p>If more then one answer is possible, the function returns the first string according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">super-string( ( "aaa bbb ccc", "aaa bbb", "aaa ddd", "eee fff" ) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">( "aaa bbb" )</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:return>The string that appears more frequently as part of the other strings in the sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/superstring_1.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:superstring</xqdoc:name><xqdoc:signature>declare function con:superstring($s as xs:string*) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string?</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>contains</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the single most similar string, in terms of the edit distance metric towards an input string,
 in a sequence of strings provided as input. If more than one string has a maximum similarity (a minimum
 value for the edit distance metric), the function return the first string according to the order of the
 input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-similar-edit-distance( ( "aaabbbccc", "aaabbb", "eeefff" ), "aaab" )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">( "aaabbb" )</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:param>$m The string towards which we want to measure the edit distance.</xqdoc:param><xqdoc:return>The most similar string in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-similar-edit-distance.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-similar-edit-distance</xqdoc:name><xqdoc:signature>declare function con:most-similar-edit-distance($s as xs:string*, $m as xs:string) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>m</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string?</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://zorba.io/modules/data-cleaning/character-based-string-similarity</xqdoc:uri><xqdoc:name>edit-distance</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the single least similar string, in terms of the edit distance metric towards an input string,
 in a sequence of strings provided as input. If more than one string has a minimum similarity (a maximum
 value for the edit distance metric), return the first string according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">least-similar-edit-distance( ( "aaabbbccc", "aaabbb", "eeefff" ), "aaab" )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">( "eeefff" )</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of strings.</xqdoc:param><xqdoc:param>$m The string towards which we want to measure the edit distance.</xqdoc:param><xqdoc:return>The least similar string in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-similar-edit-distance.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-similar-edit-distance</xqdoc:name><xqdoc:signature>declare function con:least-similar-edit-distance($s as xs:string*, $m as xs:string) as xs:string?</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>m</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">xs:string?</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="2"><xqdoc:uri>http://zorba.io/modules/data-cleaning/character-based-string-similarity</xqdoc:uri><xqdoc:name>edit-distance</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the largest number of descending elements (sub-elements at any given depth)
 in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-elements( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;a/&gt;, &lt;b/&gt;) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;a&gt;&lt;b/&gt;&lt;/a&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the largest number of descending elements in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-elements.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-elements</xqdoc:name><xqdoc:signature>declare function con:most-elements($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the largest number of descending attributes (attributes at any given depth)
 in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-attributes( ( &lt;a att1="a1" att2="a2"/&gt;, &lt;b att1="a1" /&gt;, &lt;c/&gt; ) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;a att1="a1" att2="a2"/&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the largest number of descending attributes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-attributes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-attributes</xqdoc:name><xqdoc:signature>declare function con:most-attributes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the largest number of descending nodes (sub-nodes at any given depth) in a
 sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;a/&gt;, &lt;b/&gt;) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;a&gt;&lt;b/&gt;&lt;/a&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the largest number of descending nodes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-nodes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-nodes</xqdoc:name><xqdoc:signature>declare function con:most-nodes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the smallest number of descending elements (sub-elements at any given depth)
 in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">least-elements( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;d/&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the smallest number of descending elements in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-elements.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-elements</xqdoc:name><xqdoc:signature>declare function con:least-elements($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the smallest number of descending attributes (attributes at any given depth)
 in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">least-attributes( ( &lt;a att1="a1" att2="a2"/&gt;, &lt;b att1="a1" /&gt;, &lt;c/&gt; ) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;c/&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the smallest number of descending attributes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-attributes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-attributes</xqdoc:name><xqdoc:signature>declare function con:least-attributes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the smallest number of descending nodes (sub-nodes at any given depth)
 in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">least-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;d/&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the smallest number of descending nodes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-nodes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-nodes</xqdoc:name><xqdoc:signature>declare function con:least-nodes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the largest number of distinct descending elements (sub-elements at any
 given depth) in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-distinct-elements( ( &lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;d/&gt;&lt;/a&gt;, &lt;a&gt;&lt;b/&gt;&lt;b/&gt;&lt;c/&gt;&lt;/a&gt;, &lt;a/&gt; ) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;d/&gt;&lt;/a&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the largest number of distinct descending elements in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-distinct-elements.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-distinct-elements</xqdoc:name><xqdoc:signature>declare function con:most-distinct-elements($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the largest number of distinct descending attributes (attributes at any
 given depth) in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-distinct-attributes( ( &lt;a att1="a1" att2="a2" att3="a3"/&gt;, &lt;a att1="a1" att2="a2"&gt;&lt;b att2="a2" /&gt;&lt;/a&gt;, &lt;c/&gt; ) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;a att1="a1" att2="a2" att3="a3"/&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the largest number of distinct descending attributes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-distinct-attributes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-distinct-attributes</xqdoc:name><xqdoc:signature>declare function con:most-distinct-attributes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the largest number of distinct descending nodes (sub-nodes at any given depth) in
 a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery">most-distinct-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;a&gt;&lt;a/&gt;&lt;/a&gt;, &lt;b/&gt;) )</pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery">(&lt;a&gt;&lt;b/&gt;&lt;/a&gt;)</pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the largest number of distinct descending nodes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/most-distinct-nodes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:most-distinct-nodes</xqdoc:name><xqdoc:signature>declare function con:most-distinct-nodes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the smallest number of distinct descending elements (sub-elements at any
 given depth) in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> least-distinct-elements( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> (&lt;d/&gt;) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the smallest number of distinct descending elements in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-distinct-elements.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-distinct-elements</xqdoc:name><xqdoc:signature>declare function con:least-distinct-elements($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the smallest number of distinct descending attributes (attributes at any
 given depth) in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> least-distinct-attributes( ( &lt;a att1="a1" att2="a2"/&gt;, &lt;b att1="a1" /&gt;, &lt;c/&gt; ) ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> (&lt;c/&gt;) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the smallest number of distinct descending attributes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-distinct-attributes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-distinct-attributes</xqdoc:name><xqdoc:signature>declare function con:least-distinct-attributes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the single node having the smallest number of distinct descending nodes (sub-nodes at any given depth)
 in a sequence of nodes provided as input.</p>
 <p>If more then one answer is possible, return the first node according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> least-distinct-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> (&lt;d/&gt;) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of nodes.</xqdoc:param><xqdoc:return>The node having the smallest number of distinct descending nodes in the input sequence.</xqdoc:return><xqdoc:custom tag="example">test/Queries/data-cleaning/consolidation/least-distinct-nodes.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>con:least-distinct-nodes</xqdoc:name><xqdoc:signature>declare function con:least-distinct-nodes($s) as element(*)</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(*)</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>count</xqdoc:name></xqdoc:invoked><xqdoc:invoked arity="1"><xqdoc:uri>http://zorba.io/modules/data-cleaning/set-similarity</xqdoc:uri><xqdoc:name>distinct</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the elements from an input sequence of elements that, when matched to a given set of XPath expressions,
 produce a non-empty set of nodes in all the cases.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> all-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;c&gt;&lt;d/&gt;&lt;/c&gt;, &lt;d/&gt;), (".//b") ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> (&lt;a&gt;&lt;b/&gt;&lt;/a&gt;) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of elements.</xqdoc:param><xqdoc:param>$paths A sequence of strings denoting XPath expressions.</xqdoc:param><xqdoc:return>The elements that, when matched to the given set of XPath expressions, always return a non-empty set of nodes.</xqdoc:return></xqdoc:comment><xqdoc:name>con:all-xpaths</xqdoc:name><xqdoc:signature>declare function con:all-xpaths($s as element(*)*, $paths as xs:string*) as element(*)*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>paths</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the elements from a sequence of elements that, when matched to a given set of XPath expressions,
 produce a non-empty set of nodes for some of the cases.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> some-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;d&gt;&lt;c/&gt;&lt;/d&gt;, &lt;d/&gt;), (".//b", ".//c") ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt; , &lt;d&gt;&lt;c/&gt;&lt;/d&gt; ) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of elements.</xqdoc:param><xqdoc:param>$paths A sequence of strings denoting XPath expressions.</xqdoc:param><xqdoc:return>The elements that, when matched to the given set of XPath expressions, return a non-empty set of nodes for at least one of the cases.</xqdoc:return></xqdoc:comment><xqdoc:name>con:some-xpaths</xqdoc:name><xqdoc:signature>declare function con:some-xpaths($s as element(*)*, $paths as xs:string*) as element(*)*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>paths</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the single element from an input sequence of elements that matches the largest number of
 XPath expressions from a given set, producing a non-empty set of nodes.</p>
 <p>If more then one answer is possible, return the first element according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> most-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;d&gt;&lt;c/&gt;&lt;b/&gt;&lt;/d&gt;, &lt;d/&gt;) , (".//b", ".//c") ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> ( &lt;d&gt;&lt;c/&gt;&lt;b/&gt;&lt;/d&gt; ) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of elements.</xqdoc:param><xqdoc:param>$paths A sequence of strings denoting XPath expressions.</xqdoc:param><xqdoc:return>The element that matches the largest number of XPath expressions producing a non-empty set of nodes.</xqdoc:return></xqdoc:comment><xqdoc:name>con:most-xpaths</xqdoc:name><xqdoc:signature>declare function con:most-xpaths($s as element(*)*, $paths as xs:string*) as element(*)*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>paths</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the single element from an input sequence of elements that matches the smallest number of
 XPath expressions from a given set, producing a non-empty set of nodes.</p>
 <p>If more then one answer is possible, return the first element according to the order of the input sequence.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> least-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;d&gt;&lt;c/&gt;&lt;b/&gt;&lt;/d&gt;, &lt;d/&gt;) , (".//b", ".//c") ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> ( $lt;d/&gt; ) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of elements.</xqdoc:param><xqdoc:param>$paths A sequence of strings denoting XPath expressions.</xqdoc:param><xqdoc:return>The element that matches the smallest number of XPath expressions producing a non-empty set of nodes.</xqdoc:return></xqdoc:comment><xqdoc:name>con:least-xpaths</xqdoc:name><xqdoc:signature>declare function con:least-xpaths($s as element(*)*, $paths as xs:string*) as element(*)*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>paths</xqdoc:name><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Returns the nodes from an input sequence of nodes that validate against a given XML Schema.</p>
 <p/>
 <p>Example usage : <pre class="ace-static" ace-mode="xquery"> validating-schema ( ( &lt;a/&gt; , &lt;b/&gt; ), &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&lt;xs:element name="a" /&gt;&lt;/xs:schema&gt; ) </pre></p>
 <p/>
 <p>The function invocation in the example above returns : <pre class="ace-static" ace-mode="xquery"> ( &lt;a/&gt; ) </pre></p>
</xqdoc:description><xqdoc:param>$s A sequence of elements.</xqdoc:param><xqdoc:param>$schema An element encoding an XML Schema.</xqdoc:param><xqdoc:return>The nodes that validate against the XML Schema. <b> Attention : This function is still not implemented. </b></xqdoc:return></xqdoc:comment><xqdoc:name>con:validating-schema</xqdoc:name><xqdoc:signature>declare function con:validating-schema($s as element(*)*, $schema as element(*)) as element(*)*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>s</xqdoc:name><xqdoc:type occurrence="*">element(*)</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>schema</xqdoc:name><xqdoc:type>element(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(*)*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="0"><xqdoc:uri>http://www.w3.org/2005/xpath-functions</xqdoc:uri><xqdoc:name>false</xqdoc:name></xqdoc:invoked></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>