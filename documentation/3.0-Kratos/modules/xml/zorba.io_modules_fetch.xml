<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://zorba.io/modules/fetch</xqdoc:uri><xqdoc:name>fetch</xqdoc:name><xqdoc:comment><xqdoc:description> <p>This module provides functions to fetch the content of a resource identified
 by a URI. For example, it fetches the content of file or http resources.</p>
 <p>In order to retrieve such content, the functions use the
 URI resolution and URL resolver process as documented at
 <a href="http://zorba.io/documentation/latest/zorba/architecture/uriresolvers">
 URI Resolvers</a>.</p>
</xqdoc:description><xqdoc:author>Matthias Brantner</xqdoc:author><xqdoc:custom tag="project">Zorba/Input Output/Fetch</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">3.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="an" uri="http://zorba.io/annotations" isSchema="false"/><xqdoc:namespace prefix="fetch" uri="http://zorba.io/modules/fetch" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/><xqdoc:namespace prefix="zerr" uri="http://zorba.io/errors" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports/><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Tries to fetch the resource referred to by the given URI.</p>
 <p>It queries all URI mappers and resolvers with kind
 <tt>EntityData::SOME_CONTENT</tt>.</p>
 <p>The content is assumed to be UTF-8 encoded.</p>
</xqdoc:description><xqdoc:param>$uri the resource to fetch.</xqdoc:param><xqdoc:return>the resource referred to by the given URI as streamble string.</xqdoc:return><xqdoc:error>uri:URI_UNRESOLVED_OR_NOSTREAM if the URI could not be resolved or did not resolve to a <tt>StreamResource</tt>.</xqdoc:error><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/architecture/uriresolvers">URI Resolvers</a>.</xqdoc:see><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/specifications/options_and_annotations">Documentation of Zorba's annotations</a>.</xqdoc:see></xqdoc:comment><xqdoc:name>fetch:content</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="streamable" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:streamable function fetch:content($uri as xs:string) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://zorba.io/modules/fetch</xqdoc:uri><xqdoc:name>content</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Tries to fetch the resource referred to by the given URI.</p>
 <p>It queries all URI mappers and resolvers with kind the specified
 entity kind.</p>
 <p>The content is assumed to be UTF-8 encoded.</p>
</xqdoc:description><xqdoc:param>$uri the resource to fetch.</xqdoc:param><xqdoc:param>$entity-kind the kind of resource to fetch.</xqdoc:param><xqdoc:return>the resource referred to by the given URI as streamble string.</xqdoc:return><xqdoc:error>uri:URI_NOT_RESOLVED_OR_NOSTREAM if the URI could not be resolved or did not resolve to a <tt>StreamResource</tt>.</xqdoc:error><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/architecture/uriresolvers">URI Resolvers</a>.</xqdoc:see><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/specifications/options_and_annotations">Documentation of Zorba's annotations</a>.</xqdoc:see></xqdoc:comment><xqdoc:name>fetch:content</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="streamable" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:streamable function fetch:content($uri as xs:string, $entity-kind as xs:string) as xs:string</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>entity-kind</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://zorba.io/modules/fetch</xqdoc:uri><xqdoc:name>content</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> <p>Tries to fetch the resource referred to by the given URI.</p>
 <p>It queries all URI mappers and resolvers with kind the specified
 entity kind.</p>
</xqdoc:description><xqdoc:param>$uri the resource to fetch.</xqdoc:param><xqdoc:param>$entity-kind the kind of resource to fetch.</xqdoc:param><xqdoc:param>$encoding the encoding of the content</xqdoc:param><xqdoc:return>the resource referred to by the given URI as streamble string.</xqdoc:return><xqdoc:error>uri:URI_UNRESOLVED_OR_NOSTREAM if the URI could not be resolved or did not resolve to a <tt>StreamResource</tt>.</xqdoc:error><xqdoc:error>uri:CHARSET_UNKNOWN if the given encoding is invalid or not supported.</xqdoc:error><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/architecture/uriresolvers">URI Resolvers</a>.</xqdoc:see><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/specifications/options_and_annotations">Documentation of Zorba's annotations</a>.</xqdoc:see></xqdoc:comment><xqdoc:name>fetch:content</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="streamable" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:streamable function fetch:content($uri as xs:string, $entity-kind as xs:string, $encoding as xs:string) as xs:string external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>entity-kind</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>encoding</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Tries to fetch the resource referred to by the given URI and
 returning it as base64Binary.</p>
 <p>It queries all URI mappers and resolvers with kind
 <tt>EntityData::SOME_CONTENT</tt>.</p>
</xqdoc:description><xqdoc:param>$uri the resource to fetch.</xqdoc:param><xqdoc:return>the resource referred to by the given URI as streamble base64Binary.</xqdoc:return><xqdoc:error>uri:URI_UNRESOLVED_OR_NOSTREAM if the URI could not be resolved or did not resolve to a <tt>StreamResource</tt>.</xqdoc:error></xqdoc:comment><xqdoc:name>fetch:content-binary</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="streamable" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:streamable function fetch:content-binary($uri as xs:string) as xs:base64Binary</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://zorba.io/modules/fetch</xqdoc:uri><xqdoc:name>content-binary</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> <p>Tries to fetch the resource referred to by the given URI and
 returning it as base64Binary.</p>
 <p>It queries all URI mappers and resolvers with kind the specified
 entity kind.</p>
</xqdoc:description><xqdoc:param>$uri the resource to fetch.</xqdoc:param><xqdoc:param>$entity-kind the kind of resource to fetch.</xqdoc:param><xqdoc:return>the resource referred to by the given URI as streamble base64Binary.</xqdoc:return><xqdoc:error>uri:URI_UNRESOLVED_OR_NOSTREAM if the URI could not be resolved or did not resolve to a <tt>StreamResource</tt>.</xqdoc:error></xqdoc:comment><xqdoc:name>fetch:content-binary</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="streamable" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:streamable function fetch:content-binary($uri as xs:string, $entity-kind as xs:string) as xs:base64Binary external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>uri</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>entity-kind</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>