<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://zorba.io/modules/reference</xqdoc:uri><xqdoc:name>reference</xqdoc:name><xqdoc:comment><xqdoc:description> The module provides functions to compute an immutable and opaque reference
 for nodes, objects, or arrays and to retrieve such items given their
 identifier, respectively.
 The identifiers are immutable, i.e. a identifier does not change
 during the items lifetime and cannot be reused for another item after the
 original item gets deleted.
 Identifiers are unique, in that, two different items will never have the same
 identifier. A item, at any time during its lifetime, can be retrieved by its
 identifier.
 <p>Please see the <a href="http://zorba.io/documentation/latest/zorba/architecture/data_lifecycle">data lifecycle
 documentation</a> about details on storing items.</p>
</xqdoc:description><xqdoc:author>Matthias Brantner</xqdoc:author><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/architecture/data_lifecycle">Data Lifecycle</a></xqdoc:see><xqdoc:custom tag="project">Zorba/XML and JSON Data Model/Node/Reference</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">1.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="ref" uri="http://zorba.io/modules/reference" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/><xqdoc:namespace prefix="zerr" uri="http://zorba.io/errors" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports/><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns an immutable and opaque reference (with type xs:anyURI) for
 a given node, object, or array.</p>
 <p>The generated identifier is immutable, i.e. a identifier does not
 change during the item's lifetime and cannot be reused for another node after
 the original item gets deleted.</p>
 <p>Identifiers are also unique, in that, two different items will never
 have the same identifier.</p>
 A item, at any time during its lifetime, can be retrieved by its
 identifier, using the <tt>ref:dereference</tt> function.
 Please note that a reference can only be retrieved for a JSON object or JSON
 array if the item is a member of a collection.
</xqdoc:description><xqdoc:param>$arg the node, object, or array for which the URI should be computed</xqdoc:param><xqdoc:return>the opaque URI of the item.</xqdoc:return><xqdoc:error>zerr::ZAPI0080 is raised if the object or array passed as argument is not a member of a collection.</xqdoc:error></xqdoc:comment><xqdoc:name>ref:reference</xqdoc:name><xqdoc:signature>declare function ref:reference($arg as item()) as xs:string external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>arg</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> <p>Returns the node, object, or array identified by the given reference.</p>
 <p>The function returns the empty sequence if the item
 that is referenced does not exist.</p>
</xqdoc:description><xqdoc:param>$arg the URI of the item to retrieve.</xqdoc:param><xqdoc:return>the item identified by the URI passed as parameter or the empty-sequence if no item with that URI is found.</xqdoc:return></xqdoc:comment><xqdoc:name>ref:dereference</xqdoc:name><xqdoc:signature>declare function ref:dereference($arg as xs:string) as item()? external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>arg</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">item()?</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>