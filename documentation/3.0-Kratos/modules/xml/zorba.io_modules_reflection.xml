<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://zorba.io/modules/reflection</xqdoc:uri><xqdoc:name>reflection</xqdoc:name><xqdoc:comment><xqdoc:description> This module provides functions to dynamically invoke functions or main modules,
 respectively. Each of the functions (invoke or eval) come in four variants depending
 whether the expression being invoked is simple, nondeterministic, updating,
 or sequential.
</xqdoc:description><xqdoc:author>Nicolae Brinza</xqdoc:author><xqdoc:custom tag="project">Zorba/Reflection/Reflection</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">3.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="an" uri="http://zorba.io/annotations" isSchema="false"/><xqdoc:namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors" isSchema="false"/><xqdoc:namespace prefix="reflection" uri="http://zorba.io/modules/reflection" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports/><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> The invoke function allows to dynamically call a function given its QName
 and parameters.<p/>
 It is possible to invoke a function whose name is not known
 at compilation time -- it can be computed, passed through an external
 variable, taken from a file, etc. The first parameter must always be a
 QName identifying a known function.<p/>
 The function is declared with the %an:variadic annotation. Hence, it allows
 for an arbitrary number of parameters. All of these parameters (except the
 first one) will be passed to the function that is called.
 <br/>
 Example usage : <pre> reflection:invoke ( xs:QName("fn:max"), (1,2,3) ) </pre>
 <br/>
 Returns <pre> 3 </pre>.
</xqdoc:description><xqdoc:param>$name the QName of the function that is to be invoked</xqdoc:param><xqdoc:return>the result that is returned by the invoked function</xqdoc:return><xqdoc:error>whatever error the invoked function may return</xqdoc:error><xqdoc:custom tag="example">test/rbkt/Queries/zorba/reflection/reflection-invoke-01.xq</xqdoc:custom><xqdoc:custom tag="example">test/rbkt/Queries/zorba/reflection/reflection-invoke-92.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>reflection:invoke</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:variadic function reflection:invoke($name as xs:QName) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> See documentation for reflection:invoke except the function that
 is to be invoked may be nondeterministic.
</xqdoc:description><xqdoc:param>$name the QName of the function that is to be invoked</xqdoc:param><xqdoc:return>the result that is returned by the invoked function</xqdoc:return><xqdoc:error>whatever error the invoked function may return</xqdoc:error><xqdoc:see>reflection:invoke()</xqdoc:see></xqdoc:comment><xqdoc:name>reflection:invoke-n</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="nondeterministic" value=""/><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/></xqdoc:annotations><xqdoc:signature>declare updating %an:nondeterministic %an:variadic function reflection:invoke-n($name as xs:QName) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> See documentation for reflection:invoke-n except the function that
 is to be invoked may be updating, i.e. return a pending update list.
</xqdoc:description><xqdoc:param>$name the QName of the function that is to be invoked</xqdoc:param><xqdoc:return>the result that is returned by the invoked function</xqdoc:return><xqdoc:error>whatever error the invoked function may return</xqdoc:error><xqdoc:see>reflection:invoke-n()</xqdoc:see></xqdoc:comment><xqdoc:name>reflection:invoke-u</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="nondeterministic" value=""/><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/></xqdoc:annotations><xqdoc:signature>declare updating %an:nondeterministic %an:variadic function reflection:invoke-u($name as xs:QName) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> See documentation for reflection:invoke except the function that
 is to be invoked may be sequential, i.e. may have side-effects.
</xqdoc:description><xqdoc:param>$name the QName of the function that is to be invoked</xqdoc:param><xqdoc:return>the result that is returned by the invoked function</xqdoc:return><xqdoc:error>whatever error the invoked function may return</xqdoc:error><xqdoc:see>reflection:invoke()</xqdoc:see></xqdoc:comment><xqdoc:name>reflection:invoke-s</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:variadic %an:sequential function reflection:invoke-s($name as xs:QName) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> The purpose of this function is to (dynamically) execute an XQuery program
 from inside another XQuery program.<p/>
 The XQuery program that invokes the
 eval function will be referred to as the "outer" program and the XQuery
 program that is executed by the eval invocation will be referred to as
 the "inner" program. The function is given as a string argument.
 Typically, the outer program constructs this string dynamically,
 e.g., based on data extracted from documents and/or the values of
 external variables. The eval function treats this string as
 an XQuery main module. That is, it parses the string, compiles the
 resulting parse tree, executes the resulting execution plan, and finally
 returns the result or error (if any) to the outer program.<p/>
 The given XQuery program needs to be a valid according to XQuery's
 MainModule production (see <a href="http://www.w3.org/TR/xquery/#doc-xquery-MainModule">
 http://www.w3.org/TR/xquery/#doc-xquery-MainModule</a>. Please note
 that the inner pogram must at least have the XQuery version of the
 outer program [err:XQST0031].<p/>
 The inner program "inherits" the static and dynamic context of the outer
 program. Specifically, evaluation of the inner program is done in static and
 dynamic contextes that are initialized as copies of the static and dynamic
 contextes of the outer program at the place where the eval invocation appears
 at. This means that, for example, all variables that are in-scope at the place
 where the eval function is invoked from, are also in-scope inside the inner
 program and can be referenced there without having to be re-declared. On the other
 hand, declarations that appear in the prolog of the inner main module or are
 imported by the inner main module from library modules, hide their corresponding
 inherited declarations. For example, if the inner main module declares
 a variable or function with the same name as an inherited variable or function,
 the inner variable/function hides the inherited one.<p/>
 If the inner program declares an external variable with the same name as an
 inherited variable, the value of the inherited variable is used to initialize
 the inner external variable. If, however, an inner external variable has no
 default initializer and no corresponding inherited variable, it will remain
 uninitialized, causing the inner program to raise an error when executed.
</xqdoc:description><xqdoc:param>$query the query string to be evaluated</xqdoc:param><xqdoc:return>the result of evaluating the query</xqdoc:return><xqdoc:error>whatever error the evaluated XQuery may return.</xqdoc:error><xqdoc:error>err:XQST0031 If the XQuery version of the inner program is greater than the version of the outer program.</xqdoc:error><xqdoc:custom tag="example">test/rbkt/Queries/zorba/eval/eval1.xq</xqdoc:custom><xqdoc:custom tag="example">test/rbkt/Queries/zorba/eval/eval2.xq</xqdoc:custom></xqdoc:comment><xqdoc:name>reflection:eval</xqdoc:name><xqdoc:signature>declare function reflection:eval($query as xs:string) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>query</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> See documentation of reflection:eval() except the main module that is to
 be executed may be nondeterministc.
</xqdoc:description><xqdoc:param>$query the query string to be evaluated</xqdoc:param><xqdoc:return>the result of evaluating the query</xqdoc:return><xqdoc:error>whatever error the evaluated XQuery may return</xqdoc:error><xqdoc:error>err:XQST0031 If the XQuery version of the inner program is greater than the version of the outer program.</xqdoc:error></xqdoc:comment><xqdoc:name>reflection:eval-n</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="nondeterministic" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:nondeterministic function reflection:eval-n($query as xs:string) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>query</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> See documentation of reflection:eval() except the main module that is to
 be executed may be updating, i.e. return a pending update list.
</xqdoc:description><xqdoc:param>$query the query string to be evaluated</xqdoc:param><xqdoc:return>the PUL resulting from evaluating the query</xqdoc:return><xqdoc:error>whatever error the evaluated XQuery may return</xqdoc:error><xqdoc:error>err:XQST0031 If the XQuery version of the inner program is greater than the version of the outer program.</xqdoc:error><xqdoc:see>reflection:eval()</xqdoc:see></xqdoc:comment><xqdoc:name>reflection:eval-u</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="nondeterministic" value=""/></xqdoc:annotations><xqdoc:signature>declare updating %an:nondeterministic function reflection:eval-u($query as xs:string) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>query</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> See documentation of reflection:eval() except the main module that is to
 be executed may be sequential, i.e. may have side-effects.
</xqdoc:description><xqdoc:param>$query the query string to be evaluated</xqdoc:param><xqdoc:return>the result of evaluating the query (the result is not supposed to contain any PUL).</xqdoc:return><xqdoc:error>whatever error the evaluated XQuery may return</xqdoc:error><xqdoc:error>err:XQST0031 If the XQuery version of the inner program is greater than the version of the outer program.</xqdoc:error><xqdoc:see>reflection:eval()</xqdoc:see></xqdoc:comment><xqdoc:name>reflection:eval-s</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function reflection:eval-s($query as xs:string) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>query</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>