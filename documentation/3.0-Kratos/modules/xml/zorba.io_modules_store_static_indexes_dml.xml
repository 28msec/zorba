<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2013-12-04T01:28:38.942159+01:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://zorba.io/modules/store/static/indexes/dml</xqdoc:uri><xqdoc:name>dml</xqdoc:name><xqdoc:comment><xqdoc:description> This module defines a set of functions to probe and refresh indexes which are
 declared in the prolog of a module.
 <p/>
 This module is part of
 <a href="http://zorba.io/documentation/latest/zorba/specifications/xqddf">Zorba's XQuery Data Definition Facility</a>.
 All the indexes managed by this module have to be pre-declared in the prolog
 of a library module.
 Please refer to the
 <a href="http://zorba.io/documentation/latest/zorba/architecture/data_lifecycle">general documentation</a>
 for more information and examples.
</xqdoc:description><xqdoc:author>Zorba Team</xqdoc:author><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/architecture/data_lifecycle">Data Lifecycle</a></xqdoc:see><xqdoc:see><a href="http://zorba.io/documentation/latest/zorba/specifications/xqddf">XQuery Data Definition Facility</a></xqdoc:see><xqdoc:see>http://zorba.io/modules/latest/zorba.io/modules/store/static/indexes/ddl</xqdoc:see><xqdoc:see>http://zorba.io/modules/latest/zorba.io/modules/store/static/collections/dml</xqdoc:see><xqdoc:see>http://zorba.io/modules/latest/zorba.io/modules/store/static/collections/ddl</xqdoc:see><xqdoc:see>http://zorba.io/modules/latest/zorba.io/modules/store/static/integrity-constraints/ddl</xqdoc:see><xqdoc:see>http://zorba.io/modules/latest/zorba.io/modules/store/static/integrity-constraints/dml</xqdoc:see><xqdoc:see>http://zorba.io/modules/latest/zorba.io/errors</xqdoc:see><xqdoc:custom tag="project">Zorba/Data Store/Indexes/Static Data Manipulation</xqdoc:custom><xqdoc:custom tag="language">xquery</xqdoc:custom><xqdoc:custom tag="version">3.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="an" uri="http://zorba.io/annotations" isSchema="false"/><xqdoc:namespace prefix="idml" uri="http://zorba.io/modules/store/static/indexes/dml" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/><xqdoc:namespace prefix="zerr" uri="http://zorba.io/errors" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports/><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Gets the domain nodes from an index associated by value equality with a
 given <em>search tuple</em>.
 <p/>
 The search tuple consists of a number of <em>search keys</em> where each
 search key is either an atomic item or the empty sequence.  The number of
 search keys given must be equal to the number of keys declared for the
 index. Since the number of keys differs from one index to another, this
 function is variadic.
</xqdoc:description><xqdoc:param>$name The of the index to probe.</xqdoc:param><xqdoc:param>$key_i A search key used to probe the index with. The i-th search key corresponds to the i-th key expression in the index declaration.</xqdoc:param><xqdoc:return>The set of domain nodes for which the following XQuery expression returns true: <pre> $key1 eq $node/keyExpr1 and ... and $keyM eq $node/keyExprM </pre> where <i>keyExpr<sub>i</sub></i> is the expression specified in the i-th keyspec of the index.</xqdoc:return><xqdoc:error>zerr:ZDDY0021 if the index is not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index does not exist.</xqdoc:error><xqdoc:error>zerr:ZDDY0025 if the number of search keys passed as arguments is not the same as the number of keys declared for the index.</xqdoc:error><xqdoc:error>err:XPTY0004 if a non-empty seach key is given whose type does not match the sequence type specified in the corresponding keyspec.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:probe-index-point-value</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:variadic function idml:probe-index-point-value($name as xs:QName, $key_i as xs:anyAtomicType?) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key_i</xqdoc:name><xqdoc:type occurrence="?">xs:anyAtomicType</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> This is an extension of the <code>probe-index-point-value()</code> function
 in that it allows index items to be skipped.
</xqdoc:description><xqdoc:param>$name The name of the index to probe.</xqdoc:param><xqdoc:param>$skip The number of index items to skip.</xqdoc:param><xqdoc:param>$key_i The search keys used to probe the index with. The i-th search key corresponds to the i-th key expression in the index declaration.</xqdoc:param><xqdoc:return>The set of domain nodes that satisfy the search condition.</xqdoc:return><xqdoc:error>zerr:ZDDY0021 if the index is not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index does not exist.</xqdoc:error><xqdoc:error>zerr:ZDDY0025 if the number of search keys passed as arguments is not the same as the number of keys declared for the index.</xqdoc:error><xqdoc:error>err:XPTY0004 if a non-empty seach key is given whose type does not match the sequence type specified in the corresponding keyspec.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:probe-index-point-value-skip</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:variadic function idml:probe-index-point-value-skip($name as xs:QName, $skip as xs:integer, $key_i as xs:anyAtomicType?) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>skip</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key_i</xqdoc:name><xqdoc:type occurrence="?">xs:anyAtomicType</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Gets from an index the domain nodes associated by general equality with a
 given <em>search sequence </em>.
 The search sequence consists of an arbitrary number of <em>search keys</em>
 where each search key is an atomic item.
 The function is supported by general indexes only.
</xqdoc:description><xqdoc:param>$name The name of the index to probe.</xqdoc:param><xqdoc:param>$key The search sequence.</xqdoc:param><xqdoc:return>The set of domain nodes for which the following XQuery expression returns true: <pre> $keys = $node/keyExpr </pre> where keyExpr is the expression specified in the keyspec of the index (remember that for general indexes, there can be only one keyspec).</xqdoc:return><xqdoc:error>err:XPTY0004 if the search sequence contains a search key whose type does not match the sequence type specified in the keyspec of the index.</xqdoc:error><xqdoc:error>zerr:ZDDY0021 if the index with name $name is not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index with name $name does not exist.</xqdoc:error><xqdoc:error>zerr:ZDDY0029 if the index is not general.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:probe-index-point-general</xqdoc:name><xqdoc:signature>declare function idml:probe-index-point-general($name as xs:QName, $key as xs:anyAtomicType*) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">xs:anyAtomicType</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="7"><xqdoc:comment><xqdoc:description> Gets the domain nodes associated by value order-comparison (operators
 <code>le</code>, <code>lt</code>, <code>ge</code>, <code>gt</code>) with a
 given <em>search box</em>.
 <p/>
 The search box is specified as a number <i>M</i> of <em>rangespecs</em>
 where each rangespec consists of six values.
 The number <i>M</i> must be greater than 0 and less than or equal to the
 number <i>N</i> of keyspecs found in the index declaration.
 If <i>M</i> &lt; <i>N</i>, then the "missing" rangespecs are assumed to have
 the following value: [(), (), false, false, false, false].
 As a result, we can assume that <i>M</i> = <i>N</i>.
 Remember that for general indexes, there can be only one IndexKeySpec and,
 as a result for general indexes, <i>M</i> = <i>N</i> = 1.
 Since the number of keys differs from one index to another,
 this function is variadic.
 <p/>
 The i<sup>th</sup> rangespec corresponds to the i<sup>th</sup> keyspec, and
 specifies a search condition on the key values that are produced by
 evaluating that keyspec for every domain node.
 Specifically, we define the i<sup>th</sup> <em>rangespec result</em> as the
 set of domain nodes for which the following XQuery expression returns
 true:
  <pre>
    if ( $haveLowerBound-i and $haveUpperBound-i ) then
      $lowerBound-i lop $node/keyExpr-i and $node/keyExpr-i uop $upperBound-i
    else if ( $haveLowerBound-i ) then
      $lowerBound-i lop $node/keyExpr-i
    else if ( $haveUpperBound-i ) then
      $node/keyExpr-i uop $upperBound-i
    else
      fn:true()
  </pre>
 where <i>keyExpr-i</i> is the expression specified by the i<sup>th</sup>
 keyspec of the index, <i>lop</i> is either the <code>le</code> or the
 <code>lt</code> operator depending on whether
 <code>$lowerBoundsIncluded-i</code> is true or false, and <i>uop</i> is
 either the <i>le</i> or the <i>lt</i> operator depending on whether
 <code>$upperBoundsIncluded-i</code> is true or false.
</xqdoc:description><xqdoc:param>$name The name of the index to probe.</xqdoc:param><xqdoc:param>$lowerBound-i The lower bound in a range of key values.</xqdoc:param><xqdoc:param>$upperBound-i The upper bound in a range of key values.</xqdoc:param><xqdoc:param>$haveLowerBound-i If false, then there is no lower bound, or equivalently, the lower bound is -INFINITY. Otherwise, the lower bound is the one given by the <code>$lowerBound-i</code> value.</xqdoc:param><xqdoc:param>$haveUpperBound-i If false, then there is no upper bound, or equivalently, the upper bound is +INFINITY. Otherwise, the upper bound is the one given by the <code>$upperBound-i</code> value.</xqdoc:param><xqdoc:param>$lowerBoundIncluded-i If false, then the range is open from below, i.e., the <code>$lowerBound-i</code> value is not considered part of the range. Otherwise, the range is closed from below, i.e., the <code>$lowerBound-i</code> value is part of the range.</xqdoc:param><xqdoc:param>$upperBoundIncluded-i If false, then the range is open from above, i.e., the <code>$upperBound-i</code> value is not considered part of the range. Otherwise, the range is closed from above, i.e., the <code>$upperBound-i</code> value is part of the range.</xqdoc:param><xqdoc:return>The intersection of all the rangespec results.</xqdoc:return><xqdoc:error>zerr:ZDDY0021 if the index is not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index does not exist.</xqdoc:error><xqdoc:error>zerr:ZDDY0025 if the number of rangespecs passed as arguments is zero or greater than the number of keys declared for the index.</xqdoc:error><xqdoc:error>zerr:ZDDY0026 if the index is not a range index.</xqdoc:error><xqdoc:error>err:XPTY0004 if <code>$haveLowerBound-i</code> is true and <code>$lowerBound-i</code> is an atomic item whose type does not match the sequence type specified by the i<sup>th</sup> keyspec, or <code>$haveUpperBound-i</code> is true and <code>$upperBound-i</code> is an atomic item whose type does not match the sequence type specified by the i<sup>th</sup> keyspec.</xqdoc:error><xqdoc:error>zerr:ZDDY0034 if (a) the index is general (in which case there is only one rangespac), (b) the index is untyped, (c) there is both a lower and an upper bound, and (d) if T1 and T2 are the types of the lower and upper bound, neither T1 is a subtype of T2 nor T2 is a subtype of T1.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:probe-index-range-value</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:variadic function idml:probe-index-range-value($name as xs:QName, $lowerBound-i as xs:anyAtomicType?, $upperBound-i as xs:anyAtomicType?, $haveLowerBound-i as xs:boolean, $haveUpperBound-i as xs:boolean, $lowerBoundIncluded-i as xs:boolean, $upperBoundIncluded-i as xs:boolean) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lowerBound-i</xqdoc:name><xqdoc:type occurrence="?">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upperBound-i</xqdoc:name><xqdoc:type occurrence="?">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>haveLowerBound-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>haveUpperBound-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lowerBoundIncluded-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upperBoundIncluded-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="8"><xqdoc:comment><xqdoc:description> This function is an extension of the <code>probe-index-range-value()</code>
 function that index items to be skipped.
</xqdoc:description><xqdoc:param>$name The QName of the index to probe</xqdoc:param><xqdoc:param>$skip The number of index items to skip.</xqdoc:param><xqdoc:param>$lowerBound-i The lower bound in a range of key values.</xqdoc:param><xqdoc:param>$upperBound-i The upper bound in a range of key values.</xqdoc:param><xqdoc:param>$haveLowerBound-i If false, then there is no lower bound, or equivalently, the lower bound is -INFINITY. Otherwise, the lower bound is the one given by the <code>$lowerBound-i</code> value.</xqdoc:param><xqdoc:param>$haveUpperBound-i If false, then there is no upper bound, or equivalently, the upper bound is +INFINITY. Otherwise, the upper bound is the one given by the <code>$upperBound-i</code> value.</xqdoc:param><xqdoc:param>$lowerBoundIncluded-i If false, then the range is open from below, i.e., the lowerBound-i value is not considered part of the range. Otherwise, the range is closed from below, i.e., the <code>$lowerBound-i</code> value is part of the range.</xqdoc:param><xqdoc:param>$upperBoundIncluded-i If false, then the range is open from above, i.e., the upperBound-i value is not considered part of the range. Otherwise, the range is closed from above, i.e., the <code>$upperBound-i</code> value is part of the range.</xqdoc:param><xqdoc:return>The set of domain nodes that satisfy the search condition.</xqdoc:return><xqdoc:error>zerr:ZDDY0021 if the index with name $name is not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index with name $name does not exist.</xqdoc:error><xqdoc:error>zerr:ZDDY0025 if the number of rangespecs passed as arguments is zero or greater than the number of keys declared for the index.</xqdoc:error><xqdoc:error>zerr:ZDDY0026 if the index is not a range index.</xqdoc:error><xqdoc:error>err:XPTY0004 if <code>$haveLowerBound-i</code> is true and <code>$lowerBound-i</code> is an atomic item whose type does not match the sequence type specified by the i<sup>th</sup> keyspec, or <code>$haveUpperBound-i</code> is true and <code>$upperBound-i</code> is an atomic item whose type does not match the sequence type specified by the i<sup>th</sup> keyspec.</xqdoc:error><xqdoc:error>zerr:ZDDY0034 if (a) the index is general (in which case there is only one rangespac), (b) the index is untyped, (c) there is both a lower and an upper bound, and (d) if T1 and T2 are the types of the lower and upper bound, neither T1 is a subtype of T2 nor T2 is a subtype of T1.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:probe-index-range-value-skip</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="variadic" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:variadic function idml:probe-index-range-value-skip($name as xs:QName, $skip as xs:integer, $lowerBound-i as xs:anyAtomicType?, $upperBound-i as xs:anyAtomicType?, $haveLowerBound-i as xs:boolean, $haveUpperBound-i as xs:boolean, $lowerBoundIncluded-i as xs:boolean, $upperBoundIncluded-i as xs:boolean) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>skip</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lowerBound-i</xqdoc:name><xqdoc:type occurrence="?">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upperBound-i</xqdoc:name><xqdoc:type occurrence="?">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>haveLowerBound-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>haveUpperBound-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lowerBoundIncluded-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upperBoundIncluded-i</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="7"><xqdoc:comment><xqdoc:description> Gets the domain nodes associated by general order-comparison (operators
 <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>,
 <code>&gt;</code>) with one or two <em>search sequences</em>.
 <p/>
 Each search sequence consists of an arbitrary number of
 <em>search keys</em> where each search key is an atomic item.
 This method is supported by general range indexes only.
 Its result is either an error or the set of domain nodes for which the
 following XQuery expression returns true:
  <pre>
    if ( $haveLowerBound and $haveUpperBound ) then
      $lowerBoundKeys lop $node/keyExpr and $node/keyExpr uop $upperBoundKeys
    else if ( $haveLowerBound ) then
      $lowerBoundKeys lop $node/keyExpr
    else if ( $haveUpperBound ) then
      $node/keyExpr uop $upperBoundKeys
    else
      fn:true()
  </pre>
 where <i>keyExpr</i> is the expression specified in the keyspec of the
 index, <i>lop</i> is either the <code>&lt;=</code> or the <code>&lt;</code>
 operator depending on whether <code>$lowerBoundsIncluded</code> is true or
 false, and <i>uop</i> is either the <code>&lt;=</code> or the
 <code>&lt;</code> operator depending on whether
 <code>$upperBoundsIncluded</code> is true or false.
</xqdoc:description><xqdoc:param>$name The of the index to probe.</xqdoc:param><xqdoc:param>$lowerBound The lower bound search sequence.</xqdoc:param><xqdoc:param>$upperBound The upper bound search sequence.</xqdoc:param><xqdoc:param>$haveLowerBound Whether a lower bound search sequence exists or not.</xqdoc:param><xqdoc:param>$haveUpperBound Whether an upper bound search sequence exists or not.</xqdoc:param><xqdoc:param>$lowerBoundIncluded Whether to use the <code>&lt;=</code> or the <code>&lt;</code> operator when comparing a search key from <code>$lowerBound</code> with an index key.</xqdoc:param><xqdoc:param>$upperBoundIncluded Whether to use the <code>&lt;=</code> or the <code>&lt;</code> operator when comparing an index key with a search key from <code>$upperBound</code>.</xqdoc:param><xqdoc:return>The set of domain nodes that satisfy the search condition.</xqdoc:return><xqdoc:error>zerr:ZDDY0021 if the index was not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index does not exist.</xqdoc:error><xqdoc:error>zerr:ZDDY0030 if the index is not a general range index.</xqdoc:error><xqdoc:error>err:XPTY0004 if <code>$haveLowerBound</code> is true and <code>$lowerBoundKeys</code> contains an atomic item whose type does not match the sequence type specified by the index keyspec, or <code>$haveUpperBound</code> is true and <code>$upperBoundKeys</code> contains an atomic item whose type does not match the sequence type specified by the index keyspec.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:probe-index-range-general</xqdoc:name><xqdoc:signature>declare function idml:probe-index-range-general($name as xs:QName, $lowerBound as xs:anyAtomicType*, $upperBound as xs:anyAtomicType*, $haveLowerBound as xs:boolean, $haveUpperBound as xs:boolean, $lowerBoundIncluded as xs:boolean, $upperBoundIncluded as xs:boolean) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lowerBound</xqdoc:name><xqdoc:type occurrence="*">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upperBound</xqdoc:name><xqdoc:type occurrence="*">xs:anyAtomicType</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>haveLowerBound</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>haveUpperBound</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>lowerBoundIncluded</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>upperBoundIncluded</xqdoc:name><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> Updates the index with the given name.  Note that if the maintenance
 property of the index is automatic, this function does nothing.
</xqdoc:description><xqdoc:param>$name The name of the index to refresh.</xqdoc:param><xqdoc:return>An empty XDM instance and a pending update list that, when applied, refreshes the contents of the index.</xqdoc:return><xqdoc:error>zerr:ZDDY0021 if the index is not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index does not exist.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:refresh-index</xqdoc:name><xqdoc:signature>declare updating function idml:refresh-index($name as xs:QName) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> Gets a sequence of all keys contained in the index with the given name.
 Each element has the following structure:
  <pre class="brush: xml;">
   &lt;key xmlns="http://zorba.io/modules/store/static/indexes/dml"&gt;
     &lt;attribute value="key1_value"/&gt;
     &lt;attribute value="key2_value"/&gt;
     &lt;attribute value="key3_value"/&gt;
   &lt;/key&gt;
  </pre>
 Note that the order of the attribute elements reflects the order of
 the keys in the index specification. Also note that the values in
 these attributes have the type that is declared in the corresponding
 index specification.
</xqdoc:description><xqdoc:param>$name The name of the index to get the keys for.</xqdoc:param><xqdoc:return>A sequence of elements comprising the keys in the index.</xqdoc:return><xqdoc:error>zerr:ZDDY0021 if the index was not declared.</xqdoc:error><xqdoc:error>zerr:ZDDY0023 if the index does not exist.</xqdoc:error></xqdoc:comment><xqdoc:name>idml:keys</xqdoc:name><xqdoc:signature>declare function idml:keys($name as xs:QName) as node()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>xs:QName</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">node()*</xqdoc:type></xqdoc:return></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>