{ "ns" : "http://zorba.io/modules/archive", "description" : " This module provides functionality to work with (possibly compressed)\n archives. For example, it provides functions to retrieve the names or\n extract the values of several entries in a ZIP archive. Moreover,\n there exist functions that allow to create or update archives.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The following archive formats and compression algorithms are supported:\n <ul xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n   <li>ZIP (with compression DEFLATE or STORE)</li>\n   <li>TAR (with compression GZIP)</li>\n </ul>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "sees" : [  ], "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Luis Rodgriguez, Juan Zacarias, and Matthias Brantner</xqdoc:author>" ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://zorba.io/modules/archive", "prefix" : "a" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" } ], "functions" : [ { "arity" : 2, "name" : "create", "qname" : "a:create", "signature" : "($entries as item()*, $contents as item()*) as xs:base64Binary external", "description" : " Creates a new ZIP archive out of the given entries and contents. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n All entries are compressed with the DEFLATE compression algorithm.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The parameters $entries and $contents have the same meaning as for\n the function a:create with three arguments.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Entry entries can include a type element, this element can have one\n of two possible values: \"regular\" or \"directory\". If \"regular\" is\n specified then the entry will be created as a regular file; if \"directory\"\n is specified then the entry will be created as a directory, no contents\n will be read from $contents in this case. If no value is specified for type\n then it will be set to \"regular\". <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Example:\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n $zip-file := a:create(\n    ({ \"encoding\" : \"ISO-8859-1\", \"type\" : \"directory\", \"name\" : \"dir1\" }, \"dir1/file1\"),\n    (\"file contents\"))\n </pre>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Creates a new ZIP archive out of the given entries and contents.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "entries", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the meta data for the entries in the archive. Each entry can be of type xs:string or a JSON oibject describing the entry.</div>" }, { "name" : "contents", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content for the archive. Each item in the sequence can be of type xs:string or xs:base64Binary.</div>" } ], "returns" : { "type" : "xs:base64Binary", "description" : "the generated archive as xs:base64Binary" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:ENTRY-COUNT-MISMATCH if the number of entries that don't describe directories differs from the number of items in the $contents sequence: count($non-directory-entries) ne count($contents)</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-ENTRY-VALS if a values in an entry object are invalid</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-ENCODING if a given encoding is invalid or not supported</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:FORG0006 if an item in the contents sequence is not of type xs:string or xs:base64Binary</xqdoc:error>" ] }, { "arity" : 3, "name" : "create", "qname" : "a:create", "signature" : "($entries as item()*, $contents as item()*, $options as object()) as xs:base64Binary external", "description" : " Creates a new archive out of the given entries and contents. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The $entries arguments provides meta data for each entry in the archive.\n For example, the name of the entry (mandatory) or the last-modified date\n (optional). An entry can either be of type xs:string to describe the entry\n name or of type xs:base64Binary to provide additional meta data.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The $contents sequence provides the data (xs:string or xs:base64Binary) for\n the entries that should be included in the archive. Its length needs to\n match the length of the entries in the $entries sequence that don't describe\n directory entries (a:ARCH0001). All items of type xs:base64Binary are decoded\n before being added to the archive.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n For each entry, the name, last-modified date and time, and compression\n can be specified. In addition, an encoding can be specified which is used to\n store entries of type xs:string. If no last-modified attribute is given, the\n default is the current date and time. The compression is useful if various\n entries in a ZIP archive are compressed using different compression\n algorithms (i.e. store or deflate).<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n For example, the following sequence may be used to describe an archive\n containing two elements: <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" class=\"ace-static\" ace-mode=\"xquery\">{\n   \"last-modified\" : \"{fn:current-dateTime()}\"\n   \"name\" : \"myfile.txt\"\n },\n {\n   \"encoding\" : \"ISO-8859-1\",\n   \"compression\" : \"store\",\n   \"name\" : \"dir/myfile.xml\"\n }\n </pre>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The $options argument may be used to describe general options for the\n archive.  For example, the following options can be used to create a ZIP\n archive in which all entries are compressed with the DEFLATE compression\n algorithm: <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" class=\"ace-static\" ace-mode=\"xquery\">{\n   \"format\" : \"ZIP\",\n   \"compression\" : \"DEFLATE\"\n }\n </pre>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The result of the function is the generated archive as a item of type\n xs:base64Binary.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Creates a new archive out of the given entries and contents.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "entries", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the meta data for the entries in the archive. Each entry can be of type xs:string or an JSON object describing the entry.</div>" }, { "name" : "contents", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content for the archive. Each item in the sequence can be of type xs:string or xs:base64Binary.</div>" }, { "name" : "options", "type" : "object()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the options used to generate the archive.</div>" } ], "returns" : { "type" : "xs:base64Binary", "description" : "the generated archive as xs:base64Binary" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:ENTRY-COUNT-MISMATCH if the number of entries describing non-directories differs from the number of items in the $contents sequence: count($non-directoy-entries) ne count($contents)</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-OPTIONS if the options argument contains invalid values</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-ENTRY-VALS if any values in an entry are invalid</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-ENCODING if a given encoding is invalid or not supported</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:DIFFERENT-COMPRESSIONS-NOT-SUPPORTED if different compression algorithms were selected but the actual version of libarchive doesn't support it.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:FORG0006 if an item in the contents sequence is not of type xs:string or xs:base64Binary</xqdoc:error>" ] }, { "arity" : 2, "name" : "delete", "qname" : "a:delete", "signature" : "($archive as xs:base64Binary, $entry-names as xs:string*) as xs:base64Binary external", "description" : " Deletes entries from an archive. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Deletes entries from an archive.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to extract the entries from as xs:base64Binary</div>" }, { "name" : "entry-names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> a sequence of names for entries which should be deleted</div>" } ], "returns" : { "type" : "xs:base64Binary", "description" : "the updated base64Binary" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>" ] }, { "arity" : 1, "name" : "entries", "qname" : "a:entries", "signature" : "($archive as xs:base64Binary) as object()* external", "description" : " Returns the header information of all entries in the given archive as a JSON\n objects sequence. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Such information includes the name of the entry, the uncompressed size,\n as well as the last-modified timestamp. Note that not all values are\n available in every archive.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Returns the header information of all entries in the given archive as a JSON\n objects sequence.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to list the entries from as xs:base64Binary</div>" } ], "returns" : { "type" : "object()*", "description" : "a sequence of strings, one for each entry in the archive" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>" ] }, { "arity" : 1, "name" : "extract-binary", "qname" : "a:extract-binary", "signature" : "($archive as xs:base64Binary) as xs:base64Binary* external", "description" : " Returns the entries identified by the given paths from the archive\n as base64Binary. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Returns the entries identified by the given paths from the archive\n as base64Binary.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to extract the entries from as xs:base64Binary</div>" } ], "returns" : { "type" : "xs:base64Binary*", "description" : "one xs:base64Binary item for the contents of each entry in the archive" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>" ] }, { "arity" : 2, "name" : "extract-binary", "qname" : "a:extract-binary", "signature" : "($archive as xs:base64Binary, $entry-names as xs:string*) as xs:base64Binary* external", "description" : " Returns the entries identified by the given paths from the archive\n as base64Binary. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Returns the entries identified by the given paths from the archive\n as base64Binary.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to extract the entries from as xs:base64Binary</div>" }, { "name" : "entry-names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> a sequence of names for entries which should be extracted</div>" } ], "returns" : { "type" : "xs:base64Binary*", "description" : "a sequence of xs:base64Binary itmes for the given sequence of names or the empty sequence if no entries match the given names." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>" ] }, { "arity" : 1, "name" : "extract-text", "qname" : "a:extract-text", "signature" : "($archive as xs:base64Binary) as xs:string* external", "description" : " Extracts the contents of all entries in the given archive as text\n using UTF-8 as default encoding. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Extracts the contents of all entries in the given archive as text\n using UTF-8 as default encoding.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to extract the entries from as xs:base64Binary</div>" } ], "returns" : { "type" : "xs:string*", "description" : "one string for the contents of each entry in the archive" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:FOCH0001 if any of the entries contains invalid utf-8 characters</xqdoc:error>" ] }, { "arity" : 2, "name" : "extract-text", "qname" : "a:extract-text", "signature" : "($archive as xs:base64Binary, $entry-names as xs:string*) as xs:string* external", "description" : " Extracts the contets of the entries identified by a given sequence of\n names as text.\n The default encoding used to read the string is UTF-8. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Extracts the contets of the entries identified by a given sequence of\n names as text.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to extract the entries from as xs:base64Binary</div>" }, { "name" : "entry-names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> a sequence of names for entries which should be extracted</div>" } ], "returns" : { "type" : "xs:string*", "description" : "a sequence of strings for the given sequence of names or the empty sequence if no entries match the given names." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:FOCH0001 if any of the entries requested contains invalid utf-8 characters</xqdoc:error>" ] }, { "arity" : 3, "name" : "extract-text", "qname" : "a:extract-text", "signature" : "($archive as xs:base64Binary, $entry-names as xs:string*, $encoding as xs:string) as xs:string* external", "description" : " Extracts the contets of the entries identified by a given sequence of\n names as text. Each entry is treated with the given encoding. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Extracts the contets of the entries identified by a given sequence of\n names as text.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to extract the entries from as xs:base64Binary</div>" }, { "name" : "entry-names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> a sequence of entry names that should be extracted</div>" }, { "name" : "encoding", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> a encoding for transcoding each of the extracted entries</div>" } ], "returns" : { "type" : "xs:string*", "description" : "a sequence of strings for the given sequence of names or the empty sequence if no entries match the given names." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-ENCODING if the given $encoding is invalid or not supported</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:FOCH0001 if a transcoding error happens</xqdoc:error>" ] }, { "arity" : 1, "name" : "options", "qname" : "a:options", "signature" : "($archive as xs:base64Binary) as object() external", "description" : " Returns the algorithm and format options as a JSON object for a given archive.\n For example, for a ZIP archive, the following options element\n would be returned: <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" class=\"ace-static\" ace-mode=\"xquery\">{\n   \"format\" : \"ZIP\",\n   \"compression\" : \"DEFLATE\"\n }\n </pre>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Returns the algorithm and format options as a JSON object for a given archive.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive as xs:base64Binary</div>" } ], "returns" : { "type" : "object()", "description" : "the algorithm and format options as a JSON object" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>" ] }, { "arity" : 3, "name" : "update", "qname" : "a:update", "signature" : "($archive as xs:base64Binary, $entries as item()*, $contents as item()*) as xs:base64Binary external", "description" : " Adds and replaces entries in an archive according to\n the given spec. The contents can be string and base64Binary items. <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n The parameters $entries and $contents have the same meaning as for\n the function a:create with three arguments.<p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Adds and replaces entries in an archive according to\n the given spec.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "archive", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the archive to add or replace content</div>" }, { "name" : "entries", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the meta data for the entries in the archive. Each entry can be of type xs:string or a JSON object. For mandatory fields in the JSON object see create function.</div>" }, { "name" : "contents", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content for the archive. Each item in the sequence can be of type xs:string or xs:base64Binary.</div>" } ], "returns" : { "type" : "xs:base64Binary", "description" : "the updated xs:base64Binary" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:ENTRY-COUNT-MISMATCH if the number of entry elements differs from the number of items in the $contents sequence: count($non-directory-entries) ne count($contents)</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-ENTRY-VALS if a value for an entry element is invalid</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:INVALID-ENCODING if a given encoding is invalid or not supported</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:DIFFERENT-COMPRESSIONS-NOT-SUPPORTED if different compression algorithms were selected but the actual version of libarchive doesn't support it.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:FORG0006 if an item in the contents sequence is not of type xs:string or xs:base64Binary</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">a:CORRUPTED-ARCHIVE if $archive is not an archive or corrupted</xqdoc:error>" ] } ], "variables" : [  ] }