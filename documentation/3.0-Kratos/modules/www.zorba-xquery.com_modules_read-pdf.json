{ "ns" : "http://www.zorba-xquery.com/modules/read-pdf", "description" : " This module provides funtionality to read the text from PDF documents and\n to render PDF documents to images.\n <a xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" href=\"http://pdfbox.apache.org\">Apache PDFBox</a> library is used to\n implement these functions.\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/><b xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Note:</b> Since this module has a Java library dependency a JVM required\n to be installed on the system. For Windows: jvm.dll is required on the system\n path ( usually located in \"C:\\Program Files\\Java\\jre6\\bin\\client\".\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/><b xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Note:</b> For Debian based Linux distributions install PdfBox and its dependencies:\n sudo apt-get install libpdfbox-java libfontbox-java libjempbox-java libcommons-logging-java .\n For Windows use PDFBOX_HOME environment variable.\n", "sees" : [ "<xqdoc:see xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http://pdfbox.apache.org/</xqdoc:see>" ], "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Cezar Andrei</xqdoc:author>" ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://www.w3.org/2005/xqt-errors", "prefix" : "err" }, { "uri" : "http://www.zorba-xquery.com/modules/read-pdf", "prefix" : "read-pdf" }, { "uri" : "http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options", "prefix" : "rp-options" }, { "uri" : "http://zorba.io/modules/schema", "prefix" : "sch" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" } ], "functions" : [ { "arity" : 2, "name" : "extract-text", "qname" : "read-pdf:extract-text", "signature" : "($pdf as xs:base64Binary, $options as element(rp-options:extract-text-options)?) as xs:string", "description" : " Extracts the text of the input pdf.\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Please consult the\n <a xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" href=\"http://pdfbox.apache.org/\">official PDFBox documentation for further\n information</a>.\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Example:<pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" class=\"ace-static\" ace-mode=\"xquery\">\n  import module namespace read-pdf = \"http://www.zorba-xquery.com/modules/read-pdf\";\n  import module namespace file = \"http://expath.org/ns/file\";\n  declare namespace rpo =\n      \"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options\";\n  let $pdf := file:read-binary(\"path/to/my.pdf\")\n  let $options  :=\n     <rpo:extract-text-options xmlns:rpo=\"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options\">\n       <rpo:text-kind>simple</rpo:text-kind>\n       <rpo:start-page>2</rpo:start-page>\n       <rpo:end-page>3</rpo:end-page>\n       <rpo:password>decription_password</rpo:password>\n       <rpo:ignore-corrupt-objects>false</rpo:ignore-corrupt-objects>\n       <rpo:ignore-beads>false</rpo:ignore-beads>\n       <rpo:start-page-separator>---start-page-separator---</rpo:start-page-separator>\n       <rpo:end-page-separator>---end-page-separator---</rpo:end-page-separator>\n     </rpo:extract-text-options>\n  return\n      read-pdf:extract-text($pdf, $options)\n </pre>\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Extracts the text of the input pdf.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "pdf", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The input PDF instance as xs:base64Binary</div>" }, { "name" : "options", "type" : "element(rp-options:extract-text-options)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> Options:<br/> <ul> <li>text-kind: string (default html) html: format output as HTML, simple: plain text.</li> <li>start-page: int (default 1) Which page to start with.</li> <li>end-page: int (default last document page) Which page to end with.</li> <li>password: string The decription password. Optional if PDF is password protected. </li> <li>ignore-corrupt-objects: boolean (default false) If true try recoved in case of corrupt objects, othewise exit with error.</li> <li>ignore-beads: boolean (default false) If true disables the separation by beads.</li> <li>start-page-separator: string The optional separator at every start page. </li> <li>end-page-separator: string The optional separator at every end page. </li> </ul></div>" } ], "returns" : { "type" : "xs:string", "description" : "The text contained in the PDF document." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">read-pdf:VM001 If Zorba was unable to start the JVM.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">read-pdf:JAVA-EXCEPTION If Apache PDFBox throws an exception.</xqdoc:error>" ] }, { "arity" : 2, "name" : "render-to-images", "qname" : "read-pdf:render-to-images", "signature" : "($pdf as xs:base64Binary, $options as element(rp-options:render-to-images-options)?) as xs:base64Binary*", "description" : " Renders each page of the PDF document as an image.\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Please consult the\n <a xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" href=\"http://pdfbox.apache.org/\">official PDFBox documentation for further\n information</a>.\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n Example:<pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\" class=\"ace-static\" ace-mode=\"xquery\">\n  import module namespace read-pdf = \"http://www.zorba-xquery.com/modules/read-pdf\";\n  import module namespace file = \"http://expath.org/ns/file\";\n  declare namespace rpo =\n      \"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options\";\n  let $pdf := file:read-binary(\"path/to/my.pdf\")\n  let $options  :=\n     <rpo:render-to-images-options xmlns:rpo=\"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options\">\n       <rpo:image-kind>jpg</rpo:image-kind>\n       <rpo:start-page>2</rpo:start-page>\n       <rpo:end-page>3</rpo:end-page>\n       <rpo:password>decription_password</rpo:password>\n     </rpo:render-to-images-options>\n  let $imgs := read-pdf:render-to-images($pdf, $options)\n  for $img at $pos in $imgs\n  return\n  {\n    file:write-binary(\"img-page\" || $pos || \".jpg\", $img);\n    $pos\n  }\n </pre>\n <br xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n", "summary" : "<p> Renders each page of the PDF document as an image.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "pdf", "type" : "xs:base64Binary", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The input PDF instance as xs:base64Binary</div>" }, { "name" : "options", "type" : "element(rp-options:render-to-images-options)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> Options:<br/> <ul> <li>image-kind: string (default jpg) Image type encoding. Supported encodings: jpg, png.</li> <li>start-page: int (default 1) Which page to start with.</li> <li>end-page: int (default last document page) Which page to end with.</li> <li>password: string The decription password. Optional if PDF is password protected. </li> </ul></div>" } ], "returns" : { "type" : "xs:base64Binary*", "description" : "The rendered pages in the PDF document, as images." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">read-pdf:VM001 If Zorba was unable to start the JVM.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">read-pdf:JAVA-EXCEPTION If Apache PDFBox throws an exception.</xqdoc:error>" ] } ], "variables" : [  ] }