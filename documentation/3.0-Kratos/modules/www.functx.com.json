{ "ns" : "http://www.functx.com", "description" : " --------------------------------\n The FunctX XQuery Function Library\n --------------------------------\n Copyright (C) 2007 Datypic\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License.\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n For more information on the FunctX XQuery library, contact contrib@functx.com.\n", "sees" : [ "<xqdoc:see xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http://www.xqueryfunctions.com</xqdoc:see>" ], "authors" : [  ], "version" : null, "encoding" : null, "namespaces" : [ { "uri" : "http://www.functx.com", "prefix" : "functx" } ], "functions" : [ { "arity" : 3, "name" : "add-attributes", "qname" : "functx:add-attributes", "signature" : "($elements as element(*)*, $attrNames as xs:QName*, $attrValues as xs:anyAtomicType*) as element(*)?", "description" : " Adds attributes to XML elements\n", "summary" : "<p> Adds attributes to XML elements\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "elements", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element(s) to which you wish to add the attribute</div>" }, { "name" : "attrNames", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name(s) of the attribute(s) to add</div>" }, { "name" : "attrValues", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value(s) of the attribute(s) to add</div>" } ], "returns" : { "type" : "element(*)?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "add-months", "qname" : "functx:add-months", "signature" : "($date as xs:anyAtomicType?, $months as xs:integer) as xs:date?", "description" : " Adds months to a date\n", "summary" : "<p> Adds months to a date\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" }, { "name" : "months", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number of months to add</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "add-or-update-attributes", "qname" : "functx:add-or-update-attributes", "signature" : "($elements as element(*)*, $attrNames as xs:QName*, $attrValues as xs:anyAtomicType*) as element(*)?", "description" : " Adds attributes to XML elements\n", "summary" : "<p> Adds attributes to XML elements\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "elements", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element(s) to which you wish to add the attribute</div>" }, { "name" : "attrNames", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name(s) of the attribute(s) to add</div>" }, { "name" : "attrValues", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value(s) of the attribute(s) to add</div>" } ], "returns" : { "type" : "element(*)?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "all-whitespace", "qname" : "functx:all-whitespace", "signature" : "($arg as xs:string?) as xs:boolean", "description" : " Whether a value is all whitespace or a zero-length string\n", "summary" : "<p> Whether a value is all whitespace or a zero-length string\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string (or node) to test</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "are-distinct-values", "qname" : "functx:are-distinct-values", "signature" : "($seq as xs:anyAtomicType*) as xs:boolean", "description" : " Whether all the values in a sequence are distinct\n", "summary" : "<p> Whether all the values in a sequence are distinct\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of values</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "atomic-type", "qname" : "functx:atomic-type", "signature" : "($values as xs:anyAtomicType*) as xs:string*", "description" : " The built-in type of an atomic value\n", "summary" : "<p> The built-in type of an atomic value\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "values", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value(s) whose type you want to determine</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "avg-empty-is-zero", "qname" : "functx:avg-empty-is-zero", "signature" : "($values as xs:anyAtomicType*, $allNodes as node()*) as xs:double", "description" : " The average, counting \"empty\" values as zero\n", "summary" : "<p> The average, counting \"empty\" values as zero\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "values", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the values to be averaged</div>" }, { "name" : "allNodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of all nodes to find the average over</div>" } ], "returns" : { "type" : "xs:double", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "between-exclusive", "qname" : "functx:between-exclusive", "signature" : "($value as xs:anyAtomicType?, $minValue as xs:anyAtomicType, $maxValue as xs:anyAtomicType) as xs:boolean", "description" : " Whether a value is between two provided values\n", "summary" : "<p> Whether a value is between two provided values\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "value", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value to be tested</div>" }, { "name" : "minValue", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the minimum value</div>" }, { "name" : "maxValue", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the maximum value</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "between-inclusive", "qname" : "functx:between-inclusive", "signature" : "($value as xs:anyAtomicType?, $minValue as xs:anyAtomicType, $maxValue as xs:anyAtomicType) as xs:boolean", "description" : " Whether a value is between two provided values, or equal to one of them\n", "summary" : "<p> Whether a value is between two provided values, or equal to one of them\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "value", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value to be tested</div>" }, { "name" : "minValue", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the minimum value</div>" }, { "name" : "maxValue", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the maximum value</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "camel-case-to-words", "qname" : "functx:camel-case-to-words", "signature" : "($arg as xs:string?, $delim as xs:string) as xs:string", "description" : " Turns a camelCase string into space-separated words\n", "summary" : "<p> Turns a camelCase string into space-separated words\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to modify</div>" }, { "name" : "delim", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the delimiter for the words (e.g. a space)</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "capitalize-first", "qname" : "functx:capitalize-first", "signature" : "($arg as xs:string?) as xs:string?", "description" : " Capitalizes the first character of a string\n", "summary" : "<p> Capitalizes the first character of a string\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the word or phrase to capitalize</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "change-element-names-deep", "qname" : "functx:change-element-names-deep", "signature" : "($nodes as node()*, $oldNames as xs:QName*, $newNames as xs:QName*) as node()*", "description" : " Changes the names of elements in an XML fragment\n", "summary" : "<p> Changes the names of elements in an XML fragment\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element(s) to change</div>" }, { "name" : "oldNames", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of names to change from</div>" }, { "name" : "newNames", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of names to change to</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "change-element-ns-deep", "qname" : "functx:change-element-ns-deep", "signature" : "($nodes as node()*, $newns as xs:string, $prefix as xs:string) as node()*", "description" : " Changes the namespace of XML elements and its descendants\n", "summary" : "<p> Changes the namespace of XML elements and its descendants\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the nodes to change</div>" }, { "name" : "newns", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the new namespace</div>" }, { "name" : "prefix", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the prefix to use for the new namespace</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "change-element-ns", "qname" : "functx:change-element-ns", "signature" : "($elements as element(*)*, $newns as xs:string, $prefix as xs:string) as element(*)?", "description" : " Changes the namespace of XML elements\n", "summary" : "<p> Changes the namespace of XML elements\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "elements", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the elements to change</div>" }, { "name" : "newns", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the new namespace</div>" }, { "name" : "prefix", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the prefix to use for the new namespace</div>" } ], "returns" : { "type" : "element(*)?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "chars", "qname" : "functx:chars", "signature" : "($arg as xs:string?) as xs:string*", "description" : " Converts a string to a sequence of characters\n", "summary" : "<p> Converts a string to a sequence of characters\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to split</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "contains-any-of", "qname" : "functx:contains-any-of", "signature" : "($arg as xs:string?, $searchStrings as xs:string*) as xs:boolean", "description" : " Whether a string contains any of a sequence of strings\n", "summary" : "<p> Whether a string contains any of a sequence of strings\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to test</div>" }, { "name" : "searchStrings", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the strings to look for</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "contains-case-insensitive", "qname" : "functx:contains-case-insensitive", "signature" : "($arg as xs:string?, $substring as xs:string) as xs:boolean?", "description" : " Whether one string contains another, without regard to case\n", "summary" : "<p> Whether one string contains another, without regard to case\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to search</div>" }, { "name" : "substring", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the substring to find</div>" } ], "returns" : { "type" : "xs:boolean?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "contains-word", "qname" : "functx:contains-word", "signature" : "($arg as xs:string?, $word as xs:string) as xs:boolean", "description" : " Whether one string contains another, as a separate word\n", "summary" : "<p> Whether one string contains another, as a separate word\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to search</div>" }, { "name" : "word", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the word to find</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "copy-attributes", "qname" : "functx:copy-attributes", "signature" : "($copyTo as element(*), $copyFrom as element(*)) as element(*)", "description" : " Copies attributes from one element to another\n", "summary" : "<p> Copies attributes from one element to another\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "copyTo", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element to copy attributes to</div>" }, { "name" : "copyFrom", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element to copy attributes from</div>" } ], "returns" : { "type" : "element(*)", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "date", "qname" : "functx:date", "signature" : "($year as xs:anyAtomicType, $month as xs:anyAtomicType, $day as xs:anyAtomicType) as xs:date", "description" : " Construct a date from a year, month and day\n", "summary" : "<p> Construct a date from a year, month and day\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "year", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the year</div>" }, { "name" : "month", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the month</div>" }, { "name" : "day", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the day</div>" } ], "returns" : { "type" : "xs:date", "description" : "" }, "errors" : [  ] }, { "arity" : 6, "name" : "dateTime", "qname" : "functx:dateTime", "signature" : "($year as xs:anyAtomicType, $month as xs:anyAtomicType, $day as xs:anyAtomicType, $hour as xs:anyAtomicType, $minute as xs:anyAtomicType, $second as xs:anyAtomicType) as xs:dateTime", "description" : " Construct a date/time from individual components\n", "summary" : "<p> Construct a date/time from individual components\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "year", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the year</div>" }, { "name" : "month", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the month</div>" }, { "name" : "day", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the day</div>" }, { "name" : "hour", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the hour</div>" }, { "name" : "minute", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the minute</div>" }, { "name" : "second", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second</div>" } ], "returns" : { "type" : "xs:dateTime", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "day-in-year", "qname" : "functx:day-in-year", "signature" : "($date as xs:anyAtomicType?) as xs:integer?", "description" : " The day of the year (a number between 1 and 366)\n", "summary" : "<p> The day of the year (a number between 1 and 366)\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:integer?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "day-of-week-abbrev-en", "qname" : "functx:day-of-week-abbrev-en", "signature" : "($date as xs:anyAtomicType?) as xs:string?", "description" : " The abbreviated day of the week, from a date, in English\n", "summary" : "<p> The abbreviated day of the week, from a date, in English\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "day-of-week-name-en", "qname" : "functx:day-of-week-name-en", "signature" : "($date as xs:anyAtomicType?) as xs:string?", "description" : " The name of the day of the week, from a date, in English\n", "summary" : "<p> The name of the day of the week, from a date, in English\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "day-of-week", "qname" : "functx:day-of-week", "signature" : "($date as xs:anyAtomicType?) as xs:integer?", "description" : " The day of the week, from a date\n", "summary" : "<p> The day of the week, from a date\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:integer?", "description" : "" }, "errors" : [  ] }, { "arity" : 4, "name" : "dayTimeDuration", "qname" : "functx:dayTimeDuration", "signature" : "($days as xs:decimal?, $hours as xs:decimal?, $minutes as xs:decimal?, $seconds as xs:decimal?) as xs:dayTimeDuration", "description" : " Construct a dayTimeDuration from a number of days, hours, etc.\n", "summary" : "<p> Construct a dayTimeDuration from a number of days, hours, etc.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "days", "type" : "xs:decimal", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number of days</div>" }, { "name" : "hours", "type" : "xs:decimal", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number of hours</div>" }, { "name" : "minutes", "type" : "xs:decimal", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number of minutes</div>" }, { "name" : "seconds", "type" : "xs:decimal", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number of seconds</div>" } ], "returns" : { "type" : "xs:dayTimeDuration", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "days-in-month", "qname" : "functx:days-in-month", "signature" : "($date as xs:anyAtomicType?) as xs:integer?", "description" : " Number of days in the month\n", "summary" : "<p> Number of days in the month\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:integer?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "depth-of-node", "qname" : "functx:depth-of-node", "signature" : "($node as node()?) as xs:integer", "description" : " The depth (level) of a node in an XML tree\n", "summary" : "<p> The depth (level) of a node in an XML tree\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node to check</div>" } ], "returns" : { "type" : "xs:integer", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "distinct-attribute-names", "qname" : "functx:distinct-attribute-names", "signature" : "($nodes as node()*) as xs:string*", "description" : " The distinct names of all attributes in an XML fragment\n", "summary" : "<p> The distinct names of all attributes in an XML fragment\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root to start from</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "distinct-deep", "qname" : "functx:distinct-deep", "signature" : "($nodes as node()*) as node()*", "description" : " The XML nodes with distinct values, taking into account attributes and descendants\n", "summary" : "<p> The XML nodes with distinct values, taking into account attributes and descendants\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes to test</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "distinct-element-names", "qname" : "functx:distinct-element-names", "signature" : "($nodes as node()*) as xs:string*", "description" : " The distinct names of all elements in an XML fragment\n", "summary" : "<p> The distinct names of all elements in an XML fragment\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root(s) to start from</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "distinct-element-paths", "qname" : "functx:distinct-element-paths", "signature" : "($nodes as node()*) as xs:string*", "description" : " The distinct paths of all descendant elements in an XML fragment\n", "summary" : "<p> The distinct paths of all descendant elements in an XML fragment\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root(s) to start from</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "distinct-nodes", "qname" : "functx:distinct-nodes", "signature" : "($nodes as node()*) as node()*", "description" : " The distinct XML nodes in a sequence (by node identity)\n", "summary" : "<p> The distinct XML nodes in a sequence (by node identity)\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node sequence</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "duration-from-timezone", "qname" : "functx:duration-from-timezone", "signature" : "($timezone as xs:string) as xs:dayTimeDuration", "description" : " Converts a timezone like \"-05:00\" or \"Z\" into xs:dayTimeDuration\n", "summary" : "<p> Converts a timezone like \"-05:00\" or \"Z\" into xs:dayTimeDuration\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "timezone", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the time zone, in (+|-)HH:MM format</div>" } ], "returns" : { "type" : "xs:dayTimeDuration", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "dynamic-path", "qname" : "functx:dynamic-path", "signature" : "($parent as node(), $path as xs:string) as item()*", "description" : " Dynamically evaluates a simple XPath path\n", "summary" : "<p> Dynamically evaluates a simple XPath path\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "parent", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root to start from</div>" }, { "name" : "path", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the path expression</div>" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "escape-for-regex", "qname" : "functx:escape-for-regex", "signature" : "($arg as xs:string?) as xs:string", "description" : " Escapes regex special characters\n", "summary" : "<p> Escapes regex special characters\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to escape</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "exclusive-or", "qname" : "functx:exclusive-or", "signature" : "($arg1 as xs:boolean?, $arg2 as xs:boolean?) as xs:boolean?", "description" : " Whether one (and only one) of two boolean values is true\n", "summary" : "<p> Whether one (and only one) of two boolean values is true\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg1", "type" : "xs:boolean", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first boolean value</div>" }, { "name" : "arg2", "type" : "xs:boolean", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second boolean value</div>" } ], "returns" : { "type" : "xs:boolean?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "first-day-of-month", "qname" : "functx:first-day-of-month", "signature" : "($date as xs:anyAtomicType?) as xs:date?", "description" : " The first day of the month of a date\n", "summary" : "<p> The first day of the month of a date\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "first-day-of-year", "qname" : "functx:first-day-of-year", "signature" : "($date as xs:anyAtomicType?) as xs:date?", "description" : " The first day of the year of a date\n", "summary" : "<p> The first day of the year of a date\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "first-node", "qname" : "functx:first-node", "signature" : "($nodes as node()*) as node()?", "description" : " The XML node in a sequence that appears first in document order\n", "summary" : "<p> The XML node in a sequence that appears first in document order\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes</div>" } ], "returns" : { "type" : "node()?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "follows-not-descendant", "qname" : "functx:follows-not-descendant", "signature" : "($a as node()?, $b as node()?) as xs:boolean", "description" : " Whether an XML node follows another without being its descendant\n", "summary" : "<p> Whether an XML node follows another without being its descendant\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "a", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first node</div>" }, { "name" : "b", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second node</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "format-as-title-en", "qname" : "functx:format-as-title-en", "signature" : "($titles as xs:string*) as xs:string*", "description" : " Moves title words like \"the\" and \"a\" to the end of strings\n", "summary" : "<p> Moves title words like \"the\" and \"a\" to the end of strings\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "titles", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the titles to format</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "fragment-from-uri", "qname" : "functx:fragment-from-uri", "signature" : "($uri as xs:string?) as xs:string?", "description" : " Returns the fragment from a URI\n", "summary" : "<p> Returns the fragment from a URI\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "uri", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the URI</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "get-matches-and-non-matches", "qname" : "functx:get-matches-and-non-matches", "signature" : "($string as xs:string?, $regex as xs:string) as element(*)*", "description" : " Splits a string into matching and non-matching regions\n", "summary" : "<p> Splits a string into matching and non-matching regions\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "string", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to split</div>" }, { "name" : "regex", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the pattern</div>" } ], "returns" : { "type" : "element(*)*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "get-matches", "qname" : "functx:get-matches", "signature" : "($string as xs:string?, $regex as xs:string) as xs:string*", "description" : " Return the matching regions of a string\n", "summary" : "<p> Return the matching regions of a string\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "string", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to split</div>" }, { "name" : "regex", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the pattern</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "has-element-only-content", "qname" : "functx:has-element-only-content", "signature" : "($element as element(*)) as xs:boolean", "description" : " Whether an element has element-only content\n", "summary" : "<p> Whether an element has element-only content\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "element", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the XML element to test</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "has-empty-content", "qname" : "functx:has-empty-content", "signature" : "($element as element(*)) as xs:boolean", "description" : " Whether an element has empty content\n", "summary" : "<p> Whether an element has empty content\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "element", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the XML element to test</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "has-mixed-content", "qname" : "functx:has-mixed-content", "signature" : "($element as element(*)) as xs:boolean", "description" : " Whether an element has mixed content\n", "summary" : "<p> Whether an element has mixed content\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "element", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the XML element to test</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "has-simple-content", "qname" : "functx:has-simple-content", "signature" : "($element as element(*)) as xs:boolean", "description" : " Whether an element has simple content\n", "summary" : "<p> Whether an element has simple content\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "element", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the XML element to test</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "id-from-element", "qname" : "functx:id-from-element", "signature" : "($element as element(*)?) as xs:string?", "description" : " Gets the ID of an XML element\n", "summary" : "<p> Gets the ID of an XML element\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "element", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "id-untyped", "qname" : "functx:id-untyped", "signature" : "($node as node()*, $id as xs:anyAtomicType) as element(*)*", "description" : " Gets XML element(s) that have an attribute with a particular value\n", "summary" : "<p> Gets XML element(s) that have an attribute with a particular value\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root node(s) to start from</div>" }, { "name" : "id", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the \"id\" to find</div>" } ], "returns" : { "type" : "element(*)*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "if-absent", "qname" : "functx:if-absent", "signature" : "($arg as item()*, $value as item()*) as item()*", "description" : " The first argument if it is not empty, otherwise the second argument\n", "summary" : "<p> The first argument if it is not empty, otherwise the second argument\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the item(s) that may be absent</div>" }, { "name" : "value", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the item(s) to use if the item is absent</div>" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "if-empty", "qname" : "functx:if-empty", "signature" : "($arg as item()?, $value as item()*) as item()*", "description" : " The first argument if it is not blank, otherwise the second argument\n", "summary" : "<p> The first argument if it is not blank, otherwise the second argument\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node that may be empty</div>" }, { "name" : "value", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the item(s) to use if the node is empty</div>" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "index-of-deep-equal-node", "qname" : "functx:index-of-deep-equal-node", "signature" : "($nodes as node()*, $nodeToFind as node()) as xs:integer*", "description" : " The position of a node in a sequence, based on contents and attributes\n", "summary" : "<p> The position of a node in a sequence, based on contents and attributes\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node sequence</div>" }, { "name" : "nodeToFind", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node to find in the sequence</div>" } ], "returns" : { "type" : "xs:integer*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "index-of-match-first", "qname" : "functx:index-of-match-first", "signature" : "($arg as xs:string?, $pattern as xs:string) as xs:integer?", "description" : " The first position of a matching substring\n", "summary" : "<p> The first position of a matching substring\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string</div>" }, { "name" : "pattern", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the pattern to match</div>" } ], "returns" : { "type" : "xs:integer?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "index-of-node", "qname" : "functx:index-of-node", "signature" : "($nodes as node()*, $nodeToFind as node()) as xs:integer*", "description" : " The position of a node in a sequence, based on node identity\n", "summary" : "<p> The position of a node in a sequence, based on node identity\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node sequence</div>" }, { "name" : "nodeToFind", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node to find in the sequence</div>" } ], "returns" : { "type" : "xs:integer*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "index-of-string-first", "qname" : "functx:index-of-string-first", "signature" : "($arg as xs:string?, $substring as xs:string) as xs:integer?", "description" : " The first position of a substring\n", "summary" : "<p> The first position of a substring\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string</div>" }, { "name" : "substring", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the substring to find</div>" } ], "returns" : { "type" : "xs:integer?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "index-of-string-last", "qname" : "functx:index-of-string-last", "signature" : "($arg as xs:string?, $substring as xs:string) as xs:integer?", "description" : " The last position of a substring\n", "summary" : "<p> The last position of a substring\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string</div>" }, { "name" : "substring", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the substring to find</div>" } ], "returns" : { "type" : "xs:integer?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "index-of-string", "qname" : "functx:index-of-string", "signature" : "($arg as xs:string?, $substring as xs:string) as xs:integer*", "description" : " The position(s) of a substring\n", "summary" : "<p> The position(s) of a substring\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string</div>" }, { "name" : "substring", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the substring to find</div>" } ], "returns" : { "type" : "xs:integer*", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "insert-string", "qname" : "functx:insert-string", "signature" : "($originalString as xs:string?, $stringToInsert as xs:string?, $pos as xs:integer) as xs:string", "description" : " Inserts a string at a specified position\n", "summary" : "<p> Inserts a string at a specified position\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "originalString", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the original string to insert into</div>" }, { "name" : "stringToInsert", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to insert</div>" }, { "name" : "pos", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the position</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "is-a-number", "qname" : "functx:is-a-number", "signature" : "($value as xs:anyAtomicType?) as xs:boolean", "description" : " Whether a value is numeric\n", "summary" : "<p> Whether a value is numeric\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "value", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value to test</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "is-absolute-uri", "qname" : "functx:is-absolute-uri", "signature" : "($uri as xs:string?) as xs:boolean", "description" : " Whether a URI is absolute\n", "summary" : "<p> Whether a URI is absolute\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "uri", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the URI to test</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "is-ancestor", "qname" : "functx:is-ancestor", "signature" : "($node1 as node(), $node2 as node()) as xs:boolean", "description" : " Whether an XML node is an ancestor of another node\n", "summary" : "<p> Whether an XML node is an ancestor of another node\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node1", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first node</div>" }, { "name" : "node2", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second node</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "is-descendant", "qname" : "functx:is-descendant", "signature" : "($node1 as node(), $node2 as node()) as xs:boolean", "description" : " Whether an XML node is a descendant of another node\n", "summary" : "<p> Whether an XML node is a descendant of another node\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node1", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first node</div>" }, { "name" : "node2", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second node</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "is-leap-year", "qname" : "functx:is-leap-year", "signature" : "($date as xs:anyAtomicType?) as xs:boolean", "description" : " Whether a date falls in a leap year\n", "summary" : "<p> Whether a date falls in a leap year\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date or year</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "is-node-among-descendants-deep-equal", "qname" : "functx:is-node-among-descendants-deep-equal", "signature" : "($node as node()?, $seq as node()*) as xs:boolean", "description" : " Whether an XML node is among the descendants of a sequence, based on contents and attributes\n", "summary" : "<p> Whether an XML node is among the descendants of a sequence, based on contents and attributes\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node to test</div>" }, { "name" : "seq", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes to search</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "is-node-among-descendants", "qname" : "functx:is-node-among-descendants", "signature" : "($node as node()?, $seq as node()*) as xs:boolean", "description" : " Whether an XML node is among the descendants of a sequence, based on node identity\n", "summary" : "<p> Whether an XML node is among the descendants of a sequence, based on node identity\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node to test</div>" }, { "name" : "seq", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes to search</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "is-node-in-sequence-deep-equal", "qname" : "functx:is-node-in-sequence-deep-equal", "signature" : "($node as node()?, $seq as node()*) as xs:boolean", "description" : " Whether an XML node is in a sequence, based on contents and attributes\n", "summary" : "<p> Whether an XML node is in a sequence, based on contents and attributes\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node to test</div>" }, { "name" : "seq", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes to search</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "is-node-in-sequence", "qname" : "functx:is-node-in-sequence", "signature" : "($node as node()?, $seq as node()*) as xs:boolean", "description" : " Whether an XML node is in a sequence, based on node identity\n", "summary" : "<p> Whether an XML node is in a sequence, based on node identity\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node to test</div>" }, { "name" : "seq", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes to search</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "is-value-in-sequence", "qname" : "functx:is-value-in-sequence", "signature" : "($value as xs:anyAtomicType?, $seq as xs:anyAtomicType*) as xs:boolean", "description" : " Whether an atomic value appears in a sequence\n", "summary" : "<p> Whether an atomic value appears in a sequence\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "value", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the atomic value to test</div>" }, { "name" : "seq", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of values to search</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "last-day-of-month", "qname" : "functx:last-day-of-month", "signature" : "($date as xs:anyAtomicType?) as xs:date?", "description" : " The last day of the month of a date\n", "summary" : "<p> The last day of the month of a date\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "last-day-of-year", "qname" : "functx:last-day-of-year", "signature" : "($date as xs:anyAtomicType?) as xs:date?", "description" : " The last day of the month of a date\n", "summary" : "<p> The last day of the month of a date\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "last-node", "qname" : "functx:last-node", "signature" : "($nodes as node()*) as node()?", "description" : " The XML node in a sequence that is last in document order\n", "summary" : "<p> The XML node in a sequence that is last in document order\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes</div>" } ], "returns" : { "type" : "node()?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "leaf-elements", "qname" : "functx:leaf-elements", "signature" : "($root as node()?) as element(*)*", "description" : " All XML elements that don't have any child elements\n", "summary" : "<p> All XML elements that don't have any child elements\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "root", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root</div>" } ], "returns" : { "type" : "element(*)*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "left-trim", "qname" : "functx:left-trim", "signature" : "($arg as xs:string?) as xs:string", "description" : " Trims leading whitespace\n", "summary" : "<p> Trims leading whitespace\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to trim</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "line-count", "qname" : "functx:line-count", "signature" : "($arg as xs:string?) as xs:integer", "description" : " The number of lines\n", "summary" : "<p> The number of lines\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to test</div>" } ], "returns" : { "type" : "xs:integer", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "lines", "qname" : "functx:lines", "signature" : "($arg as xs:string?) as xs:string*", "description" : " Split a string into separate lines\n", "summary" : "<p> Split a string into separate lines\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to split</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "max-depth", "qname" : "functx:max-depth", "signature" : "($root as node()?) as xs:integer?", "description" : " The maximum depth of elements in an XML tree\n", "summary" : "<p> The maximum depth of elements in an XML tree\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "root", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root to start from</div>" } ], "returns" : { "type" : "xs:integer?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "max-determine-type", "qname" : "functx:max-determine-type", "signature" : "($seq as xs:anyAtomicType*) as xs:anyAtomicType?", "description" : " The maximum value in a sequence, figuring out its type (numeric or string)\n", "summary" : "<p> The maximum value in a sequence, figuring out its type (numeric or string)\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of values to test</div>" } ], "returns" : { "type" : "xs:anyAtomicType?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "max-line-length", "qname" : "functx:max-line-length", "signature" : "($arg as xs:string?) as xs:integer", "description" : " The maximum line length\n", "summary" : "<p> The maximum line length\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to test</div>" } ], "returns" : { "type" : "xs:integer", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "max-node", "qname" : "functx:max-node", "signature" : "($nodes as node()*) as node()*", "description" : " The XML node whose typed value is the maximum\n", "summary" : "<p> The XML node whose typed value is the maximum\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes to test</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "max-string", "qname" : "functx:max-string", "signature" : "($strings as xs:anyAtomicType*) as xs:string?", "description" : " The maximum of a sequence of values, treating them like strings\n", "summary" : "<p> The maximum of a sequence of values, treating them like strings\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "strings", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of values</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "min-determine-type", "qname" : "functx:min-determine-type", "signature" : "($seq as xs:anyAtomicType*) as xs:anyAtomicType?", "description" : " The minimum value in a sequence, figuring out its type (numeric or string)\n", "summary" : "<p> The minimum value in a sequence, figuring out its type (numeric or string)\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of values to test</div>" } ], "returns" : { "type" : "xs:anyAtomicType?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "min-node", "qname" : "functx:min-node", "signature" : "($nodes as node()*) as node()*", "description" : " The XML node whose typed value is the minimum\n", "summary" : "<p> The XML node whose typed value is the minimum\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of nodes to test</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "min-non-empty-string", "qname" : "functx:min-non-empty-string", "signature" : "($strings as xs:string*) as xs:string?", "description" : " The minimum of a sequence of strings, ignoring \"empty\" values\n", "summary" : "<p> The minimum of a sequence of strings, ignoring \"empty\" values\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "strings", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of strings to search</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "min-string", "qname" : "functx:min-string", "signature" : "($strings as xs:anyAtomicType*) as xs:string?", "description" : " The minimum of a sequence of values, treating them like strings\n", "summary" : "<p> The minimum of a sequence of values, treating them like strings\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "strings", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of strings</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "mmddyyyy-to-date", "qname" : "functx:mmddyyyy-to-date", "signature" : "($dateString as xs:string?) as xs:date?", "description" : " Converts a string with format MMDDYYYY (with any delimiters) to a date\n", "summary" : "<p> Converts a string with format MMDDYYYY (with any delimiters) to a date\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "dateString", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the MMDDYYYY string</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "month-abbrev-en", "qname" : "functx:month-abbrev-en", "signature" : "($date as xs:anyAtomicType?) as xs:string?", "description" : " The month of a date as an abbreviated word (Jan, Feb, etc.)\n", "summary" : "<p> The month of a date as an abbreviated word (Jan, Feb, etc.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "month-name-en", "qname" : "functx:month-name-en", "signature" : "($date as xs:anyAtomicType?) as xs:string?", "description" : " The month of a date as a word (January, February, etc.)\n", "summary" : "<p> The month of a date as a word (January, February, etc.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "name-test", "qname" : "functx:name-test", "signature" : "($testname as xs:string?, $names as xs:string*) as xs:boolean", "description" : " Whether a name matches a list of names or name wildcards\n", "summary" : "<p> Whether a name matches a list of names or name wildcards\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "testname", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name to test</div>" }, { "name" : "names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the list of names or name wildcards</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "namespaces-in-use", "qname" : "functx:namespaces-in-use", "signature" : "($root as node()?) as xs:anyURI*", "description" : " A list of namespaces used in element/attribute names in an XML fragment\n", "summary" : "<p> A list of namespaces used in element/attribute names in an XML fragment\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "root", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root node to start from</div>" } ], "returns" : { "type" : "xs:anyURI*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "next-day", "qname" : "functx:next-day", "signature" : "($date as xs:anyAtomicType?) as xs:date?", "description" : " The next day\n", "summary" : "<p> The next day\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "node-kind", "qname" : "functx:node-kind", "signature" : "($nodes as node()*) as xs:string*", "description" : " The XML node kind (element, attribute, text, etc.)\n", "summary" : "<p> The XML node kind (element, attribute, text, etc.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node(s) whose kind you want to determine</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "non-distinct-values", "qname" : "functx:non-distinct-values", "signature" : "($seq as xs:anyAtomicType*) as xs:anyAtomicType*", "description" : " Returns any values that appear more than once in a sequence\n", "summary" : "<p> Returns any values that appear more than once in a sequence\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of values</div>" } ], "returns" : { "type" : "xs:anyAtomicType*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "number-of-matches", "qname" : "functx:number-of-matches", "signature" : "($arg as xs:string?, $pattern as xs:string) as xs:integer", "description" : " The number of regions that match a pattern\n", "summary" : "<p> The number of regions that match a pattern\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to test</div>" }, { "name" : "pattern", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the regular expression</div>" } ], "returns" : { "type" : "xs:integer", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "open-ref-document", "qname" : "functx:open-ref-document", "signature" : "($refNode as node()) as document()", "description" : " Resolves a relative URI and references it, returning an XML document\n", "summary" : "<p> Resolves a relative URI and references it, returning an XML document\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "refNode", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> a node whose value is a relative URI reference</div>" } ], "returns" : { "type" : "document()", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "ordinal-number-en", "qname" : "functx:ordinal-number-en", "signature" : "($num as xs:integer?) as xs:string", "description" : " Reformats a number as an ordinal number, e.g. 1st, 2nd, 3rd.\n", "summary" : "<p> Reformats a number as an ordinal number, e.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "num", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "pad-integer-to-length", "qname" : "functx:pad-integer-to-length", "signature" : "($integerToPad as xs:anyAtomicType?, $length as xs:integer) as xs:string", "description" : " Pads an integer to a desired length by adding leading zeros\n", "summary" : "<p> Pads an integer to a desired length by adding leading zeros\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "integerToPad", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the integer to pad</div>" }, { "name" : "length", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the desired length</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "pad-string-to-length", "qname" : "functx:pad-string-to-length", "signature" : "($stringToPad as xs:string?, $padChar as xs:string, $length as xs:integer) as xs:string", "description" : " Pads a string to a desired length\n", "summary" : "<p> Pads a string to a desired length\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "stringToPad", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to pad</div>" }, { "name" : "padChar", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the character(s) to use as padding</div>" }, { "name" : "length", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the desired length</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "path-to-node-with-pos", "qname" : "functx:path-to-node-with-pos", "signature" : "($node as node()?) as xs:string", "description" : " A unique path to an XML node (or sequence of nodes)\n", "summary" : "<p> A unique path to an XML node (or sequence of nodes)\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node sequence</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "path-to-node", "qname" : "functx:path-to-node", "signature" : "($nodes as node()*) as xs:string*", "description" : " A path to an XML node (or sequence of nodes)\n", "summary" : "<p> A path to an XML node (or sequence of nodes)\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node sequence</div>" } ], "returns" : { "type" : "xs:string*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "precedes-not-ancestor", "qname" : "functx:precedes-not-ancestor", "signature" : "($a as node()?, $b as node()?) as xs:boolean", "description" : " Whether an XML node precedes another without being its ancestor\n", "summary" : "<p> Whether an XML node precedes another without being its ancestor\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "a", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first node</div>" }, { "name" : "b", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second node</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "previous-day", "qname" : "functx:previous-day", "signature" : "($date as xs:anyAtomicType?) as xs:date?", "description" : " The previous day\n", "summary" : "<p> The previous day\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "date", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the date</div>" } ], "returns" : { "type" : "xs:date?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "remove-attributes-deep", "qname" : "functx:remove-attributes-deep", "signature" : "($nodes as node()*, $names as xs:string*) as node()*", "description" : " Removes attributes from an XML fragment, based on name\n", "summary" : "<p> Removes attributes from an XML fragment, based on name\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root(s) to start from</div>" }, { "name" : "names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the names of the attributes to remove, or * for all attributes</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "remove-attributes", "qname" : "functx:remove-attributes", "signature" : "($elements as element(*)*, $names as xs:string*) as element(*)", "description" : " Removes attributes from an XML element, based on name\n", "summary" : "<p> Removes attributes from an XML element, based on name\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "elements", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element(s) from which to remove the attributes</div>" }, { "name" : "names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the names of the attributes to remove, or * for all attributes</div>" } ], "returns" : { "type" : "element(*)", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "remove-elements-deep", "qname" : "functx:remove-elements-deep", "signature" : "($nodes as node()*, $names as xs:string*) as node()*", "description" : " Removes descendant elements from an XML node, based on name\n", "summary" : "<p> Removes descendant elements from an XML node, based on name\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> root(s) to start from</div>" }, { "name" : "names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the names of the elements to remove</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "remove-elements-not-contents", "qname" : "functx:remove-elements-not-contents", "signature" : "($nodes as node()*, $names as xs:string*) as node()*", "description" : " Removes descendant XML elements but keeps their content\n", "summary" : "<p> Removes descendant XML elements but keeps their content\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "nodes", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the root(s) to start from</div>" }, { "name" : "names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the names of the elements to remove</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "remove-elements", "qname" : "functx:remove-elements", "signature" : "($elements as element(*)*, $names as xs:string*) as element(*)*", "description" : " Removes child elements from an XML node, based on name\n", "summary" : "<p> Removes child elements from an XML node, based on name\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "elements", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element(s) from which you wish to remove the children</div>" }, { "name" : "names", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the names of the child elements to remove</div>" } ], "returns" : { "type" : "element(*)*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "repeat-string", "qname" : "functx:repeat-string", "signature" : "($stringToRepeat as xs:string?, $count as xs:integer) as xs:string", "description" : " Repeats a string a given number of times\n", "summary" : "<p> Repeats a string a given number of times\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "stringToRepeat", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to repeat</div>" }, { "name" : "count", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the desired number of copies</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "replace-beginning", "qname" : "functx:replace-beginning", "signature" : "($arg as xs:string?, $pattern as xs:string, $replacement as xs:string) as xs:string", "description" : " Replaces the beginning of a string, up to a matched pattern\n", "summary" : "<p> Replaces the beginning of a string, up to a matched pattern\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the entire string to change</div>" }, { "name" : "pattern", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the pattern of characters to replace up to</div>" }, { "name" : "replacement", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the replacement string</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "replace-element-values", "qname" : "functx:replace-element-values", "signature" : "($elements as element(*)*, $values as xs:anyAtomicType*) as element(*)*", "description" : " Updates the content of one or more elements\n", "summary" : "<p> Updates the content of one or more elements\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "elements", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the elements whose content you wish to replace</div>" }, { "name" : "values", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the replacement values</div>" } ], "returns" : { "type" : "element(*)*", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "replace-first", "qname" : "functx:replace-first", "signature" : "($arg as xs:string?, $pattern as xs:string, $replacement as xs:string) as xs:string", "description" : " Replaces the first match of a pattern\n", "summary" : "<p> Replaces the first match of a pattern\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the entire string to change</div>" }, { "name" : "pattern", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the pattern of characters to replace</div>" }, { "name" : "replacement", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the replacement string</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "replace-multi", "qname" : "functx:replace-multi", "signature" : "($arg as xs:string?, $changeFrom as xs:string*, $changeTo as xs:string*) as xs:string?", "description" : " Performs multiple replacements, using pairs of replace parameters\n", "summary" : "<p> Performs multiple replacements, using pairs of replace parameters\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to manipulate</div>" }, { "name" : "changeFrom", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of strings or patterns to change from</div>" }, { "name" : "changeTo", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence of strings to change to</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "reverse-string", "qname" : "functx:reverse-string", "signature" : "($arg as xs:string?) as xs:string", "description" : " Reverses the order of characters\n", "summary" : "<p> Reverses the order of characters\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to reverse</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "right-trim", "qname" : "functx:right-trim", "signature" : "($arg as xs:string?) as xs:string", "description" : " Trims trailing whitespace\n", "summary" : "<p> Trims trailing whitespace\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to trim</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "scheme-from-uri", "qname" : "functx:scheme-from-uri", "signature" : "($uri as xs:string?) as xs:string?", "description" : " Returns the scheme from a URI\n", "summary" : "<p> Returns the scheme from a URI\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "uri", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the URI</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "sequence-deep-equal", "qname" : "functx:sequence-deep-equal", "signature" : "($seq1 as item()*, $seq2 as item()*) as xs:boolean", "description" : " Whether two sequences have the same XML node content and/or values\n", "summary" : "<p> Whether two sequences have the same XML node content and/or values\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq1", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first sequence</div>" }, { "name" : "seq2", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second sequence</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "sequence-node-equal-any-order", "qname" : "functx:sequence-node-equal-any-order", "signature" : "($seq1 as node()*, $seq2 as node()*) as xs:boolean", "description" : " Whether two sequences contain the same XML nodes, regardless of order\n", "summary" : "<p> Whether two sequences contain the same XML nodes, regardless of order\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq1", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first sequence of nodes</div>" }, { "name" : "seq2", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second sequence of nodes</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "sequence-node-equal", "qname" : "functx:sequence-node-equal", "signature" : "($seq1 as node()*, $seq2 as node()*) as xs:boolean", "description" : " Whether two sequences contain the same XML nodes, in the same order\n", "summary" : "<p> Whether two sequences contain the same XML nodes, in the same order\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq1", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first sequence of nodes</div>" }, { "name" : "seq2", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second sequence of nodes</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "sequence-type", "qname" : "functx:sequence-type", "signature" : "($items as item()*) as xs:string", "description" : " The sequence type that represents a sequence of nodes or values\n", "summary" : "<p> The sequence type that represents a sequence of nodes or values\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the items whose sequence type you want to determine</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "siblings-same-name", "qname" : "functx:siblings-same-name", "signature" : "($element as element(*)?) as element(*)*", "description" : " The siblings of an XML element that have the same name\n", "summary" : "<p> The siblings of an XML element that have the same name\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "element", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node</div>" } ], "returns" : { "type" : "element(*)*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "siblings", "qname" : "functx:siblings", "signature" : "($node as node()?) as node()*", "description" : " The siblings of an XML node\n", "summary" : "<p> The siblings of an XML node\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "node", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the node</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "sort-as-numeric", "qname" : "functx:sort-as-numeric", "signature" : "($seq as item()*) as item()*", "description" : " Sorts a sequence of numeric values or nodes\n", "summary" : "<p> Sorts a sequence of numeric values or nodes\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence to sort</div>" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "sort-case-insensitive", "qname" : "functx:sort-case-insensitive", "signature" : "($seq as item()*) as item()*", "description" : " Sorts a sequence of values or nodes regardless of capitalization\n", "summary" : "<p> Sorts a sequence of values or nodes regardless of capitalization\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence to sort</div>" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "sort-document-order", "qname" : "functx:sort-document-order", "signature" : "($seq as node()*) as node()*", "description" : " Sorts a sequence of nodes in document order\n", "summary" : "<p> Sorts a sequence of nodes in document order\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "node()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence to sort</div>" } ], "returns" : { "type" : "node()*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "sort", "qname" : "functx:sort", "signature" : "($seq as item()*) as item()*", "description" : " Sorts a sequence of values or nodes\n", "summary" : "<p> Sorts a sequence of values or nodes\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "seq", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the sequence to sort</div>" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-after-if-contains", "qname" : "functx:substring-after-if-contains", "signature" : "($arg as xs:string?, $delim as xs:string) as xs:string?", "description" : " Performs substring-after, returning the entire string if it does not contain the delimiter\n", "summary" : "<p> Performs substring-after, returning the entire string if it does not contain the delimiter\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "delim", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the delimiter</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-after-last-match", "qname" : "functx:substring-after-last-match", "signature" : "($arg as xs:string?, $regex as xs:string) as xs:string", "description" : " The substring after the last text that matches a regex\n", "summary" : "<p> The substring after the last text that matches a regex\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "regex", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the regular expression</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-after-last", "qname" : "functx:substring-after-last", "signature" : "($arg as xs:string?, $delim as xs:string) as xs:string", "description" : " The substring after the last occurrence of a delimiter\n", "summary" : "<p> The substring after the last occurrence of a delimiter\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "delim", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the delimiter</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-after-match", "qname" : "functx:substring-after-match", "signature" : "($arg as xs:string?, $regex as xs:string) as xs:string?", "description" : " The substring after the first text that matches a regex\n", "summary" : "<p> The substring after the first text that matches a regex\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "regex", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the regular expression</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-before-if-contains", "qname" : "functx:substring-before-if-contains", "signature" : "($arg as xs:string?, $delim as xs:string) as xs:string?", "description" : " Performs substring-before, returning the entire string if it does not contain the delimiter\n", "summary" : "<p> Performs substring-before, returning the entire string if it does not contain the delimiter\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "delim", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the delimiter</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-before-last-match", "qname" : "functx:substring-before-last-match", "signature" : "($arg as xs:string?, $regex as xs:string) as xs:string?", "description" : " The substring after the first text that matches a regex\n", "summary" : "<p> The substring after the first text that matches a regex\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "regex", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the regular expression</div>" } ], "returns" : { "type" : "xs:string?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-before-last", "qname" : "functx:substring-before-last", "signature" : "($arg as xs:string?, $delim as xs:string) as xs:string", "description" : " The substring before the last occurrence of a delimiter\n", "summary" : "<p> The substring before the last occurrence of a delimiter\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "delim", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the delimiter</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "substring-before-match", "qname" : "functx:substring-before-match", "signature" : "($arg as xs:string?, $regex as xs:string) as xs:string", "description" : " The substring before the last text that matches a regex\n", "summary" : "<p> The substring before the last text that matches a regex\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to substring</div>" }, { "name" : "regex", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the regular expression</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "time", "qname" : "functx:time", "signature" : "($hour as xs:anyAtomicType, $minute as xs:anyAtomicType, $second as xs:anyAtomicType) as xs:time", "description" : " Construct a time from an hour, minute and second\n", "summary" : "<p> Construct a time from an hour, minute and second\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "hour", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the hour</div>" }, { "name" : "minute", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the minute</div>" }, { "name" : "second", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second</div>" } ], "returns" : { "type" : "xs:time", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "timezone-from-duration", "qname" : "functx:timezone-from-duration", "signature" : "($duration as xs:dayTimeDuration) as xs:string", "description" : " Converts an xs:dayTimeDuration into a timezone like \"-05:00\" or \"Z\"\n", "summary" : "<p> Converts an xs:dayTimeDuration into a timezone like \"-05:00\" or \"Z\"\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "duration", "type" : "xs:dayTimeDuration", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the duration</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "total-days-from-duration", "qname" : "functx:total-days-from-duration", "signature" : "($duration as xs:dayTimeDuration?) as xs:decimal?", "description" : " The total number of days in a dayTimeDuration\n", "summary" : "<p> The total number of days in a dayTimeDuration\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "duration", "type" : "xs:dayTimeDuration", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the duration</div>" } ], "returns" : { "type" : "xs:decimal?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "total-hours-from-duration", "qname" : "functx:total-hours-from-duration", "signature" : "($duration as xs:dayTimeDuration?) as xs:decimal?", "description" : " The total number of hours in a dayTimeDuration\n", "summary" : "<p> The total number of hours in a dayTimeDuration\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "duration", "type" : "xs:dayTimeDuration", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the duration</div>" } ], "returns" : { "type" : "xs:decimal?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "total-minutes-from-duration", "qname" : "functx:total-minutes-from-duration", "signature" : "($duration as xs:dayTimeDuration?) as xs:decimal?", "description" : " The total number of minutes in a dayTimeDuration\n", "summary" : "<p> The total number of minutes in a dayTimeDuration\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "duration", "type" : "xs:dayTimeDuration", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the duration</div>" } ], "returns" : { "type" : "xs:decimal?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "total-months-from-duration", "qname" : "functx:total-months-from-duration", "signature" : "($duration as xs:yearMonthDuration?) as xs:decimal?", "description" : " The total number of months in a yearMonthDuration\n", "summary" : "<p> The total number of months in a yearMonthDuration\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "duration", "type" : "xs:yearMonthDuration", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the duration</div>" } ], "returns" : { "type" : "xs:decimal?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "total-seconds-from-duration", "qname" : "functx:total-seconds-from-duration", "signature" : "($duration as xs:dayTimeDuration?) as xs:decimal?", "description" : " The total number of seconds in a dayTimeDuration\n", "summary" : "<p> The total number of seconds in a dayTimeDuration\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "duration", "type" : "xs:dayTimeDuration", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the duration</div>" } ], "returns" : { "type" : "xs:decimal?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "total-years-from-duration", "qname" : "functx:total-years-from-duration", "signature" : "($duration as xs:yearMonthDuration?) as xs:decimal?", "description" : " The total number of years in a yearMonthDuration\n", "summary" : "<p> The total number of years in a yearMonthDuration\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "duration", "type" : "xs:yearMonthDuration", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the duration</div>" } ], "returns" : { "type" : "xs:decimal?", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "trim", "qname" : "functx:trim", "signature" : "($arg as xs:string?) as xs:string", "description" : " Trims leading and trailing whitespace\n", "summary" : "<p> Trims leading and trailing whitespace\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to trim</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 3, "name" : "update-attributes", "qname" : "functx:update-attributes", "signature" : "($elements as element(*)*, $attrNames as xs:QName*, $attrValues as xs:anyAtomicType*) as element(*)?", "description" : " Updates the attribute value of an XML element\n", "summary" : "<p> Updates the attribute value of an XML element\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "elements", "type" : "element(*)", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the element(s) for which you wish to update the attribute</div>" }, { "name" : "attrNames", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name(s) of the attribute(s) to add</div>" }, { "name" : "attrValues", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value(s) of the attribute(s) to add</div>" } ], "returns" : { "type" : "element(*)?", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "value-except", "qname" : "functx:value-except", "signature" : "($arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType*", "description" : " The values in one sequence that aren't in another sequence\n", "summary" : "<p> The values in one sequence that aren't in another sequence\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg1", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first sequence</div>" }, { "name" : "arg2", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second sequence</div>" } ], "returns" : { "type" : "xs:anyAtomicType*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "value-intersect", "qname" : "functx:value-intersect", "signature" : "($arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType*", "description" : " The intersection of two sequences of values\n", "summary" : "<p> The intersection of two sequences of values\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg1", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first sequence</div>" }, { "name" : "arg2", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second sequence</div>" } ], "returns" : { "type" : "xs:anyAtomicType*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "value-union", "qname" : "functx:value-union", "signature" : "($arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType*", "description" : " The union of two sequences of values\n", "summary" : "<p> The union of two sequences of values\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg1", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the first sequence</div>" }, { "name" : "arg2", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the second sequence</div>" } ], "returns" : { "type" : "xs:anyAtomicType*", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "word-count", "qname" : "functx:word-count", "signature" : "($arg as xs:string?) as xs:integer", "description" : " The number of words\n", "summary" : "<p> The number of words\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to measure</div>" } ], "returns" : { "type" : "xs:integer", "description" : "" }, "errors" : [  ] }, { "arity" : 1, "name" : "words-to-camel-case", "qname" : "functx:words-to-camel-case", "signature" : "($arg as xs:string?) as xs:string", "description" : " Turns a string of words into camelCase\n", "summary" : "<p> Turns a string of words into camelCase\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "arg", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the string to modify</div>" } ], "returns" : { "type" : "xs:string", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "wrap-values-in-elements", "qname" : "functx:wrap-values-in-elements", "signature" : "($values as xs:anyAtomicType*, $elementName as xs:QName) as element(*)*", "description" : " Wraps a sequence of atomic values in XML elements\n", "summary" : "<p> Wraps a sequence of atomic values in XML elements\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "values", "type" : "xs:anyAtomicType", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the values to wrap in elements</div>" }, { "name" : "elementName", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name of the elements to construct</div>" } ], "returns" : { "type" : "element(*)*", "description" : "" }, "errors" : [  ] }, { "arity" : 2, "name" : "yearMonthDuration", "qname" : "functx:yearMonthDuration", "signature" : "($years as xs:decimal?, $months as xs:integer?) as xs:yearMonthDuration", "description" : " Construct a yearMonthDuration from a number of years and months\n", "summary" : "<p> Construct a yearMonthDuration from a number of years and months\n</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "years", "type" : "xs:decimal", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number of years</div>" }, { "name" : "months", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the number of months</div>" } ], "returns" : { "type" : "xs:yearMonthDuration", "description" : "" }, "errors" : [  ] } ], "variables" : [  ] }