{ "ns" : "http://jsoniq.org/functions", "description" : " This module provides the functions defined by the JSONiq specification,\n sections 1.7 (Functions) and 1.10 (Update Primitives). JSONiq extends\n the XQuery specification to also deal with JSON data natively. See\n     http://jsoniq.org/\n for details.\n", "sees" : [  ], "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Markos Zaharioudakis, Matthias Brantner, Ghislain Fourny</xqdoc:author>" ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://www.w3.org/2005/xqt-errors", "prefix" : "err" }, { "uri" : "http://jsoniq.org/errors", "prefix" : "jerr" }, { "uri" : "http://jsoniq.org/functions", "prefix" : "jn" }, { "uri" : "http://jsoniq.org/types", "prefix" : "js" }, { "uri" : "http://zorba.io/modules/schema", "prefix" : "schema" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" } ], "functions" : [ { "arity" : 1, "name" : "decode-from-roundtrip", "qname" : "jn:decode-from-roundtrip", "signature" : "($items as item()*) as item()* external", "description" : " This function decodes non-JSON types previously encoded with\n jn:encode-for-roundtrip.\n Calling this version of the function is equivalent to calling the\n 2 argument version of the function with the second argument\n   { \"prefix\" : \"Q{http://jsoniq.org/roundtrip}\" }\n", "summary" : "<p> This function decodes non-JSON types previously encoded with\n jn:encode-for-roundtrip.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the items to be decoded.</div>" } ], "returns" : { "type" : "item()*", "description" : "the decoded items." }, "errors" : [  ] }, { "arity" : 2, "name" : "decode-from-roundtrip", "qname" : "jn:decode-from-roundtrip", "signature" : "($items as item()*, $options as object()) as item()* external", "description" : " This function decodes non-JSON types previously encoded with\n jn:encode-for-roundtrip.\n The $options parameter contains options for the decoding process.\n Currently the only supported option is \"prefix\". It specifies the prefix\n that determines if this function decodes an item.\n Example:\n   jn:decode-from-roundtrip(\n     { \"nan\" : { \"pre-type\" : \"xs:double\", \"pre-value\" : \"NaN\" } },\n     { \"prefix\" : \"pre-\" }\n   )\n returns the same instance that would be constructed by\n   { \"nan\" : xs:double(\"NaN\") }\n So\n   let $decoded := jn:decode-from-roundtrip(\n           { \"nan\" : { \"pre-type\" : \"xs:double\", \"pre-value\" : \"NaN\" } },\n           { \"prefix\" : \"pre-\" }\n       )\n   let $nan := $decoded(\"nan\")\n   return\n       ($nan instance of xs:double, $nan)\n returns\n   true NaN\n", "summary" : "<p> This function decodes non-JSON types previously encoded with\n jn:encode-for-roundtrip.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the items to be decoded.</div>" }, { "name" : "options", "type" : "object()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the decoding options.</div>" } ], "returns" : { "type" : "item()*", "description" : "the decoded items." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">jerr:JNTY0023 if $options(\"prefix\") is not a string</xqdoc:error>" ] }, { "arity" : 1, "name" : "encode-for-roundtrip", "qname" : "jn:encode-for-roundtrip", "signature" : "($items as item()*) as item()* external", "description" : " This function recursively encodes non-JSON types in such a way that they\n can be serialized as JSON while keeping roundtrip capability.\n Calling this version of the function is equivalent to calling the\n 2 argument version of the function with the second argument\n  {\n    \"prefix\" : \"Q{http://jsoniq.org/roundtrip}\"\n    \"serialization-parameters\" : <serialization-parameters xmlns=\"http://www.w3.org/2010/xslt-xquery-serialization\" xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"/>\n  }\n Note: The computations are made with respect to the static context of the\n caller, so that the schema type definitions are available.\n", "summary" : "<p> This function recursively encodes non-JSON types in such a way that they\n can be serialized as JSON while keeping roundtrip capability.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the items to be encoded.</div>" } ], "returns" : { "type" : "item()*", "description" : "the encoded items." }, "errors" : [  ] }, { "arity" : 2, "name" : "encode-for-roundtrip", "qname" : "jn:encode-for-roundtrip", "signature" : "($items as item()*, $options as object()) as item()* external", "description" : " This function recursively encodes non-JSON types in such a way that they\n can be serialized as JSON while keeping roundtrip capability.\n Note: The computations are made with respect to the static context of the\n caller, so that the schema type definitions are available.\n Example:\n   jn:encode-for-roundtrip(\n     { \"nan\" : xs:double(\"NaN\") },\n     { \"prefix\" : \"pre-\" }\n   )\n returns\n   { \"nan\" : { \"pre-type\" : \"xs:double\", \"pre-value\" : \"NaN\" } }\n", "summary" : "<p> This function recursively encodes non-JSON types in such a way that they\n can be serialized as JSON while keeping roundtrip capability.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the items to be encoded.</div>" }, { "name" : "options", "type" : "object()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the encoding options.</div>" } ], "returns" : { "type" : "item()*", "description" : "the encoded items." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">jerr:JNTY0023 if $options(\"prefix\") is not a string or</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:XQDY0027 if $options(\"serialization-parameters\") is not a valid serialization-parameters element</xqdoc:error>" ] }, { "arity" : 1, "name" : "flatten", "qname" : "jn:flatten", "signature" : "($items as item()*) as item()* external", "description" : " For each item in the given sequence, this function returns the item itself,\n if it is not an array, or a sequence of items \"flattened-out\" from the array.\n Flattening an array means replacing the array with its members, and recursively\n flattening any arrays in the members sequence.\n Note: The function is equivalent to\n   define function jn:flatten($args as item()*)\n   {\n     for $arg in args\n     return\n       if ($arg instance of array())\n       then\n         for $value in $arg[]\n         return\n           if ($value instance of array())\n           then jn:flatten($value[])\n           else $value\n       else\n         $arg\n   };\n", "summary" : "<p> For each item in the given sequence, this function returns the item itself,\n if it is not an array, or a sequence of items \"flattened-out\" from the array.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A sequence of items</div>" } ], "returns" : { "type" : "item()*", "description" : "The flattened-out items of the arrays in $items." }, "errors" : [  ] }, { "arity" : 1, "name" : "keys", "qname" : "jn:keys", "signature" : "($o as item()*) as string* external", "description" : " Returns the set of keys belonging to the objects found inside a given\n sequence of items. The keys are returned in an implementation-defined\n order. Duplicate keys are eliminated.\n", "summary" : "<p> Returns the set of keys belonging to the objects found inside a given\n sequence of items.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "o", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A sequence of items. Only object items are actually processed; items of any other kind are simply skipped.</div>" } ], "returns" : { "type" : "string*", "description" : "The distinct keys of the objects in the input sequence." }, "errors" : [  ] }, { "arity" : 1, "name" : "members", "qname" : "jn:members", "signature" : "($a as item()*) as item()* external", "description" : " Returns the items belonging to the arrays found inside a given sequence\n of items. The items are returned in an implementation-defined order.\n", "summary" : "<p> Returns the items belonging to the arrays found inside a given sequence\n of items.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "a", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A sequence of items. Only array items are actually processed; items of any other kind are simply skipped.</div>" } ], "returns" : { "type" : "item()*", "description" : "The members of the arrays in the input sequence." }, "errors" : [  ] }, { "arity" : 0, "name" : "null", "qname" : "jn:null", "signature" : "() as js:null external", "description" : " Returns the JSON null.\n", "summary" : "<p> Returns the JSON null.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "js:null", "description" : "The JSON null." }, "errors" : [  ] }, { "arity" : 1, "name" : "parse-json", "qname" : "jn:parse-json", "signature" : "($j as string?) as json-item()* external", "description" : " This function parses a given string as JSON and returns a sequence\n of Objects or Arrays.\n Please note that this function allows to parse sequences of whitespace\n separated objects and arrays.\n", "summary" : "<p> This function parses a given string as JSON and returns a sequence\n of Objects or Arrays.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "j", "type" : "string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A string containing a valid JSON text.</div>" } ], "returns" : { "type" : "json-item()*", "description" : "A sequence of JSON Object or Array item." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">jerr:JNDY0021 if the given string is not valid JSON.</xqdoc:error>" ] }, { "arity" : 2, "name" : "parse-json", "qname" : "jn:parse-json", "signature" : "($j as string?, $o as object()) as json-item()* external", "description" : " This function parses a given string as JSON and returns a sequence\n of Objects or Arrays.\n", "summary" : "<p> This function parses a given string as JSON and returns a sequence\n of Objects or Arrays.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "j", "type" : "string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A string containing a valid JSON text.</div>" }, { "name" : "o", "type" : "object()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A JSON object defining options to configure the parser. Allowed options are <ul> <li>jsoniq-multiple-top-level-items: allow parsing of sequences of JSON Objects and Arrays (boolean; default: true)</li> <li>jsoniq-strip-top-level-array: if the top-level JSON item is an array, strip it and return its elements as multiple top-level items (boolean; default: false)</li> </ul></div>" } ], "returns" : { "type" : "json-item()*", "description" : "a sequence of JSON Object or Array item." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">jerr:JNDY0021 if the given string is not valid JSON or if jsoniq-multiple-top-level-items is false and there is additional content after the first JSON Object or Array.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">jerr:JNTY0020 if the value for the option jsoniq-multiple-top-level-items is not of type boolean.</xqdoc:error>" ] }, { "arity" : 2, "name" : "project", "qname" : "jn:project", "signature" : "($items as item()*, $keys as string*) as item()* external", "description" : " For each item in the given sequence, this function returns the item itself,\n if it is not an object, or its \"projected\" copy if it is an object. Projecting\n an object by a set of keys means creating a new object from the specified pairs\n of the source object. Specifically, for each key in $keys, if the object has a\n pair with that key, then a copy of that pair is included in the new object.\n", "summary" : "<p> For each item in the given sequence, this function returns the item itself,\n if it is not an object, or its \"projected\" copy if it is an object.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A sequence of items.</div>" }, { "name" : "keys", "type" : "string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The keys of the pairs to include from each object in $items.</div>" } ], "returns" : { "type" : "item()*", "description" : "The projection of the original sequence." }, "errors" : [  ] }, { "arity" : 1, "name" : "size", "qname" : "jn:size", "signature" : "($a as array()?) as integer? external", "description" : " Returns the size of a JSON array, or the empty sequence if no array is given.\n The size of an Array is the number of members contained within it.\n", "summary" : "<p> Returns the size of a JSON array, or the empty sequence if no array is given.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "a", "type" : "array()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">rray A JSON array.</div>" } ], "returns" : { "type" : "integer?", "description" : "The number of items in $array, or the empty sequence if $array is empty." }, "errors" : [  ] }, { "arity" : 2, "name" : "trim", "qname" : "jn:trim", "signature" : "($items as item()*, $keys as string*) as item()* external", "description" : " For each item in the given sequence, this function returns the item itself,\n if it is not an object, or its \"trimmed\" copy, if it is an object. Trimming\n an object by a set of keys means creating a new object containing all the\n pairs of the source object except the ones whose key appears in the given\n set of keys.\n", "summary" : "<p> For each item in the given sequence, this function returns the item itself,\n if it is not an object, or its \"trimmed\" copy, if it is an object.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "items", "type" : "item()", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A sequence of items.</div>" }, { "name" : "keys", "type" : "string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The keys of the pairs to exclude from each object in $items.</div>" } ], "returns" : { "type" : "item()*", "description" : "The trimmed version of the input sequence." }, "errors" : [  ] } ], "variables" : [  ] }