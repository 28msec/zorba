{ "ns" : "http://zorba.io/modules/sctx", "description" : " This module provides functions that gets components of the static context.\n", "sees" : [ "<xqdoc:see xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http://www.w3.org/TR/xquery/#id-xq-static-context-components</xqdoc:see>" ], "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Nicolae Brinza</xqdoc:author>" ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://zorba.io/modules/sctx", "prefix" : "sctx" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" } ], "functions" : [ { "arity" : 0, "name" : "base-uri", "qname" : "sctx:base-uri", "signature" : "() as xs:string? external", "description" : " Gets the base URI.\n", "summary" : "<p> Gets the base URI.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string?", "description" : "The base URI." }, "errors" : [  ] }, { "arity" : 0, "name" : "boundary-space-policy", "qname" : "sctx:boundary-space-policy", "signature" : "() as xs:string external", "description" : " Gets the boundary whitespace policy used by direct element constructors.\n", "summary" : "<p> Gets the boundary whitespace policy used by direct element constructors.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "Either <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">preserve</code> or <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">strip</code>." }, "errors" : [  ] }, { "arity" : 0, "name" : "construction-mode", "qname" : "sctx:construction-mode", "signature" : "() as xs:string external", "description" : " Gets the static context construction mode of element and document nodes.\n", "summary" : "<p> Gets the static context construction mode of element and document nodes.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "Either <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">preserve</code> or <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">strip</code>." }, "errors" : [  ] }, { "arity" : 0, "name" : "copy-namespaces-mode", "qname" : "sctx:copy-namespaces-mode", "signature" : "() as xs:string+ external", "description" : " Gets the static context components that control the the namespace bindings\n that are assigned when an existing element node is copied\n by an element constructor.\n", "summary" : "<p> Gets the static context components that control the the namespace bindings\n that are assigned when an existing element node is copied\n by an element constructor.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string+", "description" : "A sequence of two strings: the first is either <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">preserve</code> or <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">no-preserve</code> and the second is either <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">inherit</code> or <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">no-inherit</code>." }, "errors" : [  ] }, { "arity" : 0, "name" : "default-collation", "qname" : "sctx:default-collation", "signature" : "() as xs:string external", "description" : " Gets one of statically known collations used by functions and operators\n for comparing and ordering values of type <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">xs:string</code>\n or <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">xs:anyURI</code> when no explicit collation is specified.\n", "summary" : "<p> Gets one of statically known collations used by functions and operators\n for comparing and ordering values of type  xs:string \n or  xs:anyURI  when no explicit collation is specified.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The collations that is used by default." }, "errors" : [  ] }, { "arity" : 0, "name" : "default-collection-type", "qname" : "sctx:default-collection-type", "signature" : "() as xs:string external", "description" : " Gets the statically known default collection type.\n This is the type of the sequence of nodes that would result from calling the\n <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">fn:collection</code> function with no arguments.\n", "summary" : "<p> Gets the statically known default collection type.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The type of the default collection." }, "errors" : [  ] }, { "arity" : 0, "name" : "default-function-namespace", "qname" : "sctx:default-function-namespace", "signature" : "() as xs:string external", "description" : " Gets the URI of the default function namespace.\n", "summary" : "<p> Gets the URI of the default function namespace.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The URI of the of the default function namespace." }, "errors" : [  ] }, { "arity" : 0, "name" : "default-order", "qname" : "sctx:default-order", "signature" : "() as xs:string external", "description" : " Gets the component that controls the processing of empty sequences and NaN\n values as ordering keys in an <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">order by</code> clause\n in a FLWOR expression.\n", "summary" : "<p> Gets the component that controls the processing of empty sequences and NaN\n values as ordering keys in an  order by  clause\n in a FLWOR expression.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "Either <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">greatest</code> or <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">least</code>." }, "errors" : [  ] }, { "arity" : 2, "name" : "function-annotations", "qname" : "sctx:function-annotations", "signature" : "($name as xs:QName, $arity as xs:integer) as xs:QName* external", "description" : " Gets the list of annotations declared for the given function.\n", "summary" : "<p> Gets the list of annotations declared for the given function.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the function.</div>" }, { "name" : "arity", "type" : "xs:integer", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The number of arguments the function takes.</div>" } ], "returns" : { "type" : "xs:QName*", "description" : "the list of annotations" }, "errors" : [  ] }, { "arity" : 1, "name" : "function-arguments-count", "qname" : "sctx:function-arguments-count", "signature" : "($function as xs:QName) as xs:int* external", "description" : " Gets the number of arguments the given XQuery function takes.\n", "summary" : "<p> Gets the number of arguments the given XQuery function takes.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "function", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A QName identifying a function.</div>" } ], "returns" : { "type" : "xs:int*", "description" : "Either a sequence of zero or more integers (one for each overloaded version of the given function) or an empty sequence if the function is not defined." }, "errors" : [  ] }, { "arity" : 0, "name" : "function-names", "qname" : "sctx:function-names", "signature" : "() as xs:QName* external", "description" : " Gets a sequence containing the QNames of all defined functions\n that are available to be called from within an expression.\n", "summary" : "<p> Gets a sequence containing the QNames of all defined functions\n that are available to be called from within an expression.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:QName*", "description" : "A sequence for QNames identifying all functions." }, "errors" : [  ] }, { "arity" : 0, "name" : "functions", "qname" : "sctx:functions", "signature" : "() as object()* external", "description" : " Gets a sequence of JSON objects containing the name, arity, and annotations\n of all defined functions that are available to be called form within an\n expression.\n", "summary" : "<p> Gets a sequence of JSON objects containing the name, arity, and annotations\n of all defined functions that are available to be called form within an\n expression.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()*", "description" : "A sequence of objects." }, "errors" : [  ] }, { "arity" : 0, "name" : "in-scope-attribute-declarations", "qname" : "sctx:in-scope-attribute-declarations", "signature" : "() as xs:QName* external", "description" : " Gets a sequence of QNames identifying declared attributes\n in the imported schemas.\n", "summary" : "<p> Gets a sequence of QNames identifying declared attributes\n in the imported schemas.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:QName*", "description" : "A sequence of QNames, one for each attribute." }, "errors" : [  ] }, { "arity" : 0, "name" : "in-scope-attribute-groups", "qname" : "sctx:in-scope-attribute-groups", "signature" : "() as xs:QName* external", "description" : " Gets a sequence of QNames identifying declared in-scope\n schema attribute groups.\n", "summary" : "<p> Gets a sequence of QNames identifying declared in-scope\n schema attribute groups.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:QName*", "description" : "A sequence of QNames, one for each attribute group." }, "errors" : [  ] }, { "arity" : 0, "name" : "in-scope-element-declarations", "qname" : "sctx:in-scope-element-declarations", "signature" : "() as xs:QName* external", "description" : " Gets a sequence of QNames identifying declared elements\n in the imported schemas.\n", "summary" : "<p> Gets a sequence of QNames identifying declared elements\n in the imported schemas.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:QName*", "description" : "A sequence of QNames, one for each declared element." }, "errors" : [  ] }, { "arity" : 0, "name" : "in-scope-element-groups", "qname" : "sctx:in-scope-element-groups", "signature" : "() as xs:QName* external", "description" : " Gets a sequence of QNames identifying declared in-scope\n schema element groups.\n", "summary" : "<p> Gets a sequence of QNames identifying declared in-scope\n schema element groups.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:QName*", "description" : "A sequence of QNames, one for each element group." }, "errors" : [  ] }, { "arity" : 0, "name" : "in-scope-schema-types", "qname" : "sctx:in-scope-schema-types", "signature" : "() as xs:QName* external", "description" : " Gets a sequence of QNames identifying in-scope schema types\n including all the predefined schema types and all definitions\n found in imported schemas.\n", "summary" : "<p> Gets a sequence of QNames identifying in-scope schema types\n including all the predefined schema types and all definitions\n found in imported schemas.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:QName*", "description" : "A sequence of QNames, one for each defined type." }, "errors" : [  ] }, { "arity" : 0, "name" : "in-scope-variables", "qname" : "sctx:in-scope-variables", "signature" : "() as xs:QName* external", "description" : " Gets a sequence of QNames identifying declared variables\n from the static context.\n", "summary" : "<p> Gets a sequence of QNames identifying declared variables\n from the static context.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:QName*", "description" : "A sequence of QNames, one for each variable." }, "errors" : [  ] }, { "arity" : 1, "name" : "option", "qname" : "sctx:option", "signature" : "($name as xs:QName) as xs:string? external", "description" : " Gets the value of an option that is declared in the prolog of the module.\n", "summary" : "<p> Gets the value of an option that is declared in the prolog of the module.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "xs:QName", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name of the option value to retrieve</div>" } ], "returns" : { "type" : "xs:string?", "description" : "the value of the option if contained in the static context or the empty sequence otherwise." }, "errors" : [  ] }, { "arity" : 0, "name" : "ordering-mode", "qname" : "sctx:ordering-mode", "signature" : "() as xs:string external", "description" : " Gets the ordering mode that affects the ordering of the result sequences\n returned by certain expressions.\n", "summary" : "<p> Gets the ordering mode that affects the ordering of the result sequences\n returned by certain expressions.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "Either <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">ordered</code> or <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">unordered</code>." }, "errors" : [  ] }, { "arity" : 0, "name" : "statically-known-collations", "qname" : "sctx:statically-known-collations", "signature" : "() as xs:anyURI* external", "description" : " Gets a sequence that contains the statically known collations.\n", "summary" : "<p> Gets a sequence that contains the statically known collations.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:anyURI*", "description" : "The sequence of collations." }, "errors" : [  ] }, { "arity" : 1, "name" : "statically-known-document-type", "qname" : "sctx:statically-known-document-type", "signature" : "($document as xs:string) as xs:QName external", "description" : " For the given document, returns the static type of its root node.\n", "summary" : "<p> For the given document, returns the static type of its root node.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "document", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> A URI of a document.</div>" } ], "returns" : { "type" : "xs:QName", "description" : "The static type of the given document." }, "errors" : [  ] }, { "arity" : 0, "name" : "statically-known-documents", "qname" : "sctx:statically-known-documents", "signature" : "() as xs:anyURI* external", "description" : " Gets a sequence that contains the URIs of all statically known documents.\n", "summary" : "<p> Gets a sequence that contains the URIs of all statically known documents.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:anyURI*", "description" : "The sequence of document URIs." }, "errors" : [  ] }, { "arity" : 1, "name" : "statically-known-namespace-binding", "qname" : "sctx:statically-known-namespace-binding", "signature" : "($prefix as xs:string) as xs:string? external", "description" : " Gets the bound URI for the given prefix.\n", "summary" : "<p> Gets the bound URI for the given prefix.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "prefix", "type" : "xs:string", "occurence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The prefix of the known namespace for which the bound URI is being requested.</div>" } ], "returns" : { "type" : "xs:string?", "description" : "The URI bound to the prefix is returned, or an empty sequence if the prefix is not known." }, "errors" : [  ] }, { "arity" : 0, "name" : "statically-known-namespaces", "qname" : "sctx:statically-known-namespaces", "signature" : "() as xs:string* external", "description" : " Gets a list of known statically known namespaces as prefixes\n (fn, xml, xs, xsi, etc).\n", "summary" : "<p> Gets a list of known statically known namespaces as prefixes\n (fn, xml, xs, xsi, etc).</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string*", "description" : "A sequence of xs:strings, one for each known namespace prefix." }, "errors" : [  ] }, { "arity" : 0, "name" : "xpath10-compatibility-mode", "qname" : "sctx:xpath10-compatibility-mode", "signature" : "() as xs:boolean external", "description" : " Gets true or false depending on whether rules for compatibility\n with XPath 1.0 are in effect.\n XQuery set the value of this component to false.\n", "summary" : "<p> Gets true or false depending on whether rules for compatibility\n with XPath 1.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "The function should return <code xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">false</code>." }, "errors" : [  ] } ], "variables" : [  ] }