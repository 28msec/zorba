<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="uriresolvers_8dox" kind="file">
    <compoundname>uriresolvers.dox</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**<sp/>\page<sp/>uriresolvers<sp/>URI<sp/>Resolvers</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">\section<sp/>motivation<sp/>Motivation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">In<sp/>JSONiq<sp/>or<sp/>XQuery,<sp/>many<sp/>resources<sp/>are<sp/>named<sp/>by<sp/>URIs<sp/>-<sp/>most<sp/>notably<sp/>schemas<sp/>and</highlight></codeline>
<codeline lineno="6"><highlight class="comment">modules,<sp/>but<sp/>also<sp/>documents,<sp/>full-text<sp/>stopwords<sp/>lists<sp/>and<sp/>thesauri,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">and<sp/>so<sp/>on.<sp/>URIs<sp/>are<sp/>by<sp/>convention<sp/>often<sp/>given<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment">&lt;tt&gt;http:&lt;/tt&gt;<sp/>scheme<sp/>and<sp/>the<sp/>domain<sp/>name<sp/>of<sp/>the<sp/>provider.<sp/>However,</highlight></codeline>
<codeline lineno="9"><highlight class="comment">in<sp/>general<sp/>it<sp/>is<sp/>not<sp/>desirable<sp/>to<sp/>load<sp/>the<sp/>resource<sp/>via<sp/>HTTP,<sp/>and<sp/>in</highlight></codeline>
<codeline lineno="10"><highlight class="comment">many<sp/>cases<sp/>the<sp/>resource<sp/>is<sp/>not<sp/>actually<sp/>available<sp/>at<sp/>the<sp/>named<sp/>URI<sp/>-</highlight></codeline>
<codeline lineno="11"><highlight class="comment">in<sp/>other<sp/>words,<sp/>they<sp/>are<sp/>&lt;b&gt;URIs&lt;/b&gt;<sp/>(Uniform<sp/>Resource</highlight></codeline>
<codeline lineno="12"><highlight class="comment">&lt;b&gt;Identifiers&lt;/b&gt;),<sp/>not<sp/>&lt;b&gt;URLs&lt;/b&gt;<sp/>(Uniform<sp/>Resource</highlight></codeline>
<codeline lineno="13"><highlight class="comment">&lt;b&gt;Locators&lt;/b&gt;).</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">Zorba<sp/>provides<sp/>a<sp/>built-in<sp/>mechanism<sp/>for<sp/>mapping<sp/>URIs<sp/>to<sp/>a<sp/>local</highlight></codeline>
<codeline lineno="16"><highlight class="comment">filesystem<sp/>path.<sp/>It<sp/>can<sp/>also<sp/>load<sp/>resources<sp/>via<sp/>HTTP<sp/>in<sp/>situations</highlight></codeline>
<codeline lineno="17"><highlight class="comment">where<sp/>that<sp/>is<sp/>in<sp/>fact<sp/>appropriate.<sp/>These<sp/>built-in<sp/>mechanisms<sp/>will</highlight></codeline>
<codeline lineno="18"><highlight class="comment">solve<sp/>a<sp/>large<sp/>number<sp/>of<sp/>resource-loading<sp/>problems.<sp/>However,<sp/>it<sp/>also</highlight></codeline>
<codeline lineno="19"><highlight class="comment">offers<sp/>a<sp/>highly<sp/>flexible<sp/>API<sp/>for<sp/>extending<sp/>the<sp/>built-in<sp/>mechanisms,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">which<sp/>will<sp/>allow<sp/>you<sp/>to<sp/>resolve<sp/>URIs<sp/>from<sp/>queries<sp/>in<sp/>almost<sp/>any<sp/>way</highlight></codeline>
<codeline lineno="21"><highlight class="comment">imaginable<sp/>to<sp/>handle<sp/>application-specific<sp/>problems.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">\section<sp/>builtin_uri_resolver<sp/>Zorba&apos;s<sp/>Built-in<sp/>URI<sp/>Resolver</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment">JSONiq<sp/>or<sp/>XQuery<sp/>itself<sp/>offer<sp/>an<sp/>approach<sp/>to<sp/>locating<sp/>resources<sp/>via<sp/>the<sp/>&quot;at&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="comment">clause<sp/>in<sp/>&lt;code&gt;import<sp/>module&lt;/code&gt;<sp/>and<sp/>&lt;code&gt;import<sp/>schema&lt;/code&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">statements.<sp/>However,<sp/>we<sp/>recommend<sp/>that<sp/>you<sp/>do<sp/>not<sp/>use<sp/>this<sp/>approach</highlight></codeline>
<codeline lineno="28"><highlight class="comment">for<sp/>most<sp/>robust<sp/>applications.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">For<sp/>example,<sp/>the<sp/>following<sp/>code<sp/>snippet<sp/>imports<sp/>a<sp/>library<sp/>module<sp/>with</highlight></codeline>
<codeline lineno="31"><highlight class="comment">target<sp/>namespace<sp/>&quot;http://www.example.com/modules/utils&quot;.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>(:<sp/>Evil<sp/>import<sp/>statement<sp/>:)</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>import<sp/>module<sp/>namespace<sp/>utils<sp/>=<sp/>&quot;http://www.example.com/modules/utils&quot;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>at<sp/>&quot;/home/foo/xquery/utils.xq&quot;;</highlight></codeline>
<codeline lineno="37"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">In<sp/>this<sp/>import<sp/>statement,<sp/>the<sp/>user<sp/>specifies<sp/>that<sp/>the<sp/>file<sp/>containing</highlight></codeline>
<codeline lineno="40"><highlight class="comment">the<sp/>module<sp/>is<sp/>physically<sp/>located<sp/>at<sp/>&quot;/home/foo/xquery/utils.xq&quot;.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">Having<sp/>the<sp/>physical<sp/>location<sp/>hard-coded<sp/>isn&apos;t<sp/>desirable<sp/>for<sp/>two</highlight></codeline>
<codeline lineno="43"><highlight class="comment">reasons:<sp/>First,<sp/>the<sp/>physical<sp/>location<sp/>of<sp/>a<sp/>module<sp/>or<sp/>schema<sp/>may<sp/>change</highlight></codeline>
<codeline lineno="44"><highlight class="comment">during<sp/>the<sp/>development<sp/>process;<sp/>also,<sp/>frequently<sp/>the<sp/>module<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="45"><highlight class="comment">located<sp/>in<sp/>a<sp/>different<sp/>directory<sp/>after<sp/>the<sp/>application<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="46"><highlight class="comment">deployed.<sp/>Second,<sp/>the<sp/>user<sp/>may<sp/>want<sp/>to<sp/>package<sp/>and<sp/>distribute<sp/>the</highlight></codeline>
<codeline lineno="47"><highlight class="comment">application<sp/>without<sp/>having<sp/>other<sp/>developers<sp/>to<sp/>perform<sp/>code<sp/>changes<sp/>in</highlight></codeline>
<codeline lineno="48"><highlight class="comment">order<sp/>to<sp/>have<sp/>location<sp/>hints<sp/>which<sp/>are<sp/>valid<sp/>on<sp/>their<sp/>system.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">Out<sp/>of<sp/>the<sp/>box,<sp/>Zorba<sp/>will<sp/>attempt<sp/>to<sp/>map<sp/>URIs<sp/>to<sp/>local<sp/>filesystem</highlight></codeline>
<codeline lineno="51"><highlight class="comment">locations.<sp/>It<sp/>does<sp/>so<sp/>in<sp/>two<sp/>steps:</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">&lt;ol&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">&lt;li&gt;First,<sp/>the<sp/>URI<sp/>is<sp/>&lt;i&gt;transformed&lt;/i&gt;<sp/>to<sp/>a<sp/>&lt;i&gt;relative<sp/>path&lt;/i&gt;<sp/>via</highlight></codeline>
<codeline lineno="56"><highlight class="comment">the<sp/>algorithm<sp/>listed<sp/>below.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">&lt;li&gt;Second,<sp/>Zorba<sp/>attempts<sp/>to<sp/>load<sp/>the<sp/>relative<sp/>path<sp/>within<sp/>every</highlight></codeline>
<codeline lineno="59"><highlight class="comment">directory<sp/>listed<sp/>on<sp/>its<sp/>&lt;i&gt;URI<sp/>path&lt;/i&gt;.<sp/>(Through<sp/>this<sp/>documentation,</highlight></codeline>
<codeline lineno="60"><highlight class="comment">a<sp/>&quot;path&quot;<sp/>is<sp/>defines<sp/>as<sp/>&quot;an<sp/>ordered<sp/>list<sp/>of<sp/>directories<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="61"><highlight class="comment">filesystem.)</highlight></codeline>
<codeline lineno="62"><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment">&lt;/ol&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">\subsection<sp/>mangling<sp/>URI<sp/>Transformation</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">Consider<sp/>a<sp/>library<sp/>module<sp/>with<sp/>the<sp/>namespace</highlight></codeline>
<codeline lineno="68"><highlight class="comment">http://www.example.com/modules/utils.<sp/>This<sp/>namespace<sp/>URI<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="69"><highlight class="comment">rewritten<sp/>by<sp/>the<sp/>following<sp/>steps:</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">&lt;ol&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">&lt;li&gt;The<sp/>domain<sp/>(authority)<sp/>component<sp/>of<sp/>the<sp/>URI<sp/>is<sp/>reversed,<sp/>and<sp/>then</highlight></codeline>
<codeline lineno="74"><highlight class="comment">transformed<sp/>into<sp/>a<sp/>relative<sp/>filename<sp/>separated<sp/>by<sp/>forward<sp/>slashes:</highlight></codeline>
<codeline lineno="75"><highlight class="comment">&lt;code&gt;www.example.com&lt;/code&gt;<sp/>=&gt;<sp/>&lt;code&gt;com/example/www&lt;/code&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">&lt;li&gt;The<sp/>path<sp/>component<sp/>of<sp/>the<sp/>URI<sp/>is<sp/>appended:</highlight></codeline>
<codeline lineno="78"><highlight class="comment">&lt;code&gt;/modules/utils&lt;/code&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">&lt;li&gt;If<sp/>the<sp/>path<sp/>component<sp/>ends<sp/>with<sp/>a<sp/>trailing<sp/>slash,<sp/>the<sp/>word<sp/>&quot;index&quot;</highlight></codeline>
<codeline lineno="81"><highlight class="comment">will<sp/>be<sp/>appended</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">&lt;li&gt;Finally,<sp/>an<sp/>appropriate<sp/>filename<sp/>extension<sp/>will<sp/>be<sp/>added<sp/>if<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="84"><highlight class="comment">not<sp/>already<sp/>present.<sp/>For<sp/>modules,<sp/>the<sp/>suffix<sp/>is<sp/>&lt;code&gt;.xq&lt;/code&gt;,<sp/>and</highlight></codeline>
<codeline lineno="85"><highlight class="comment">for<sp/>schemas,<sp/>the<sp/>suffix<sp/>is<sp/>&lt;code&gt;.xsd&lt;/code&gt;.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">&lt;/ol&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">So,<sp/>the<sp/>final<sp/>relative<sp/>path<sp/>in<sp/>our<sp/>example<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="90"><highlight class="comment">&lt;code&gt;com/example/www/modules/utils.xq&lt;/code&gt;.<sp/>A<sp/>couple<sp/>more<sp/>examples</highlight></codeline>
<codeline lineno="91"><highlight class="comment">(all<sp/>are<sp/>presumed<sp/>to<sp/>be<sp/>module<sp/>URIs):</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">&lt;ul&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">&lt;li&gt;&lt;code&gt;http://www.example.com/modules/utils/&lt;/code&gt;<sp/>=&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="comment">&lt;code&gt;com/example/www/modules/utils/index.xq&lt;/code&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">&lt;li&gt;&lt;code&gt;http://www.example.com/modules/mylib.xq&lt;/code&gt;<sp/>=&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="comment">&lt;code&gt;com/example/www/modules/mylib.xq&lt;/code&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">&lt;/ul&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">\subsection<sp/>uripath<sp/>Zorba&apos;s<sp/>URI<sp/>Path</highlight></codeline>
<codeline lineno="104"><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">Zorba<sp/>will<sp/>now<sp/>attempt<sp/>to<sp/>find<sp/>the<sp/>named<sp/>file<sp/>relative<sp/>to<sp/>each</highlight></codeline>
<codeline lineno="106"><highlight class="comment">directory<sp/>in<sp/>the<sp/>&lt;i&gt;URI<sp/>Path&lt;/i&gt;.<sp/>By<sp/>default,<sp/>the<sp/>only<sp/>entry<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="107"><highlight class="comment">URI<sp/>path<sp/>is<sp/>the<sp/>directory</highlight></codeline>
<codeline lineno="108"><highlight class="comment">&lt;code&gt;/usr/share/zorba/uris/&lt;/code&gt;<sp/>(on<sp/>Unix<sp/>and<sp/>MacOS<sp/>X)<sp/>or</highlight></codeline>
<codeline lineno="109"><highlight class="comment">&lt;code&gt;C:\\Program<sp/>Files\\Zorba</highlight></codeline>
<codeline lineno="110"><highlight class="comment">2.1.0\\share\\zorba\\uris&lt;/code&gt;<sp/>(on<sp/>Windows).<sp/>So,<sp/>to</highlight></codeline>
<codeline lineno="111"><highlight class="comment">complete<sp/>this<sp/>example,<sp/>assuming<sp/>Zorba<sp/>is<sp/>installed<sp/>on<sp/>a<sp/>Unix<sp/>system<sp/>in</highlight></codeline>
<codeline lineno="112"><highlight class="comment">the<sp/>default<sp/>location,<sp/>Zorba<sp/>will<sp/>attempt<sp/>to<sp/>resolve<sp/>the<sp/>module</highlight></codeline>
<codeline lineno="113"><highlight class="comment">namespace<sp/>URI<sp/>&lt;code&gt;http://www.example.com/modules/utils&lt;/code&gt;<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="114"><highlight class="comment">file</highlight></codeline>
<codeline lineno="115"><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>/usr/share/zorba/modules/com/example/www/modules/utils.xq</highlight></codeline>
<codeline lineno="118"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">If<sp/>you<sp/>have<sp/>modules<sp/>or<sp/>schemas<sp/>installed<sp/>in<sp/>other<sp/>locations<sp/>on<sp/>your</highlight></codeline>
<codeline lineno="121"><highlight class="comment">system,<sp/>you<sp/>may<sp/>provide<sp/>additional<sp/>search<sp/>directories<sp/>either<sp/>by</highlight></codeline>
<codeline lineno="122"><highlight class="comment">passing<sp/>the<sp/>&lt;code&gt;--uri-path&lt;/code&gt;<sp/>command-line<sp/>argument<sp/>to<sp/>Zorba,<sp/>or</highlight></codeline>
<codeline lineno="123"><highlight class="comment">by<sp/>setting<sp/>the<sp/>&lt;code&gt;ZORBA_URI_PATH&lt;/code&gt;<sp/>environment<sp/>variable.<sp/>In</highlight></codeline>
<codeline lineno="124"><highlight class="comment">both<sp/>cases,<sp/>the<sp/>value<sp/>is<sp/>an<sp/>ordered<sp/>list<sp/>of<sp/>filesystem<sp/>directories</highlight></codeline>
<codeline lineno="125"><highlight class="comment">separated<sp/>by<sp/>&quot;:&quot;<sp/>(on<sp/>Unix/MacOS<sp/>X)<sp/>or<sp/>&quot;;&quot;<sp/>(on<sp/>Windows).<sp/>Zorba<sp/>will</highlight></codeline>
<codeline lineno="126"><highlight class="comment">search<sp/>each<sp/>directory<sp/>on<sp/>the<sp/>URI<sp/>path<sp/>in<sp/>the<sp/>order<sp/>specified,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="127"><highlight class="comment">first<sp/>match<sp/>found<sp/>will<sp/>be<sp/>used.<sp/>So,<sp/>for<sp/>example,<sp/>if<sp/>you<sp/>invoke<sp/>Zorba</highlight></codeline>
<codeline lineno="128"><highlight class="comment">as<sp/>follows<sp/>(example<sp/>is<sp/>for<sp/>a<sp/>Unix<sp/>system):</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>zorba<sp/>--uri-path<sp/>&apos;/home/foo/xquery/uris:/opt/share/xquery/uris&apos;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-q<sp/>&apos;import<sp/>module<sp/>namespace<sp/>utils=&quot;http://www.example.com/modules/utils&quot;;<sp/>1&apos;</highlight></codeline>
<codeline lineno="133"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="134"><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">Zorba<sp/>will<sp/>attempt<sp/>to<sp/>load<sp/>the<sp/>module<sp/>from<sp/>the<sp/>following<sp/>locations,<sp/>in</highlight></codeline>
<codeline lineno="136"><highlight class="comment">order:</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>/home/foo/xquery/uris/com/example/www/modules/utils.xq</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>/opt/share/xquery/uris/com/example/www/modules/utils.xq</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>/usr/share/zorba/uris/com/example/www/modules/utils.xq</highlight></codeline>
<codeline lineno="142"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="143"><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">If,<sp/>after<sp/>searching<sp/>all<sp/>URI<sp/>path<sp/>directories,<sp/>no<sp/>match<sp/>is<sp/>found<sp/>for</highlight></codeline>
<codeline lineno="145"><highlight class="comment">a<sp/>given<sp/>URI,<sp/>Zorba<sp/>will<sp/>by<sp/>default<sp/>fall<sp/>back<sp/>to<sp/>interpretting<sp/>the<sp/>URI</highlight></codeline>
<codeline lineno="146"><highlight class="comment">as<sp/>a<sp/>URL<sp/>and<sp/>loading<sp/>the<sp/>resource<sp/>via<sp/>HTTP<sp/>/<sp/>HTTPS<sp/>/<sp/>FTP<sp/>(depending<sp/>on</highlight></codeline>
<codeline lineno="147"><highlight class="comment">the<sp/>URI<sp/>scheme).<sp/>This<sp/>behaviour<sp/>can<sp/>be<sp/>defeated<sp/>by<sp/>disabling<sp/>the</highlight></codeline>
<codeline lineno="148"><highlight class="comment">&lt;tt&gt;http-uri-resolution&lt;/tt&gt;<sp/>Zorba<sp/>option<sp/>(see<sp/>\ref<sp/>options_features).</highlight></codeline>
<codeline lineno="149"><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">\section<sp/>libpath<sp/>Zorba&apos;s<sp/>Library<sp/>Path</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight></codeline>
<codeline lineno="152"><highlight class="comment">The<sp/>above<sp/>URI<sp/>path<sp/>mechanism<sp/>is<sp/>used<sp/>for<sp/>all<sp/>URIs<sp/>that<sp/>are<sp/>resolved<sp/>by</highlight></codeline>
<codeline lineno="153"><highlight class="comment">Zorba<sp/>-<sp/>most<sp/>especially<sp/>module<sp/>and<sp/>schema<sp/>imports,<sp/>but<sp/>also<sp/>full-text</highlight></codeline>
<codeline lineno="154"><highlight class="comment">thesaurus<sp/>and<sp/>stop-word<sp/>lists,<sp/>documents,<sp/>and<sp/>so<sp/>on.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">When<sp/>considering<sp/>modules<sp/>in<sp/>particular,<sp/>however,<sp/>there<sp/>is<sp/>another</highlight></codeline>
<codeline lineno="157"><highlight class="comment">important<sp/>path:<sp/>the<sp/>Library<sp/>Path.<sp/>Zorba<sp/>will<sp/>look<sp/>on<sp/>this<sp/>path<sp/>when<sp/>it</highlight></codeline>
<codeline lineno="158"><highlight class="comment">needs<sp/>to<sp/>load<sp/>dynamic<sp/>libraries<sp/>containing<sp/>the<sp/>implementation<sp/>of</highlight></codeline>
<codeline lineno="159"><highlight class="comment">external<sp/>functions<sp/>for<sp/>a<sp/>module<sp/>(ie,<sp/>those<sp/>functions<sp/>implemented<sp/>in</highlight></codeline>
<codeline lineno="160"><highlight class="comment">C++;<sp/>see<sp/>\ref<sp/>mod_author_cpp).<sp/>This<sp/>path<sp/>is<sp/>separate<sp/>from<sp/>the<sp/>URI</highlight></codeline>
<codeline lineno="161"><highlight class="comment">path<sp/>because<sp/>on<sp/>certain<sp/>systems<sp/>-<sp/>most<sp/>notably<sp/>Fedora,<sp/>but<sp/>also<sp/>other</highlight></codeline>
<codeline lineno="162"><highlight class="comment">Linux<sp/>distributions<sp/>-<sp/>it<sp/>is<sp/>important<sp/>that<sp/>platform-dependent<sp/>binary</highlight></codeline>
<codeline lineno="163"><highlight class="comment">files<sp/>(such<sp/>as<sp/>dynamic<sp/>libraries)<sp/>be<sp/>installed<sp/>in<sp/>a<sp/>separate<sp/>directory</highlight></codeline>
<codeline lineno="164"><highlight class="comment">structure<sp/>from<sp/>platform-independent<sp/>files<sp/>(such<sp/>as<sp/>&lt;code&gt;.xq&lt;/code&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="comment">module<sp/>files<sp/>and<sp/>&lt;code&gt;.xsd&lt;/code&gt;<sp/>schema<sp/>files).</highlight></codeline>
<codeline lineno="166"><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">The<sp/>Library<sp/>Path<sp/>mechanism<sp/>is<sp/>exactly<sp/>parallel<sp/>to<sp/>the<sp/>URI<sp/>Path</highlight></codeline>
<codeline lineno="168"><highlight class="comment">mechanism.<sp/><sp/>The<sp/>default,<sp/>built-in<sp/>entry<sp/>on<sp/>this<sp/>path<sp/>is</highlight></codeline>
<codeline lineno="169"><highlight class="comment">&lt;code&gt;/usr/lib/zorba&lt;/code&gt;<sp/>(on<sp/>Unix<sp/>and<sp/>MacOS<sp/>X)<sp/>and</highlight></codeline>
<codeline lineno="170"><highlight class="comment">&lt;code&gt;C:\\Program<sp/>Files\\Zorba<sp/>2.1.0\\lib\\zorba&lt;/code&gt;<sp/>(on</highlight></codeline>
<codeline lineno="171"><highlight class="comment">Windows).<sp/>You<sp/>can<sp/>add<sp/>directories<sp/>to<sp/>this<sp/>path<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="172"><highlight class="comment">&lt;code&gt;--lib-path&lt;/code&gt;<sp/>command-line<sp/>argument,<sp/>or<sp/>by<sp/>setting<sp/>the</highlight></codeline>
<codeline lineno="173"><highlight class="comment">&lt;code&gt;ZORBA_LIB_PATH&lt;/code&gt;<sp/>environment<sp/>variable.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">\section<sp/>internalpaths<sp/>Internal<sp/>(Core)<sp/>Paths</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">There<sp/>is<sp/>actually<sp/>one<sp/>additional<sp/>built-in<sp/>directory<sp/>on<sp/>Zorba&apos;s<sp/>URI</highlight></codeline>
<codeline lineno="178"><highlight class="comment">Path,<sp/>and<sp/>one<sp/>additional<sp/>built-in<sp/>directory<sp/>on<sp/>Zorba&apos;s<sp/>Library<sp/>Path,</highlight></codeline>
<codeline lineno="179"><highlight class="comment">in<sp/>addition<sp/>to<sp/>the<sp/>default<sp/>values<sp/>mentioned<sp/>above.<sp/>These<sp/>directories</highlight></codeline>
<codeline lineno="180"><highlight class="comment">hold<sp/>Zorba&apos;s<sp/>built-in<sp/>&quot;core&quot;<sp/>modules<sp/>(see<sp/>\ref<sp/>core_modules).<sp/>The</highlight></codeline>
<codeline lineno="181"><highlight class="comment">directories<sp/>are<sp/>subdirectories<sp/>of<sp/>the<sp/>default<sp/>directory<sp/>named</highlight></codeline>
<codeline lineno="182"><highlight class="comment">&quot;core/ZORBA_VERSION&quot;.<sp/>So<sp/>for<sp/>example,<sp/>for<sp/>Zorba<sp/>2.1.0<sp/>on<sp/>Unix,<sp/>the</highlight></codeline>
<codeline lineno="183"><highlight class="comment">default<sp/>internal<sp/>URI<sp/>directory<sp/>is</highlight></codeline>
<codeline lineno="184"><highlight class="comment">&lt;code&gt;/usr/share/zorba/uris/core/2.1.0&lt;/code&gt;<sp/>and<sp/>the<sp/>default<sp/>internal</highlight></codeline>
<codeline lineno="185"><highlight class="comment">library<sp/>directory<sp/>is<sp/>&lt;code&gt;/usr/lib/zorba/core/2.1.0&lt;/code&gt;.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">These<sp/>directories<sp/>are<sp/>separate<sp/>to<sp/>make<sp/>it<sp/>easier<sp/>to<sp/>upgrade<sp/>Zorba,<sp/>or</highlight></codeline>
<codeline lineno="188"><highlight class="comment">support<sp/>multiple<sp/>installed<sp/>versions<sp/>of<sp/>Zorba,<sp/>while<sp/>allowing<sp/>non-core</highlight></codeline>
<codeline lineno="189"><highlight class="comment">modules<sp/>to<sp/>be<sp/>installed<sp/>and<sp/>versioned<sp/>indepedently<sp/>of<sp/>the<sp/>Zorba</highlight></codeline>
<codeline lineno="190"><highlight class="comment">version.<sp/>Normally<sp/>you<sp/>should<sp/>not<sp/>modify<sp/>the<sp/>contents<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="191"><highlight class="comment">directories.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">\section<sp/>configurepaths<sp/>Changing<sp/>the<sp/>Default<sp/>Paths</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">All<sp/>four<sp/>paths<sp/>mentioned<sp/>above<sp/>-<sp/>the<sp/>core<sp/>and<sp/>non-core<sp/>URI<sp/>Path,<sp/>and</highlight></codeline>
<codeline lineno="196"><highlight class="comment">the<sp/>core<sp/>and<sp/>non-core<sp/>Library<sp/>Path<sp/>-<sp/>have<sp/>compiled-in<sp/>default<sp/>values</highlight></codeline>
<codeline lineno="197"><highlight class="comment">as<sp/>discussed.<sp/>All<sp/>four<sp/>of<sp/>these<sp/>default<sp/>values<sp/>can<sp/>be<sp/>modified<sp/>at</highlight></codeline>
<codeline lineno="198"><highlight class="comment">Zorba<sp/>build<sp/>time<sp/>to<sp/>meet<sp/>your<sp/>environment&apos;s<sp/>requirements.<sp/>You<sp/>can<sp/>do</highlight></codeline>
<codeline lineno="199"><highlight class="comment">this<sp/>by<sp/>specifying<sp/>alternate<sp/>values<sp/>for<sp/>the<sp/>following<sp/>CMake<sp/>variables:</highlight></codeline>
<codeline lineno="200"><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="202"><highlight class="comment">ZORBA_NONCORE_URI_DIR</highlight></codeline>
<codeline lineno="203"><highlight class="comment">ZORBA_CORE_URI_DIR</highlight></codeline>
<codeline lineno="204"><highlight class="comment">ZORBA_NONCORE_LIB_DIR</highlight></codeline>
<codeline lineno="205"><highlight class="comment">ZORBA_CORE_LIB_DIR</highlight></codeline>
<codeline lineno="206"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="207"><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">Note<sp/>that<sp/>these<sp/>are<sp/>&lt;i&gt;relative&lt;/i&gt;<sp/>directories,<sp/>and<sp/>will<sp/>be<sp/>resolved</highlight></codeline>
<codeline lineno="209"><highlight class="comment">relative<sp/>to<sp/>&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment">\section<sp/>modulepath<sp/>Zorba&apos;s<sp/>&quot;Module<sp/>Path&quot;</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment">Earlier<sp/>versions<sp/>of<sp/>Zorba<sp/>had<sp/>a<sp/>single<sp/>path<sp/>for<sp/>specifying<sp/>where<sp/>both</highlight></codeline>
<codeline lineno="214"><highlight class="comment">platform-dependent<sp/>library<sp/>files<sp/>and<sp/>platform-independent<sp/>module<sp/>and</highlight></codeline>
<codeline lineno="215"><highlight class="comment">schema<sp/>files<sp/>were<sp/>located.<sp/>This<sp/>was<sp/>somewhat<sp/>inaccurately<sp/>named<sp/>the</highlight></codeline>
<codeline lineno="216"><highlight class="comment">&quot;module<sp/>path&quot;.<sp/>For<sp/>backwards<sp/>compatibility,<sp/>Zorba<sp/>still<sp/>supports<sp/>a</highlight></codeline>
<codeline lineno="217"><highlight class="comment">&lt;code&gt;--module-path&lt;/code&gt;<sp/>command-line<sp/>argument<sp/>and<sp/>a</highlight></codeline>
<codeline lineno="218"><highlight class="comment">&lt;code&gt;ZORBA_MODULE_PATH&lt;/code&gt;<sp/>environment<sp/>variable<sp/>(and<sp/>the<sp/>C++<sp/>API</highlight></codeline>
<codeline lineno="219"><highlight class="comment">has<sp/>a<sp/>&lt;code&gt;StaticContext::setModulePaths()&lt;/code&gt;<sp/>method).</highlight></codeline>
<codeline lineno="220"><highlight class="comment">Specifying<sp/>a<sp/>set<sp/>of<sp/>directories<sp/>as<sp/>the<sp/>&quot;module<sp/>path&quot;<sp/>using<sp/>any<sp/>of</highlight></codeline>
<codeline lineno="221"><highlight class="comment">these<sp/>mechanisms<sp/>is<sp/>exactly<sp/>the<sp/>same<sp/>as<sp/>specifying<sp/>that<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="222"><highlight class="comment">directories<sp/>as<sp/>both<sp/>the<sp/>URI<sp/>path<sp/>and<sp/>library<sp/>path.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">The<sp/>Module<sp/>Path<sp/>is<sp/>deprecated,<sp/>and<sp/>these<sp/>mechanisms<sp/>may<sp/>be<sp/>removed<sp/>in</highlight></codeline>
<codeline lineno="225"><highlight class="comment">a<sp/>future<sp/>major<sp/>version<sp/>of<sp/>Zorba.<sp/>There<sp/>is<sp/>no<sp/>&quot;default<sp/>module<sp/>path&quot;.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">\section<sp/>cplusplus<sp/>C++<sp/>API<sp/>for<sp/>URI<sp/>Resolving</highlight></codeline>
<codeline lineno="228"><highlight class="comment"></highlight></codeline>
<codeline lineno="229"><highlight class="comment">\subsection<sp/>cppuripath<sp/>Modifying<sp/>the<sp/>URI<sp/>Path<sp/>programmatically</highlight></codeline>
<codeline lineno="230"><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment">The<sp/>simplest<sp/>modification<sp/>to<sp/>Zorba&apos;s<sp/>default<sp/>behavior<sp/>is<sp/>setting<sp/>the</highlight></codeline>
<codeline lineno="232"><highlight class="comment">URI<sp/>path<sp/>programmatically.<sp/>This<sp/>allows<sp/>you<sp/>to<sp/>have<sp/>different<sp/>URI</highlight></codeline>
<codeline lineno="233"><highlight class="comment">paths<sp/>per<sp/>static<sp/>context,<sp/>if<sp/>you<sp/>wish.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">The<sp/>&lt;code&gt;StaticContext&lt;/code&gt;<sp/>C++<sp/>API<sp/>class<sp/>provides<sp/>the</highlight></codeline>
<codeline lineno="236"><highlight class="comment">&lt;code&gt;setURIPath()&lt;/code&gt;<sp/>method<sp/>for<sp/>this<sp/>purpose.<sp/>It<sp/>is<sp/>passed<sp/>a</highlight></codeline>
<codeline lineno="237"><highlight class="comment">vector<sp/>of<sp/>&lt;code&gt;zorba::String&lt;/code&gt;<sp/>values,<sp/>each<sp/>being<sp/>an<sp/>absolute</highlight></codeline>
<codeline lineno="238"><highlight class="comment">directory<sp/>to<sp/>add<sp/>to<sp/>the<sp/>URI<sp/>path.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">For<sp/>example,<sp/>the<sp/>following<sp/>code<sp/>snippet<sp/>creates<sp/>a</highlight></codeline>
<codeline lineno="241"><highlight class="comment">&lt;code&gt;StaticContext&lt;/code&gt;<sp/>object;<sp/>adds<sp/>two<sp/>directories<sp/>to<sp/>the<sp/>URI</highlight></codeline>
<codeline lineno="242"><highlight class="comment">path<sp/>component<sp/>of<sp/>this<sp/>static<sp/>context;<sp/>and<sp/>compiles<sp/>and<sp/>executes<sp/>a</highlight></codeline>
<codeline lineno="243"><highlight class="comment">query<sp/>given<sp/>the<sp/>information<sp/>that<sp/>is<sp/>present<sp/>in<sp/>this<sp/>static<sp/>context</highlight></codeline>
<codeline lineno="244"><highlight class="comment">(passed<sp/>as<sp/>the<sp/>second<sp/>parameter<sp/>to<sp/>the<sp/>&lt;code&gt;compileQuery()&lt;/code&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="comment">method).</highlight></codeline>
<codeline lineno="246"><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>new<sp/>static<sp/>context</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/>zorba::StaticContext_t<sp/>staticCtx<sp/>=<sp/>zorba-&gt;createStaticContext();</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>URI<sp/>Path</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>std::vector&lt;zorba::String&gt;<sp/>uriPath(2);</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>uriPath[0]<sp/>=<sp/>&quot;/home/foo/xquery/uris&quot;;</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>uriPath[1]<sp/>=<sp/>&quot;/opt/share/xquery/uris&quot;;</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/>staticCtx-&gt;setURIPath(uriPath);</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>//<sp/>Compile<sp/>a<sp/>query<sp/>using<sp/>the<sp/>static<sp/>context<sp/>created<sp/>above</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/>zorba::XQuery_t<sp/>query<sp/>=<sp/>zorba-&gt;compileQuery(</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;import<sp/>module<sp/>namespace<sp/>m=&apos;http://example.com/module&apos;;<sp/>m:foo()&quot;,</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticCtx);</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/>//<sp/>execute<sp/>the<sp/>compiled<sp/>query<sp/>printing<sp/>the<sp/>result<sp/>to<sp/>standard<sp/>out</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>query<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="265"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="266"><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment">\subsection<sp/>cpplibpath<sp/>Modifying<sp/>the<sp/>Library<sp/>Path<sp/>programmatically</highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">Similarly,<sp/>&lt;code&gt;StaticContext&lt;/code&gt;<sp/>has<sp/>a<sp/>method<sp/>named</highlight></codeline>
<codeline lineno="270"><highlight class="comment">&lt;code&gt;setLibPath()&lt;/code&gt;<sp/>for<sp/>specifying<sp/>the<sp/>Library<sp/>Path<sp/>to<sp/>use.<sp/><sp/>In</highlight></codeline>
<codeline lineno="271"><highlight class="comment">operation<sp/>it<sp/>behaves<sp/>exactly<sp/>like<sp/>&lt;code&gt;setURIPath()&lt;/code&gt;.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">\subsection<sp/>mapresolve<sp/>URI<sp/>Mappers<sp/>and<sp/>URL<sp/>Resolvers</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">Now<sp/>we<sp/>will<sp/>discuss<sp/>more<sp/>advanced<sp/>techniques<sp/>for<sp/>manipulating<sp/>Zorba&apos;s</highlight></codeline>
<codeline lineno="276"><highlight class="comment">URI<sp/>resolution<sp/>mechanism.<sp/>The<sp/>built-in<sp/>mechanisms<sp/>described<sp/>above<sp/>are</highlight></codeline>
<codeline lineno="277"><highlight class="comment">in<sp/>fact<sp/>implemented<sp/>internally<sp/>by<sp/>using<sp/>these<sp/>same<sp/>techniques.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment">There<sp/>are<sp/>two<sp/>types<sp/>of<sp/>class<sp/>that<sp/>you<sp/>may<sp/>implement<sp/>to<sp/>modify<sp/>the<sp/>URI</highlight></codeline>
<codeline lineno="280"><highlight class="comment">resolution<sp/>process:</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">&lt;ol&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment">&lt;li&gt;A<sp/>&lt;i&gt;URI<sp/>Mapper&lt;/i&gt;<sp/>takes<sp/>a<sp/>URI<sp/>and<sp/>returns<sp/>&lt;i&gt;one<sp/>or<sp/>more&lt;/i&gt;</highlight></codeline>
<codeline lineno="285"><highlight class="comment">&quot;Candidate<sp/>URIs&quot;,<sp/>which<sp/>are<sp/>alternative<sp/>URIs<sp/>Zorba<sp/>will<sp/>attempt<sp/>to</highlight></codeline>
<codeline lineno="286"><highlight class="comment">resolve.<sp/>This<sp/>allows<sp/>you<sp/>to<sp/>change<sp/>the<sp/>URI,<sp/>or<sp/>provide<sp/>several</highlight></codeline>
<codeline lineno="287"><highlight class="comment">different<sp/>potential<sp/>URIs,<sp/>for<sp/>Zorba<sp/>to<sp/>resolve.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment">&lt;li&gt;A<sp/>&lt;i&gt;URL<sp/>Resolver&lt;/i&gt;<sp/>takes<sp/>a<sp/>URI<sp/>(which<sp/>is<sp/>presumed<sp/>to<sp/>be<sp/>a<sp/>URL,</highlight></codeline>
<codeline lineno="290"><highlight class="comment">that<sp/>is,<sp/>a<sp/>URI<sp/>which<sp/>actually<sp/>points<sp/>to<sp/>a<sp/>resource)<sp/>and<sp/>returns<sp/>a</highlight></codeline>
<codeline lineno="291"><highlight class="comment">&lt;code&gt;Resource&lt;/code&gt;<sp/>object<sp/>which<sp/>Zorba<sp/>will<sp/>use<sp/>to<sp/>load<sp/>the<sp/>resource</highlight></codeline>
<codeline lineno="292"><highlight class="comment">data.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">&lt;/ol&gt;</highlight></codeline>
<codeline lineno="295"><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">The<sp/>general<sp/>algorithm<sp/>used<sp/>by<sp/>Zorba<sp/>when<sp/>resolving<sp/>a<sp/>URI<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="297"><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment">Zorba<sp/>will<sp/>start<sp/>by<sp/>passing<sp/>the<sp/>original<sp/>URI<sp/>to<sp/>the<sp/>first<sp/>registered</highlight></codeline>
<codeline lineno="299"><highlight class="comment">URI<sp/>Mapper.<sp/>If<sp/>that<sp/>Mapper<sp/>returns<sp/>any<sp/>candidate<sp/>URIs,<sp/>then<sp/>Zorba<sp/>will</highlight></codeline>
<codeline lineno="300"><highlight class="comment">pass<sp/>&lt;i&gt;each&lt;/i&gt;<sp/>such<sp/>URI<sp/>to<sp/>the<sp/>next<sp/>registered<sp/>URI<sp/>Mapper,<sp/>and<sp/>so</highlight></codeline>
<codeline lineno="301"><highlight class="comment">on.<sp/>If<sp/>any<sp/>Mapper<sp/>does<sp/>not<sp/>return<sp/>any<sp/>candidate<sp/>URIs<sp/>for<sp/>a<sp/>given<sp/>input</highlight></codeline>
<codeline lineno="302"><highlight class="comment">URI,<sp/>Zorba<sp/>will<sp/>simply<sp/>pass<sp/>the<sp/>input<sp/>URI<sp/>unchanged<sp/>to<sp/>the<sp/>next</highlight></codeline>
<codeline lineno="303"><highlight class="comment">Mapper.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment">After<sp/>all<sp/>Mappers<sp/>have<sp/>been<sp/>invoked,<sp/>Zorba<sp/>will<sp/>have<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="306"><highlight class="comment">candidate<sp/>URIs.<sp/>It<sp/>will<sp/>then<sp/>pass<sp/>each<sp/>candidate<sp/>URI,<sp/>in<sp/>order,<sp/>to</highlight></codeline>
<codeline lineno="307"><highlight class="comment">each<sp/>registered<sp/>URL<sp/>Resolver.<sp/>The<sp/>first<sp/>time<sp/>a<sp/>URL<sp/>Resolver<sp/>returns<sp/>a</highlight></codeline>
<codeline lineno="308"><highlight class="comment">Resource<sp/>object,<sp/>Zorba<sp/>will<sp/>use<sp/>that<sp/>Resource<sp/>as<sp/>the<sp/>final<sp/>source<sp/>of</highlight></codeline>
<codeline lineno="309"><highlight class="comment">content<sp/>for<sp/>the<sp/>URI.<sp/>If<sp/>no<sp/>URL<sp/>Resolver<sp/>ever<sp/>returns<sp/>a<sp/>Resource,<sp/>then</highlight></codeline>
<codeline lineno="310"><highlight class="comment">Zorba<sp/>will<sp/>raise<sp/>an<sp/>appropriate<sp/>&quot;resource<sp/>not<sp/>found&quot;<sp/>error.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"></highlight></codeline>
<codeline lineno="312"><highlight class="comment">\subsubsection<sp/>urimappers<sp/>URI<sp/>Mappers</highlight></codeline>
<codeline lineno="313"><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">Zorba<sp/>includes<sp/>a<sp/>few<sp/>built-in<sp/>URI<sp/>Mappers.<sp/>For<sp/>instance,<sp/>the<sp/>mechanism</highlight></codeline>
<codeline lineno="315"><highlight class="comment">which<sp/>iterates<sp/>through<sp/>the<sp/>URI<sp/>path<sp/>and<sp/>produces<sp/>a<sp/>set<sp/>of<sp/>filesystem</highlight></codeline>
<codeline lineno="316"><highlight class="comment">files<sp/>where<sp/>the<sp/>URI<sp/>might<sp/>be<sp/>located<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>URI<sp/>Mapper.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">To<sp/>implement<sp/>your<sp/>own<sp/>URI<sp/>Mapper,<sp/>subclass<sp/>the<sp/>C++<sp/>API<sp/>class</highlight></codeline>
<codeline lineno="319"><highlight class="comment">&lt;code&gt;URIMapper&lt;/code&gt;<sp/>and<sp/>implement<sp/>the<sp/>&lt;code&gt;mapURI()&lt;/code&gt;<sp/>method:</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/>virtual<sp/>void<sp/>mapURI(const<sp/>zorba::String<sp/>aUri,</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>EntityData<sp/>const*<sp/>aEntityData,<sp/>std::vector&lt;zorba::String&gt;&amp;<sp/>oUris);</highlight></codeline>
<codeline lineno="324"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="325"><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment">and<sp/>then<sp/>register<sp/>an<sp/>instance<sp/>of<sp/>your<sp/>subclass<sp/>with<sp/>the<sp/>static<sp/>context</highlight></codeline>
<codeline lineno="327"><highlight class="comment">using<sp/>the<sp/>method<sp/>&lt;code&gt;registerURIMapper()&lt;/code&gt;:</highlight></codeline>
<codeline lineno="328"><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/>StaticContext_t<sp/>lContext<sp/>=<sp/>aZorba-&gt;createStaticContext();</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/>MyURIMapperSubclass*<sp/>lMapper<sp/>=<sp/>new<sp/>MyURIMapperSubclass();</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/>lContext-&gt;registerURIMapper(lMapper);</highlight></codeline>
<codeline lineno="333"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="334"><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment">Note<sp/>that<sp/>the<sp/>memory<sp/>ownership<sp/>of<sp/>the<sp/>&lt;code&gt;URIMapper&lt;/code&gt;<sp/>instance</highlight></codeline>
<codeline lineno="336"><highlight class="comment">remains<sp/>with<sp/>the<sp/>client<sp/>program;<sp/>it<sp/>must<sp/>de-allocate<sp/>it<sp/>appropriately</highlight></codeline>
<codeline lineno="337"><highlight class="comment">when<sp/>the<sp/>static<sp/>context<sp/>is<sp/>no<sp/>longer<sp/>used.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">In<sp/>your<sp/>&lt;code&gt;mapURI()&lt;/code&gt;<sp/>implementation,<sp/>&lt;code&gt;aUri&lt;/code&gt;<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="340"><highlight class="comment">input<sp/>URI.<sp/>&lt;code&gt;aEntityData&lt;/code&gt;<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>additional</highlight></codeline>
<codeline lineno="341"><highlight class="comment">information<sp/>about<sp/>the<sp/>URI<sp/>being<sp/>resolved.<sp/>As<sp/>of<sp/>Zorba<sp/>2.0,<sp/>the<sp/>only</highlight></codeline>
<codeline lineno="342"><highlight class="comment">method<sp/>on<sp/>&lt;code&gt;EntityData&lt;/code&gt;<sp/>is<sp/>&lt;code&gt;getKind()&lt;/code&gt;,<sp/>which</highlight></codeline>
<codeline lineno="343"><highlight class="comment">will<sp/>return<sp/>an<sp/>enumerated<sp/>value<sp/>describing<sp/>what<sp/>kind<sp/>of<sp/>URI<sp/>is<sp/>being</highlight></codeline>
<codeline lineno="344"><highlight class="comment">resolved:<sp/>SCHEMA,<sp/>MODULE,<sp/>THESAURUS,<sp/>STOP_WORDS,<sp/>COLLECTION,<sp/>or</highlight></codeline>
<codeline lineno="345"><highlight class="comment">DOCUMENT.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">&lt;code&gt;oUris&lt;/code&gt;<sp/>is<sp/>where<sp/>you<sp/>place<sp/>any<sp/>candidate<sp/>URIs,<sp/>by<sp/>calling</highlight></codeline>
<codeline lineno="348"><highlight class="comment">the<sp/>method<sp/>&lt;code&gt;push_back()&lt;/code&gt;.<sp/>(You<sp/>should<sp/>not<sp/>look<sp/>at<sp/>any</highlight></codeline>
<codeline lineno="349"><highlight class="comment">existing<sp/>contents<sp/>of<sp/>the<sp/>vector.)<sp/>If<sp/>you<sp/>push<sp/>any<sp/>candidate<sp/>URIs<sp/>onto</highlight></codeline>
<codeline lineno="350"><highlight class="comment">the<sp/>vector,<sp/>Zorba<sp/>will<sp/>&lt;i&gt;replace&lt;/i&gt;<sp/>the<sp/>input<sp/>URI<sp/>with<sp/>the<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="351"><highlight class="comment">candidate<sp/>URIs<sp/>you<sp/>provide.<sp/>That<sp/>means<sp/>that<sp/>if<sp/>you<sp/>want<sp/>Zorba<sp/>to</highlight></codeline>
<codeline lineno="352"><highlight class="comment">consider<sp/>the<sp/>original<sp/>URI<sp/>&lt;i&gt;in<sp/>addition<sp/>to&lt;/i&gt;<sp/>the<sp/>alternative<sp/>URIs</highlight></codeline>
<codeline lineno="353"><highlight class="comment">you<sp/>provide,<sp/>you<sp/>must<sp/>push<sp/>the<sp/>original<sp/>URI<sp/>onto<sp/>the<sp/>vector<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"></highlight></codeline>
<codeline lineno="355"><highlight class="comment">The<sp/>&lt;code&gt;mapURI()&lt;/code&gt;<sp/>method<sp/>should<sp/>not<sp/>throw<sp/>any<sp/>exceptions.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"></highlight></codeline>
<codeline lineno="357"><highlight class="comment">As<sp/>a<sp/>limited<sp/>but<sp/>functional<sp/>example,<sp/>here<sp/>is<sp/>a<sp/>full<sp/>class<sp/>which<sp/>will</highlight></codeline>
<codeline lineno="358"><highlight class="comment">change<sp/>the<sp/>URI<sp/>of<sp/>a<sp/>specific<sp/>schema<sp/>to<sp/>an<sp/>alternative<sp/>URI.<sp/>You<sp/>could</highlight></codeline>
<codeline lineno="359"><highlight class="comment">use<sp/>this,<sp/>for<sp/>example,<sp/>if<sp/>you<sp/>have<sp/>a<sp/>large<sp/>body<sp/>of<sp/>XQueries<sp/>using<sp/>a</highlight></codeline>
<codeline lineno="360"><highlight class="comment">particular<sp/>schema<sp/>that<sp/>you<sp/>do<sp/>want<sp/>Zorba<sp/>to<sp/>download<sp/>from<sp/>the<sp/>web</highlight></codeline>
<codeline lineno="361"><highlight class="comment">(hence<sp/>the<sp/>built-in<sp/>filesystem<sp/>mapping<sp/>mechanism<sp/>is<sp/>not<sp/>appropriate),</highlight></codeline>
<codeline lineno="362"><highlight class="comment">but<sp/>the<sp/>URI<sp/>that<sp/>the<sp/>schema<sp/>is<sp/>available<sp/>from<sp/>has<sp/>changed<sp/>and<sp/>you<sp/>do</highlight></codeline>
<codeline lineno="363"><highlight class="comment">not<sp/>wish<sp/>to<sp/>modify<sp/>all<sp/>the<sp/>&lt;code&gt;import<sp/>schema&lt;/code&gt;<sp/>statements.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/>class<sp/>MySchemaURIMapper<sp/>:<sp/>public<sp/>URIMapper</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~MySchemaURIMapper()<sp/>{}</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>mapURI(const<sp/>zorba::String<sp/>aUri,</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EntityData<sp/>const*<sp/>aEntityData,</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;zorba::String&gt;&amp;<sp/>oUris)</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(aEntityData-&gt;getKind()<sp/>!=<sp/>EntityData::SCHEMA)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(aUri<sp/>==<sp/>&quot;http://www.example.com/helloworld&quot;)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oUris.push_back(&quot;http://example.com/schemas/helloworld.xsd&quot;);</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="384"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="385"><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">Note<sp/>that<sp/>the<sp/>first<sp/>thing<sp/>&lt;code&gt;mapURI()&lt;/code&gt;<sp/>does<sp/>is<sp/>check<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="387"><highlight class="comment">URI<sp/>being<sp/>resolved<sp/>is<sp/>in<sp/>fact<sp/>for<sp/>a<sp/>schema.<sp/>This<sp/>is<sp/>generally<sp/>good</highlight></codeline>
<codeline lineno="388"><highlight class="comment">practice<sp/>to<sp/>prevent<sp/>surprises<sp/>in<sp/>the<sp/>off-chance<sp/>that<sp/>the<sp/>same<sp/>URI<sp/>is</highlight></codeline>
<codeline lineno="389"><highlight class="comment">also<sp/>used<sp/>to<sp/>identify<sp/>some<sp/>other<sp/>kind<sp/>of<sp/>resource.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment">\subsubsection<sp/>urlresolvers<sp/>URL<sp/>Resolvers</highlight></codeline>
<codeline lineno="392"><highlight class="comment"></highlight></codeline>
<codeline lineno="393"><highlight class="comment">Zorba<sp/>includes<sp/>two<sp/>built-in<sp/>URL<sp/>Resolvers:<sp/>One<sp/>which<sp/>handles</highlight></codeline>
<codeline lineno="394"><highlight class="comment">&lt;code&gt;file:&lt;/code&gt;<sp/>URLs,<sp/>and<sp/>one<sp/>which<sp/>handles<sp/>&lt;code&gt;http:&lt;/code&gt;,</highlight></codeline>
<codeline lineno="395"><highlight class="comment">&lt;code&gt;https:&lt;/code&gt;,<sp/>and<sp/>&lt;code&gt;ftp:&lt;/code&gt;<sp/>URLs.<sp/>These<sp/>are<sp/>implemented</highlight></codeline>
<codeline lineno="396"><highlight class="comment">by<sp/>using<sp/>Zorba&apos;s<sp/>&lt;code&gt;file&lt;/code&gt;<sp/>and<sp/>&lt;code&gt;http-client&lt;/code&gt;</highlight></codeline>
<codeline lineno="397"><highlight class="comment">modules,<sp/>respectively.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment">To<sp/>implement<sp/>your<sp/>own<sp/>URL<sp/>Resolver,<sp/>subclass<sp/>the<sp/>C++<sp/>API<sp/>class</highlight></codeline>
<codeline lineno="400"><highlight class="comment">&lt;code&gt;URLResolver&lt;/code&gt;<sp/>and<sp/>implement<sp/>the<sp/>&lt;code&gt;resolveURL()&lt;/code&gt;</highlight></codeline>
<codeline lineno="401"><highlight class="comment">method:</highlight></codeline>
<codeline lineno="402"><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/>virtual<sp/>Resource*<sp/>resolveURL(const<sp/>zorba::String&amp;<sp/>aUrl,</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>EntityData<sp/>const*<sp/>aEntityData);</highlight></codeline>
<codeline lineno="406"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="407"><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment">and<sp/>then<sp/>register<sp/>an<sp/>instance<sp/>of<sp/>your<sp/>subclass<sp/>with<sp/>the<sp/>static<sp/>context</highlight></codeline>
<codeline lineno="409"><highlight class="comment">using<sp/>the<sp/>method<sp/>&lt;code&gt;registerURLResolver()&lt;/code&gt;:</highlight></codeline>
<codeline lineno="410"><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/>StaticContext_t<sp/>lContext<sp/>=<sp/>aZorba-&gt;createStaticContext();</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/>MyURLResolverSubclass*<sp/>lResolver<sp/>=<sp/>new<sp/>MyURLResolverSubclass();</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/>lContext-&gt;registerURLResolver(lResolver);</highlight></codeline>
<codeline lineno="415"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="416"><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment">You<sp/>will<sp/>note<sp/>that<sp/>this<sp/>mechanism<sp/>is<sp/>exactly<sp/>parallel<sp/>to<sp/>the<sp/>URI</highlight></codeline>
<codeline lineno="418"><highlight class="comment">Mapper<sp/>mechanism.<sp/>Also,<sp/>as<sp/>with<sp/>URI<sp/>Mappers,<sp/>the<sp/>memory<sp/>ownership<sp/>of</highlight></codeline>
<codeline lineno="419"><highlight class="comment">the<sp/>&lt;code&gt;URLResolver&lt;/code&gt;<sp/>instance<sp/>remains<sp/>with<sp/>the<sp/>client<sp/>program;</highlight></codeline>
<codeline lineno="420"><highlight class="comment">it<sp/>must<sp/>de-allocate<sp/>it<sp/>appropriately<sp/>when<sp/>the<sp/>static<sp/>context<sp/>is<sp/>no</highlight></codeline>
<codeline lineno="421"><highlight class="comment">longer<sp/>used.</highlight></codeline>
<codeline lineno="422"><highlight class="comment"></highlight></codeline>
<codeline lineno="423"><highlight class="comment">In<sp/>your<sp/>&lt;code&gt;resolveURL()&lt;/code&gt;<sp/>method,<sp/>the<sp/>&lt;code&gt;aUri&lt;/code&gt;<sp/>and</highlight></codeline>
<codeline lineno="424"><highlight class="comment">&lt;code&gt;aEntityData&lt;/code&gt;<sp/>arguments<sp/>have<sp/>exactly<sp/>the<sp/>same<sp/>meanings<sp/>as</highlight></codeline>
<codeline lineno="425"><highlight class="comment">they<sp/>do<sp/>for<sp/>&lt;code&gt;mapURI()&lt;/code&gt;.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"></highlight></codeline>
<codeline lineno="427"><highlight class="comment">If<sp/>your<sp/>code<sp/>recognizes<sp/>the<sp/>URL<sp/>and<sp/>wishes<sp/>to<sp/>return<sp/>content<sp/>for<sp/>it,</highlight></codeline>
<codeline lineno="428"><highlight class="comment">it<sp/>must<sp/>return<sp/>a<sp/>newly-allocated<sp/>instance<sp/>of<sp/>some<sp/>subclass<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="429"><highlight class="comment">abstract<sp/>class<sp/>&lt;code&gt;Resource&lt;/code&gt;.<sp/>In<sp/>Zorba<sp/>2.0&apos;s<sp/>public<sp/>API,<sp/>there</highlight></codeline>
<codeline lineno="430"><highlight class="comment">is<sp/>only<sp/>one<sp/>such<sp/>subclass,<sp/>&lt;code&gt;StreamResource&lt;/code&gt;,<sp/>which<sp/>wraps</highlight></codeline>
<codeline lineno="431"><highlight class="comment">around<sp/>a<sp/>&lt;code&gt;std::istream&lt;/code&gt;.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">It<sp/>is<sp/>important<sp/>that<sp/>all<sp/>URL<sp/>Resolvers<sp/>check<sp/>the</highlight></codeline>
<codeline lineno="434"><highlight class="comment">&lt;code&gt;EntityData&lt;/code&gt;&apos;s<sp/>Kind<sp/>and<sp/>only<sp/>return<sp/>Resources<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="435"><highlight class="comment">appropriate<sp/>kind<sp/>of<sp/>URIs,<sp/>for<sp/>two<sp/>reasons:</highlight></codeline>
<codeline lineno="436"><highlight class="comment"></highlight></codeline>
<codeline lineno="437"><highlight class="comment">&lt;ol&gt;</highlight></codeline>
<codeline lineno="438"><highlight class="comment"></highlight></codeline>
<codeline lineno="439"><highlight class="comment">&lt;li&gt;They<sp/>must<sp/>return<sp/>an<sp/>appropriate<sp/>subclass<sp/>of<sp/>&lt;code&gt;Resource&lt;/code&gt;</highlight></codeline>
<codeline lineno="440"><highlight class="comment">depending<sp/>on<sp/>the<sp/>entity<sp/>kind.<sp/>Zorba<sp/>is<sp/>prepared<sp/>to<sp/>accept</highlight></codeline>
<codeline lineno="441"><highlight class="comment">&lt;code&gt;StreamResource&lt;/code&gt;<sp/>for<sp/>schemas,<sp/>modules,<sp/>stop-word<sp/>lists,</highlight></codeline>
<codeline lineno="442"><highlight class="comment">thesauri,<sp/>and<sp/>documents,<sp/>but<sp/>not<sp/>for<sp/>collections.<sp/>In<sp/>future,<sp/>there</highlight></codeline>
<codeline lineno="443"><highlight class="comment">will<sp/>likely<sp/>be<sp/>additional<sp/>resource<sp/>subclasses<sp/>and<sp/>additional<sp/>entity</highlight></codeline>
<codeline lineno="444"><highlight class="comment">kinds,<sp/>and<sp/>returning<sp/>an<sp/>inappropriate<sp/>resource<sp/>subclass<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="445"><highlight class="comment">entity<sp/>type<sp/>will<sp/>have<sp/>negative<sp/>consequences.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment">&lt;li&gt;They<sp/>must<sp/>return<sp/>a<sp/>resource<sp/>which<sp/>produces<sp/>data<sp/>appropriate<sp/>for</highlight></codeline>
<codeline lineno="448"><highlight class="comment">the<sp/>kind<sp/>of<sp/>entity<sp/>being<sp/>resolved.<sp/>For<sp/>instance,<sp/>when<sp/>resolving<sp/>a</highlight></codeline>
<codeline lineno="449"><highlight class="comment">schema<sp/>or<sp/>document<sp/>URI,<sp/>Zorba<sp/>expects<sp/>the<sp/>resource<sp/>to<sp/>produce</highlight></codeline>
<codeline lineno="450"><highlight class="comment">well-formed<sp/>XML.<sp/>When<sp/>resolving<sp/>a<sp/>module<sp/>URI,<sp/>Zorba<sp/>expects<sp/>the</highlight></codeline>
<codeline lineno="451"><highlight class="comment">resource<sp/>to<sp/>produce<sp/>an<sp/>XQuery<sp/>library<sp/>module.<sp/>Returning<sp/>a<sp/>resource</highlight></codeline>
<codeline lineno="452"><highlight class="comment">which<sp/>outputs<sp/>incorrect<sp/>data<sp/>will<sp/>result<sp/>in<sp/>errors.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment">&lt;/ol&gt;</highlight></codeline>
<codeline lineno="455"><highlight class="comment"></highlight></codeline>
<codeline lineno="456"><highlight class="comment">As<sp/>a<sp/>fairly<sp/>silly<sp/>but<sp/>functional<sp/>example,<sp/>here<sp/>is<sp/>a<sp/>URL<sp/>Resolver<sp/>that</highlight></codeline>
<codeline lineno="457"><highlight class="comment">returns<sp/>a<sp/>small<sp/>hard-coded<sp/>module<sp/>for<sp/>a<sp/>specific<sp/>URL:</highlight></codeline>
<codeline lineno="458"><highlight class="comment"></highlight></codeline>
<codeline lineno="459"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/>using<sp/>namespace<sp/>zorba;</highlight></codeline>
<codeline lineno="461"><highlight class="comment"></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/>static<sp/>void<sp/>streamReleaser(std::istream*<sp/>aStream)</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>delete<sp/>aStream;</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="comment"></highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>class<sp/>FoobarModuleURLResolver<sp/>:<sp/>public<sp/>URLResolver</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~FoobarModuleURLResolver()<sp/>{}</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Resource*<sp/>resolveURL(const<sp/>String&amp;<sp/>aUrl,</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EntityData<sp/>const*<sp/>aEntityData)</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>have<sp/>only<sp/>one<sp/>module</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(aEntityData-&gt;getKind()<sp/>==<sp/>EntityData::MODULE<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aUrl<sp/>==<sp/>&quot;http://www.example.com/foobar&quot;)<sp/></highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>StreamResource::create</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(new<sp/>std::istringstream</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;module<sp/>namespace<sp/>lm<sp/>=<sp/>&apos;http://www.example.com/foobar&apos;;<sp/>&quot;</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;declare<sp/>function<sp/>lm:foo()<sp/>{<sp/>&apos;foo&apos;<sp/>};&quot;),<sp/>&amp;streamReleaser);</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="489"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="490"><highlight class="comment"></highlight></codeline>
<codeline lineno="491"><highlight class="comment">A<sp/>more<sp/>realistic<sp/>example<sp/>would<sp/>be<sp/>a<sp/>resolver<sp/>that<sp/>takes<sp/>URLs<sp/>(possibly</highlight></codeline>
<codeline lineno="492"><highlight class="comment">with<sp/>a<sp/>non-standard<sp/>scheme,<sp/>such<sp/>as<sp/>&lt;code&gt;db:&lt;/code&gt;)<sp/>and<sp/>loads<sp/>the</highlight></codeline>
<codeline lineno="493"><highlight class="comment">content<sp/>for<sp/>those<sp/>URLs<sp/>from<sp/>a<sp/>database.<sp/>As<sp/>long<sp/>as<sp/>the<sp/>database<sp/>API</highlight></codeline>
<codeline lineno="494"><highlight class="comment">allows<sp/>you<sp/>to<sp/>obtain<sp/>the<sp/>information<sp/>as<sp/>a<sp/>&lt;code&gt;std::istream&lt;/code&gt;,</highlight></codeline>
<codeline lineno="495"><highlight class="comment">you<sp/>may<sp/>stream<sp/>this<sp/>data<sp/>directly<sp/>to<sp/>Zorba.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"></highlight></codeline>
<codeline lineno="497"><highlight class="comment">Two<sp/>notes<sp/>about<sp/>memory<sp/>management:<sp/>First,<sp/>when<sp/>a<sp/>user-defined</highlight></codeline>
<codeline lineno="498"><highlight class="comment">&lt;code&gt;URLResolver&lt;/code&gt;<sp/>returns<sp/>a<sp/>&lt;code&gt;Resource&lt;/code&gt;,<sp/>Zorba<sp/>will</highlight></codeline>
<codeline lineno="499"><highlight class="comment">take<sp/>memory<sp/>ownership<sp/>of<sp/>the<sp/>&lt;code&gt;Resource&lt;/code&gt;,<sp/>and<sp/>will<sp/>free<sp/>it</highlight></codeline>
<codeline lineno="500"><highlight class="comment">when<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>needed.<sp/>Second,<sp/>when<sp/>user<sp/>code<sp/>creates<sp/>a</highlight></codeline>
<codeline lineno="501"><highlight class="comment">&lt;code&gt;StreamResource&lt;/code&gt;,<sp/>the<sp/>&lt;code&gt;StreamResource&lt;/code&gt;<sp/>assumes</highlight></codeline>
<codeline lineno="502"><highlight class="comment">memory<sp/>ownership<sp/>of<sp/>the<sp/>&lt;code&gt;std::istream&lt;/code&gt;<sp/>that<sp/>is<sp/>wrapped.</highlight></codeline>
<codeline lineno="503"><highlight class="comment">However,<sp/>Zorba<sp/>cannot<sp/>free<sp/>the<sp/>&lt;code&gt;std::istream&lt;/code&gt;<sp/>itself,</highlight></codeline>
<codeline lineno="504"><highlight class="comment">because<sp/>it<sp/>was<sp/>instantiated<sp/>inside<sp/>user<sp/>code<sp/>rather<sp/>than<sp/>inside</highlight></codeline>
<codeline lineno="505"><highlight class="comment">Zorba&apos;s<sp/>own<sp/>library.<sp/>On<sp/>Windows,<sp/>in<sp/>some<sp/>circumstances,<sp/>if<sp/>a<sp/>DLL</highlight></codeline>
<codeline lineno="506"><highlight class="comment">deletes<sp/>an<sp/>object<sp/>that<sp/>was<sp/>not<sp/>instantiated<sp/>inside<sp/>that<sp/>DLL,<sp/>the</highlight></codeline>
<codeline lineno="507"><highlight class="comment">application<sp/>will<sp/>crash.<sp/>Therefore,<sp/>the<sp/>&lt;code&gt;StreamResource&lt;/code&gt;</highlight></codeline>
<codeline lineno="508"><highlight class="comment">factory<sp/>function<sp/>&lt;code&gt;create()&lt;/code&gt;<sp/>also<sp/>takes<sp/>a</highlight></codeline>
<codeline lineno="509"><highlight class="comment">&lt;code&gt;StreamReleaser&lt;/code&gt;,<sp/>which<sp/>is<sp/>a<sp/>function<sp/>pointer.<sp/>Zorba<sp/>will</highlight></codeline>
<codeline lineno="510"><highlight class="comment">call<sp/>this<sp/>function<sp/>pointer,<sp/>passing<sp/>the<sp/>&lt;code&gt;std::istream&lt;/code&gt;,</highlight></codeline>
<codeline lineno="511"><highlight class="comment">when<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>needed;<sp/>the<sp/>function<sp/>is<sp/>expected<sp/>to<sp/>free<sp/>the</highlight></codeline>
<codeline lineno="512"><highlight class="comment">&lt;code&gt;std::istream&lt;/code&gt;.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"></highlight></codeline>
<codeline lineno="514"><highlight class="comment">Unlike<sp/>&lt;code&gt;mapURI()&lt;/code&gt;,<sp/>it<sp/>is<sp/>acceptable<sp/>for</highlight></codeline>
<codeline lineno="515"><highlight class="comment">&lt;code&gt;resolveURL&lt;/code&gt;<sp/>to<sp/>throw<sp/>exceptions.<sp/>A<sp/>URL<sp/>Resolver<sp/>should</highlight></codeline>
<codeline lineno="516"><highlight class="comment">throw<sp/>an<sp/>exception<sp/>if<sp/>it<sp/>believes<sp/>that<sp/>it<sp/>is<sp/>canonical<sp/>for<sp/>the<sp/>URL</highlight></codeline>
<codeline lineno="517"><highlight class="comment">(that<sp/>is,<sp/>it<sp/>&quot;should<sp/>be<sp/>able&quot;<sp/>to<sp/>resolve<sp/>it)<sp/>but<sp/>had<sp/>some<sp/>error<sp/>during</highlight></codeline>
<codeline lineno="518"><highlight class="comment">the<sp/>attempt<sp/>to<sp/>resolve<sp/>it.<sp/>However,<sp/>because<sp/>Zorba<sp/>may<sp/>be<sp/>attempting<sp/>to</highlight></codeline>
<codeline lineno="519"><highlight class="comment">resolve<sp/>a<sp/>number<sp/>of<sp/>candidate<sp/>URIs,<sp/>any<sp/>exceptions<sp/>thrown<sp/>from<sp/>a<sp/>URL</highlight></codeline>
<codeline lineno="520"><highlight class="comment">Resolver<sp/>will<sp/>be<sp/>caught<sp/>and<sp/>consumed<sp/>by<sp/>Zorba.<sp/>It<sp/>will<sp/>never<sp/>re-throw</highlight></codeline>
<codeline lineno="521"><highlight class="comment">any<sp/>of<sp/>these<sp/>exceptions.<sp/>It<sp/>will<sp/>merely<sp/>remember<sp/>the<sp/>message<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="522"><highlight class="comment">first<sp/>exception<sp/>(assuming<sp/>that<sp/>it<sp/>extends</highlight></codeline>
<codeline lineno="523"><highlight class="comment">&lt;code&gt;std::exception&lt;/code&gt;).<sp/>If<sp/>and<sp/>only<sp/>if<sp/>&lt;i&gt;no&lt;/i&gt;<sp/>URL<sp/>Resolver</highlight></codeline>
<codeline lineno="524"><highlight class="comment">ever<sp/>returns<sp/>a<sp/>valid<sp/>Resource,<sp/>Zorba<sp/>will<sp/>then<sp/>throw<sp/>a<sp/>new<sp/>exception</highlight></codeline>
<codeline lineno="525"><highlight class="comment">with<sp/>the<sp/>saved<sp/>message<sp/>from<sp/>the<sp/>first-thrown<sp/>exception.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment">\subsection<sp/>component<sp/>Component<sp/>URI<sp/>Mappers<sp/>for<sp/>modules</highlight></codeline>
<codeline lineno="528"><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment">In<sp/>XQuery,<sp/>it<sp/>is<sp/>possible<sp/>for<sp/>a<sp/>particular<sp/>module<sp/>to<sp/>actually<sp/>be</highlight></codeline>
<codeline lineno="530"><highlight class="comment">implemented<sp/>as<sp/>a<sp/>set<sp/>of<sp/>more<sp/>than<sp/>one<sp/>&lt;code&gt;.xq&lt;/code&gt;<sp/>files.<sp/><sp/>When<sp/>a</highlight></codeline>
<codeline lineno="531"><highlight class="comment">query<sp/>imports<sp/>the<sp/>module&apos;s<sp/>URI,<sp/>the<sp/>query<sp/>processor<sp/>is<sp/>expected<sp/>to</highlight></codeline>
<codeline lineno="532"><highlight class="comment">provide<sp/>some<sp/>mechanism<sp/>whereby<sp/>multiple<sp/>files<sp/>will<sp/>be<sp/>loaded<sp/>and</highlight></codeline>
<codeline lineno="533"><highlight class="comment">combined<sp/>to<sp/>form<sp/>the<sp/>whole<sp/>module<sp/>definition.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"></highlight></codeline>
<codeline lineno="535"><highlight class="comment">Zorba<sp/>uses<sp/>&lt;i&gt;Component<sp/>URI<sp/>Mappers&lt;/i&gt;<sp/>to<sp/>allow<sp/>for<sp/>this.<sp/>The<sp/>API<sp/>is</highlight></codeline>
<codeline lineno="536"><highlight class="comment">the<sp/>same<sp/>&lt;code&gt;URIMapper&lt;/code&gt;<sp/>class,<sp/>and<sp/>they<sp/>are<sp/>registered<sp/>with</highlight></codeline>
<codeline lineno="537"><highlight class="comment">the<sp/>static<sp/>context<sp/>using<sp/>the<sp/>same<sp/>&lt;code&gt;registerURIMapper()&lt;/code&gt;</highlight></codeline>
<codeline lineno="538"><highlight class="comment">method.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"></highlight></codeline>
<codeline lineno="540"><highlight class="comment">How<sp/>does<sp/>Zorba<sp/>know<sp/>which<sp/>URI<sp/>Mappers<sp/>are<sp/>intended<sp/>to<sp/>provide<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="541"><highlight class="comment">URIs<sp/>for<sp/>the<sp/>components<sp/>of<sp/>a<sp/>module,<sp/>and<sp/>which<sp/>are<sp/>intended<sp/>to<sp/>provide</highlight></codeline>
<codeline lineno="542"><highlight class="comment">a<sp/>set<sp/>of<sp/>&lt;i&gt;possible&lt;/i&gt;<sp/>candidate<sp/>URIs<sp/>for<sp/>other<sp/>purposes?<sp/>There<sp/>is</highlight></codeline>
<codeline lineno="543"><highlight class="comment">actually<sp/>another<sp/>method<sp/>on<sp/>the<sp/>&lt;code&gt;URIMapper&lt;/code&gt;<sp/>class:</highlight></codeline>
<codeline lineno="544"><highlight class="comment">&lt;code&gt;mapperKind()&lt;/code&gt;.<sp/>This<sp/>method<sp/>should<sp/>return<sp/>a<sp/>value<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="545"><highlight class="comment">enumeration<sp/>&lt;code&gt;URIMapper::Kind&lt;/code&gt;.<sp/>There<sp/>are<sp/>two<sp/>possible</highlight></codeline>
<codeline lineno="546"><highlight class="comment">values:<sp/>COMPONENT<sp/>and<sp/>CANDIDATE.<sp/>The<sp/>default<sp/>implementation<sp/>of</highlight></codeline>
<codeline lineno="547"><highlight class="comment">&lt;code&gt;URIMapper&lt;/code&gt;<sp/>returns<sp/>CANDIDATE,<sp/>so<sp/>for<sp/>normal<sp/>URI<sp/>Mappers</highlight></codeline>
<codeline lineno="548"><highlight class="comment">there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>override<sp/>this<sp/>method.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment">When<sp/>Zorba<sp/>needs<sp/>to<sp/>resolve<sp/>a<sp/>URI<sp/>for<sp/>a<sp/>module<sp/>import,<sp/>it<sp/>first</highlight></codeline>
<codeline lineno="551"><highlight class="comment">invokes<sp/>all<sp/>registered<sp/>component<sp/>URI<sp/>mappers<sp/>to<sp/>form<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="552"><highlight class="comment">&lt;i&gt;component<sp/>URIs&lt;/i&gt;.<sp/>Then,<sp/>it<sp/>resolves<sp/>&lt;i&gt;each&lt;/i&gt;<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="553"><highlight class="comment">component<sp/>URIs<sp/>using<sp/>the<sp/>full<sp/>URI<sp/>resoltuion<sp/>mechanism<sp/>documented</highlight></codeline>
<codeline lineno="554"><highlight class="comment">above<sp/>-<sp/>calling<sp/>all<sp/>candidate<sp/>URI<sp/>mappers<sp/>and<sp/>URL<sp/>resolvers<sp/>in<sp/>turn.</highlight></codeline>
<codeline lineno="555"><highlight class="comment">Assuming<sp/>that<sp/>it<sp/>successfully<sp/>loads<sp/>a<sp/>Resource<sp/>for<sp/>&lt;i&gt;each&lt;/i&gt;</highlight></codeline>
<codeline lineno="556"><highlight class="comment">component<sp/>URI,<sp/>it<sp/>then<sp/>assembles<sp/>all<sp/>of<sp/>these<sp/>Resources<sp/>into<sp/>the</highlight></codeline>
<codeline lineno="557"><highlight class="comment">final,<sp/>loaded<sp/>module.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">Here<sp/>is<sp/>an<sp/>example<sp/>of<sp/>a<sp/>component<sp/>URI<sp/>mapper,<sp/>which<sp/>tells<sp/>Zorba<sp/>to</highlight></codeline>
<codeline lineno="560"><highlight class="comment">load<sp/>two<sp/>other<sp/>URIs<sp/>to<sp/>form<sp/>a<sp/>complete<sp/>module:</highlight></codeline>
<codeline lineno="561"><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/>class<sp/>MyModuleURIMapper<sp/>:<sp/>public<sp/>URIMapper</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~MyModuleURIMapper()<sp/>{}</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>URIMapper::Kind<sp/>mapperKind()<sp/>throw()<sp/>{<sp/>return<sp/>URIMapper::COMPONENT;<sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>mapURI(const<sp/>zorba::String<sp/>aUri,</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EntityData<sp/>const*<sp/>aEntityData,</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;zorba::String&gt;&amp;<sp/>oUris)</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(aEntityData-&gt;getKind()<sp/>!=<sp/>EntityData::MODULE)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(aUri<sp/>==<sp/>&quot;http://www.example.com/mymodule&quot;)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oUris.push_back(&quot;http://www.example.com/mymodule/mod1&quot;);</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oUris.push_back(&quot;http://www.example.com/mymodule/mod2&quot;);</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="584"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="585"><highlight class="comment"></highlight></codeline>
<codeline lineno="586"><highlight class="comment">As<sp/>mentioned,<sp/>each<sp/>of<sp/>the<sp/>component<sp/>URIs<sp/>will<sp/>be<sp/>treated<sp/>to<sp/>the<sp/>full</highlight></codeline>
<codeline lineno="587"><highlight class="comment">URI<sp/>resolution<sp/>mechanism,<sp/>including<sp/>Zorba&apos;s<sp/>built-in<sp/>mechanisms.<sp/><sp/>So,</highlight></codeline>
<codeline lineno="588"><highlight class="comment">given<sp/>the<sp/>code<sp/>above<sp/>and<sp/>a<sp/>default<sp/>Unix<sp/>installation,<sp/>Zorba<sp/>will</highlight></codeline>
<codeline lineno="589"><highlight class="comment">proceed<sp/>to<sp/>attempt<sp/>to<sp/>load<sp/>the<sp/>following<sp/>files:</highlight></codeline>
<codeline lineno="590"><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/>/usr/share/zorba-2.0.0/modules/com/example/www/mymodule/mod1.xq</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/>/usr/share/zorba-2.0.0/modules/com/example/www/mymodule/mod2.xq</highlight></codeline>
<codeline lineno="594"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="595"><highlight class="comment"></highlight></codeline>
<codeline lineno="596"><highlight class="comment">If<sp/>both<sp/>are<sp/>found,<sp/>then<sp/>the<sp/>two<sp/>together<sp/>will<sp/>be<sp/>taken<sp/>to<sp/>form<sp/>the</highlight></codeline>
<codeline lineno="597"><highlight class="comment">complete<sp/>definition<sp/>for<sp/>the<sp/>module</highlight></codeline>
<codeline lineno="598"><highlight class="comment">&lt;code&gt;http://www.example.com/mymodule&lt;/code&gt;.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"></highlight></codeline>
<codeline lineno="600"><highlight class="comment">\subsection<sp/>disallowing<sp/>Disallowing<sp/>URIs</highlight></codeline>
<codeline lineno="601"><highlight class="comment"></highlight></codeline>
<codeline lineno="602"><highlight class="comment">Sometimes,<sp/>it<sp/>might<sp/>be<sp/>required<sp/>to<sp/>forbid<sp/>access<sp/>to<sp/>a<sp/>certain<sp/>URI.<sp/>For</highlight></codeline>
<codeline lineno="603"><highlight class="comment">example,<sp/>a<sp/>user<sp/>might<sp/>disallow<sp/>access<sp/>to<sp/>the<sp/>file<sp/>module<sp/>because<sp/>she</highlight></codeline>
<codeline lineno="604"><highlight class="comment">doesn’t<sp/>want<sp/>XQuery<sp/>developers<sp/>to<sp/>access<sp/>files<sp/>stored<sp/>locally<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="605"><highlight class="comment">machine<sp/>that<sp/>is<sp/>running<sp/>Zorba.<sp/>(Remember<sp/>that<sp/>the<sp/>built-in<sp/>URL</highlight></codeline>
<codeline lineno="606"><highlight class="comment">Resolver<sp/>for<sp/>&lt;code&gt;file:&lt;/code&gt;<sp/>URLs<sp/>is<sp/>implemented<sp/>in<sp/>terms<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="607"><highlight class="comment">file<sp/>module,<sp/>so<sp/>doing<sp/>this<sp/>will<sp/>effectively<sp/>disable<sp/>all<sp/>file<sp/>access<sp/>-</highlight></codeline>
<codeline lineno="608"><highlight class="comment">module<sp/>and<sp/>schema<sp/>importing,<sp/>loading<sp/>documents,<sp/>and<sp/>so<sp/>on.)</highlight></codeline>
<codeline lineno="609"><highlight class="comment"></highlight></codeline>
<codeline lineno="610"><highlight class="comment">Therefore,<sp/>the<sp/>static<sp/>context<sp/>also<sp/>provides<sp/>a<sp/>mechanism<sp/>for<sp/>preventing</highlight></codeline>
<codeline lineno="611"><highlight class="comment">developers<sp/>from<sp/>importing<sp/>particular<sp/>modules.<sp/>This<sp/>is<sp/>also<sp/>handled</highlight></codeline>
<codeline lineno="612"><highlight class="comment">with<sp/>a<sp/>&lt;code&gt;URIMapper&lt;/code&gt;<sp/>in<sp/>a<sp/>simple<sp/>way:<sp/>If<sp/>&lt;i&gt;any&lt;/i&gt;</highlight></codeline>
<codeline lineno="613"><highlight class="comment">registered<sp/>URI<sp/>Mapper<sp/>(candidate<sp/>or<sp/>component)<sp/>ever<sp/>returns<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="614"><highlight class="comment">&lt;code&gt;URIMapper::DENY_ACCESS&lt;/code&gt;<sp/>in<sp/>the<sp/>&lt;code&gt;oUris&lt;/code&gt;<sp/>vector,</highlight></codeline>
<codeline lineno="615"><highlight class="comment">Zorba<sp/>will<sp/>immediately<sp/>throw<sp/>a<sp/>&quot;URI<sp/>access<sp/>denied&quot;<sp/>exception.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"></highlight></codeline>
<codeline lineno="617"><highlight class="comment">Here<sp/>is<sp/>an<sp/>example<sp/>URI<sp/>Mapper<sp/>which<sp/>will<sp/>suppress<sp/>the<sp/>loading<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="618"><highlight class="comment">file<sp/>module:</highlight></codeline>
<codeline lineno="619"><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/><sp/>class<sp/>DenyFileAccessURIMapper<sp/>:<sp/>public<sp/>URIMapper</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>~DenyFileAccessURIMapper()<sp/>{}</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>mapURI(const<sp/>zorba::String<sp/>aUri,</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EntityData<sp/>const*<sp/>aEntityData,</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;zorba::String&gt;&amp;<sp/>oUris)</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(aEntityData-&gt;getKind()<sp/>==<sp/>EntityData::MODULE<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aUri<sp/>==<sp/>&quot;http://www.zorba-xquery.com/modules/file&quot;)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oUris.push_back(URIMapper::DENY_ACCESS);</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="637"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="638"><highlight class="comment"></highlight></codeline>
<codeline lineno="639"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/doc/zorba/uriresolvers.dox"/>
  </compounddef>
</doxygen>
