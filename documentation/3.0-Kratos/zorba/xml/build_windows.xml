<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="build_windows" kind="page">
    <compoundname>build_windows</compoundname>
    <title>Zorba Build Notes for Windows Users</title>
    <detaileddescription>
<sect1 id="build_windows_1windows_requirements">
<title>Requirements for Windows Builds</title>
<para><itemizedlist>
<listitem><para>In order to compile Zorba on Windows, you need a working Visual Studio (Express) installation (2008, 2010).</para></listitem><listitem><para>If you want to compile Zorba using Visual Studio 2008, you will need to install the <ulink url="http://www.microsoft.com/downloads/en/details.aspx?FamilyId=D466226B-8DAB-445F-A7B4-448B326C48E7">Visual C++ 2008 Feature Pack Release</ulink>.</para></listitem><listitem><para>Make sure that the libraries required for Zorba are built with the same version of Visual Studio that you use.</para></listitem><listitem><para>The Windows version of some required packages are distributed by other web sites (all of them are pointed to from the main package web sites indicated in the <ref refid="build_prerequisites_1third_party_libs" kindref="member">Library Dependencies</ref> section):<itemizedlist>
<listitem><para>Libxml2 and Iconv: <ulink url="http://www.zlatkovic.com/libxml.en.html">http://www.zlatkovic.com/libxml.en.html</ulink></para></listitem><listitem><para>CURL: <ulink url="http://curl.haxx.se/download.html">http://curl.haxx.se/download.html</ulink></para></listitem><listitem><para>Libxslt: <ulink url="http://www.zlatkovic.com/pub/libxml/">http://www.zlatkovic.com/pub/libxml/</ulink></para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="build_windows_1windows_autodll">
<title>Zorba&apos;s Automatic DLL Detection Mechanism</title>
<para>Zorba has in place an automatic DLL detection mechanism. This will try to automatically gather all the DLLs from the third party libraries and install them with Zorba when you do &quot;make install&quot; or you build the Visual Studio INSTALL project, to ensure that your installation will function regardless of the system or user&apos;s PATH.</para><para>Zorba will search for the third party libraries in order in:<orderedlist>
<listitem><para>all the directories pointed by the <computeroutput>ZORBA_THIRD_PARTY_REQUIREMENTS</computeroutput> CMake configuration parameter<itemizedlist>
<listitem><para>e.g. if you have Xerces in &quot;C:\tools&quot; and IConv in &quot;D:\tools&quot;, you must configure your build as follows: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmake<sp/>-D<sp/>ZORBA_THIRD_PARTY_REQUIREMENTS=C:\tools;D:\tool<sp/>{ZORBASRC}</highlight></codeline>
</programlisting> and Zorba will find all it needs from Xerces and Iconv. (The directory names must contain &quot;xerces&quot; and &quot;iconv&quot; respectively, case insensitive)</para></listitem></itemizedlist>
</para></listitem><listitem><para>the <computeroutput>Program Files</computeroutput> directory on your system<itemizedlist>
<listitem><para>e.g. if you have cURL installed in &quot;C:\Program Files\*cURL*&quot;, Zorba will find all it needs from cURL. (The directory must contain &quot;curl&quot;, case insensitive.)</para></listitem></itemizedlist>
</para></listitem><listitem><para>all the paths in the <computeroutput>PATH</computeroutput> variable<itemizedlist>
<listitem><para>e.g. if you have &quot;C:\tools\*ICU*\bin&quot; in your path, Zorba will find all it needs from ICU. (The directory must only contain &quot;icu&quot;.)</para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para><para>The important thing to note here is that if you have any third-party requirements installed in unusual locations, you should use the CMake configuration parameter <computeroutput>ZORBA_THIRD_PARTY_REQUIREMENTS</computeroutput> instead of <computeroutput>CMAKE_PREFIX_PATH</computeroutput> to specify those locations when configuring Zorba.</para></sect1>
<sect1 id="build_windows_1windows_nmake">
<title>Building Zorba using a NMake Project</title>
<para><orderedlist>
<listitem><para>Start a Visual Studio Command Line.</para></listitem><listitem><para>Change the current working directory to the <computeroutput>{ZORBABUILD}</computeroutput> directory (as described in <ref refid="build_prepare_1create_build_dir" kindref="member">Creating a Build Directory</ref>).</para></listitem><listitem><para>Execute CMake as follows: <programlisting><codeline><highlight class="normal">cmake<sp/>-G<sp/></highlight><highlight class="stringliteral">&quot;NMake<sp/>Makefiles&quot;</highlight><highlight class="normal"><sp/>{ZORBASRC}</highlight></codeline>
</programlisting></para></listitem><listitem><para>Now you are ready to call "<computeroutput>nmake"</computeroutput> from the <computeroutput>{ZORBABUILD}</computeroutput> directory.</para></listitem></orderedlist>
</para></sect1>
<sect1 id="build_windows_1windows_visualstudio">
<title>Building Zorba using a Visual Studio Project</title>
<para><orderedlist>
<listitem><para>Start Visual Studio Command Line</para></listitem><listitem><para>Change the current working directory into the <computeroutput>{ZORBABUILD}</computeroutput> directory (as described in <ref refid="build_prepare_1create_build_dir" kindref="member">Creating a Build Directory</ref>).</para></listitem><listitem><para>Execute CMake with the appropriate CMake Visual Studio generator for your installation (see <computeroutput>cmake --help</computeroutput> for a list of generators). For instance, <programlisting><codeline><highlight class="normal">cmake<sp/>-G<sp/></highlight><highlight class="stringliteral">&quot;Visual<sp/>Studio<sp/>10&quot;</highlight><highlight class="normal"><sp/>{ZORBASRC}</highlight></codeline>
</programlisting></para></listitem><listitem><para>Start Visual Studio, open the generated <computeroutput>zorba.sln</computeroutput> project file in <computeroutput>{ZORBABUILD}</computeroutput>, and build the <computeroutput>ALL</computeroutput> project.</para></listitem></orderedlist>
</para></sect1>
<sect1 id="build_windows_1windows_https_support">
<title>HTTPS support</title>
<para><itemizedlist>
<listitem><para>In order to have SSL support in Zorba, you have to use the CURL library that has SSL support.</para></listitem><listitem><para>There is one more thing: in order to validate the server&apos;s certificate, CURL+SSL needs to know about the root Certificates of Authenticity (CA): a set of public keys freely available on the internet.</para></listitem><listitem><para>On Windows, Zorba expects this file to be called <computeroutput>cacert.pem</computeroutput> and searches for it in the current directory and system paths.</para></listitem><listitem><para>This <computeroutput>cacert.pem</computeroutput> file can be found on the curl page: <ulink url="http://curl.haxx.se/docs/caextract.html">http://curl.haxx.se/docs/caextract.html</ulink> .</para></listitem><listitem><para>In order to disable the validation of the server certificate, the <computeroutput>ZORBA_VERIFY_PEER_SSL_CERTIFICATE</computeroutput> can be set to <computeroutput>OFF</computeroutput> in cmake (and actually this is the default value). Set it to <computeroutput>ON</computeroutput> to validate server certificate chain on every access to <computeroutput><ulink url="https://">https://</ulink></computeroutput> .</para></listitem><listitem><para>To read more about CURL+SSL: <ulink url="http://curl.haxx.se/docs/sslcerts.html">http://curl.haxx.se/docs/sslcerts.html</ulink> .</para></listitem><listitem><para>As an <computeroutput>https</computeroutput> test page, we used for example the rss feed fn:doc(&apos;<ulink url="https://www.npr.org/rss/rss.php?id=1001&apos;">https://www.npr.org/rss/rss.php?id=1001&apos;</ulink>) .</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="build_windows_1windows_noncore_modules">
<title>Downloads for Non-Core Modules</title>
<sect2 id="build_windows_1windows_imagemagick">
<title>ImageMagick (image-processing modules)</title>
<para>Just download the ImageMagick Windows binary from <ulink url="http://www.imagemagick.org/script/binary-releases.php">http://www.imagemagick.org/script/binary-releases.php</ulink> and install it. We recommend the latest &quot;Q8-windows-dll&quot; version. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
