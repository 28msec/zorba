<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="xquery__functions_8h" kind="file">
    <compoundname>xquery_functions.h</compoundname>
    <includes local="no">zorba/config.h</includes>
    <includes refid="unique__ptr_8h" local="no">zorba/internal/unique_ptr.h</includes>
    <includes refid="zorba__string_8h" local="no">zorba/zorba_string.h</includes>
    <incdepgraph>
      <node id="2543">
        <label>functional</label>
      </node>
      <node id="2547">
        <label>iterator</label>
      </node>
      <node id="2538">
        <label>cxx_util.h</label>
        <link refid="cxx__util_8h"/>
        <childnode refid="2535" relation="include">
        </childnode>
      </node>
      <node id="2545">
        <label>string</label>
      </node>
      <node id="2546">
        <label>zorba/zorba_string.h</label>
        <link refid="zorba__string_8h"/>
        <childnode refid="2547" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2535" relation="include">
        </childnode>
      </node>
      <node id="2534">
        <label>xquery_functions.h</label>
        <link refid="xquery_functions.h"/>
        <childnode refid="2535" relation="include">
        </childnode>
        <childnode refid="2536" relation="include">
        </childnode>
        <childnode refid="2546" relation="include">
        </childnode>
      </node>
      <node id="2539">
        <label>type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="2535" relation="include">
        </childnode>
        <childnode refid="2540" relation="include">
        </childnode>
      </node>
      <node id="2544">
        <label>sstream</label>
      </node>
      <node id="2536">
        <label>zorba/internal/unique_ptr.h</label>
        <link refid="unique__ptr_8h"/>
        <childnode refid="2535" relation="include">
        </childnode>
        <childnode refid="2537" relation="include">
        </childnode>
        <childnode refid="2538" relation="include">
        </childnode>
        <childnode refid="2539" relation="include">
        </childnode>
        <childnode refid="2541" relation="include">
        </childnode>
      </node>
      <node id="2541">
        <label>ztd.h</label>
        <link refid="ztd_8h"/>
        <childnode refid="2542" relation="include">
        </childnode>
        <childnode refid="2543" relation="include">
        </childnode>
        <childnode refid="2544" relation="include">
        </childnode>
        <childnode refid="2545" relation="include">
        </childnode>
        <childnode refid="2535" relation="include">
        </childnode>
        <childnode refid="2538" relation="include">
        </childnode>
        <childnode refid="2539" relation="include">
        </childnode>
      </node>
      <node id="2540">
        <label>type_traits</label>
      </node>
      <node id="2535">
        <label>zorba/config.h</label>
      </node>
      <node id="2537">
        <label>algorithm</label>
      </node>
      <node id="2542">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innerclass refid="structzorba_1_1Sequence_1_1iterator" prot="public">zorba::Sequence::iterator</innerclass>
    <innerclass refid="classzorba_1_1Sequence" prot="public">zorba::Sequence</innerclass>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <innernamespace refid="namespacezorba_1_1fn">zorba::fn</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_XQUERY_FUNCTIONS_API_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_XQUERY_FUNCTIONS_API_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="unique__ptr_8h" kindref="compound">zorba/internal/unique_ptr.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="zorba__string_8h" kindref="compound">zorba/zorba_string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>Provides<sp/>a<sp/>way<sp/>for<sp/>a<sp/>function<sp/>to<sp/>return<sp/>a<sp/>sequence<sp/>of<sp/>some<sp/>type<sp/>\c<sp/>T<sp/>that</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>iterated<sp/>over.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>type<sp/>of<sp/>sequence.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="35" refid="classzorba_1_1Sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1Sequence" kindref="compound" tooltip="Provides a way for a function to return a sequence of some type T that can be iterated over...">Sequence</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37" refid="classzorba_1_1Sequence_1a09044eafdee04467d89d90ad19f7f945" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classzorba_1_1Sequence_1a09044eafdee04467d89d90ad19f7f945" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structzorba_1_1Sequence_1_1iterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzorba_1_1Sequence_1_1iterator" kindref="compound">iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="structzorba_1_1Sequence_1_1iterator_1a42a4c486cd7e1390cf0485650da3c7a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structzorba_1_1Sequence_1_1iterator_1a42a4c486cd7e1390cf0485650da3c7a2" kindref="member">~iterator</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structzorba_1_1Sequence_1_1iterator_1a7f7ff7ef3d00da46e4ced7aea2bfcabf" kindref="member">next</ref>(<sp/><ref refid="classzorba_1_1Sequence_1a09044eafdee04467d89d90ad19f7f945" kindref="member">value_type</ref><sp/>*result<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>new<sp/>%Sequence.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>constructor<sp/>is<sp/>intended<sp/>only<sp/>for<sp/>function<sp/>implementors.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>i<sp/>The<sp/>iterator<sp/>that<sp/>provides<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>sequence.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Ownership<sp/>of<sp/>the<sp/>iterator<sp/>is<sp/>taken.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classzorba_1_1Sequence_1ae476275f8debad87eb9c42be700a0397" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Sequence_1ae476275f8debad87eb9c42be700a0397" kindref="member" tooltip="Constructs a new Sequence.">Sequence</ref>(<sp/><ref refid="structzorba_1_1Sequence_1_1iterator" kindref="compound">iterator</ref><sp/>*i<sp/>)<sp/>:<sp/>i_(<sp/>i<sp/>)<sp/>{<sp/>}<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Copy<sp/>constructs<sp/>a<sp/>%Sequence.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>%Sequence<sp/>to<sp/>copy<sp/>from.<sp/><sp/>Note<sp/>that<sp/>it<sp/>is<sp/>a<sp/>destructive<sp/>copy</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>that<sp/>the<sp/>sequence<sp/>of<sp/>\a<sp/>s<sp/>is<sp/>&apos;i&apos;<sp/>moved.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classzorba_1_1Sequence_1a3110bac0e0f7b19bb864e84326bd14e6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Sequence_1a3110bac0e0f7b19bb864e84326bd14e6" kindref="member" tooltip="Copy constructs a Sequence.">Sequence</ref>(<sp/><ref refid="classzorba_1_1Sequence" kindref="compound" tooltip="Provides a way for a function to return a sequence of some type T that can be iterated over...">Sequence</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s<sp/>)<sp/>:<sp/>i_(<sp/>std::<ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>(<sp/>s.i_<sp/>)<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>next<sp/>element<sp/>in<sp/>the<sp/>sequence.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>result<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>variable<sp/>to<sp/>receive<sp/>the<sp/>next<sp/>element.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>there<sp/>is<sp/>a<sp/>next<sp/>element.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classzorba_1_1Sequence_1a08ff4a01dd545876c85cd9f5cdbbf253" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1Sequence_1a08ff4a01dd545876c85cd9f5cdbbf253" kindref="member" tooltip="Gets the next element in the sequence.">next</ref>(<sp/><ref refid="classzorba_1_1Sequence_1a09044eafdee04467d89d90ad19f7f945" kindref="member">value_type</ref><sp/>*result<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i_-&gt;next(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">std::unique_ptr&lt;iterator&gt;</ref><sp/>i_;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Sequence" kindref="compound" tooltip="Provides a way for a function to return a sequence of some type T that can be iterated over...">Sequence</ref>&amp;<sp/>operator=(<sp/><ref refid="classzorba_1_1Sequence" kindref="compound" tooltip="Provides a way for a function to return a sequence of some type T that can be iterated over...">Sequence</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="namespacezorba_1_1fn" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fn<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">//////////<sp/>5.4<sp/>Functions<sp/>on<sp/>string<sp/>values<sp/>/////////////////////////////////////</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>Translates<sp/>every<sp/>character<sp/>to<sp/>its<sp/>upper-case<sp/>correspondent<sp/>as<sp/>defined<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>appropriate<sp/>case<sp/>mappings<sp/>section<sp/>in<sp/>the<sp/>Unicode<sp/>standard.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>Every<sp/>lower-case<sp/>character<sp/>that<sp/>does<sp/>not<sp/>have<sp/>an<sp/>upper-case<sp/>correspondent,</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>as<sp/>well<sp/>as<sp/>every<sp/>upper-case<sp/>character,<sp/>is<sp/>included<sp/>in<sp/>the<sp/>returned<sp/>value<sp/>in</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>its<sp/>original<sp/>form.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg<sp/>The<sp/>string<sp/>to<sp/>translate.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@return<sp/>\a<sp/>arg<sp/>translated<sp/>to<sp/>upper-case.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/><ref refid="namespacezorba_1_1fn_1aaa8effb83bef7eb3351939f2bc91df29" kindref="member" tooltip="Translates every character to its upper-case correspondent as defined in the appropriate case mapping...">upper_case</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>Translates<sp/>every<sp/>character<sp/>to<sp/>its<sp/>lower-case<sp/>correspondent<sp/>as<sp/>defined<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>appropriate<sp/>case<sp/>mappings<sp/>section<sp/>in<sp/>the<sp/>Unicode<sp/>standard.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Every<sp/>upper-case<sp/>character<sp/>that<sp/>does<sp/>not<sp/>have<sp/>a<sp/>lower-case<sp/>correspondent,<sp/>as</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>well<sp/>as<sp/>every<sp/>lower-case<sp/>character,<sp/>is<sp/>included<sp/>in<sp/>the<sp/>returned<sp/>value<sp/>in<sp/>its</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>original<sp/>form.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg<sp/>The<sp/>string<sp/>to<sp/>translate.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@return<sp/>\a<sp/>arg<sp/>translated<sp/>to<sp/>lower-case.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/><ref refid="namespacezorba_1_1fn_1a7e2d96040bd5f3c33e21c831da771e71" kindref="member" tooltip="Translates every character to its lower-case correspondent as defined in the appropriate case mapping...">lower_case</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">//////////<sp/>5.5<sp/>Functions<sp/>based<sp/>on<sp/>substring<sp/>matching<sp/>//////////////////////////</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>Tests<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>value<sp/>of<sp/>\a<sp/>arg1<sp/>ends<sp/>with<sp/>a<sp/>sequence<sp/>of</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>collation<sp/>units<sp/>that<sp/>provides<sp/>a<sp/>match<sp/>to<sp/>the<sp/>collation<sp/>units<sp/>of<sp/>\a<sp/>arg2.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg1<sp/>The<sp/>string<sp/>to<sp/>test.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg2<sp/>The<sp/>substring.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>\a<sp/>arg1<sp/>ends<sp/>with<sp/>\a<sp/>arg2<sp/>or<sp/>\a<sp/>arg2<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>zero-length<sp/>string.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fn_1a13ee0dc2e640c8d17375b5a2dbc90480" kindref="member" tooltip="Tests whether or not the value of arg1 ends with a sequence of collation units that provides a match ...">ends_with</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>Tests<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>value<sp/>of<sp/>\a<sp/>arg1<sp/>ends<sp/>with<sp/>a<sp/>sequence<sp/>of</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>collation<sp/>units<sp/>that<sp/>provides<sp/>a<sp/>match<sp/>to<sp/>the<sp/>collation<sp/>units<sp/>of<sp/>\a<sp/>arg2.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg1<sp/>The<sp/>string<sp/>to<sp/>test.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg2<sp/>The<sp/>substring.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>\a<sp/>arg1<sp/>ends<sp/>with<sp/>\a<sp/>arg2<sp/>or<sp/>\a<sp/>arg2<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>zero-length<sp/>string.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fn_1a13ee0dc2e640c8d17375b5a2dbc90480" kindref="member" tooltip="Tests whether or not the value of arg1 ends with a sequence of collation units that provides a match ...">ends_with</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*arg2<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>Tests<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>value<sp/>of<sp/>\a<sp/>arg1<sp/>starts<sp/>with<sp/>a<sp/>sequence<sp/>of</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>collation<sp/>units<sp/>that<sp/>provides<sp/>a<sp/>match<sp/>to<sp/>the<sp/>collation<sp/>units<sp/>of<sp/>\a<sp/>arg2.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg1<sp/>The<sp/>string<sp/>to<sp/>test.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg2<sp/>The<sp/>substring.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>\a<sp/>arg1<sp/>starts<sp/>with<sp/>\a<sp/>arg2<sp/>or<sp/>\a<sp/>arg2<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>zero-length<sp/>string.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fn_1a440d54d344d183d26f604491cbfed2d6" kindref="member" tooltip="Tests whether or not the value of arg1 starts with a sequence of collation units that provides a matc...">starts_with</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>Tests<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>value<sp/>of<sp/>\a<sp/>arg1<sp/>starts<sp/>with<sp/>a<sp/>sequence<sp/>of</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>collation<sp/>units<sp/>that<sp/>provides<sp/>a<sp/>match<sp/>to<sp/>the<sp/>collation<sp/>units<sp/>of<sp/>\a<sp/>arg2.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg1<sp/>The<sp/>string<sp/>to<sp/>test.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>@param<sp/>arg2<sp/>The<sp/>substring.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>\a<sp/>arg1<sp/>starts<sp/>with<sp/>\a<sp/>arg2<sp/>or<sp/>\a<sp/>arg2<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>zero-length<sp/>string.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fn_1a440d54d344d183d26f604491cbfed2d6" kindref="member" tooltip="Tests whether or not the value of arg1 starts with a sequence of collation units that provides a matc...">starts_with</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*arg2<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="162"><highlight class="comment">////////<sp/>6<sp/>Functions<sp/>that<sp/>manipulate<sp/>URIs<sp/>/////////////////////////////////////</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>Encodes<sp/>reserved<sp/>characters<sp/>in<sp/>an<sp/>xs:string<sp/>that<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>in</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>the<sp/>path<sp/>segment<sp/>of<sp/>a<sp/>URI.<sp/><sp/>It<sp/>is<sp/>invertible<sp/>but<sp/>not<sp/>idempotent.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>applies<sp/>the<sp/>URI<sp/>escaping<sp/>rules<sp/>defined<sp/>in<sp/>section<sp/>2<sp/>of<sp/>[RFC</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>3986]<sp/>to<sp/>the<sp/>xs:string<sp/>supplied<sp/>as<sp/>\a<sp/>uri_part.<sp/><sp/>The<sp/>effect<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>is<sp/>to<sp/>escape<sp/>reserved<sp/>characters.<sp/>Each<sp/>such<sp/>character<sp/>in<sp/>the<sp/>string<sp/>is</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>replaced<sp/>with<sp/>its<sp/>percent-encoded<sp/>form<sp/>as<sp/>described<sp/>in<sp/>[RFC<sp/>3986].</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>All<sp/>characters<sp/>are<sp/>escaped<sp/>except<sp/>those<sp/>identified<sp/>as<sp/>&quot;unreserved&quot;<sp/>by<sp/>[RFC</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>3986],<sp/>that<sp/>is<sp/>the<sp/>upper-<sp/>and<sp/>lower-case<sp/>letters<sp/>A-Z,<sp/>the<sp/>digits<sp/>0-9,</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>HYPHEN-MINUS<sp/>(&quot;-&quot;),<sp/>LOW<sp/>LINE<sp/>(&quot;_&quot;),<sp/>FULL<sp/>STOP<sp/>&quot;.&quot;,<sp/>and<sp/>TILDE<sp/>&quot;~&quot;.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@param<sp/>uri_part<sp/>The<sp/>URI<sp/>to<sp/>be<sp/>encoded.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>encoded<sp/>string.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/><ref refid="namespacezorba_1_1fn_1acc3abf399f9121f194d9e6f002130e82" kindref="member" tooltip="Encodes reserved characters in an xs:string that is intended to be used in the path segment of a URI...">encode_for_uri</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;uri_part<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment">//////////<sp/>7.6<sp/>String<sp/>Functions<sp/>that<sp/>Use<sp/>Pattern<sp/>Matching<sp/>/////////////////////</highlight></codeline>
<codeline lineno="184"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>breaks<sp/>the<sp/>\a<sp/>input<sp/>string<sp/>into<sp/>a<sp/>sequence<sp/>of<sp/>strings,</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>treating<sp/>any<sp/>substring<sp/>that<sp/>matches<sp/>\a<sp/>pattern<sp/>as<sp/>a<sp/>separator.<sp/><sp/>The</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>separators<sp/>themselves<sp/>are<sp/>not<sp/>returned.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>Performance<sp/>note:<sp/>if<sp/>\a<sp/>pattern<sp/>is<sp/>a<sp/>simple<sp/>string<sp/>(not<sp/>a<sp/>regular<sp/>expression</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>with<sp/>meta-characers),<sp/>it<sp/>is<sp/>more<sp/>efficient<sp/>to<sp/>use<sp/>String::find().</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@param<sp/>input<sp/>The<sp/>string<sp/>to<sp/>be<sp/>split<sp/>into<sp/>tokens.<sp/><sp/>If<sp/>\a<sp/>input<sp/>is<sp/>the<sp/>empty</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>sequence,<sp/>or<sp/>if<sp/>\a<sp/>input<sp/>is<sp/>the<sp/>zero-length<sp/>string,<sp/>the<sp/>result<sp/>is<sp/>the<sp/>empty</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>sequence.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@param<sp/>pattern<sp/>The<sp/>regular<sp/>expression.<sp/><sp/>If<sp/>it<sp/>matches<sp/>a<sp/>zero-length<sp/>string,</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>then<sp/>an<sp/>error<sp/>is<sp/>raised:<sp/>[err:FORX0003].</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param<sp/>flags<sp/>The<sp/>regular<sp/>expression<sp/>flags,<sp/>if<sp/>any.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@return<sp/>a<sp/>sequence<sp/>of<sp/>strings<sp/>for<sp/>the<sp/>tokens.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="classzorba_1_1Sequence" kindref="compound" tooltip="Provides a way for a function to return a sequence of some type T that can be iterated over...">Sequence&lt;String&gt;</ref><sp/><ref refid="namespacezorba_1_1fn_1aeeba766657532850344abf0bc70bb4e3" kindref="member" tooltip="This function breaks the input string into a sequence of strings, treating any substring that matches...">tokenize</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;input,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pattern,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*flags<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>breaks<sp/>the<sp/>\a<sp/>input<sp/>string<sp/>into<sp/>a<sp/>sequence<sp/>of<sp/>strings,</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>treating<sp/>any<sp/>substring<sp/>that<sp/>matches<sp/>\a<sp/>pattern<sp/>as<sp/>a<sp/>separator.<sp/><sp/>The</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>separators<sp/>themselves<sp/>are<sp/>not<sp/>returned.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>Performance<sp/>note:<sp/>if<sp/>\a<sp/>pattern<sp/>is<sp/>a<sp/>simple<sp/>string<sp/>(not<sp/>a<sp/>regular<sp/>expression</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>with<sp/>meta-characers),<sp/>it<sp/>is<sp/>more<sp/>efficient<sp/>to<sp/>use<sp/>String::find().</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>@param<sp/>input<sp/>The<sp/>string<sp/>to<sp/>be<sp/>split<sp/>into<sp/>tokens.<sp/><sp/>If<sp/>\a<sp/>input<sp/>is<sp/>the<sp/>empty</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>sequence,<sp/>or<sp/>if<sp/>\a<sp/>input<sp/>is<sp/>the<sp/>zero-length<sp/>string,<sp/>the<sp/>result<sp/>is<sp/>the<sp/>empty</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>sequence.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@param<sp/>pattern<sp/>The<sp/>regular<sp/>expression.<sp/><sp/>If<sp/>it<sp/>matches<sp/>a<sp/>zero-length<sp/>string,</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>then<sp/>an<sp/>error<sp/>is<sp/>raised:<sp/>[err:FORX0003].</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param<sp/>flags<sp/>The<sp/>regular<sp/>expression<sp/>flags,<sp/>if<sp/>any.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@return<sp/>a<sp/>sequence<sp/>of<sp/>strings<sp/>for<sp/>the<sp/>tokens.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="namespacezorba_1_1fn_1aec9cbe6bd918c599a9c4584190e3f2a9" refkind="member"><highlight class="normal"><ref refid="classzorba_1_1Sequence" kindref="compound" tooltip="Provides a way for a function to return a sequence of some type T that can be iterated over...">Sequence&lt;String&gt;</ref><sp/><ref refid="namespacezorba_1_1fn_1aeeba766657532850344abf0bc70bb4e3" kindref="member" tooltip="This function breaks the input string into a sequence of strings, treating any substring that matches...">tokenize</ref>(<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;input,<sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;pattern,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*flags<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fn_1aeeba766657532850344abf0bc70bb4e3" kindref="member" tooltip="This function breaks the input string into a sequence of strings, treating any substring that matches...">tokenize</ref>(<sp/>input,<sp/>pattern.<ref refid="classzorba_1_1String_1a96b65111db89355b959066ccab039698" kindref="member" tooltip="Gets a pointer to a null-terminated array of characters representing the string&amp;#39;s contents...">c_str</ref>(),<sp/>flags<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="228"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_XQUERY_FUNCTIONS_API_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h"/>
  </compounddef>
</doxygen>
