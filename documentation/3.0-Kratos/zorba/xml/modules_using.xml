<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="modules_using" kind="page">
    <compoundname>modules_using</compoundname>
    <title>Using Modules in Zorba</title>
    <detaileddescription>
<sect1 id="modules_using_1mod_importing">
<title>Importing Modules</title>
<para>To make use of a particular module in your query, you must first <emphasis>import</emphasis> the module. XQuery provides standard syntax for doing this:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>This will load all the functions and variables declared by the named module into your query, and associate the specified prefix (in this case &quot;file&quot;) with the URI of the module. You can then utilize these functions in your query:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref>:<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a11cc1dd79aff8b41628c4f17295d25a7" kindref="member" tooltip="Icelandic.">is</ref>-<ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref>(</highlight><highlight class="stringliteral">&quot;foo.txt&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal">then<sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref>:</highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;foo.txt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>()</highlight></codeline>
</programlisting></para><para>You may import as many modules as you wish, so long as each is at a unique URI and is associated with a unique prefix.</para><para><ulink url="../../../download">Please check here</ulink> for more information about importing <ref refid="modules_top_1non_core_modules" kindref="member">Non-core Modules</ref>.</para><para>Note: the URI specified to <computeroutput>import module</computeroutput> will be resolved by Zorba&apos;s URI resolution mechanism; often this will result in the module being loaded from the local filesystem, even though most module URIs are in the <computeroutput>http:</computeroutput> scheme. For more information on this mechanism, see <ref refid="uriresolvers" kindref="compound">URI Resolvers</ref>.</para><para>Alternately, you can load a specific file as a module as follows:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file&quot;</highlight><highlight class="normal"><sp/>at<sp/></highlight><highlight class="stringliteral">&quot;file.xq&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>As discussed in <ref refid="uriresolvers" kindref="compound">URI Resolvers</ref>, this technique is usually best avoided in larger applications; however, it is useful for quick testing and debugging.</para></sect1>
<sect1 id="modules_using_1mod_versioning">
<title>Versioning Modules</title>
<para>Zorba extends XQuery with the concept of <emphasis>versioned modules</emphasis>. A given module may be made available in several versions over time, and a given installation of Zorba may have multiple versions available.</para><para>Version numbers for modules in Zorba are of the form <emphasis>major.minor[.patch]</emphasis>. For example: &quot;1.0&quot;, &quot;2.5&quot;, and &quot;2.5.1&quot; are all legal version numbers.</para><para>You import a particular version of a module by specifying the version number as a <emphasis>fragment</emphasis> at the end of the module&apos;s namespace URI. For instance, to import version 2.0 of the file module:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file#2.2&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><sect2 id="modules_using_1mod_ver_implies">
<title>Implications of Version Numbers</title>
<para>Zorba presumes that a given <emphasis>minor</emphasis> version is backwards-compatible with any earlier <emphasis>minor</emphasis> version, but that later <emphasis>minor</emphasis> versions introduce additional API features that are not available in earlier versions. It will therefore allow a later <emphasis>minor</emphasis> version to be imported than is specified in the <computeroutput>import module</computeroutput> statement. For example, if version 2.4 of the file module is available, the above import statement will load it, even though the import statement specifies 2.2. On the other hand, if only version 2.0 of the file module available, the above import statement will <bold>not</bold> load it, because it is assumed that the query depends on features which were not introduced until version 2.2.</para><para>Zorba presumes that a given <emphasis>major</emphasis> version may have incompatible changes to its API compared to a lower major version. It will therefore <bold>not</bold> allow a later <emphasis>major</emphasis> version to be imported than is specified in the <computeroutput>import module</computeroutput> statement. For example, if only version 3.3 of the file module is available, the above import statement will <bold>not</bold> load it, because it is assumed that version 3.x has API differences that are incompatible with version 2.x.</para><para>Zorba treats <emphasis>patch</emphasis> versions (if present) in the same way as <emphasis>minor</emphasis> versions: they effectively occur &quot;between&quot; minor versions, and it is presumed that they may introduce new APIs which are not available in lower versions. So, given:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file#2.5.2&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>Zorba will, for example, import version 2.5.3, 2.6, or 2.6.1 if one of them is available. It will <bold>not</bold> import version 2.5.1 or 2.5.</para></sect2>
<sect2 id="modules_using_1mod_ver_specifying">
<title>Specifying Version Ranges</title>
<para>You may import a range of version numbers, in which case Zorba will import the latest available version which matches the range. For example, if you know that any 2.x or 3.x version of the file module provides the APIs your query requires, you can use:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file#2.0-3.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>Zorba will import the latest 3.x version available; or, if there are no 3.x versions, then it will import the latest 2.x version.</para><para>If you know you depend on functionality that was introduced in version 2.2, but that 3.x also will work, you can use:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file#2.2-3.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>In this case, Zorba will import the latest 3.x version available; or, if there are no 3.x versions, then it will import the latest 2.x version so long as it is at least 2.2.</para></sect2>
<sect2 id="modules_using_1mod_ver_invalid">
<title>Invalid Version Ranges</title>
<para>Zorba presumes that all <emphasis>minor</emphasis> version increments are backwards-compatible. Therefore, the second version specified in a version range is actually &quot;open-ended&quot;, because any higher <emphasis>minor</emphasis> (or <emphasis>patch</emphasis>) version may also be imported by Zorba. Because of this, the following version ranges are not valid:</para><para><programlisting><codeline><highlight class="normal">(:<sp/>Invalid<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>specification<sp/>:)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file#2.2-3.8&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">(:<sp/>Invalid<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>specification<sp/>:)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file#2.2-2.4&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>In fact, to ensure that there is no confusion about this, Zorba requires that the second version in a version range be of the form &quot;X.0&quot; - that is, the minor version must be &quot;0&quot;, and there must be no patch version.</para></sect2>
<sect2 id="modules_using_1mod_ver_explicit">
<title>Explicit Version Import</title>
<para>Zorba does allow one override of its assumptions about API compatibility. If you wish to import version 2.4 and no other version (even a higher minor version), use:</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file#2.4!&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>with an exclamation point (!) after the version.</para><para>This should only be used in cases where the module author did not follow Zorba&apos;s conventions, and introduced backwards-incompatible changes in version 2.5. This feature is intentionally very limited, as it is not recommended practice. In particular, you cannot use ! in conjunction with version ranges.</para></sect2>
<sect2 id="modules_using_1mod_ver_none">
<title>Importing with No Version Fragment</title>
<para>If you import a module <emphasis>without</emphasis> specifying a version fragment, then Zorba will import the highest available version of the module, regardless of major number.</para><para>This is necessary to support modules from other sources that do not use Zorba&apos;s versioning mechanism. However, it is not recommended that you use this kind of import for a module that <emphasis>is</emphasis> versioned, because you cannot control which major version of the module you will get. This could lead to your query breaking in future when an updated, backwards-incompatible version of the module is released. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
