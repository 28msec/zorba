<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="xquery_8h" kind="file">
    <compoundname>xquery.h</compoundname>
    <includes local="no">ostream</includes>
    <includes local="no">zorba/config.h</includes>
    <includes refid="sax2_8h" local="no">zorba/sax2.h</includes>
    <includes refid="api__shared__types_8h" local="no">zorba/api_shared_types.h</includes>
    <includes refid="options_8h" local="no">zorba/options.h</includes>
    <includedby refid="zorba_8h" local="no">zorba.h</includedby>
    <incdepgraph>
      <node id="2499">
        <label>zorba/util/smart_ptr.h</label>
        <link refid="smart__ptr_8h"/>
        <childnode refid="2496" relation="include">
        </childnode>
      </node>
      <node id="2500">
        <label>zorba/options.h</label>
        <link refid="options_8h"/>
        <childnode refid="2496" relation="include">
        </childnode>
      </node>
      <node id="2494">
        <label>xquery.h</label>
        <link refid="xquery.h"/>
        <childnode refid="2495" relation="include">
        </childnode>
        <childnode refid="2496" relation="include">
        </childnode>
        <childnode refid="2497" relation="include">
        </childnode>
        <childnode refid="2498" relation="include">
        </childnode>
        <childnode refid="2500" relation="include">
        </childnode>
      </node>
      <node id="2495">
        <label>ostream</label>
      </node>
      <node id="2496">
        <label>zorba/config.h</label>
      </node>
      <node id="2498">
        <label>zorba/api_shared_types.h</label>
        <link refid="api__shared__types_8h"/>
        <childnode refid="2496" relation="include">
        </childnode>
        <childnode refid="2499" relation="include">
        </childnode>
      </node>
      <node id="2497">
        <label>zorba/sax2.h</label>
        <link refid="sax2_8h"/>
        <childnode refid="2496" relation="include">
        </childnode>
        <childnode refid="2498" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2501">
        <label>xquery.h</label>
        <link refid="xquery.h"/>
        <childnode refid="2502" relation="include">
        </childnode>
      </node>
      <node id="2502">
        <label>zorba.h</label>
        <link refid="zorba_8h"/>
        <childnode refid="2503" relation="include">
        </childnode>
      </node>
      <node id="2503">
        <label>static_context.h</label>
        <link refid="static__context_8h"/>
        <childnode refid="2502" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classzorba_1_1XQuery" prot="public">zorba::XQuery</innerclass>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_XQUERY_API_H</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_XQUERY_API_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sax2_8h" kindref="compound">zorba/sax2.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="api__shared__types_8h" kindref="compound">zorba/api_shared_types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="options_8h" kindref="compound">zorba/options.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="namespacezorba_1a8df43daa49453badc49fdf745e5da41c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="options_8h_1a4da3881b368a669bb110f8f198272159" kindref="member" tooltip="Options that configure the serialization process of a query result.">Zorba_SerializerOptions_t</ref>*<sp/>(*itemHandler)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aUserData);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment">/**<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>\brief<sp/>This<sp/>class<sp/>is<sp/>the<sp/>representation<sp/>of<sp/>an<sp/>%XQuery<sp/>program<sp/>in<sp/>the<sp/>%Zorba<sp/>engine.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>To<sp/>compile<sp/>and<sp/>execute<sp/>an<sp/>XQuery<sp/>program,<sp/>an<sp/>instance<sp/>of<sp/>this<sp/>class<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>created.<sp/>This<sp/>is<sp/>done<sp/>by<sp/>using<sp/>either<sp/>the<sp/>createQuery<sp/>or<sp/>compileQuery<sp/>methods</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>Zorba<sp/>class.<sp/>These<sp/>methods<sp/>return<sp/>an<sp/>instance<sp/>of<sp/>XQuery_t,<sp/>which<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>reference<sp/>counted<sp/>smart<sp/>pointer<sp/>to<sp/>a<sp/>dynamically<sp/>allocated<sp/>XQuery<sp/>object.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>The<sp/>XQuery<sp/>object<sp/>is<sp/>deleted<sp/>when<sp/>all<sp/>XQuery_t<sp/>objects<sp/>that<sp/>point<sp/>to<sp/>it<sp/>are</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>destroyed.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>The<sp/>file<sp/>\link<sp/>simple.cpp<sp/>\endlink<sp/>contains<sp/>some<sp/>basic<sp/>examples<sp/>the<sp/>demonstrate</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>the<sp/>use<sp/>of<sp/>this<sp/>class.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Note:<sp/>This<sp/>class<sp/>is<sp/>reference<sp/>counted.<sp/>When<sp/>writing<sp/>multi-threaded<sp/>clients,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>it<sp/>is<sp/>the<sp/>responibility<sp/>of<sp/>the<sp/>client<sp/>code<sp/>to<sp/>synchronize<sp/>assignments<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>SmartPtr<sp/>holding<sp/>this<sp/>object.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classzorba_1_1XQuery" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ZORBA_DLL_PUBLIC<sp/><ref refid="classzorba_1_1XQuery" kindref="compound" tooltip="This class is the representation of an XQuery program in the Zorba engine.">XQuery</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1SmartObject" kindref="compound">SmartObject</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Destructor.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>destructor<sp/>is<sp/>called<sp/>automatically<sp/>when<sp/>there<sp/>are<sp/>no<sp/>more<sp/>XQuery_t</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>*<sp/>smart<sp/>pointers<sp/>pointing<sp/>to<sp/>this<sp/>XQuery<sp/>instance.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classzorba_1_1XQuery_1a43e747991f7ca268be6829f27eb457c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1XQuery_1a43e747991f7ca268be6829f27eb457c4" kindref="member" tooltip="Destructor.">~XQuery</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Set<sp/>the<sp/>filename<sp/>of<sp/>a<sp/>query.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>(after<sp/>URI-encoding)<sp/>becomes<sp/>the<sp/>encapsulating<sp/>entity&apos;s<sp/>retrieval<sp/>URI</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(in<sp/>RFC<sp/>3986<sp/>terms),<sp/>and<sp/>may<sp/>be<sp/>used<sp/>in<sp/>the<sp/>computation<sp/>of<sp/>the<sp/>program&apos;s</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>*<sp/>static<sp/>base<sp/>URI<sp/>property,<sp/>as<sp/>described<sp/>at<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>*<sp/>http://www.w3.org/TR/xquery-30/#dt-base-uri-decl</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>setFileName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref>&amp;<sp/>flename)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Register<sp/>an<sp/>DiagnosticHandler<sp/>to<sp/>which<sp/>errors<sp/>during<sp/>compilation<sp/>or</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>*<sp/>execution/serialization<sp/>are<sp/>reported.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>no<sp/>DiagnosticHandler<sp/>has<sp/>been<sp/>set<sp/>via<sp/>this<sp/>function,<sp/>the<sp/>default<sp/>error</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>*<sp/>handling<sp/>mechanism<sp/>is<sp/>to<sp/>throw<sp/>instances<sp/>of<sp/>the<sp/>ZorbaException<sp/>class.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>handler<sp/>DiagnosticHandler<sp/>to<sp/>which<sp/>errors<sp/>are<sp/>reported.<sp/>The</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caller<sp/>retains<sp/>ownership<sp/>over<sp/>the<sp/>DiagnosticHandler<sp/>passed<sp/>as</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>SystemException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@see<sp/>close()</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>registerDiagnosticHandler(<ref refid="classzorba_1_1DiagnosticHandler" kindref="compound" tooltip="When registered with an XQuery object, a DiagnosticHandler handles all exceptions and warnings that o...">DiagnosticHandler</ref>*<sp/>handler)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Reset<sp/>the<sp/>error<sp/>handling<sp/>mechanism<sp/>back<sp/>to<sp/>the<sp/>default,</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>*<sp/>i.e.\<sp/>behave<sp/>as<sp/>if<sp/>no<sp/>DiagnosticHandler<sp/>had<sp/>been<sp/>set.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>@throw<sp/>SystemException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed<sp/>already.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>@see<sp/>registerDiagnosticHandler(DiagnosticHandler*)</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>resetDiagnosticHandler()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Set<sp/>a<sp/>timeout,<sp/>after<sp/>which<sp/>the<sp/>execution<sp/>of<sp/>the<sp/>query<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>*<sp/>aborted.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aTimeout<sp/>is<sp/>an<sp/>optional<sp/>argument,<sp/>which<sp/>declares,<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execution<sp/>of<sp/>a<sp/>query<sp/>will<sp/>be<sp/>aborted<sp/>after<sp/>aTimeout<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds.<sp/>If<sp/>aTimeout<sp/>is<sp/>set<sp/>to<sp/>-1<sp/>(default),<sp/>the<sp/>query<sp/>will</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>never<sp/>abort.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>setTimeout(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>aTimeout<sp/>=<sp/>-1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Execute<sp/>the<sp/>query<sp/>and<sp/>write<sp/>the<sp/>result<sp/>to<sp/>the<sp/>given<sp/>output<sp/>stream.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>query<sp/>only<sp/>has<sp/>a<sp/>result<sp/>if<sp/>it&apos;s<sp/>a<sp/>non-updating<sp/>query.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aOutStream<sp/>the<sp/>output<sp/>stream<sp/>on<sp/>which<sp/>the<sp/>result<sp/>is<sp/>written.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aSerOptions<sp/>an<sp/>optional<sp/>set<sp/>of<sp/>serialization<sp/>options.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>(e.g.<sp/>the<sp/>query<sp/>is<sp/>closed<sp/>or</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has<sp/>not<sp/>been<sp/>compiled)</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>execute(std::ostream&amp;<sp/>aOutStream,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="options_8h_1a4da3881b368a669bb110f8f198272159" kindref="member" tooltip="Options that configure the serialization process of a query result.">Zorba_SerializerOptions_t</ref>*<sp/>aSerOptions<sp/>=<sp/>NULL)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Execute<sp/>the<sp/>query<sp/>and<sp/>write<sp/>the<sp/>result<sp/>to<sp/>the<sp/>given<sp/>output<sp/>stream.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>*<sp/>A<sp/>handler<sp/>function<sp/>gets<sp/>called<sp/>before<sp/>the<sp/>serialization<sp/>of<sp/>each<sp/>item.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aOutStream<sp/>the<sp/>output<sp/>stream<sp/>on<sp/>which<sp/>the<sp/>result<sp/>is<sp/>written.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aCallbackFunction<sp/>a<sp/>call<sp/>back<sp/>function<sp/>which<sp/>is<sp/>called<sp/>every<sp/>time,</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>the<sp/>serialization<sp/>of<sp/>an<sp/>item.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aCallbackData<sp/>data<sp/>which<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>call<sp/>back<sp/>function.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aSerOptions<sp/>Serializer<sp/>options.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>(e.g.<sp/>the<sp/>query<sp/>is<sp/>closed<sp/>or</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has<sp/>not<sp/>been<sp/>compiled)</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>execute(std::ostream&amp;<sp/>aOutStream,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacezorba_1a8df43daa49453badc49fdf745e5da41c" kindref="member">itemHandler</ref><sp/>aCallbackFunction,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aCallbackData,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="options_8h_1a4da3881b368a669bb110f8f198272159" kindref="member" tooltip="Options that configure the serialization process of a query result.">Zorba_SerializerOptions_t</ref>*<sp/>aSerOptions<sp/>=<sp/>NULL)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Execute<sp/>the<sp/>(updating)<sp/>query.<sp/>The<sp/>query<sp/>can<sp/>be<sp/>executed<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>*<sp/>function<sp/>only<sp/>if<sp/>it<sp/>is<sp/>an<sp/>updating<sp/>query.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@see<sp/>isUpdating</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>(e.g.<sp/>the<sp/>query<sp/>is<sp/>closed<sp/>or<sp/>has</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>been<sp/>compiled<sp/>or<sp/>is<sp/>not<sp/>updating)</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>execute()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Get<sp/>an<sp/>iterator<sp/>for<sp/>the<sp/>result<sp/>of<sp/>the<sp/>query.<sp/>Allows<sp/>an<sp/>application</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>lazily<sp/>execute<sp/>the<sp/>query,<sp/>retrieving<sp/>the<sp/>result<sp/>one<sp/>item<sp/>at<sp/>a<sp/>time.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Iterator<sp/>iterator<sp/>over<sp/>the<sp/>result<sp/>sequence.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>(e.g.<sp/>the<sp/>query<sp/>is<sp/>closed<sp/>or<sp/>has</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>been<sp/>compiled).</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">Iterator_t</ref></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>iterator()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Register<sp/>a<sp/>SAX2_ContentHandler<sp/>for<sp/>retrieving<sp/>the<sp/>serialized<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query<sp/>result<sp/>as<sp/>SAX<sp/>events<sp/>when<sp/>executeSAX()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aContentHandler<sp/>the<sp/>content<sp/>handler<sp/>on<sp/>which<sp/>SAX<sp/>callbacks<sp/>are<sp/>called.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>registerSAXHandler(<sp/><ref refid="classzorba_1_1SAX2__ContentHandler" kindref="compound" tooltip="Receive notification of events that result from serializing a query result as XML.">SAX2_ContentHandler</ref>*<sp/>aContentHandler<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Serialize<sp/>the<sp/>query<sp/>result<sp/>as<sp/>SAX<sp/>events<sp/>and<sp/>call<sp/>the<sp/>callbacks</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>SAX2_ContentHandler<sp/>that<sp/>is<sp/>given<sp/>as<sp/>input</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aContentHandler<sp/>the<sp/>content<sp/>handler<sp/>on<sp/>which<sp/>SAX<sp/>callbacks<sp/>are<sp/>called.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>executeSAX(<sp/><ref refid="classzorba_1_1SAX2__ContentHandler" kindref="compound" tooltip="Receive notification of events that result from serializing a query result as XML.">SAX2_ContentHandler</ref>*<sp/>aContentHandler)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Serialize<sp/>the<sp/>query<sp/>result<sp/>as<sp/>SAX<sp/>events<sp/>and<sp/>call<sp/>the<sp/>callbacks</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>SAX2_ContentHandler<sp/>that<sp/>has<sp/>been<sp/>set<sp/>using<sp/>registerSAXHandler.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>(e.g.<sp/>no<sp/>SAX2_ContentHandler<sp/>has</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>been<sp/>registered).</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>executeSAX()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Get<sp/>the<sp/>dynamic<sp/>context<sp/>of<sp/>this<sp/>query.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>returns<sp/>the<sp/>dynamic<sp/>context<sp/>that<sp/>belongs<sp/>to<sp/>this<sp/>query<sp/>and</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/>*<sp/>is<sp/>used<sp/>during<sp/>query<sp/>execution.<sp/>The<sp/>context<sp/>can<sp/>be<sp/>used,<sp/>for<sp/>example,<sp/>to</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/>*<sp/>set<sp/>values<sp/>of<sp/>external<sp/>variables,<sp/>the<sp/>default<sp/>collation,<sp/>or<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/>*<sp/>datetime.<sp/>It<sp/>is<sp/>only<sp/>available<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>compiled,<sp/>otherwise</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/>*<sp/>an<sp/>error<sp/>is<sp/>reported.<sp/>Moreover,<sp/>the<sp/>context<sp/>must<sp/>not<sp/>be<sp/>modified<sp/>during<sp/>the</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/>*<sp/>execution<sp/>of<sp/>a<sp/>query<sp/>(i.e.<sp/>if<sp/>a<sp/>Iterator<sp/>is<sp/>opened).<sp/>The<sp/>lifetime<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/>*<sp/>context<sp/>returned<sp/>by<sp/>this<sp/>function<sp/>is<sp/>restricted<sp/>by<sp/>the<sp/>lifetime<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/>*<sp/>according<sp/>query<sp/>object.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>SystemException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>not<sp/>been<sp/>compiled<sp/>or<sp/>is<sp/>closed.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>DynamicContext<sp/>of<sp/>this<sp/>query.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1DynamicContext" kindref="compound" tooltip="Instances of the class DynamicContext contain the information that is available at the time the query...">DynamicContext</ref>*</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>getDynamicContext()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Get<sp/>the<sp/>static<sp/>context<sp/>of<sp/>this<sp/>query.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>returns<sp/>the<sp/>static<sp/>context<sp/>that<sp/>belongs<sp/>to<sp/>this<sp/>query.<sp/>The</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/>*<sp/>static<sp/>context<sp/>is<sp/>only<sp/>available<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>compiled,<sp/>otherwise</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/>*<sp/>an<sp/>error<sp/>is<sp/>reported.<sp/>The<sp/>context<sp/>has<sp/>all<sp/>the<sp/>components<sp/>and<sp/>values<sp/>that<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/>*<sp/>were<sp/>set<sp/>in<sp/>the<sp/>static<sp/>context<sp/>that<sp/>was<sp/>passed<sp/>when<sp/>creating<sp/>the<sp/>query<sp/>and</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/>*<sp/>those<sp/>that<sp/>were<sp/>set<sp/>in<sp/>the<sp/>prolog<sp/>of<sp/>the<sp/>query.<sp/>Note<sp/>that<sp/>after<sp/>compilation</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>query<sp/>the<sp/>static<sp/>context<sp/>is<sp/>a<sp/>read<sp/>only<sp/>structure.<sp/>Moreover,<sp/>the</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>*<sp/>lifetime<sp/>of<sp/>the<sp/>context<sp/>returned<sp/>by<sp/>this<sp/>function<sp/>is<sp/>restricted<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/>*<sp/>lifetime<sp/>of<sp/>the<sp/>corresponding<sp/>query<sp/>object.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>SystemException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>not<sp/>been<sp/>compiled<sp/>or<sp/>is<sp/>closed.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>StaticContext<sp/>of<sp/>this<sp/>query.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1StaticContext" kindref="compound" tooltip="Instances of the class StaticContext contain the information that is available at the time the query ...">StaticContext</ref>*</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>getStaticContext()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Parse<sp/>the<sp/>given<sp/>query<sp/>String.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aQuery<sp/>the<sp/>query<sp/>file<sp/>to<sp/>parse.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>parsing<sp/>the<sp/>query.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>parse(std::istream&amp;<sp/>aQuery)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Compile<sp/>a<sp/>query<sp/>given<sp/>as<sp/>a<sp/>String.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aQuery<sp/>the<sp/>query<sp/>String<sp/>to<sp/>compile.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed,<sp/>is<sp/>already<sp/>compiled,<sp/>or</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>compiling<sp/>the<sp/>query.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>compile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref>&amp;<sp/>aQuery)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Compile<sp/>a<sp/>query<sp/>given<sp/>as<sp/>a<sp/>String,<sp/>using<sp/>the<sp/>given<sp/>compiler<sp/>hints.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aQuery<sp/>the<sp/>query<sp/>String<sp/>to<sp/>compile.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aHints<sp/>hints<sp/>passed<sp/>to<sp/>the<sp/>query<sp/>compiler.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed,<sp/>is<sp/>already<sp/>compiled,<sp/>or</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>compiling<sp/>the<sp/>query.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>compile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref>&amp;<sp/>aQuery,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structZorba__CompilerHints" kindref="compound" tooltip="Set of hints that can be passed to the query compiler.">Zorba_CompilerHints_t</ref>&amp;<sp/>aHints)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Compile<sp/>a<sp/>query<sp/>given<sp/>as<sp/>an<sp/>input<sp/>stream,<sp/>using<sp/>the<sp/>given<sp/>compiler<sp/>hints.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aQuery<sp/>the<sp/>query<sp/>input<sp/>stream.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aHints<sp/>hints<sp/>passed<sp/>to<sp/>the<sp/>query<sp/>compiler.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed,<sp/>is<sp/>already<sp/>compiled,<sp/>or</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>compiling<sp/>the<sp/>query.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>compile(std::istream&amp;<sp/>aQuery,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structZorba__CompilerHints" kindref="compound" tooltip="Set of hints that can be passed to the query compiler.">Zorba_CompilerHints_t</ref>&amp;<sp/>aHints)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Compile<sp/>a<sp/>query<sp/>given<sp/>as<sp/>a<sp/>String,<sp/>using<sp/>a<sp/>given<sp/>static<sp/>context<sp/>and<sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler<sp/>hints.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aQuery<sp/>the<sp/>query<sp/>String<sp/>to<sp/>compile.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aStaticContext<sp/>the<sp/>static<sp/>context.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aHints<sp/>hints<sp/>passed<sp/>to<sp/>the<sp/>query<sp/>compiler.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed,<sp/>is<sp/>already<sp/>compiled,<sp/>or</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>compiling<sp/>the<sp/>query.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>compile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref>&amp;<sp/>aQuery,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">StaticContext_t</ref>&amp;<sp/>aStaticContext,<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structZorba__CompilerHints" kindref="compound" tooltip="Set of hints that can be passed to the query compiler.">Zorba_CompilerHints_t</ref>&amp;<sp/>aHints)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Compile<sp/>a<sp/>query<sp/>given<sp/>as<sp/>an<sp/>input<sp/>stream,<sp/>using<sp/>a<sp/>given<sp/>static</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/>*<sp/>context<sp/>and<sp/>compiler<sp/>hints.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aQuery<sp/>the<sp/>query<sp/>input<sp/>stream.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aStaticContext<sp/>the<sp/>static<sp/>context.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aHints<sp/>hints<sp/>passed<sp/>to<sp/>the<sp/>query<sp/>compiler.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed,<sp/>is<sp/>already<sp/>compiled,<sp/>or</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>compiling<sp/>the<sp/>query.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>compile(std::istream&amp;<sp/>aQuery,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">StaticContext_t</ref>&amp;<sp/>aStaticContext,<sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structZorba__CompilerHints" kindref="compound" tooltip="Set of hints that can be passed to the query compiler.">Zorba_CompilerHints_t</ref>&amp;<sp/>aHints)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Print<sp/>the<sp/>execution<sp/>plan<sp/>of<sp/>this<sp/>query<sp/>to<sp/>the<sp/>given<sp/>output<sp/>stream.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aStream<sp/>the<sp/>output<sp/>stream<sp/>to<sp/>which<sp/>the<sp/>execution<sp/>plan<sp/>is<sp/>printed</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aDotFormat<sp/>specifies<sp/>the<sp/>format<sp/>of<sp/>the<sp/>printed<sp/>execution<sp/>plan.<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>this<sp/>is<sp/>true,<sp/>then<sp/>the<sp/>execution<sp/>plan<sp/>is<sp/>printed<sp/>in<sp/>the<sp/>DOT</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format.<sp/>If<sp/>this<sp/>is<sp/>false,<sp/>the<sp/>plan<sp/>is<sp/>printed<sp/>as<sp/>XML.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed<sp/>or<sp/>is<sp/>not<sp/>compiled.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>printPlan(std::ostream&amp;<sp/>aStream,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aDotFormat<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Check<sp/>if<sp/>this<sp/>query<sp/>is<sp/>an<sp/>updating<sp/>query.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>query<sp/>is<sp/>an<sp/>updating<sp/>query,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>SystemException<sp/>if<sp/>the<sp/>query<sp/>is<sp/>not<sp/>compiled<sp/>or<sp/>has<sp/>been<sp/>closed.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@see<sp/>close()</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@see<sp/>compile(...)</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>isUpdating()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Check<sp/>if<sp/>this<sp/>query<sp/>is<sp/>a<sp/>sequential<sp/>query.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>query<sp/>is<sp/>a<sp/>sequential<sp/>query,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>SystemException<sp/>if<sp/>the<sp/>query<sp/>is<sp/>not<sp/>compiled<sp/>or<sp/>has<sp/>been<sp/>closed.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@see<sp/>close()</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@see<sp/>compile(...)</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>isSequential()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Save<sp/>the<sp/>compiled<sp/>execution<sp/>plan.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/>*<sp/>After<sp/>compiling<sp/>an<sp/>XQuery<sp/>program<sp/>you<sp/>can<sp/>save<sp/>the<sp/>execution<sp/>plan<sp/>in<sp/>some</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/>*<sp/>persistent<sp/>storage.<sp/>The<sp/>execution<sp/>plan<sp/>is<sp/>saved<sp/>in<sp/>a<sp/>platform-independent</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/>*<sp/>format.<sp/>You<sp/>can<sp/>later<sp/>load<sp/>this<sp/>execution<sp/>plan<sp/>into<sp/>a<sp/>different<sp/>XQuery</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/>*<sp/>object<sp/>(potentially<sp/><sp/>on<sp/>a<sp/>different<sp/>machine)<sp/>and<sp/>execute<sp/>it<sp/>like<sp/>it<sp/>was<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/>*<sp/>compiled<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>os<sp/>The<sp/>output<sp/>stream<sp/>into<sp/>which<sp/>the<sp/>execution<sp/>plan<sp/>is<sp/>saved.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>success.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>not<sp/>been<sp/>compiled<sp/>or<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>problems<sp/>serializing<sp/>the<sp/>execution<sp/>plan.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>saveExecutionPlan(std::ostream&amp;<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abd9d340f17925d6dcfdf23e0ff40ddf1" kindref="member" tooltip="Ossetian; Ossetic.">os</ref>)<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Load<sp/>execution<sp/>plan.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>serialized<sp/>execution<sp/>plan<sp/>contains<sp/>a<sp/>general<sp/>version<sp/>for<sp/>the<sp/>entire</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/>*<sp/>archive<sp/>and<sp/>specific<sp/>versions<sp/>for<sp/>each<sp/>class.<sp/>Zorba<sp/>does<sp/>not<sp/>quarantee</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/>*<sp/>that<sp/>it<sp/>can<sp/>load<sp/>execution<sp/>plans<sp/>saved<sp/>with<sp/>previous<sp/>versions<sp/>of<sp/>Zorba.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/>*<sp/>In<sp/>most<sp/>cases<sp/>there<sp/>will<sp/>be<sp/>no<sp/>problems,<sp/>but<sp/>the<sp/>complete<sp/>backward</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/>*<sp/>compatibility<sp/>cannot<sp/>be<sp/>quaranteed.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>engine<sp/>automatically<sp/>detects<sp/>the<sp/>format<sp/>of<sp/>the<sp/>input,<sp/>either<sp/>XML<sp/>or<sp/>binary.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>is<sp/>Reference<sp/>to<sp/>std::istream.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aCallback<sp/>optional<sp/>callback<sp/>handler<sp/>(see<sp/>SerializationCallback)</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>is<sp/>used<sp/>to<sp/>retrieve<sp/>information<sp/>that<sp/>has<sp/>not<sp/>been<sp/>serialized</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(e.g.<sp/>external<sp/>modules).</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>success.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>there<sp/>are<sp/>problems<sp/>loading<sp/>the<sp/>execution<sp/>plan.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>loadExecutionPlan(std::istream&amp;<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a11cc1dd79aff8b41628c4f17295d25a7" kindref="member" tooltip="Icelandic.">is</ref>,<sp/><ref refid="classzorba_1_1SerializationCallback" kindref="compound">SerializationCallback</ref>*<sp/>aCallback<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Close<sp/>the<sp/>query<sp/>and<sp/>release<sp/>all<sp/>of<sp/>its<sp/>aquired<sp/>ressources.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/>*<sp/>While<sp/>a<sp/>query<sp/>is<sp/>compiled<sp/>and/or<sp/>active,<sp/>it<sp/>holds<sp/>on<sp/>to<sp/>a<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/>*<sp/>resources.<sp/>Before<sp/>Zorba<sp/>can<sp/>be<sp/>safely<sp/>shutdown,<sp/>all<sp/>resources<sp/>must</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/>*<sp/>be<sp/>released.<sp/>For<sp/>queries<sp/>this<sp/>can<sp/>be<sp/>done<sp/>by<sp/>calling<sp/>close.<sp/>However,</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/>*<sp/>if<sp/>close<sp/>is<sp/>not<sp/>called<sp/>explicitly,<sp/>it<sp/>will<sp/>be<sp/>automatically<sp/>called<sp/>by</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>XQuery<sp/>object&apos;s<sp/>destructor,<sp/>when<sp/>the<sp/>last<sp/>smart<sp/>pointer<sp/>pointing</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this<sp/>XQuery<sp/>object<sp/>is<sp/>destroyed.<sp/></highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note:<sp/>After<sp/>an<sp/>XQuery<sp/>object<sp/>is<sp/>closed,<sp/>calling<sp/>close()<sp/>again<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/>*<sp/>same<sp/>object<sp/>is<sp/>a<sp/>noop.<sp/>However,<sp/>calling<sp/>any<sp/>method<sp/>other<sp/>than<sp/>close()</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/>*<sp/>on<sp/>a<sp/>closed<sp/>XQuery<sp/>object<sp/>is<sp/>prohibited<sp/>(an<sp/>error<sp/>will<sp/>be<sp/>raised).</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note:<sp/>if<sp/>an<sp/>iterator<sp/>has<sp/>been<sp/>created<sp/>to<sp/>retreive<sp/>the<sp/>result<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/>*<sp/>XQuery<sp/>object<sp/>(@see<sp/>iterator()),<sp/>that<sp/>itrator<sp/>will<sp/>be<sp/>closed<sp/>when<sp/></highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>query<sp/>is<sp/>closed,<sp/>and<sp/>the<sp/>association<sp/>between<sp/>XQuery<sp/>object<sp/>and</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Iterator<sp/>object<sp/>will<sp/>be<sp/>destroyed.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>close()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Check<sp/>if<sp/>this<sp/>query<sp/>object<sp/>has<sp/>already<sp/>been<sp/>closed.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>query<sp/>has<sp/>been<sp/>closed<sp/>already<sp/>or<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>isClosed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Clone<sp/>this<sp/>query<sp/>object<sp/>in<sp/>order<sp/>to<sp/>execute<sp/>the<sp/>query<sp/>in<sp/>another</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/>*<sp/>thread.</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Although<sp/>two<sp/>or<sp/>more<sp/>threads<sp/>may<sp/>invoke<sp/>one<sp/>of<sp/>the<sp/>execute<sp/>methods<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/>*<sp/>same<sp/>XQuery<sp/>object,<sp/>these<sp/>invocations<sp/>are<sp/>serialized<sp/>internally.<sp/>For<sp/>true</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/>*<sp/>parallel<sp/>excetution<sp/>of<sp/>a<sp/>query<sp/>by<sp/>multiple<sp/>threads,<sp/>the<sp/>XQuery<sp/>object<sp/>needs</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>be<sp/>cloned,<sp/>using<sp/>this<sp/>method.<sp/>However,<sp/>note<sp/>that<sp/>if<sp/>an<sp/>DiagnosticHandler<sp/>has</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/>*<sp/>been<sp/>provided<sp/>by<sp/>the<sp/>user<sp/>(see<sp/>registerDiagnosticHandler()),<sp/>this<sp/>DiagnosticHandler</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/>*<sp/>will<sp/>also<sp/>be<sp/>used<sp/>in<sp/>the<sp/>cloned<sp/>query,<sp/>and<sp/>as<sp/>a<sp/>result,<sp/>the<sp/>user<sp/>should</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/>*<sp/>provide<sp/>a<sp/>thread-safe<sp/>DiagnosticHandler.<sp/>Alternatively,<sp/>a<sp/>new<sp/>DiagnosticHandler<sp/>can</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/>*<sp/>be<sp/>registered<sp/>in<sp/>the<sp/>cloned<sp/>query<sp/>by<sp/>using<sp/>registerDiagnosticHandler<sp/>again.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Or,<sp/>the<sp/>cloned<sp/>query<sp/>can<sp/>be<sp/>reset<sp/>to<sp/>use<sp/>the<sp/>default<sp/>DiagnosticHandler<sp/>(which<sp/></highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/>*<sp/>just<sp/>throws<sp/>exceptions)<sp/>by<sp/>calling<sp/>resetDiagnosticHandler.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>also<sp/>clones<sp/>the<sp/>StaticContext<sp/>and<sp/>DynamicContext<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/>*<sp/>XQuery<sp/>object.<sp/>In<sp/>the<sp/>DynamicContext<sp/>of<sp/>the<sp/>cloned<sp/>query<sp/>different<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/>*<sp/>variable<sp/>values<sp/>can<sp/>be<sp/>used,<sp/>e.g.<sp/>set<sp/>different<sp/>external<sp/>variable</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/>*<sp/>values.<sp/>For<sp/>an<sp/>example<sp/>of<sp/>cloning<sp/>a<sp/>query<sp/>and<sp/>setting<sp/>different<sp/>values</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>dynamic<sp/>context<sp/>see<sp/>example_10<sp/>in<sp/>file<sp/>\link<sp/>simple.cpp<sp/>\endlink.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>The<sp/>cloned<sp/>XQuery<sp/>object.</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>SystemException<sp/>if<sp/>the<sp/>query<sp/>has<sp/>not<sp/>been<sp/>compiled<sp/>or<sp/>is<sp/>closed.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">XQuery_t</ref></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>clone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZORBA_WITH_DEBUGGER</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"></highlight><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Enable/disable<sp/>debug<sp/>mode<sp/>on<sp/>the<sp/>query</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>setDebugMode(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aDebugMode)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Check<sp/>if<sp/>the<sp/>debug<sp/>mode<sp/>is<sp/>activated.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>debug<sp/>mode<sp/>is<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>isDebugMode()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Set<sp/>the<sp/>filename<sp/>of<sp/>the<sp/>profile</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>file<sp/>will<sp/>contain<sp/>the<sp/>output<sp/>of<sp/>Zorba<sp/>profiler.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>setProfileName(std::string<sp/>aProfileName)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Get<sp/>the<sp/>filename<sp/>of<sp/>the<sp/>profile</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>file<sp/>will<sp/>contain<sp/>the<sp/>output<sp/>of<sp/>Zorba<sp/>profiler.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>getProfileName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZORBA_WITH_DEBUGGER</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"></highlight><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Start<sp/>a<sp/>debugger<sp/>server.</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>method<sp/>will<sp/>start<sp/>a<sp/>debugger<sp/>server<sp/>that<sp/>will<sp/>try<sp/>to<sp/>connect<sp/></highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>a<sp/>DBGP-enabled<sp/>debugger<sp/>client<sp/>on<sp/>the<sp/>indicated<sp/>socket<sp/>(host<sp/>and<sp/>port).</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/>*<sp/>In<sp/>order<sp/>to<sp/>call<sp/>this<sp/>method,<sp/>the<sp/>query<sp/>has<sp/>to<sp/>be<sp/>compiled.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>hort<sp/>the<sp/>host<sp/>where<sp/>the<sp/>debugger<sp/>client<sp/>is<sp/>listening.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>port<sp/>the<sp/>port<sp/>on<sp/>which<sp/>the<sp/>debugger<sp/>client<sp/>is<sp/>listening.</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>(e.g.<sp/>the<sp/>query<sp/>is<sp/>closed<sp/>or<sp/>has</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>been<sp/>compiled,<sp/>the<sp/>server<sp/>cannot<sp/>connect<sp/>to<sp/>the<sp/>client,<sp/>etc.)</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Start<sp/>a<sp/>debugger<sp/>server.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>method<sp/>will<sp/>start<sp/>a<sp/>debugger<sp/>server<sp/>that<sp/>will<sp/>try<sp/>to<sp/>connect<sp/></highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>a<sp/>DBGP-enabled<sp/>debugger<sp/>client<sp/>on<sp/>the<sp/>indicated<sp/>socket<sp/>(host<sp/>and<sp/>port).</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/>*<sp/>In<sp/>order<sp/>to<sp/>call<sp/>this<sp/>method,<sp/>the<sp/>query<sp/>has<sp/>to<sp/>be<sp/>compiled.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/>*<sp/>You<sp/>can<sp/>specify<sp/>an<sp/>output<sp/>stream<sp/>and<sp/>serialization<sp/>options<sp/>that<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/>*<sp/>by<sp/>the<sp/>serializer.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>outStream<sp/>the<sp/>output<sp/>stream<sp/>on<sp/>which<sp/>the<sp/>result<sp/>is<sp/>written.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>serOptions<sp/>the<sp/>serialization<sp/>options.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>hort<sp/>the<sp/>host<sp/>where<sp/>the<sp/>debugger<sp/>client<sp/>is<sp/>listening.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>port<sp/>the<sp/>port<sp/>on<sp/>which<sp/>the<sp/>debugger<sp/>client<sp/>is<sp/>listening.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>(e.g.<sp/>the<sp/>query<sp/>is<sp/>closed<sp/>or<sp/>has</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>been<sp/>compiled,<sp/>the<sp/>server<sp/>cannot<sp/>connect<sp/>to<sp/>the<sp/>client,<sp/>etc.)</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>debug(</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>outStream,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structZorba__SerializerOptions" kindref="compound" tooltip="Options that configure the serialization process of a query result.">Zorba_SerializerOptions</ref>&amp;<sp/>serOptions,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>host,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>debug(</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>outStream,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacezorba_1a8df43daa49453badc49fdf745e5da41c" kindref="member">itemHandler</ref><sp/>callbackFunction,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>callbackData,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structZorba__SerializerOptions" kindref="compound" tooltip="Options that configure the serialization process of a query result.">Zorba_SerializerOptions</ref>&amp;<sp/>serOptions,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>host,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Returns<sp/>a<sp/>CollectionManager<sp/>responsible<sp/>for<sp/>all<sp/>collections</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/>*<sp/>which<sp/>are<sp/>statically<sp/>declared<sp/>in<sp/>the<sp/>static<sp/>context<sp/>of<sp/>this<sp/>query</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(main<sp/>module)<sp/>or<sp/>any<sp/>transitively<sp/>imported<sp/>library<sp/>module.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>collection<sp/>manager<sp/>provides<sp/>a<sp/>set<sp/>of<sp/>functions<sp/>for<sp/>managing</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/>*<sp/>collections<sp/>and<sp/>their<sp/>contents.</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>The<sp/>collection<sp/>manager<sp/>responsible<sp/>for<sp/>managing</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>collections<sp/>of<sp/>this<sp/>query.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1StaticCollectionManager" kindref="compound" tooltip="Using the StaticCollectionManager one can retrieve information about statically declared collections ...">StaticCollectionManager</ref>*</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>getStaticCollectionManager()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Returns<sp/>the<sp/>QName<sp/>of<sp/>all<sp/>external<sp/>variables<sp/></highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aVarsIter<sp/>iterator<sp/>to<sp/>store<sp/>the<sp/>results.</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>getExternalVariables(<ref refid="classzorba_1_1SmartPtr" kindref="compound">Iterator_t</ref>&amp;<sp/>aVarsIter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>getDocLoadingUserTime()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>getDocLoadingTime()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/>/**<sp/></highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Parse<sp/>the<sp/>given<sp/>module<sp/>String.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>parses<sp/>the<sp/>module<sp/>string<sp/>and<sp/>returns<sp/>some<sp/>information</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/>*<sp/>about<sp/>the<sp/>module.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aQuery<sp/>the<sp/>query<sp/>file<sp/>to<sp/>parse.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aResult<sp/>some<sp/>information<sp/>about<sp/>the<sp/>module</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>parsing<sp/>the<sp/>query.</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>parse(std::istream&amp;<sp/>aQuery,<sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">ModuleInfo_t</ref>&amp;<sp/>aResult)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XML<sp/>serialization<sp/>of<sp/>the<sp/>query<sp/>result<sp/>(equiv<sp/>to<sp/>calling<sp/>serialize(os)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="559"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespacezorba_1aec67c4279177892eaa9d14c9ca0c0374" kindref="member">operator&lt;&lt; </ref>(std::ostream&amp;<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abd9d340f17925d6dcfdf23e0ff40ddf1" kindref="member" tooltip="Ossetian; Ossetic.">os</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1ad8b5b1677946bc552eca6d700286a18d" kindref="member">XQuery_t</ref>&amp;<sp/>aQuery);<sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="562"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespacezorba_1aec67c4279177892eaa9d14c9ca0c0374" kindref="member">operator&lt;&lt; </ref>(std::ostream&amp;<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abd9d340f17925d6dcfdf23e0ff40ddf1" kindref="member" tooltip="Ossetian; Ossetic.">os</ref>,<sp/>XQuery*<sp/>aQuery);<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>zorba<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/xquery.h"/>
  </compounddef>
</doxygen>
