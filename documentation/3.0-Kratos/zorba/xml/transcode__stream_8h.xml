<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="transcode__stream_8h" kind="file">
    <compoundname>transcode_stream.h</compoundname>
    <includes local="no">zorba/config.h</includes>
    <includes refid="cxx__util_8h" local="no">zorba/internal/cxx_util.h</includes>
    <includes refid="streambuf_8h" local="no">zorba/internal/streambuf.h</includes>
    <includes refid="unique__ptr_8h" local="no">zorba/internal/unique_ptr.h</includes>
    <incdepgraph>
      <node id="2321">
        <label>functional</label>
      </node>
      <node id="2311">
        <label>zorba/internal/cxx_util.h</label>
        <link refid="cxx__util_8h"/>
        <childnode refid="2310" relation="include">
        </childnode>
      </node>
      <node id="2323">
        <label>string</label>
      </node>
      <node id="2309">
        <label>transcode_stream.h</label>
        <link refid="transcode_stream.h"/>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2311" relation="include">
        </childnode>
        <childnode refid="2312" relation="include">
        </childnode>
        <childnode refid="2315" relation="include">
        </childnode>
      </node>
      <node id="2317">
        <label>type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2318" relation="include">
        </childnode>
      </node>
      <node id="2313">
        <label>streambuf</label>
      </node>
      <node id="2322">
        <label>sstream</label>
      </node>
      <node id="2312">
        <label>zorba/internal/streambuf.h</label>
        <link refid="streambuf_8h"/>
        <childnode refid="2313" relation="include">
        </childnode>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2314" relation="include">
        </childnode>
      </node>
      <node id="2315">
        <label>zorba/internal/unique_ptr.h</label>
        <link refid="unique__ptr_8h"/>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2316" relation="include">
        </childnode>
        <childnode refid="2311" relation="include">
        </childnode>
        <childnode refid="2317" relation="include">
        </childnode>
        <childnode refid="2319" relation="include">
        </childnode>
      </node>
      <node id="2319">
        <label>ztd.h</label>
        <link refid="ztd_8h"/>
        <childnode refid="2320" relation="include">
        </childnode>
        <childnode refid="2321" relation="include">
        </childnode>
        <childnode refid="2322" relation="include">
        </childnode>
        <childnode refid="2323" relation="include">
        </childnode>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2311" relation="include">
        </childnode>
        <childnode refid="2317" relation="include">
        </childnode>
      </node>
      <node id="2318">
        <label>type_traits</label>
      </node>
      <node id="2310">
        <label>zorba/config.h</label>
      </node>
      <node id="2316">
        <label>algorithm</label>
      </node>
      <node id="2320">
        <label>cstring</label>
      </node>
      <node id="2314">
        <label>zorba/internal/proxy.h</label>
        <link refid="proxy_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="classzorba_1_1transcode_1_1auto__attach" prot="public">zorba::transcode::auto_attach</innerclass>
    <innerclass refid="classzorba_1_1transcode_1_1stream" prot="public">zorba::transcode::stream</innerclass>
    <innerclass refid="classzorba_1_1transcode_1_1streambuf" prot="public">zorba::transcode::streambuf</innerclass>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <innernamespace refid="namespacezorba_1_1internal">zorba::internal</innernamespace>
    <innernamespace refid="namespacezorba_1_1internal_1_1transcode">zorba::internal::transcode</innernamespace>
    <innernamespace refid="namespacezorba_1_1transcode">zorba::transcode</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_TRANSCODE_STREAM_API_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_TRANSCODE_STREAM_API_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cxx__util_8h" kindref="compound">zorba/internal/cxx_util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="streambuf_8h" kindref="compound">zorba/internal/streambuf.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="unique__ptr_8h" kindref="compound">zorba/internal/unique_ptr.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="26" refid="namespacezorba_1_1transcode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">transcode<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>A<sp/>%transcode::streambuf<sp/>is-a<sp/>std::streambuf<sp/>for<sp/>transcoding<sp/>character</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>encodings<sp/>from/to<sp/>UTF-8<sp/>on-the-fly.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>To<sp/>use<sp/>it,<sp/>replace<sp/>a<sp/>stream&apos;s<sp/>streambuf:</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>istream<sp/>is;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>transcode::streambuf<sp/>tbuf(<sp/>&quot;ISO-8859-1&quot;,<sp/>is.rdbuf()<sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>is.ios::rdbuf(<sp/>&amp;tbuf<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>%transcode::streambuf<sp/>must<sp/>exist<sp/>for<sp/>as<sp/>long<sp/>as<sp/>it&apos;s<sp/>being<sp/>used</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>stream.<sp/><sp/>If<sp/>you<sp/>are<sp/>replacing<sp/>the<sp/>streabuf<sp/>for<sp/>a<sp/>stream<sp/>you<sp/>did<sp/>not</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>create,<sp/>you<sp/>should<sp/>set<sp/>it<sp/>back<sp/>to<sp/>the<sp/>original<sp/>streambuf:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>f(<sp/>ostream<sp/>&amp;os<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>transcode::streambuf<sp/>tbuf(<sp/>&quot;ISO-8859-1&quot;,<sp/>os.rdbuf()<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>os.ios::rdbuf(<sp/>&amp;tbuf<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>catch<sp/>(<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>os.ios::rdbuf(<sp/>tbuf.orig_streambuf()<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>throw;</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>os.ios::rdbuf(<sp/>tbuf.orig_streambuf()<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Alternatively,<sp/>you<sp/>may<sp/>wish<sp/>to<sp/>use<sp/>either<sp/>\c<sp/>attach(),<sp/>\c<sp/>auto_attach,<sp/>or</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>\c<sp/>transcode::stream<sp/>instead.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>While<sp/>%transcode::streambuf<sp/>does<sp/>support<sp/>seeking,<sp/>the<sp/>positions<sp/>are<sp/>relative</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>original<sp/>byte<sp/>stream.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classzorba_1_1transcode_1_1streambuf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ZORBA_DLL_PUBLIC<sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::<ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>%transcode::streambuf.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>convert<sp/>from/to.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>orig<sp/>The<sp/>original<sp/>streambuf<sp/>to<sp/>read/write<sp/>from/to.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throws<sp/>std::invalid_argument<sp/>if<sp/>either<sp/>\a<sp/>charset<sp/>is<sp/>not<sp/>supported<sp/>or</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\a<sp/>orig<sp/>is<sp/>null.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset,<sp/>std::streambuf<sp/>*orig<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Destructs<sp/>a<sp/>%transcode::streambuf.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>~<ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>original<sp/>streambuf.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>said<sp/>streambuf.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classzorba_1_1transcode_1_1streambuf_1ad4738ed71a093711c1a5c0d5660fa91e" refkind="member"><highlight class="normal"><sp/><sp/>std::streambuf*<sp/><ref refid="classzorba_1_1transcode_1_1streambuf_1ad4738ed71a093711c1a5c0d5660fa91e" kindref="member" tooltip="Gets the original streambuf.">orig_streambuf</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>proxy_buf_-&gt;original();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>imbue(<sp/>std::locale<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>pos_type<sp/>seekoff(<sp/>off_type,<sp/>std::ios_base::seekdir,<sp/>std::ios_base::openmode<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>pos_type<sp/>seekpos(<sp/>pos_type,<sp/>std::ios_base::openmode<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::streambuf*<sp/>setbuf(<sp/>char_type*,<sp/>std::streamsize<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>showmanyc();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sync();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>int_type<sp/>overflow(<sp/>int_type<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>int_type<sp/>pbackfail(<sp/>int_type<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>int_type<sp/>uflow();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>int_type<sp/>underflow();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>xsgetn(<sp/>char_type*,<sp/>std::streamsize<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>xsputn(<sp/>char_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>std::streamsize<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">std::unique_ptr&lt;internal::proxy_streambuf&gt;</ref><sp/>proxy_buf_;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref>(<sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref>&amp;<sp/>operator=(<sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>transcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="117" refid="namespacezorba_1_1internal_1_1transcode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">transcode<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="120"><highlight class="normal">std::streambuf*<sp/><ref refid="namespacezorba_1_1internal_1_1transcode_1a7f2f4671edbf73d331febcdf5cbdfb4f" kindref="member">alloc_streambuf</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset,<sp/>std::streambuf<sp/>*orig<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1internal_1_1transcode_1a989d6f09c7a73875993e27b08e2017ef" kindref="member">get_streambuf_index</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>transcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">transcode<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="131"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>Attaches<sp/>a<sp/>transcode::streambuf<sp/>to<sp/>a<sp/>stream.<sp/><sp/>Unlike<sp/>using<sp/>a</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>transcode::streambuf<sp/>directly,<sp/>this<sp/>function<sp/>will<sp/>create<sp/>the<sp/>streambuf,</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>attach<sp/>it<sp/>to<sp/>the<sp/>stream,<sp/>and<sp/>manage<sp/>it<sp/>for<sp/>the<sp/>lifetime<sp/>of<sp/>the<sp/>stream</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>automatically.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@param<sp/>ios<sp/>The<sp/>stream<sp/>to<sp/>attach<sp/>the<sp/>transcode::streambuf<sp/>to.<sp/><sp/>If<sp/>the<sp/>stream</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>already<sp/>has<sp/>a<sp/>transcode::streambuf<sp/>attached<sp/>to<sp/>it,<sp/>this<sp/>function<sp/>does</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>nothing.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>convert<sp/>from/to.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>a<sp/>transcode::streambuf<sp/>was<sp/>attached.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="namespacezorba_1_1transcode_1a44eff53620b083f7384c20eea64a534b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1transcode_1a44eff53620b083f7384c20eea64a534b" kindref="member" tooltip="Attaches a transcode::streambuf to a stream.">attach</ref>(<sp/>std::basic_ios&lt;charT,Traits&gt;<sp/>&amp;ios,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="namespacezorba_1_1internal_1_1base64_1a295f0351244ea88a57700f176df82d0c" kindref="member">internal::transcode::get_streambuf_index</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*&amp;pword<sp/>=<sp/>ios.pword(<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pword<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::streambuf<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buf<sp/>=</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacezorba_1_1internal_1_1base64_1a4b337606b06bf9c76d59ec5c064130c6" kindref="member">internal::transcode::alloc_streambuf</ref>(<sp/>charset,<sp/>ios.rdbuf()<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>ios.rdbuf(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>pword<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ios.register_callback(<sp/><ref refid="namespacezorba_1_1internal_1aa27d36007cc8c4eb9b8716d24f9330ec" kindref="member">internal::stream_callback</ref>,<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>Detaches<sp/>a<sp/>previously<sp/>attached<sp/>transcode::streambuf<sp/>from<sp/>a<sp/>stream.<sp/><sp/>The</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>streambuf<sp/>is<sp/>destroyed<sp/>and<sp/>the<sp/>stream&apos;s<sp/>original<sp/>streambuf<sp/>is<sp/>restored.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@param<sp/>ios<sp/>The<sp/>stream<sp/>to<sp/>detach<sp/>the<sp/>transcode::streambuf<sp/>from.<sp/><sp/>If<sp/>the</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>stream<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>transcode::streambuf<sp/>attached<sp/>to<sp/>it,<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>does<sp/>nothing.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>a<sp/>transcode::streambuf<sp/>was<sp/>detached.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="namespacezorba_1_1transcode_1ac1a9e5e77b37b933a78581467f24ee1d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1transcode_1ac1a9e5e77b37b933a78581467f24ee1d" kindref="member" tooltip="Detaches a previously attached transcode::streambuf from a stream.">detach</ref>(<sp/>std::basic_ios&lt;charT,Traits&gt;<sp/>&amp;ios<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="namespacezorba_1_1internal_1_1base64_1a295f0351244ea88a57700f176df82d0c" kindref="member">internal::transcode::get_streambuf_index</ref>();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buf<sp/>=<sp/>static_cast&lt;streambuf*&gt;(<sp/>ios.pword(<sp/>index<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ios.pword(<sp/>index<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ios.rdbuf(<sp/>buf-&gt;orig_streambuf()<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacezorba_1_1internal_1afc8a1e1bbdcb0e40c72d110a464ea4e5" kindref="member">internal::dealloc_streambuf</ref>(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>Checks<sp/>whether<sp/>the<sp/>given<sp/>stream<sp/>has<sp/>a<sp/>transcode::streambuf<sp/>attached.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@param<sp/>ios<sp/>The<sp/>stream<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>a<sp/>transcode::streambuf<sp/>is<sp/>attached.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="namespacezorba_1_1transcode_1ad5b79bb09335a231a7f6cb69a5fc01c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1transcode_1ad5b79bb09335a231a7f6cb69a5fc01c7" kindref="member" tooltip="Checks whether the given stream has a transcode::streambuf attached.">is_attached</ref>(<sp/>std::basic_ios&lt;charT,Traits&gt;<sp/>&amp;ios<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!ios.pword(<sp/><ref refid="namespacezorba_1_1internal_1_1transcode_1a989d6f09c7a73875993e27b08e2017ef" kindref="member">internal::transcode::get_streambuf_index</ref>()<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>original<sp/>streambuf<sp/>of<sp/>the<sp/>given<sp/>iostream.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@param<sp/>ios<sp/>The<sp/>stream<sp/>to<sp/>get<sp/>the<sp/>original<sp/>streambuf<sp/>of.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>original<sp/>streambuf.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="namespacezorba_1_1transcode_1aa62efff6e4306c33f2fbd78cdb02432e" refkind="member"><highlight class="normal">std::streambuf*<sp/><ref refid="namespacezorba_1_1transcode_1aa62efff6e4306c33f2fbd78cdb02432e" kindref="member" tooltip="Gets the original streambuf of the given iostream.">orig_streambuf</ref>(<sp/>std::basic_ios&lt;charT,Traits&gt;<sp/>&amp;ios<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>std::streambuf<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buf<sp/>=<sp/>ios.rdbuf();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tbuf<sp/>=<sp/>dynamic_cast&lt;streambuf*&gt;(<sp/>buf<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tbuf-&gt;orig_streambuf();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>A<sp/>%transcode::auto_attach<sp/>is<sp/>a<sp/>class<sp/>that<sp/>attaches<sp/>a<sp/>transcode::streambuf<sp/>to</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>a<sp/>stream<sp/>and<sp/>automatically<sp/>detaches<sp/>it<sp/>when<sp/>the<sp/>%auto_attach<sp/>object<sp/>is</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>destroyed.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>f(<sp/>ostream<sp/>&amp;os<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>transcode::auto_attach&lt;ostream&gt;<sp/>const<sp/>raii(<sp/>os,<sp/>&quot;ISO-8859-1&quot;<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>A<sp/>%transcode::auto_attach<sp/>is<sp/>useful<sp/>for<sp/>streams<sp/>not<sp/>created<sp/>by<sp/>you.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@see<sp/>http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StreamType&gt;</highlight></codeline>
<codeline lineno="220" refid="classzorba_1_1transcode_1_1auto__attach" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1transcode_1_1auto__attach" kindref="compound" tooltip="A transcode::auto_attach is a class that attaches a transcode::streambuf to a stream and automaticall...">auto_attach</ref><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Default<sp/>constructor;<sp/>does<sp/>nothing.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classzorba_1_1transcode_1_1auto__attach_1a03330aca248ff4936b5c25a69b5361e7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1a03330aca248ff4936b5c25a69b5361e7" kindref="member" tooltip="Default constructor; does nothing.">auto_attach</ref>()<sp/>:<sp/>stream_(<sp/><ref refid="cxx__util_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>an<sp/>%auto_attach<sp/>object<sp/>calling<sp/>attach()<sp/>on<sp/>the<sp/>given<sp/>stream.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>stream<sp/>The<sp/>stream<sp/>to<sp/>attach<sp/>the<sp/>transcode::streambuf<sp/>to.<sp/><sp/>If<sp/>the</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/>*<sp/>stream<sp/>already<sp/>has<sp/>a<sp/>transcode::streambuf<sp/>attached<sp/>to<sp/>it,<sp/>this<sp/>contructor</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/>*<sp/>does<sp/>nothing.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>convert<sp/>from/to.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classzorba_1_1transcode_1_1auto__attach_1ae62db14aa0cddc2c707b65fed7634253" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1ae62db14aa0cddc2c707b65fed7634253" kindref="member" tooltip="Constructs an auto_attach object calling attach() on the given stream.">auto_attach</ref>(<sp/>StreamType<sp/>&amp;<ref refid="classzorba_1_1transcode_1_1stream" kindref="compound" tooltip="A transcode::stream is used to wrap a C++ standard I/O stream with a transcode::streambuf so that tra...">stream</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset<sp/>)<sp/>:<sp/>stream_(<sp/>&amp;stream<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1aa3965d631f5331cfc0d71c969615cb56" kindref="member" tooltip="Calls transcode::attach() on the given stream.">transcode::attach</ref>(<sp/>stream,<sp/>charset<sp/>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Copy<sp/>constructor<sp/>that<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>stream.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>from<sp/>The<sp/>%auto_attach<sp/>to<sp/>take<sp/>ownership<sp/>from.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="classzorba_1_1transcode_1_1auto__attach_1a8280cc474b828ec97f5870ccbdf655e7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1a8280cc474b828ec97f5870ccbdf655e7" kindref="member" tooltip="Copy constructor that takes ownership of the stream.">auto_attach</ref>(<sp/><ref refid="classzorba_1_1transcode_1_1auto__attach" kindref="compound" tooltip="A transcode::auto_attach is a class that attaches a transcode::streambuf to a stream and automaticall...">auto_attach</ref><sp/>&amp;from<sp/>)<sp/>:<sp/>stream_(<sp/>from.stream_<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>from.stream_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Destroys<sp/>this<sp/>%auto_attach<sp/>object<sp/>calling<sp/>detach()<sp/>on<sp/>the<sp/>previously</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>*<sp/>attached<sp/>stream,<sp/>if<sp/>any.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="classzorba_1_1transcode_1_1auto__attach_1accbfbc96eb1e2940225879dc1974f1b2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1accbfbc96eb1e2940225879dc1974f1b2" kindref="member" tooltip="Destroys this auto_attach object calling detach() on the previously attached stream, if any.">~auto_attach</ref>()<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1a6859243e6b019f44fbbbbb29c3e04e74" kindref="member" tooltip="Calls transcode::detach().">detach</ref>();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Assignment<sp/>operator<sp/>that<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>stream.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>from<sp/>The<sp/>%auto_attach<sp/>to<sp/>take<sp/>ownership<sp/>from.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>\c<sp/>*this.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="classzorba_1_1transcode_1_1auto__attach_1a98afbb042f37d36124a6b513a74bbcb9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach" kindref="compound" tooltip="A transcode::auto_attach is a class that attaches a transcode::streambuf to a stream and automaticall...">auto_attach</ref>&amp;<sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1a98afbb042f37d36124a6b513a74bbcb9" kindref="member" tooltip="Assignment operator that takes ownership of the stream.">operator=</ref>(<sp/><ref refid="classzorba_1_1transcode_1_1auto__attach" kindref="compound" tooltip="A transcode::auto_attach is a class that attaches a transcode::streambuf to a stream and automaticall...">auto_attach</ref><sp/>&amp;from<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>&amp;from<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream_<sp/>=<sp/>from.stream_;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from.stream_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Calls<sp/>transcode::attach()<sp/>on<sp/>the<sp/>given<sp/>stream.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>stream<sp/>The<sp/>stream<sp/>to<sp/>attach<sp/>the<sp/>transcode::streambuf<sp/>to.<sp/><sp/>If<sp/>the</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/>*<sp/>stream<sp/>already<sp/>has<sp/>a<sp/>transcode::streambuf<sp/>attached<sp/>to<sp/>it,<sp/>this<sp/>contructor</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/>*<sp/>does<sp/>nothing.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>convert<sp/>from/to.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>a<sp/>transcode::streambuf<sp/>was<sp/>attached.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="classzorba_1_1transcode_1_1auto__attach_1aa3965d631f5331cfc0d71c969615cb56" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1aa3965d631f5331cfc0d71c969615cb56" kindref="member" tooltip="Calls transcode::attach() on the given stream.">attach</ref>(<sp/>StreamType<sp/>&amp;<ref refid="classzorba_1_1transcode_1_1stream" kindref="compound" tooltip="A transcode::stream is used to wrap a C++ standard I/O stream with a transcode::streambuf so that tra...">stream</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacezorba_1_1transcode_1a44eff53620b083f7384c20eea64a534b" kindref="member" tooltip="Attaches a transcode::streambuf to a stream.">transcode::attach</ref>(<sp/>stream,<sp/>charset<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream_<sp/>=<sp/>&amp;stream;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Calls<sp/>transcode::detach().</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="classzorba_1_1transcode_1_1auto__attach_1a6859243e6b019f44fbbbbb29c3e04e74" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1a6859243e6b019f44fbbbbb29c3e04e74" kindref="member" tooltip="Calls transcode::detach().">detach</ref>()<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stream_<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzorba_1_1transcode_1_1auto__attach_1a6859243e6b019f44fbbbbb29c3e04e74" kindref="member" tooltip="Calls transcode::detach().">transcode::detach</ref>(<sp/>*stream_<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>StreamType<sp/>*stream_;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>A<sp/>%transcode::stream<sp/>is<sp/>used<sp/>to<sp/>wrap<sp/>a<sp/>C++<sp/>standard<sp/>I/O<sp/>stream<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>transcode::streambuf<sp/>so<sp/>that<sp/>transcoding<sp/>and<sp/>the<sp/>management<sp/>of<sp/>the<sp/>streambuf</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>happens<sp/>automatically.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>A<sp/>%transcode::stream<sp/>is<sp/>useful<sp/>for<sp/>streams<sp/>created<sp/>by<sp/>you.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>StreamType<sp/>The<sp/>I/O<sp/>stream<sp/>class<sp/>type<sp/>to<sp/>wrap.<sp/>It<sp/>must<sp/>be<sp/>a<sp/>concrete</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>stream<sp/>class.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StreamType&gt;</highlight></codeline>
<codeline lineno="315" refid="classzorba_1_1transcode_1_1stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1transcode_1_1stream" kindref="compound" tooltip="A transcode::stream is used to wrap a C++ standard I/O stream with a transcode::streambuf so that tra...">stream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StreamType<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>%transcode::stream.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>convert<sp/>from/to.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throws<sp/>std::invalid_argument<sp/>if<sp/>\a<sp/>charset<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="classzorba_1_1transcode_1_1stream_1a67e11c1da9d75d0a24c88e1924b3f2c9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1stream_1a67e11c1da9d75d0a24c88e1924b3f2c9" kindref="member" tooltip="Constructs a transcode::stream.">stream</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="324"><highlight class="normal">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="325"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>push<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4355<sp/>)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>tbuf_(<sp/>charset,<sp/>this-&gt;rdbuf()<sp/>)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="330"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>pop<sp/>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>init();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>%stream.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>StreamArgType<sp/>The<sp/>type<sp/>of<sp/>the<sp/>first<sp/>argument<sp/>of<sp/>\a<sp/>StreamType&apos;s</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/>*<sp/>constructor.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>convert<sp/>from/to.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>stream_arg<sp/>The<sp/>argument<sp/>to<sp/>pass<sp/>as<sp/>the<sp/>first<sp/>argument<sp/>to</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\a<sp/>StreamType&apos;s<sp/>constructor.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throws<sp/>std::invalid_argument<sp/>if<sp/>\a<sp/>charset<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StreamArgType&gt;</highlight></codeline>
<codeline lineno="347" refid="classzorba_1_1transcode_1_1stream_1a57537b0e987409b9c917c5b046825a9f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1stream_1a67e11c1da9d75d0a24c88e1924b3f2c9" kindref="member" tooltip="Constructs a transcode::stream.">stream</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset,<sp/>StreamArgType<sp/>stream_arg<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamType(<sp/>stream_arg<sp/>),</highlight></codeline>
<codeline lineno="349"><highlight class="normal">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="350"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>push<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4355<sp/>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>tbuf_(<sp/>charset,<sp/>this-&gt;rdbuf()<sp/>)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="355"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>pop<sp/>)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>init();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>%transcode::stream.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>StreamArgType<sp/>The<sp/>type<sp/>of<sp/>the<sp/>first<sp/>argument<sp/>of<sp/>\a<sp/>StreamType&apos;s</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/>*<sp/>constructor.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>convert<sp/>from/to.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>stream_arg<sp/>The<sp/>argument<sp/>to<sp/>pass<sp/>as<sp/>the<sp/>first<sp/>argument<sp/>to</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\a<sp/>StreamType&apos;s<sp/>constructor.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>mode<sp/>The<sp/>open-mode<sp/>to<sp/>pass<sp/>to<sp/>\a<sp/>StreamType&apos;s<sp/>constructor.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throws<sp/>std::invalid_argument<sp/>if<sp/>\a<sp/>charset<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StreamArgType&gt;</highlight></codeline>
<codeline lineno="373" refid="classzorba_1_1transcode_1_1stream_1a56c90aec7448aa7026816fb0f3eff856" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1stream_1a67e11c1da9d75d0a24c88e1924b3f2c9" kindref="member" tooltip="Constructs a transcode::stream.">stream</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset,<sp/>StreamArgType<sp/>stream_arg,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::openmode<sp/>mode<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamType(<sp/>stream_arg,<sp/>mode<sp/>),</highlight></codeline>
<codeline lineno="376"><highlight class="normal">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="377"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>push<sp/>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4355<sp/>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>tbuf_(<sp/>charset,<sp/>this-&gt;rdbuf()<sp/>)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="382"><highlight class="normal">#<sp/>pragma<sp/>warning(<sp/>pop<sp/>)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>init();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound" tooltip="A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-f...">streambuf</ref><sp/>tbuf_;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init()<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;std::ios::rdbuf(<sp/>&amp;tbuf_<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal">};</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="396"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="397"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="398"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>Checks<sp/>whether<sp/>it<sp/>would<sp/>be<sp/>necessary<sp/>to<sp/>transcode<sp/>from<sp/>the<sp/>given<sp/>character</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>encoding<sp/>to<sp/>UTF-8.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>it<sp/>would<sp/>be<sp/>necessary<sp/>to<sp/>transcode<sp/>from<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>character<sp/>encoding<sp/>to<sp/>UTF-8.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1transcode_1ad2adc994f3251b1e9343554f839caaf5" kindref="member" tooltip="Checks whether it would be necessary to transcode from the given character encoding to UTF-8...">is_necessary</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="409"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/>Checks<sp/>whether<sp/>the<sp/>given<sp/>character<sp/>set<sp/>is<sp/>supported<sp/>for<sp/>transcoding.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>@param<sp/>charset<sp/>The<sp/>name<sp/>of<sp/>the<sp/>character<sp/>encoding<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@return<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>character<sp/>encoding<sp/>is<sp/>supported.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1transcode_1a3c15efb537bb9bca681ff9a2ab3f6f75" kindref="member" tooltip="Checks whether the given character set is supported for transcoding.">is_supported</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*charset<sp/>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="419"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>transcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ZORBA_TRANSCODE_STREAM_API_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h"/>
  </compounddef>
</doxygen>
