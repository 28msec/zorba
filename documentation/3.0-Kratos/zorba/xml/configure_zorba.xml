<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="configure_zorba" kind="page">
    <compoundname>configure_zorba</compoundname>
    <title>Configuring a Zorba Build Using CMake</title>
    <detaileddescription>
<sect1 id="configure_zorba_1configure_overview">
<title>Overview</title>
<para>We will now configure the Zorba build by running CMake. We assume that the appropriate build preparations (described in <ref refid="build_prepare" kindref="compound">Preparing to Build Zorba</ref>) have been performed.</para><para><simplesect kind="note"><para>The instructions in this section are based on executing commands at the command line. It is also possible configure Zorba using CMake&apos;s GUI configuration utility if you prefer. On Linux distributions, this is often a separate package named <bold>&quot;cmake-gui&quot;</bold>. On Windows, the GUI is installed by default and can be started via the Start menu. On MacOS, it is available as the <bold>&quot;gui&quot;</bold> variant of the <ulink url="http://www.cmake.org/">CMake</ulink> package.</para><simplesectsep/><para>The important configuration parameters - source and build directory; CMake generator; configuration flags - are the same whether you use the command-line or the GUI form of CMake. Only the method by which you specify them will change.</para></simplesect>
The basic steps to configure Zorba are:</para><para><orderedlist>
<listitem><para>Change the working directory into the <computeroutput>{ZORBABUILD}</computeroutput> directory: <programlisting><codeline><highlight class="normal">cd<sp/>{ZORBABUILD}</highlight></codeline>
</programlisting></para></listitem><listitem><para>Execute cmake: <programlisting><codeline><highlight class="normal"><sp/>cmake<sp/>[<sp/>-G<sp/>generator<sp/>]<sp/>[<sp/>-D<sp/>option=value<sp/>...<sp/>]<sp/>{ZORBASRC}</highlight></codeline>
</programlisting> where <computeroutput>{ZORBASRC}</computeroutput> may be an absolute or a relative path to your Zorba source directory. For example, if you used the convention of creating the build directory as a subdirectory of the source directory, you can just type <programlisting><codeline><highlight class="normal"><sp/>cmake<sp/>..<sp/></highlight></codeline>
</programlisting> along with any necessary <computeroutput>-G</computeroutput> or <computeroutput>-D</computeroutput> options.</para></listitem></orderedlist>
</para><para>This command should configure Zorba and prepare for the build. CMake will tell you if your environment is missing some of the required libraries or development headers.</para><para>The meaning of the <computeroutput>-G</computeroutput> and <computeroutput>-D</computeroutput> arguments are described below.</para><para><simplesect kind="note"><para>If you need to re-configure the project later, CMake will remember your chosen generator and <computeroutput>-D</computeroutput> configuration parameters; it is not necessary to specify <computeroutput>-G</computeroutput> / <computeroutput>-D</computeroutput> every time.</para></simplesect>
</para></sect1>
<sect1 id="configure_zorba_1configure_generator">
<title>CMake Generators (the -G argument)</title>
<para>CMake is a meta build system. It is able to generate both native makefiles (e.g. GNU Make or NMake) and IDE workspaces (e.g. Visual Studio or KDevelop Projects), depending on which CMake <emphasis>generator</emphasis> is selected. By default it will generate a UNIX-style Makefile-based project.</para><para>You specify the generator to use with the <computeroutput>-G</computeroutput> arguments to <computeroutput>cmake</computeroutput>. For example, on Windows, you can create a Visual Studio 10 solution by executing the following command in the <computeroutput>{ZORBASRC}</computeroutput> directory: <programlisting><codeline><highlight class="normal">cmake<sp/>-G<sp/></highlight><highlight class="stringliteral">&quot;Visual<sp/>Studio<sp/>10&quot;</highlight><highlight class="normal"><sp/>{ZORBASRC}<sp/></highlight></codeline>
</programlisting></para><para>The list of available Generators for your CMake installation can be seen by typing <programlisting><codeline><highlight class="normal"><sp/>cmake<sp/>--help<sp/></highlight></codeline>
</programlisting>.</para></sect1>
<sect1 id="configure_zorba_1configure_parameters">
<title>Configuration Parameters (the -D arguments)</title>
<para>In most circumstances it will be necessary to specify a few parameters to CMake, such as the various configuration parameters mentioned above in <ref refid="build_prerequisites_1third_party_libs" kindref="member">Library Dependencies</ref>. You do this with a series of <computeroutput>-D</computeroutput> arguments to CMake. For example, to build Zorba without ICU (Unicode) support:</para><para><programlisting><codeline><highlight class="normal">cmake<sp/>-D<sp/>ZORBA_NO_ICU=ON<sp/>{ZORBASRC}</highlight></codeline>
</programlisting></para><para>A complete list of Zorba&apos;s configuration parameters can be found here: <ref refid="configuration_parameters" kindref="compound">Zorba Configuration Parameters</ref>. CMake itself also has some configuration parameters that may be important for you; here are three of the most common:</para><para><orderedlist>
<listitem><para>CMake will look for third-party libraries in a variety of standard locations. If you have any installed in unusual locations, you will need to provide it with additional paths to search. You do this by specifying the parameter <computeroutput>CMAKE_PREFIX_PATH</computeroutput>. This parameter is a semicolon-separated list of directories where CMake should look. For instance, if you have Xerces-C installed in <computeroutput>/opt</computeroutput>, try the following: <programlisting><codeline><highlight class="normal">cmake<sp/>-D<sp/>CMAKE_PREFIX_PATH=/opt<sp/>{ZORBASRC}</highlight></codeline>
</programlisting> <simplesect kind="par"><title>On Linux and MacOS:</title><para>In command lines, the semicolon is interpretted by the shell as a command separator. In order to pass a semicolon-separated list of paths for this parameter, be sure to enlose the list in single- or double-quotes. </para></simplesect>
<simplesect kind="par"><title>On Windows:</title><para>Zorba uses a custom mechanism for specifying the paths to third-party dependencies on Windows, which handles some additional features such as collecting the runtime DLLs for installation. You should use this mechanism instead of <computeroutput>CMAKE_PREFIX_PATH</computeroutput> on Windows. See <ref refid="build_windows_1windows_autodll" kindref="member">Zorba&apos;s Automatic DLL Detection Mechanism</ref> for more information.</para></simplesect>
</para></listitem><listitem><para>After you build Zorba, you will likely want to install it into a final location. You specify this location with the <computeroutput>CMAKE_INSTALL_PREFIX</computeroutput> parameter. By default, this directory will be <computeroutput>{ZORBABUILD}/dist</computeroutput>, which is not likely to be a useful location. <simplesect kind="par"><title>Note:</title><para>After installation, the directory specified here will contain subdirectories such as <computeroutput>bin/</computeroutput>, <computeroutput>lib/</computeroutput>, and <computeroutput>share/</computeroutput>. On Unix and MacOS installations, a common value for <computeroutput>CMAKE_INSTALL_PREFIX</computeroutput> is <computeroutput>/usr/local</computeroutput>. On Windows, something like <computeroutput>C:\Program Files\Zorba</computeroutput> is suggested. </para></simplesect>
<simplesect kind="par"><title>Note for Makefile-based projects:</title><para>The Makefiles produced by CMake do support the common <computeroutput>DESTDIR</computeroutput> variable. However, specifying this variable at compile time <emphasis>will not work</emphasis> with Zorba, because certain installation paths are hard-coded into the Zorba binaries. Be sure to only use <computeroutput>CMAKE_INSTALL_PREFIX</computeroutput>.</para></simplesect>
</para></listitem><listitem><para>When generating a Makefile-based project, CMake supports multiple build configurations. By default, Zorba is built in the Release configuration, which enables compiler optimizations and does not build debug information into the resulting product. To change the build mode to Debug, you can specify the <computeroutput>CMAKE_BUILD_TYPE</computeroutput> parameter as follows: <programlisting><codeline><highlight class="normal"><sp/>cmake<sp/>-D<sp/>CMAKE_BUILD_TYPE=Debug<sp/>{ZORBASRC}<sp/></highlight></codeline>
</programlisting> This is not necessary for IDE-based workspaces; in that case, you may select the type of build from within the IDE.</para></listitem></orderedlist>
</para></sect1>
<sect1 id="configure_zorba_1configure_next">
<title>What&apos;s next?</title>
<para>Once CMake runs without reporting any configuration errors, move on to <ref refid="build_and_install" kindref="compound">Building and Installing Zorba</ref>. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
