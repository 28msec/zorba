<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="scripting_8dox" kind="file">
    <compoundname>scripting.dox</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**<sp/>\page<sp/>scripting_tutorial<sp/>XQuery<sp/>Scripting<sp/>Tutorial</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Zorba<sp/>includes<sp/>its<sp/>own<sp/>scripting<sp/>capabilities.<sp/>This<sp/>page<sp/>gives<sp/>an<sp/>overview<sp/>of<sp/>this<sp/>feature.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">\section<sp/>scripting_xquery_3_0<sp/>XQuery<sp/>3.0,<sp/>XQuery<sp/>Update<sp/>Facility<sp/>1.0<sp/>(later<sp/>3.0)</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">All<sp/>valid<sp/>expressions<sp/>from<sp/>XQuery<sp/>3.0<sp/>as<sp/>well<sp/>as<sp/>XQuery<sp/>Update<sp/>Facility<sp/>1.0<sp/>(with<sp/>small<sp/>adaptation<sp/>changes<sp/>for<sp/>XQuery<sp/>3.0,<sp/>anticipating<sp/>XQUF<sp/>3.0)<sp/>are<sp/>allowed.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">This<sp/>means<sp/>that<sp/>you<sp/>can<sp/>write<sp/>programs<sp/>like:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="12"><highlight class="comment">&quot;Hello,<sp/>World!&quot;</highlight></codeline>
<codeline lineno="13"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">or</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="18"><highlight class="comment">&lt;current-time&gt;{current-dateTime()}&lt;/current-time</highlight></codeline>
<codeline lineno="19"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">or<sp/>the<sp/>updating<sp/>expression</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="24"><highlight class="comment">insert<sp/>node<sp/>&lt;new-node/&gt;<sp/>into<sp/>doc(&quot;file.xml&quot;)/root</highlight></codeline>
<codeline lineno="25"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">and<sp/>these<sp/>programs<sp/>have<sp/>the<sp/>exact<sp/>same<sp/>semantics<sp/>as<sp/>specified<sp/>in<sp/>XQuery<sp/>3.0<sp/>and<sp/>XQuery<sp/>Update<sp/>Facility<sp/>1.0.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">\section<sp/>scripting_side_effects<sp/>Side<sp/>effects</highlight></codeline>
<codeline lineno="30"><highlight class="comment">In<sp/>XQuery<sp/>3.0<sp/>or<sp/>XQUF<sp/>1.0,<sp/>an<sp/>expression<sp/>never<sp/>has<sp/>any<sp/>side<sp/>effects<sp/>other<sp/>than<sp/>constructing<sp/>new<sp/>nodes<sp/>(not<sp/>even<sp/>updating<sp/>expressions,<sp/>which<sp/>merely<sp/>produce<sp/>a<sp/>pending<sp/>update<sp/>list).</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">Zorba<sp/>Scripting<sp/>programs<sp/>may<sp/>have<sp/>side<sp/>effects.<sp/>Side<sp/>effects<sp/>can<sp/>be<sp/>made<sp/>with<sp/>statements.<sp/>In<sp/>a<sp/>nutshell,<sp/>statements<sp/>can<sp/>be<sp/>recognized<sp/>in<sp/>that<sp/>they<sp/>use<sp/>semi-colons<sp/>--<sp/>just<sp/>like<sp/>in<sp/>C++<sp/>or<sp/>Java.<sp/>And<sp/>they<sp/>can<sp/>be<sp/>written<sp/>in<sp/>a<sp/>natural<sp/>way<sp/>--<sp/>just<sp/>like<sp/>in<sp/>C++<sp/>or<sp/>Java.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment">Statements<sp/>are<sp/>executed<sp/>in<sp/>the<sp/>order<sp/>in<sp/>which<sp/>they<sp/>are<sp/>written.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">Let<sp/>us<sp/>take<sp/>the<sp/>following<sp/>document<sp/>file.xml<sp/>as<sp/>an<sp/>example:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="39"><highlight class="comment">&lt;root&gt;&lt;node/&gt;&lt;/root&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">In<sp/>the<sp/>following<sp/>XQuery<sp/>Update<sp/>query:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="45"><highlight class="comment">delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node,</highlight></codeline>
<codeline lineno="46"><highlight class="comment">insert<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node<sp/>into<sp/>doc(&quot;file2.xml&quot;)/root</highlight></codeline>
<codeline lineno="47"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">pending<sp/>updates<sp/>are<sp/>accumulated<sp/>against<sp/>a<sp/>given<sp/>snapshot<sp/>(the<sp/>original<sp/>document)<sp/>and<sp/>are<sp/>only<sp/>applied<sp/>at<sp/>the<sp/>end.<sp/>Both<sp/>subexpressions<sp/>see<sp/>the<sp/>same<sp/>unaltered<sp/>document</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="52"><highlight class="comment">&lt;root&gt;&lt;node/&gt;&lt;/root&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">Now,<sp/>consider<sp/>the<sp/>following<sp/>scripting<sp/>program,<sp/>which<sp/>consists<sp/>of<sp/>two<sp/>statements<sp/>(they<sp/>have<sp/>semi-colons):</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="58"><highlight class="comment">delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node;</highlight></codeline>
<codeline lineno="59"><highlight class="comment">insert<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node<sp/>into<sp/>doc(&quot;file2.xml&quot;)/root;</highlight></codeline>
<codeline lineno="60"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">The<sp/>first<sp/>statement<sp/>(delete)<sp/>is<sp/>executed<sp/>against<sp/>the<sp/>original<sp/>document:</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="65"><highlight class="comment">&lt;root&gt;&lt;node/&gt;&lt;/root&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">Its<sp/>execution<sp/>has<sp/>the<sp/>side<sp/>effect<sp/>of<sp/>deleting<sp/>the<sp/>node<sp/>named<sp/>&quot;node&quot;.<sp/>This<sp/>means<sp/>that<sp/>the<sp/>second<sp/>statement<sp/>(insert)<sp/>will<sp/>see<sp/>the<sp/>following<sp/>document:</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="71"><highlight class="comment">&lt;root&gt;&lt;/root&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">As<sp/>a<sp/>result,<sp/>nothing<sp/>will<sp/>be<sp/>inserted<sp/>into<sp/>file2.xml,<sp/>as</highlight></codeline>
<codeline lineno="75"><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="77"><highlight class="comment">doc(&quot;file.xml&quot;)/root/node</highlight></codeline>
<codeline lineno="78"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">will<sp/>evaluate<sp/>to<sp/>the<sp/>empty<sp/>sequence.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">\section<sp/>scripting_control_flow<sp/>Control<sp/>flow</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">The<sp/>control<sp/>flow<sp/>of<sp/>statements<sp/>can<sp/>be<sp/>controlled<sp/>in<sp/>a<sp/>way<sp/>very<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>imperative<sp/>programming<sp/>languages<sp/>like<sp/>C++<sp/>or<sp/>Java<sp/>(while<sp/>retaining<sp/>some<sp/>XQuery<sp/>spirit<sp/>in<sp/>the<sp/>exact<sp/>syntax).</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">\subsection<sp/>scripting_while<sp/>While<sp/>statements</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">For<sp/>example,<sp/>Zorba<sp/>Scripting<sp/>introduces<sp/>while<sp/>loops.<sp/>The<sp/>following<sp/>query:</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="91"><highlight class="comment">while<sp/>(doc(&quot;file.xml&quot;)/root/*)</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/*[1];</highlight></codeline>
<codeline lineno="93"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="94"><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">repeatedly<sp/>deletes<sp/>the<sp/>first<sp/>child<sp/>of<sp/>the<sp/>root<sp/>node,<sp/>until<sp/>it<sp/>has<sp/>no<sp/>more<sp/>children.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">\subsection<sp/>scripting_conditional<sp/>Conditional<sp/>statements</highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">Zorba<sp/>Scripting<sp/>also<sp/>allows<sp/>using<sp/>conditional<sp/>or<sp/>FLWOR<sp/>statements.<sp/>The<sp/>following<sp/>query:</highlight></codeline>
<codeline lineno="101"><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="103"><highlight class="comment">if<sp/>(count(doc(&quot;file.xml&quot;)/root/*)<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="104"><highlight class="comment">then</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/*[1];</highlight></codeline>
<codeline lineno="106"><highlight class="comment">else</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node/&gt;<sp/>as<sp/>last<sp/>into<sp/>doc(&quot;file.xml&quot;)/root;</highlight></codeline>
<codeline lineno="108"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">deletes<sp/>the<sp/>first<sp/>child<sp/>of<sp/>the<sp/>root<sp/>if<sp/>it<sp/>has<sp/>more<sp/>than<sp/>two<sp/>children,<sp/>otherwise<sp/>it<sp/>inserts<sp/>a<sp/>new<sp/>child.<sp/>Mind<sp/>the<sp/>semi-colons<sp/>in<sp/>both<sp/>the<sp/>then<sp/>and<sp/>the<sp/>else<sp/>statement.<sp/>This<sp/>is<sp/>a<sp/>conditional<sp/>statement.<sp/>It<sp/>has<sp/>side<sp/>effects.<sp/>Both<sp/>its<sp/>then<sp/>and<sp/>else<sp/>operands<sp/>are<sp/>statements.<sp/>Both<sp/>operands<sp/>are<sp/>required.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">\subsection<sp/>scripting_flwor<sp/>FLWOR<sp/>statements</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">Now,<sp/>consider<sp/>the<sp/>following<sp/>FLWOR<sp/>statement:</highlight></codeline>
<codeline lineno="115"><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="117"><highlight class="comment">for<sp/>$x<sp/>in<sp/>1<sp/>to<sp/>5</highlight></codeline>
<codeline lineno="118"><highlight class="comment">return</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node&gt;{$x}&lt;/node&gt;<sp/>as<sp/>first<sp/>into<sp/>doc(&quot;file.xml&quot;)/root;</highlight></codeline>
<codeline lineno="120"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="121"><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment">which<sp/>works<sp/>very<sp/>much<sp/>like<sp/>a<sp/>C++<sp/>for:<sp/>for<sp/>each<sp/>value<sp/>of<sp/>$x<sp/>between<sp/>1<sp/>and<sp/>5,<sp/>a<sp/>new<sp/>node<sp/>is<sp/>inserted<sp/>as<sp/>the<sp/>first<sp/>child<sp/>of<sp/>the<sp/>root.<sp/>Each<sp/>execution<sp/>of<sp/>the<sp/>operand<sp/>statement<sp/>for<sp/>a<sp/>value<sp/>of<sp/>$x<sp/>sees<sp/>the<sp/>previously<sp/>inserted<sp/>children.<sp/>This<sp/>means<sp/>that<sp/>the<sp/>resulting<sp/>document<sp/>will<sp/>look<sp/>like:</highlight></codeline>
<codeline lineno="123"><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="125"><highlight class="comment">&lt;root&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>&lt;node&gt;5&lt;/node&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>&lt;node&gt;4&lt;/node&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/>&lt;node&gt;3&lt;/node&gt;</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/>&lt;node&gt;2&lt;/node&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>&lt;node&gt;1&lt;/node&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/>&lt;node/&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="comment">&lt;/root&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="134"><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">\subsection<sp/>scripting_other<sp/>Other<sp/>kinds<sp/>of<sp/>control<sp/>flow<sp/>statements</highlight></codeline>
<codeline lineno="136"><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">Zorba<sp/>Scripting<sp/>also<sp/>defines<sp/>switch<sp/>statements,<sp/>typeswitch<sp/>statements<sp/>and<sp/>try-catch<sp/>statements.<sp/>It<sp/>reuses<sp/>the<sp/>existing<sp/>XQuery<sp/>3.0<sp/>syntax...<sp/>but<sp/>with<sp/>semi-colons.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">\section<sp/>scripting_semi_colon<sp/>Where<sp/>to<sp/>put<sp/>the<sp/>semi-colon?</highlight></codeline>
<codeline lineno="141"><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">Put<sp/>in<sp/>a<sp/>nutshell:<sp/>in<sp/>control<sp/>flow<sp/>constructs,<sp/>just<sp/>like<sp/>in<sp/>C++,<sp/>the<sp/>semi-colons<sp/>&quot;stick&quot;<sp/>to<sp/>the<sp/>operands,<sp/>not<sp/>to<sp/>the<sp/>entire<sp/>control<sp/>flow<sp/>construct.<sp/>While<sp/>conditional<sp/>statements<sp/>and<sp/>FLWOR<sp/>statements<sp/>look<sp/>a<sp/>lot<sp/>like<sp/>conditional<sp/>expressions<sp/>and<sp/>FLWOR<sp/>expressions,<sp/>they<sp/>are<sp/>different<sp/>in<sp/>that<sp/>their<sp/>operands<sp/>are<sp/>statements.<sp/>They<sp/>must<sp/>use<sp/>semi-colons.<sp/>All<sp/>of<sp/>them.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">This<sp/>is<sp/>a<sp/>conditional<sp/>statement:</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="147"><highlight class="comment">if<sp/>(count(doc(&quot;file.xml&quot;)/root/*)<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="148"><highlight class="comment">then</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/*[1];</highlight></codeline>
<codeline lineno="150"><highlight class="comment">else</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node/&gt;<sp/>as<sp/>last<sp/>into<sp/>doc(&quot;file.xml&quot;)/root;</highlight></codeline>
<codeline lineno="152"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="153"><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">This<sp/>is<sp/>a<sp/>conditional<sp/>expression:</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="157"><highlight class="comment">if<sp/>(count(doc(&quot;file.xml&quot;)/root/*)<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="158"><highlight class="comment">then</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/*[1]</highlight></codeline>
<codeline lineno="160"><highlight class="comment">else</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node/&gt;<sp/>as<sp/>last<sp/>into<sp/>doc(&quot;file.xml&quot;)/root</highlight></codeline>
<codeline lineno="162"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">The<sp/>following<sp/>is<sp/>incorrect,<sp/>because<sp/>the<sp/>then<sp/>operand<sp/>is<sp/>an<sp/>expression,<sp/>whereas<sp/>the<sp/>else<sp/>operand<sp/>is<sp/>a<sp/>statement:</highlight></codeline>
<codeline lineno="165"><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="167"><highlight class="comment">if<sp/>(count(doc(&quot;file.xml&quot;)/root/*)<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="168"><highlight class="comment">then</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/*[1]</highlight></codeline>
<codeline lineno="170"><highlight class="comment">else</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node/&gt;<sp/>as<sp/>last<sp/>into<sp/>doc(&quot;file.xml&quot;)/root;</highlight></codeline>
<codeline lineno="172"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="173"><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment">If<sp/>you<sp/>really<sp/>want<sp/>the<sp/>semi-colon<sp/>to<sp/>be<sp/>bound<sp/>to<sp/>the<sp/>entire<sp/>conditional<sp/>construct,<sp/>you<sp/>need<sp/>parentheses:</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="177"><highlight class="comment">(if<sp/>(count(doc(&quot;file.xml&quot;)/root/*)<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="178"><highlight class="comment">then</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/*[1]</highlight></codeline>
<codeline lineno="180"><highlight class="comment">else</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node/&gt;<sp/>as<sp/>last<sp/>into<sp/>doc(&quot;file.xml&quot;)/root);</highlight></codeline>
<codeline lineno="182"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="183"><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">For<sp/>FLWOR<sp/>statements<sp/>too,<sp/>the<sp/>semi-colon<sp/>&quot;sticks&quot;<sp/>to<sp/>the<sp/>return<sp/>statement.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>accumulate<sp/>the<sp/>updates<sp/>instead,<sp/>i.e.,<sp/>bind<sp/>the<sp/>semi-colon<sp/>to<sp/>the<sp/>entire<sp/>FLWOR<sp/>construct,<sp/>you<sp/>need<sp/>parentheses:</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="187"><highlight class="comment">(for<sp/>$x<sp/>in<sp/>1<sp/>to<sp/>5</highlight></codeline>
<codeline lineno="188"><highlight class="comment">return</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node&gt;{$x}&lt;/node&gt;<sp/>as<sp/>first<sp/>into<sp/>doc(&quot;file.xml&quot;)/root);</highlight></codeline>
<codeline lineno="190"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="191"><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment">Note<sp/>however<sp/>than<sp/>the<sp/>order<sp/>of<sp/>insertion<sp/>is<sp/>no<sp/>longer<sp/>guaranteed.</highlight></codeline>
<codeline lineno="193"><highlight class="comment">Further<sp/>explanations<sp/>about<sp/>expressions<sp/>vs.<sp/>statements<sp/>are<sp/>given<sp/>further<sp/>down<sp/>on<sp/>this<sp/>page.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">\section<sp/>scripting_blocks<sp/>Block<sp/>statements</highlight></codeline>
<codeline lineno="196"><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment">Like<sp/>in<sp/>C++,<sp/>several<sp/>statements<sp/>can<sp/>be<sp/>concatenated<sp/>and<sp/>put<sp/>inside<sp/>a<sp/>curly-braced<sp/>block<sp/>(just<sp/>like<sp/>expressions<sp/>can<sp/>be<sp/>concatenated<sp/>with<sp/>commas<sp/>and<sp/>put<sp/>inside<sp/>parentheses!):</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="200"><highlight class="comment">{</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node;</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node<sp/>into<sp/>doc(&quot;file2.xml&quot;)/root;</highlight></codeline>
<codeline lineno="203"><highlight class="comment">}</highlight></codeline>
<codeline lineno="204"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment">Such<sp/>blocks,<sp/>which<sp/>contain<sp/>a<sp/>series<sp/>of<sp/>statements,<sp/>are<sp/>themselves<sp/>also<sp/>statements<sp/>and<sp/>can<sp/>be<sp/>used<sp/>wherever<sp/>statements<sp/>are<sp/>allowed<sp/>-<sp/>for<sp/>example<sp/>in<sp/>a<sp/>conditional<sp/>statement:</highlight></codeline>
<codeline lineno="207"><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="209"><highlight class="comment">if<sp/>(doc(&quot;file.xml&quot;)/root/*)</highlight></codeline>
<codeline lineno="210"><highlight class="comment">then<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node;</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node<sp/>into<sp/>doc(&quot;file2.xml&quot;)/root;</highlight></codeline>
<codeline lineno="213"><highlight class="comment">}</highlight></codeline>
<codeline lineno="214"><highlight class="comment">else</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node<sp/>into<sp/>doc(&quot;file2.xml&quot;)/root;</highlight></codeline>
<codeline lineno="216"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="217"><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">Keep<sp/>in<sp/>mind<sp/>that<sp/>semi-colons<sp/>and<sp/>curly<sp/>braces<sp/>work<sp/>just<sp/>like<sp/>in<sp/>C++<sp/>when<sp/>you<sp/>are<sp/>dealing<sp/>with<sp/>statements.</highlight></codeline>
<codeline lineno="219"><highlight class="comment">Block<sp/>statements<sp/>can<sp/>be<sp/>empty:</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="222"><highlight class="comment">{}</highlight></codeline>
<codeline lineno="223"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="224"><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">Conditional<sp/>statements<sp/>(and<sp/>while<sp/>statements,<sp/>FLWOR<sp/>statements,<sp/>block<sp/>statements<sp/>...)<sp/>are<sp/>themselves<sp/>statements<sp/>and<sp/>can<sp/>also<sp/>be<sp/>concatenated<sp/>with<sp/>other<sp/>statements:</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="228"><highlight class="comment">{</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/>do-some-initialization();</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/>if<sp/>(doc(&quot;file.xml&quot;)/root/*)</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>then<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node;</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/>else<sp/>{}</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/node<sp/>into<sp/>doc(&quot;file2.xml&quot;)/root;</highlight></codeline>
<codeline lineno="236"><highlight class="comment">}</highlight></codeline>
<codeline lineno="237"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="238"><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment">Again,<sp/>just<sp/>like<sp/>in<sp/>C++,<sp/>you<sp/>get<sp/>the<sp/>idea.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">\section<sp/>scripting_variables<sp/>Variables</highlight></codeline>
<codeline lineno="242"><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">Zorba<sp/>Scripting<sp/>allows<sp/>you<sp/>to<sp/>declare<sp/>and<sp/>assign<sp/>variables.</highlight></codeline>
<codeline lineno="244"><highlight class="comment">An<sp/>example<sp/>is<sp/>better<sp/>than<sp/>a<sp/>thousand<sp/>words,<sp/>so<sp/>here<sp/>is<sp/>a<sp/>query<sp/>which<sp/>computes<sp/>the<sp/>first<sp/>100<sp/>integers<sp/>in<sp/>the<sp/>Fibonacci<sp/>sequence:</highlight></codeline>
<codeline lineno="245"><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="247"><highlight class="comment">variable<sp/>$a<sp/>as<sp/>xs:integer<sp/>:=<sp/>0;<sp/>(:<sp/>this<sp/>is<sp/>a<sp/>variable<sp/>declaration<sp/>statement<sp/>:)</highlight></codeline>
<codeline lineno="248"><highlight class="comment">variable<sp/>$b<sp/>as<sp/>xs:integer<sp/>:=<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="comment">variable<sp/>$c<sp/>as<sp/>xs:integer<sp/>:=<sp/>$a<sp/>+<sp/>$b;</highlight></codeline>
<codeline lineno="250"><highlight class="comment">variable<sp/>$fibseq<sp/>as<sp/>xs:integer*<sp/>:=<sp/>($a,<sp/>$b);</highlight></codeline>
<codeline lineno="251"><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">while<sp/>($c<sp/>&lt;<sp/>100)<sp/>{<sp/></highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/>$fibseq<sp/>:=<sp/>($fibseq,<sp/>$c);<sp/>(:<sp/>this<sp/>is<sp/>a<sp/>variable<sp/>assignment<sp/>statement<sp/>:)</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/>$a<sp/>:=<sp/>$b;</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/>$b<sp/>:=<sp/>$c;</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/>$c<sp/>:=<sp/>$a<sp/>+<sp/>$b;</highlight></codeline>
<codeline lineno="257"><highlight class="comment">}</highlight></codeline>
<codeline lineno="258"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">Note<sp/>that<sp/>a<sp/>main<sp/>program<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>a<sp/>block<sp/>or<sp/>a<sp/>single<sp/>statement:<sp/>it<sp/>can<sp/>consist<sp/>of<sp/>several<sp/>statements.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment">\section<sp/>scripting_combining<sp/>Combining<sp/>expressions<sp/>and<sp/>statements</highlight></codeline>
<codeline lineno="263"><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">\subsection<sp/>scripting_differences<sp/>Differences<sp/>between<sp/>expressions<sp/>and<sp/>statements</highlight></codeline>
<codeline lineno="265"><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">Put<sp/>shortly,<sp/>an<sp/>expression<sp/>returns<sp/>a<sp/>sequence<sp/>of<sp/>items<sp/>(and<sp/>possibly<sp/>a<sp/>pending<sp/>update<sp/>list).<sp/>A<sp/>statements<sp/>does<sp/>not<sp/>return<sp/>anything.<sp/>It<sp/>does<sp/>something.<sp/>Sometimes,<sp/>doing<sp/>something<sp/>might<sp/>require<sp/>getting<sp/>a<sp/>result<sp/>from<sp/>an<sp/>expression.<sp/>Sometimes,<sp/>computing<sp/>a<sp/>result<sp/>requires<sp/>doing<sp/>something.<sp/>Sometimes,<sp/>one<sp/>might<sp/>even<sp/>want<sp/>to<sp/>both<sp/>do<sp/>something<sp/>and<sp/>return<sp/>a<sp/>result.<sp/>This<sp/>part<sp/>explains<sp/>how<sp/>to<sp/>mix<sp/>statements<sp/>and<sp/>expressions.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"></highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">\subsection<sp/>scripting_nested<sp/>Expressions<sp/>nested<sp/>in<sp/>statements</highlight></codeline>
<codeline lineno="270"><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">You<sp/>already<sp/>know<sp/>that<sp/>expressions<sp/>can<sp/>be<sp/>put<sp/>inside<sp/>statements.<sp/>We<sp/>gave<sp/>the<sp/>example<sp/>of<sp/>a<sp/>conditional<sp/>expression<sp/>inside<sp/>a<sp/>statement,<sp/>using<sp/>parentheses:</highlight></codeline>
<codeline lineno="272"><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="274"><highlight class="comment">(if<sp/>(count(doc(&quot;file.xml&quot;)/root/*)<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="275"><highlight class="comment">then</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/>delete<sp/>node<sp/>doc(&quot;file.xml&quot;)/root/*[1]</highlight></codeline>
<codeline lineno="277"><highlight class="comment">else</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/>insert<sp/>node<sp/>&lt;node/&gt;<sp/>as<sp/>last<sp/>into<sp/>doc(&quot;file.xml&quot;)/root);</highlight></codeline>
<codeline lineno="279"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment">Another<sp/>example<sp/>is<sp/>the<sp/>condition<sp/>expression<sp/>of<sp/>a<sp/>conditional<sp/>statement,<sp/>which<sp/>is<sp/>always<sp/>an<sp/>expression.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment">\subsection<sp/>scripting_statements<sp/>Statements<sp/>inside<sp/>expressions:<sp/>node<sp/>constructors</highlight></codeline>
<codeline lineno="284"><highlight class="comment"></highlight></codeline>
<codeline lineno="285"><highlight class="comment">There<sp/>is<sp/>one<sp/>most<sp/>prominent<sp/>location<sp/>where<sp/>statements<sp/>can<sp/>be<sp/>very<sp/>useful.</highlight></codeline>
<codeline lineno="286"><highlight class="comment">If<sp/>you<sp/>remember<sp/>PHP,<sp/>it<sp/>allows<sp/>executing<sp/>instructions,<sp/>and<sp/>declaratively<sp/>outputing<sp/>some<sp/>HTML.</highlight></codeline>
<codeline lineno="287"><highlight class="comment">With<sp/>Zorba<sp/>Scripting,<sp/>statements<sp/>can<sp/>be<sp/>used<sp/>in<sp/>element<sp/>constructors,<sp/>giving<sp/>it<sp/>some<sp/>PHP<sp/>taste.</highlight></codeline>
<codeline lineno="288"><highlight class="comment">In<sp/>the<sp/>following<sp/>example,<sp/>the<sp/>element<sp/>constructor<sp/>contains<sp/>a<sp/>series<sp/>a<sp/>statements<sp/>followed<sp/>by<sp/>a<sp/>single<sp/>expression<sp/>which<sp/>constructs<sp/>(and<sp/>returns)<sp/>the<sp/>body<sp/>of<sp/>the<sp/>page.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="291"><highlight class="comment">&lt;html<sp/>xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/>&lt;head&gt;</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;title&gt;Blog<sp/>entry<sp/>added&lt;/title&gt;</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/>&lt;/head&gt;</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/>variable<sp/>$user<sp/>:=<sp/>replace($request/url,<sp/>&quot;^http://.*/</highlight><highlight class="normal">([^/]+)/add$</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">$1</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>variable<sp/>$blog<sp/>:=<sp/>collection()/micro-blog[@user<sp/>=<sp/>$user];</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if($blog)<sp/>then<sp/>{}<sp/>else</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>returning<sp/>local:error(&quot;</highlight><highlight class="normal">Unknown<sp/>user</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>insert<sp/>node</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;entry<sp/>timestamp=&quot;</highlight><highlight class="normal">{<sp/>current-dateTime()<sp/>}</highlight><highlight class="stringliteral">&quot;&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;text&gt;{<sp/>data($request/param[@name<sp/>=<sp/>&quot;</highlight><highlight class="normal">text</highlight><highlight class="stringliteral">&quot;])<sp/>}&lt;/text&gt;</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/entry&gt;</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>as<sp/>last<sp/>into<sp/>$blog;</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;body&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;h1&gt;Blog<sp/>entry<sp/>added<sp/>for<sp/>{<sp/>$user<sp/>}&lt;/h1&gt;</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;p&gt;{<sp/>data($request/param[@name<sp/>=<sp/>&quot;</highlight><highlight class="normal">text</highlight><highlight class="stringliteral">&quot;])<sp/>}&lt;/p&gt;</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;/body&gt;</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral">&lt;/html&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral">\endcode</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral">While<sp/>it<sp/>contains<sp/>statements,<sp/>the<sp/>outer<sp/>construct<sp/>is<sp/>still<sp/>an<sp/>expression<sp/>(it<sp/>returns<sp/>a<sp/>value:<sp/>the<sp/>HTML<sp/>page),<sp/>but<sp/>it<sp/>has<sp/>side<sp/>effects<sp/>(updating<sp/>the<sp/>database...).<sp/>Such<sp/>an<sp/>expression<sp/>is<sp/>called<sp/>a<sp/>sequential<sp/>expression.</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral">In<sp/>short,<sp/>an<sp/>expression<sp/>is<sp/>sequential<sp/>if<sp/>it<sp/>contains<sp/>statements<sp/>that<sp/>have<sp/>side<sp/>effects<sp/>(updating<sp/>some<sp/>XML,<sp/>assigning<sp/>a<sp/>variable<sp/>in<sp/>scope<sp/>outside<sp/>of<sp/>the<sp/>expression)<sp/>or<sp/>that<sp/>affect<sp/>the<sp/>control<sp/>flow<sp/>(break,<sp/>continue,<sp/>exit<sp/>returning)<sp/>-<sp/>or<sp/>if<sp/>it<sp/>calls<sp/>a<sp/>sequential<sp/>function.</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral">\subsection<sp/>scripting_do_do<sp/>Do-do-do-do-deliver</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral">This<sp/>pattern<sp/>of<sp/>having,<sp/>in<sp/>a<sp/>block,<sp/>several<sp/>statements<sp/>followed<sp/>by<sp/>a<sp/>single<sp/>expression<sp/>is<sp/>the<sp/>most<sp/>general<sp/>way<sp/>of<sp/>using<sp/>statements<sp/>together<sp/>with<sp/>expressions.<sp/>The<sp/>main<sp/>program<sp/>is<sp/>built<sp/>that<sp/>way:<sp/>it<sp/>can<sp/>be<sp/>a<sp/>single<sp/>expression,<sp/>it<sp/>can<sp/>be<sp/>several<sp/>statements<sp/>followed<sp/>by<sp/>a<sp/>single<sp/>expression,<sp/>or<sp/>it<sp/>can<sp/>be<sp/>just<sp/>several<sp/>statements<sp/>(in<sp/>which<sp/>case<sp/>it<sp/>is<sp/>as<sp/>if<sp/>the<sp/>final<sp/>expression<sp/>were<sp/>empty).</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral">A<sp/>function<sp/>body<sp/>works<sp/>exactly<sp/>the<sp/>same<sp/>way.<sp/>Note<sp/>that<sp/>if<sp/>the<sp/>body<sp/>expression<sp/>of<sp/>a<sp/>function<sp/>is<sp/>sequential,<sp/>the<sp/>function<sp/>must<sp/>be<sp/>annotated<sp/>as<sp/>%sequential.</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral">\subsection<sp/>scripting_pitfall<sp/>Pitfall:<sp/>block<sp/>statements,<sp/>block<sp/>expressions</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral">It<sp/>is<sp/>also<sp/>possible<sp/>to<sp/>have<sp/>several<sp/>statements<sp/>followed<sp/>by<sp/>an<sp/>expression<sp/>inside<sp/>curly<sp/>braces<sp/>(with<sp/>no<sp/>node<sp/>constructor).<sp/>This<sp/>is<sp/>called<sp/>a<sp/>block<sp/>expression.</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral">Distinguishing<sp/>block<sp/>statements<sp/>and<sp/>block<sp/>expressions<sp/>is<sp/>done<sp/>by<sp/>looking<sp/>whether<sp/>it<sp/>ends<sp/>with<sp/>a<sp/>statement<sp/>or<sp/>an<sp/>expression.</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral">As<sp/>a<sp/>rule<sp/>of<sp/>thumb,<sp/>anything<sp/>(valid)<sp/>that<sp/>ends<sp/>neither<sp/>with<sp/>a<sp/>semi-colon<sp/>or<sp/>a<sp/>closing<sp/>curly-brace<sp/>is<sp/>an<sp/>expression.<sp/>If<sp/>there<sp/>is<sp/>no<sp/>semi-colon<sp/>or<sp/>opening<sp/>curly<sp/>brace<sp/>before<sp/>the<sp/>closing<sp/>curly<sp/>braces,<sp/>it<sp/>is<sp/>also<sp/>an<sp/>expression.<sp/>Which<sp/>means<sp/>you<sp/>cannot<sp/>concatenate<sp/>something<sp/>else<sp/>after<sp/>it!</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral">As<sp/>a<sp/>last<sp/>piece<sp/>of<sp/>advice,<sp/>if<sp/>the<sp/>parser<sp/>complains<sp/>while<sp/>you<sp/>are<sp/>writing<sp/>a<sp/>scripting<sp/>program,<sp/>there<sp/>can<sp/>be<sp/>two<sp/>main<sp/>kind<sp/>of<sp/>errors:<sp/>either<sp/>you<sp/>are<sp/>trying<sp/>to<sp/>mix<sp/>expressions<sp/>and<sp/>statements<sp/>suboperands,<sp/>which<sp/>is<sp/>not<sp/>allowed<sp/>(for<sp/>example<sp/>in<sp/>a<sp/>conditional<sp/>statement<sp/>or<sp/>expression<sp/>-<sp/>&lt;b&gt;remember<sp/>that<sp/>the<sp/>semi-colon<sp/>sticks<sp/>to<sp/>an<sp/>operand,<sp/>not<sp/>to<sp/>the<sp/>entire<sp/>control<sp/>flow<sp/>construct&lt;/b&gt;).<sp/>Or<sp/>if<sp/>you<sp/>got<sp/>this<sp/>right,<sp/>it<sp/>might<sp/>be<sp/>that<sp/>you<sp/>are<sp/>trying<sp/>to<sp/>concatenate<sp/>something<sp/>after<sp/>an<sp/>expression.<sp/>In<sp/>both<sp/>cases,<sp/>&lt;b&gt;it<sp/>is<sp/>very<sp/>likely<sp/>that<sp/>you<sp/>wrote<sp/>a<sp/>block<sp/>expression<sp/>where<sp/>you<sp/>meant<sp/>to<sp/>use<sp/>a<sp/>block<sp/>statement&lt;/b&gt;<sp/>(see<sp/>criterion<sp/>above).<sp/>In<sp/>this<sp/>case,<sp/>you<sp/>probably<sp/>just<sp/>forgot<sp/>a<sp/>semi-colon.</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral">XQuery<sp/>is<sp/>very<sp/>powerful<sp/>and<sp/>expressive.<sp/>As<sp/>in<sp/>C++,<sp/>modularizing<sp/>your<sp/>programs<sp/>in<sp/>small<sp/>functions<sp/>will<sp/>dramatically<sp/>reduce<sp/>development<sp/>time<sp/>while<sp/>improving<sp/>readability.</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral">\subsection<sp/>scripting_warnings<sp/>Scripting<sp/>Warnings</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral">The<sp/>compiler<sp/>may<sp/>report<sp/>warnings<sp/>to<sp/>report<sp/>scripting<sp/>constructions<sp/>which<sp/>are<sp/>not<sp/>inherently<sp/>erroneious<sp/>but<sp/>which<sp/>are<sp/>risky<sp/>or<sp/>suggest<sp/>there<sp/>may<sp/>have<sp/>been<sp/>an<sp/>error<sp/>(also<sp/>see<sp/>\ref<sp/>errors_warnings).</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral">\subsubsection<sp/>ZWST0004<sp/>ZWST0004</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral">This<sp/>is<sp/>a<sp/>warning<sp/>to<sp/>draw<sp/>attention<sp/>to<sp/>the<sp/>fact<sp/>that<sp/>when<sp/>FOR<sp/>clauses<sp/>or<sp/>LET<sp/>clauses<sp/>that<sp/>are<sp/>nested<sp/>inside<sp/>FOR<sp/>clauses<sp/>have<sp/>a<sp/>sequential<sp/>domain<sp/>expression,<sp/>then<sp/>one<sp/>can<sp/>think<sp/>of<sp/>two<sp/>different<sp/>evaluation<sp/>semantics<sp/>of<sp/>the<sp/>corresponding<sp/>FLWOR<sp/>expression.</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral">Both<sp/>semantics<sp/>are<sp/>correct,<sp/>but<sp/>they<sp/>are<sp/>not<sp/>equivalent.</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral">Zorba<sp/>adopts<sp/>one<sp/>of<sp/>these<sp/>semantics<sp/>(see<sp/>&lt;a<sp/>href=&quot;</highlight><highlight class="normal">/scripting-spec</highlight><highlight class="stringliteral">&quot;&gt;Scripting<sp/>Specification&lt;/a&gt;).</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral">The<sp/>warning<sp/>is<sp/>there<sp/>to<sp/>alert<sp/>users<sp/>who<sp/>write<sp/>such<sp/>FLWOR<sp/>expressions<sp/>that<sp/>what<sp/>they<sp/>may<sp/>have<sp/>in<sp/>mind<sp/>as<sp/>the<sp/>way<sp/>these<sp/>FLWORs<sp/>will<sp/>be<sp/>evaluated<sp/>may<sp/>not<sp/>be<sp/>the<sp/>same<sp/>as<sp/>the<sp/>way<sp/>Zorba<sp/>actually<sp/>evaluates<sp/>them.</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral">\subsection<sp/>scripting_option<sp/>Disabling<sp/>Scripting<sp/>Support<sp/></highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral">By<sp/>default,<sp/>Zorba<sp/>comes<sp/>with<sp/>support<sp/>for<sp/>scripting.</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral">However,<sp/>it<sp/>might<sp/>make<sp/>sense<sp/>to<sp/>disable<sp/>this<sp/>feature.</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral">For<sp/>example,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>a<sp/>module<sp/>does<sp/>not<sp/>need<sp/>any<sp/>scripting<sp/>features<sp/>because<sp/>it<sp/>would<sp/>not<sp/>be<sp/>compatible<sp/>with<sp/>other<sp/>XQuery<sp/>processors.</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral">The<sp/>following<sp/>prolog<sp/>option<sp/>can<sp/>be<sp/>used<sp/>to<sp/>disable<sp/>the<sp/>scripting<sp/>feature.</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral">\code</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/>declare<sp/>namespace<sp/>op<sp/>=<sp/>&quot;</highlight><highlight class="normal">http:</highlight><highlight class="comment">//zorba.io/options/features&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>declare<sp/>option<sp/>op:disable<sp/></highlight><highlight class="stringliteral">&quot;scripting&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">\endcode</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">Please<sp/>find<sp/>more<sp/>details<sp/>regarding<sp/>options<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a0f4527a84781e2e19c9796b2b7fcacba" kindref="member" tooltip="Tonga.">to</ref><sp/>enable<sp/>or<sp/>disable<sp/>particular<sp/>features<sp/>in<sp/>the<sp/>documentation<sp/>about<sp/>\ref<sp/>options_and_annotations.</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">*/</highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/doc/zorba/scripting.dox"/>
  </compounddef>
</doxygen>
