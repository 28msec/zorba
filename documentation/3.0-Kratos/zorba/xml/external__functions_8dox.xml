<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="external__functions_8dox" kind="file">
    <compoundname>external_functions.dox</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">\page<sp/>external_functions<sp/>Writing<sp/>Your<sp/>Own<sp/>External<sp/>Functions</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">\section<sp/>external<sp/>External<sp/>Functions</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">In<sp/>XQuery,<sp/>a<sp/>module<sp/>may<sp/>declare<sp/>both<sp/>user-defined<sp/>and<sp/>external<sp/>functions<sp/>(see</highlight></codeline>
<codeline lineno="8"><highlight class="comment">&lt;a<sp/>href=&quot;<sp/>http://www.w3.org/TR/xquery-30/#FunctionDeclns&quot;<sp/>target=&quot;_blank&quot;&gt;</highlight></codeline>
<codeline lineno="9"><highlight class="comment">http://www.w3.org/TR/xquery-30/#FunctionDeclns&lt;/a&gt;).<sp/>User-defined<sp/>functions<sp/>are<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment">implemented<sp/>as<sp/>XQuery<sp/>expressions<sp/>and<sp/>their<sp/>implementation<sp/>is<sp/>provided<sp/>together<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">with<sp/>their<sp/>declaration.<sp/>In<sp/>contrast,<sp/>external<sp/>functions<sp/>are<sp/>typically<sp/>implemented</highlight></codeline>
<codeline lineno="12"><highlight class="comment">in<sp/>a<sp/>host<sp/>language<sp/>other<sp/>than<sp/>XQuery,<sp/>and<sp/>their<sp/>implementation<sp/>is<sp/>not<sp/>inside<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment">declaring<sp/>module.<sp/>As<sp/>a<sp/>result,<sp/>to<sp/>support<sp/>external<sp/>functions,<sp/>XQuery<sp/>processors<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">must<sp/>provide<sp/>mechanisms<sp/>by<sp/>which<sp/>(1)<sp/>the<sp/>implementation<sp/>of<sp/>an<sp/>external<sp/>function<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">can<sp/>be<sp/>located,<sp/>(2)<sp/>values<sp/>for<sp/>function<sp/>parameters<sp/>are<sp/>passed<sp/>from<sp/>the<sp/>XQuery<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">runtime<sp/>environment<sp/>to<sp/>the<sp/>host<sp/>language,<sp/>and<sp/>(3)<sp/>the<sp/>result<sp/>of<sp/>the<sp/>function<sp/>is<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">passed<sp/>back<sp/>from<sp/>the<sp/>host<sp/>language<sp/>to<sp/>the<sp/>XQuery<sp/>runtime<sp/>environment.<sp/>We<sp/>call<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment">step<sp/>(1)<sp/>&lt;b&gt;external<sp/>function<sp/>resolution&lt;/b&gt;.<sp/>Steps<sp/>(2)<sp/>and<sp/>(3)<sp/>are<sp/>part<sp/>of<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment">&lt;b&gt;external<sp/>function<sp/>invocation&lt;/b&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">In<sp/>Zorba,<sp/>the<sp/>C++<sp/>API<sp/>provides<sp/>the<sp/>&quot;glue&quot;<sp/>between<sp/>the<sp/>XQuery<sp/>processor<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment">hosting<sp/>environment<sp/>into<sp/>which<sp/>external<sp/>functions<sp/>are<sp/>implemented.<sp/>Related<sp/>code<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment">examples<sp/>can<sp/>be<sp/>found<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment">&lt;a<sp/>href=&quot;/pages/latest/cxx/external_functions_8cpp-example&quot;&gt;here&lt;/a&gt;.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">\subsection<sp/>Implementation</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">In<sp/>Zorba,<sp/>external<sp/>functions<sp/>must<sp/>be<sp/>implemented<sp/>as<sp/>instances<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment">&lt;a<sp/>href=&quot;/pages/latest/cxx/classzorba_1_1ExternalFunction&quot;<sp/>target=&quot;_blank&quot;&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="comment">ExternalFunction&lt;/a&gt;<sp/>class.<sp/>We<sp/>refer<sp/>to<sp/>such<sp/>instances<sp/>as<sp/>&lt;b&gt;external<sp/>function</highlight></codeline>
<codeline lineno="32"><highlight class="comment">objects&lt;/b&gt;.<sp/>During<sp/>its<sp/>evaluation,<sp/>an<sp/>external<sp/>function<sp/>may<sp/>or<sp/>may<sp/>not<sp/>need<sp/>to<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment">access<sp/>the<sp/>static<sp/>or<sp/>dynamic<sp/>contexts<sp/>of<sp/>the<sp/>invoking<sp/>XQuery<sp/>module.<sp/>If<sp/>the<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment">function<sp/>implementation<sp/>does<sp/>need<sp/>to<sp/>access<sp/>either<sp/>context,<sp/>the<sp/>function<sp/>is<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="comment">referred<sp/>to<sp/>as<sp/>&lt;b&gt;contextual&lt;/b&gt;;<sp/>otherwise,<sp/>it<sp/>is<sp/>&lt;b&gt;non-contextual&lt;/b&gt;.<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="comment">Zorba<sp/>provides<sp/>classes<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="comment">&lt;a<sp/>href=&quot;/pages/latest/cxx/classzorba_1_1ContextualExternalFunction&quot;&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="comment">ContextualExternalFunction&lt;/a&gt;<sp/>and<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="comment">&lt;a<sp/>href=&quot;/pages/latest/cxx/classzorba_1_1NonContextualExternalFunction&quot;&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="comment">NonContextualExternalFunction&lt;/a&gt;<sp/>to<sp/>differentiate<sp/>between<sp/>contextual<sp/>and<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment">non-contextual<sp/>external<sp/>functions,<sp/>respectively.<sp/>Both<sp/>are<sp/>abstract<sp/>subclasses<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="comment">of<sp/>ExternalFunction<sp/>and<sp/>provide<sp/>a<sp/>(virtual)<sp/>evaluate()<sp/>method<sp/>that<sp/>serves<sp/>as<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment">the<sp/>implementation<sp/>of<sp/>an<sp/>external<sp/>function.<sp/>For<sp/>each<sp/>external<sp/>function,<sp/>an<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="comment">application<sp/>must<sp/>provide<sp/>a<sp/>concrete<sp/>subclass<sp/>of<sp/>either<sp/>of<sp/>these<sp/>classes.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">\subsection<sp/>Invocation</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">Invoking<sp/>an<sp/>external<sp/>function<sp/>boils<sp/>down<sp/>to<sp/>invoking<sp/>the<sp/>evaluate()<sp/>method<sp/>on</highlight></codeline>
<codeline lineno="50"><highlight class="comment">the<sp/>associated<sp/>function<sp/>object.<sp/>The<sp/>first<sp/>parameter<sp/>of<sp/>evaluate()<sp/>is<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="51"><highlight class="comment">of<sp/>pointers<sp/>to<sp/>&lt;a<sp/>href=&quot;/pages/latest/cxx/classzorba_1_1ItemSequence&quot;<sp/>target=&quot;_blank&quot;&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="comment">ItemSequence&lt;/a&gt;<sp/>objects.<sp/>During<sp/>invocation,<sp/>the<sp/>given<sp/>vector<sp/>will<sp/>contain<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment">one<sp/>entry<sp/>for<sp/>each<sp/>parameter<sp/>listed<sp/>in<sp/>the<sp/>external<sp/>function<sp/>declaration.</highlight></codeline>
<codeline lineno="54"><highlight class="comment">The<sp/>Zorba<sp/>XQuery<sp/>processor<sp/>makes<sp/>sure<sp/>that<sp/>the<sp/>types<sp/>of<sp/>the<sp/>item<sp/>sequences<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment">given<sp/>to<sp/>evaluate()<sp/>match<sp/>the<sp/>types<sp/>of<sp/>the<sp/>formal<sp/>parameters.<sp/>Similarly,<sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="comment">evaluate()<sp/>returns<sp/>the<sp/>result<sp/>of<sp/>the<sp/>function<sp/>as<sp/>an<sp/>ItemSequence.<sp/>Again,</highlight></codeline>
<codeline lineno="57"><highlight class="comment">Zorba<sp/>makes<sp/>sure<sp/>that<sp/>the<sp/>type<sp/>of<sp/>the<sp/>returned<sp/>ItemSequence<sp/>matches<sp/>the</highlight></codeline>
<codeline lineno="58"><highlight class="comment">declared<sp/>return<sp/>type<sp/>of<sp/>the<sp/>function.<sp/>If<sp/>the<sp/>function<sp/>is<sp/>contextual,<sp/>its</highlight></codeline>
<codeline lineno="59"><highlight class="comment">evaluate()<sp/>method<sp/>has<sp/>two<sp/>additional<sp/>parameters;<sp/>they<sp/>are<sp/>pointers<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="60"><highlight class="comment">static<sp/>and<sp/>dynamic<sp/>contextes<sp/>of<sp/>the<sp/>module<sp/>declaring<sp/>the<sp/>function.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment">\subsection<sp/>Resolution</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">Before<sp/>it<sp/>can<sp/>invoke<sp/>an<sp/>external<sp/>function,<sp/>Zorba<sp/>must<sp/>locate<sp/>its<sp/>function</highlight></codeline>
<codeline lineno="66"><highlight class="comment">object.<sp/>For<sp/>this,<sp/>Zorba<sp/>looks-up<sp/>the<sp/>function<sp/>object<sp/>in<sp/>the<sp/>static<sp/>context,</highlight></codeline>
<codeline lineno="67"><highlight class="comment">using<sp/>the<sp/>function<sp/>QName<sp/>as<sp/>the<sp/>key.<sp/>However,<sp/>it<sp/>is<sp/>the<sp/>responsibility<sp/>of</highlight></codeline>
<codeline lineno="68"><highlight class="comment">the<sp/>application<sp/>to<sp/>register<sp/>the<sp/>function<sp/>objects<sp/>to<sp/>the<sp/>static<sp/>context.</highlight></codeline>
<codeline lineno="69"><highlight class="comment">For<sp/>this,<sp/>Zorba<sp/>provides<sp/>the</highlight></codeline>
<codeline lineno="70"><highlight class="comment">&lt;a<sp/>href=&quot;/pages/latest/cxx/classzorba_1_1ExternalModule&quot;&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="comment">ExternalModule&lt;/a&gt;<sp/>abstract<sp/>class.<sp/>ExternalModule<sp/>represents<sp/>a<sp/>group<sp/>of<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment">external<sp/>functions,<sp/>all<sp/>belonging<sp/>to<sp/>the<sp/>same<sp/>XQuery<sp/>module<sp/>(and<sp/>thus</highlight></codeline>
<codeline lineno="73"><highlight class="comment">having<sp/>the<sp/>same<sp/>target<sp/>namespace).<sp/>It<sp/>provides<sp/>the<sp/>interface<sp/>for<sp/>retrieving</highlight></codeline>
<codeline lineno="74"><highlight class="comment">the<sp/>function<sp/>object<sp/>of<sp/>each<sp/>contained<sp/>external<sp/>function<sp/>given<sp/>the<sp/>function&apos;s<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment">QName.<sp/>Applications<sp/>are<sp/>responsible<sp/>for<sp/>implementing<sp/>concrete<sp/>subclasses<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="comment">of<sp/>ExternalModule<sp/>and<sp/>for<sp/>registering<sp/>instances<sp/>of<sp/>such<sp/>subclasses<sp/>into<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="comment">the<sp/>static<sp/>context.<sp/>Registration<sp/>can<sp/>be<sp/>done<sp/>in<sp/>either<sp/>of<sp/>the<sp/>two<sp/>following<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="comment">ways.<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">1.<sp/>An<sp/>ExternalModule<sp/>object<sp/>can<sp/>be<sp/>registered<sp/>explicitly<sp/>using<sp/>the<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="comment">registerModule()<sp/>method<sp/>of<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="comment">&lt;a<sp/>href=&quot;/pages/latest/cxx/classzorba_1_1StaticContext&quot;<sp/>target=&quot;_blank&quot;&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="comment">StaticContext&lt;/a&gt;.<sp/>In<sp/>this<sp/>case,<sp/>the<sp/>application<sp/>retains<sp/>memory<sp/>ownership</highlight></codeline>
<codeline lineno="84"><highlight class="comment">of<sp/>the<sp/>ExternalModul<sp/>object,<sp/>and<sp/>must<sp/>free<sp/>it<sp/>when<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>needed.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">2.<sp/>An<sp/>implementation<sp/>of<sp/>ExternalModule<sp/>and<sp/>its<sp/>associated</highlight></codeline>
<codeline lineno="87"><highlight class="comment">ExternalFunctions<sp/>can<sp/>be<sp/>packaged<sp/>into<sp/>a<sp/>dynamic<sp/>library<sp/>(dll,<sp/>so,<sp/>or</highlight></codeline>
<codeline lineno="88"><highlight class="comment">dylib).<sp/>The<sp/>dynamic<sp/>library<sp/>must<sp/>have<sp/>a<sp/>global<sp/>function<sp/>named</highlight></codeline>
<codeline lineno="89"><highlight class="comment">&lt;tt&gt;createModule()&lt;/tt&gt;<sp/>as<sp/>an<sp/>entry<sp/>point,<sp/>and<sp/>createModule()<sp/>must</highlight></codeline>
<codeline lineno="90"><highlight class="comment">return<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>ExternalModule<sp/>object.<sp/>Assuming<sp/>a<sp/>library<sp/>has</highlight></codeline>
<codeline lineno="91"><highlight class="comment">been<sp/>named<sp/>and<sp/>placed<sp/>appropriately,<sp/>Zorba<sp/>will<sp/>automatically<sp/>load<sp/>it</highlight></codeline>
<codeline lineno="92"><highlight class="comment">when<sp/>it<sp/>compiles<sp/>the<sp/>XQuery<sp/>module<sp/>with<sp/>the<sp/>same<sp/>target<sp/>namespace.<sp/>It</highlight></codeline>
<codeline lineno="93"><highlight class="comment">will<sp/>call<sp/>getModule()<sp/>to<sp/>create<sp/>an<sp/>ExternalModule<sp/>object,<sp/>and<sp/>register</highlight></codeline>
<codeline lineno="94"><highlight class="comment">it<sp/>into<sp/>the<sp/>static<sp/>context.<sp/>In<sp/>this<sp/>case,<sp/>Zorba<sp/>assumes<sp/>ownership<sp/>of</highlight></codeline>
<codeline lineno="95"><highlight class="comment">the<sp/>ExternalModule<sp/>object,<sp/>and<sp/>will<sp/>destroy<sp/>it<sp/>when<sp/>the<sp/>containing</highlight></codeline>
<codeline lineno="96"><highlight class="comment">static<sp/>context<sp/>is<sp/>destroyed.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">Under<sp/>most<sp/>circumstances,<sp/>a<sp/>module<sp/>author<sp/>using<sp/>this<sp/>second<sp/>technique</highlight></codeline>
<codeline lineno="99"><highlight class="comment">will<sp/>use<sp/>the<sp/>CMake-based<sp/>&lt;tt&gt;DECLARE_ZORBA_MODULE()&lt;/tt&gt;<sp/>framework<sp/>to</highlight></codeline>
<codeline lineno="100"><highlight class="comment">build<sp/>the<sp/>external<sp/>module<sp/>code<sp/>and<sp/>install<sp/>it<sp/>appropriately.<sp/>Details</highlight></codeline>
<codeline lineno="101"><highlight class="comment">of<sp/>this<sp/>mechanism<sp/>can<sp/>be<sp/>found<sp/>here:<sp/>\ref<sp/>mod_author_cpp.<sp/>Thus,<sp/>you<sp/>do</highlight></codeline>
<codeline lineno="102"><highlight class="comment">not<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>how<sp/>to<sp/>build,<sp/>name,<sp/>or<sp/>locate<sp/>the<sp/>shared</highlight></codeline>
<codeline lineno="103"><highlight class="comment">object,<sp/>as<sp/>Zorba&apos;s<sp/>process<sp/>will<sp/>take<sp/>care<sp/>of<sp/>that<sp/>for<sp/>you.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">\subsection<sp/>external_manual<sp/>Manual<sp/>Shared<sp/>Object<sp/>Resolution</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">For<sp/>reference,<sp/>included<sp/>below<sp/>is<sp/>the<sp/>process<sp/>that<sp/>Zorba<sp/>will<sp/>use</highlight></codeline>
<codeline lineno="108"><highlight class="comment">internally<sp/>to<sp/>located<sp/>the<sp/>shared<sp/>object<sp/>when<sp/>compiling<sp/>a<sp/>module<sp/>with</highlight></codeline>
<codeline lineno="109"><highlight class="comment">external<sp/>functions.<sp/>If<sp/>for<sp/>some<sp/>reason<sp/>you<sp/>do<sp/>not<sp/>wish<sp/>to<sp/>use<sp/>the</highlight></codeline>
<codeline lineno="110"><highlight class="comment">&lt;tt&gt;DECLARE_ZORBA_MODULE()&lt;/tt&gt;<sp/>framework,<sp/>the<sp/>below<sp/>information<sp/>will</highlight></codeline>
<codeline lineno="111"><highlight class="comment">be<sp/>necessary<sp/>for<sp/>you<sp/>to<sp/>place<sp/>the<sp/>shared<sp/>object<sp/>such<sp/>that<sp/>Zorba<sp/>can</highlight></codeline>
<codeline lineno="112"><highlight class="comment">load<sp/>it<sp/>at<sp/>runtime.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">To<sp/>locate<sp/>a<sp/>dynamic<sp/>library,<sp/>Zorba<sp/>first<sp/>transforms<sp/>its<sp/>target</highlight></codeline>
<codeline lineno="115"><highlight class="comment">namespace<sp/>URI<sp/>to<sp/>a<sp/>relative<sp/>file<sp/>path<sp/>and<sp/>then<sp/>uses<sp/>the<sp/>&quot;Library<sp/>Path&quot;</highlight></codeline>
<codeline lineno="116"><highlight class="comment">mechanism<sp/>(described<sp/>in<sp/>\ref<sp/>libpath)<sp/>to<sp/>turn<sp/>this<sp/>relative<sp/>path</highlight></codeline>
<codeline lineno="117"><highlight class="comment">to<sp/>the<sp/>absolute<sp/>path<sp/>name<sp/>of<sp/>the<sp/>dynamic<sp/>library<sp/>file.<sp/>The</highlight></codeline>
<codeline lineno="118"><highlight class="comment">transformation<sp/>of<sp/>the<sp/>URI<sp/>to<sp/>a<sp/>relative<sp/>path<sp/>is<sp/>done<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="119"><highlight class="comment">following<sp/>steps.<sp/>In<sp/>describing<sp/>the<sp/>steps,<sp/>we<sp/>will<sp/>use<sp/>the<sp/>URI</highlight></codeline>
<codeline lineno="120"><highlight class="comment">&quot;http://www.example.com/modules/utils&quot;<sp/>as<sp/>an<sp/>example<sp/>and<sp/>assume<sp/>we<sp/>are</highlight></codeline>
<codeline lineno="121"><highlight class="comment">working<sp/>with<sp/>a<sp/>Linux<sp/>system.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">&lt;ol&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">&lt;li&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="comment">The<sp/>domain<sp/>component<sp/>of<sp/>the<sp/>URI<sp/>is<sp/>extracted<sp/>and<sp/>transformed<sp/>into<sp/>a<sp/>path<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="comment">notation<sp/>by<sp/>replacing<sp/>its<sp/>&quot;.&quot;<sp/>characters<sp/>(if<sp/>any)<sp/>into<sp/>forward<sp/>slashes<sp/>and<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="comment">reversing<sp/>the<sp/>order<sp/>of<sp/>the<sp/>path<sp/>steps.<sp/>The<sp/>result<sp/>of<sp/>this<sp/>step<sp/>on<sp/>the<sp/>example<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="comment">URI<sp/>is<sp/>&quot;com/example/www&quot;.</highlight></codeline>
<codeline lineno="130"><highlight class="comment">&lt;/li&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">&lt;li&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="comment">The<sp/>path<sp/>component<sp/>of<sp/>the<sp/>URI<sp/>is<sp/>extracted<sp/>and<sp/>separated<sp/>into<sp/>a<sp/>branch<sp/>name<sp/>and</highlight></codeline>
<codeline lineno="134"><highlight class="comment">a<sp/>file<sp/>name:<sp/>(a)<sp/>if<sp/>the<sp/>path<sp/>component<sp/>does<sp/>not<sp/>contain<sp/>any<sp/>&quot;/&quot;<sp/>characters,<sp/>the<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="comment">branch<sp/>name<sp/>is<sp/>empty<sp/>and<sp/>the<sp/>file<sp/>name<sp/>is<sp/>the<sp/>full<sp/>path<sp/>component,<sp/>else<sp/>(b)<sp/>if<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="comment">the<sp/>path<sp/>component<sp/>ends<sp/>with<sp/>a<sp/>&quot;/&quot;,<sp/>the<sp/>branch<sp/>name<sp/>is<sp/>the<sp/>full<sp/>path<sp/>component<sp/></highlight></codeline>
<codeline lineno="137"><highlight class="comment">and<sp/>the<sp/>file<sp/>name<sp/>is<sp/>empty,<sp/>else<sp/>(c)<sp/>the<sp/>file<sp/>name<sp/>is<sp/>set<sp/>to<sp/>the<sp/>last<sp/>step<sp/>of<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="comment">the<sp/>path<sp/>component<sp/>(the<sp/>substring<sp/>after<sp/>the<sp/>last<sp/>&quot;/&quot;)<sp/>and<sp/>the<sp/>branch<sp/>name<sp/>is<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment">set<sp/>to<sp/>the<sp/>path<sp/>component<sp/>minus<sp/>the<sp/>last<sp/>step.<sp/>The<sp/>branch<sp/>name<sp/>is<sp/>then<sp/>appended<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="comment">to<sp/>the<sp/>result<sp/>of<sp/>the<sp/>previous<sp/>step.<sp/>The<sp/>result<sp/>of<sp/>this<sp/>step<sp/>on<sp/>the<sp/>example<sp/>URI<sp/>is<sp/></highlight></codeline>
<codeline lineno="141"><highlight class="comment">&quot;com/example/www/modules/&quot;.</highlight></codeline>
<codeline lineno="142"><highlight class="comment">&lt;/li&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">&lt;li&gt;</highlight></codeline>
<codeline lineno="145"><highlight class="comment">On<sp/>Unix<sp/>or<sp/>Mac<sp/>systems,<sp/>the<sp/>string<sp/>&quot;lib&quot;<sp/>is<sp/>appended<sp/>to<sp/>the<sp/>result<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="comment">previous<sp/>step.<sp/>The<sp/>result<sp/>of<sp/>this<sp/>step<sp/>on<sp/>the<sp/>example<sp/>URI<sp/>is<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="comment">&quot;com/example/www/modules/lib&quot;.</highlight></codeline>
<codeline lineno="148"><highlight class="comment">&lt;/li&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">&lt;li&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="comment">The<sp/>file<sp/>name<sp/>is<sp/>appended<sp/>to<sp/>the<sp/>result<sp/>of<sp/>the<sp/>previous<sp/>step.<sp/>The<sp/>result<sp/>of<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="comment">this<sp/>step<sp/>on<sp/>the<sp/>example<sp/>URI<sp/>is<sp/>&quot;com/example/www/modules/libutils&quot;.</highlight></codeline>
<codeline lineno="153"><highlight class="comment">&lt;/li&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">&lt;li&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="comment">If<sp/>the<sp/>XQuery<sp/>module<sp/>being<sp/>imported<sp/>contains<sp/>a<sp/>version<sp/>option,<sp/>the<sp/>character<sp/>&quot;_&quot;</highlight></codeline>
<codeline lineno="157"><highlight class="comment">followed<sp/>by<sp/>the<sp/>version<sp/>string<sp/>are<sp/>appended.<sp/>Assuming<sp/>that<sp/>the<sp/>module<sp/>being</highlight></codeline>
<codeline lineno="158"><highlight class="comment">imported<sp/>via<sp/>the<sp/>example<sp/>URI<sp/>has<sp/>a<sp/>version<sp/>option<sp/>with<sp/>the<sp/>value<sp/>&quot;1.2&quot;,<sp/>the</highlight></codeline>
<codeline lineno="159"><highlight class="comment">result<sp/>of<sp/>this<sp/>step<sp/>on<sp/>the<sp/>example<sp/>URI<sp/>is<sp/>&quot;com/example/www/modules/libutils_1.2&quot;.</highlight></codeline>
<codeline lineno="160"><highlight class="comment">&lt;/li&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"></highlight></codeline>
<codeline lineno="162"><highlight class="comment">&lt;li&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="comment">Finally,<sp/>the<sp/>appropriate<sp/>suffix<sp/>is<sp/>appended<sp/>to<sp/>the<sp/>file<sp/>name:<sp/>&quot;.so&quot;<sp/>for<sp/>Unix,<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="comment">&quot;.dll&quot;<sp/>for<sp/>Windows,<sp/>or<sp/>&quot;.dylib&quot;<sp/>for<sp/>MacOS.<sp/>The<sp/>result<sp/>of<sp/>this<sp/>step<sp/>on<sp/>the<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="comment">example<sp/>URI<sp/>is<sp/>&quot;com/example/www/modules/libutils_1.2.so&quot;.</highlight></codeline>
<codeline lineno="166"><highlight class="comment">&lt;/li&gt;</highlight></codeline>
<codeline lineno="167"><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">&lt;/ol&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/doc/zorba/external_functions.dox"/>
  </compounddef>
</doxygen>
