<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="ztd_8h" kind="file">
    <compoundname>ztd.h</compoundname>
    <includes local="no">cstring</includes>
    <includes local="no">functional</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">zorba/config.h</includes>
    <includes refid="cxx__util_8h" local="yes">cxx_util.h</includes>
    <includes refid="type__traits_8h" local="yes">type_traits.h</includes>
    <includedby refid="internal_2diagnostic_8h" local="yes">diagnostic.h</includedby>
    <includedby refid="qname_8h" local="yes">qname.h</includedby>
    <includedby refid="system__diagnostic_8h" local="yes">system_diagnostic.h</includedby>
    <includedby refid="unique__ptr_8h" local="yes">unique_ptr.h</includedby>
    <includedby refid="stemmer_8h" local="no">stemmer.h</includedby>
    <includedby refid="thesaurus_8h" local="no">thesaurus.h</includedby>
    <includedby refid="tokenizer_8h" local="no">tokenizer.h</includedby>
    <includedby refid="uri__resolvers_8h" local="no">uri_resolvers.h</includedby>
    <includedby refid="base64__util_8h" local="no">base64_util.h</includedby>
    <includedby refid="error__util_8h" local="no">error_util.h</includedby>
    <includedby refid="fs__util_8h" local="no">fs_util.h</includedby>
    <includedby refid="hexbinary__util_8h" local="no">hexbinary_util.h</includedby>
    <incdepgraph>
      <node id="2719">
        <label>functional</label>
      </node>
      <node id="2723">
        <label>cxx_util.h</label>
        <link refid="cxx__util_8h"/>
        <childnode refid="2722" relation="include">
        </childnode>
      </node>
      <node id="2721">
        <label>string</label>
      </node>
      <node id="2724">
        <label>type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="2722" relation="include">
        </childnode>
        <childnode refid="2725" relation="include">
        </childnode>
      </node>
      <node id="2720">
        <label>sstream</label>
      </node>
      <node id="2717">
        <label>ztd.h</label>
        <link refid="ztd.h"/>
        <childnode refid="2718" relation="include">
        </childnode>
        <childnode refid="2719" relation="include">
        </childnode>
        <childnode refid="2720" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2722" relation="include">
        </childnode>
        <childnode refid="2723" relation="include">
        </childnode>
        <childnode refid="2724" relation="include">
        </childnode>
      </node>
      <node id="2725">
        <label>type_traits</label>
      </node>
      <node id="2722">
        <label>zorba/config.h</label>
      </node>
      <node id="2718">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2740">
        <label>xquery_stack_trace.h</label>
        <link refid="xquery__stack__trace_8h"/>
        <childnode refid="2733" relation="include">
        </childnode>
      </node>
      <node id="2737">
        <label>diagnostic.h</label>
        <link refid="diagnostic_8h"/>
        <childnode refid="2727" relation="include">
        </childnode>
        <childnode refid="2736" relation="include">
        </childnode>
        <childnode refid="2738" relation="include">
        </childnode>
        <childnode refid="2734" relation="include">
        </childnode>
      </node>
      <node id="2734">
        <label>xquery_warning.h</label>
        <link refid="xquery__warning_8h"/>
        <childnode refid="2735" relation="include">
        </childnode>
      </node>
      <node id="2736">
        <label>qname.h</label>
        <link refid="qname_8h"/>
        <childnode refid="2737" relation="include">
        </childnode>
        <childnode refid="2728" relation="include">
        </childnode>
        <childnode refid="2739" relation="include">
        </childnode>
        <childnode refid="2740" relation="include">
        </childnode>
      </node>
      <node id="2749">
        <label>error_util.h</label>
        <link refid="error__util_8h"/>
        <childnode refid="2750" relation="include">
        </childnode>
      </node>
      <node id="2732">
        <label>zorba.h</label>
        <link refid="zorba_8h"/>
        <childnode refid="2731" relation="include">
        </childnode>
      </node>
      <node id="2730">
        <label>zorba_exception.h</label>
        <link refid="zorba__exception_8h"/>
        <childnode refid="2731" relation="include">
        </childnode>
        <childnode refid="2733" relation="include">
        </childnode>
      </node>
      <node id="2728">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="2729" relation="include">
        </childnode>
        <childnode refid="2730" relation="include">
        </childnode>
      </node>
      <node id="2747">
        <label>xquery_functions.h</label>
        <link refid="xquery__functions_8h"/>
      </node>
      <node id="2746">
        <label>transcode_stream.h</label>
        <link refid="transcode__stream_8h"/>
      </node>
      <node id="2743">
        <label>thesaurus.h</label>
        <link refid="thesaurus_8h"/>
        <childnode refid="2731" relation="include">
        </childnode>
      </node>
      <node id="2727">
        <label>diagnostic.h</label>
        <link refid="internal_2diagnostic_8h"/>
        <childnode refid="2728" relation="include">
        </childnode>
      </node>
      <node id="2751">
        <label>hexbinary_util.h</label>
        <link refid="hexbinary__util_8h"/>
      </node>
      <node id="2748">
        <label>base64_util.h</label>
        <link refid="base64__util_8h"/>
      </node>
      <node id="2738">
        <label>system_diagnostic.h</label>
        <link refid="system__diagnostic_8h"/>
        <childnode refid="2737" relation="include">
        </childnode>
      </node>
      <node id="2729">
        <label>user_exception.h</label>
        <link refid="user__exception_8h"/>
      </node>
      <node id="2742">
        <label>stemmer.h</label>
        <link refid="stemmer_8h"/>
      </node>
      <node id="2733">
        <label>xquery_exception.h</label>
        <link refid="xquery__exception_8h"/>
        <childnode refid="2729" relation="include">
        </childnode>
        <childnode refid="2734" relation="include">
        </childnode>
      </node>
      <node id="2735">
        <label>diagnostic_handler.h</label>
        <link refid="diagnostic__handler_8h"/>
        <childnode refid="2732" relation="include">
        </childnode>
      </node>
      <node id="2731">
        <label>static_context.h</label>
        <link refid="static__context_8h"/>
        <childnode refid="2732" relation="include">
        </childnode>
      </node>
      <node id="2745">
        <label>uri_resolvers.h</label>
        <link refid="uri__resolvers_8h"/>
        <childnode refid="2743" relation="include">
        </childnode>
      </node>
      <node id="2741">
        <label>unique_ptr.h</label>
        <link refid="unique__ptr_8h"/>
        <childnode refid="2742" relation="include">
        </childnode>
        <childnode refid="2743" relation="include">
        </childnode>
        <childnode refid="2744" relation="include">
        </childnode>
        <childnode refid="2745" relation="include">
        </childnode>
        <childnode refid="2746" relation="include">
        </childnode>
        <childnode refid="2747" relation="include">
        </childnode>
        <childnode refid="2730" relation="include">
        </childnode>
      </node>
      <node id="2726">
        <label>ztd.h</label>
        <link refid="ztd.h"/>
        <childnode refid="2727" relation="include">
        </childnode>
        <childnode refid="2736" relation="include">
        </childnode>
        <childnode refid="2738" relation="include">
        </childnode>
        <childnode refid="2741" relation="include">
        </childnode>
        <childnode refid="2742" relation="include">
        </childnode>
        <childnode refid="2743" relation="include">
        </childnode>
        <childnode refid="2744" relation="include">
        </childnode>
        <childnode refid="2745" relation="include">
        </childnode>
        <childnode refid="2748" relation="include">
        </childnode>
        <childnode refid="2749" relation="include">
        </childnode>
        <childnode refid="2750" relation="include">
        </childnode>
        <childnode refid="2751" relation="include">
        </childnode>
      </node>
      <node id="2750">
        <label>fs_util.h</label>
        <link refid="fs__util_8h"/>
      </node>
      <node id="2739">
        <label>diagnostic_list.h</label>
        <link refid="diagnostic__list_8h"/>
      </node>
      <node id="2744">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1any__t" prot="public">zorba::internal::ztd::has_insertion_operator_impl::any_t</innerclass>
    <innerclass refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete" prot="public">zorba::internal::ztd::destroy_delete</innerclass>
    <innerclass refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool" prot="public">zorba::internal::ztd::explicit_bool</innerclass>
    <innerclass refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator" prot="public">zorba::internal::ztd::has_insertion_operator</innerclass>
    <innerclass refid="classzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1has__insertion__operator" prot="public">zorba::internal::ztd::has_insertion_operator_impl::has_insertion_operator</innerclass>
    <innerclass refid="classzorba_1_1internal_1_1ztd_1_1is__c__string" prot="public">zorba::internal::ztd::is_c_string</innerclass>
    <innerclass refid="structzorba_1_1internal_1_1ztd_1_1less" prot="public">zorba::internal::ztd::less</innerclass>
    <innerclass refid="structzorba_1_1internal_1_1ztd_1_1less_3_01char_01const_01_5_01_4" prot="public">zorba::internal::ztd::less&lt; char const * &gt;</innerclass>
    <innerclass refid="structzorba_1_1internal_1_1ztd_1_1explicit__bool_1_1pointer__conversion" prot="private">zorba::internal::ztd::explicit_bool::pointer_conversion</innerclass>
    <innerclass refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base" prot="public">zorba::internal::ztd::sfinae_base</innerclass>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <innernamespace refid="namespacezorba_1_1internal">zorba::internal</innernamespace>
    <innernamespace refid="namespacezorba_1_1internal_1_1ztd">zorba::internal::ztd</innernamespace>
    <innernamespace refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl">zorba::internal::ztd::has_insertion_operator_impl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ztd_8h_1a62da5398ab762dabed8d84e8212117c6" prot="public" static="no">
        <name>ZORBA_DECL_HAS_MEM_FN</name>
        <param><defname>FN_NAME</defname></param>
        <initializer>template&lt;typename T,typename S&gt;                                     \
  class has_##FN_NAME : public ::<ref refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base" kindref="compound">zorba::internal::ztd::sfinae_base</ref> {  \
    template&lt;typename SignatureType,SignatureType&gt; struct type_check; \
    template&lt;class U&gt; static yes&amp; test(type_check&lt;S,&amp;U::FN_NAME&gt;*);   \
    template&lt;class U&gt; static no&amp; test(...);                           \
  public:                                                             \
    static bool const value = sizeof( test&lt;T&gt;(0) ) == sizeof( yes );  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/ztd.h" line="82" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/ztd.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" prot="public" static="no">
        <name>ZORBA_HAS_C_STR</name>
        <param><defname>T</defname></param>
        <initializer>::zorba::internal::ztd::has_c_str&lt;T,char const* (T::*)() const&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/ztd.h" line="271" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/ztd.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ztd_8h_1a0958a26ba5538590ef945f07a2251f2d" prot="public" static="no">
        <name>ZORBA_IS_STRING</name>
        <param><defname>T</defname></param>
        <initializer><ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(T)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/ztd.h" line="279" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/ztd.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_INTERNAL_ZTD_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_INTERNAL_ZTD_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cxx__util_8h" kindref="compound">cxx_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__traits_8h" kindref="compound">type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ztd<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">//////////<sp/>tr1<sp/>////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>Base<sp/>class<sp/>for<sp/>SFINAE<sp/>(Substitution<sp/>Failure<sp/>Is<sp/>Not<sp/>An<sp/>Error)<sp/>types.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base" kindref="compound">sfinae_base</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44" refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base_1a6e4b0d3c86f136688e1b3eb4a75f1fb5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base_1a6e4b0d3c86f136688e1b3eb4a75f1fb5" kindref="member">no</ref>;</highlight></codeline>
<codeline lineno="45" refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base_1aad431dbf3e2e073b3843daeb96e05455" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base_1aad431dbf3e2e073b3843daeb96e05455" kindref="member">yes</ref>[2];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1sfinae__base_1a719cc235174b437e4aa8f6453e96e00a" kindref="member">suppress_all_member_functions_are_private_warning</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Declares<sp/>a<sp/>class<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>determine<sp/>whether<sp/>a<sp/>given<sp/>type<sp/>\c<sp/>T<sp/>has</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>a<sp/>particular<sp/>member<sp/>function<sp/>with<sp/>a<sp/>certain<sp/>signature.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>ZORBA_DECL_HAS_MEM_FN(<sp/>c_str<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>template&lt;typename<sp/>T&gt;<sp/>inline</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>typename<sp/>enable_if&lt;has_c_str&lt;T,char<sp/>const*<sp/>(T::*)()<sp/>const&gt;::value,</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;::type</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>to_string(<sp/>T<sp/>const<sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/>//<sp/>case<sp/>where<sp/>T<sp/>has<sp/>c_str()</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>template&lt;typename<sp/>T&gt;<sp/>inline</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>typename<sp/>enable_if&lt;!has_c_str&lt;T,char<sp/>const*<sp/>(T::*)()<sp/>const&gt;::value,</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;::type</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>to_string(<sp/>T<sp/>const<sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/>//<sp/>case<sp/>where<sp/>T<sp/>does<sp/>not<sp/>have<sp/>c_str()</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>\hideinitializer</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="ztd_8h_1a62da5398ab762dabed8d84e8212117c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_DECL_HAS_MEM_FN(FN_NAME)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>T,typename<sp/>S&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/>class<sp/>has_##FN_NAME<sp/>:<sp/>public<sp/>::zorba::internal::ztd::sfinae_base<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>SignatureType,SignatureType&gt;<sp/>struct<sp/>type_check;<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;class<sp/>U&gt;<sp/>static<sp/>yes&amp;<sp/>test(type_check&lt;S,&amp;U::FN_NAME&gt;*);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;class<sp/>U&gt;<sp/>static<sp/>no&amp;<sp/>test(...);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>const<sp/>value<sp/>=<sp/>sizeof(<sp/>test&lt;T&gt;(0)<sp/>)<sp/>==<sp/>sizeof(<sp/>yes<sp/>);<sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>This<sp/>namespace<sp/>is<sp/>used<sp/>only<sp/>to<sp/>bundle<sp/>the<sp/>implementation<sp/>details<sp/>for</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>implementing<sp/>\c<sp/>has_insertion_operator&lt;T&gt;.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>This<sp/>implementation<sp/>is<sp/>based<sp/>on<sp/>http://stackoverflow.com/q/4434569/</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">has_insertion_operator_impl<sp/>{</highlight></codeline>
<codeline lineno="91" refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a02a523cf236289acec6640afe9070191" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a02a523cf236289acec6640afe9070191" kindref="member">no</ref>;</highlight></codeline>
<codeline lineno="92" refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a71a7c7338cfff03861b084e62c3308b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a71a7c7338cfff03861b084e62c3308b1" kindref="member">yes</ref>[2];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>dummy<sp/>class<sp/>is<sp/>used<sp/>to<sp/>make<sp/>the<sp/>matching<sp/>of<sp/>the<sp/>dummy<sp/>operator&lt;&lt;()</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\e<sp/>worse<sp/>than<sp/>the<sp/>global<sp/>\c<sp/>operator&lt;&lt;(),<sp/>if<sp/>any.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1any__t" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1any__t" kindref="compound" tooltip="This dummy class is used to make the matching of the dummy operator&amp;lt;&amp;lt;() worse than the global operato...">any_t</ref><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1any__t_1a020103b650c2ba30b177e2b2c850df36" kindref="member">any_t</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>dummy<sp/>operator<sp/>is<sp/>matched<sp/>only<sp/>when<sp/>there<sp/>is<sp/>\e<sp/>no<sp/>global</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>*<sp/>operator&lt;&lt;()<sp/>otherwise<sp/>declared<sp/>for<sp/>type<sp/>\c<sp/>T.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>\c<sp/>no<sp/>that<sp/>selects<sp/>defined(no).</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a02a523cf236289acec6640afe9070191" kindref="member">no</ref><sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1af6f8268706824cf6c6ae5326cc90e283" kindref="member" tooltip="This dummy operator is matched only when there is no global operator&amp;lt;&amp;lt;() otherwise declared for type ...">operator&lt;&lt;</ref>(<sp/>std::ostream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1any__t" kindref="compound" tooltip="This dummy class is used to make the matching of the dummy operator&amp;lt;&amp;lt;() worse than the global operato...">any_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>is<sp/>matched<sp/>only<sp/>when<sp/>there<sp/>\e<sp/>is<sp/>a<sp/>global<sp/>\c<sp/>operator&lt;&lt;()</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>*<sp/>declared<sp/>for<sp/>type<sp/>\c<sp/>T<sp/>because<sp/>\c<sp/>operator&lt;&lt;()&apos;s<sp/>return<sp/>type<sp/>is</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\c<sp/>std::ostream&amp;.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>yes&amp;<sp/>whose<sp/>\c<sp/>sizeof()<sp/>equals<sp/>\c<sp/>sizeof(yes).</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a71a7c7338cfff03861b084e62c3308b1" kindref="member">yes</ref>&amp;<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a449972bfdc223eb1c1b73ca85fbbf0d2" kindref="member" tooltip="This function is matched only when there is a global operator&amp;lt;&amp;lt;() declared for type T because opera...">defined</ref>(<sp/>std::ostream&amp;<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>is<sp/>matched<sp/>only<sp/>when<sp/>the<sp/>dummy<sp/>\c<sp/>operator&lt;&lt;()<sp/>is<sp/>matched.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>no<sp/>whose<sp/>\c<sp/>sizeof()<sp/>equals<sp/>\c<sp/>sizeof(no).</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a02a523cf236289acec6640afe9070191" kindref="member">no</ref><sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a449972bfdc223eb1c1b73ca85fbbf0d2" kindref="member" tooltip="This function is matched only when there is a global operator&amp;lt;&amp;lt;() declared for type T because opera...">defined</ref>(<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a02a523cf236289acec6640afe9070191" kindref="member">no</ref><sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>implementation<sp/>class<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>determine<sp/>whether<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>*<sp/>type<sp/>\c<sp/>T<sp/>has<sp/>a<sp/>global<sp/>&lt;code&gt;std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;,T</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/>*<sp/>const&amp;)&lt;/code&gt;<sp/>defined<sp/>for<sp/>it.<sp/><sp/>However,<sp/>do<sp/>not<sp/>use<sp/>this<sp/>class<sp/>directly.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>type<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="134" refid="classzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1has__insertion__operator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1has__insertion__operator" kindref="compound" tooltip="The implementation class that can be used to determine whether a given type T has a global std::ostre...">has_insertion_operator</ref><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;s;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>\c<sp/>true<sp/>only<sp/>when<sp/>the<sp/>type<sp/>\c<sp/>T<sp/>has<sp/>a<sp/>global<sp/>\c<sp/>operator&lt;&lt;()</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>declared<sp/>for<sp/>it.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>\hideinitializer</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1has__insertion__operator_1a043cfc829783a905f8bb848fc021e5c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1_1has__insertion__operator_1a043cfc829783a905f8bb848fc021e5c3" kindref="member" tooltip="This is true only when the type T has a global operator&amp;lt;&amp;lt;() declared for it.">value</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a449972bfdc223eb1c1b73ca85fbbf0d2" kindref="member" tooltip="This function is matched only when there is a global operator&amp;lt;&amp;lt;() declared for type T because opera...">defined</ref>(<sp/>s<sp/>&lt;&lt;<sp/>t<sp/>)<sp/>)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a71a7c7338cfff03861b084e62c3308b1" kindref="member">yes</ref><sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>has_insertion_operator_impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>A<sp/>class<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>determine<sp/>whether<sp/>a<sp/>given<sp/>type<sp/>\c<sp/>T<sp/>has<sp/>a<sp/>global</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;,T<sp/>const&amp;)&lt;/code&gt;<sp/>defined<sp/>for</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>it.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>template&lt;typename<sp/>T&gt;<sp/>inline</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>typename<sp/>enable_if&lt;has_insertion_operator&lt;T&gt;::value,std::string&gt;::value</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>to_string(<sp/>T<sp/>const<sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/><sp/>//<sp/>case<sp/>where<sp/>T<sp/>has<sp/>operator&lt;&lt;(ostream&amp;,T<sp/>const&amp;)</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>type<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="164" refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator" kindref="compound">has_insertion_operator</ref><sp/>:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>has_insertion_operator_impl::<ref refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator" kindref="compound">has_insertion_operator</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal">};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment">//////////<sp/>c_str()<sp/>/////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="170"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>\c<sp/>char*<sp/>to<sp/>the<sp/>given<sp/>string.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>OutputStringType<sp/>The<sp/>string&apos;s<sp/>type.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>to<sp/>get<sp/>the<sp/>\c<sp/>char*<sp/>of.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>\c<sp/>char*.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="namespacezorba_1_1internal_1_1ztd_1aab6211f3f098e27c67a814d90ca66224" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringType::const_pointer<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1aab6211f3f098e27c67a814d90ca66224" kindref="member">c_str</ref>(<sp/>StringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.c_str();</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>global<sp/>c_str()<sp/>for<sp/>\c<sp/>char*<sp/>argument.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>C<sp/>string<sp/>to<sp/>get<sp/>the<sp/>\c<sp/>char*<sp/>of.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>\c<sp/>char*.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="namespacezorba_1_1internal_1_1ztd_1aa95677649ec420ff4d6d6d2f1d0a1cc8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1aab6211f3f098e27c67a814d90ca66224" kindref="member">c_str</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">//////////<sp/>destroy_delete<sp/>(for<sp/>unique_ptr)<sp/>////////////////////////////////////</highlight></codeline>
<codeline lineno="196"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>A<sp/>deleter<sp/>class<sp/>that<sp/>can<sp/>be<sp/>used<sp/>with<sp/>unique_ptr.<sp/><sp/>Instead<sp/>of<sp/>calling<sp/>\c</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>delete<sp/>on<sp/>the<sp/>pointed-to<sp/>object,<sp/>it<sp/>calls<sp/>its<sp/>\c<sp/>destroy()<sp/>member<sp/>function.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="202" refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete" kindref="compound" tooltip="A deleter class that can be used with unique_ptr.">destroy_delete</ref><sp/>{</highlight></codeline>
<codeline lineno="203" refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete_1af1fcc41a918a94ca12f39c5e3c92d759" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete_1af1fcc41a918a94ca12f39c5e3c92d759" kindref="member">destroy_delete</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Copy<sp/>constructor.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>U<sp/>The<sp/>delete<sp/>type<sp/>of<sp/>the<sp/>deleter<sp/>to<sp/>copy-construct<sp/>from<sp/>such<sp/>that</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\c<sp/>U*<sp/>is<sp/>convertible<sp/>to<sp/>\c<sp/>T*.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="212" refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete_1a845e441cee09c22ac33452061a8a31aa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete_1af1fcc41a918a94ca12f39c5e3c92d759" kindref="member">destroy_delete</ref>(<sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete" kindref="compound" tooltip="A deleter class that can be used with unique_ptr.">destroy_delete&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if</ref>&lt;ZORBA_TR1_NS::is_convertible&lt;U*,T*&gt;::value&gt;::<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">type</ref>*</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Calls<sp/>the<sp/>\c<sp/>destroy()<sp/>member<sp/>function<sp/>of<sp/>the<sp/>pointed-to<sp/>object.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete_1a13b0183a198704fe0c543f05f40f10d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1destroy__delete_1a13b0183a198704fe0c543f05f40f10d9" kindref="member" tooltip="Calls the destroy() member function of the pointed-to object.">operator()</ref>(<sp/>T<sp/>*p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;destroy();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal">};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment">//////////<sp/>less&lt;char<sp/>const*&gt;<sp/>///////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="231"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>declaration<sp/>exists<sp/>only<sp/>to<sp/>declare<sp/>that<sp/>less<sp/>is<sp/>a<sp/>template<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="structzorba_1_1internal_1_1ztd_1_1less" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzorba_1_1internal_1_1ztd_1_1less" kindref="compound">less</ref><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal">};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>Specialize<sp/>the<sp/>binary_function<sp/>&quot;less&quot;<sp/>so<sp/>that<sp/>C-style<sp/>strings<sp/>(char<sp/>const*)</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>will<sp/>work<sp/>properly<sp/>with<sp/>STL<sp/>containers.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>See<sp/>also:<sp/>Bjarne<sp/>Stroustrup.<sp/>&quot;The<sp/>C++<sp/>Programming<sp/>Language,<sp/>3rd<sp/>ed.&quot;</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>Addison-Wesley,<sp/>Reading,<sp/>MA,<sp/>1997.<sp/><sp/>p.<sp/>468.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="structzorba_1_1internal_1_1ztd_1_1less_3_01char_01const_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzorba_1_1internal_1_1ztd_1_1less" kindref="compound">less</ref>&lt;char<sp/>const*&gt;<sp/>:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>std::binary_function&lt;char<sp/>const*,char<sp/>const*,bool&gt;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247" refid="structzorba_1_1internal_1_1ztd_1_1less_3_01char_01const_01_5_01_4_1a3be1fc5409748a7fea2f4b959757fcc6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1less_3_01char_01const_01_5_01_4_1a3be1fc5409748a7fea2f4b959757fcc6" kindref="member">less</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>default<sp/>constructor<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>defined,<sp/>but<sp/>g++<sp/>complains<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>isn&apos;t<sp/>and<sp/>you<sp/>try<sp/>to<sp/>define<sp/>a<sp/>&quot;const<sp/>less&quot;<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>result_type</highlight></codeline>
<codeline lineno="252" refid="structzorba_1_1internal_1_1ztd_1_1less_3_01char_01const_01_5_01_4_1aa2919eb4490e517e9cbf99b14257fd8e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1less_3_01char_01const_01_5_01_4_1aa2919eb4490e517e9cbf99b14257fd8e" kindref="member">operator()</ref>(<sp/>first_argument_type<sp/>a,<sp/>second_argument_type<sp/>b<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::strcmp(<sp/>a,<sp/>b<sp/>)<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">//////////<sp/>To-string<sp/>conversion<sp/>////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="258"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a34d4a193ceda163e3932f95fa5ce2265" kindref="member">ZORBA_DECL_HAS_MEM_FN</ref>(<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1aab6211f3f098e27c67a814d90ca66224" kindref="member">c_str</ref><sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a34d4a193ceda163e3932f95fa5ce2265" kindref="member">ZORBA_DECL_HAS_MEM_FN</ref>(<sp/>str<sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a34d4a193ceda163e3932f95fa5ce2265" kindref="member">ZORBA_DECL_HAS_MEM_FN</ref>(<sp/>toString<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>Short-hand<sp/>macro<sp/>for<sp/>use<sp/>with<sp/>enable_if<sp/>to<sp/>determine<sp/>whether<sp/>the<sp/>given<sp/>type</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>has<sp/>a<sp/>member<sp/>function<sp/>with<sp/>the<sp/>signature</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;char<sp/>const*<sp/>(T::*)()<sp/>const&lt;/code&gt;.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>\hideinitializer</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_HAS_C_STR(T)<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/>::zorba::internal::ztd::has_c_str&lt;T,char<sp/>const*<sp/>(T::*)()<sp/>const&gt;::value</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>Short-hand<sp/>macro<sp/>for<sp/>use<sp/>with<sp/>enable_if<sp/>to<sp/>determine<sp/>whether<sp/>the<sp/>given<sp/>type</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>is<sp/>a<sp/>class<sp/>having<sp/>an<sp/>API<sp/>matching<sp/>std::string.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>\hideinitializer</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="ztd_8h_1a0958a26ba5538590ef945f07a2251f2d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_IS_STRING(T)<sp/>ZORBA_HAS_C_STR(T)</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>Tests<sp/>whether<sp/>a<sp/>given<sp/>type<sp/>\a<sp/>T<sp/>is<sp/>a<sp/>C<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>type<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="288" refid="classzorba_1_1internal_1_1ztd_1_1is__c__string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1ztd_1_1is__c__string" kindref="compound">is_c_string</ref><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::remove_pointer&lt;T&gt;::type</ref><sp/>T_base;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::add_const&lt;T_base&gt;::type</ref><sp/>T_base_const;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="292" refid="classzorba_1_1internal_1_1ztd_1_1is__c__string_1a37283ba9ba69b4df7d8b75a640829453" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1is__c__string_1a37283ba9ba69b4df7d8b75a640829453" kindref="member">value</ref><sp/>=</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZORBA_TR1_NS::is_same&lt;T_base_const*,char<sp/>const*&gt;::value</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>ZORBA_TR1_NS::is_same&lt;T_base_const*,unsigned<sp/>char<sp/>const*&gt;::value</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>ZORBA_TR1_NS::is_same&lt;T_base_const*,signed<sp/>char<sp/>const*&gt;::value;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>Converts<sp/>an<sp/>object<sp/>to<sp/>its<sp/>string<sp/>representation.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>object<sp/>type<sp/>that:</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>is<sp/>not<sp/>an<sp/>array</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>is<sp/>not<sp/>a<sp/>pointer</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>an<sp/>&lt;code&gt;ostream&amp;<sp/>operator&amp;lt;&amp;lt;(ostream&amp;,T<sp/>const&amp;)&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@param<sp/>t<sp/>The<sp/>object.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;!ZORBA_TR1_NS::is_array&lt;T&gt;::value</ref></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!ZORBA_TR1_NS::is_pointer&lt;T&gt;::value</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structzorba_1_1internal_1_1ztd_1_1has__insertion__operator" kindref="compound">has_insertion_operator&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="314" refid="namespacezorba_1_1internal_1_1ztd_1aa00785de2ef579d23b02fc8c8c3cba8f" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>o;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>o<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o.str();</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="320"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>\c<sp/>to_string()<sp/>for<sp/>class<sp/>types<sp/>that<sp/>have<sp/>a<sp/>\c<sp/>c_str()</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>member<sp/>function,<sp/>i.e.,<sp/>string<sp/>types.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>class<sp/>type<sp/>that:</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>no<sp/>&lt;code&gt;ostream&amp;<sp/>operator&amp;lt;&amp;lt;(ostream&amp;,T<sp/>const&amp;)&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>&lt;code&gt;char<sp/>const*<sp/>T::c_str()<sp/>const&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@param<sp/>t<sp/>The<sp/>object.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;!has_insertion_operator&lt;T&gt;::value</ref></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(T),</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.c_str();</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>\c<sp/>to_string()<sp/>for<sp/>class<sp/>types<sp/>that<sp/>have<sp/>a<sp/>\c<sp/>str()</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>member<sp/>function.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>class<sp/>type<sp/>that:</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>no<sp/>&lt;code&gt;ostream&amp;<sp/>operator&amp;lt;&amp;lt;(ostream&amp;,T<sp/>const&amp;)&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>no<sp/>&lt;code&gt;char<sp/>const*<sp/>T::c_str()<sp/>const&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>no<sp/>&lt;code&gt;std::string<sp/>T::toString()<sp/>const&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>&lt;code&gt;std::string<sp/>T::str()<sp/>const&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@param<sp/>t<sp/>The<sp/>object.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;!has_insertion_operator&lt;T&gt;::value</ref></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!<ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(T)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>has_str&lt;T,std::string<sp/>(T::*)()<sp/>const&gt;::value</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!has_toString&lt;T,std::string<sp/>(T::*)()<sp/>const&gt;::value,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="358" refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.str();</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>\c<sp/>to_string()<sp/>for<sp/>class<sp/>types<sp/>that<sp/>have<sp/>a<sp/>\c<sp/>toString()</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>member<sp/>function.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>class<sp/>type<sp/>that:</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>no<sp/>&lt;code&gt;ostream&amp;<sp/>operator&amp;lt;&amp;lt;(ostream&amp;,T<sp/>const&amp;)&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>no<sp/>&lt;code&gt;char<sp/>const*<sp/>T::c_str()<sp/>const&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>no<sp/>&lt;code&gt;std::string<sp/>T::str()<sp/>const&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>&lt;code&gt;std::string<sp/>T::toString()<sp/>const&lt;/code&gt;<sp/>defined</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/>@param<sp/>t<sp/>The<sp/>object.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;!has_insertion_operator&lt;T&gt;::value</ref></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!<ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(T)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!has_str&lt;T,std::string<sp/>(T::*)()<sp/>const&gt;::value</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>has_toString&lt;T,std::string<sp/>(T::*)()<sp/>const&gt;::value,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.toString();</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="385"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>\c<sp/>to_string()<sp/>for<sp/>pointer<sp/>types<sp/>other<sp/>than<sp/>C<sp/>strings.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointer<sp/>type.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>The<sp/>pointer.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>\a<sp/>p<sp/>is<sp/>not<sp/>\c<sp/>NULL,<sp/>returns<sp/>the<sp/>result<sp/>of<sp/>\c<sp/>to_string(*p);</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>otherwise<sp/>returns<sp/>\c<sp/>&quot;&lt;null&gt;&quot;.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_TR1_NS::is_pointer&lt;T&gt;::value</ref></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!is_c_string&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="398" refid="namespacezorba_1_1internal_1_1ztd_1a1f5944573fe9f2c47c421a6cc54b2044" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/>T<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::remove_pointer&lt;T&gt;::type</ref><sp/>T_base;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::add_const&lt;T_base&gt;::type</ref><sp/>T_base_const;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>?<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/>*static_cast&lt;T_base_const*&gt;(<sp/>p<sp/>)<sp/>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&lt;null&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>\c<sp/>to_string()<sp/>for<sp/>C<sp/>strings.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>C<sp/>string.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="namespacezorba_1_1internal_1_1ztd_1a5cbe42061080109de9dd887ad8b23eb9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>?<sp/>s<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&lt;null&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="415"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>\c<sp/>to_string()<sp/>for<sp/>C<sp/>strings.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>C<sp/>string.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="namespacezorba_1_1internal_1_1ztd_1a223c8dc477c8907589e714b6ee7bdbc5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacezorba_1_1internal_1_1ztd_1a85da7d6ba8de0c23e2346189a73adc29" kindref="member">to_string</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>?<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>s<sp/>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&lt;null&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment">//////////<sp/>misc<sp/>///////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="427"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>Helper<sp/>class<sp/>for<sp/>implementing<sp/>a<sp/>solution<sp/>to<sp/>the<sp/>&quot;explicit<sp/>bool<sp/>conversion&quot;</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>problem.<sp/><sp/>The<sp/>canonical<sp/>use<sp/>is<sp/>of<sp/>the<sp/>form:</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/><sp/>class<sp/>your_class<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>operator<sp/>explicit_bool::type()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>explicit_bool::value_of(<sp/>some_expression<sp/>);</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/><sp/>};</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>See:<sp/>http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2333.html</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool" kindref="compound" tooltip="Helper class for implementing a solution to the &amp;quot;explicit bool conversion&amp;quot; problem.">explicit_bool</ref><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pointer_conversion<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valid;<sp/>};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="445" refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1ab08b6a8cca116a821466cd89be17c658" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointer_conversion::*<ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1ab08b6a8cca116a821466cd89be17c658" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>explicit<sp/>\c<sp/>bool<sp/>value<sp/>for<sp/>\c<sp/>false.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>value.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a2a3186ef069ce19c3088acd531a28328" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1ab08b6a8cca116a821466cd89be17c658" kindref="member">type</ref><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a2a3186ef069ce19c3088acd531a28328" kindref="member" tooltip="Gets the explicit bool value for false.">false_value</ref>()<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>explicit<sp/>\c<sp/>bool<sp/>value<sp/>for<sp/>\c<sp/>true.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>value.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a3b848c4664d0826b2b280e5f36a15eab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1ab08b6a8cca116a821466cd89be17c658" kindref="member">type</ref><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a3b848c4664d0826b2b280e5f36a15eab" kindref="member" tooltip="Gets the explicit bool value for true.">true_value</ref>()<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;pointer_conversion::valid;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Converts<sp/>the<sp/>given<sp/>value<sp/>to<sp/>an<sp/>explicit<sp/>\c<sp/>bool<sp/>value.</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>type<sp/>of<sp/>the<sp/>value<sp/>to<sp/>convert.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>value<sp/>The<sp/>value<sp/>to<sp/>convert.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Return<sp/>said<sp/>value.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_TR1_NS::is_convertible&lt;T,bool&gt;::value</ref>,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1ab08b6a8cca116a821466cd89be17c658" kindref="member">type</ref>&gt;<ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1ab08b6a8cca116a821466cd89be17c658" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="475" refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a936d0a29441bd9af878af913d3ff3a10" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a936d0a29441bd9af878af913d3ff3a10" kindref="member" tooltip="Converts the given value to an explicit bool value.">value_of</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>template<sp/>here<sp/>eliminates<sp/>a<sp/>MSVC++<sp/>4800<sp/>warning:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;forcing<sp/>value<sp/>to<sp/>&apos;true&apos;<sp/>or<sp/>&apos;false&apos;<sp/>(performance<sp/>warning)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>?<sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a3b848c4664d0826b2b280e5f36a15eab" kindref="member" tooltip="Gets the explicit bool value for true.">true_value</ref>()<sp/>:<sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a2a3186ef069ce19c3088acd531a28328" kindref="member" tooltip="Gets the explicit bool value for false.">false_value</ref>();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">};</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="484"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="485"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ztd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_INTERNAL_ZTD_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/internal/ztd.h"/>
  </compounddef>
</doxygen>
