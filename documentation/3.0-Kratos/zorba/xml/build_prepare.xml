<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="build_prepare" kind="page">
    <compoundname>build_prepare</compoundname>
    <title>Preparing to Build Zorba</title>
    <detaileddescription>
<para>The following outlines the common steps for building Zorba once the required and optional tools and libraries (as described in <ref refid="build_prerequisites" kindref="compound">Prerequisites for Building Zorba</ref>) have been installed.</para><sect1 id="build_prepare_1build_gettingsrc">
<title>Getting the Zorba Source Code</title>
<para>You may get the Zorba source code in one of two ways: downloading a released source distribution, or getting the code from our Launchpad code repository. The directory that the Zorba source code is placed into will be referred to as <computeroutput>{ZORBASRC}</computeroutput> in later instructions.</para><sect2 id="build_prepare_1download_source">
<title>Getting a Source Code Release</title>
<para>You may download the latest Zorba release source code as either a <bold>.zip</bold> or <bold>.tar.gz</bold> file from Launchpad: <ulink url="https://launchpad.net/zorba/+download">https://launchpad.net/zorba/+download</ulink> .</para></sect2>
<sect2 id="build_prepare_1checkout_source">
<title>Getting the Latest Code from Launchpad</title>
<para>If you want the very latest and greatest Zorba source, you can check out our source code trunk from our Launchpad repository. This is actually a pretty &quot;safe&quot; option, compared to many projects, as Zorba attempts to enforce a &quot;trunk is always releasable&quot; policy through extensive regression testing on every trunk checkin.</para><para>Launchpad uses the Bazaar distributed version control system from Canonical, the producers of Ubuntu Linux and Launchpad. So you will need to install Bazaar in order to check out our code repositories. Installers are available from Canonical&apos;s website, <ulink url="http://bazaar.canonical.com/">http://bazaar.canonical.com/</ulink> . Bazaar packages are also available for all Linux distributions (the package name may be &quot;bazaar&quot; or &quot;bzr&quot;), and in Macports for MacOS X.</para><para>Once you have Bazaar installed, check out the Zorba trunk:</para><para><programlisting><codeline><highlight class="normal">bzr<sp/>checkout<sp/>--lightweight<sp/>lp:zorba</highlight></codeline>
</programlisting></para></sect2>
</sect1>
<sect1 id="build_prepare_1noncore_download">
<title>Downloading source code for non-core modules</title>
<para>Zorba offers a number of optional (&quot;non-core&quot;) modules which provide additional functionality; see <ref refid="modules_top_1non_core_modules" kindref="member">Non-core Modules</ref> for a list. When you build Zorba, you may also build any non-core modules at the same time, and these modules will then be available in your Zorba installation.</para><para>Currently, the Zorba team does not provide source downloads for the non-core modules. However, there is a simple CMake script inside Zorba which will allow you to check out these modules from source control easily. Note that this requires having the Bazaar utility available on your system; see <ref refid="build_prepare_1checkout_source" kindref="member">Getting the Latest Code from Launchpad</ref> for more information.</para><para>From your {ZORBASRC} directory, type <programlisting><codeline><highlight class="normal"><sp/><sp/>cmake<sp/>-Doutdir=../zorba_modules<sp/>-Dmodname=NAME<sp/>-P<sp/>modules/DownloadModules.cmake</highlight></codeline>
</programlisting></para><para>to download the particular module package NAME (see <ref refid="modules_top_1non_core_modules" kindref="member">Non-core Modules</ref> for a complete list of module packages and their contents), or</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>cmake<sp/>-Doutdir=../zorba_modules<sp/>-Dallmodules=1<sp/>-P<sp/>modules/DownloadModules.cmake</highlight></codeline>
</programlisting></para><para>to download all the modules. (On Windows, you will need to use backslashes instead of forward slashes in the above paths.)</para><para>This will place the downloaded module source code in the directory <computeroutput>../zorba_modules</computeroutput>, which is where the Zorba build will look for them by default. If you wish to download them to some other location, you may do so; in that case, when you configure the Zorba build with CMake, provide the <computeroutput>-DZORBA_MODULES_DIR=/full/path/to/modules</computeroutput> argument.</para><para><simplesect kind="note"><para>Please note that some of these modules depend on other modules. Most notably, the EXPath http-client module (in the <ulink url="/modules/latest/expath.org/ns/http-client">http-client</ulink> module package) depends on the <ulink url="/modules/latest/www.zorba-xquery.com/modules/converters/html">html</ulink> module, which is in the <bold>data-converters</bold> module package. So, if you download the <bold>http-client</bold> package, you must also download the <bold>data-converters</bold> package (and ensure that <ulink url="http://tidy.sourceforge.net/">libtidy</ulink> is installed; see <ref refid="build_prerequisites_1noncore_requirements" kindref="member">Non-core Module Requirements</ref>). </para><simplesectsep/><para>Please see our <ulink url="/images/doxygen/modules.svg">module-interdependency graph</ulink> for details.</para></simplesect>
</para></sect1>
<sect1 id="build_prepare_1create_build_dir">
<title>Creating a Build Directory</title>
<para>Zorba requires an <ulink url="http://www.cmake.org/Wiki/CMake_FAQ#What_is_an_.22out-of-source.22_build.3F">out-of-source build</ulink>, which means you need to create a separate (empty) build directory. A common convention is to create a directory named <bold>&quot;build&quot;</bold> in the Zorba source directory, but you may name it and place it anywhere you like. We refer to this directory as <computeroutput>{ZORBABUILD}</computeroutput> in the following steps.</para></sect1>
<sect1 id="build_prepare_1prepare_next">
<title>What&apos;s next?</title>
<para>Now, go on to <ref refid="configure_zorba" kindref="compound">Configuring a Zorba Build Using CMake</ref>. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
