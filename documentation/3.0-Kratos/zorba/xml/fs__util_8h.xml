<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="fs__util_8h" kind="file">
    <compoundname>fs_util.h</compoundname>
    <includes local="no">cctype</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">zorba/config.h</includes>
    <includes refid="cxx__util_8h" local="no">zorba/internal/cxx_util.h</includes>
    <includes refid="ztd_8h" local="no">zorba/internal/ztd.h</includes>
    <includes refid="error__util_8h" local="no">zorba/util/error_util.h</includes>
    <incdepgraph>
      <node id="1788">
        <label>functional</label>
      </node>
      <node id="1786">
        <label>zorba/internal/cxx_util.h</label>
        <link refid="cxx__util_8h"/>
        <childnode refid="1785" relation="include">
        </childnode>
      </node>
      <node id="1792">
        <label>zorba/util/error_util.h</label>
        <link refid="error__util_8h"/>
        <childnode refid="1785" relation="include">
        </childnode>
        <childnode refid="1786" relation="include">
        </childnode>
        <childnode refid="1790" relation="include">
        </childnode>
        <childnode refid="1787" relation="include">
        </childnode>
        <childnode refid="1793" relation="include">
        </childnode>
        <childnode refid="1794" relation="include">
        </childnode>
      </node>
      <node id="1793">
        <label>stdexcept</label>
      </node>
      <node id="1782">
        <label>string</label>
      </node>
      <node id="1790">
        <label>type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="1785" relation="include">
        </childnode>
        <childnode refid="1791" relation="include">
        </childnode>
      </node>
      <node id="1784">
        <label>sys/types.h</label>
      </node>
      <node id="1789">
        <label>sstream</label>
      </node>
      <node id="1794">
        <label>cerrno</label>
      </node>
      <node id="1779">
        <label>cctype</label>
      </node>
      <node id="1781">
        <label>iostream</label>
      </node>
      <node id="1787">
        <label>zorba/internal/ztd.h</label>
        <link refid="ztd_8h"/>
        <childnode refid="1780" relation="include">
        </childnode>
        <childnode refid="1788" relation="include">
        </childnode>
        <childnode refid="1789" relation="include">
        </childnode>
        <childnode refid="1782" relation="include">
        </childnode>
        <childnode refid="1785" relation="include">
        </childnode>
        <childnode refid="1786" relation="include">
        </childnode>
        <childnode refid="1790" relation="include">
        </childnode>
      </node>
      <node id="1778">
        <label>fs_util.h</label>
        <link refid="fs_util.h"/>
        <childnode refid="1779" relation="include">
        </childnode>
        <childnode refid="1780" relation="include">
        </childnode>
        <childnode refid="1781" relation="include">
        </childnode>
        <childnode refid="1782" relation="include">
        </childnode>
        <childnode refid="1783" relation="include">
        </childnode>
        <childnode refid="1784" relation="include">
        </childnode>
        <childnode refid="1785" relation="include">
        </childnode>
        <childnode refid="1786" relation="include">
        </childnode>
        <childnode refid="1787" relation="include">
        </childnode>
        <childnode refid="1792" relation="include">
        </childnode>
      </node>
      <node id="1791">
        <label>type_traits</label>
      </node>
      <node id="1785">
        <label>zorba/config.h</label>
      </node>
      <node id="1780">
        <label>cstring</label>
      </node>
      <node id="1783">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <innernamespace refid="namespacezorba_1_1fs">zorba::fs</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_FS_UTIL_API_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_FS_UTIL_API_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;dirent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>off_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cxx__util_8h" kindref="compound">zorba/internal/cxx_util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztd_8h" kindref="compound">zorba/internal/ztd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="error__util_8h" kindref="compound">zorba/util/error_util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="39" refid="namespacezorba_1_1fs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment">//////////<sp/>Exceptions<sp/>/////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="namespacezorba_1_1fs_1aa8105bb284bd6467038629d03be1f466" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1os__error_1_1exception" kindref="compound" tooltip="An exception is-a std::runtime_error for reporting errors with operating system or library functions...">os_error::exception</ref><sp/><ref refid="namespacezorba_1_1fs_1aa8105bb284bd6467038629d03be1f466" kindref="member">exception</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">//////////<sp/>constants<sp/>//////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a5c7737bfe572ccf85dd928a96bf4cb6f" kindref="member">path_separator</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1ad855b4fdcc6a7efb4cd2fac70adeda7b" kindref="member">newline</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="52" refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53" refid="namespacezorba_1_1fs_1a5c7737bfe572ccf85dd928a96bf4cb6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a5c7737bfe572ccf85dd928a96bf4cb6f" kindref="member">path_separator</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54" refid="namespacezorba_1_1fs_1ad855b4fdcc6a7efb4cd2fac70adeda7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1ad855b4fdcc6a7efb4cd2fac70adeda7b" kindref="member">newline</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">//////////<sp/>types<sp/>//////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>File<sp/>size<sp/>type.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__int64<sp/><ref refid="namespacezorba_1_1fs_1a446e28a0bf0f117168b81fbefc0865ea" kindref="member" tooltip="File size type.">size_type</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="65" refid="namespacezorba_1_1fs_1a446e28a0bf0f117168b81fbefc0865ea" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>off_t<sp/><ref refid="namespacezorba_1_1fs_1a446e28a0bf0f117168b81fbefc0865ea" kindref="member" tooltip="File size type.">size_type</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>File<sp/>type.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">type</ref><sp/>{</highlight></codeline>
<codeline lineno="72" refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22a637b277cc22bd780594a429a89474d33" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22a637b277cc22bd780594a429a89474d33" kindref="member">non_existent</ref>,</highlight></codeline>
<codeline lineno="73" refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22af89a5bc95208c01b9f59b3193d67a3f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22af89a5bc95208c01b9f59b3193d67a3f2" kindref="member">directory</ref>,</highlight></codeline>
<codeline lineno="74" refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref>,</highlight></codeline>
<codeline lineno="75" refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22af20e9b610b976e6d27b9c105c39b9dd0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22af20e9b610b976e6d27b9c105c39b9dd0" kindref="member">link</ref>,</highlight></codeline>
<codeline lineno="76" refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22a71fbdd6a7275a839c1d470ffe5a31827" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22a71fbdd6a7275a839c1d470ffe5a31827" kindref="member">volume</ref>,</highlight></codeline>
<codeline lineno="77" refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22a695149cd22831c06e408b1101e4075f1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22a695149cd22831c06e408b1101e4075f1" kindref="member">other</ref><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>named<sp/>pipe,<sp/>character/block<sp/>special,<sp/>socket,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>Emits<sp/>the<sp/>string<sp/>representation<sp/>of<sp/>a<sp/>file<sp/>type<sp/>to<sp/>the<sp/>given<sp/>ostream.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>The<sp/>ostream<sp/>to<sp/>emit<sp/>to.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>@param<sp/>t<sp/>The<sp/>file<sp/>type<sp/>to<sp/>emit.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\a<sp/>o.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="88"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespacezorba_1_1fs_1a9fd307e396205a949cd360d0bac02d17" kindref="member" tooltip="Emits the string representation of a file type to the given ostream.">operator&lt;&lt;</ref>(<sp/>std::ostream<sp/>&amp;o,<sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">type</ref><sp/>t<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment">//////////<sp/>Directory<sp/>//////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="91"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>current<sp/>directory.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>directory.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@throws<sp/>ZorbaException<sp/>with<sp/>a<sp/>diagnostic<sp/>of<sp/>zerr::ZOSE0004_IO_ERROR<sp/>if<sp/>it</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>fails.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="100"><highlight class="normal">std::string<sp/><ref refid="namespacezorba_1_1fs_1a6d54649caf5c90fa3714e5025507e1f6" kindref="member" tooltip="Gets the current directory.">curdir</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZORBA_WITH_FILE_ACCESS</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>Creates<sp/>a<sp/>directory.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>of<sp/>the<sp/>directory<sp/>to<sp/>create.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@param<sp/>intermediate<sp/>If<sp/>\c<sp/>true,<sp/>any<sp/>non-existent<sp/>directories<sp/>along<sp/>\a<sp/>path</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>are<sp/>also<sp/>created.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>if<sp/>the<sp/>creation<sp/>fails.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mkdir(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>intermediate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>Creates<sp/>a<sp/>directory.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>of<sp/>the<sp/>directory<sp/>to<sp/>create.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@param<sp/>intermediate<sp/>If<sp/>\c<sp/>true,<sp/>any<sp/>non-existent<sp/>directories<sp/>along<sp/>\a<sp/>path</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>are<sp/>also<sp/>created.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>if<sp/>the<sp/>creation<sp/>fails.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_HAS_C_STR(PathStringType),void&gt;::type</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal">mkdir(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>intermediate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>mkdir(<sp/>path.c_str(),<sp/>intermediate<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_WITH_FILE_ACCESS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">//////////<sp/>File<sp/>deletion<sp/>//////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZORBA_WITH_FILE_ACCESS</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>Removes<sp/>the<sp/>given<sp/>file<sp/>or<sp/>directory.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>of<sp/>the<sp/>file<sp/>or<sp/>directory<sp/>to<sp/>remove.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param<sp/>ignore_not_found<sp/>If<sp/>\c<sp/>true,<sp/>a<sp/>non-existant<sp/>\a<sp/>path<sp/>will<sp/>not<sp/>throw<sp/>an</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>exception.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>if<sp/>removal<sp/>succeeds<sp/>and<sp/>\c<sp/>false<sp/>if<sp/>it<sp/>fails<sp/>and</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>\a<sp/>ignore_not_found<sp/>is<sp/>\c<sp/>true.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>if<sp/>the<sp/>removal<sp/>fails<sp/>unless<sp/>\a<sp/>path<sp/>is<sp/>non-existant</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>and<sp/>\a<sp/>ignore_not_found<sp/>is<sp/>\c<sp/>true.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_not_found<sp/>=<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>Removes<sp/>the<sp/>given<sp/>file<sp/>or<sp/>directory.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>of<sp/>the<sp/>file<sp/>or<sp/>directory<sp/>to<sp/>remove.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>@param<sp/>ignore_not_found<sp/>If<sp/>\c<sp/>true,<sp/>a<sp/>non-existant<sp/>\a<sp/>path<sp/>will<sp/>not<sp/>throw<sp/>an</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>exception.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>if<sp/>removal<sp/>succeeds<sp/>and<sp/>\c<sp/>false<sp/>if<sp/>it<sp/>fails<sp/>and</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>\a<sp/>ignore_not_found<sp/>is<sp/>\c<sp/>true.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>if<sp/>the<sp/>removal<sp/>fails<sp/>unless<sp/>\a<sp/>path<sp/>is<sp/>non-existant</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>and<sp/>\a<sp/>ignore_not_found<sp/>is<sp/>\c<sp/>true.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_HAS_C_STR(PathStringType),bool&gt;::type</ref></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_not_found<sp/>=<sp/>false<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<sp/>path.c_str(),<sp/>ignore_not_found<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_WITH_FILE_ACCESS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment">//////////<sp/>File<sp/>information<sp/>///////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>Checks<sp/>whether<sp/>the<sp/>given<sp/>path<sp/>is<sp/>an<sp/>absolute<sp/>path.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>path<sp/>is<sp/>absolute.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="namespacezorba_1_1fs_1a8f7fb962c78c731ab7f8ca4463a1f5bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a8f7fb962c78c731ab7f8ca4463a1f5bf" kindref="member" tooltip="Checks whether the given path is an absolute path.">is_absolute</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No,<sp/>this<sp/>should<sp/>NOT<sp/>also<sp/>check<sp/>for<sp/>&apos;/&apos;.<sp/><sp/>The<sp/>path<sp/>should<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normalized<sp/>for<sp/>Windows<sp/>first,<sp/>i.e.,<sp/>have<sp/>&apos;/&apos;<sp/>replaced<sp/>by<sp/>&apos;\&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isalpha(<sp/>path[0]<sp/>)<sp/>&amp;&amp;<sp/>path[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>path[2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>Checks<sp/>whether<sp/>the<sp/>given<sp/>path<sp/>is<sp/>an<sp/>absolute<sp/>path.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>path<sp/>is<sp/>absolute.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_HAS_C_STR(PathStringType),bool&gt;::type</ref></highlight></codeline>
<codeline lineno="199" refid="namespacezorba_1_1fs_1a3581ed2625a379f3facc309714efcabe" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a8f7fb962c78c731ab7f8ca4463a1f5bf" kindref="member" tooltip="Checks whether the given path is an absolute path.">is_absolute</ref>(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a8f7fb962c78c731ab7f8ca4463a1f5bf" kindref="member" tooltip="Checks whether the given path is an absolute path.">is_absolute</ref>(<sp/>path.c_str()<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>base<sp/>name<sp/>of<sp/>the<sp/>given<sp/>path<sp/>name,<sp/>i.e.,<sp/>the<sp/>file<sp/>name<sp/>without<sp/>the</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>path<sp/>leading<sp/>up<sp/>to<sp/>it.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>get<sp/>the<sp/>base<sp/>name<sp/>of.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>the<sp/>base<sp/>name.<sp/><sp/>Note<sp/>that<sp/>if<sp/>\a<sp/>path<sp/>is<sp/>just<sp/>a<sp/>file<sp/>name,</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>then<sp/>returns<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="namespacezorba_1_1fs_1a1c6f80ccdcd89d5ebd1056ed128740e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><ref refid="namespacezorba_1_1fs_1a1c6f80ccdcd89d5ebd1056ed128740e5" kindref="member" tooltip="Gets the base name of the given path name, i.e., the file name without the path leading up to it...">base_name</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sep<sp/>=<sp/>std::strrchr(<sp/>path,<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sep<sp/>&amp;&amp;<sp/>sep[1]<sp/>?<sp/>sep<sp/>+<sp/>1<sp/>:<sp/>path;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>base<sp/>name<sp/>of<sp/>the<sp/>given<sp/>path<sp/>name,<sp/>i.e.,<sp/>the<sp/>file<sp/>name<sp/>without<sp/>the</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>path<sp/>leading<sp/>up<sp/>to<sp/>it.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>get<sp/>the<sp/>base<sp/>name<sp/>of.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>the<sp/>base<sp/>name.<sp/><sp/>If<sp/>\a<sp/>path<sp/>is<sp/>just<sp/>a<sp/>file<sp/>name,<sp/>returns</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_IS_STRING(PathStringType),PathStringType&gt;::type</ref></highlight></codeline>
<codeline lineno="227" refid="namespacezorba_1_1fs_1a3d6dea2cbaf239df4871df0d3799e4bd" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a1c6f80ccdcd89d5ebd1056ed128740e5" kindref="member" tooltip="Gets the base name of the given path name, i.e., the file name without the path leading up to it...">base_name</ref>(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1base64_1ad04b7fb8662aed83c48a9a87ae49aa88" kindref="member">PathStringType::size_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>path.rfind(<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos<sp/>!=<sp/>PathStringType::npos<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/>path.size()<sp/>-<sp/>1<sp/>?</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>path.substr(<sp/>pos<sp/>+<sp/>1<sp/>)<sp/>:<sp/>path;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>directory<sp/>name<sp/>of<sp/>the<sp/>given<sp/>path<sp/>name,<sp/>i.e.,<sp/>the<sp/>path<sp/>up<sp/>to<sp/>but<sp/>not</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>including<sp/>the<sp/>last<sp/>path<sp/>component.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>path<sp/>to<sp/>get<sp/>the<sp/>directory<sp/>name<sp/>of.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>the<sp/>direcory<sp/>path.<sp/><sp/>If<sp/>\a<sp/>path<sp/>is<sp/>just<sp/>a<sp/>file<sp/>name,<sp/>returns</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;&apos;.&apos;&lt;/code&gt;.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="namespacezorba_1_1fs_1a14a3314ca40055f7af30b3fd02ea5af4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacezorba_1_1fs_1a14a3314ca40055f7af30b3fd02ea5af4" kindref="member" tooltip="Gets the directory name of the given path name, i.e., the path up to but not including the last path ...">dir_name</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sep<sp/>=<sp/>std::strrchr(<sp/>path,<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sep<sp/>==<sp/>path<sp/>?</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string(<sp/>1,<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>)<sp/>:<sp/>std::string(<sp/>path,<sp/>sep<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>directory<sp/>name<sp/>of<sp/>the<sp/>given<sp/>path<sp/>name,<sp/>i.e.,<sp/>the<sp/>path<sp/>up<sp/>to<sp/>but<sp/>not</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>including<sp/>the<sp/>last<sp/>path<sp/>component.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>path<sp/>to<sp/>get<sp/>the<sp/>directory<sp/>name<sp/>of.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>the<sp/>direcory<sp/>path.<sp/><sp/>If<sp/>\a<sp/>path<sp/>is<sp/>just<sp/>a<sp/>file<sp/>name,<sp/>returns</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;&apos;.&apos;&lt;/code&gt;.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_IS_STRING(PathStringType),PathStringType&gt;::type</ref></highlight></codeline>
<codeline lineno="259" refid="namespacezorba_1_1fs_1adc6f740266e5be1d72924744b306d435" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a14a3314ca40055f7af30b3fd02ea5af4" kindref="member" tooltip="Gets the directory name of the given path name, i.e., the path up to but not including the last path ...">dir_name</ref>(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1base64_1ad04b7fb8662aed83c48a9a87ae49aa88" kindref="member">PathStringType::size_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>path.rfind(<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>==<sp/>PathStringType::npos<sp/>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PathStringType(<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>==<sp/>0<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.,<sp/>/foo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PathStringType(<sp/>1,<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>==<sp/>2<sp/>&amp;&amp;<sp/><ref refid="namespacezorba_1_1fs_1a8f7fb962c78c731ab7f8ca4463a1f5bf" kindref="member" tooltip="Checks whether the given path is an absolute path.">is_absolute</ref>(<sp/>path<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path.substr(<sp/>0,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path.substr(<sp/>0,<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZORBA_WITH_FILE_ACCESS</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>File<sp/>information<sp/>for<sp/>use<sp/>with<sp/>get_type().</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">info<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>time_t<sp/><sp/><sp/><sp/>mtime;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>file&apos;s<sp/>last<sp/>modification<sp/>time<sp/>(in<sp/>seconds<sp/>since<sp/>epoch)</highlight></codeline>
<codeline lineno="279"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a446e28a0bf0f117168b81fbefc0865ea" kindref="member" tooltip="File size type.">size_type</ref><sp/>size;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>file&apos;s<sp/>size<sp/>in<sp/>bytes</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">fs::type</ref><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">type</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>file&apos;s<sp/>type</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>type<sp/>of<sp/>the<sp/>given<sp/>file.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@param<sp/>follow_symlink<sp/>If<sp/>\c<sp/>true,<sp/>follows<sp/>symbolic<sp/>links.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@param<sp/>pinfo<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>receive<sp/>file<sp/>information,<sp/>or<sp/>\c<sp/>null.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>\a<sp/>path<sp/>refers<sp/>to<sp/>a<sp/>symbolic<sp/>link<sp/>and<sp/>\a<sp/>follow_symlink<sp/>is</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>\c<sp/>true,<sp/>the<sp/>type<sp/>returned<sp/>is<sp/>of<sp/>that<sp/>to<sp/>which<sp/>the<sp/>link<sp/>refers;<sp/>if<sp/>\a<sp/>path</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>refers<sp/>to<sp/>a<sp/>symbolic<sp/>and<sp/>\a<sp/>follow_symlink<sp/>is<sp/>\c<sp/>false,<sp/>returns<sp/>\c<sp/>link;<sp/>if</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>\a<sp/>path<sp/>does<sp/>not<sp/>refer<sp/>to<sp/>a<sp/>symbolic<sp/>link,<sp/>returns<sp/>the<sp/>type<sp/>of<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>for<sp/>typical<sp/>failures<sp/>(file<sp/>not<sp/>found,<sp/>invalid<sp/>path,</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>permission<sp/>denied,<sp/>etc).</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@throws<sp/>ZorbaException<sp/>with<sp/>a<sp/>diagnostic<sp/>of<sp/>zerr::ZOSE0004_IO_ERROR<sp/>for</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>unrecoverable<sp/>failures.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">type</ref><sp/>get_type(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>follow_symlink,<sp/>info<sp/>*pinfo<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>type<sp/>of<sp/>the<sp/>given<sp/>file.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@param<sp/>pinfo<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>receive<sp/>file<sp/>information,<sp/>or<sp/>\c<sp/>null.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>\a<sp/>path<sp/>refers<sp/>to<sp/>a<sp/>symbolic<sp/>link,<sp/>the<sp/>type<sp/>returned<sp/>is<sp/>of<sp/>that</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>to<sp/>which<sp/>the<sp/>link<sp/>refers;<sp/>if<sp/>\a<sp/>path<sp/>does<sp/>not<sp/>refer<sp/>to<sp/>a<sp/>symbolic<sp/>link,</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>returns<sp/>the<sp/>type<sp/>of<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>for<sp/>typical<sp/>failures<sp/>(file<sp/>not<sp/>found,<sp/>invalid<sp/>path,</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>permission<sp/>denied,<sp/>etc).</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@throws<sp/>ZorbaException<sp/>with<sp/>a<sp/>diagnostic<sp/>of<sp/>zerr::ZOSE0004_IO_ERROR<sp/>for</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>unrecoverable<sp/>failures.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">type</ref><sp/>get_type(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path,<sp/>info<sp/>*pinfo<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_type(<sp/>path,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pinfo<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>type<sp/>of<sp/>the<sp/>given<sp/>file.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@param<sp/>follow_symlink<sp/>If<sp/>\c<sp/>true,<sp/>follows<sp/>symbolic<sp/>links.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@param<sp/>pinfo<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>receive<sp/>file<sp/>information,<sp/>or<sp/>\c<sp/>null.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>\a<sp/>path<sp/>refers<sp/>to<sp/>a<sp/>symbolic<sp/>link<sp/>and<sp/>\a<sp/>follow_symlink<sp/>is</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>\c<sp/>true,<sp/>the<sp/>type<sp/>returned<sp/>is<sp/>of<sp/>that<sp/>to<sp/>which<sp/>the<sp/>link<sp/>refers;<sp/>if<sp/>\a<sp/>path</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>refers<sp/>to<sp/>a<sp/>symbolic<sp/>and<sp/>\a<sp/>follow_symlink<sp/>is<sp/>\c<sp/>false,<sp/>returns<sp/>\c<sp/>link;<sp/>if</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>\a<sp/>path<sp/>does<sp/>not<sp/>refer<sp/>to<sp/>a<sp/>symbolic<sp/>link,<sp/>returns<sp/>the<sp/>type<sp/>of<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>for<sp/>typical<sp/>failures<sp/>(file<sp/>not<sp/>found,<sp/>invalid<sp/>path,</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>permission<sp/>denied,<sp/>etc).</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@throws<sp/>ZorbaException<sp/>with<sp/>a<sp/>diagnostic<sp/>of<sp/>zerr::ZOSE0004_IO_ERROR<sp/>for</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>unrecoverable<sp/>failures.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_HAS_C_STR(PathStringType),type&gt;::type</ref></highlight></codeline>
<codeline lineno="336"><highlight class="normal">get_type(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>follow_symlink,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info<sp/>*pinfo<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_type(<sp/>path.c_str(),<sp/>follow_symlink,<sp/>pinfo<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>type<sp/>of<sp/>the<sp/>given<sp/>file.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>@param<sp/>pinfo<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>receive<sp/>file<sp/>information,<sp/>or<sp/>\c<sp/>null.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>@return<sp/>If<sp/>\a<sp/>path<sp/>refers<sp/>to<sp/>a<sp/>symbolic<sp/>link,<sp/>the<sp/>type<sp/>returned<sp/>is<sp/>of<sp/>that</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>to<sp/>which<sp/>the<sp/>link<sp/>refers;<sp/>if<sp/>\a<sp/>path<sp/>does<sp/>not<sp/>refer<sp/>to<sp/>a<sp/>symbolic<sp/>link,</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>returns<sp/>the<sp/>type<sp/>of<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@throws<sp/>fs::exception<sp/>for<sp/>typical<sp/>failures<sp/>(file<sp/>not<sp/>found,<sp/>invalid<sp/>path,</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>permission<sp/>denied,<sp/>etc).</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@throws<sp/>ZorbaException<sp/>with<sp/>a<sp/>diagnostic<sp/>of<sp/>zerr::ZOSE0004_IO_ERROR<sp/>for</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>unrecoverable<sp/>failures.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_HAS_C_STR(PathStringType),type&gt;::type</ref></highlight></codeline>
<codeline lineno="357"><highlight class="normal">get_type(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path,<sp/>info<sp/>*pinfo<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_type(<sp/>path.c_str(),<sp/>pinfo<sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_WITH_FILE_ACCESS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment">//////////<sp/>Directory<sp/>iteration<sp/>////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZORBA_WITH_FILE_ACCESS</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>An<sp/>%fs::iterator<sp/>iterates<sp/>over<sp/>the<sp/>entries<sp/>in<sp/>a<sp/>directory.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ZORBA_DLL_PUBLIC<sp/>iterator<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Information<sp/>for<sp/>a<sp/>directory<sp/>entry.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">entry<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">fs::type</ref><sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">type</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>an<sp/>%iterator.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>the<sp/>directory<sp/>to<sp/>iterate<sp/>over.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throws<sp/>fs::exception<sp/>if<sp/>the<sp/>construction<sp/>failed,<sp/>e.g.,<sp/>path<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>iterator(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path<sp/>)<sp/>:<sp/>dir_path_(<sp/>path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>ctor_impl();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>an<sp/>%iterator.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>full<sp/>path<sp/>to<sp/>the<sp/>directory<sp/>to<sp/>iterate<sp/>over.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throws<sp/>fs::exception<sp/>if<sp/>the<sp/>construction<sp/>failed,<sp/>e.g.,<sp/>path<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>iterator(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if</ref>&lt;<ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(PathStringType)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::<ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">type</ref>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>dir_path_(<sp/>path.<ref refid="namespacezorba_1_1internal_1_1ztd_1aab6211f3f098e27c67a814d90ca66224" kindref="member">c_str</ref>()<sp/>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>ctor_impl();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Destroys<sp/>this<sp/>%iterator.</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>~iterator();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Attempts<sp/>to<sp/>get<sp/>the<sp/>next<sp/>directory<sp/>entry.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>there<sp/>is<sp/>a<sp/>next<sp/>directory.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>current<sp/>directory<sp/>entry.<sp/><sp/>The<sp/>entry<sp/>is<sp/>undefined<sp/>unless<sp/>next()</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/>*<sp/>returned<sp/>\c<sp/>true.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>entry.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>entry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry_;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>current<sp/>directory<sp/>entry.<sp/><sp/>The<sp/>entry<sp/>is<sp/>undefined<sp/>unless<sp/>next()</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/>*<sp/>returned<sp/>\c<sp/>true.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>entry.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>entry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>operator-&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;entry_;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>directory&apos;s<sp/>path.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>path.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>path()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dir_path_.c_str();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Resets<sp/>this<sp/>iterator<sp/>to<sp/>the<sp/>beginning.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>std::string<sp/>dir_path_;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>entry<sp/>entry_;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>DIR<sp/>*dir_;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>HANDLE<sp/>dir_;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dir_is_empty_;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>WIN32_FIND_DATA<sp/>ent_data_;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>entry_name_buf_[<sp/>MAX_PATH<sp/>];</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_first_;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>win32_opendir(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path<sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>win32_closedir();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ctor_impl();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>iterator(<sp/>iterator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>iterator&amp;<sp/>operator=(<sp/>iterator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">};</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_WITH_FILE_ACCESS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="477"><highlight class="comment">//////////<sp/>Path<sp/>normalization<sp/>/////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="478"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="479"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>normalized<sp/>path<sp/>of<sp/>the<sp/>given<sp/>path.<sp/><sp/>A<sp/>normalized<sp/>path<sp/>is<sp/>one<sp/>that:</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>file://<sp/>URIs<sp/>converted<sp/>to<sp/>paths</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>directory<sp/>separators<sp/>corrected<sp/>for<sp/>the<sp/>host<sp/>operating<sp/>system</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>adjacent<sp/>directory<sp/>separators<sp/>combined,<sp/>e.g.,<sp/>\c<sp/>/a//b<sp/>becomes<sp/>\c<sp/>/a/b</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>./<sp/>removed,<sp/>e.g.,<sp/>\c<sp/>/a/./b<sp/>becomes<sp/>\c<sp/>/a/b</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>../<sp/>removed,<sp/>e.g.,<sp/>\c<sp/>/a/b/../c<sp/>becomes<sp/>\c<sp/>/a/c</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>path<sp/>to<sp/>normalize.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>@param<sp/>base<sp/>The<sp/>base<sp/>path.<sp/><sp/>If<sp/>not<sp/>empty,<sp/>is<sp/>prepended<sp/>to<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>the<sp/>normalized<sp/>path.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@throws<sp/>std::invalid_argument<sp/>for<sp/>malformed<sp/>paths.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="493"><highlight class="normal">std::string<sp/><ref refid="namespacezorba_1_1fs_1a18c539686aa53560219cdbbddb8f4315" kindref="member" tooltip="Gets the normalized path of the given path.">normalize_path</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*base<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>normalized<sp/>path<sp/>of<sp/>the<sp/>given<sp/>path.<sp/><sp/>A<sp/>normalized<sp/>path<sp/>is<sp/>one<sp/>that:</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>file://<sp/>URIs<sp/>converted<sp/>to<sp/>paths</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>directory<sp/>separators<sp/>corrected<sp/>for<sp/>the<sp/>host<sp/>operating<sp/>system</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>adjacent<sp/>directory<sp/>separators<sp/>combined,<sp/>e.g.,<sp/>\c<sp/>/a//b<sp/>becomes<sp/>\c<sp/>/a/b</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>./<sp/>removed,<sp/>e.g.,<sp/>\c<sp/>/a/./b<sp/>becomes<sp/>\c<sp/>/a/b</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>../<sp/>removed,<sp/>e.g.,<sp/>\c<sp/>/a/b/../c<sp/>becomes<sp/>\c<sp/>/a/c</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>path<sp/>to<sp/>normalize.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>the<sp/>normalized<sp/>path.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@throws<sp/>std::invalid_argument<sp/>for<sp/>malformed<sp/>paths.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_HAS_C_STR(PathStringType),std::string&gt;::type</ref></highlight></codeline>
<codeline lineno="510" refid="namespacezorba_1_1fs_1aaa9d9cf12b4580d76e108e81ee7971f2" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a18c539686aa53560219cdbbddb8f4315" kindref="member" tooltip="Gets the normalized path of the given path.">normalize_path</ref>(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a18c539686aa53560219cdbbddb8f4315" kindref="member" tooltip="Gets the normalized path of the given path.">normalize_path</ref>(<sp/>path.c_str()<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="514"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>Gets<sp/>the<sp/>normalized<sp/>path<sp/>of<sp/>the<sp/>given<sp/>path.<sp/><sp/>A<sp/>normalized<sp/>path<sp/>is<sp/>one<sp/>that:</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>file://<sp/>URIs<sp/>converted<sp/>to<sp/>paths</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>directory<sp/>separators<sp/>corrected<sp/>for<sp/>the<sp/>host<sp/>operating<sp/>system</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>adjacent<sp/>directory<sp/>separators<sp/>combined,<sp/>e.g.,<sp/>\c<sp/>/a//b<sp/>becomes<sp/>\c<sp/>/a/b</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>./<sp/>removed,<sp/>e.g.,<sp/>\c<sp/>/a/./b<sp/>becomes<sp/>\c<sp/>/a/b</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>has<sp/>\c<sp/>../<sp/>removed,<sp/>e.g.,<sp/>\c<sp/>/a/b/../c<sp/>becomes<sp/>\c<sp/>/a/c</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>BaseStringType<sp/>The<sp/>\a<sp/>base<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>The<sp/>path<sp/>to<sp/>normalize.</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>@param<sp/>base<sp/>The<sp/>base<sp/>path.<sp/><sp/>If<sp/>not<sp/>empty,<sp/>is<sp/>prepended<sp/>to<sp/>\a<sp/>path.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>the<sp/>normalized<sp/>path.</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@throws<sp/>std::invalid_argument<sp/>for<sp/>malformed<sp/>paths.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if</ref>&lt;<ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(PathStringType)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(BaseStringType),</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;<ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">::type</ref></highlight></codeline>
<codeline lineno="533" refid="namespacezorba_1_1fs_1abb6a0c20b484b9435cce33dd3ba42ffc" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a18c539686aa53560219cdbbddb8f4315" kindref="member" tooltip="Gets the normalized path of the given path.">normalize_path</ref>(<sp/>PathStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path,<sp/>BaseStringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;base<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1fs_1a18c539686aa53560219cdbbddb8f4315" kindref="member" tooltip="Gets the normalized path of the given path.">normalize_path</ref>(<sp/>path.c_str(),<sp/>base.c_str()<sp/>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="537"><highlight class="comment">//////////<sp/>Path<sp/>manipulation<sp/>//////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="538"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="539"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>Appends<sp/>a<sp/>path<sp/>component<sp/>onto<sp/>another<sp/>path<sp/>ensuring<sp/>that<sp/>exactly<sp/>one</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>separator<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType1<sp/>The<sp/>\a<sp/>path1<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>@param<sp/>path1<sp/>The<sp/>path<sp/>to<sp/>append<sp/>to.</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@param<sp/>path2<sp/>The<sp/>path<sp/>to<sp/>append.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType1&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_IS_STRING(PathStringType1),void&gt;::type</ref></highlight></codeline>
<codeline lineno="549" refid="namespacezorba_1_1fs_1aaa69709d8ced4b6aa9cc7873f369a832" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1aaa69709d8ced4b6aa9cc7873f369a832" kindref="member" tooltip="Appends a path component onto another path ensuring that exactly one separator is used...">append</ref>(<sp/>PathStringType1<sp/>&amp;path1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!path1.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PathStringType1::value_type<sp/>char_type;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>char_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>path1_last<sp/>=<sp/>path1[<sp/>path1.size()<sp/>-<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>path1_last<sp/>!=<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>&amp;&amp;<sp/>path2[0]<sp/>!=<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path1<sp/>+=<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref>;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>path1_last<sp/>==<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>&amp;&amp;<sp/>path2[0]<sp/>==<sp/><ref refid="namespacezorba_1_1fs_1aaf0bb705192d1baef70c508e482eca05" kindref="member">dir_separator</ref><sp/>)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++path2;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>path1<sp/>+=<sp/>path2;</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>Appends<sp/>a<sp/>path<sp/>component<sp/>onto<sp/>another<sp/>path.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType1<sp/>The<sp/>\a<sp/>path1<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType2<sp/>The<sp/>\a<sp/>path2<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>@param<sp/>path1<sp/>The<sp/>path<sp/>to<sp/>append<sp/>to.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/>@param<sp/>path2<sp/>The<sp/>path<sp/>to<sp/>append.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType1,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType2&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if</ref>&lt;<ref refid="ztd_8h_1a0958a26ba5538590ef945f07a2251f2d" kindref="member">ZORBA_IS_STRING</ref>(PathStringType1)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="ztd_8h_1a67def45b6f7f4daa8a69dcfb6a66008b" kindref="member">ZORBA_HAS_C_STR</ref>(PathStringType2),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22" kindref="member" tooltip="File type.">::type</ref></highlight></codeline>
<codeline lineno="573" refid="namespacezorba_1_1fs_1ae578a7902fb0aad009ec08fc2d5ee165" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1aaa69709d8ced4b6aa9cc7873f369a832" kindref="member" tooltip="Appends a path component onto another path ensuring that exactly one separator is used...">append</ref>(<sp/>PathStringType1<sp/>&amp;path1,<sp/>PathStringType2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;path2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1fs_1aaa69709d8ced4b6aa9cc7873f369a832" kindref="member" tooltip="Appends a path component onto another path ensuring that exactly one separator is used...">append</ref>(<sp/>path1,<sp/>path2.c_str()<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>use<sp/>this<sp/>function<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>win32_make_absolute(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*abs_path<sp/>);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>Makes<sp/>a<sp/>relative<sp/>path<sp/>into<sp/>an<sp/>absolute<sp/>path.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>PathStringType<sp/>The<sp/>\a<sp/>path<sp/>string<sp/>type.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*<sp/>@param<sp/>path<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>path<sp/>to<sp/>make<sp/>absolute.</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PathStringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">std::enable_if&lt;ZORBA_IS_STRING(PathStringType),void&gt;::type</ref></highlight></codeline>
<codeline lineno="591" refid="namespacezorba_1_1fs_1ae323f59361a3a0bfb5951a8ae1beb21f" refkind="member"><highlight class="normal"><ref refid="namespacezorba_1_1fs_1ae323f59361a3a0bfb5951a8ae1beb21f" kindref="member" tooltip="Makes a relative path into an absolute path.">make_absolute</ref>(<sp/>PathStringType<sp/>*path<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="namespacezorba_1_1fs_1a8f7fb962c78c731ab7f8ca4463a1f5bf" kindref="member" tooltip="Checks whether the given path is an absolute path.">is_absolute</ref>(<sp/>*path<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1base64_1ad04b7fb8662aed83c48a9a87ae49aa88" kindref="member">PathStringType::size_type</ref><sp/><ref refid="namespacezorba_1_1fs_1a446e28a0bf0f117168b81fbefc0865ea" kindref="member" tooltip="File size type.">size_type</ref>;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;insert(<sp/>static_cast&lt;size_type&gt;(0),<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;insert(<sp/>0,<sp/><ref refid="namespacezorba_1_1fs_1a6d54649caf5c90fa3714e5025507e1f6" kindref="member" tooltip="Gets the current directory.">curdir</ref>().<ref refid="namespacezorba_1_1internal_1_1ztd_1aab6211f3f098e27c67a814d90ca66224" kindref="member">c_str</ref>()<sp/>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp[<sp/>MAX_PATH<sp/>];</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>win32_make_absolute(<sp/>path-&gt;c_str(),<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>*path<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="605"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="606"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_FS_UTIL_API_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="611"><highlight class="comment">*<sp/>Local<sp/>variables:</highlight></codeline>
<codeline lineno="612"><highlight class="comment">*<sp/>mode:<sp/>c++</highlight></codeline>
<codeline lineno="613"><highlight class="comment">*<sp/>End:</highlight></codeline>
<codeline lineno="614"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/util/fs_util.h"/>
  </compounddef>
</doxygen>
