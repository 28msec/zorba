<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="options_and_annotations" kind="page">
    <compoundname>options_and_annotations</compoundname>
    <title>Zorba Specific Options and Annotations</title>
    <detaileddescription>
<para>In XQuery, <ulink url="http://www.w3.org/TR/xquery-30/#id-option-declaration">options</ulink> and <ulink url="http://www.w3.org/TR/xquery-30/#id-annotations">annotations</ulink> can both be used to change the behavior of a particular implementation.</para><para>Options provide a way to affect the behavior of modules. Annotations can be used to declare properties associated with functions, variables, collections, and indexes. In the following, we present the Zorba specific options and annotations. Also, we describe how they can be dealt with using the C++ API and the introspection module.</para><sect1 id="options_and_annotations_1option_introduction">
<title>Options</title>
<para>Options provide a way to affect the behavior of a particular XQuery module. They can be interpreted either by the XQuery processor itself or by the implementation of a particular module (i.e. an external function).</para><para>The syntax for declaring options in the prolog of an XQuery module is</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>OptionDecl<sp/><sp/><sp/><sp/><sp/>::=<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;declare&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;option&quot;</highlight><highlight class="normal"><sp/>QName<sp/>StringLiteral</highlight></codeline>
</programlisting></para><para>where QName is the name of the option and StringLiteral is the value that is assigned to this name.</para><para>For example, the following declaration disables scripting support in the module that contains the option declaration.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/features&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/>option<sp/>op:disable<sp/></highlight><highlight class="stringliteral">&quot;scripting&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><sect2 id="options_and_annotations_1options_zorba">
<title>Available Options</title>
<para>Zorba provides a number of options which can be used to determine the behavior of a module. The namespace for all such options starts with <computeroutput><ulink url="http://zorba.io/options">http://zorba.io/options</ulink></computeroutput>. An error is raised (zerr:ZXQP0060) if a module declares an option with a namespace that is equal to or starts with this namespace but the local name refers to an option that is not known to Zorba.</para><para>In the following, we describe the set of options available in Zorba.</para><sect3 id="options_and_annotations_1options_features">
<title>Enabling or Disabling Features</title>
<para>Zorba provides a couple of extensions to XQuery. For example, the scripting extension and the data definition facility are both features not defined by the W3C but available in Zorba. The user can enable or disable any of these extensions using an option declaration, respectively. The URI of the names of these options is <computeroutput><ulink url="http://zorba.io/options/features">http://zorba.io/options/features</ulink></computeroutput>. The local name to enable a feature is <computeroutput>enable</computeroutput> and to disable a feature is <computeroutput>disable</computeroutput>, respectively. As a value, any of these options allows a comma separated list of feature names (QNames).</para><para>For example, to disable the scripting and data definition facility feature, the following option declaration may be used:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/features&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">f<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/features&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/>option<sp/>op:disable<sp/></highlight><highlight class="stringliteral">&quot;f:scripting,<sp/>f:ddl&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>If a given feature doesn&apos;t specify a prefix, the name is resolved against the default feature namespace <computeroutput><ulink url="http://zorba.io/features">http://zorba.io/features</ulink></computeroutput>. All Zorba specific features presented in the following are declared in this namespace.</para><para><itemizedlist>
<listitem>
<para><bold>scripting:</bold> This local name can be used to enable or disable the Zorba Scripting Extension. Per default, the feature is enabled.  </para></listitem>
<listitem>
<para><bold>ddl:</bold> The <computeroutput>ddl</computeroutput> local name refers to the static (language-level) Data Description Language portion of the <ref refid="xqddf" kindref="compound">Data Definition Facility</ref>. The feature is enabled by default.  </para></listitem>
<listitem>
<para><bold>trace:</bold> The <ulink url="http://www.w3.org/TR/xpath-functions-30/#func-trace">fn:trace</ulink> function can be used to retrieve an execution trace of a query. The local name <computeroutput>trace</computeroutput> can be used to disable execution trace printing, i.e. calls to fn:trace are eliminated. Per default, the feature is enabled.  </para></listitem>
<listitem>
<para><bold>hof:</bold> Higher-order functions will be introduced in the upcoming XQuery 3.0 recommendation. This feature is only partially implemented in Zorba. Hence, it is disabled by default. However, the local name <computeroutput>hof</computeroutput> can be used to enable the feature if requested.  </para></listitem>
<listitem>
<para><bold>dtd:</bold> The local name <computeroutput>dtd</computeroutput> can be used to enable or disable DTD validation when parsing resources retrieved by <ulink url="http://www.w3.org/TR/xpath-functions-30/#func-doc">fn:doc</ulink>. DTD validation is disabled by default.  </para></listitem>
<listitem>
<para><bold>http-uri-resolution:</bold> When resolving URIs for schema and module import statements, Zorba always first attempts to map the URI to a local filesystem location (see <ref refid="uriresolvers_1builtin_uri_resolver" kindref="member">Zorba&apos;s Built-in URI Resolver</ref>). As a fallback, Zorba will then by default attempt to use HTTP, HTTPS, or FTP (depending on the URI scheme) to download the resource from the internet. The local name <computeroutput>http-uri-resolution</computeroutput> can be used to enable or disable this network fallback. By default it is enabled. <simplesect kind="note"><para>Because XQuery options must appear in queries after import statements, unfortunately the <computeroutput>http-uri-resolution</computeroutput> option can have no effect if it is specified inside query text. It must be specified using the C++ API or a Zorba command-line option. An error will be raised if this option is specified inside query text to avoid confusion. </para><simplesectsep/><para>Also note that, unlike other features, this feature is always set or unset Zorba-wide. </para></simplesect>
</para></listitem>
</itemizedlist>
</para></sect3>
<sect3 id="options_and_annotations_1options_Optimizations">
<title>Providing Optimizer Hints</title>
<para>Options can also be used to provide the Zorba optimizer with certain &quot;hints&quot;. All options used for this purpose have a QName whose namespace URI is <computeroutput><ulink url="http://zorba.io/options/optimizer">http://zorba.io/options/optimizer</ulink></computeroutput>. For some hints, the optimizer needs to know only whether the hint should be applied or not; no additional information is required. For such hints, Zorba recognizes two options, whose local name is <computeroutput>enable</computeroutput> and <computeroutput>disable</computeroutput>, respectivaly, and whose value is a comma separated list of hint names.</para><para>Currently, Zorba recognizes only one optimizer hint, called the for-serialization-only hint. It is used to tell the optimizer that the only operation that me be applied to the query result (i.e., to the sequence of items returned by the query) is serialization. With this knowledge, the optimizer may be able to apply optimizations that would not be possible otherwise. For example, it may be able to avoid the copying of nodes that are returned by an enclosed expression within a node constructor.</para><para>The following query shows the usage of this hint. The query groups a number of sale records by country, and prints the sales in each country within a <programlisting><codeline><highlight class="normal"><sp/>&lt;country&gt;<sp/></highlight></codeline>
</programlisting> tag whose name attribute gives the name of the associated country. The optimizer can use the for-serialization-only hint to avoid copying the $sale nodes when it constructs each of the new <programlisting><codeline><highlight class="normal"><sp/>&lt;country&gt;<sp/></highlight></codeline>
</programlisting> nodes.</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">opt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/optimizer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">declare<sp/>option<sp/>opt:enable<sp/></highlight><highlight class="stringliteral">&quot;for-serialization-only&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>$sale<sp/>in<sp/>doc(</highlight><highlight class="stringliteral">&quot;sales.xml&quot;</highlight><highlight class="normal">)/sale</highlight></codeline>
<codeline><highlight class="normal">let<sp/>$country<sp/>:=<sp/>$sale/country</highlight></codeline>
<codeline><highlight class="normal">group<sp/>by<sp/>$country</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&lt;country<sp/>name={$country}&gt;{$sale}&lt;/country&gt;</highlight></codeline>
</programlisting></para><para>The for-serialization-only hint can also be turned on or off via the use of the <ref refid="structZorba__CompilerHints" kindref="compound">Zorba_CompilerHints</ref> struct in the C++ API. Using an option declaration to enable or disable the hint overwrites the value stored in <ref refid="structZorba__CompilerHints" kindref="compound">Zorba_CompilerHints</ref>.</para></sect3>
<sect3 id="options_and_annotations_1options_warning">
<title>Warnings in Zorba</title>
<para>Warnings are diagnostic messages that report constructions which are not inherently erroneous but which are risky or suggest there may have been an error. Analogous to errors, warnings are identified by QNames. Using options, the user can control whether a particular warning (or all warnings) is (are) enabled, disabled, or treated as an error.</para><para>For example, given the following prolog, all warnings are treated as errors:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/warnings&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">w<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/warnings&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/>option<sp/>op:error<sp/></highlight><highlight class="stringliteral">&quot;w:all&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>If a given warning doesn&apos;t specify a prefix, the name is resolved against the default warning namespace <computeroutput><ulink url="http://zorba.io/warnings">http://zorba.io/warnings</ulink></computeroutput>. All Zorba specific warnings are defined in this namespace. A comprehensive list of warnings is contained at the end of the C++ header file <ref refid="diagnostic__list_8h" kindref="compound">diagnostic_list.h</ref>.</para><para>The following snippet causes the warning <computeroutput>ZWST0002</computeroutput> (warn for unknown annotations) to be suppressed:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/warnings&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/>option<sp/>op:disable<sp/></highlight><highlight class="stringliteral">&quot;ZWST0002&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="options_and_annotations_1options_versioning">
<title>Zorba Module Versioning</title>
<para>Zorba provides a way that allows the developer of a module to specify a version of his module without changing the target namespace. An importing module can specify restriction on the version of a module it wants to use. This allows developers to easily declare dependencies between particular versions of a module. In addition, a module can specify on which version of Zorba it depends. Details about module versioning can be found at <ref refid="modules_using_1mod_versioning" kindref="member">Versioning Modules</ref>.</para><para>The options to declare the module and zorba version are listed here for completeness.</para><para>To declare version 2.5 of a module that depends on version 2.0 of Zorba, the following option declaration may be used.</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ver<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/versioning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">declare<sp/>option<sp/>ver:module-version<sp/></highlight><highlight class="stringliteral">&quot;2.5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">declare<sp/>option<sp/>ver:zorba-version<sp/></highlight><highlight class="stringliteral">&quot;2.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para></sect3>
</sect2>
<sect2 id="options_and_annotations_1options_introspection">
<title>Introspecting Options in XQuery</title>
<para>In a module, the introspection module of Zorba can be used to get the value of an option that is declared.</para><para>Specifically, the following function retrieves the value of an option that is declared in the prolog of the module. The function returns the empty sequence if the option is not contained in the static context.</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>sctx:option($name<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:QName)<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">?<sp/>external;</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="options_and_annotations_1options_available">
<title>Options in Host Languages and External Functions</title>
<para>Besides declaring an option in the prolog of a module, options can also be declared or retrieved using the StaticContext representation in any of the language bindings (i.e. C++, C, PHP, Ruby, Python, or Java).</para><para>For instance, the C++ API provides the following two functions to retrieve the value of an option declared in a query and declare options to be used in a query, respectively.</para><para><itemizedlist>
<listitem>
<para>bool StaticContext::getOption( const Item&amp; aQName, String&amp; aOptionValue) const; </para></listitem>
<listitem>
<para>void StaticContext::declareOption( const Item&amp; aQName, const String&amp; aOptionValue); </para></listitem>
</itemizedlist>
</para><para>For example, the following code snippet depicts how the higher-order function feature can be enabled for all modules compiled with the given static context.</para><para><programlisting><codeline><highlight class="normal"><ref refid="classzorba_1_1SmartPtr" kindref="compound">zorba::StaticContext_t</ref><sp/>lContext<sp/>=<sp/>zorba-&gt;createStaticContext();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">zorba::Item</ref><sp/>lEnable<sp/>=<sp/>zorba-&gt;getItemFactory()-&gt;createQName(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/features&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;enable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">lContext-&gt;declareOption(lEnable,<sp/></highlight><highlight class="stringliteral">&quot;hof&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classzorba_1_1SmartPtr" kindref="compound">zorba::XQuery_t</ref><sp/>lQuery<sp/>=<sp/>zorba-&gt;compileQuery(</highlight><highlight class="stringliteral">&quot;1+1&quot;</highlight><highlight class="normal">,<sp/>lContext);</highlight></codeline>
</programlisting></para><para>Declaring and retrieving the value of an option is particularly useful in external functions. The developer of an external function can retrieve the value of an option (from the static context passed to the function). This way, she can customize the behavior of her function.</para></sect2>
</sect1>
<sect1 id="options_and_annotations_1annotation_introduction">
<title>Annotations</title>
<para>In XQuery (starting with version 3.0) <ulink url="http://www.w3.org/TR/xquery-30/#id-annotations">annotations</ulink> may be used to properties associated with functions and variables. Zorba also uses annotations for collections and indexes. Annotations are <computeroutput>(QName, value)</computeroutput> pairs. The prefix of the QName is resolved using the statically known namespaces. If no prefix is present, the name is the default function namespace.</para><sect2 id="options_and_annotations_1annotations_available">
<title>Available Annotations</title>
<sect3 id="options_and_annotations_1xquery_annotations">
<title>XQuery 3.0 Annotation</title>
<para>XQuery 3.0 itself defines two annotations: <computeroutput>fn:public</computeroutput> and <computeroutput>fn:private</computeroutput>. Those annotations allow the user to declare a function or a variable as public or private, respectively. A private variable or function is hidden from a module import. That is, it can not be used in the importing module.</para><para>For example, a function declared a module as follows, can not be used in a module which imports the <computeroutput>mymodule</computeroutput> module:</para><para><programlisting><codeline><highlight class="normal">declare<sp/>%</highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mymodule:foo()<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="options_and_annotations_1zorba_annotations">
<title>Zorba Specific Annotations</title>
<para>Zorba provides a number of annotations that allow the user to define the semantics of functions, variables, collections, and indexes. All these annotations have the namespace <computeroutput><ulink url="http://zorba.io/annotations">http://zorba.io/annotations</ulink></computeroutput>.</para><sect4 id="options_and_annotations_1deterministic_annotation">
<title>Deterministic and Nondeterministic Functions</title>
<para>A deterministic function is a function that always evaluates to the same result if it is invoked multiple times with the same arguments during the evaluation of a <ulink url="/scripting-spec?anchor=id-snapshot-scope">snapshot</ulink>. In general, all functions defined by XQuery are deterministic. However, a module developer might develop a function (in a host language) which does not guarantee to be deterministic. For example, a function generating random numbers is clearly not deterministic. Knowing about this property is crucial for the query optimizer to retain the semantics (e.g. caching would lead to incorrect results).</para><para>For this reason, Zorba provides two annotations (<computeroutput>nondeterministic</computeroutput> and <computeroutput>deterministic</computeroutput>) that allow a developer to declare whether a function is deterministic or not.</para><para>As an example, the following snippet declares a nondeterministic random function.</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abdd3c2de1222fd3167e2675969aa694c" kindref="member" tooltip="Aragonese.">an</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/annotations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">declare<sp/>%<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abdd3c2de1222fd3167e2675969aa694c" kindref="member" tooltip="Aragonese.">an</ref>:nondeterministic<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>random:random()<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:integer<sp/>external;</highlight></codeline>
</programlisting></para><para>If not specified otherwise, all functions are being treated as deterministic. If some function invokes a nondeterministic function, the invoking function itself must also be declared as nondeterministc, otherwise zerr::ZXQP0040 is raised.</para></sect4>
<sect4 id="options_and_annotations_1sequential_annotation">
<title>Sequential Functions</title>
<para>In XQuery 3.0, an expression never has any side effects other than constructing new nodes (not even updating expressions, which merely produce a pending update list). Zorba Scripting programs may have side effects. Side effects can be made with statements. An expression is sequential if it contains statements that have side effects (updating some XML, assigning a variable in scope outside of the expression) or that affect the control flow (break, continue, exit returning), or if it invokes a sequential function. Analogously to nondeterministic functions, the compiler needs to be able to infer if an expression is sequential. In order to do so, Zorba provides the <computeroutput>an:sequential</computeroutput> and <computeroutput>an:nonsequential</computeroutput> annotations. The <computeroutput>an:sequential</computeroutput> annotation must be used to declare (external) functions that have side effects. If non of these annotations is present, the default for a function is to be annotated as <computeroutput>an:nonsequential</computeroutput>. If a function invokes a sequential function but is itself not declared sequential (i.e. no annotation or <computeroutput>an:nonsequential</computeroutput>), an error is raised (zerr:XSST0004).</para><para>For example, the <computeroutput><ulink url="http:post">http:post</ulink></computeroutput> function of the http-client module is declared as sequential because invoking it might cause a side effect (e.g. a payment with paypal).</para><para><programlisting><codeline><highlight class="normal">declare<sp/>%<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abdd3c2de1222fd3167e2675969aa694c" kindref="member" tooltip="Aragonese.">an</ref>:sequential<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>http:post(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$href<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$body<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>item(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$content-<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">type</ref><sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>item()+<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting></para></sect4>
<sect4 id="options_and_annotations_1assignable_annotation">
<title>Assignable and Nonassignale Variables</title>
<para>In plain XQuery without scripting, global variables (i.e. those declared in the prolog of a module) can not be assigned a value. In scripting (i.e. if the scripting feature is enabled), however, values can be assigned to a variable.</para><para>In order to allow the developer to prevent variable assignments (even with scripting), Zorba provides the <computeroutput>an:nonassignable</computeroutput> annotation.</para><para>For example, preventing a variable from being assigned in scripting mode could be done as follows:</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abdd3c2de1222fd3167e2675969aa694c" kindref="member" tooltip="Aragonese.">an</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/annotations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">declare<sp/>%<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abdd3c2de1222fd3167e2675969aa694c" kindref="member" tooltip="Aragonese.">an</ref>:nonassignable<sp/>variable<sp/>$var<sp/>:=<sp/>3;</highlight></codeline>
</programlisting></para><para>If a value is assigned to a nonassignable variable, the error <computeroutput>XSST0007</computeroutput> in the Zorba error namespace is raised.</para></sect4>
<sect4 id="options_and_annotations_1variadic_annotation">
<title>Variadic Functions</title>
<para>A function annotated with the <computeroutput>an:variadic</computeroutput> annotation is a function of indefinite arity, i.e. one that accepts a variable number of arguments.</para><para>For example, the function to create an unordered map with an arbitrary number of key types (see module <ulink url="/modules/latest/zorba.io/modules/store/data-structures/unordered-map">http://zorba.io/modules/store/data-structures/unordered-map</ulink>) is declared as follow:</para><para><programlisting><codeline><highlight class="normal">declare<sp/>%<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abdd3c2de1222fd3167e2675969aa694c" kindref="member" tooltip="Aragonese.">an</ref>:variadic<sp/>%<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abdd3c2de1222fd3167e2675969aa694c" kindref="member" tooltip="Aragonese.">an</ref>:sequential<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>map:create(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$name<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:QName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$key-<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">type</ref><sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:QName)<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>empty-sequence()<sp/>external;</highlight></codeline>
</programlisting></para></sect4>
<sect4 id="options_and_annotations_1streamable_annotation">
<title>Streamable Strings</title>
<para>A function annotated with the <computeroutput>streamable</computeroutput> annotation is a function that may return an xs:string item whose content is streamed. Such a string is called a streamable string. They have the advantage that their contents does not need to be materialized in memory. If a function consuming such a string is able to process the string in a streaming fashion, this allows for processing of strings with a virtually infinite length.</para><para>For example, the following XQuery code, reads a file from disk and returns the contents to the standard output of the calling process. Because the <ulink url="file:read-text">file:read-text</ulink> function is annotated using the <computeroutput>streamable</computeroutput> annotation, the file does not have to be materialized in memory.</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref>:read-text(</highlight><highlight class="stringliteral">&quot;big_file.txt&quot;</highlight><highlight class="normal">)</highlight></codeline>
</programlisting></para><para>However, the disadvantage is that a streamable string can only be consumed exactly once. If a streamable string is consumed more than once, an error is raised. In order to enable multiple consumers of a streamable string, the materialize function of the string module (<ulink url="/modules/latest/zorba.io/modules/string">http://zorba.io/modules/string</ulink>) should be used to materialize the entire contents in an (regular) xs:string item.</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://expath.org/ns/file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/modules/string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">let<sp/>$x<sp/>:=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">:materialize(<ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22ad51f6a8152afdfbcf0e0dd0d1c86cee0" kindref="member">file</ref>:read-text(</highlight><highlight class="stringliteral">&quot;myfile.txt&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>($x,<sp/>$x)</highlight></codeline>
</programlisting></para><para>In this example, the <computeroutput><ulink url="file:read-text">file:read-text</ulink></computeroutput> function returns a streamable string whose contents is used twice in the query. In order to be able to use the value twice, the <computeroutput>string:materialize</computeroutput> function must be used to materialize the entire contents of the file <computeroutput>myfile.txt</computeroutput> in memory. Otherwise, the error zerr:ZSTR0055 is raised.</para></sect4>
<sect4 id="options_and_annotations_1caching_annotation">
<title>Caching Results of Functions</title>
<para>Caching of function results may improve performance when computationally expensive functions are invoked multiple times with the same arguments.</para><para>If the optimization level is O1 or higher, Zorba automatically caches results of recursive, deterministic, and non-sequential functions whose parameter and return types are subtypes of xs:anyAtomicType. Specifically, if such a function is called more than once with the same arguments, the result of the first call will be cached and subsequent calls will return the cached value without re-evaluating the function.</para><para>For example, in the following recursive function computing a fibonacci number, each result is automatically cached and, hence, dramatically improves performance.</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>local:fib($n<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:integer)<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:integer</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($n<sp/>eq<sp/>0)<sp/>then<sp/>0<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($n<sp/>eq<sp/>1)<sp/>then<sp/>1<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>local:fib($n<sp/>-<sp/>1)<sp/>+<sp/>local:fib($n<sp/>-<sp/>2)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">local:fib(100)</highlight></codeline>
</programlisting></para><para>Specifically, this optimization reduces the complexity of the function from O(1.6^n) to O(n).</para><para>In order to explicitly disable function caching, the user can specify the <computeroutput>an:no-cache</computeroutput> annotation.</para><para>In addition, the user can use the <computeroutput>an:cache</computeroutput> annotation to cache the results of functions other than the ones that are automatically cached. However, this will only work if the function is not updating and its parameter and return types are subtypes of xs:anyAtomicType; otherwise, Zorba will raise a warning (zwarn:ZWST0005) and simply ignore the an:cache annotation.</para><para>Please note, that explicitly enforcing caching for sequential or nondeterministic functions might not give the intended result. In such cases, Zorba will raise a warning (zwarn:ZWST0006) but obey the an:cache annotation.</para></sect4>
<sect4 id="options_and_annotations_1no_copy_rule_annotation">
<title>Avoiding Node Copying in Node Constructors.</title>
<para>According to the XQuery specification, any nodes (and their subtrees) returned by an enclosed expression appearing inside a node constructor must be copied, and it is the copied subtrees that are then connected to the newly constructed node. However, such copying is not always necessary. If no copying is done, then some nodes will be &quot;shared&quot; by multiple trees. XML trees that do not contain any shared nodes will be referred to as &quot;stand-alone trees&quot;.</para><para>Whether node copying is really necessary or not depends on the kind of operations that are going to be performed on the nodes and their associated trees after the node construction. For example, copying is necessary if any operations involving node identity, document ordering, or reverse axis traversals are to be performed on the newly constructed tree. Copying is also necessary if the relevant nodes may be involved in a later update operation. The Zorba optimizer is able to analyze the query expressions and determine automatically whether copying is required or not. However, the optimizer needs some help from the user in the case of external functions, because it cannot look into the operations of such functions. For this, Zorba provides two annotations that users may annotate their external functions with in order to help the optimizer determine whether to copy nodes or not.</para><para><itemizedlist>
<listitem>
<para><bold>an:must-copy-input-nodes</bold>. This annotation has an associated value, which is a list of integer literals. The meaning of the annotation is the following: If a number N appears in the value, then the function requires that any nodes that are bound to the N-th parameter when the function is called, must belong to standalone trees (because the function is going to perform on such nodes an operation that requires standalone trees). As a result of this information, the optimizer makes sure that node copying is done during any node constructor whose result (or any subtree of it) may be given as input to such an external function.  </para></listitem>
<listitem>
<para><bold>an:propagates-input-nodes</bold>. This annotation has an associated value, which is a list of integer literals. The meaning of the annotation is the following: If a number N appears in the value, then the function may return to its caller a node n that is bound to the N-th parameter, or a node in the subtree of n. This annotation helps the optimizer determine whether nodes consumed by an expression are coming from a node constructor, so that if the expression requires stand-alone trees, then the optimizer will make sure that the relevant node constructor does copy nodes.  </para></listitem>
</itemizedlist>
</para><para>The absence of any of the above annotations from an external function declaration is treated as if the annotation was present with a value listing all the numbers between 1 and M, where M is the function arity.</para></sect4>
<sect4 id="options_and_annotations_1collection_index_annotations">
<title>Annotations on Collections and Indexes</title>
<para>The <ref refid="xqddf" kindref="compound">Data Definition Facility</ref> uses annotations to assign properties to collections and indexes. For example, annotations can be used to specify that a collection is unordered or that an index is a value equality index.</para><para>The semantics of each of the annotations is given in the documentation about the XQuery Data Definition Facility. However, for completeness, we also list all of the annotations here.</para><para><itemizedlist>
<listitem>
<para><bold>an:mutable, an:queue, an:append-only, an:const</bold> Determines whether a collection is mutable, queue (FIFO), append-only, or const (not mutable). The default annotation is mutable. </para><para></para></listitem>
<listitem>
<para><bold>an:ordered, an:unordered</bold> Annotations to specify whether the order of nodes in a collection must be preserved. The default is ordered.</para><para></para></listitem>
<listitem>
<para><bold>an:read-only-nodes, an:mutable-nodes</bold> If a collection is annotated with read-only-nodes, the nodes in the collection can not be modified using the XQuery Update Facility. The default is an:mutable-nodes.</para><para></para></listitem>
<listitem>
<para><bold>an:unique, an:nonunique</bold> Unique indexes make sure that the relationship between index keys and values is one-to-one. The default is an:nonunique.</para><para></para></listitem>
<listitem>
<para><bold>an:value-equality, an:value-range, an:general-range, an:general-equality</bold> Determine whether the index is a value or general equality or value range index, respectively. The default is an:value-equality.</para><para></para></listitem>
<listitem>
<para><bold>an:automatic, an:manual</bold> If an index is declared as automatic, Zorba guarantees that the index is maintained automatically. The default is an:manual.</para><para></para></listitem>
</itemizedlist>
</para></sect4>
</sect3>
</sect2>
<sect2 id="options_and_annotations_1annotations_introspection">
<title>Introspecting Function Annotations</title>
<para>Analog to options, the introspection module of that comes with Zorba allows you to retrieve all annotations declared for a particular function.</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>sctx:</highlight><highlight class="keyword">function</highlight><highlight class="normal">-annotations(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$name<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:QName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$arity<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:integer)<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a1dea282b8d50cca16d5e6f8faef7d9d0" kindref="member" tooltip="Assamese.">as</ref><sp/>xs:QName*<sp/>external;</highlight></codeline>
</programlisting></para></sect2>
</sect1>
<sect1 id="options_and_annotations_1pragma_introduction">
<title>Extension Expressions</title>
<para>An extension expression consists of one or more pragmas, followed by an expression enclosed in curly braces. A pragma might be used to modify the behavior or semantics of the expression enclosed in curly braces. Pragmas are denoted by the delimiters (# and #), and consists of an identifying EQName. Zorba recognizes pragmas having the namespace <computeroutput><ulink url="http://zorba.io/extensions">http://zorba.io/extensions</ulink></computeroutput>. Specifically, Zorba recognizes the following pragmas:</para><para><itemizedlist>
<listitem>
<para><bold>no-copy</bold> In order to indicate that a node that should be inserted into a collection does not need to be copied before inserting it. Not copying a node improves performance. However, the user needs to make sure that the node does not have a parent and is not modified in any other expression. For example, in the following example snippet, the node refered to by <computeroutput>$n</computeroutput> will not be copied before insertion into the collection. <programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>module<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">db<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/modules/store/dynamic/collections/dml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ext<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/extensions&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">let<sp/>$n<sp/>:=<sp/>&lt;a/&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(#<sp/>ext:<ref refid="namespacezorba_1_1internal_1_1ztd_1_1has__insertion__operator__impl_1a02a523cf236289acec6640afe9070191" kindref="member">no</ref>-copy<sp/>#)<sp/>{<sp/>$n<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a11cc1dd79aff8b41628c4f17295d25a7" kindref="member" tooltip="Icelandic.">is</ref><sp/><sp/>db:apply-insert-last(xs:QName(</highlight><highlight class="stringliteral">&quot;local:bar&quot;</highlight><highlight class="normal">),<sp/>$n)<sp/>}</highlight></codeline>
</programlisting>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
