<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="item_8h" kind="file">
    <compoundname>item.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">zorba/config.h</includes>
    <includes refid="api__shared__types_8h" local="no">zorba/api_shared_types.h</includes>
    <includes refid="store__consts_8h" local="no">zorba/store_consts.h</includes>
    <includes local="no">vector</includes>
    <includedby refid="collection_8h" local="no">collection.h</includedby>
    <includedby refid="empty__sequence_8h" local="no">empty_sequence.h</includedby>
    <includedby refid="item__factory_8h" local="no">item_factory.h</includedby>
    <includedby refid="serializer_8h" local="no">serializer.h</includedby>
    <includedby refid="singleton__item__sequence_8h" local="no">singleton_item_sequence.h</includedby>
    <includedby refid="uri__resolvers_8h" local="no">uri_resolvers.h</includedby>
    <includedby refid="zorba_8h" local="no">zorba.h</includedby>
    <incdepgraph>
      <node id="1846">
        <label>zorba/util/smart_ptr.h</label>
        <link refid="smart__ptr_8h"/>
        <childnode refid="1844" relation="include">
        </childnode>
      </node>
      <node id="1842">
        <label>item.h</label>
        <link refid="item.h"/>
        <childnode refid="1843" relation="include">
        </childnode>
        <childnode refid="1844" relation="include">
        </childnode>
        <childnode refid="1845" relation="include">
        </childnode>
        <childnode refid="1847" relation="include">
        </childnode>
        <childnode refid="1849" relation="include">
        </childnode>
      </node>
      <node id="1848">
        <label>string</label>
      </node>
      <node id="1849">
        <label>vector</label>
      </node>
      <node id="1847">
        <label>zorba/store_consts.h</label>
        <link refid="store__consts_8h"/>
        <childnode refid="1843" relation="include">
        </childnode>
        <childnode refid="1848" relation="include">
        </childnode>
        <childnode refid="1844" relation="include">
        </childnode>
      </node>
      <node id="1843">
        <label>iostream</label>
      </node>
      <node id="1844">
        <label>zorba/config.h</label>
      </node>
      <node id="1845">
        <label>zorba/api_shared_types.h</label>
        <link refid="api__shared__types_8h"/>
        <childnode refid="1844" relation="include">
        </childnode>
        <childnode refid="1846" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1854">
        <label>empty_sequence.h</label>
        <link refid="empty__sequence_8h"/>
      </node>
      <node id="1850">
        <label>item.h</label>
        <link refid="item.h"/>
        <childnode refid="1851" relation="include">
        </childnode>
        <childnode refid="1854" relation="include">
        </childnode>
        <childnode refid="1855" relation="include">
        </childnode>
        <childnode refid="1856" relation="include">
        </childnode>
        <childnode refid="1857" relation="include">
        </childnode>
        <childnode refid="1858" relation="include">
        </childnode>
        <childnode refid="1852" relation="include">
        </childnode>
      </node>
      <node id="1852">
        <label>zorba.h</label>
        <link refid="zorba_8h"/>
        <childnode refid="1853" relation="include">
        </childnode>
      </node>
      <node id="1855">
        <label>item_factory.h</label>
        <link refid="item__factory_8h"/>
        <childnode refid="1852" relation="include">
        </childnode>
      </node>
      <node id="1851">
        <label>collection.h</label>
        <link refid="collection_8h"/>
        <childnode refid="1852" relation="include">
        </childnode>
      </node>
      <node id="1856">
        <label>serializer.h</label>
        <link refid="serializer_8h"/>
      </node>
      <node id="1859">
        <label>thesaurus.h</label>
        <link refid="thesaurus_8h"/>
        <childnode refid="1853" relation="include">
        </childnode>
      </node>
      <node id="1853">
        <label>static_context.h</label>
        <link refid="static__context_8h"/>
        <childnode refid="1852" relation="include">
        </childnode>
      </node>
      <node id="1858">
        <label>uri_resolvers.h</label>
        <link refid="uri__resolvers_8h"/>
        <childnode refid="1859" relation="include">
        </childnode>
      </node>
      <node id="1857">
        <label>singleton_item_sequence.h</label>
        <link refid="singleton__item__sequence_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classzorba_1_1Item" prot="public">zorba::Item</innerclass>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <innernamespace refid="namespacezorba_1_1serialization">zorba::serialization</innernamespace>
    <innernamespace refid="namespacezorba_1_1store">zorba::store</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_ITEM_API_H</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_ITEM_API_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="api__shared__types_8h" kindref="compound">zorba/api_shared_types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="store__consts_8h" kindref="compound">zorba/store_consts.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Item;</highlight></codeline>
<codeline lineno="28" refid="namespacezorba_1_1store" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">store<sp/>{<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>;<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">serialization</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Archiver;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1serialization_1a9fec1c09ccaafac6e86011328cb54ae6" kindref="member">operator&amp;</ref>(zorba::serialization::Archiver<sp/>&amp;<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781ab85becba4ad7e7540e1d75a41b481e02" kindref="member" tooltip="Arabic.">ar</ref>,<sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">zorba::Item</ref><sp/>&amp;obj);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Used<sp/>for<sp/>Item::getNamespaceBindings()<sp/>and<sp/>ItemFactory::createElementNode().</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="namespacezorba_1a88f32864e73bd2d882541275f8cf1cdc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;String,<sp/>String&gt;<sp/>&gt;<sp/><ref refid="namespacezorba_1a88f32864e73bd2d882541275f8cf1cdc" kindref="member" tooltip="Used for Item::getNamespaceBindings() and ItemFactory::createElementNode().">NsBindings</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment">/**<sp/>\brief<sp/>The<sp/>Zorba<sp/>Item<sp/>interface.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>This<sp/>class<sp/>is<sp/>the<sp/>Zorba<sp/>representation<sp/>of<sp/>an<sp/>Item<sp/>as<sp/>defined<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>XQuery<sp/>1.0<sp/>and<sp/>XPath<sp/>2.0<sp/>Data<sp/>Model<sp/>(XDM);<sp/>see<sp/>http://www.w3.org/TR/xpath-datamodel/.<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>Instances<sp/>of<sp/>the<sp/>XDM<sp/>are<sp/>a<sp/>sequence,<sp/>i.e.<sp/>an<sp/>ordered<sp/>collection<sp/>of<sp/>zero<sp/>or<sp/>more<sp/>items.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>In<sp/>the<sp/>Zorba<sp/>API,<sp/>a<sp/>sequence<sp/>is<sp/>represented<sp/>by<sp/>the<sp/>ItemSequence<sp/>class.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>The<sp/>Item<sp/>class<sp/>is<sp/>the<sp/>union<sp/>of<sp/>all<sp/>XQuery<sp/>node<sp/>and<sp/>atomic<sp/>types.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>The<sp/>class<sp/>provides<sp/>functions<sp/>to<sp/>access<sp/>the<sp/>information<sp/>of<sp/>an<sp/>Item.<sp/>Note<sp/>that<sp/>not</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>all<sp/>functions<sp/>are<sp/>defined<sp/>on<sp/>every<sp/>Item<sp/>kind.<sp/>If<sp/>a<sp/>function<sp/>is<sp/>called<sp/>on<sp/>an<sp/>Item<sp/>that</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>does<sp/>not<sp/>provide<sp/>the<sp/>called<sp/>function,<sp/>an<sp/>ZXQP0024_FUNCTION_NOT_IMPLEMENTED_FOR_ITEMTYPE<sp/>error</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>is<sp/>raised.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Instances<sp/>of<sp/>the<sp/>Item<sp/>class<sp/>are<sp/>always<sp/>passed<sp/>by<sp/>copy.<sp/>To<sp/>check<sp/>whether<sp/>a<sp/>given<sp/>Item<sp/>is<sp/>valid</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>isNull()<sp/>can<sp/>be<sp/>called<sp/>which<sp/>returns<sp/>true<sp/>if<sp/>the<sp/>given<sp/>Item<sp/>is<sp/>not<sp/>valid<sp/>and<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>A<sp/>new<sp/>atomic<sp/>Item<sp/>can<sp/>be<sp/>created<sp/>using<sp/>the<sp/>ItemFactory.<sp/>A<sp/>new<sp/>node<sp/>Item<sp/>should<sp/>be<sp/>created</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>result<sp/>of<sp/>a<sp/>query.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classzorba_1_1Item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ZORBA_DLL_PUBLIC<sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref></highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Default<sp/>constructor</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Copy<sp/>constructor</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>&amp;<sp/><ref refid="namespacezorba_1_1fs_1a33bc6a07dd3ac39c5107606fc21bea22a695149cd22831c06e408b1101e4075f1" kindref="member">other</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Constructor<sp/>that<sp/>is<sp/>used<sp/>to<sp/>construct<sp/>Items<sp/>in<sp/>the<sp/>Zorba<sp/>engine<sp/>itself.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>constructor<sp/>is<sp/>for<sp/>internal<sp/>use<sp/>only.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>store::Item*<sp/>item);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Assingment<sp/>operator</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>&amp;<sp/>operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Assingment<sp/>operator<sp/>that<sp/>is<sp/>used<sp/>in<sp/>the<sp/>Zorba<sp/>engine<sp/>itself.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>operator<sp/>is<sp/>for<sp/>internal<sp/>use<sp/>only.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>&amp;<sp/>operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>store::Item*<sp/>rhs);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classzorba_1_1Item_1a3fb89851f92267ef075c129fcbad193f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1adf799320d83872ba0b8c9c4a140a6e97" kindref="member" tooltip="Compares two diagnostics for equality.">operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_item<sp/>==<sp/>rhs.m_item;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Destructor</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>~<ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Check<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>null.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>this<sp/>function<sp/>returns<sp/>true,<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>valid.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>null,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>isNull()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Free<sp/>all<sp/>resources<sp/>aquired<sp/>by<sp/>this<sp/>Item.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>*<sp/>After<sp/>calling<sp/>close()<sp/>on<sp/>an<sp/>Item<sp/>the<sp/>Item<sp/>is<sp/>invalidated,<sp/>i.e.<sp/>a<sp/>subsequent</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>*<sp/>call<sp/>to<sp/>isNull()<sp/>will<sp/>return<sp/>true.<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>calling<sp/>this<sp/>function<sp/>is<sp/>usually<sp/>not<sp/>necessary<sp/>because<sp/>close()<sp/>is</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>*<sp/>implicitly<sp/>called<sp/>by<sp/>the<sp/>destructor.<sp/>Calling<sp/>close()<sp/>is<sp/>only<sp/>necessary<sp/>if</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>resources<sp/>aquired<sp/>by<sp/>an<sp/>Item<sp/>should<sp/>be<sp/>released<sp/>before<sp/>the<sp/>Item<sp/>goes<sp/>out</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>*<sp/>of<sp/>scope,<sp/>i.e.<sp/>the<sp/>destructor<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Also<sp/>note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>close();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Check<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>a<sp/>node<sp/>Item.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>of<sp/>type<sp/>node,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>isNode()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Check<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>an<sp/>atomic<sp/>Item.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>an<sp/>atomic<sp/>Item,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>isAtomic()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>the<sp/>type<sp/>of<sp/>this<sp/>item<sp/>based<sp/>on<sp/>the<sp/>enum<sp/>values<sp/>in<sp/>store_const.h</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1store_1a9c16b65ef5d440314887ea5e61a8cf75" kindref="member">store::SchemaTypeCode</ref><sp/>getTypeCode()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>*<sp/>See<sp/>http://www.w3.org/TR/xpath-datamodel/#types.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>type<sp/>of<sp/>the<sp/>Item<sp/>as<sp/>a<sp/>QName<sp/>Item<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>getType()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\brief<sp/>Check<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>a<sp/>JSON<sp/>Item,<sp/>that<sp/>is,<sp/>part<sp/>of<sp/>the<sp/>JSONiq</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/>*<sp/>data<sp/>model.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>a<sp/>JSON<sp/>Item,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>isJSONItem()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>atomization<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>atomization<sp/>value<sp/>is<sp/>the<sp/>value<sp/>that<sp/>is<sp/>returned<sp/>by<sp/>atomization<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(see<sp/>http://www.w3.org/TR/xquery/#id-atomization).</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>atomization<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">Iterator_t</ref></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>getAtomizationValue()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>string<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>string<sp/>value<sp/>is<sp/>the<sp/>string<sp/>that<sp/>is<sp/>extracted<sp/>by<sp/>calling<sp/>the<sp/>fn:string<sp/>function</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/>*<sp/>on<sp/>the<sp/>Item<sp/>(see<sp/>http://www.w3.org/TR/xpath-functions/#func-string).</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>string<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>getStringValue()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>int<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>int<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>int32_t</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>getIntValue()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>unsigned<sp/>int<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>unsigned<sp/>int<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>uint32_t</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>getUnsignedIntValue()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>int<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>int<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>getDoubleValue()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>long<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>long<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>int64_t<sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>getLongValue()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>effective<sp/>boolean<sp/>value<sp/>of<sp/>the<sp/>Item.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>effective<sp/>boolean<sp/>value<sp/>is<sp/>the<sp/>result<sp/>of<sp/>applying<sp/>the<sp/>fn:boolean<sp/>function<sp/>on<sp/></highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>Item<sp/>(see<sp/>http://www.w3.org/TR/xpath-functions/#func-boolean).</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>available<sp/>for<sp/>all<sp/>types<sp/>of<sp/>Items.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>effective<sp/>boolean<sp/>value<sp/>of<sp/>the<sp/>Item</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>getEBV()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>(optional)<sp/>value<sp/>of<sp/>a<sp/>QName&apos;s<sp/>prefix.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>Items<sp/>of<sp/>type<sp/>QName.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>String<sp/>the<sp/>prefix<sp/>of<sp/>the<sp/>QName.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>a<sp/>QName.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>getPrefix()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>(optional)<sp/>value<sp/>of<sp/>a<sp/>QName&apos;s<sp/>namespace.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>Items<sp/>of<sp/>type<sp/>QName.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>String<sp/>the<sp/>namespace<sp/>URI<sp/>of<sp/>the<sp/>QName.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>a<sp/>QName.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>getNamespace()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>QName&apos;s<sp/>local<sp/>name.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>Items<sp/>of<sp/>type<sp/>QName.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>String<sp/>the<sp/>local<sp/>name<sp/>of<sp/>the<sp/>QName.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>a<sp/>QName.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>getLocalName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Check<sp/>if<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>a<sp/>number<sp/>(NaN).</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>numeric<sp/>Items<sp/>(e.g.<sp/>Double<sp/>or<sp/>Float).</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>NaN,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>a<sp/>numeric<sp/>type.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>isNaN()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Check<sp/>if<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Item<sp/>is<sp/>positive<sp/>or<sp/>negative<sp/>infinity.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>numeric<sp/>Items<sp/>(e.g.<sp/>Double<sp/>or<sp/>Float).</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>Item<sp/>is<sp/>+/-INF,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>a<sp/>numeric<sp/>type.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>isPosOrNegInf()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>bool<sp/>value<sp/>of<sp/>the<sp/>boolean<sp/>Item.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>Items<sp/>of<sp/>type<sp/>boolean.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>boolean<sp/>value<sp/>is<sp/>true,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>boolean.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>getBooleanValue()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>an<sp/>iterator<sp/>for<sp/>the<sp/>children<sp/>of<sp/>this<sp/>(node)<sp/>Item.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>node<sp/>Items.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>file<sp/>\link<sp/>simple.cpp<sp/>\endlink<sp/>contains<sp/>some<sp/>basic<sp/>examples<sp/>that<sp/>demonstrate</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>use<sp/>of<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Iterator<sp/>over<sp/>the<sp/>children<sp/>of<sp/>this<sp/>node.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>node.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">Iterator_t</ref></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>getChildren()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>an<sp/>iterator<sp/>for<sp/>the<sp/>attributes<sp/>of<sp/>this<sp/>(node)<sp/>Item.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>node<sp/>Items.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>file<sp/>\link<sp/>simple.cpp<sp/>\endlink<sp/>contains<sp/>some<sp/>basic<sp/>examples<sp/>that<sp/>demonstrate</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>use<sp/>of<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Iterator<sp/>over<sp/>the<sp/>attributes<sp/>of<sp/>this<sp/>node.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>node.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">Iterator_t</ref></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>getAttributes()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>an<sp/>iterator<sp/>for<sp/>the<sp/>namespace<sp/>bindings<sp/>of<sp/>this<sp/>(element)<sp/>Item.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>element<sp/>Items.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>The<sp/>file<sp/>\link<sp/>simple.cpp<sp/>\endlink<sp/>contains<sp/>some<sp/>basic<sp/>examples<sp/>that<sp/>demonstrate</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>the<sp/>use<sp/>of<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>aBindings<sp/>An<sp/>std::vector<sp/>to<sp/>receive<sp/>the<sp/>namespace<sp/>bindings<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>(each<sp/>represented<sp/>as<sp/>a<sp/>std::pair&lt;zorba::String,zorba::String&gt;</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>the<sp/>first<sp/>string<sp/>is<sp/>the<sp/>namespace<sp/>prefix<sp/>and<sp/>the<sp/>second<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>URI).</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>scope<sp/>A<sp/>value<sp/>to<sp/>specify<sp/>which<sp/>bindings<sp/>to<sp/>return:<sp/>all<sp/>bindings<sp/>(the</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default);<sp/>only<sp/>those<sp/>that<sp/>are<sp/>specified<sp/>by<sp/>the<sp/>namespace<sp/>declaration</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes<sp/>of<sp/>the<sp/>node<sp/>(if<sp/>any);<sp/>or<sp/>those<sp/>that<sp/>are<sp/>implied<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qnames<sp/>of<sp/>the<sp/>node<sp/>and<sp/>its<sp/>attributes<sp/>plus<sp/>those<sp/>that<sp/>are<sp/>specified</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>the<sp/>namespace<sp/>declaration<sp/>attributes<sp/>of<sp/>the<sp/>node<sp/>(if<sp/>any)</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>element.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>getNamespaceBindings(</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacezorba_1a88f32864e73bd2d882541275f8cf1cdc" kindref="member" tooltip="Used for Item::getNamespaceBindings() and ItemFactory::createElementNode().">NsBindings</ref>&amp;<sp/>aBindings,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzorba_1_1store_1_1StoreConsts_1a9079b0b206e71ff0063c23c319084cc0" kindref="member" tooltip="NsScoping defines the three values that can be given as arguments to the Item::getNamespaceBindings()...">store::StoreConsts::NsScoping</ref><sp/>scope<sp/>=<sp/><ref refid="classzorba_1_1store_1_1StoreConsts_1a9079b0b206e71ff0063c23c319084cc0a0bbf36aace11e4ca2bb654141a32459a" kindref="member">store::StoreConsts::ALL_BINDINGS</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>parent<sp/>of<sp/>this<sp/>(node)<sp/>Item.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>node<sp/>Items.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>element<sp/>or<sp/>document<sp/>parent<sp/>node<sp/>of<sp/>this<sp/>node.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured,<sp/>e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>node.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>getParent()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>name<sp/>of<sp/>this<sp/>(node)<sp/>Item.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>node<sp/>Items.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>file<sp/>\link<sp/>simple.cpp<sp/>\endlink<sp/>contains<sp/>some<sp/>basic<sp/>examples<sp/>that<sp/>demonstrate</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>use<sp/>of<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>bool<sp/>if<sp/>the<sp/>name<sp/>of<sp/>the<sp/>node<sp/>was<sp/>retrieved<sp/>successfully</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>aNodeName<sp/>the<sp/>name<sp/>of<sp/>the<sp/>node</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured<sp/>(e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>node).</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>getNodeName(<ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>&amp;<sp/>aNodeName)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>this<sp/>(node)<sp/>Item.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>node<sp/>Items.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>int<sp/>the<sp/>kind<sp/>of<sp/>this<sp/>node<sp/>(the<sp/>avaialble<sp/>kinds<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>store::StoreConsts<sp/>class)</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured<sp/>(e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>node).</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>getNodeKind()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>kind<sp/>of<sp/>this<sp/>(JSON)<sp/>Item.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>JSON<sp/>Items,<sp/>that<sp/>is,<sp/>Items</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/>*<sp/>which<sp/>return<sp/>true<sp/>from<sp/>isJSONItem().</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>the<sp/>kind<sp/>of<sp/>this<sp/>JSON<sp/>item</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured<sp/>(e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>JSON).</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1store_1_1StoreConsts_1ae5784137226d3819c16380c0fe3046d2" kindref="member">store::StoreConsts::JSONItemKind</ref></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>getJSONItemKind()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>a<sp/>JSON<sp/>Array.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>JSON<sp/>Arrays.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>size<sp/>of<sp/>the<sp/>array.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured<sp/>(e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>JSON<sp/>Array).</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>uint64_t</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>getArraySize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Returns<sp/>the<sp/>item<sp/>in<sp/>the<sp/>JSON<sp/>array<sp/>at<sp/>the<sp/>specified<sp/>index.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>JSON<sp/>Arrays.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aIndex<sp/>the<sp/>index<sp/>in<sp/>the<sp/>array.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>indexed<sp/>Item.</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured<sp/>(e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>JSON<sp/>Array).</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>getArrayValue(uint32_t<sp/>aIndex)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Get<sp/>the<sp/>keys<sp/>of<sp/>a<sp/>JSON<sp/>Object.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>JSON<sp/>Objects.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Iterator_t<sp/>an<sp/>iterator<sp/>on<sp/>the<sp/>keys<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured<sp/>(e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>JSON<sp/>Object).</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1SmartPtr" kindref="compound">Iterator_t</ref></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>getObjectKeys()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Returns<sp/>the<sp/>value<sp/>with<sp/>the<sp/>given<sp/>name<sp/>from<sp/>a<sp/>JSON<sp/>Object.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>only<sp/>available<sp/>for<sp/>JSON<sp/>Objects.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>aName<sp/>the<sp/>name<sp/>of<sp/>the<sp/>value<sp/>in<sp/>the<sp/>Object<sp/>to<sp/>return.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Item<sp/>the<sp/>named<sp/>value<sp/>from<sp/>the<sp/>Object.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>an<sp/>error<sp/>occured<sp/>(e.g.<sp/>the<sp/>Item<sp/>is<sp/>not<sp/>of<sp/>type<sp/>JSON<sp/>Object).</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>getObjectValue(<ref refid="classzorba_1_1String" kindref="compound" tooltip="The Zorba string class.">String</ref><sp/>aName)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Checks<sp/>whether<sp/>the<sp/>item&apos;s<sp/>content<sp/>is<sp/>streamable.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>only<sp/>if<sp/>it<sp/>is.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>isStreamable()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Checks<sp/>whether<sp/>the<sp/>item&apos;s<sp/>streamable<sp/>content<sp/>is<sp/>arbitrarily</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(forward<sp/>anb<sp/>backward)<sp/>seekable.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>only<sp/>if<sp/>it<sp/>is.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>isSeekable()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>an<sp/>istream<sp/>for<sp/>the<sp/>item&apos;s<sp/>content.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>the<sp/>stream.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@throw<sp/>ZorbaException<sp/>if<sp/>the<sp/>item<sp/>is<sp/>not<sp/>streamable.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>std::istream&amp;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>getStream();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>binary<sp/>item<sp/>is<sp/>already<sp/>encoded</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>content<sp/>is<sp/>already<sp/>encoded,<sp/>false<sp/>otherwise</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>isEncoded()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>value<sp/>and<sp/>size<sp/>of<sp/>the<sp/>given<sp/>base64Binary<sp/>item</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>value<sp/>is<sp/>a<sp/>string<sp/>which<sp/>is<sp/>base64<sp/>encoded<sp/>if<sp/>isEncoded()</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/>*<sp/>returns<sp/>true.<sp/>Otherwise,<sp/>it<sp/>is<sp/>the<sp/>original<sp/>unencoded<sp/>binary</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/>*<sp/>data.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>given<sp/>item<sp/>is<sp/>streamable<sp/>(i.e.<sp/>isStreamable()<sp/>returns<sp/>true),</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>stream<sp/>returned<sp/>by<sp/>getStream()<sp/>should<sp/>to<sp/>be<sp/>used<sp/>to<sp/>retrieve</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>value.<sp/>Otherwise,<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>stream<sp/>will<sp/>be<sp/>materialized</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>main<sp/>memory.</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>getBase64BinaryValue(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/>/**<sp/>\brief<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>collection<sp/>this<sp/>node<sp/>is<sp/>stored<sp/>in.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>The<sp/>name<sp/>of<sp/>the<sp/>collection<sp/>or<sp/>0<sp/>if<sp/>the<sp/>given<sp/>item<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>a<sp/>node<sp/>or<sp/>not<sp/>stored<sp/>in<sp/>a<sp/>collection.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>getCollectionName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>total<sp/>amount<sp/>of<sp/>memory<sp/>this<sp/>Item<sp/>and<sp/>all<sp/>its<sp/>child<sp/>Items<sp/>are</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/>*<sp/>using.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>said<sp/>total<sp/>amount<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>mem_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>value<sp/>and<sp/>size<sp/>of<sp/>the<sp/>given<sp/>hexBinary<sp/>item</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>value<sp/>is<sp/>a<sp/>string<sp/>which<sp/>is<sp/>hexBinary<sp/>encoded<sp/>if<sp/>isEncoded()</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/>*<sp/>returns<sp/>true.<sp/>Otherwise,<sp/>it<sp/>is<sp/>the<sp/>original<sp/>unencoded<sp/>binary</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/>*<sp/>data.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>given<sp/>item<sp/>is<sp/>streamable<sp/>(i.e.<sp/>isStreamable()<sp/>returns<sp/>true),</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>stream<sp/>returned<sp/>by<sp/>getStream()<sp/>should<sp/>to<sp/>be<sp/>used<sp/>to<sp/>retrieve</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>value.<sp/>Otherwise,<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>stream<sp/>will<sp/>be<sp/>materialized</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>main<sp/>memory.</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>getHexBinaryValue(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="505" refid="classzorba_1_1Item_1a3e0633ac5ec941d1abf1a7b5b6ffce25" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Unmarshaller;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>store::Item<sp/>*<sp/>m_item;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>plan<sp/>serialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1serialization_1a9fec1c09ccaafac6e86011328cb54ae6" kindref="member">zorba::serialization::operator&amp;</ref>(zorba::serialization::Archiver&amp;<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781ab85becba4ad7e7540e1d75a41b481e02" kindref="member" tooltip="Arabic.">ar</ref>,<sp/><ref refid="classzorba_1_1Item" kindref="compound" tooltip="The Zorba Item interface.">Item</ref>&amp;<sp/>obj);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/item.h"/>
  </compounddef>
</doxygen>
