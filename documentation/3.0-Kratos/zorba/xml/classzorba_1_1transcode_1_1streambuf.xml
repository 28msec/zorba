<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classzorba_1_1transcode_1_1streambuf" kind="class" prot="public">
    <compoundname>zorba::transcode::streambuf</compoundname>
    <includes refid="transcode__stream_8h" local="no">zorba/util/transcode_stream.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzorba_1_1transcode_1_1streambuf_1a597055262df4dea867eaf5051f7e5db5" prot="private" static="no" mutable="no">
        <type><ref refid="classstd_1_1unique__ptr" kindref="compound">std::unique_ptr</ref>&lt; <ref refid="namespacezorba_1_1internal_1a9e89615a1743d84ddbc4f79362b3798a" kindref="member">internal::proxy_streambuf</ref> &gt;</type>
        <definition>std::unique_ptr&lt;internal::proxy_streambuf&gt; zorba::transcode::streambuf::proxy_buf_</definition>
        <argsstring></argsstring>
        <name>proxy_buf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="105" bodyfile="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1ad4738ed71a093711c1a5c0d5660fa91e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::streambuf *</type>
        <definition>std::streambuf* zorba::transcode::streambuf::orig_streambuf</definition>
        <argsstring>() const </argsstring>
        <name>orig_streambuf</name>
        <briefdescription>
<para>Gets the original streambuf. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>said streambuf. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="86" bodyfile="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a77b03e76f7418c400881d9b305f1ca17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zorba::transcode::streambuf::streambuf</definition>
        <argsstring>(char const *charset, std::streambuf *orig)</argsstring>
        <name>streambuf</name>
        <param>
          <type>char const *</type>
          <declname>charset</declname>
        </param>
        <param>
          <type>std::streambuf *</type>
          <declname>orig</declname>
        </param>
        <briefdescription>
<para>Constructs a transcode::streambuf. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charset</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the character encoding to convert from/to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orig</parametername>
</parameternamelist>
<parameterdescription>
<para>The original streambuf to read/write from/to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if either <emphasis>charset</emphasis> is not supported or <emphasis>orig</emphasis> is null. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="74"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a7cc529dc15d9b589160f3afa88830bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zorba::transcode::streambuf::~streambuf</definition>
        <argsstring>()</argsstring>
        <name>~streambuf</name>
        <briefdescription>
<para>Destructs a transcode::streambuf. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1ab8b8ad63192a091ba98ba19b4cfd43f3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zorba::transcode::streambuf::imbue</definition>
        <argsstring>(std::locale const &amp;)</argsstring>
        <name>imbue</name>
        <param>
          <type>std::locale const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="91"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a492e0e03c671e29e7c9881f7b901a146" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_type</type>
        <definition>int_type zorba::transcode::streambuf::overflow</definition>
        <argsstring>(int_type)</argsstring>
        <name>overflow</name>
        <param>
          <type>int_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="97"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a8fc5fd2109ca152d8f6cc4973db60ff0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_type</type>
        <definition>int_type zorba::transcode::streambuf::pbackfail</definition>
        <argsstring>(int_type)</argsstring>
        <name>pbackfail</name>
        <param>
          <type>int_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="98"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1ac057f7465f460e03d6ad70e7dd013fd9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pos_type</type>
        <definition>pos_type zorba::transcode::streambuf::seekoff</definition>
        <argsstring>(off_type, std::ios_base::seekdir, std::ios_base::openmode)</argsstring>
        <name>seekoff</name>
        <param>
          <type>off_type</type>
        </param>
        <param>
          <type>std::ios_base::seekdir</type>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="92"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a690948a1eba1d00938c369581e373003" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pos_type</type>
        <definition>pos_type zorba::transcode::streambuf::seekpos</definition>
        <argsstring>(pos_type, std::ios_base::openmode)</argsstring>
        <name>seekpos</name>
        <param>
          <type>pos_type</type>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="93"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a596e209e149feca415ae1cbf263757f2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::streambuf *</type>
        <definition>std::streambuf* zorba::transcode::streambuf::setbuf</definition>
        <argsstring>(char_type *, std::streamsize)</argsstring>
        <name>setbuf</name>
        <param>
          <type>char_type *</type>
        </param>
        <param>
          <type>std::streamsize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="94"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1ab6385b206458c1fd9cf4ac3001237773" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::streamsize</type>
        <definition>std::streamsize zorba::transcode::streambuf::showmanyc</definition>
        <argsstring>()</argsstring>
        <name>showmanyc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1affa1d9a0ef29e69e184a179bd94ac5c2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int zorba::transcode::streambuf::sync</definition>
        <argsstring>()</argsstring>
        <name>sync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="96"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1abd18d39490cefb90a43ab88e879fc5f5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_type</type>
        <definition>int_type zorba::transcode::streambuf::uflow</definition>
        <argsstring>()</argsstring>
        <name>uflow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="99"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a8723ee3063ea3372aa0ac4fa2efd91b7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_type</type>
        <definition>int_type zorba::transcode::streambuf::underflow</definition>
        <argsstring>()</argsstring>
        <name>underflow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="100"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1af64aa07a95480de8fd2d0c093623887c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::streamsize</type>
        <definition>std::streamsize zorba::transcode::streambuf::xsgetn</definition>
        <argsstring>(char_type *, std::streamsize)</argsstring>
        <name>xsgetn</name>
        <param>
          <type>char_type *</type>
        </param>
        <param>
          <type>std::streamsize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="101"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a80eaac99ae50d833c50c0fdc5e5bf569" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::streamsize</type>
        <definition>std::streamsize zorba::transcode::streambuf::xsputn</definition>
        <argsstring>(char_type const *, std::streamsize)</argsstring>
        <name>xsputn</name>
        <param>
          <type>char_type const *</type>
        </param>
        <param>
          <type>std::streamsize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1a4bcf54d2e668f908efc4ff561b99089e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound">streambuf</ref> &amp;</type>
        <definition>streambuf&amp; zorba::transcode::streambuf::operator=</definition>
        <argsstring>(streambuf const &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound">streambuf</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="109"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1transcode_1_1streambuf_1ababf215f0af42b382af860ad742432d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zorba::transcode::streambuf::streambuf</definition>
        <argsstring>(streambuf const &amp;)</argsstring>
        <name>streambuf</name>
        <param>
          <type><ref refid="classzorba_1_1transcode_1_1streambuf" kindref="compound">streambuf</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A transcode::streambuf is-a std::streambuf for transcoding character encodings from/to UTF-8 on-the-fly. </para>    </briefdescription>
    <detaileddescription>
<para>To use it, replace a stream&apos;s streambuf: <programlisting><codeline><highlight class="normal"><sp/><sp/>istream<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a11cc1dd79aff8b41628c4f17295d25a7" kindref="member" tooltip="Icelandic.">is</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>transcode::streambuf<sp/>tbuf(<sp/></highlight><highlight class="stringliteral">&quot;ISO-8859-1&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a11cc1dd79aff8b41628c4f17295d25a7" kindref="member" tooltip="Icelandic.">is</ref>.rdbuf()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781a11cc1dd79aff8b41628c4f17295d25a7" kindref="member" tooltip="Icelandic.">is</ref>.ios::rdbuf(<sp/>&amp;tbuf<sp/>);</highlight></codeline>
</programlisting> Note that the transcode::streambuf must exist for as long as it&apos;s being used by the stream. If you are replacing the streabuf for a stream you did not create, you should set it back to the original streambuf: <programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>f(<sp/>ostream<sp/>&amp;<ref refid="namespacezorba_1_1locale_1_1iso639__1_1aafd6e55905dc8efe50a3f9fd38616781abd9d340f17925d6dcfdf23e0ff40ddf1" kindref="member" tooltip="Ossetian; Ossetic.">os</ref><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>transcode::streambuf<sp/>tbuf(<sp/></highlight><highlight class="stringliteral">&quot;ISO-8859-1&quot;</highlight><highlight class="normal">,<sp/>os.rdbuf()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os.ios::rdbuf(<sp/>&amp;tbuf<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os.ios::rdbuf(<sp/>tbuf.orig_streambuf()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>os.ios::rdbuf(<sp/>tbuf.orig_streambuf()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
</programlisting> Alternatively, you may wish to use either <computeroutput><ref refid="namespacezorba_1_1transcode_1a44eff53620b083f7384c20eea64a534b" kindref="member">attach()</ref></computeroutput>, <computeroutput><ref refid="classzorba_1_1transcode_1_1auto__attach" kindref="compound">auto_attach</ref></computeroutput>, or <computeroutput><ref refid="classzorba_1_1transcode_1_1stream" kindref="compound">transcode::stream</ref></computeroutput> instead.</para><para>While transcode::streambuf does support seeking, the positions are relative to the original byte stream. </para>    </detaileddescription>
    <location file="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" line="64" bodyfile="/home/wcandillon/deadlinks/include/zorba/util/transcode_stream.h" bodystart="64" bodyend="110"/>
    <listofallmembers>
      <member refid="classzorba_1_1transcode_1_1streambuf_1ab8b8ad63192a091ba98ba19b4cfd43f3" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>imbue</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a4bcf54d2e668f908efc4ff561b99089e" prot="private" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>operator=</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1ad4738ed71a093711c1a5c0d5660fa91e" prot="public" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>orig_streambuf</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a492e0e03c671e29e7c9881f7b901a146" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>overflow</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a8fc5fd2109ca152d8f6cc4973db60ff0" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>pbackfail</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a597055262df4dea867eaf5051f7e5db5" prot="private" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>proxy_buf_</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1ac057f7465f460e03d6ad70e7dd013fd9" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>seekoff</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a690948a1eba1d00938c369581e373003" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>seekpos</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a596e209e149feca415ae1cbf263757f2" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>setbuf</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1ab6385b206458c1fd9cf4ac3001237773" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>showmanyc</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a77b03e76f7418c400881d9b305f1ca17" prot="public" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>streambuf</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1ababf215f0af42b382af860ad742432d6" prot="private" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>streambuf</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1affa1d9a0ef29e69e184a179bd94ac5c2" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>sync</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1abd18d39490cefb90a43ab88e879fc5f5" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>uflow</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a8723ee3063ea3372aa0ac4fa2efd91b7" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>underflow</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1af64aa07a95480de8fd2d0c093623887c" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>xsgetn</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a80eaac99ae50d833c50c0fdc5e5bf569" prot="protected" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>xsputn</name></member>
      <member refid="classzorba_1_1transcode_1_1streambuf_1a7cc529dc15d9b589160f3afa88830bcb" prot="public" virt="non-virtual"><scope>zorba::transcode::streambuf</scope><name>~streambuf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
