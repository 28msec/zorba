<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="errors_warnings" kind="page">
    <compoundname>errors_warnings</compoundname>
    <title>Errors and Warnings</title>
    <detaileddescription>
<para>During the interaction with Zorba (e.g.through the C++ API) and the processing of programs, errors may be raised and warnings may be reported.</para><para>In this document, we describe how errors and warnings can be dealt with using Zorba&apos;s C++ API, XQuery, and JSONiq.</para><sect1 id="errors_warnings_1errors_warnings_errors">
<title>Errors</title>
<para>Zorba may raise errors during the static analysis phase and the dynamic evaluation phase of a query. Moreover, errors may be raised by any of the host language APIs. Each such error is identified by a QName. Most of the errors are defined by any of the XQuery specifications (e.g. XQuery 1.0 or 3.0, XQuery Update, or XQuery Full Text) and contained in the XPath and XQuery error namespace (<ulink url="http://www.w3.org/2005/xqt-errors">http://www.w3.org/2005/xqt-errors</ulink>). In addition, Zorba defines a set of errors in the http://zorba.io/errors namespace.</para><para>A full list of potential errors can be found in the <ref refid="diagnostic__list_8h" kindref="compound">diagnostic_list.h</ref> header (<computeroutput>err</computeroutput> and <computeroutput>zerr</computeroutput> namespaces) of the C++ API and in the following modules:</para><para><itemizedlist>
<listitem>
<para><ulink url="/modules/latest/zorba.io/errors">http://zorba.io/errors</ulink> </para></listitem>
<listitem>
<para><ulink url="/modules/latest/www.w3.org/2005/xqt-errors">http://www.w3.org/2005/xqt-errors</ulink> </para></listitem>
</itemizedlist>
</para><para>These modules declare one variable per error. The name and value of the variable is the QName of the corresponding error.</para></sect1>
<sect1 id="errors_warnings_1errors_warnings_warnings">
<title>Warnings</title>
<para>In addition to the errors mentioned in the previous section, Zorba may raise warnings during the static analysis phase of the query. Warnings are diagnostic messages that report constructions which are not inherently erroneous but which are risky or suggest there may have been an error. Like an error, a warning is identified by a QName whose namespace is http://zorba.io/warnings. A list of warnings can be found in the <ref refid="diagnostic__list_8h" kindref="compound">diagnostic_list.h</ref> header (zwarn namespace) of the C++ API and in the <ulink url="/modules/latest/zorba.io/warnings">http://zorba.io/warnings</ulink> module.</para><para>A warning can be enabled (i.e. will be reported), disabled (i.e. will not be reported), or turned into an error (i.e. an error with the same name will be raised) by specifying options in the static context that is used to compile the query (<ref refid="classzorba_1_1StaticContext_1a5cb66ac2b7c17a76b59978fd50c238e5" kindref="member">zorba::StaticContext::declareOption</ref>) or in the prolog of an XQuery module.</para><para>For example, given the following prolog of an XQuery module, all warnings are treated as errors:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/options/warnings&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">w<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/warnings&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>declare<sp/>option<sp/>op:error<sp/></highlight><highlight class="stringliteral">&quot;w:all&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para><para>More information on how options can be used to configure warnings can be found in the <ref refid="options_and_annotations" kindref="compound">Zorba Specific Options and Annotations</ref> documentation.</para></sect1>
<sect1 id="errors_warnings_1errors_warnings_cpp">
<title>Errors and Warnings in the C++ API</title>
<para>In the C++ API, errors are reported using the exception classes: <ref refid="classzorba_1_1ZorbaException" kindref="compound">zorba::ZorbaException</ref>, <ref refid="classzorba_1_1XQueryException" kindref="compound">zorba::XQueryException</ref>, and <ref refid="classzorba_1_1UserException" kindref="compound">zorba::UserException</ref>. Objects of type <ref refid="classzorba_1_1ZorbaException" kindref="compound">zorba::ZorbaException</ref> contain a description of the error. Instances of the class <ref refid="classzorba_1_1XQueryException" kindref="compound">zorba::XQueryException</ref> are raised during the static or dynamic analysis or evaluation phase, respectively. They contain additional information about the source location of the problem in the program (i.e. <ref refid="classzorba_1_1XQueryException_1a553ee378d77657617e872347f09d1adc" kindref="member">zorba::XQueryException::source_uri()</ref>, <ref refid="classzorba_1_1XQueryException_1aab93a239dd4047d6e4aaa7cba2c9ab47" kindref="member">zorba::XQueryException::source_line()</ref>, <ref refid="classzorba_1_1XQueryException_1a093a3985c87d852aa5f70187137153a4" kindref="member">zorba::XQueryException::source_column()</ref>, <ref refid="classzorba_1_1XQueryException_1acfc67763485cee7f4dffd51e7b2abf90" kindref="member">zorba::XQueryException::source_line_end()</ref>, and <ref refid="classzorba_1_1XQueryException_1a673a725c2e629380cd961ca537abcf02" kindref="member">zorba::XQueryException::source_column_end()</ref>). Moreover, if the error occurs during the dynamic evaluation phase, the object carries the stack trace containing the names and source location of the invoked functions. <ref refid="classzorba_1_1UserException" kindref="compound">zorba::UserException</ref> is an <ref refid="classzorba_1_1XQueryException" kindref="compound">zorba::XQueryException</ref> which is used to report errors that are raised by the <computeroutput>fn:error()</computeroutput> function. In addition to the source location and stack trace, instances of this class may also carry an error object (if passed to <computeroutput>fn:error</computeroutput>).</para><para>In the C++ API, those objects are usually thrown and need to be caught (and handled) by the caller. However, the API also provides a way to register a user-defined diagnostic handler (i.e. subclass of <ref refid="classzorba_1_1DiagnosticHandler" kindref="compound">zorba::DiagnosticHandler</ref>) whose <ref refid="classzorba_1_1DiagnosticHandler_1af3425c0a0811d549c45188b0eba044fe" kindref="member">zorba::DiagnosticHandler::error</ref> (ZorbaException const &amp; exception) function is invoked if an error occurs.</para><para>Please take a look at the C++ examples that show how to deal with errors and warnings in the C++ API (errors_8cpp-example).</para></sect1>
<sect1 id="errors_warnings_1try_catch">
<title>Try/Catch Expressions</title>
<para>The <ulink url="http://www.w3.org/TR/xquery-30/#id-try-catch">try/catch expression</ulink> provides error handling for dynamic errors and type errors raised during dynamic evaluation. For example:</para><para><programlisting><codeline><highlight class="normal">(:<sp/>Simple<sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">-</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>example<sp/>:)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"><sp/>err=</highlight><highlight class="stringliteral">&quot;http://www.w3.org/2005/xqt-errors&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>3<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>err:<ref refid="namespacezorba_1_1err_1ad7d1a9dd8243aeb5d7c2671882a09839" kindref="member">XPTY0004</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Caught<sp/>a<sp/>type<sp/>error&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Within the <computeroutput>catch</computeroutput> expression, a few implicit variables are defined. Some of them (e.g., <computeroutput>$err:code</computeroutput>, <computeroutput>$err:description</computeroutput>, and <computeroutput>$err:line-number</computeroutput>) are defined by the <ulink url="http://www.w3.org/TR/xquery-30/#id-try-catch">XQuery</ulink> specification.</para><para>Zorba defines additional implicit variables:</para><para><table rows="7" cols="3"><row>
<entry thead="yes"><para>Variable </para></entry><entry thead="yes"><para>Type </para></entry><entry thead="yes"><para>Value  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$zerr:line-number-end</computeroutput>  </para></entry><entry thead="no"><para><computeroutput>xs:integer</computeroutput>? </para></entry><entry thead="no"><para>The ending line number within the query where the error occurred.   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$zerr:column-number-end</computeroutput>  </para></entry><entry thead="no"><para><computeroutput>xs:integer</computeroutput>? </para></entry><entry thead="no"><para>The ending column number within the query where the error occurred.   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$zerr:data-uri</computeroutput>  </para></entry><entry thead="no"><para><computeroutput>xs:string</computeroutput>? </para></entry><entry thead="no"><para>The URI of the data file containing the error.   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$zerr:data-line-number</computeroutput>  </para></entry><entry thead="no"><para><computeroutput>xs:integer</computeroutput>? </para></entry><entry thead="no"><para>The line number within the data file where the error occurred. The value <emphasis>may</emphasis> be approximate.   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$zerr:data-column-number</computeroutput>  </para></entry><entry thead="no"><para><computeroutput>xs:integer</computeroutput>? </para></entry><entry thead="no"><para>The column number within the data file where the error occurred. The value <emphasis>may</emphasis> be approximate.   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$zerr:stack-trace</computeroutput>  </para></entry><entry thead="no"><para><computeroutput>item()</computeroutput>? </para></entry><entry thead="no"><para>The function call stack-trace leading up to the error.   </para></entry></row>
</table>
</para><para>where the <computeroutput>zerr</computeroutput> prefix is bound to the namespace <computeroutput>http</computeroutput>://zorba.io/errors and &quot;data file&quot; refers to the file that data is being read from, e.g., the result of reading XML (<computeroutput>fn:doc</computeroutput>) or JSON data. For example, the query:</para><para><programlisting><codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zerr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://zorba.io/errors&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>local:bar()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1<sp/>div<sp/>0</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">declare<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>local:foo()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local:bar()</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>local:foo()</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>*<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>$zerr:stack-trace</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>returns the following result:</para><para><programlisting><codeline><highlight class="normal">&lt;stack<sp/>xmlns=</highlight><highlight class="stringliteral">&quot;http://zorba.io/errors&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;entry&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;http://www.w3.org/2005/xquery-local-functions&quot;</highlight><highlight class="normal"><sp/>localname=</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>arity=</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;location<sp/>name=</highlight><highlight class="stringliteral">&quot;filename.xq&quot;</highlight><highlight class="normal"><sp/>line-begin=</highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal"><sp/>line-end=</highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal"><sp/>column-begin=</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal"><sp/>column-end=</highlight><highlight class="stringliteral">&quot;14&quot;</highlight><highlight class="normal">/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/entry&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;entry&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;http://www.w3.org/2005/xquery-local-functions&quot;</highlight><highlight class="normal"><sp/>localname=</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>arity=</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;location<sp/>name=</highlight><highlight class="stringliteral">&quot;filename.xq&quot;</highlight><highlight class="normal"><sp/>line-begin=</highlight><highlight class="stringliteral">&quot;15&quot;</highlight><highlight class="normal"><sp/>line-end=</highlight><highlight class="stringliteral">&quot;15&quot;</highlight><highlight class="normal"><sp/>column-begin=</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal"><sp/>column-end=</highlight><highlight class="stringliteral">&quot;14&quot;</highlight><highlight class="normal">/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/entry&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/stack&gt;</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
