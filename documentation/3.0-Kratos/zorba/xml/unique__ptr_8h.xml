<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="unique__ptr_8h" kind="file">
    <compoundname>unique_ptr.h</compoundname>
    <includes local="no">zorba/config.h</includes>
    <includes local="no">algorithm</includes>
    <includes refid="cxx__util_8h" local="yes">cxx_util.h</includes>
    <includes refid="type__traits_8h" local="yes">type_traits.h</includes>
    <includes refid="ztd_8h" local="yes">ztd.h</includes>
    <includedby refid="stemmer_8h" local="no">stemmer.h</includedby>
    <includedby refid="thesaurus_8h" local="no">thesaurus.h</includedby>
    <includedby refid="tokenizer_8h" local="no">tokenizer.h</includedby>
    <includedby refid="uri__resolvers_8h" local="no">uri_resolvers.h</includedby>
    <includedby refid="transcode__stream_8h" local="no">transcode_stream.h</includedby>
    <includedby refid="xquery__functions_8h" local="no">xquery_functions.h</includedby>
    <includedby refid="zorba__exception_8h" local="no">zorba_exception.h</includedby>
    <incdepgraph>
      <node id="2376">
        <label>functional</label>
      </node>
      <node id="2371">
        <label>cxx_util.h</label>
        <link refid="cxx__util_8h"/>
        <childnode refid="2369" relation="include">
        </childnode>
      </node>
      <node id="2378">
        <label>string</label>
      </node>
      <node id="2372">
        <label>type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="2369" relation="include">
        </childnode>
        <childnode refid="2373" relation="include">
        </childnode>
      </node>
      <node id="2377">
        <label>sstream</label>
      </node>
      <node id="2368">
        <label>unique_ptr.h</label>
        <link refid="unique_ptr.h"/>
        <childnode refid="2369" relation="include">
        </childnode>
        <childnode refid="2370" relation="include">
        </childnode>
        <childnode refid="2371" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
        <childnode refid="2374" relation="include">
        </childnode>
      </node>
      <node id="2374">
        <label>ztd.h</label>
        <link refid="ztd_8h"/>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
        <childnode refid="2369" relation="include">
        </childnode>
        <childnode refid="2371" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2373">
        <label>type_traits</label>
      </node>
      <node id="2369">
        <label>zorba/config.h</label>
      </node>
      <node id="2370">
        <label>algorithm</label>
      </node>
      <node id="2375">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2391">
        <label>xquery_warning.h</label>
        <link refid="xquery__warning_8h"/>
        <childnode refid="2392" relation="include">
        </childnode>
      </node>
      <node id="2383">
        <label>zorba.h</label>
        <link refid="zorba_8h"/>
        <childnode refid="2382" relation="include">
        </childnode>
      </node>
      <node id="2388">
        <label>zorba_exception.h</label>
        <link refid="zorba__exception_8h"/>
        <childnode refid="2382" relation="include">
        </childnode>
        <childnode refid="2389" relation="include">
        </childnode>
      </node>
      <node id="2387">
        <label>xquery_functions.h</label>
        <link refid="xquery__functions_8h"/>
      </node>
      <node id="2386">
        <label>transcode_stream.h</label>
        <link refid="transcode__stream_8h"/>
      </node>
      <node id="2381">
        <label>thesaurus.h</label>
        <link refid="thesaurus_8h"/>
        <childnode refid="2382" relation="include">
        </childnode>
      </node>
      <node id="2390">
        <label>user_exception.h</label>
        <link refid="user__exception_8h"/>
      </node>
      <node id="2380">
        <label>stemmer.h</label>
        <link refid="stemmer_8h"/>
      </node>
      <node id="2389">
        <label>xquery_exception.h</label>
        <link refid="xquery__exception_8h"/>
        <childnode refid="2390" relation="include">
        </childnode>
        <childnode refid="2391" relation="include">
        </childnode>
      </node>
      <node id="2392">
        <label>diagnostic_handler.h</label>
        <link refid="diagnostic__handler_8h"/>
        <childnode refid="2383" relation="include">
        </childnode>
      </node>
      <node id="2382">
        <label>static_context.h</label>
        <link refid="static__context_8h"/>
        <childnode refid="2383" relation="include">
        </childnode>
      </node>
      <node id="2385">
        <label>uri_resolvers.h</label>
        <link refid="uri__resolvers_8h"/>
        <childnode refid="2381" relation="include">
        </childnode>
      </node>
      <node id="2379">
        <label>unique_ptr.h</label>
        <link refid="unique_ptr.h"/>
        <childnode refid="2380" relation="include">
        </childnode>
        <childnode refid="2381" relation="include">
        </childnode>
        <childnode refid="2384" relation="include">
        </childnode>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2388" relation="include">
        </childnode>
      </node>
      <node id="2384">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structstd_1_1default__delete" prot="public">std::default_delete</innerclass>
    <innerclass refid="structstd_1_1default__delete_3_01T[]_4" prot="public">std::default_delete&lt; T[]&gt;</innerclass>
    <innerclass refid="classstd_1_1unique__ptr" prot="public">std::unique_ptr</innerclass>
    <innerclass refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4" prot="public">std::unique_ptr&lt; T[], D &gt;</innerclass>
    <innerclass refid="classstd_1_1unique__ptr__storage" prot="public">std::unique_ptr_storage</innerclass>
    <innerclass refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4" prot="public">std::unique_ptr_storage&lt; T, D, true &gt;</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" prot="public" static="no">
        <name>ZORBA_UNIQUE_PTR_RELOP</name>
        <param><defname>OP</defname></param>
        <initializer>template&lt;typename T1,typename D1,typename T2,typename D2&gt; inline             \
  bool operator OP( unique_ptr&lt;T1,D1&gt; const &amp;a, unique_ptr&lt;T2,D2&gt; const &amp;b ) { \
    return a.get() OP b.get();                                                 \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/unique_ptr.h" line="556" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/unique_ptr.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_UNIQUE_PTR_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_UNIQUE_PTR_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZORBA_HAVE_UNIQUE_PTR</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;memory&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>unique_ptr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;utility&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>forward,<sp/>move<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>swap()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cxx__util_8h" kindref="compound">cxx_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__traits_8h" kindref="compound">type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ztd_8h" kindref="compound">ztd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if&lt;!zorba::internal::is_movable&lt;T&gt;::value,T&amp;&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="38" refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" refkind="member"><highlight class="normal"><ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>(<sp/>T<sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if&lt;zorba::internal::is_movable&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;T&gt;</ref>&amp;&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="45" refid="namespacestd_1ab6626d6e4aa2e2573574d37ddb78e4a0" refkind="member"><highlight class="normal"><ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;t<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if&lt;zorba::internal::is_movable&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;T&gt;</ref>&amp;&gt;<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">::type</ref></highlight></codeline>
<codeline lineno="52" refid="namespacestd_1af96b536519dd8795107ca11028ed7ad4" refkind="member"><highlight class="normal"><ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>(<sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;T&gt;</ref><sp/>&amp;t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Storage<sp/>for<sp/>unique_ptr&apos;s<sp/>pointer<sp/>and<sp/>deleter.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointed-to<sp/>type.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>D<sp/>The<sp/>deleter<sp/>type.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">template&lt;typename<sp/>T,typename<sp/>D,bool<sp/>=<sp/>ZORBA_TR1_NS::is_empty&lt;D&gt;::value&gt;</highlight></codeline>
<codeline lineno="66" refid="classstd_1_1unique__ptr__storage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::add_reference&lt;D&gt;::type</ref><sp/>deleter_reference;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr_storage&gt;</ref><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">rvalue_type</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70" refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>*<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classstd_1_1unique__ptr__storage_1a72cc5dfc264b3ca459c305b8c8a2c54f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_1a72cc5dfc264b3ca459c305b8c8a2c54f" kindref="member">unique_ptr_storage</ref>(<sp/>T<sp/>*p<sp/>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>:<sp/><ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>(<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classstd_1_1unique__ptr__storage_1a8e3bf6941ef49129172aa424554d638b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_1a72cc5dfc264b3ca459c305b8c8a2c54f" kindref="member">unique_ptr_storage</ref>(<sp/>T<sp/>*p,<sp/>deleter_reference<sp/>d<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>(<sp/>p<sp/>),<sp/>deleter_(<sp/>d<sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classstd_1_1unique__ptr__storage_1ae8d85b52236d88cd2558a5f84c2c41b2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_1ae8d85b52236d88cd2558a5f84c2c41b2" kindref="member">operator rvalue_type</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">rvalue_type</ref>(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" refkind="member"><highlight class="normal"><sp/><sp/>deleter_reference<sp/><ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deleter_;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>D<sp/>deleter_;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_1a72cc5dfc264b3ca459c305b8c8a2c54f" kindref="member">unique_ptr_storage</ref>(<sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref>&amp;<sp/>operator=(<sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>%unique_ptr_storage<sp/>when<sp/>the<sp/>\c<sp/>D<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointed-to<sp/>type.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>D<sp/>The<sp/>deleter<sp/>type.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="103" refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref>&lt;T,D,true&gt;<sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>D<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr_storage&gt;</ref><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">rvalue_type</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106" refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1ae7432231bf935a43929471ea27906b48" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>*<ref refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1ae7432231bf935a43929471ea27906b48" kindref="member">ptr_</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1adff078ba37d5de118c1664a7abf27592" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1adff078ba37d5de118c1664a7abf27592" kindref="member">unique_ptr_storage</ref>(<sp/>T<sp/>*p<sp/>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>:<sp/><ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>(<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1acf6329412b3d88ed4022b783bc227d67" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1acf6329412b3d88ed4022b783bc227d67" kindref="member">unique_ptr_storage</ref>(<sp/>T<sp/>*p,<sp/>D<sp/>&amp;d<sp/>)<sp/>:<sp/>D(<sp/>d<sp/>),<sp/><ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>(<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1a27f13d7e8b1db0d092b7ee82224c992c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1a27f13d7e8b1db0d092b7ee82224c992c" kindref="member">operator rvalue_type</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">rvalue_type</ref>(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1a1bf3626f933bdb0aff553a0efaf7ba91" refkind="member"><highlight class="normal"><sp/><sp/>D&amp;<sp/><ref refid="classstd_1_1unique__ptr__storage_3_01T_00_01D_00_01true_01_4_1a1bf3626f933bdb0aff553a0efaf7ba91" kindref="member">deleter</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage_1a72cc5dfc264b3ca459c305b8c8a2c54f" kindref="member">unique_ptr_storage</ref>(<sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref>&amp;<sp/>operator=(<sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>Swaps<sp/>two<sp/>unique_ptr<sp/>objects.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointed-to<sp/>type.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>D<sp/>The<sp/>deleter<sp/>type.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@param<sp/>a<sp/>The<sp/>first<sp/>object<sp/>to<sp/>swap.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@param<sp/>b<sp/>The<sp/>second<sp/>object<sp/>to<sp/>swap.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsEmpty&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="namespacestd_1aafbcaca1306bb08270264881f31f120f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1aafbcaca1306bb08270264881f31f120f" kindref="member">swap</ref>(<sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage&lt;T,D,IsEmpty&gt;</ref><sp/>&amp;a,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage&lt;T,D,IsEmpty&gt;</ref><sp/>&amp;b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="namespacestd_1aafbcaca1306bb08270264881f31f120f" kindref="member">std::swap</ref>(<sp/>a.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>,<sp/>b.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="namespacestd_1aafbcaca1306bb08270264881f31f120f" kindref="member">std::swap</ref>(<sp/>a.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>(),<sp/>b.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>()<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>The<sp/>default<sp/>deleter<sp/>class<sp/>used<sp/>by<sp/>unique_ptr.<sp/><sp/>It<sp/>simply<sp/>calls<sp/>\c<sp/>delete<sp/>on</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>the<sp/>pointed-to<sp/>object.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointed-to<sp/>type.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="156" refid="structstd_1_1default__delete" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1default__delete" kindref="compound">default_delete</ref><sp/>{</highlight></codeline>
<codeline lineno="157" refid="structstd_1_1default__delete_1a6e7d142ba35a441664009e37acbc1a8d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structstd_1_1default__delete_1a6e7d142ba35a441664009e37acbc1a8d" kindref="member">default_delete</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Copy<sp/>constructor.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>U<sp/>The<sp/>type<sp/>of<sp/>the<sp/>deleter<sp/>to<sp/>copy-construct<sp/>from<sp/>such<sp/>that<sp/>\c<sp/>U*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/>*<sp/>is<sp/>convertible<sp/>to<sp/>\c<sp/>T*.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="166" refid="structstd_1_1default__delete_1ab6f9c6da950237149e1a552e1a334da5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structstd_1_1default__delete_1a6e7d142ba35a441664009e37acbc1a8d" kindref="member">default_delete</ref>(<sp/><ref refid="structstd_1_1default__delete" kindref="compound">default_delete&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">enable_if</ref>&lt;ZORBA_TR1_NS::is_convertible&lt;U*,T*&gt;::value&gt;::<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">type</ref>*</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Deletes<sp/>the<sp/>pointed-to<sp/>object<sp/>using<sp/>\c<sp/>delete.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>object<sp/>to<sp/>delete.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="structstd_1_1default__delete_1ae489b6d7fd01ab670ef52a3c6f58ad23" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1default__delete_1ae489b6d7fd01ab670ef52a3c6f58ad23" kindref="member" tooltip="Deletes the pointed-to object using delete.">operator()</ref>(<sp/>T<sp/>*p<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>default_delete<sp/>for<sp/>arrays.<sp/><sp/>It<sp/>simply<sp/>calls<sp/>\c<sp/>delete[]<sp/>on</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>the<sp/>pointed-to<sp/>array.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointed-to<sp/>type.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="190" refid="structstd_1_1default__delete_3_01T[]_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1default__delete" kindref="compound">default_delete</ref>&lt;T[]&gt;<sp/>{</highlight></codeline>
<codeline lineno="191" refid="structstd_1_1default__delete_3_01T[]_4_1ae7983e43ca686816b46a3c096ad8b48a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structstd_1_1default__delete_3_01T[]_4_1ae7983e43ca686816b46a3c096ad8b48a" kindref="member">default_delete</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="192" refid="structstd_1_1default__delete_3_01T[]_4_1aa24416f8fcc391d22e16c4ed8188e9ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1default__delete_3_01T[]_4_1aa24416f8fcc391d22e16c4ed8188e9ca" kindref="member">operator()</ref>(<sp/>T<sp/>*p<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>p;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>Emulation<sp/>of<sp/>the<sp/>C++11<sp/>std::unique_ptr.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointed-to<sp/>type.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>D<sp/>The<sp/>deleter<sp/>to<sp/>use,<sp/>if<sp/>any.<sp/><sp/>It<sp/>must<sp/>be<sp/>either<sp/>a<sp/>function<sp/>pointer</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>or<sp/>a<sp/>functor<sp/>such<sp/>that<sp/>if<sp/>\c<sp/>d<sp/>is<sp/>of<sp/>type<sp/>\a<sp/>D<sp/>and<sp/>\c<sp/>p<sp/>is<sp/>of<sp/>type<sp/>\a<sp/>T*,</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>then<sp/>\c<sp/>d(p)<sp/>is<sp/>valid<sp/>and<sp/>deletes<sp/>the<sp/>pointed-to<sp/>object.<sp/><sp/>The<sp/>deleter<sp/>must</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>handle<sp/>null<sp/>pointers.<sp/><sp/>Note<sp/>that<sp/>\a<sp/>D<sp/>may<sp/>be<sp/>a<sp/>reference<sp/>type.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>default_delete&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="210" refid="classstd_1_1unique__ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::add_reference&lt;D&gt;::type</ref></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deleter_reference;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::add_reference&lt;D const&gt;::type</ref></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deleter_const_reference;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool" kindref="compound" tooltip="Helper class for implementing a solution to the &amp;quot;explicit bool conversion&amp;quot; problem.">zorba::internal::ztd::explicit_bool</ref><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool" kindref="compound" tooltip="Helper class for implementing a solution to the &amp;quot;explicit bool conversion&amp;quot; problem.">explicit_bool</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="220" refid="classstd_1_1unique__ptr_1aa75d4cd6d29aa993a3a4e6a2e65f65b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classstd_1_1unique__ptr_1aa75d4cd6d29aa993a3a4e6a2e65f65b1" kindref="member">element_type</ref>;</highlight></codeline>
<codeline lineno="221" refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="222" refid="classstd_1_1unique__ptr_1a0173822d0efb055fe769b3af2cc675c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classstd_1_1unique__ptr_1a0173822d0efb055fe769b3af2cc675c1" kindref="member">deleter_type</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Default<sp/>constructor.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>object<sp/>to<sp/>point<sp/>to,<sp/>if<sp/>any.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>(<sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>throw()<sp/>:<sp/>storage_(<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>%unique_ptr<sp/>using<sp/>a<sp/>specific<sp/>deleter.<sp/><sp/>This<sp/>%unique_ptr<sp/>now</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/>*<sp/>has<sp/>ownership<sp/>of<sp/>the<sp/>pointed-to<sp/>object.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>object<sp/>to<sp/>own.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>d<sp/>The<sp/>deleter<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="classstd_1_1unique__ptr_1a7edf85c4e8ace8e30ec7a36ab6189510" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a7edf85c4e8ace8e30ec7a36ab6189510" kindref="member" tooltip="Constructs a unique_ptr using a specific deleter.">unique_ptr</ref>(<sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref><sp/>p,<sp/>deleter_reference<sp/>d<sp/>)<sp/>:<sp/>storage_(<sp/>p,<sp/>d<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>%unique_ptr<sp/>from<sp/>an<sp/>existing<sp/>%unique_ptr.<sp/><sp/>Note<sp/>that:</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>unique_ptr&lt;int&gt;<sp/>a(<sp/>new<sp/>int(1)<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>unique_ptr&lt;int&gt;<sp/>b(<sp/>a<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compile-time<sp/>error</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Instead,<sp/>you<sp/>must<sp/>use<sp/>the<sp/>\c<sp/>move()<sp/>function:</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\code</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>unique_ptr&lt;int&gt;<sp/>a(<sp/>new<sp/>int(1)<sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>unique_ptr&lt;int&gt;<sp/>b(<sp/>move(a)<sp/>);<sp/><sp/><sp/><sp/><sp/>//<sp/>ok<sp/>now</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>*<sp/>\endcode</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>The<sp/>%unique_ptr<sp/>to<sp/>move<sp/>from.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="classstd_1_1unique__ptr_1ad18a80010b90d39d099a45432faabf87" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>(<sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr&gt;</ref><sp/>&amp;p<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_(<sp/>p.<ref refid="classstd_1_1unique__ptr_1afcc631781d2bf472dad301927de4ffed" kindref="member" tooltip="Releases ownership of the pointed-to object.">release</ref>(),<sp/>p.<ref refid="classstd_1_1unique__ptr_1a60643bf34d2700dee88c7a9ed164c8c3" kindref="member" tooltip="Gets the deleter in use.">get_deleter</ref>()<sp/>)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructs<sp/>a<sp/>%unique_ptr<sp/>from<sp/>an<sp/>existing<sp/>%unique_ptr<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>U<sp/>The<sp/>pointed-to<sp/>type<sp/>such<sp/>that<sp/>\c<sp/>U*<sp/>is<sp/>convertible<sp/>to<sp/>\c<sp/>T*.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>E<sp/>The<sp/>deleter<sp/>such<sp/>that<sp/>\c<sp/>E<sp/>is<sp/>convertible<sp/>to<sp/>\c<sp/>D.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>The<sp/>%unique_ptr<sp/>to<sp/>move<sp/>from.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="269" refid="classstd_1_1unique__ptr_1a1d640cacc1cfff7181d2dedaaf810750" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>(<sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv</ref>&lt;<ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr&lt;U,E&gt;</ref><sp/>&gt;<sp/>&amp;p,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1enable__if" kindref="compound">enable_if</ref>&lt;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ZORBA_TR1_NS::is_convertible&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">unique_ptr&lt;U&gt;::pointer</ref>,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref>&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ZORBA_TR1_NS::is_convertible&lt;E,D&gt;::value<sp/>&amp;&amp;<sp/>(</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!ZORBA_TR1_NS::is_reference&lt;D&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZORBA_TR1_NS::is_same&lt;D,E&gt;::value</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::<ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">type</ref>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>)<sp/>:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_(<sp/>p.<ref refid="classstd_1_1unique__ptr_1afcc631781d2bf472dad301927de4ffed" kindref="member" tooltip="Releases ownership of the pointed-to object.">release</ref>(),<sp/><ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>&lt;D&gt;(<sp/>p.<ref refid="classstd_1_1unique__ptr_1a60643bf34d2700dee88c7a9ed164c8c3" kindref="member" tooltip="Gets the deleter in use.">get_deleter</ref>()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Destroys<sp/>the<sp/>pointed-to<sp/>object<sp/>by<sp/>calling<sp/>the<sp/>deleter<sp/>(if<sp/>the<sp/>pointer<sp/>is</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/>*<sp/>not<sp/>null).</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="classstd_1_1unique__ptr_1a4b7ef2507f1f1694adb428448325d53b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a4b7ef2507f1f1694adb428448325d53b" kindref="member" tooltip="Destroys the pointed-to object by calling the deleter (if the pointer is not null).">~unique_ptr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>call_deleter();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Destructive<sp/>assignment:<sp/>moves<sp/>ownership<sp/>of<sp/>the<sp/>object<sp/>pointed-to<sp/>by<sp/>\a<sp/>p</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>this<sp/>%unique_ptr.<sp/><sp/>The<sp/>object<sp/>pointed-to<sp/>by<sp/>this<sp/>%unique_ptr,<sp/>if<sp/>any,</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/>*<sp/>is<sp/>deleted.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>The<sp/>%unique_ptr<sp/>to<sp/>move<sp/>from.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>*this.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="classstd_1_1unique__ptr_1a2fcbd0e8ec3aa619f444bc25d11675b1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1a2fcbd0e8ec3aa619f444bc25d11675b1" kindref="member" tooltip="Destructive assignment: moves ownership of the object pointed-to by p to this unique_ptr.">operator=</ref>(<sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr&gt;</ref><sp/>&amp;p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1ae87a32ca64200615fec8e2219336a502" kindref="member" tooltip="Sets the pointer to the given value or null if none.">reset</ref>(<sp/>p.release()<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>()<sp/>=<sp/><ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>(<sp/>p.get_deleter()<sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Destructive<sp/>assignment:<sp/>moves<sp/>ownership<sp/>of<sp/>the<sp/>object<sp/>pointed-to<sp/>by<sp/>\a<sp/>p</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>this<sp/>%unique_ptr.<sp/><sp/>The<sp/>object<sp/>pointed-to<sp/>by<sp/>this<sp/>%unique_ptr,<sp/>if<sp/>any,</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/>*<sp/>is<sp/>deleted.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>U<sp/>The<sp/>pointed-to<sp/>type<sp/>such<sp/>that<sp/>\c<sp/>U*<sp/>is<sp/>convertible<sp/>to<sp/>\c<sp/>T*.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@tparam<sp/>E<sp/>The<sp/>deleter<sp/>of<sp/>\a<sp/>p.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>The<sp/>%unique_ptr<sp/>to<sp/>move<sp/>from.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>*this.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="316" refid="classstd_1_1unique__ptr_1aa7bf4e93a9831c85e028713d04d0c851" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1aa7bf4e93a9831c85e028713d04d0c851" kindref="member" tooltip="Destructive assignment: moves ownership of the object pointed-to by p to this unique_ptr.">operator=</ref>(<sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv</ref>&lt;<ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr&lt;U,E&gt;</ref><sp/>&gt;<sp/>&amp;p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1ae87a32ca64200615fec8e2219336a502" kindref="member" tooltip="Sets the pointer to the given value or null if none.">reset</ref>(<sp/>p.release()<sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>()<sp/>=<sp/><ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>(<sp/>p.get_deleter()<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Assignment<sp/>from<sp/>null:<sp/>equivalent<sp/>to<sp/>\c<sp/>reset().</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>*this.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classstd_1_1unique__ptr_1a718be713c6c5535ea527d526b1eec23b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1a718be713c6c5535ea527d526b1eec23b" kindref="member" tooltip="Assignment from null: equivalent to reset().">operator=</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1ae87a32ca64200615fec8e2219336a502" kindref="member" tooltip="Sets the pointer to the given value or null if none.">reset</ref>();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Dereferences<sp/>the<sp/>pointer.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>pointed-to<sp/>object.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classstd_1_1unique__ptr_1a4796b44ccbd145dff61e6add67e83ef3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1aa75d4cd6d29aa993a3a4e6a2e65f65b1" kindref="member">element_type</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1a4796b44ccbd145dff61e6add67e83ef3" kindref="member" tooltip="Dereferences the pointer.">operator*</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>pointer.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>pointer.</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classstd_1_1unique__ptr_1a7eef945a0201a6919db03eb5efdd1576" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref><sp/><ref refid="classstd_1_1unique__ptr_1a7eef945a0201a6919db03eb5efdd1576" kindref="member" tooltip="Gets the pointer.">operator-&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>pointer.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>pointer.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="classstd_1_1unique__ptr_1ac49c1d319060bdfff94a3a82402342dc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>deleter<sp/>in<sp/>use.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>deleter.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="classstd_1_1unique__ptr_1a60643bf34d2700dee88c7a9ed164c8c3" refkind="member"><highlight class="normal"><sp/><sp/>deleter_reference<sp/><ref refid="classstd_1_1unique__ptr_1a60643bf34d2700dee88c7a9ed164c8c3" kindref="member" tooltip="Gets the deleter in use.">get_deleter</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>deleter<sp/>in<sp/>use.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>deleter.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="classstd_1_1unique__ptr_1a15e7147ddb2817ea045999005d148231" refkind="member"><highlight class="normal"><sp/><sp/>deleter_const_reference<sp/><ref refid="classstd_1_1unique__ptr_1a15e7147ddb2817ea045999005d148231" kindref="member" tooltip="Gets the deleter in use.">get_deleter</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Releases<sp/>ownership<sp/>of<sp/>the<sp/>pointed-to<sp/>object.<sp/><sp/>Said<sp/>object<sp/>will<sp/>now<sp/>be<sp/>the</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/>*<sp/>responsibility<sp/>of<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="classstd_1_1unique__ptr_1afcc631781d2bf472dad301927de4ffed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref><sp/><ref refid="classstd_1_1unique__ptr_1afcc631781d2bf472dad301927de4ffed" kindref="member" tooltip="Releases ownership of the pointed-to object.">release</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Sets<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>given<sp/>value<sp/>or<sp/>null<sp/>if<sp/>none.<sp/><sp/>The<sp/>previosly</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/>*<sp/>pointed-to<sp/>object,<sp/>if<sp/>any,<sp/>is<sp/>deleted.<sp/><sp/>However,<sp/>if<sp/>\a<sp/>p<sp/>equals<sp/>the</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/>*<sp/>current<sp/>pointer<sp/>value,<sp/>then<sp/>this<sp/>function<sp/>does<sp/>nothing.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>The<sp/>new<sp/>pointer<sp/>value,<sp/>if<sp/>any.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="classstd_1_1unique__ptr_1ae87a32ca64200615fec8e2219336a502" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr_1ae87a32ca64200615fec8e2219336a502" kindref="member" tooltip="Sets the pointer to the given value or null if none.">reset</ref>(<sp/><ref refid="classstd_1_1unique__ptr_1a42ef37e17e1558386f0116c6d862310b" kindref="member">pointer</ref><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>!=<sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>call_deleter();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Swaps<sp/>the<sp/>pointer<sp/>and<sp/>deleter<sp/>with<sp/>that<sp/>of<sp/>another<sp/>%unique_ptr.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>p<sp/>The<sp/>%unique_ptr<sp/>to<sp/>swap<sp/>with.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="classstd_1_1unique__ptr_1a9d972355cbc02ff72735e29aa771e197" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr_1a9d972355cbc02ff72735e29aa771e197" kindref="member" tooltip="Swaps the pointer and deleter with that of another unique_ptr.">swap</ref>(<sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref><sp/>&amp;p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a9d972355cbc02ff72735e29aa771e197" kindref="member" tooltip="Swaps the pointer and deleter with that of another unique_ptr.">std::swap</ref>(<sp/>storage_,<sp/>p.storage_<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Conversion<sp/>to<sp/>\c<sp/>bool.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>pointer<sp/>is<sp/>not<sp/>null;<sp/>\c<sp/>false<sp/>only<sp/>if</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>pointer<sp/>is<sp/>null.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="classstd_1_1unique__ptr_1a7650d43d8c3e0b3b07b94013b85fd833" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">operator explicit_bool::type</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a936d0a29441bd9af878af913d3ff3a10" kindref="member" tooltip="Converts the given value to an explicit bool value.">explicit_bool::value_of</ref>(<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage&lt;T,D&gt;</ref><sp/>storage_;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>call_deleter()<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a60643bf34d2700dee88c7a9ed164c8c3" kindref="member" tooltip="Gets the deleter in use.">get_deleter</ref>()(<sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>(<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1a2fcbd0e8ec3aa619f444bc25d11675b1" kindref="member" tooltip="Destructive assignment: moves ownership of the object pointed-to by p to this unique_ptr.">operator=</ref>(<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>(<sp/>unique_ptr&lt;U,E&gt;&amp;<sp/>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1a2fcbd0e8ec3aa619f444bc25d11675b1" kindref="member" tooltip="Destructive assignment: moves ownership of the object pointed-to by p to this unique_ptr.">operator=</ref>(<sp/>unique_ptr&lt;U,E&gt;&amp;<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="437" refid="classstd_1_1unique__ptr_1a3e903402f7e996d4de552ba33d0833c9" refkind="member"><highlight class="normal"><sp/><sp/>operator<sp/>::zorba::internal::rv&lt;unique_ptr&gt;&amp;()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);<sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="classstd_1_1unique__ptr_1adde29eaf655f86ca8e18cb6a371ce3de" refkind="member"><highlight class="normal"><sp/><sp/>operator<sp/>::zorba::internal::rv&lt;unique_ptr&gt;<sp/>const&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr&gt;</ref><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);<sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal">};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="446"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="447"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>Specialization<sp/>of<sp/>%unique_ptr<sp/>for<sp/>arrays.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>T<sp/>The<sp/>pointed-to<sp/>array<sp/>type.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>D<sp/>The<sp/>deleter<sp/>to<sp/>use,<sp/>if<sp/>any.<sp/><sp/>It<sp/>must<sp/>be<sp/>either<sp/>a<sp/>function<sp/>pointer</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/>or<sp/>a<sp/>functor<sp/>such<sp/>that<sp/>if<sp/>\c<sp/>d<sp/>is<sp/>of<sp/>type<sp/>\a<sp/>D<sp/>and<sp/>\c<sp/>p<sp/>is<sp/>of<sp/>type<sp/>\a<sp/>T*,</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>then<sp/>\c<sp/>d(p)<sp/>is<sp/>valid<sp/>and<sp/>deletes<sp/>the<sp/>pointed-to<sp/>object.<sp/><sp/>The<sp/>deleter<sp/>must</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/>handle<sp/>null<sp/>pointers.<sp/><sp/>Note<sp/>that<sp/>\a<sp/>D<sp/>may<sp/>be<sp/>a<sp/>reference<sp/>type.</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="459" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref>&lt;T[],D&gt;<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::add_reference&lt;D&gt;::type</ref></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deleter_reference;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">ZORBA_TR1_NS::add_reference&lt;D const&gt;::type</ref></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deleter_const_reference;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool" kindref="compound" tooltip="Helper class for implementing a solution to the &amp;quot;explicit bool conversion&amp;quot; problem.">zorba::internal::ztd::explicit_bool</ref><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool" kindref="compound" tooltip="Helper class for implementing a solution to the &amp;quot;explicit bool conversion&amp;quot; problem.">explicit_bool</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="469" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a03c2237ccbea9ea94d85b009a556ca6a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a03c2237ccbea9ea94d85b009a556ca6a" kindref="member">element_type</ref>;</highlight></codeline>
<codeline lineno="470" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="471" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a24301850b9bd360628f5bc9fb32d1729" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a24301850b9bd360628f5bc9fb32d1729" kindref="member">deleter_type</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a407720f560d01597477d3b333fa435a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a407720f560d01597477d3b333fa435a4" kindref="member">unique_ptr</ref>(<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" kindref="member">pointer</ref><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>throw()<sp/>:<sp/>storage_(<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1ad1e8b9b78ffc354df391368fd0741bd9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1ad1e8b9b78ffc354df391368fd0741bd9" kindref="member">unique_ptr</ref>(<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" kindref="member">pointer</ref><sp/>p,<sp/>deleter_reference<sp/>d<sp/>)<sp/>:<sp/>storage_(<sp/>p,<sp/>d<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a978cf9124f16fc376d93bca8dbc90308" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a978cf9124f16fc376d93bca8dbc90308" kindref="member">~unique_ptr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>call_deleter();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1aadb40ef8a13498e0efb2bcbeb404f75f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1aadb40ef8a13498e0efb2bcbeb404f75f" kindref="member">operator=</ref>(<sp/><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr&gt;</ref><sp/>&amp;p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1ae87a32ca64200615fec8e2219336a502" kindref="member" tooltip="Sets the pointer to the given value or null if none.">reset</ref>(<sp/>p.release()<sp/>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>()<sp/>=<sp/><ref refid="namespacestd_1ae27ad1e46de908333a2e28e540ea0b46" kindref="member">move</ref>(<sp/>p.get_deleter()<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a7753be342997e3b22fd4cde18f6e5ae4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" kindref="member">pointer</ref><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a538e6417320d6a1656fd45d21ea85482" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a538e6417320d6a1656fd45d21ea85482" kindref="member">operator[]</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()[i];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1ab03b80871dd022bf6209331f2e242cf9" refkind="member"><highlight class="normal"><sp/><sp/>deleter_reference<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1ab03b80871dd022bf6209331f2e242cf9" kindref="member">get_deleter</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a4881c24b3759d29856a3f7b81fccf759" refkind="member"><highlight class="normal"><sp/><sp/>deleter_const_reference<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a4881c24b3759d29856a3f7b81fccf759" kindref="member">get_deleter</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a5c05e9eb3289b4c9ec181ac1dad1d291" kindref="member">deleter</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1afb34738ac8677cc494d88fb07603e55a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" kindref="member">pointer</ref><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1afb34738ac8677cc494d88fb07603e55a" kindref="member">release</ref>()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" kindref="member">pointer</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1ae1c0f6f191b63d1e51a3e8d9a9476735" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1ae1c0f6f191b63d1e51a3e8d9a9476735" kindref="member">reset</ref>(<sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0068e6f8c9a872913dd67e5c13da3cfe" kindref="member">pointer</ref><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>!=<sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>call_deleter();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0aeb873106912ba2a02eb4ea6c6706de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a0aeb873106912ba2a02eb4ea6c6706de" kindref="member">swap</ref>(<sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr</ref><sp/>&amp;p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a9d972355cbc02ff72735e29aa771e197" kindref="member" tooltip="Swaps the pointer and deleter with that of another unique_ptr.">std::swap</ref>(<sp/>storage_,<sp/>p.storage_<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a7fd196f9bd38d2677fb290a92e767881" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1time_1_1calendar_1a7c8c84a1ed5401ddae49da3f01861c87" kindref="member">operator explicit_bool::type</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1ztd_1_1explicit__bool_1a936d0a29441bd9af878af913d3ff3a10" kindref="member" tooltip="Converts the given value to an explicit bool value.">explicit_bool::value_of</ref>(<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr__storage" kindref="compound">unique_ptr_storage&lt;T,D&gt;</ref><sp/>storage_;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>call_deleter()<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a60643bf34d2700dee88c7a9ed164c8c3" kindref="member" tooltip="Gets the deleter in use.">get_deleter</ref>()(<sp/>storage_.<ref refid="classstd_1_1unique__ptr__storage_1a678bc2a961446be7cb37ba112efe096f" kindref="member">ptr_</ref><sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>(<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1a2fcbd0e8ec3aa619f444bc25d11675b1" kindref="member" tooltip="Destructive assignment: moves ownership of the object pointed-to by p to this unique_ptr.">operator=</ref>(<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>(<sp/>unique_ptr&lt;U,E&gt;&amp;<sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;<sp/><ref refid="classstd_1_1unique__ptr_1a18b9bba24966d45257126250b70783fe" kindref="member" tooltip="Default constructor.">unique_ptr</ref>&amp;<sp/><ref refid="classstd_1_1unique__ptr_1a2fcbd0e8ec3aa619f444bc25d11675b1" kindref="member" tooltip="Destructive assignment: moves ownership of the object pointed-to by p to this unique_ptr.">operator=</ref>(<sp/>unique_ptr&lt;U,E&gt;&amp;<sp/>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="541" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1a05b62249cba335177ec23d8c8f0cc856" refkind="member"><highlight class="normal"><sp/><sp/>operator<sp/>::zorba::internal::rv&lt;unique_ptr&gt;&amp;()<sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);<sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="classstd_1_1unique__ptr_3_01T[]_00_01D_01_4_1aabc8b999cc86187e0e39a32750f484f7" refkind="member"><highlight class="normal"><sp/><sp/>operator<sp/>::zorba::internal::rv&lt;unique_ptr&gt;<sp/>const&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1rv" kindref="compound">zorba::internal::rv&lt;unique_ptr&gt;</ref><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);<sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal">};</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="551"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_UNIQUE_PTR_RELOP(OP)<sp/>\</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>T1,typename<sp/>D1,typename<sp/>T2,typename<sp/>D2&gt;<sp/>inline<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="554"><highlight class="preprocessor"><sp/><sp/>bool<sp/>operator<sp/>OP(<sp/>unique_ptr&lt;T1,D1&gt;<sp/>const<sp/>&amp;a,<sp/>unique_ptr&lt;T2,D2&gt;<sp/>const<sp/>&amp;b<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>a.get()<sp/>OP<sp/>b.get();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" kindref="member">ZORBA_UNIQUE_PTR_RELOP</ref>(==)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><ref refid="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" kindref="member">ZORBA_UNIQUE_PTR_RELOP</ref>(!=)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><ref refid="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" kindref="member">ZORBA_UNIQUE_PTR_RELOP</ref>(&lt;<sp/>)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><ref refid="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" kindref="member">ZORBA_UNIQUE_PTR_RELOP</ref>(&lt;=)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><ref refid="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" kindref="member">ZORBA_UNIQUE_PTR_RELOP</ref>(&gt;<sp/>)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><ref refid="unique__ptr_8h_1aa2c52f48c18c65a621ce385d8be6685c" kindref="member">ZORBA_UNIQUE_PTR_RELOP</ref>(&gt;=)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ZORBA_UNIQUE_PTR_RELOP</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="567"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="568"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="569"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>Swaps<sp/>the<sp/>pointed-to<sp/>object<sp/>and<sp/>deleter<sp/>of<sp/>one<sp/>unique_ptr<sp/>with<sp/>that<sp/>of</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>another.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>@param<sp/>a<sp/>The<sp/>first<sp/>unique_ptr.</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>@param<sp/>b<sp/>The<sp/>second<sp/>unique_ptr.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="namespacestd_1adbe8c1e1d587385493a3076064b111b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1aafbcaca1306bb08270264881f31f120f" kindref="member">swap</ref>(<sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr&lt;T,D&gt;</ref><sp/>&amp;a,<sp/><ref refid="classstd_1_1unique__ptr" kindref="compound">unique_ptr&lt;T,D&gt;</ref><sp/>&amp;b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>a.<ref refid="classstd_1_1unique__ptr_1a9d972355cbc02ff72735e29aa771e197" kindref="member" tooltip="Swaps the pointer and deleter with that of another unique_ptr.">swap</ref>(<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="582"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="583"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_HAVE_UNIQUE_PTR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_UNIQUE_PTR_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/internal/unique_ptr.h"/>
  </compounddef>
</doxygen>
