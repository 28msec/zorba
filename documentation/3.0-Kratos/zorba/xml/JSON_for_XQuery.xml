<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="JSON_for_XQuery" kind="page">
    <compoundname>JSON_for_XQuery</compoundname>
    <title>JSONiq for XQuery users tutorial</title>
    <detaileddescription>
<para><htmlonly>&lt;html&gt;&lt;head&gt;&lt;title&gt;JSON for XQuery&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;@import url(&apos;https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&apos;);ol{margin:0;padding:0}.c9{padding-left:0pt;text-align:justify;margin-left:36pt}.c7{list-style-type:disc;margin:0;padding:0}.c19{max-width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c20{color:inherit;text-decoration:inherit}.c11{text-indent:-13pt;margin-left:77pt}.c2{font-size:36pt;font-weight:bold}.c21{color:#1155cc;text-decoration:underline}.c16{font-weight:bold}.c3{color:#38761d}.c15{text-indent:120pt}.c22{color:#4a86e8}.c17{text-align:center}.c13{margin-left:49.5pt}.c6{text-align:right}.c10{text-indent:156pt}.c0{font-family:&quot;Consolas&quot;}.c12{text-indent:144pt}.c14{text-align:justify}.c8{text-indent:139.5pt}.c5{margin-left:144pt}.c18{font-style:italic}.c4{height:11pt}.c1{direction:ltr}.title{padding-top:24pt;line-height:1.15;text-align:center;color:#4a86e8;font-size:36pt;font-family:&quot;Arial&quot;;font-weight:bold;padding-bottom:6pt}.subtitle{padding-top:18pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:24pt;font-family:&quot;Georgia&quot;;padding-bottom:4pt}li{color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}p{color:#000000;font-size:11pt;margin:0;font-family:&quot;Arial&quot;}h1{padding-top:24pt;line-height:1.15;text-align:left;color:#4a86e8;font-size:24pt;font-family:&quot;Arial&quot;;font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;line-height:1.15;text-align:left;color:#ff9900;font-size:18pt;font-family:&quot;Arial&quot;;font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;line-height:1.15;text-align:left;color:#000000;font-size:14pt;font-family:&quot;Arial&quot;;font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;line-height:1.15;text-align:left;color:#000000;font-size:12pt;font-family:&quot;Arial&quot;;font-weight:bold;padding-bottom:2pt}h5{padding-top:11pt;line-height:1.15;text-align:left;color:#000000;font-size:11pt;font-family:&quot;Arial&quot;;font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;line-height:1.15;text-align:left;color:#000000;font-size:10pt;font-family:&quot;Arial&quot;;font-weight:bold;padding-bottom:2pt}&lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c19&quot;&gt;&lt;p class=&quot;c17 c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;JSONiq for XQuery users&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1 c15&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1 c17&quot;&gt;&lt;span&gt;This tutorial introduces the JSONiq language, which declaratively manipulates JSON data.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c17 c1&quot;&gt;&lt;span&gt;Why don&amp;#39;t you go ahead can try the queries of this document on our online demo interface?&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c17 c1&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c21 c16&quot;&gt;&lt;a class=&quot;c20&quot; href=&quot;http://www.zorba-xquery.com/html/jsoniq&quot;&gt;http://www.zorba-xquery.com/html/jsoniq&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.f453h84m2u1a&quot;&gt;&lt;/a&gt;&lt;span&gt;JSON&lt;/span&gt;&lt;/h1&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;As explained on &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;&lt;a class=&quot;c20&quot; href=&quot;http://www.json.org/&quot;&gt;http://www.json.org/&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, JSON is a lightweight data-interchange format designed for humans as well as for computers. It supports as values:&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c7&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;c9 c1&quot;&gt;&lt;span&gt;objects (string-to-value map)&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;c9 c1&quot;&gt;&lt;span&gt;arrays (ordered sequence of values)&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;c1 c9&quot;&gt;&lt;span&gt;strings&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;c9 c1&quot;&gt;&lt;span&gt;numbers&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;c9 c1&quot;&gt;&lt;span&gt;booleans (true, false)&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;c9 c1&quot;&gt;&lt;span&gt;null&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;JSONiq extends XQuery to query and update JSON data, like XML data.&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.qtfakecy3fr7&quot;&gt;&lt;/a&gt;&lt;span&gt;Elevator Pitch&lt;/span&gt;&lt;/h1&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;Here is an appetizer before we start the tutorial from scratch.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $stores :=&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;[&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 1, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 4, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $sales := [&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;broiler&amp;quot;, &amp;quot;store number&amp;quot; : 1, &amp;quot;quantity&amp;quot; : 20 &amp;nbsp;},&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;toaster&amp;quot;, &amp;quot;store number&amp;quot; : 2, &amp;quot;quantity&amp;quot; : 100 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;toaster&amp;quot;, &amp;quot;store number&amp;quot; : 2, &amp;quot;quantity&amp;quot; : 50 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;toaster&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 50 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;blender&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 100 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;blender&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 150 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;socks&amp;quot;, &amp;quot;store number&amp;quot; : 1, &amp;quot;quantity&amp;quot; : 500 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;socks&amp;quot;, &amp;quot;store number&amp;quot; : 2, &amp;quot;quantity&amp;quot; : 10 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;shirt&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 10 }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $join :=&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; for $store in jn:members($stores), $sale in jn:members($sales)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; where $store(&amp;quot;store number&amp;quot;) = $sale(&amp;quot;store number&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; return {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;quot;nb&amp;quot; : $store(&amp;quot;store number&amp;quot;),&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;quot;state&amp;quot; : $store(&amp;quot;state&amp;quot;),&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;quot;sold&amp;quot; : $sale(&amp;quot;product&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return [$join]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;[ &lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 1, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;broiler&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 1, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;socks&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;toaster&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;toaster&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;socks&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;toaster&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;blender&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;blender&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; { &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;shirt&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.yugk1mszt0re&quot;&gt;&lt;/a&gt;&lt;span&gt;And here you go&lt;/span&gt;&lt;/h1&gt;&lt;h2 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.39rm37noeh9g&quot;&gt;&lt;/a&gt;&lt;span&gt;JSONiq types&lt;/span&gt;&lt;/h2&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;JSONiq maps JSON types to the XQuery data model. Numbers are xs:integer, xs:decimal or xs:double, strings are xs:string, true and false are xs:boolean and null is the unique value of a new atomic type jn:null.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;By default, in JSONiq, for convenience, true, false and null are recognized as literals instead of the classical XQuery path expression semantics (i.e., they would otherwise navigate to XML elements named &amp;quot;true&amp;quot;, &amp;quot;false&amp;quot; or &amp;quot;null&amp;quot;). However, this can be deactivated to use the path expression semantics.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;JSONiq also introduces new items: objects and arrays. Objects are sets of key/value pairs. Arrays have members which are values. Values are objects, arrays, XML nodes, functions or atomic items. Note that, in particular, Arrays can nest, unlike sequences.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;The new item types for objects and arrays are object() and array(). json-item() is a supertype of both. structured-item() is a supertype for json-item() and node().&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.j0wg8654ivtw&quot;&gt;&lt;/a&gt;&lt;span&gt;JSON Constructors&lt;/span&gt;&lt;/h2&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;JSONiq introduces JSON constructors, in a similar way to XML constructors.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;You can put any expression in a array. The items in the sequence produced by the expression will become members of the array:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;[ 1 to 10 ]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;Or you can dynamically compute an object:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;quot;Greeting&amp;quot; : let $d := &amp;quot;Mister Spock&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return concat(&amp;quot;Hello, &amp;quot;, $d),&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;quot;Farewell&amp;quot; : string-join((&amp;quot;Live&amp;quot;, &amp;quot;long&amp;quot;, &amp;quot;and&amp;quot;, &amp;quot;prosper&amp;quot;),&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;quot; &amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;Greeting&amp;quot; : &amp;quot;Hello, Mister Spock&amp;quot;, &amp;quot;Farewell&amp;quot; : &amp;quot;Live long and prosper&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;You can also dynamically generate singleton objects:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;{ concat(&amp;quot;Square of &amp;quot;, 2) : 2 * 2 }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;Square of 2&amp;quot; : 4 }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;and then use the {| |} construct to wrap several of them in a bigger object:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;{|&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; for $i in 1 to 10&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; return { concat(&amp;quot;Square of &amp;quot;, $i) : $i * $i }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;|}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 1&amp;quot; : 1,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 2&amp;quot; : 4,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 3&amp;quot; : 9,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1 c5&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 4&amp;quot; : 16,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 5&amp;quot; : 25,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 6&amp;quot; : 36,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 7&amp;quot; : 49,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 8&amp;quot; : 64,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 9&amp;quot; : 81,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Square of 10&amp;quot; : 100&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c5 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.qe57mgdf5ql&quot;&gt;&lt;/a&gt;&lt;span&gt;JSON as a subset of JSONiq&lt;/span&gt;&lt;/h2&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;As a rule of thumb, a well-formed JSON document is a JSONiq expression as well. This means that you can copy-and-paste a JSON document into a query. The following are JSONiq queries that are &amp;quot;idempotent&amp;quot; (they just output themselves):&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;{ &amp;quot;pi&amp;quot; : 3.14, &amp;quot;sq2&amp;quot; : 1.4 }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;pi&amp;quot; : 3.14, &amp;quot;sq2&amp;quot; : 1.4 }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1 c4&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;[ 2, 3, 5, 7, 11, 13 ]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;[ 2, 3, 5, 7, 11, 13 ]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;quot;operations&amp;quot; : [&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; { &amp;quot;binary&amp;quot; : [ &amp;quot;and&amp;quot;, &amp;quot;or&amp;quot;] },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; { &amp;quot;unary&amp;quot; : [&amp;quot;not&amp;quot;] }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; ],&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;quot;bits&amp;quot; : [&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; 0, 1&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; ]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c0 c3&quot;&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; &amp;quot;operations&amp;quot; : [&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; &amp;nbsp; { &amp;quot;binary&amp;quot; : [ &amp;quot;and&amp;quot;, &amp;quot;or&amp;quot; ] },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1 c12&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; &amp;nbsp; { &amp;quot;unary&amp;quot; : [ &amp;quot;not&amp;quot; ] }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; ],&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; &amp;quot;bits&amp;quot; : [&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; &amp;nbsp; 0, 1&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp; ]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c12 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;This works with objects, arrays (even nested), strings, numbers, booleans, null. &lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;The exceptions to this rule (but we are working on it!) are that:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span class=&quot;c18&quot;&gt;(i) empty objects are not recognized&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span class=&quot;c18&quot;&gt;(ii) characters escaped with the \ in JSON strings are not recognized, XML character references are recognized instead.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c0 c18&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;It also works the other way round: if your query outputs an object or an array, you can directly use it as a JSON document.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.dewn8sw3husv&quot;&gt;&lt;/a&gt;&lt;span&gt;JSON Navigation&lt;/span&gt;&lt;/h1&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;Up to now, you learnt how to compose expressions so as to do some computations and to build objects and arrays. It also works the other way round: if you have some JSON data, you can access it and navigate.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;All you need to know is: JSONiq views&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c7&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;c9 c1&quot;&gt;&lt;span&gt;an array as an ordered list of values,&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;c9 c1&quot;&gt;&lt;span&gt;an object as a set of name/value pairs&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 class=&quot;c14 c1&quot;&gt;&lt;a name=&quot;h.zcnazhl6374z&quot;&gt;&lt;/a&gt;&lt;span&gt;Objects&lt;/span&gt;&lt;/h2&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;You can use an object as if it were a function and pass the call an argument of type xs:string. It will return the value associated thereto:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $person := {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;first name&amp;quot; : &amp;quot;Sarah&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;age&amp;quot; : 13,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;gender&amp;quot; : &amp;quot;female&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;friends&amp;quot; : [ &amp;quot;Jim&amp;quot;, &amp;quot;Mary&amp;quot;, &amp;quot;Jennifer&amp;quot;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return $person(&amp;quot;first name&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c10 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;quot;Sarah&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;You can also ask for all keys in an object:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $person := {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;Sarah&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;age&amp;quot; : 13,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;gender&amp;quot; : &amp;quot;female&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;friends&amp;quot; : [ &amp;quot;Jim&amp;quot;, &amp;quot;Mary&amp;quot;, &amp;quot;Jennifer&amp;quot;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return { &amp;quot;keys&amp;quot; : [ jn:keys($person)] }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1 c11&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;keys&amp;quot; : [ &amp;quot;name&amp;quot;, &amp;quot;age&amp;quot;, &amp;quot;gender&amp;quot;, &amp;quot;friends&amp;quot; ] }&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.30wafxvenhgy&quot;&gt;&lt;/a&gt;&lt;span&gt;Arrays&lt;/span&gt;&lt;/h2&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;You can use an array as if it were a function and pass the call an argument of type xs:integer. It will return the entry at that position:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $friends := [ &amp;quot;Jim&amp;quot;, &amp;quot;Mary&amp;quot;, &amp;quot;Jennifer&amp;quot;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return $friends(2)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c10 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;Mary&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;It is also possible to get the size of an array:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1 c10&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $person := {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;Sarah&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;age&amp;quot; : 13,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;gender&amp;quot; : &amp;quot;female&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;friends&amp;quot; : [ &amp;quot;Jim&amp;quot;, &amp;quot;Mary&amp;quot;, &amp;quot;Jennifer&amp;quot;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return { &amp;quot;how many friends&amp;quot; : jn:size($person(&amp;quot;friends&amp;quot;)) }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c10 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;how many friends&amp;quot; : 3 }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;For convenience, there is a function that returns all elements in an array, as a sequence:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $person := {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;Sarah&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;age&amp;quot; : 13,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;gender&amp;quot; : &amp;quot;female&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;friends&amp;quot; : [ &amp;quot;Jim&amp;quot;, &amp;quot;Mary&amp;quot;, &amp;quot;Jennifer&amp;quot;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return jn:members($person(&amp;quot;friends&amp;quot;))&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c10 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;Jim Mary Jennifer&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.eb0bxle2oykl&quot;&gt;&lt;/a&gt;&lt;span&gt;Relational Algebra&lt;/span&gt;&lt;/h1&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;Remember SQL&amp;#39;s SELECT FROM WHERE statements? JSONiq inherits selection, projection and join capability from XQuery FLWOR expressions. In order to traverse an array, jn:members() converts it into a sequence which can then be iterated over by a FLWOR expression.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $stores :=&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;[&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 1, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; { &amp;quot;store number&amp;quot; : 4, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $sales := [&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;broiler&amp;quot;, &amp;quot;store number&amp;quot; : 1, &amp;quot;quantity&amp;quot; : 20 &amp;nbsp;},&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;toaster&amp;quot;, &amp;quot;store number&amp;quot; : 2, &amp;quot;quantity&amp;quot; : 100 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;toaster&amp;quot;, &amp;quot;store number&amp;quot; : 2, &amp;quot;quantity&amp;quot; : 50 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;toaster&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 50 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;blender&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 100 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;blender&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 150 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;socks&amp;quot;, &amp;quot;store number&amp;quot; : 1, &amp;quot;quantity&amp;quot; : 500 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;socks&amp;quot;, &amp;quot;store number&amp;quot; : 2, &amp;quot;quantity&amp;quot; : 10 },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;{ &amp;quot;product&amp;quot; : &amp;quot;shirt&amp;quot;, &amp;quot;store number&amp;quot; : 3, &amp;quot;quantity&amp;quot; : 10 }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $join :=&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; for $store in jn:members($stores), $sale in jn:members($sales)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; where $store(&amp;quot;store number&amp;quot;) = $sale(&amp;quot;store number&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; return {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;quot;nb&amp;quot; : $store(&amp;quot;store number&amp;quot;),&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;quot;state&amp;quot; : $store(&amp;quot;state&amp;quot;),&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;quot;sold&amp;quot; : $sale(&amp;quot;product&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return [$join]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;[ &lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 1, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;broiler&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 1, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;socks&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1 c8&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;toaster&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;toaster&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 2, &amp;quot;state&amp;quot; : &amp;quot;MA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;socks&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;toaster&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;blender&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;blender&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;nb&amp;quot; : 3, &amp;quot;state&amp;quot; : &amp;quot;CA&amp;quot;, &amp;quot;sold&amp;quot; : &amp;quot;shirt&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;nbsp;]&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.oii6pvliilhi&quot;&gt;&lt;/a&gt;&lt;span&gt;Access external data&lt;/span&gt;&lt;/h1&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;Our implementation supports collections of (and indices on) JSON objects or arrays:&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;dml:collection(&amp;quot;my:data&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;foo&amp;quot; : &amp;quot;Your&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;foo&amp;quot; : &amp;quot;Collection&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;foo&amp;quot; : &amp;quot;of&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;foo&amp;quot; : &amp;quot;JSON&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;foo&amp;quot; : &amp;quot;objects&amp;quot; }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1 c6&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;It is also possible to get JSON content with an HTTP request, or by parsing it from a string. The EXPath http-client module (described in the Zorba documentation) &amp;nbsp;allows you to make HTTP requests, and the jn:parse-json() function allows you to use the body as an object or an array.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.fopcxnkoydgt&quot;&gt;&lt;/a&gt;&lt;span&gt;JSON and XML&lt;/span&gt;&lt;/h1&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;You can use XML and JSON in the same program. An XML node can be a value in an object or array, however, arrays and object may not be children of an XML node - but you can extract atomic values or XML nodes inside objects and arrays to insert them in a new XML node.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $data := {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;quot;color&amp;quot; : &amp;quot;blue&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;quot;closed&amp;quot; : true,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;quot;points&amp;quot; : [[10,10], [20,10], [20,20], [10,20]]&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $stroke := attribute stroke { $data(&amp;quot;color&amp;quot;) }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;let $points := attribute points { jn:flatten($data(&amp;quot;points&amp;quot;)) }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; if ($data(&amp;quot;closed&amp;quot;)) then&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;lt;svg&amp;gt;&amp;lt;polygon&amp;gt;{ $stroke, $points }&amp;lt;/polygon&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; else&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;lt;svg&amp;gt;&amp;lt;polyline&amp;gt;{ $stroke, $points }&amp;lt;/polyline&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c13 c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1 c13&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;&amp;lt;svg&amp;gt;&amp;lt;polygon stroke=&amp;quot;blue&amp;quot; points=&amp;quot;10 10 20 10 20 20 10 20&amp;quot;/&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c1&quot;&gt;&lt;a name=&quot;h.bm3buqmzhtko&quot;&gt;&lt;/a&gt;&lt;span&gt;I want more&lt;/span&gt;&lt;/h1&gt;&lt;p class=&quot;c1 c14&quot;&gt;&lt;span&gt;JSONiq supports JSON updates by extending the XQuery Update Facility specification, so you can declaratively update your JSON data. JSONiq provides new expressions that produce update primitives on JSON items. The list of updates that is eventually output by your program is then applied to your JSON data.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;copy $people := {&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;John&amp;quot; : { &amp;quot;status&amp;quot; : &amp;quot;single&amp;quot; },&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&amp;quot;Mary&amp;quot; : { &amp;quot;status&amp;quot; : &amp;quot;single&amp;quot; } }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;modify (replace json value of $people(&amp;quot;John&amp;quot;)(&amp;quot;status&amp;quot;) with &amp;quot;married&amp;quot;,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; replace json value of $people(&amp;quot;Mary&amp;quot;)(&amp;quot;status&amp;quot;) with &amp;quot;married&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;return $people&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c10 c4 c1&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c6 c1&quot;&gt;&lt;span class=&quot;c3 c0&quot;&gt;{ &amp;quot;John&amp;quot; : { &amp;quot;status&amp;quot; : &amp;quot;married&amp;quot; }, &amp;quot;Mary&amp;quot; : { &amp;quot;status&amp;quot; : &amp;quot;married&amp;quot; } }&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;JSONiq works with the XQuery 3.0 standard (switch, typeswitch and try-catch expressions, universal/existential quantifiers, path expressions, filtering expressions, functors, mappings, grouping, windowing will work). The Zorba implementation is also compatible with the proprietary Zorba scripting.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c14 c1&quot;&gt;&lt;span&gt;The complete JSONiq specification is available on &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;&lt;a class=&quot;c20&quot; href=&quot;http://jsoniq.org/&quot;&gt;http://jsoniq.org/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4 c1&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</htmlonly> </para>    </detaileddescription>
  </compounddef>
</doxygen>
