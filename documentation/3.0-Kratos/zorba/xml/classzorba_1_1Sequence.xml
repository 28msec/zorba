<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classzorba_1_1Sequence" kind="class" prot="public">
    <compoundname>zorba::Sequence</compoundname>
    <includes refid="xquery__functions_8h" local="no">zorba/xquery_functions.h</includes>
    <innerclass refid="structzorba_1_1Sequence_1_1iterator" prot="public">zorba::Sequence::iterator</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzorba_1_1Sequence_1a09044eafdee04467d89d90ad19f7f945" prot="public" static="no">
        <type>T</type>
        <definition>typedef T zorba::Sequence&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" line="37" bodyfile="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzorba_1_1Sequence_1abafa8211688cc8e40049d3fba9969b60" prot="private" static="no" mutable="yes">
        <type><ref refid="classstd_1_1unique__ptr" kindref="compound">std::unique_ptr</ref>&lt; <ref refid="structzorba_1_1Sequence_1_1iterator" kindref="compound">iterator</ref> &gt;</type>
        <definition>std::unique_ptr&lt;iterator&gt; zorba::Sequence&lt; T &gt;::i_</definition>
        <argsstring></argsstring>
        <name>i_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" line="72" bodyfile="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzorba_1_1Sequence_1a08ff4a01dd545876c85cd9f5cdbbf253" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zorba::Sequence&lt; T &gt;::next</definition>
        <argsstring>(value_type *result)</argsstring>
        <name>next</name>
        <param>
          <type><ref refid="classzorba_1_1Sequence_1a09044eafdee04467d89d90ad19f7f945" kindref="member">value_type</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Gets the next element in the sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the variable to receive the next element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> only if there is a next element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" line="67" bodyfile="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1Sequence_1ae476275f8debad87eb9c42be700a0397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zorba::Sequence&lt; T &gt;::Sequence</definition>
        <argsstring>(iterator *i)</argsstring>
        <name>Sequence</name>
        <param>
          <type><ref refid="structzorba_1_1Sequence_1_1iterator" kindref="compound">iterator</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Constructs a new Sequence. </para>        </briefdescription>
        <detaileddescription>
<para>This constructor is intended only for function implementors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator that provides the elements of the sequence. Ownership of the iterator is taken. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" line="51" bodyfile="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classzorba_1_1Sequence_1a3110bac0e0f7b19bb864e84326bd14e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zorba::Sequence&lt; T &gt;::Sequence</definition>
        <argsstring>(Sequence const &amp;s)</argsstring>
        <name>Sequence</name>
        <param>
          <type><ref refid="classzorba_1_1Sequence" kindref="compound">Sequence</ref> const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Copy constructs a Sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The Sequence to copy from. Note that it is a destructive copy in that the sequence of <emphasis>s</emphasis> is &apos;i&apos; moved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" line="59" bodyfile="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" bodystart="59" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classzorba_1_1Sequence_1a9d47e519588c7c55bfb3f84e89faac22" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzorba_1_1Sequence" kindref="compound">Sequence</ref> &amp;</type>
        <definition>Sequence&amp; zorba::Sequence&lt; T &gt;::operator=</definition>
        <argsstring>(Sequence const &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzorba_1_1Sequence" kindref="compound">Sequence</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" line="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides a way for a function to return a sequence of some type <computeroutput>T</computeroutput> that can be iterated over. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of sequence. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" line="35" bodyfile="/home/wcandillon/deadlinks/include/zorba/xquery_functions.h" bodystart="35" bodyend="76"/>
    <listofallmembers>
      <member refid="classzorba_1_1Sequence_1abafa8211688cc8e40049d3fba9969b60" prot="private" virt="non-virtual"><scope>zorba::Sequence</scope><name>i_</name></member>
      <member refid="classzorba_1_1Sequence_1a08ff4a01dd545876c85cd9f5cdbbf253" prot="public" virt="non-virtual"><scope>zorba::Sequence</scope><name>next</name></member>
      <member refid="classzorba_1_1Sequence_1a9d47e519588c7c55bfb3f84e89faac22" prot="private" virt="non-virtual"><scope>zorba::Sequence</scope><name>operator=</name></member>
      <member refid="classzorba_1_1Sequence_1ae476275f8debad87eb9c42be700a0397" prot="public" virt="non-virtual"><scope>zorba::Sequence</scope><name>Sequence</name></member>
      <member refid="classzorba_1_1Sequence_1a3110bac0e0f7b19bb864e84326bd14e6" prot="public" virt="non-virtual"><scope>zorba::Sequence</scope><name>Sequence</name></member>
      <member refid="classzorba_1_1Sequence_1a09044eafdee04467d89d90ad19f7f945" prot="public" virt="non-virtual"><scope>zorba::Sequence</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
