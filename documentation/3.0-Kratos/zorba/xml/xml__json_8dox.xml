<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="xml__json_8dox" kind="file">
    <compoundname>xml_json.dox</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**<sp/>\page<sp/>xml_json<sp/>XQuery<sp/>&amp;<sp/>JSONiq<sp/>(XML<sp/>&amp;<sp/>JSON)</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">\section<sp/>two_syntaxes<sp/>One<sp/>VM,<sp/>two<sp/>syntaxes</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">In<sp/>Zorba<sp/>2.6,<sp/>we<sp/>introduced<sp/>JSON<sp/>support<sp/>with<sp/>the<sp/>new<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>language.<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>extends</highlight></codeline>
<codeline lineno="6"><highlight class="comment">XQuery<sp/>with<sp/>JSON<sp/>support<sp/>while<sp/>leaving<sp/>its<sp/>XML<sp/>functionality<sp/>(almost)<sp/>intact.<sp/>This<sp/>came<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment">the<sp/>cost<sp/>of<sp/>either<sp/>circumvoluted<sp/>syntax<sp/>for<sp/>JSON<sp/>(like<sp/>empty<sp/>objects,<sp/>or<sp/>object<sp/>lookup),</highlight></codeline>
<codeline lineno="8"><highlight class="comment">or<sp/>for<sp/>breaking<sp/>some<sp/>XML<sp/>corner-case<sp/>functionality<sp/>(like<sp/>true,<sp/>false<sp/>and<sp/>null<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="9"><highlight class="comment">recognized<sp/>as<sp/>literals<sp/>rather<sp/>than<sp/>as<sp/>XPath<sp/>name<sp/>tests).</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">We<sp/>have<sp/>received<sp/>a<sp/>lot<sp/>of<sp/>feedback<sp/>since<sp/>then,<sp/>and<sp/>realized<sp/>that,<sp/>for<sp/>those<sp/>of<sp/>you<sp/>who</highlight></codeline>
<codeline lineno="12"><highlight class="comment">would<sp/>like<sp/>to<sp/>work<sp/>primarily<sp/>with<sp/>JSON,<sp/>it<sp/>made<sp/>sense<sp/>to<sp/>let<sp/>the<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>syntax<sp/>live<sp/>its</highlight></codeline>
<codeline lineno="13"><highlight class="comment">own<sp/>life.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">Concretely,<sp/>this<sp/>means<sp/>that:</highlight></codeline>
<codeline lineno="16"><highlight class="comment">1.<sp/>The<sp/>&quot;virtual<sp/>machine&quot;<sp/>(abstract<sp/>query<sp/>language,<sp/>compiler<sp/>and<sp/>runtime)<sp/>stays<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="17"><highlight class="comment">and<sp/>fully<sp/>support<sp/>both<sp/>XML<sp/>and<sp/>JSON.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">2.<sp/>But<sp/>Zorba<sp/>supports<sp/>two<sp/>syntaxes<sp/>for<sp/>it:<sp/>XQuery<sp/>and<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;,<sp/>which<sp/>are<sp/>each<sp/>tailored<sp/>to</highlight></codeline>
<codeline lineno="19"><highlight class="comment">the<sp/>aesthetics<sp/>preferences<sp/>of<sp/>each<sp/>community.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">\section<sp/>share<sp/>What<sp/>they<sp/>share</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">XQuery<sp/>and<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>share:</highlight></codeline>
<codeline lineno="24"><highlight class="comment">-<sp/>the<sp/>same<sp/>type<sp/>system:<sp/>values<sp/>are<sp/>sequences<sp/>of<sp/>items,<sp/>which<sp/>can<sp/>be<sp/>XML<sp/>nodes,<sp/>JSON<sp/>objects</highlight></codeline>
<codeline lineno="25"><highlight class="comment">or<sp/>arrays,<sp/>atomic<sp/>items<sp/>or<sp/>functions.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">-<sp/>the<sp/>same<sp/>operations<sp/>on<sp/>atomic<sp/>types.</highlight></codeline>
<codeline lineno="27"><highlight class="comment">-<sp/>the<sp/>same<sp/>semantics<sp/>of<sp/>core<sp/>expressions<sp/>such<sp/>that<sp/>if-then-else<sp/>expressions,<sp/>FLWOR<sp/>expressions.</highlight></codeline>
<codeline lineno="28"><highlight class="comment">-<sp/>the<sp/>same<sp/>abstract<sp/>navigation<sp/>mechanism<sp/>for<sp/>both<sp/>XML<sp/>(XPath)<sp/>and<sp/>JSON<sp/>(object<sp/>and<sp/>array<sp/>lookup).</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">\section<sp/>two_faces<sp/>Two<sp/>faces<sp/>of<sp/>the<sp/>same<sp/>language</highlight></codeline>
<codeline lineno="31"><highlight class="comment">To<sp/>put<sp/>it<sp/>boldly,<sp/>in<sp/>terms<sp/>of<sp/>syntax,<sp/>XQuery<sp/>and<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>can<sp/>be<sp/>seen<sp/>as<sp/>two<sp/>faces<sp/>of<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="32"><highlight class="comment">language.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment">The<sp/>XQuery<sp/>syntax<sp/>provides<sp/>first-class<sp/>XML<sp/>support<sp/>(full<sp/>W3C<sp/>conformance),<sp/>as<sp/>well<sp/>as</highlight></codeline>
<codeline lineno="35"><highlight class="comment">second-class<sp/>JSON<sp/>support<sp/>(&quot;JSONiq<sp/>extension<sp/>to<sp/>XQuery&quot;<sp/>:<sp/>everything<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>that<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="36"><highlight class="comment">collide<sp/>with<sp/>XQuery).</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">The<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>syntax<sp/>provides<sp/>first-class<sp/>JSON<sp/>support<sp/>(nice<sp/>JavaScript-like<sp/>dot-based<sp/>object<sp/>lookup,</highlight></codeline>
<codeline lineno="39"><highlight class="comment">full<sp/>JSON<sp/>copy-and-paste<sp/>support,<sp/>etc)<sp/>and<sp/>second-class<sp/>XML<sp/>support<sp/>(&quot;XQuery<sp/>extension<sp/>to<sp/>JSONiq&quot;<sp/>:</highlight></codeline>
<codeline lineno="40"><highlight class="comment">everything<sp/>XQuery<sp/>that<sp/>does<sp/>not<sp/>collide<sp/>with<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;).</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">\section<sp/>contentious_points<sp/>Syntactic<sp/>contentious<sp/>points</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">\image<sp/>html<sp/>xquery_jsoniq_venn.png</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">Here<sp/>is<sp/>a<sp/>more<sp/>detailed<sp/>description<sp/>of<sp/>the<sp/>collisions<sp/>between<sp/>XML<sp/>and<sp/>JSON<sp/>support.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">A.<sp/>&lt;b&gt;Dots<sp/>in<sp/>NCNames<sp/>vs.<sp/>Dot-based<sp/>object<sp/>lookup.&lt;/b&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="comment">XML<sp/>names<sp/>can<sp/>contain<sp/>dots,<sp/>but<sp/>dots<sp/>are<sp/>also<sp/>used<sp/>for<sp/>object<sp/>lookup.<sp/>In<sp/>particular,</highlight></codeline>
<codeline lineno="50"><highlight class="comment">$var.key<sp/>can<sp/>be<sp/>interpreted<sp/>as<sp/>a<sp/>variable<sp/>named<sp/>&quot;var.key&quot;<sp/>or<sp/>as<sp/>a<sp/>lookup<sp/>in<sp/>the<sp/>object</highlight></codeline>
<codeline lineno="51"><highlight class="comment">$var<sp/>for<sp/>the<sp/>key<sp/>&quot;key&quot;.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">B.<sp/>&lt;b&gt;Context<sp/>item<sp/>syntax.&lt;/b&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="comment">XQuery<sp/>uses<sp/>dots<sp/>for<sp/>the<sp/>context<sp/>item<sp/>syntax.<sp/>But<sp/>combined<sp/>with<sp/>object<sp/>lookup,<sp/>it<sp/>becomes</highlight></codeline>
<codeline lineno="55"><highlight class="comment">hard<sp/>to<sp/>read:<sp/>..key<sp/>for<sp/>looking<sp/>up<sp/>the<sp/>key<sp/>&quot;key&quot;<sp/>in<sp/>the<sp/>context<sp/>item.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">C.<sp/>&lt;b&gt;String<sp/>literals.&lt;/b&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="comment">XQuery<sp/>supports<sp/>both<sp/>single-quoted<sp/>and<sp/>double-quoted<sp/>literals.<sp/>JSON<sp/>only<sp/>supports<sp/>double-quoted</highlight></codeline>
<codeline lineno="59"><highlight class="comment">literals.<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">D.<sp/>&lt;b&gt;Character<sp/>escaping.&lt;/b&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="comment">XML<sp/>uses<sp/>apersand-based<sp/>escaping,<sp/>like<sp/>&amp;#a;<sp/>or<sp/>&amp;amp;.</highlight></codeline>
<codeline lineno="63"><highlight class="comment">JSON<sp/>uses<sp/>backslash-based<sp/>escaping,<sp/>like<sp/>\u0010<sp/>or<sp/>\\.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">E.<sp/>&lt;b&gt;Object<sp/>keys.&lt;/b&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="comment">In<sp/>some<sp/>JSON<sp/>languages,<sp/>simple<sp/>object<sp/>keys<sp/>(containing<sp/>no<sp/>spaces,<sp/>etc)<sp/>may<sp/>be<sp/>unquoted.<sp/>This<sp/>collides</highlight></codeline>
<codeline lineno="67"><highlight class="comment">with<sp/>XPath<sp/>name<sp/>tests.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">F.<sp/>&lt;b&gt;true,<sp/>false<sp/>and<sp/>null<sp/>literals<sp/>vs.<sp/>XPath<sp/>name<sp/>tests.&lt;/b&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="comment">In<sp/>XQuery,<sp/>booleans<sp/>can<sp/>be<sp/>constructed<sp/>with<sp/>the<sp/>functions<sp/>true()<sp/>and<sp/>false(),<sp/>because<sp/>true<sp/>and<sp/>false</highlight></codeline>
<codeline lineno="71"><highlight class="comment">would<sp/>be<sp/>recognized<sp/>as<sp/>name<sp/>tests.<sp/>In<sp/>JSON<sp/>data,<sp/>true<sp/>and<sp/>false<sp/>appear<sp/>as<sp/>literals.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">G.<sp/>&lt;b&gt;Empty<sp/>object<sp/>vs.<sp/>empty<sp/>block<sp/>syntax.&lt;/b&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="comment">In<sp/>JSON,<sp/>the<sp/>empty<sp/>object<sp/>is<sp/>denoted<sp/>{}.</highlight></codeline>
<codeline lineno="75"><highlight class="comment">In<sp/>Zorba&apos;s<sp/>scripting<sp/>extension<sp/>to<sp/>XQuery,<sp/>{}<sp/>is<sp/>used<sp/>for<sp/>the<sp/>empty<sp/>block.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">H.<sp/>&lt;b&gt;Type<sp/>syntax.&lt;/b&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="comment">XQuery<sp/>supports<sp/>user-defined<sp/>atomic<sp/>types.<sp/>To<sp/>avoid<sp/>collisions,<sp/>XML<sp/>node<sp/>types<sp/>use<sp/>parentheses:<sp/>node(),</highlight></codeline>
<codeline lineno="79"><highlight class="comment">element(),<sp/>etc<sp/>as<sp/>well<sp/>as<sp/>namespaces:<sp/>xs:integer,<sp/>xs:string,<sp/>etc.</highlight></codeline>
<codeline lineno="80"><highlight class="comment">&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>aims<sp/>at<sp/>a<sp/>simpler<sp/>syntax,<sp/>with<sp/>no<sp/>parentheses:<sp/>integer,<sp/>string,<sp/>object,<sp/>array.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">I.<sp/>&lt;b&gt;Update<sp/>syntax.&lt;/b&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="comment">The<sp/>XQuery<sp/>update<sp/>syntax<sp/>collides<sp/>with<sp/>the<sp/>JSON<sp/>update<sp/>syntax<sp/>(insert,<sp/>delete,<sp/>replace,<sp/>rename).</highlight></codeline>
<codeline lineno="84"><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">\section<sp/>xquery_syntax<sp/>The<sp/>XQuery<sp/>Syntax</highlight></codeline>
<codeline lineno="86"><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">This<sp/>syntax<sp/>is<sp/>fully<sp/>conformant<sp/>and<sp/>backwards<sp/>compatible<sp/>with<sp/>&lt;a<sp/>href=&quot;http://www.w3.org/TR/xquery-30/&quot;&gt;XQuery<sp/>3.0&lt;/a&gt;.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">It<sp/>is<sp/>a<sp/>superset<sp/>of<sp/>XQuery.</highlight></codeline>
<codeline lineno="90"><highlight class="comment">It<sp/>is<sp/>not<sp/>a<sp/>superset<sp/>of<sp/>JSON.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">A.<sp/>No<sp/>dot-based<sp/>object<sp/>lookup<sp/>-<sp/>use<sp/>$object(&quot;key&quot;)<sp/>instead.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">B.<sp/>No<sp/>$$<sp/>for<sp/>the<sp/>context<sp/>item<sp/>-<sp/>use<sp/>.<sp/>instead.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment">D.<sp/>XML,<sp/>ampersand-based<sp/>escaping<sp/>in<sp/>string<sp/>literals<sp/>(you<sp/>can<sp/>switch<sp/>with<sp/>an<sp/>option).</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">E.<sp/>Object<sp/>keys<sp/>must<sp/>be<sp/>quoted.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">F.<sp/>No<sp/>true/false/null<sp/>literals<sp/>-<sp/>use<sp/>fn:true(),<sp/>fn:false()<sp/>and<sp/>jn:null()<sp/>instead.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">G.<sp/>{}<sp/>is<sp/>the<sp/>empty<sp/>block.<sp/>Use<sp/>{|<sp/>|}<sp/>for<sp/>the<sp/>empty<sp/>object.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">H.<sp/>XQuery-style<sp/>type<sp/>syntax:<sp/>(a)<sp/>builtin<sp/>atomic<sp/>types<sp/>must<sp/>be<sp/>prefixed<sp/>with<sp/>xs:,</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>Non-atomic<sp/>types<sp/>must<sp/>be<sp/>followed<sp/>by<sp/>parentheses<sp/>:<sp/>object()...</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c)<sp/>The<sp/>empty-sequence()<sp/>type<sp/>must<sp/>be<sp/>written<sp/>as<sp/>such.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">I.<sp/>&quot;json&quot;<sp/>is<sp/>mandatory<sp/>in<sp/>the<sp/>JSON<sp/>update<sp/>syntax.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">\section<sp/>jsoniq_syntax<sp/>The<sp/>JSONiq<sp/>syntax</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">This<sp/>syntax<sp/>fully<sp/>supports<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;,<sp/>as<sp/>well<sp/>as<sp/>some<sp/>aspects<sp/>of<sp/>the<sp/>XQuery<sp/>syntax.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">It<sp/>is<sp/>a<sp/>superset<sp/>of<sp/>JSON<sp/>(yes,<sp/>you<sp/>can<sp/>copy-and-paste<sp/>JSON<sp/>data<sp/>in<sp/>a<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>query).</highlight></codeline>
<codeline lineno="115"><highlight class="comment">It<sp/>is<sp/>not<sp/>a<sp/>superset<sp/>of<sp/>XQuery.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment">A.<sp/>No<sp/>names<sp/>containing<sp/>dots.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">B.<sp/>No<sp/>.<sp/>for<sp/>the<sp/>context<sp/>item<sp/>-<sp/>use<sp/>$$<sp/>instead.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">C.<sp/>No<sp/>single-quoted<sp/>literals.<sp/>Use<sp/>double-quoted<sp/>literals<sp/>instead.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">D.<sp/>JSON,<sp/>baskslash-based<sp/>escaping<sp/>in<sp/>string<sp/>literals<sp/>(you<sp/>can<sp/>switch<sp/>with<sp/>an<sp/>option).</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">F.<sp/>No<sp/>axis<sp/>step<sp/>allowed<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>relative<sp/>path<sp/>expression.<sp/>Instead<sp/>of<sp/>using</highlight></codeline>
<codeline lineno="126"><highlight class="comment">foo:bar,<sp/>you<sp/>must<sp/>use<sp/>$$/foo:bar.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">G.<sp/>{}<sp/>is<sp/>for<sp/>empty<sp/>objects.<sp/>Use<sp/>{;}<sp/>for<sp/>empty<sp/>blocks.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">\section<sp/>how_to_specify<sp/>How<sp/>to<sp/>specify<sp/>which<sp/>syntax<sp/>your<sp/>query<sp/>is<sp/>using</highlight></codeline>
<codeline lineno="131"><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">In<sp/>order<sp/>to<sp/>pick<sp/>a<sp/>parser,<sp/>you<sp/>can<sp/>add<sp/>a<sp/>version<sp/>declaration<sp/>on<sp/>top<sp/>of<sp/>your<sp/>module:</highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="135"><highlight class="comment">xquery<sp/>version<sp/>&quot;3.0&quot;;</highlight></codeline>
<codeline lineno="136"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">will<sp/>pick<sp/>the<sp/>XQuery<sp/>parser.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">\code</highlight></codeline>
<codeline lineno="141"><highlight class="comment">jsoniq<sp/>version<sp/>&quot;1.0&quot;;</highlight></codeline>
<codeline lineno="142"><highlight class="comment">\endcode</highlight></codeline>
<codeline lineno="143"><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">will<sp/>pick<sp/>the<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>parser.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">In<sp/>the<sp/>absence<sp/>of<sp/>any<sp/>version<sp/>declaration,<sp/>the<sp/>XQuery<sp/>parser<sp/>is<sp/>taken<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">\section<sp/>interlanguage<sp/>Interlanguage<sp/>Module<sp/>Imports</highlight></codeline>
<codeline lineno="149"><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">It<sp/>is<sp/>possible<sp/>for<sp/>a<sp/>module<sp/>written<sp/>in<sp/>XQuery<sp/>syntax<sp/>(xquery<sp/>version<sp/>declaration<sp/>or<sp/>no<sp/>version</highlight></codeline>
<codeline lineno="151"><highlight class="comment">declaration),<sp/>to<sp/>import<sp/>another<sp/>module<sp/>written<sp/>in<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>syntax<sp/>(jsoniq<sp/>version<sp/>declaration),<sp/>and</highlight></codeline>
<codeline lineno="152"><highlight class="comment">vice-versa.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">\section<sp/>legacy_jsoniq<sp/>Legacy<sp/>JSONiq<sp/>queries<sp/>can<sp/>still<sp/>be<sp/>parsed<sp/>with<sp/>the<sp/>XQuery<sp/>parser.<sp/></highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">If<sp/>you<sp/>wrote<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>queries<sp/>with<sp/>a<sp/>preceding<sp/>version<sp/>of<sp/>Zorba,<sp/>they<sp/>should<sp/>work<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="157"><highlight class="comment">XQuery<sp/>parser.<sp/>Since<sp/>it<sp/>is<sp/>the<sp/>default,<sp/>you<sp/>do<sp/>not<sp/>need<sp/>to<sp/>add<sp/>any<sp/>version<sp/>declaration.</highlight></codeline>
<codeline lineno="158"><highlight class="comment">In<sp/>order<sp/>to<sp/>restore<sp/>full<sp/>W3C<sp/>conformance<sp/>though,<sp/>true/false/null<sp/>literals<sp/>are<sp/>deprecated</highlight></codeline>
<codeline lineno="159"><highlight class="comment">in<sp/>the<sp/>XQuery<sp/>parser.<sp/>While<sp/>they<sp/>will<sp/>still<sp/>work<sp/>in<sp/>Zorba<sp/>2.9,<sp/>a<sp/>warning<sp/>will<sp/>be<sp/>issued.</highlight></codeline>
<codeline lineno="160"><highlight class="comment">They<sp/>will<sp/>be<sp/>obsolete<sp/>in<sp/>Zorba<sp/>3.0<sp/>and<sp/>considered<sp/>XPath<sp/>name<sp/>tests<sp/>again.<sp/>Of<sp/>course,</highlight></codeline>
<codeline lineno="161"><highlight class="comment">the<sp/>&lt;a<sp/>href=&quot;http://www.jsoniq.org/&quot;&gt;JSONiq&lt;/a&gt;<sp/>syntax<sp/>still<sp/>fully<sp/>supports<sp/>these<sp/>literals.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/doc/zorba/xml_json.dox"/>
  </compounddef>
</doxygen>
