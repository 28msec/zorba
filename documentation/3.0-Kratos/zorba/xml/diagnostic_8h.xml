<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="diagnostic_8h" kind="file">
    <compoundname>diagnostic.h</compoundname>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">zorba/config.h</includes>
    <includes refid="system__diagnostic_8h" local="no">zorba/internal/system_diagnostic.h</includes>
    <includes refid="qname_8h" local="no">zorba/internal/qname.h</includes>
    <includedby refid="internal_2diagnostic_8h" local="no">diagnostic.h</includedby>
    <includedby refid="qname_8h" local="no">qname.h</includedby>
    <includedby refid="system__diagnostic_8h" local="no">system_diagnostic.h</includedby>
    <includedby refid="xquery__warning_8h" local="no">xquery_warning.h</includedby>
    <incdepgraph>
      <node id="1593">
        <label>functional</label>
      </node>
      <node id="1596">
        <label>cxx_util.h</label>
        <link refid="cxx__util_8h"/>
        <childnode refid="1589" relation="include">
        </childnode>
      </node>
      <node id="1586">
        <label>diagnostic.h</label>
        <link refid="diagnostic.h"/>
        <childnode refid="1587" relation="include">
        </childnode>
        <childnode refid="1588" relation="include">
        </childnode>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1590" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
      </node>
      <node id="1599">
        <label>zorba/internal/qname.h</label>
        <link refid="qname_8h"/>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1586" relation="include">
        </childnode>
        <childnode refid="1592" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1595">
        <label>string</label>
      </node>
      <node id="1591">
        <label>map</label>
      </node>
      <node id="1597">
        <label>type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1598" relation="include">
        </childnode>
      </node>
      <node id="1600">
        <label>zorba/internal/qnames.h</label>
      </node>
      <node id="1590">
        <label>zorba/internal/system_diagnostic.h</label>
        <link refid="system__diagnostic_8h"/>
        <childnode refid="1591" relation="include">
        </childnode>
        <childnode refid="1586" relation="include">
        </childnode>
        <childnode refid="1592" relation="include">
        </childnode>
      </node>
      <node id="1594">
        <label>sstream</label>
      </node>
      <node id="1588">
        <label>iostream</label>
      </node>
      <node id="1592">
        <label>ztd.h</label>
        <link refid="ztd_8h"/>
        <childnode refid="1587" relation="include">
        </childnode>
        <childnode refid="1593" relation="include">
        </childnode>
        <childnode refid="1594" relation="include">
        </childnode>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
        <childnode refid="1597" relation="include">
        </childnode>
      </node>
      <node id="1598">
        <label>type_traits</label>
      </node>
      <node id="1589">
        <label>zorba/config.h</label>
      </node>
      <node id="1587">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1613">
        <label>xquery_stack_trace.h</label>
        <link refid="xquery__stack__trace_8h"/>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1601">
        <label>diagnostic.h</label>
        <link refid="diagnostic.h"/>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1611" relation="include">
        </childnode>
        <childnode refid="1614" relation="include">
        </childnode>
        <childnode refid="1609" relation="include">
        </childnode>
      </node>
      <node id="1609">
        <label>xquery_warning.h</label>
        <link refid="xquery__warning_8h"/>
        <childnode refid="1610" relation="include">
        </childnode>
      </node>
      <node id="1611">
        <label>qname.h</label>
        <link refid="qname_8h"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1612" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
      </node>
      <node id="1607">
        <label>zorba.h</label>
        <link refid="zorba_8h"/>
        <childnode refid="1606" relation="include">
        </childnode>
      </node>
      <node id="1605">
        <label>zorba_exception.h</label>
        <link refid="zorba__exception_8h"/>
        <childnode refid="1606" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1603">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
      </node>
      <node id="1602">
        <label>diagnostic.h</label>
        <link refid="internal_2diagnostic_8h"/>
        <childnode refid="1603" relation="include">
        </childnode>
      </node>
      <node id="1614">
        <label>system_diagnostic.h</label>
        <link refid="system__diagnostic_8h"/>
        <childnode refid="1601" relation="include">
        </childnode>
      </node>
      <node id="1604">
        <label>user_exception.h</label>
        <link refid="user__exception_8h"/>
      </node>
      <node id="1608">
        <label>xquery_exception.h</label>
        <link refid="xquery__exception_8h"/>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1609" relation="include">
        </childnode>
      </node>
      <node id="1610">
        <label>diagnostic_handler.h</label>
        <link refid="diagnostic__handler_8h"/>
        <childnode refid="1607" relation="include">
        </childnode>
      </node>
      <node id="1606">
        <label>static_context.h</label>
        <link refid="static__context_8h"/>
        <childnode refid="1607" relation="include">
        </childnode>
      </node>
      <node id="1612">
        <label>diagnostic_list.h</label>
        <link refid="diagnostic__list_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classzorba_1_1Diagnostic" prot="public">zorba::Diagnostic</innerclass>
    <innerclass refid="classzorba_1_1diagnostic_1_1QName" prot="public">zorba::diagnostic::QName</innerclass>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <innernamespace refid="namespacezorba_1_1diagnostic">zorba::diagnostic</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_DIAGNOSTIC_API_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_DIAGNOSTIC_API_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="26" refid="namespacezorba_1_1diagnostic" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">diagnostic<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>A<sp/>%QName<sp/>is<sp/>the<sp/>abstract<sp/>base<sp/>class<sp/>for<sp/>a<sp/>QName.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classzorba_1_1diagnostic_1_1QName" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ZORBA_DLL_PUBLIC<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>this<sp/>QName&apos;s<sp/>namespace<sp/>URI.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>URI.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>ns()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>this<sp/>QName&apos;s<sp/>prefix.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>prefix.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>prefix()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>this<sp/>QName&apos;s<sp/>local<sp/>name.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>local<sp/>name.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>localname()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Emits<sp/>a<sp/>QName<sp/>to<sp/>an<sp/>ostream.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>The<sp/>ostream<sp/>to<sp/>emit<sp/>to.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@param<sp/>qn<sp/>The<sp/>QName<sp/>to<sp/>emit.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\a<sp/>o.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="67"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespacezorba_1_1diagnostic_1a7e438e6a3d24b95116fea6fe4aa5517a" kindref="member" tooltip="Emits a QName to an ostream.">operator&lt;&lt;</ref>(<sp/>std::ostream<sp/>&amp;o,<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;qn<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>equality.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>QNames&apos;<sp/>namespaces<sp/>and<sp/>local<sp/>names<sp/>are</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>equal.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a9f165a17d24c1a4433f39ba063910285" kindref="member" tooltip="Compares two QNames for equality.">operator==</ref>(<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>equality.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>QNames<sp/>are<sp/>equal.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a9f165a17d24c1a4433f39ba063910285" kindref="member" tooltip="Compares two QNames for equality.">operator==</ref>(<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*q2<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>equality.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>QNames<sp/>are<sp/>equal.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="namespacezorba_1_1diagnostic_1a27733419a91cd0af81ca1a0a1ecb35d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a9f165a17d24c1a4433f39ba063910285" kindref="member" tooltip="Compares two QNames for equality.">operator==</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*q1,<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q2<sp/>==<sp/>q1;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>equality.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>StringType<sp/>The<sp/>string<sp/>type<sp/>of<sp/>\a<sp/>q2.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>QNames<sp/>are<sp/>equal.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="namespacezorba_1_1diagnostic_1a7cbd35793cadd09c35e218294e993a34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a9f165a17d24c1a4433f39ba063910285" kindref="member" tooltip="Compares two QNames for equality.">operator==</ref>(<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/>StringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q1<sp/>==<sp/>q2.c_str();</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>equality.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>StringType<sp/>The<sp/>string<sp/>type<sp/>of<sp/>\a<sp/>q1.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>QNames<sp/>are<sp/>equal.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="namespacezorba_1_1diagnostic_1a761e408accc573836b464c26813e7267" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a9f165a17d24c1a4433f39ba063910285" kindref="member" tooltip="Compares two QNames for equality.">operator==</ref>(<sp/>StringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q1.c_str()<sp/>==<sp/>q2;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>inequality.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>either<sp/>the<sp/>QNames&apos;<sp/>namespaces<sp/>or<sp/>local<sp/>names</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>are<sp/>not<sp/>equal.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="namespacezorba_1_1diagnostic_1a1a7ab0ded4a807bb4298b245b3133b9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a1a7ab0ded4a807bb4298b245b3133b9f" kindref="member" tooltip="Compares two QNames for inequality.">operator!=</ref>(<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(q1<sp/>==<sp/>q2);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>inequality.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>either<sp/>the<sp/>QNames&apos;<sp/>namespaces<sp/>or<sp/>local<sp/>names</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>are<sp/>not<sp/>equal.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="namespacezorba_1_1diagnostic_1abed0664a3698de8b2b693f40bb72766d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a1a7ab0ded4a807bb4298b245b3133b9f" kindref="member" tooltip="Compares two QNames for inequality.">operator!=</ref>(<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(q1<sp/>==<sp/>q2);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>inequality.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>either<sp/>the<sp/>QNames&apos;<sp/>namespaces<sp/>or<sp/>local<sp/>names</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>are<sp/>not<sp/>equal.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="namespacezorba_1_1diagnostic_1a75777aa492944d9f4c16499783f13a46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a1a7ab0ded4a807bb4298b245b3133b9f" kindref="member" tooltip="Compares two QNames for inequality.">operator!=</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*q1,<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(q1<sp/>==<sp/>q2);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>inequality.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>StringType<sp/>The<sp/>string<sp/>type<sp/>of<sp/>\a<sp/>q2.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>QNames<sp/>are<sp/>not<sp/>equal.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="namespacezorba_1_1diagnostic_1abf3977b033adc7855a78ba35a0ee1663" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a1a7ab0ded4a807bb4298b245b3133b9f" kindref="member" tooltip="Compares two QNames for inequality.">operator!=</ref>(<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/>StringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q1<sp/>!=<sp/>q2.c_str();</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>QNames<sp/>for<sp/>inequality.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@tparam<sp/>StringType<sp/>The<sp/>string<sp/>type<sp/>of<sp/>\a<sp/>q1.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param<sp/>q1<sp/>The<sp/>first<sp/>QName.<sp/><sp/>It<sp/>can<sp/>be<sp/>in<sp/>Clark<sp/>notation,</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;{&lt;/code&gt;&lt;em&gt;namespace&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;,<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>case<sp/>the<sp/>namespaces<sp/>and<sp/>local-names<sp/>are<sp/>compared;<sp/>or<sp/>as</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>&lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;local-name&lt;/em&gt;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>prefixes</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>and<sp/>local-names<sp/>are<sp/>compared.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>@param<sp/>q2<sp/>The<sp/>second<sp/>QName.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>QNames<sp/>are<sp/>not<sp/>equal.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StringType&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="namespacezorba_1_1diagnostic_1ab9b1dc1e4ffdbc572e14ea442401c7a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a1a7ab0ded4a807bb4298b245b3133b9f" kindref="member" tooltip="Compares two QNames for inequality.">operator!=</ref>(<sp/>StringType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q1,<sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;q2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q1.c_str()<sp/>!=<sp/>q2;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>An<sp/>diagnostic::kind<sp/>is<sp/>the<sp/>kind<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>See:<sp/>http://www.w3.org/TR/xquery-30/#id-kinds-of-errors</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9e" kindref="member" tooltip="An diagnostic::kind is the kind of error.">kind</ref><sp/>{</highlight></codeline>
<codeline lineno="228" refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9eaaaca7636da2ca777180d9eda3ad20c62" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9eaaaca7636da2ca777180d9eda3ad20c62" kindref="member">UNKNOWN_KIND</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>have<sp/>integer<sp/>value<sp/>of<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/>*<sp/>A<sp/>static<sp/>error<sp/>is<sp/>an<sp/>error<sp/>that<sp/>must<sp/>be<sp/>detected<sp/>during<sp/>the<sp/>static</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/>*<sp/>analysis<sp/>phase.<sp/>A<sp/>syntax<sp/>error<sp/>is<sp/>an<sp/>example<sp/>of<sp/>a<sp/>static<sp/>error.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9ea226b1341475c7195d80885e5dc1753fe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9ea226b1341475c7195d80885e5dc1753fe" kindref="member" tooltip="A static error is an error that must be detected during the static analysis phase.">XQUERY_STATIC</ref>,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/>*<sp/>A<sp/>dynamic<sp/>error<sp/>is<sp/>an<sp/>error<sp/>that<sp/>must<sp/>be<sp/>detected<sp/>during<sp/>the<sp/>dynamic</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/>*<sp/>evaluation<sp/>phase<sp/>and<sp/>may<sp/>be<sp/>detected<sp/>during<sp/>the<sp/>static<sp/>analysis<sp/>phase.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Numeric<sp/>overflow<sp/>is<sp/>an<sp/>example<sp/>of<sp/>a<sp/>dynamic<sp/>error.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9ea261fca0335957c8fef5a407dc96297a7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9ea261fca0335957c8fef5a407dc96297a7" kindref="member" tooltip="A dynamic error is an error that must be detected during the dynamic evaluation phase and may be dete...">XQUERY_DYNAMIC</ref>,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/>*<sp/>A<sp/>type<sp/>error<sp/>may<sp/>be<sp/>raised<sp/>during<sp/>the<sp/>static<sp/>analysis<sp/>phase<sp/>or<sp/>the<sp/>dynamic</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/>*<sp/>evaluation<sp/>phase.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/>*<sp/>During<sp/>the<sp/>static<sp/>analysis<sp/>phase,<sp/>a<sp/>type<sp/>error<sp/>occurs<sp/>when<sp/>the<sp/>static<sp/>type</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/>*<sp/>of<sp/>an<sp/>expression<sp/>does<sp/>not<sp/>match<sp/>the<sp/>expected<sp/>type<sp/>of<sp/>the<sp/>context<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>expression<sp/>occurs.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>*<sp/>During<sp/>the<sp/>dynamic<sp/>evaluation<sp/>phase,<sp/>a<sp/>type<sp/>error<sp/>occurs<sp/>when<sp/>the<sp/>dynamic</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>*<sp/>type<sp/>of<sp/>a<sp/>value<sp/>does<sp/>not<sp/>match<sp/>the<sp/>expected<sp/>type<sp/>of<sp/>the<sp/>context<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>value<sp/>occurs.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9ea61d6cd92ad93c057767a1e6ec560c75e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9ea61d6cd92ad93c057767a1e6ec560c75e" kindref="member" tooltip="A type error may be raised during the static analysis phase or the dynamic evaluation phase...">XQUERY_TYPE</ref></highlight></codeline>
<codeline lineno="256"><highlight class="normal">};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>Emits<sp/>the<sp/>given<sp/>diagnostic::kind<sp/>to<sp/>the<sp/>given<sp/>ostream.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>The<sp/>ostream<sp/>to<sp/>emit<sp/>to.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param<sp/>k<sp/>The<sp/>kind<sp/>to<sp/>emit.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\a<sp/>o.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="266"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespacezorba_1_1diagnostic_1a7e438e6a3d24b95116fea6fe4aa5517a" kindref="member" tooltip="Emits a QName to an ostream.">operator&lt;&lt;</ref>(<sp/>std::ostream<sp/>&amp;o,<sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9e" kindref="member" tooltip="An diagnostic::kind is the kind of error.">kind</ref><sp/>k<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="268"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="269"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>diagnostic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="276"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>A<sp/>%Diagnostic<sp/>is<sp/>the<sp/>base<sp/>class<sp/>for<sp/>all<sp/>Zorba<sp/>diagnostics<sp/>(errors<sp/>and</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>warnings).</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classzorba_1_1Diagnostic" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ZORBA_DLL_PUBLIC<sp/><ref refid="classzorba_1_1Diagnostic" kindref="compound" tooltip="A Diagnostic is the base class for all Zorba diagnostics (errors and warnings).">Diagnostic</ref><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>QName<sp/>for<sp/>this<sp/>diagnostic.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>QName.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1diagnostic_1_1QName" kindref="compound" tooltip="A QName is the abstract base class for a QName.">diagnostic::QName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>qname()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>kind<sp/>of<sp/>this<sp/>diagnostic.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>kind.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9e" kindref="member" tooltip="An diagnostic::kind is the kind of error.">diagnostic::kind</ref><sp/><ref refid="namespacezorba_1_1diagnostic_1a5709afb398f65a318160aa7613abfa9e" kindref="member" tooltip="An diagnostic::kind is the kind of error.">kind</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>message<sp/>of<sp/>this<sp/>diagnostic.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@return<sp/>Returns<sp/>said<sp/>message.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>message()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classzorba_1_1Diagnostic" kindref="compound" tooltip="A Diagnostic is the base class for all Zorba diagnostics (errors and warnings).">Diagnostic</ref>();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1Diagnostic" kindref="compound" tooltip="A Diagnostic is the base class for all Zorba diagnostics (errors and warnings).">Diagnostic</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>clone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>/**</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Destroys<sp/>a<sp/>%Diagnostic.<sp/><sp/>This<sp/>is<sp/>the<sp/>only<sp/>way<sp/>a<sp/>%Diagnostic<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/>*<sp/>destroyed.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>ZorbaException<sp/>may<sp/>call<sp/>clone()<sp/>and<sp/>destroy().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="classzorba_1_1Diagnostic_1afb81a2ab07a82ca366124911d4d6d09a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1ZorbaException" kindref="compound" tooltip="A ZorbaException is the base class for all Zorba exceptions.">ZorbaException</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>diagnostics<sp/>for<sp/>equality.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@param<sp/>d1<sp/>The<sp/>first<sp/>diagnostic.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@param<sp/>d2<sp/>The<sp/>second<sp/>diagnostic.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>diagnostics&apos;<sp/>QNames<sp/>are<sp/>equal.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="namespacezorba_1adf799320d83872ba0b8c9c4a140a6e97" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1adf799320d83872ba0b8c9c4a140a6e97" kindref="member" tooltip="Compares two diagnostics for equality.">operator==</ref>(<sp/><ref refid="classzorba_1_1Diagnostic" kindref="compound" tooltip="A Diagnostic is the base class for all Zorba diagnostics (errors and warnings).">Diagnostic</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;d1,<sp/><ref refid="classzorba_1_1Diagnostic" kindref="compound" tooltip="A Diagnostic is the base class for all Zorba diagnostics (errors and warnings).">Diagnostic</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;d2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1.<ref refid="classzorba_1_1Diagnostic_1ae32b80d36d617c9d142aeec331dd92c6" kindref="member" tooltip="Gets the QName for this diagnostic.">qname</ref>()<sp/>==<sp/>d2.<ref refid="classzorba_1_1Diagnostic_1ae32b80d36d617c9d142aeec331dd92c6" kindref="member" tooltip="Gets the QName for this diagnostic.">qname</ref>();</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>diagnostics<sp/>for<sp/>inequality.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@param<sp/>d1<sp/>The<sp/>first<sp/>diagnostic.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@param<sp/>d2<sp/>The<sp/>second<sp/>diagnostic.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@return<sp/>Returns<sp/>\c<sp/>true<sp/>only<sp/>if<sp/>the<sp/>diagnostics&apos;<sp/>QNames<sp/>are<sp/>not<sp/>equal.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="namespacezorba_1adfd6a24c31e042dda8845ee71335e8df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacezorba_1adfd6a24c31e042dda8845ee71335e8df" kindref="member" tooltip="Compares two diagnostics for inequality.">operator!=</ref>(<sp/><ref refid="classzorba_1_1Diagnostic" kindref="compound" tooltip="A Diagnostic is the base class for all Zorba diagnostics (errors and warnings).">Diagnostic</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;d1,<sp/><ref refid="classzorba_1_1Diagnostic" kindref="compound" tooltip="A Diagnostic is the base class for all Zorba diagnostics (errors and warnings).">Diagnostic</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;d2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(d1<sp/>==<sp/>d2);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="342"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="system__diagnostic_8h" kindref="compound">zorba/internal/system_diagnostic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="qname_8h" kindref="compound">zorba/internal/qname.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_DIAGNOSTIC_API_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>Local<sp/>variables:</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>mode:<sp/>c++</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>End:</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/diagnostic.h"/>
  </compounddef>
</doxygen>
