<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="cxx__util_8h" kind="file">
    <compoundname>cxx_util.h</compoundname>
    <includes local="no">zorba/config.h</includes>
    <includedby refid="ztd_8h" local="yes">ztd.h</includedby>
    <includedby refid="unique__ptr_8h" local="yes">unique_ptr.h</includedby>
    <includedby refid="stemmer_8h" local="no">stemmer.h</includedby>
    <includedby refid="thesaurus_8h" local="no">thesaurus.h</includedby>
    <includedby refid="tokenizer_8h" local="no">tokenizer.h</includedby>
    <includedby refid="user__exception_8h" local="no">user_exception.h</includedby>
    <includedby refid="base64__stream_8h" local="no">base64_stream.h</includedby>
    <includedby refid="base64__util_8h" local="no">base64_util.h</includedby>
    <includedby refid="error__util_8h" local="no">error_util.h</includedby>
    <includedby refid="fs__util_8h" local="no">fs_util.h</includedby>
    <includedby refid="hexbinary__stream_8h" local="no">hexbinary_stream.h</includedby>
    <includedby refid="hexbinary__util_8h" local="no">hexbinary_util.h</includedby>
    <includedby refid="transcode__stream_8h" local="no">transcode_stream.h</includedby>
    <incdepgraph>
      <node id="1520">
        <label>cxx_util.h</label>
        <link refid="cxx_util.h"/>
        <childnode refid="1521" relation="include">
        </childnode>
      </node>
      <node id="1521">
        <label>zorba/config.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1537">
        <label>xquery_stack_trace.h</label>
        <link refid="xquery__stack__trace_8h"/>
        <childnode refid="1530" relation="include">
        </childnode>
      </node>
      <node id="1522">
        <label>cxx_util.h</label>
        <link refid="cxx_util.h"/>
        <childnode refid="1523" relation="include">
        </childnode>
        <childnode refid="1538" relation="include">
        </childnode>
        <childnode refid="1539" relation="include">
        </childnode>
        <childnode refid="1540" relation="include">
        </childnode>
        <childnode refid="1541" relation="include">
        </childnode>
        <childnode refid="1526" relation="include">
        </childnode>
        <childnode refid="1549" relation="include">
        </childnode>
        <childnode refid="1545" relation="include">
        </childnode>
        <childnode refid="1546" relation="include">
        </childnode>
        <childnode refid="1547" relation="include">
        </childnode>
        <childnode refid="1550" relation="include">
        </childnode>
        <childnode refid="1548" relation="include">
        </childnode>
        <childnode refid="1543" relation="include">
        </childnode>
      </node>
      <node id="1534">
        <label>diagnostic.h</label>
        <link refid="diagnostic_8h"/>
        <childnode refid="1524" relation="include">
        </childnode>
        <childnode refid="1533" relation="include">
        </childnode>
        <childnode refid="1535" relation="include">
        </childnode>
        <childnode refid="1531" relation="include">
        </childnode>
      </node>
      <node id="1531">
        <label>xquery_warning.h</label>
        <link refid="xquery__warning_8h"/>
        <childnode refid="1532" relation="include">
        </childnode>
      </node>
      <node id="1533">
        <label>qname.h</label>
        <link refid="qname_8h"/>
        <childnode refid="1534" relation="include">
        </childnode>
        <childnode refid="1525" relation="include">
        </childnode>
        <childnode refid="1536" relation="include">
        </childnode>
        <childnode refid="1537" relation="include">
        </childnode>
      </node>
      <node id="1546">
        <label>error_util.h</label>
        <link refid="error__util_8h"/>
        <childnode refid="1547" relation="include">
        </childnode>
      </node>
      <node id="1529">
        <label>zorba.h</label>
        <link refid="zorba_8h"/>
        <childnode refid="1528" relation="include">
        </childnode>
      </node>
      <node id="1527">
        <label>zorba_exception.h</label>
        <link refid="zorba__exception_8h"/>
        <childnode refid="1528" relation="include">
        </childnode>
        <childnode refid="1530" relation="include">
        </childnode>
      </node>
      <node id="1525">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="1526" relation="include">
        </childnode>
        <childnode refid="1527" relation="include">
        </childnode>
      </node>
      <node id="1544">
        <label>xquery_functions.h</label>
        <link refid="xquery__functions_8h"/>
      </node>
      <node id="1543">
        <label>transcode_stream.h</label>
        <link refid="transcode__stream_8h"/>
      </node>
      <node id="1549">
        <label>base64_stream.h</label>
        <link refid="base64__stream_8h"/>
      </node>
      <node id="1540">
        <label>thesaurus.h</label>
        <link refid="thesaurus_8h"/>
        <childnode refid="1528" relation="include">
        </childnode>
      </node>
      <node id="1524">
        <label>diagnostic.h</label>
        <link refid="internal_2diagnostic_8h"/>
        <childnode refid="1525" relation="include">
        </childnode>
      </node>
      <node id="1548">
        <label>hexbinary_util.h</label>
        <link refid="hexbinary__util_8h"/>
      </node>
      <node id="1545">
        <label>base64_util.h</label>
        <link refid="base64__util_8h"/>
      </node>
      <node id="1535">
        <label>system_diagnostic.h</label>
        <link refid="system__diagnostic_8h"/>
        <childnode refid="1534" relation="include">
        </childnode>
      </node>
      <node id="1526">
        <label>user_exception.h</label>
        <link refid="user__exception_8h"/>
      </node>
      <node id="1539">
        <label>stemmer.h</label>
        <link refid="stemmer_8h"/>
      </node>
      <node id="1530">
        <label>xquery_exception.h</label>
        <link refid="xquery__exception_8h"/>
        <childnode refid="1526" relation="include">
        </childnode>
        <childnode refid="1531" relation="include">
        </childnode>
      </node>
      <node id="1532">
        <label>diagnostic_handler.h</label>
        <link refid="diagnostic__handler_8h"/>
        <childnode refid="1529" relation="include">
        </childnode>
      </node>
      <node id="1528">
        <label>static_context.h</label>
        <link refid="static__context_8h"/>
        <childnode refid="1529" relation="include">
        </childnode>
      </node>
      <node id="1542">
        <label>uri_resolvers.h</label>
        <link refid="uri__resolvers_8h"/>
        <childnode refid="1540" relation="include">
        </childnode>
      </node>
      <node id="1538">
        <label>unique_ptr.h</label>
        <link refid="unique__ptr_8h"/>
        <childnode refid="1539" relation="include">
        </childnode>
        <childnode refid="1540" relation="include">
        </childnode>
        <childnode refid="1541" relation="include">
        </childnode>
        <childnode refid="1542" relation="include">
        </childnode>
        <childnode refid="1543" relation="include">
        </childnode>
        <childnode refid="1544" relation="include">
        </childnode>
        <childnode refid="1527" relation="include">
        </childnode>
      </node>
      <node id="1523">
        <label>ztd.h</label>
        <link refid="ztd_8h"/>
        <childnode refid="1524" relation="include">
        </childnode>
        <childnode refid="1533" relation="include">
        </childnode>
        <childnode refid="1535" relation="include">
        </childnode>
        <childnode refid="1538" relation="include">
        </childnode>
        <childnode refid="1539" relation="include">
        </childnode>
        <childnode refid="1540" relation="include">
        </childnode>
        <childnode refid="1541" relation="include">
        </childnode>
        <childnode refid="1542" relation="include">
        </childnode>
        <childnode refid="1545" relation="include">
        </childnode>
        <childnode refid="1546" relation="include">
        </childnode>
        <childnode refid="1547" relation="include">
        </childnode>
        <childnode refid="1548" relation="include">
        </childnode>
      </node>
      <node id="1547">
        <label>fs_util.h</label>
        <link refid="fs__util_8h"/>
      </node>
      <node id="1550">
        <label>hexbinary_stream.h</label>
        <link refid="hexbinary__stream_8h"/>
      </node>
      <node id="1536">
        <label>diagnostic_list.h</label>
        <link refid="diagnostic__list_8h"/>
      </node>
      <node id="1541">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classzorba_1_1internal_1_1nullptr__type" prot="public">zorba::internal::nullptr_type</innerclass>
    <innerclass refid="structzorba__static__assert_3_01true_01_4" prot="public">zorba_static_assert&lt; true &gt;</innerclass>
    <innerclass refid="structzorba__static__assert__type" prot="public">zorba_static_assert_type</innerclass>
    <innernamespace refid="namespacezorba">zorba</innernamespace>
    <innernamespace refid="namespacezorba_1_1internal">zorba::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="cxx__util_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" prot="public" static="no">
        <name>nullptr</name>
        <initializer>::<ref refid="cxx__util_8h_1a3f4044d2e12d8ba46a05aa7637ae69fe" kindref="member">zorba_nullptr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" line="65" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cxx__util_8h_1a49459feb18c93524d578333fd6b32a96" prot="public" static="no">
        <name>static_assert</name>
        <param><defname>EXPR</defname></param>
        <param><defname>MSG</defname></param>
        <initializer><ref refid="cxx__util_8h_1a71db486f25f5d7823df75a63540b87be" kindref="member">static_assert_helper_1</ref>(EXPR,MSG,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" line="93" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cxx__util_8h_1a71db486f25f5d7823df75a63540b87be" prot="public" static="no">
        <name>static_assert_helper_1</name>
        <param><defname>EXPR</defname></param>
        <param><defname>MSG</defname></param>
        <param><defname>LINE</defname></param>
        <initializer><ref refid="cxx__util_8h_1a6d13ab0b52e46c53df604919ab163a55" kindref="member">static_assert_helper_2</ref>(EXPR,MSG,LINE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" line="84" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cxx__util_8h_1a6d13ab0b52e46c53df604919ab163a55" prot="public" static="no">
        <name>static_assert_helper_2</name>
        <param><defname>EXPR</defname></param>
        <param><defname>MSG</defname></param>
        <param><defname>LINE</defname></param>
        <initializer>typedef ::<ref refid="structzorba__static__assert__type" kindref="compound">zorba_static_assert_type</ref>&lt;             \
    sizeof( ::zorba_static_assert&lt;(EXPR) != 0&gt; )  \
  &gt; zorba_static_assert_type_##LINE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" line="80" bodyfile="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cxx__util_8h_1a3f4044d2e12d8ba46a05aa7637ae69fe" prot="public" static="no" mutable="no">
        <type>ZORBA_DLL_PUBLIC <ref refid="classzorba_1_1internal_1_1nullptr__type" kindref="compound">zorba::internal::nullptr_type</ref> const</type>
        <definition>ZORBA_DLL_PUBLIC zorba::internal::nullptr_type const zorba_nullptr</definition>
        <argsstring></argsstring>
        <name>zorba_nullptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h" line="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006-2008<sp/>The<sp/>FLWOR<sp/>Foundation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZORBA_INTERNAL_CXX_UTIL_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZORBA_INTERNAL_CXX_UTIL_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zorba/config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(<sp/>ZORBA_CXX_NULLPTR<sp/>)<sp/>&amp;&amp;<sp/>!defined(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">zorba<sp/>{</highlight></codeline>
<codeline lineno="27" refid="namespacezorba_1_1internal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>A<sp/>\c<sp/>nullptr<sp/>type<sp/>for<sp/>C++<sp/>compilers<sp/>that<sp/>don&apos;t<sp/>yet<sp/>implement<sp/>C++11&apos;s</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>\c<sp/>nullptr<sp/>keyword.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>section<sp/>1.1:<sp/>&quot;Alternative<sp/>#1:<sp/>A<sp/>Library<sp/>Implementation<sp/>of<sp/>nullptr,&quot;<sp/>p.<sp/>3.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classzorba_1_1internal_1_1nullptr__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classzorba_1_1internal_1_1nullptr__type" kindref="compound">nullptr_type</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convertible<sp/>to<sp/>any<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classzorba_1_1internal_1_1nullptr__type_1abf72be3c21a03f7f1804ee44cc772082" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1internal_1_1nullptr__type_1abf72be3c21a03f7f1804ee44cc772082" kindref="member">operator T*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>null<sp/>non-member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>any<sp/>type<sp/>of<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classzorba_1_1internal_1_1nullptr__type_1a2777827abd5161e30b40373afbf35437" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classzorba_1_1internal_1_1nullptr__type_1a2777827abd5161e30b40373afbf35437" kindref="member">operator T C::*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>pointer...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whose<sp/>address<sp/>can&apos;t<sp/>be<sp/>taken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>zorba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>We<sp/>use<sp/>&quot;zorba_nullptr&quot;<sp/>in<sp/>combination<sp/>with<sp/>a<sp/>macro<sp/>to<sp/>elimimate<sp/>an</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>&quot;identifier<sp/>&apos;nullptr&apos;<sp/>will<sp/>become<sp/>a<sp/>keyword<sp/>in<sp/>C++0x&quot;<sp/>warning.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>We<sp/>also<sp/>use<sp/>a<sp/>singleton<sp/>object<sp/>since<sp/>using<sp/>multiple<sp/>instances<sp/>as<sp/>shown<sp/>in</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Bjarne&apos;s<sp/>paper<sp/>has<sp/>a<sp/>slight<sp/>performance<sp/>penalty<sp/>(surprisingly).</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">ZORBA_DLL_PUBLIC</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="classzorba_1_1internal_1_1nullptr__type" kindref="compound">zorba::internal::nullptr_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cxx__util_8h_1a3f4044d2e12d8ba46a05aa7637ae69fe" kindref="member">zorba_nullptr</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="cxx__util_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nullptr<sp/>::zorba_nullptr</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_CXX_NULLPTR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(<sp/>ZORBA_CXX_STATIC_ASSERT<sp/>)<sp/>&amp;&amp;<sp/>!defined(<sp/>static_assert<sp/>)</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">zorba_static_assert;<sp/><sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>undefined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structzorba__static__assert_3_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">zorba_static_assert&lt;true&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="75" refid="structzorba__static__assert__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzorba__static__assert__type" kindref="compound">zorba_static_assert_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="cxx__util_8h_1a6d13ab0b52e46c53df604919ab163a55" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>static_assert_helper_2(EXPR,MSG,LINE)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/>typedef<sp/>::zorba_static_assert_type&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>sizeof(<sp/>::zorba_static_assert&lt;(EXPR)<sp/>!=<sp/>0&gt;<sp/>)<sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/>&gt;<sp/>zorba_static_assert_type_##LINE</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See:<sp/>http://stackoverflow.com/a/1597129/99089</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="cxx__util_8h_1a71db486f25f5d7823df75a63540b87be" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>static_assert_helper_1(EXPR,MSG,LINE)<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/>static_assert_helper_2(EXPR,MSG,LINE)</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>\internal</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>A<sp/>\c<sp/>static_assert<sp/>macro<sp/>for<sp/>C++<sp/>compilers<sp/>that<sp/>don&apos;t<sp/>yet<sp/>implement<sp/>C++11&apos;s</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>\c<sp/>static_assert<sp/>keyword.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>\hideinitializer</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="cxx__util_8h_1a49459feb18c93524d578333fd6b32a96" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>static_assert(EXPR,MSG)<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/>static_assert_helper_1(EXPR,MSG,__LINE__)</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_CXX_STATIC_ASSERT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">///////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZORBA_INTERNAL_CXX_UTIL_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vim:set<sp/>et<sp/>sw=2<sp/>ts=2:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/wcandillon/deadlinks/include/zorba/internal/cxx_util.h"/>
  </compounddef>
</doxygen>
