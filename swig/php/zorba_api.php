<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded("zorba_api")) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_zorba_api.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX is available as of PHP 4.3.0, for older PHP assume 'so'.
    // It gives 'dylib' on MacOS X which is for libraries, modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'PHP_SHLIB_SUFFIX' || PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('zorba_api.so')) return;
    } else {
      if (!dl('zorba_api.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class S_QueryException {
	private $_cPtr=null;

	public function getMsg() {
		return S_QueryException_getMsg($this->_cPtr);
	}

	public function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_DynamicException extends S_QueryException {
	private $_cPtr=null;

	public function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_StaticException extends S_QueryException {
	private $_cPtr=null;

	public function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_TypeException extends S_QueryException {
	private $_cPtr=null;

	public function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_SerializationException extends S_QueryException {
	private $_cPtr=null;

	public function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_SystemException extends S_QueryException {
	
  private $_cPtr=null;

	public function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_Item {
	public $_cPtr=null;

	static function createEmptyItem() {
		$r=S_Item_createEmptyItem();
		return is_resource($r) ? new S_Item($r) : $r;
	}

	function getStringValue() {
    return S_Item_getStringValue($this->_cPtr);
	}

	function __construct( $_cPtr ) {
		$this->_cPtr=$_cPtr;
	}
}

class S_ResultIterator {
	private $_cPtr=null;

	public function open() {
		S_ResultIterator_open($this->_cPtr);
	}

	public function next($arg1) {
		return S_ResultIterator_next($this->_cPtr, $arg1);
	}

	public function close() {
		S_ResultIterator_close($this->_cPtr);
	}

	public function destroy() {
		S_ResultIterator_destroy($this->_cPtr);
	}

	public function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_XQuery {
	private $_cPtr=null;

	public function execute() {
		return S_XQuery_execute($this->_cPtr);
	}

	public function iterator() {
		$r=S_XQuery_iterator($this->_cPtr);
		return is_resource($r) ? new S_ResultIterator($r) : $r;
	}

	public function __construct( $_cPtr ) {
		$this->_cPtr =  $_cPtr;
	}
}

class S_Store {
	private $_cPtr=null;

	function __construct($_cPtr) {
		$this->_cPtr=$_cPtr;
	}
}

class S_InMemoryStore extends S_Store {
	
  static $_cPtr=null;

	static public function getInstance() {
		$r=S_InMemoryStore_getInstance();
    return is_resource($r) ? new S_InMemoryStore($r) : $r;
	}

	static public function shutdown($arg1) {
		S_InMemoryStore_shutdown($arg1);
	}

	public function __construct( $_cPtr ) {
		self::$_cPtr = $_cPtr;
	}
}

class S_Zorba {
	
  static $_cPtr = null;

	static function getInstance($arg1) {
		self::$_cPtr = S_Zorba_getInstance($arg1);
		return new S_Zorba(self::$_cPtr);
	}

	public function compileQuery($aStr) {
		$r=S_Zorba_compileQuery(self::$_cPtr,$aStr);
		return is_resource($r) ? new S_XQuery($r) : $r;
	}

	public function shutdown() {
		S_Zorba_shutdown($this->_cPtr);
	}

	public function __construct( $_cPtr ) {
		self::$_cPtr = $_cPtr;
	}
}
?>
