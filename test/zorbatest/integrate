#!/bin/sh

export ROOT=`pwd`          # Always zorbatest
export NOW=`date +%F-%T | tr ':' '_'`


#
# Process command line arguments
#

export CLEAN_BUILD=1
export TEST_MODE="local"
export REV=""
while test $# -gt 0; do
case $1 in
--no-clean) export CLEAN_BUILD="" ;;
--rev) REV=$2; shift ;;
local) TEST_MODE=local ;;
server) TEST_MODE=server ;;
esac
shift
done


#
# Prepare
#

latest_snapshot () {
  (cd $ROOT/snapshots; ls -rd *-*-*-*_*_* 2>/dev/null | head -1)
}

mkdir -p snapshots
export LASTDATE=`latest_snapshot`
if test $LASTDATE; then
    LASTREV=`cat snapshots/$LASTDATE/rev`
    echo Last date $LASTDATE, revision $LASTREV
fi
export TESTS=$ROOT/testing


#
# Check out sources
#

update_src () {
local NEWREV;

if test "x$TEST_MODE" = "xlocal"; then
  export REV="local"
  export SRC=$ROOT/../..
else
  export SRC=$ROOT/src
  NEWREV=`svn update -r $1 $SRC | perl -ne 'if (/ revision ([0-9]+)\./) { print $1; }'`
  REV=$NEWREV
  if test -z $REV; then echo Could not update sources; exit 1; fi
  if test "x$REV" = "x$LASTREV"; then echo No changes, exiting; exit; fi
fi
}

update_src `if test -z $REV; then echo HEAD; else echo $REV; fi`
echo Building for snapshot $NOW, revision $REV

rm -f svn_log.xml
if test "x$LASTREV" != "x" -a "x$REV" != "xlocal"; then
    svn log --xml $SRC -r$LASTREV:$REV >svn_log.xml
fi
test -f svn_log.xml -a -s svn_log.xml || echo '<?xml version="1.0" encoding="UTF-8"?><log />' >svn_log.xml


#
# Compile
#

if test $CLEAN_BUILD; then rm -rf build; fi

mkdir -p build
cd build
$ROOT/compile > $ROOT/build_log.txt 2>&1 || { cd $ROOT; ./on_build_failure; exit 1; }
cd $ROOT

echo Build succeeded
export SNAPSHOT=$ROOT/snapshots/$NOW
mkdir -p $SNAPSHOT
cd $SNAPSHOT
echo $REV >rev; echo $NOW >timestamp
touch BUILD_OK
mv -f $ROOT/build_log.txt $ROOT/svn_log.xml .


#
# Test
#

do_tests () {

. $ROOT/load_test_env

(cd $TESTS; tar cf - tests) | tar xf -
cd tests
find . -name fixture -exec $ROOT/run_fixture {} \;
find . -name run -exec $ROOT/run_test {} \;
cd $SNAPSHOT


#
# Process test results
#

$ROOT/process_test_results

cd test_results
diff -qr acceptance $TESTS/test_results/acceptance | $ROOT/report_acceptance_failure $TESTS >../acceptance_failures.xmlfrag
cd ..
test -s acceptance_failures.xmlfrag && export ACCEPTANCE_FAILURES=y
echo '<failures>' >acceptance_failures.xml
cat acceptance_failures.xmlfrag >>acceptance_failures.xml
echo '</failures>' >>acceptance_failures.xml
rm acceptance_failures.xmlfrag

}

if test -d $TESTS; then do_tests; fi
cp $ROOT/report.xqy .
$ROOT/xquery report.xqy now=$NOW rev=$REV lastdate=$LASTDATE lastrev=$LASTREV >index.html

if test $ACCEPTANCE_FAILURES; then
  echo Some acceptance tests failed, see $PWD/index.html
  export COMMITTERS=`echo '//span [@id="committers"]' | $ROOT/xquery -s index.html - | cut -f 2- -d'>' | cut -f1 -d'<'`
  test "x$TEST_MODE" != "xlocal" && echo Committers: $COMMITTERS
else
  echo All acceptance tests passed
fi

rm -f $ROOT/snapshots/latest
ln -s $ROOT/snapshots/`latest_snapshot` $ROOT/snapshots/latest

if test "x$TEST_MODE" != "xlocal" -a "x$ACCEPTANCE_FAILURES" != "x"; then
  echo Sending e-mail to committers.
  echo $COMMITTERS | mutt -i $ROOT/acceptance_failure_email_body.txt -s "Zorba testing: acceptance failures" -a index.html `cat $ROOT/error_email.txt` 
fi
