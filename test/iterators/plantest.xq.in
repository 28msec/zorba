jsoniq version "1.0";
(:
 : Copyright 2006-2009 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)
import module namespace jn = "http://jsoniq.org/functions";

import module namespace file = "http://expath.org/ns/file";

import schema namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";

declare namespace an = "http://zorba.io/annotations";

declare %an:sequential function local:filter-xml($items as item()*, $replace-value-list as xs:string*, $remove-list as xs:string*) as item()*
{
  (
    delete node $items//*/($$ | @*)[local-name($$) = $remove-list],
    for $node in $items//*/($$ | @*)[local-name($$) = $replace-value-list]
    return replace value of node $node with "REMOVED"
  );
  $items
};

declare %an:sequential function local:filter-json($items as item()*, $replace-value-list as xs:string*, $remove-list as xs:string*) as item()*
{
  for $item in $items
  return
  {
    if ($item instance of object())
    then
    {
      for $key in keys($item)
      return 
      {
        if ($key = $remove-list)
        then delete json $item($key);
        else
          if ($key = $replace-value-list)
          then replace value of json $item($key) with "REMOVED";
          else local:filter-json($item($key), $replace-value-list, $remove-list);
      }
    }
    else
    { 
      if ($item instance of array())
      then
      { 
        for $member in members($item)
        return local:filter-json($member, $replace-value-list, $remove-list);
      }
      else ();      
    }
  };
  $items
};

declare %an:sequential function local:test-json($result-text as xs:string, $expected-text as xs:string) as xs:string
{
  variable $result as object() := 
    try { jn:parse-json($result-text) } 
    catch * { error(xs:QName("local:MALFORMED"), "The plan result file " || $result-filepath || " is malformed.") };
  
  variable $expected as object() :=
    try { jn:parse-json($expected-text) }
    catch * { error(xs:QName("local:MALFORMED"), "The plan expected result file " || $expected-filepath || " is malformed.") };
    
  local:compare(local:filter-json($result, $filter,()), local:filter-json($expected, $filter, ()))
};

declare %an:sequential function local:test-xml($result-text as xs:string, $expected-text as xs:string) as xs:string
{
  variable $result as element() := 
    try { parse-xml("<root>" || $result-text || "</root>")/* } 
    catch * { error(xs:QName("local:MALFORMED"), "The plan result file " || $result-filepath || " is malformed.") };
  
  variable $expected as element() :=
    try { parse-xml("<root>" || $expected-text || "</root>")/* }
    catch * { error(xs:QName("local:MALFORMED"), "The plan expected result file " || $expected-filepath || " is malformed.") };
     
  local:compare(local:filter-xml($result, $filter,()), local:filter-xml($expected, $filter, ()))
};


declare function local:compare($result as item, $expected as item) as xs:string
{
  if (deep-equal($result, $expected)) then
    "Passed!"
  else
    "Failed!\n" ||
    "Generated plan does not match to the expected result!\n" ||
    "Command to generate plan: " || $command || "\n\n" ||
    "Actual Result File: " || $result-filepath || "\n" ||
    "Expected Result File: " || $expected-filepath || "\n\n" ||
    "Actual Result: \n\n" ||
    serialize($result) || "\n\n" ||
    "Expected Result: \n\n" ||
    serialize($expected)
};

declare variable $command external;

declare variable $format external; 

declare variable $expected-filepath external;
 
declare variable $result-filepath external;

declare variable $filter := ("prof-cpu", "prof-wall", "prof-next-calls", "prof-compilation-cpu", "prof-compilation-wall");

variable $result-text as xs:string := file:read-text($result-filepath);
variable $expected-text as xs:string := file:read-text($expected-filepath);

switch ($format)
 case "xml" return local:test-xml($result-text, $expected-text)
 case "json" return local:test-json($result-text, $expected-text)
 default return "Failed! Unsupported profile format: " || $format
