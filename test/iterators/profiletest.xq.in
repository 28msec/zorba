jsoniq version "1.0";
(:
 : Copyright 2006-2009 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)
import module namespace jn = "http://jsoniq.org/functions";

import module namespace file = "http://expath.org/ns/file";

import schema namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";

declare namespace an = "http://zorba.io/annotations";

declare %an:sequential function local:filter($items as item()*, $replace-value-list as xs:string*, $remove-list as xs:string*) as item()*
{
  for $item in $items
  return
  {
    if ($item instance of object())
    then
    {
      for $key in keys($item)
      return 
      {
        if ($key = $remove-list)
        then delete json $item($key);
        else
          if ($key = $replace-value-list)
          then replace value of json $item($key) with "REMOVED";
          else local:filter($item($key), $replace-value-list, $remove-list);
      }
    }
    else
    { 
      if ($item instance of array())
      then
      { 
        for $member in members($item)
        return local:filter($member, $replace-value-list, $remove-list);
      }
      else ();
    }
  };
  $items
};

declare variable $source-dir := "@CMAKE_SOURCE_DIR@";
declare variable $binary-dir := "@CMAKE_BINARY_DIR@";

declare variable $zorba-exe-path external;

declare variable $testname external; 
 
declare variable $result-filepath external;

variable $expected-filepath := $source-dir || "/test/iterators/" || $testname || ".profile";

variable $query-filepath := $source-dir || "/test/rbkt/Queries/" || $testname || ".xq";

variable $expected-filepath-normalized := file:path-to-native($expected-filepath);

variable $result-filepath-normalized := file:path-to-native($result-filepath);

variable $query-filepath-normalized := file:path-to-native($query-filepath);

variable $zorba-exe-path-normalized := file:path-to-native($zorba-exe-path);


if (file:exists($query-filepath-normalized))
then
{
  variable $query-options := (
    "--profile", "json",
    "--no-tree-ids",
    "--no-serializer",
    $query-filepath-normalized
  );

  variable $result-text as xs:string := file:read-text($result-filepath-normalized);

  variable $expected-text as xs:string := file:read-text($expected-filepath-normalized);

  variable $result-json as object() :=
  try
  { 
    jn:parse-json($result-text)
  }
  catch *
  {
    error(xs:QName("local:MALFORMED"), "The profile result file " || $result-filepath-normalized || " is malformed.")
  };
  
  variable $expected-json as object() :=
  try
  { 
    jn:parse-json($expected-text)
  }
  catch *
  {
    error(xs:QName("local:MALFORMED"), "The profile expected result file " || $expected-filepath-normalized || " is malformed.")
  };
  
  if (deep-equal(
        local:filter($result-json, ("prof-cpu", "prof-wall"),()), 
        local:filter($expected-json, ("prof-cpu", "prof-wall"),())
        )
      ) then
    "Passed!"
  else
    "Failed!\n" ||
    "Generated profile does not match to the expected result!\n" ||
    "Command to generate iterator tree: " || $zorba-exe-path-normalized || " " || fn:string-join($query-options," ") || "\n\n" ||
    "Actual Result File: " || $result-filepath || "\n" ||
    "Expected Result File: " || $expected-filepath || "\n\n" ||
    "Actual Result: \n" ||
    $result-text
}
else
    "Passed! But only because query file " || $query-filepath || " was not found. Test was not executed!"
