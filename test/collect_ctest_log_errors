#!/usr/bin/perl
use strict;

my %queries;

my $html = 0;

if (shift eq "--html") { $html = 1; }

sub add_case {
    my ($q, $file, $fun, $assertion) = @_;
    $_ = "$file: $fun: $assertion";
    if ($html) {
        s/([&])/$1amp;/g; s/([<])/&lt;/g; s/[>]/&gt;/g;
    }
    push @{ $queries {$_} }, $q;
}

sub by_number_desc_then_string
{
    return -(($a <=> $b) || ($a cmp $b));
}

my $query;

while (<>) {
    if (m#^[0-9]+/[0-9]+ Testing: (.*)$#) {
        $query = $1;
    } elsif (m#^[^:]+: ([^:]+:[0-9]+): (.*): Assertion (.*) failed.$#) {
        add_case $query, $1, $2, $3;
    } elsif (m#.*Assertion (.*) failed in ([^:]+:[0-9]+)$#) {
        add_case $query, $2, "?", $1;
    }
}

# change testcase names to include fault count
my %queries_new;
foreach (keys %queries) {
    my @qs = @{ $queries {$_} };
    $_ = scalar @qs . " queries: " . $_;
    @{ $queries_new {$_} } = @qs;
}
%queries = %queries_new;

foreach (sort (by_number_desc_then_string keys(%queries))) {
    my $case = $_;
    my @qs = @{ $queries {$case} };
    print $case . "\n" . join ("\n", @qs) . "\n\n";
}
