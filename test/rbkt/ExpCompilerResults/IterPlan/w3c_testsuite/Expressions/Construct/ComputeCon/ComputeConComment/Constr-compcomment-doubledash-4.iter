Iterator tree for main query:
<CommentIterator>
  <EnclosedIterator attr_cont="true">
    <NodeSortIterator>
      <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,wildcard,description)" typename="*" nill allowed="0">
        <flwor::FLWORIterator>
          <ForVariable name="$$dot">
            <NodeDistinctIterator>
              <DescendantSelfAxisIterator test kind="match_anykind_test" qname="*" typename="*" nill allowed="0">
                <TreatIterator type="[NodeXQType anyNode content=[XQType ANY_TYPE_KIND*]]" quant="*">
                  <CtxVariableIterator>
                    <SingletonIterator value="xs:string(input-context)"/>
                  </CtxVariableIterator>
                </TreatIterator>
              </DescendantSelfAxisIterator>
            </NodeDistinctIterator>
          </ForVariable>
          <ReturnClause>
            <flwor::FLWORIterator>
              <ForVariable name="$$dot">
                <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,wildcard,test-case)" typename="*" nill allowed="0">
                  <ForVarIterator varname="$$dot"/>
                </ChildAxisIterator>
              </ForVariable>
              <WhereClause>
                <CompareIterator>
                  <FnDataIterator>
                    <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,name)" typename="*" nill allowed="0">
                      <ForVarIterator varname="$$dot"/>
                    </AttributeAxisIterator>
                  </FnDataIterator>
                  <SingletonIterator value="xs:string(Constr-compcomment-doubledash-4)"/>
                </CompareIterator>
              </WhereClause>
              <ReturnClause>
                <ForVarIterator varname="$$dot"/>
              </ReturnClause>
            </flwor::FLWORIterator>
          </ReturnClause>
        </flwor::FLWORIterator>
      </ChildAxisIterator>
    </NodeSortIterator>
  </EnclosedIterator>
</CommentIterator>

