#!/usr/bin/python

""" Copyright 2009 The FLWOR Foundation.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."""

import string
import sys

ctest_failed_file = "@zorbaBuildDir@/Testing/Temporary/LastTestsFailed.log"
ctest_log_file = "@zorbaBuildDir@/Testing/Temporary/LastTest.log"

out_file = "@zorbaBuildDir@/result.xml"

out = open ( out_file, 'w' )

out.write ( '<?xml version="1.0" encoding="UTF-8"?>\n' )
out.write ( '<test-suite-result\n' )
out.write ( "   xmlns='http://www.w3.org/2005/02/query-test-XQTSResult'\n" )
out.write ( '   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n' )
out.write ( '   <implementation\n' )
out.write ( '      name="Zorba"\n' )
out.write ( '      version="@zorbaVersion@">\n' )
out.write ( '   <organization\n' )
out.write ( '      name="FLWOR Foundation"\n' )
out.write ( '      website="http://www.zobra-xquery.com />"\n' )
out.write ( '   <subittor\n' )
out.write ( '       name="Timh Kraska"\n' )
out.write ( '       email="tim.kraska@inf.ethz.ch" />\n' )
out.write ( '    <description>\n' )
out.write ( '    <p>Zorba is a XQuery processor writtenin C++ available under the Apache License.</p>\n' )
out.write ( '     </description>\n' )


def has_testing ( s ):
    yes = string.find ( s, 'Testing:' )
    yes2 = s.find ( 'w3c_testsuite' )
    return yes > 0 and yes2 > 0 

def get_test_name ( s ) :
    words = string.split ( s, '/' )
    l = len ( words )
    name = words[ l -1]
    name = string.strip ( name )
    return name

try:
    failedfile = open ( ctest_failed_file, 'r' )
    failed = True
except IOError :
    print "CTest failed log not found"
    print "Assuming that CTest was run and that there were no failures"
    failed = False

failures = set()
if failed :
    for line in failedfile:
        i = string.find ( line, "w3c_testsuite" )
        if i > 0 :
            name = get_test_name ( line )
            failures.add ( name )

try:
    file = open ( ctest_log_file, 'r' )
except IOError :
    print "Ctest log file not found"
    print "Run CTest before this script"
    sys.exit ( 1 )

for line in file:
    if has_testing ( line ):
        name = get_test_name ( line )
        if  name in failures :
            out.write ( '<test-case name="%s" result="failed" />\n' % name )
        else :
            out.write ( '<test-case name="%s" result="passed" />\n' % name )

out.write ( '</test-suite-result>' )
