#!/bin/bash

if test $# != 1 -o ! -d $1/test/zorbatest; then
 echo 'Arguments: zorba_repository'
 echo 'where zorba_repository is the top-level SVN working copy'
 exit 1
fi

SRC=$1
ZIP=/tmp/XQTS_1_0_2.zip
echo Downloading test suite to zip $ZIP ...
wget -c -O $ZIP http://www.w3.org/XML/Query/test-suite/XQTS_1_0_2.zip

d0=`pwd`

cd `dirname $SRC`
SRC=`pwd`/`basename $SRC`
echo Repository is at $SRC

d="/tmp/rwts.$$"
mkdir "$d"
cd "$d"

echo Unzipping test suite...
unzip $ZIP &>/dev/null

q=`mktemp`
cat >$q <<"EOF"
declare default element namespace "http://www.w3.org/2005/02/query-test-XQTSCatalog";
declare option saxon:output "omit-xml-declaration=yes";
for $tc in //test-case
return fn:concat ($tc/@name, " ",
$tc/@FilePath, " ",
$tc/output-file[1]/text(), " ",
$tc/expected-error[1]/text(), " 
")
EOF

echo Cleaning up previous data...
rm -rf $SRC/test/rbkt/Queries/w3c_testsuite $SRC/test/rbkt/ExpQueryResults/w3c_testsuite

$SRC/test/zorbatest/xquery -s XQTSCatalog.xml $q | perl -e '
while (<>) {
if (m# ?([^ ]+) ([^ ]+) ([^ ]*) ([^ ]*)#) {
my ($name, $path, $out, $err) = ($1, $2, $3, $4);
my $fullout = "ExpectedTestResults/$path/$name.xml.res";
if ($err) {
  open (RES, ">$fullout");
  print RES "$err\n";
} else {
  rename "ExpectedTestResults/$path/$out", $fullout;
}
}
}
'
rm -f $q

echo Moving queries to Zorba repo...
mv Queries/XQuery $SRC/test/rbkt/Queries/w3c_testsuite

cd ExpectedTestResults
echo Cleaning up results...
find . -type f -not -name '*.xml.res' -exec rm {} \;

echo Moving query results to Zorba repo...
mkdir $SRC/test/rbkt/ExpQueryResults/w3c_testsuite/
mv * $SRC/test/rbkt/ExpQueryResults/w3c_testsuite/

echo "Cleaning up work directory"
cd $d0; rm -rf "$d"

echo Done
