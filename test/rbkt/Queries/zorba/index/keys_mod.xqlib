module namespace keys-lib = "http://www.example.com/";

import module namespace dml = "http://zorba.io/modules/store/static/collections/dml";

declare namespace ann = "http://zorba.io/annotations";

declare %ann:unordered collection keys-lib:foo as node()*;

declare %ann:automatic %ann:value-equality index keys-lib:FooIdx
  on nodes dml:collection(xs:QName("keys-lib:foo"))
  by xs:integer(./@id) as xs:integer;

declare %ann:automatic %ann:value-range index keys-lib:FooIdx2
  on nodes dml:collection(xs:QName("keys-lib:foo"))
  by xs:integer(./@id) as xs:integer;

declare %ann:automatic %ann:value-range index keys-lib:FooIdx3
  on nodes dml:collection(xs:QName("keys-lib:foo"))
  by xs:string(./@id) as xs:string,
     (if (./@name) then xs:string(./@name) else ()) as xs:string?;

declare %ann:automatic %ann:general-equality index keys-lib:FooIdx-general
  on nodes dml:collection(xs:QName("keys-lib:foo"))
  by 
  (
    let $val := fn:data(./@id)
    return
      if (./@string) then
        xs:long($val)
      else
        xs:string($val)
  )
  as xs:anyAtomicType;

declare %ann:automatic %ann:general-range index keys-lib:FooIdx2-general
  on nodes dml:collection(xs:QName("keys-lib:foo"))
  by xs:integer(./@id) as xs:integer;

declare %ann:automatic %ann:general-range index keys-lib:FooIdx3-general
  on nodes dml:collection(xs:QName("keys-lib:foo"))
  by (if (./@name) then xs:string(./@name) else ()) as xs:string?;
