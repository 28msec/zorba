
module namespace util = "http://www.zorba-xquery.com/util";

import module namespace http = "http://www.zorba-xquery.com/modules/http-client";
import module namespace sctx = "http://zorba.io/modules/sctx";
import module namespace file = "http://expath.org/ns/file";
(:import module namespace html = "http://www.zorba-xquery.com/modules/converters/html";
import schema namespace html-options="http://www.zorba-xquery.com/modules/converters/html-options";:)

import schema namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";

declare namespace ann = "http://zorba.io/annotations";

declare variable $util:xquery_version_1_0 := "1.0";
declare variable $util:xquery_version_3_0 := "3.0";

(:
declare %ann:sequential function util:download-and-write-spec($specVersion as xs:string, $docPath as xs:string) 
{
  let $serParams := 
    <output:serialization-parameters>
        <output:method value="xml"/>
        <output:indent value="yes"/>
      </output:serialization-parameters>
  return
  if ($specVersion = $util:xquery_version_1_0) then
    file:write( $docPath,
                html:parse(http:get("http://www.w3.org/TR/xpath-functions/")[2]),
                $serParams)
  else
    file:write( $docPath,
                html:parse(http:get("http://www.w3.org/TR/xpath-functions-30/")[2]),
                $serParams)
};
:)

declare function util:create-spec-function-arity-sequence(
  $docPath as xs:string,
  $xquery_version as xs:string)
as xs:string* 
{
  let $docSpec := fn:doc($docPath)

  let $functionsSpec :=
    (for $x in $docSpec//*:div[@class="div3"]
              [.//*:div[@class="exampleInner"]
              //*:div[@class="proto"]
              //*:code[@class="function"]
              /text()[starts-with(.,"fn:")]]
    order by xs:string($x/*:h4/*:a/@name) ascending
    return
      $x//*:div[@class="exampleInner"]//*:div[@class="proto"],

    for $y in $docSpec//*:div[@class="div2"]
              [./*:h3/*:a/@name[starts-with(.,"func-")]]
              [.//*:div[@class="exampleInner"]
              //*:div[@class="proto"]
              //*:code[@class="function"]
              /text()[starts-with(.,"fn:")]]
    order by xs:string($y/*:h3/*:a/@name) ascending
    return
      $y//*:div[@class="exampleInner"]//*:div[@class="proto"],

    for $z in $docSpec//*:div[@class="div1"]
              [./*:h2/*:a/@name[starts-with(.,"func-")]]
              [.//*:div[@class="exampleInner"]
              //*:div[@class="proto"]
              //*:code[@class="function"]
              /text()[starts-with(.,"fn:")]]
    order by xs:string($z/*:h2/*:a/@name) ascending
    return
      $z//*:div[@class="exampleInner"]//*:div[@class="proto"])

  return
    for $s in $functionsSpec
    let $funcName := fn:substring-after($s//*:code[@class="function"]/text(),"fn:")
    where (fn:not($funcName = "numeric-function") and
    	   fn:not(starts-with($funcName,"eg:")) and
           fn:not($funcName = "median"))
    return
      if($xquery_version = "1.0") then (: omit "fn:function-name all together :)
        if($funcName = "function-name") then ()
        else
          fn:concat($funcName, "#",
                    (if(fn:contains(substring-after(xs:string(data($s)), "fn:"),"...")) then
                      1000000 (:variadic function :)
                    else
                      fn:count(fn:tokenize(substring-after(xs:string(data($s)), "fn:"),"\$"))-1)
                    )
(: for  $xquery_version = "3.0":)
(: Added the exception from http://www.w3.org/TR/2009/WD-xpath-functions-11-20091215/#func-signatures :)
      else 
        fn:concat(
        $funcName, "#",
        (if(fn:contains(substring-after(xs:string(data($s)), "fn:"),"...")
            and fn:not($funcName = "function-name")) then
          1000000 (:variadic function :)
         else
          fn:count(fn:tokenize(substring-after(xs:string(data($s)), "fn:"),"\$"))-1)
        )
};


declare function util:create-zorba-function-arity-sequence($functionNames as xs:QName*)
as xs:string* 
{
  for $funcQname in $functionNames
  where (fn:namespace-uri-from-QName($funcQname) = "http://www.w3.org/2005/xpath-functions")
  order by fn:local-name-from-QName($funcQname)
  return
    for $arity in sctx:function-arguments-count($funcQname)
    order by $arity
    return
      fn:concat(fn:local-name-from-QName($funcQname),"#", fn:string($arity))
};
