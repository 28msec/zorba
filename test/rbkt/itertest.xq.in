(:
 : Copyright 2006-2009 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)

import module namespace file = "http://expath.org/ns/file";

import schema namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";

declare variable $testfile external;  
declare variable $apitest-path external;
declare variable $query-result external;
declare variable $source-dir := "@CMAKE_SOURCE_DIR@";
declare variable $binary-dir := "@CMAKE_BINARY_DIR@";

(: cut .iter ending :)
let $cut-path := fn:substring($testfile, 1, fn:string-length($testfile) - 5)
(: expected result file :)
let $expected-file := fn:concat($source-dir, '/test/rbkt/ExpCompilerResults/IterPlan/', $cut-path, '.iter')
let $result-file := fn:concat($binary-dir, '/test/rbkt/CompilerResults/IterPlan/', $cut-path, '.iter')
(: query file :)
let $query-file := fn:concat($source-dir, '/test/rbkt/Queries/', $cut-path, '.xq')
let $apitest-path-normalized := file:path-to-native($apitest-path)
let $expected-file-normalized := file:path-to-native($expected-file)
let $result-file-normalized := file:path-to-native($result-file)
let $query-file-normalized := file:path-to-native($query-file)
let $query-result-normalized := file:path-to-native($query-result)

return
  if (file:exists($query-file-normalized)) 
  then
    {
      variable $query-options := (
        '--iter-plan-test',
        '--print-iterator-tree',
        '--no-tree-ids',
        $query-file-normalized
      );
      variable $query-stdout as xs:string := file:read-text($query-result-normalized);
      variable $expected-text as xs:string := file:read-text($expected-file-normalized);

      {
        (
          (: compare generated iterator tree with expected result :)
          if ($query-stdout eq $expected-text) then
            "Passed!"
          else
            fn:concat(
              "Failed! Generated iterator tree is not equal to the expected Result!",
              "Command to generate iterator tree: ", $apitest-path, " ", fn:string-join($query-options," "), "",
              "Expected Result: ", $expected-file, $expected-text)
        )
      }
    }
  else
    fn:concat("Passed! But only because query file ", $query-file, " not found. Test was not executed!")
