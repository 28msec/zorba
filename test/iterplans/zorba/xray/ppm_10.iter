<iterator-trees>
  <iterator-tree description="const-folded expr">
    <OpNumericUnaryIterator>
      <SingletonIterator value="xs:integer(1)"/>
    </OpNumericUnaryIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <NameCastIterator>
      <SingletonIterator value="xs:string(position)"/>
    </NameCastIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <NameCastIterator>
      <SingletonIterator value="xs:string(forward)"/>
    </NameCastIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <NameCastIterator>
      <SingletonIterator value="xs:string(up)"/>
    </NameCastIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <NameCastIterator>
      <SingletonIterator value="xs:string(right)"/>
    </NameCastIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <OrIterator>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
    </OrIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <OrIterator>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
    </OrIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(2)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(1)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <OrIterator>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
    </OrIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <OrIterator>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
    </OrIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <OrIterator>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
    </OrIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <OrIterator>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
    </OrIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <OrIterator>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
      <SingletonIterator value="xs:boolean(false)"/>
    </OrIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(2)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:decimal(0.01)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(1)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(0)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(1)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="const-folded expr">
    <PromoteIterator type="xs:double">
      <SingletonIterator value="xs:integer(255)"/>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="main query">
    <SequentialIterator>
      <CtxVarDeclareIterator varid="4" varname="width">
        <SingletonIterator value="xs:integer(10)"/>
      </CtxVarDeclareIterator>
      <CtxVarDeclareIterator varid="5" varname="height">
        <SingletonIterator value="xs:integer(10)"/>
      </CtxVarDeclareIterator>
      <CtxVarDeclareIterator varid="6" varname="scene">
        <UDFunctionCallIterator function="scene:prepare-scene">
          <TreatIterator quant="">
            <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,scene)" typename="*" nill allowed="0">
              <FnDocIterator>
                <SingletonIterator value="xs:string(scene.xml)"/>
              </FnDocIterator>
            </ChildAxisIterator>
          </TreatIterator>
        </UDFunctionCallIterator>
      </CtxVarDeclareIterator>
      <FnConcatIterator>
        <StringJoinIterator>
          <FnConcatIterator>
            <SingletonIterator value="xs:string(P3)"/>
            <StringJoinIterator>
              <FnConcatIterator>
                <FnStringIterator>
                  <CtxVarIterator varid="4" varname="width" varkind="global"/>
                </FnStringIterator>
                <FnStringIterator>
                  <CtxVarIterator varid="5" varname="height" varkind="global"/>
                </FnStringIterator>
              </FnConcatIterator>
              <SingletonIterator value="xs:string( )"/>
            </StringJoinIterator>
            <SingletonIterator value="xs:string(255)"/>
            <FLWORIterator>
              <LetVariable name="$$opt_temp_0" materialize="true">
                <HoistIterator>
                  <OpToIterator>
                    <SingletonIterator value="xs:integer(1)"/>
                    <CtxVarIterator varid="4" varname="width" varkind="global"/>
                  </OpToIterator>
                </HoistIterator>
              </LetVariable>
              <ForVariable name="aspect-ratio">
                <SpecificNumArithIterator_DivideOperation_DECIMAL>
                  <CtxVarIterator varid="4" varname="width" varkind="global"/>
                  <CtxVarIterator varid="5" varname="height" varkind="global"/>
                </SpecificNumArithIterator_DivideOperation_DECIMAL>
              </ForVariable>
              <ForVariable name="y">
                <OpToIterator>
                  <SingletonIterator value="xs:integer(1)"/>
                  <CtxVarIterator varid="5" varname="height" varkind="global"/>
                </OpToIterator>
              </ForVariable>
              <ForVariable name="y-recentered">
                <SpecificNumArithIterator_AddOperation_DECIMAL>
                  <SpecificNumArithIterator_DivideOperation_DECIMAL>
                    <OpNumericUnaryIterator>
                      <ForVarIterator varname="y"/>
                    </OpNumericUnaryIterator>
                    <CtxVarIterator varid="5" varname="height" varkind="global"/>
                  </SpecificNumArithIterator_DivideOperation_DECIMAL>
                  <SingletonIterator value="xs:decimal(0.5)"/>
                </SpecificNumArithIterator_AddOperation_DECIMAL>
              </ForVariable>
              <ForVariable name="$$opt_temp_1">
                <HoistIterator>
                  <PromoteIterator type="xs:double">
                    <ForVarIterator varname="y-recentered"/>
                  </PromoteIterator>
                </HoistIterator>
              </ForVariable>
              <ForVariable name="x">
                <UnhoistIterator>
                  <LetVarIterator varname="$$opt_temp_0"/>
                </UnhoistIterator>
              </ForVariable>
              <ReturnClause>
                <StringJoinIterator>
                  <FLWORIterator>
                    <ForVariable name="channel">
                      <UDFunctionCallIterator function="raytracer:plot-pixel">
                        <CtxVarIterator varid="6" varname="scene" varkind="global"/>
                        <PromoteIterator type="xs:double">
                          <SpecificNumArithIterator_MultiplyOperation_DECIMAL>
                            <SpecificNumArithIterator_SubtractOperation_DECIMAL>
                              <SpecificNumArithIterator_DivideOperation_DECIMAL>
                                <ForVarIterator varname="x"/>
                                <CtxVarIterator varid="4" varname="width" varkind="global"/>
                              </SpecificNumArithIterator_DivideOperation_DECIMAL>
                              <SingletonIterator value="xs:decimal(0.5)"/>
                            </SpecificNumArithIterator_SubtractOperation_DECIMAL>
                            <ForVarIterator varname="aspect-ratio"/>
                          </SpecificNumArithIterator_MultiplyOperation_DECIMAL>
                        </PromoteIterator>
                        <UnhoistIterator>
                          <ForVarIterator varname="$$opt_temp_1"/>
                        </UnhoistIterator>
                      </UDFunctionCallIterator>
                    </ForVariable>
                    <ReturnClause>
                      <FnStringIterator>
                        <FloorIterator>
                          <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            <ForVarIterator varname="channel"/>
                            <SingletonIterator value="xs:double(255)"/>
                          </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        </FloorIterator>
                      </FnStringIterator>
                    </ReturnClause>
                  </FLWORIterator>
                  <SingletonIterator value="xs:string( )"/>
                </StringJoinIterator>
              </ReturnClause>
            </FLWORIterator>
          </FnConcatIterator>
          <SingletonIterator value="xs:string(
)"/>
        </StringJoinIterator>
        <SingletonIterator value="xs:string(
)"/>
      </FnConcatIterator>
    </SequentialIterator>
  </iterator-tree>
  <iterator-tree description="scene:prepare-scene">
    <ElementIterator>
      <SingletonIterator value="xs:QName(,,scene)"/>
      <EnclosedIterator attr_cont="false">
        <FLWORIterator>
          <ForVariable name="node">
            <ChildAxisIterator test kind="match_anykind_test" qname="*" typename="*" nill allowed="0">
              <LetVarIterator varname="scene"/>
            </ChildAxisIterator>
          </ForVariable>
          <ReturnClause>
            <IfThenElseIterator>
              <InstanceOfIterator>
                <ForVarIterator varname="node"/>
              </InstanceOfIterator>
              <UDFunctionCallIterator function="scene:calculate-basis">
                <TreatIterator type="[NodeXQType elementNode nametest=[uri: , local: camera] content=[XQType ANY_TYPE_KIND*]]" quant="">
                  <ForVarIterator varname="node"/>
                </TreatIterator>
              </UDFunctionCallIterator>
              <ForVarIterator varname="node"/>
            </IfThenElseIterator>
          </ReturnClause>
        </FLWORIterator>
      </EnclosedIterator>
    </ElementIterator>
  </iterator-tree>
  <iterator-tree description="raytracer:plot-pixel">
    <PromoteIterator type="xs:double">
      <FLWORIterator>
        <ForVariable name="scene">
          <LetVarIterator varname="scene"/>
        </ForVariable>
        <ForVariable name="channel">
          <UDFunctionCallIterator function="raytracer:trace-ray">
            <ForVarIterator varname="scene"/>
            <FunctionTraceIterator>
              <FLWORIterator>
                <ForVariable name="a">
                  <TreatIterator quant="">
                    <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,position)" typename="*" nill allowed="0">
                      <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,camera)" typename="*" nill allowed="0">
                        <ForVarIterator varname="scene"/>
                      </ChildAxisIterator>
                    </ChildAxisIterator>
                  </TreatIterator>
                </ForVariable>
                <ReturnClause>
                  <FnConcatIterator>
                    <CastIterator type="xs:double">
                      <FnDataIterator>
                        <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                          <ForVarIterator varname="a"/>
                        </AttributeAxisIterator>
                      </FnDataIterator>
                    </CastIterator>
                    <CastIterator type="xs:double">
                      <FnDataIterator>
                        <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                          <ForVarIterator varname="a"/>
                        </AttributeAxisIterator>
                      </FnDataIterator>
                    </CastIterator>
                    <CastIterator type="xs:double">
                      <FnDataIterator>
                        <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                          <ForVarIterator varname="a"/>
                        </AttributeAxisIterator>
                      </FnDataIterator>
                    </CastIterator>
                  </FnConcatIterator>
                </ReturnClause>
              </FLWORIterator>
            </FunctionTraceIterator>
            <UDFunctionCallIterator function="vector:normalize">
              <FunctionTraceIterator>
                <FLWORIterator>
                  <LetVariable name="v2" materialize="true">
                    <FunctionTraceIterator>
                      <FLWORIterator>
                        <LetVariable name="v2" materialize="true">
                          <FunctionTraceIterator>
                            <FLWORIterator>
                              <ForVariable name="x">
                                <LetVarIterator varname="y"/>
                              </ForVariable>
                              <ForVariable name="y">
                                <FunctionTraceIterator>
                                  <FLWORIterator>
                                    <ForVariable name="a">
                                      <TreatIterator quant="">
                                        <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,up)" typename="*" nill allowed="0">
                                          <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,camera)" typename="*" nill allowed="0">
                                            <ForVarIterator varname="scene"/>
                                          </ChildAxisIterator>
                                        </ChildAxisIterator>
                                      </TreatIterator>
                                    </ForVariable>
                                    <ReturnClause>
                                      <FnConcatIterator>
                                        <CastIterator type="xs:double">
                                          <FnDataIterator>
                                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                                              <ForVarIterator varname="a"/>
                                            </AttributeAxisIterator>
                                          </FnDataIterator>
                                        </CastIterator>
                                        <CastIterator type="xs:double">
                                          <FnDataIterator>
                                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                                              <ForVarIterator varname="a"/>
                                            </AttributeAxisIterator>
                                          </FnDataIterator>
                                        </CastIterator>
                                        <CastIterator type="xs:double">
                                          <FnDataIterator>
                                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                                              <ForVarIterator varname="a"/>
                                            </AttributeAxisIterator>
                                          </FnDataIterator>
                                        </CastIterator>
                                      </FnConcatIterator>
                                    </ReturnClause>
                                  </FLWORIterator>
                                </FunctionTraceIterator>
                              </ForVariable>
                              <ReturnClause>
                                <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                                  <ForVarIterator varname="x"/>
                                  <ForVarIterator varname="y"/>
                                </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                              </ReturnClause>
                            </FLWORIterator>
                          </FunctionTraceIterator>
                        </LetVariable>
                        <ForVariable name="x">
                          <FunctionTraceIterator>
                            <FLWORIterator>
                              <ForVariable name="x">
                                <LetVarIterator varname="x"/>
                              </ForVariable>
                              <ForVariable name="y">
                                <FunctionTraceIterator>
                                  <FLWORIterator>
                                    <ForVariable name="a">
                                      <TreatIterator quant="">
                                        <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,right)" typename="*" nill allowed="0">
                                          <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,camera)" typename="*" nill allowed="0">
                                            <ForVarIterator varname="scene"/>
                                          </ChildAxisIterator>
                                        </ChildAxisIterator>
                                      </TreatIterator>
                                    </ForVariable>
                                    <ReturnClause>
                                      <FnConcatIterator>
                                        <CastIterator type="xs:double">
                                          <FnDataIterator>
                                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                                              <ForVarIterator varname="a"/>
                                            </AttributeAxisIterator>
                                          </FnDataIterator>
                                        </CastIterator>
                                        <CastIterator type="xs:double">
                                          <FnDataIterator>
                                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                                              <ForVarIterator varname="a"/>
                                            </AttributeAxisIterator>
                                          </FnDataIterator>
                                        </CastIterator>
                                        <CastIterator type="xs:double">
                                          <FnDataIterator>
                                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                                              <ForVarIterator varname="a"/>
                                            </AttributeAxisIterator>
                                          </FnDataIterator>
                                        </CastIterator>
                                      </FnConcatIterator>
                                    </ReturnClause>
                                  </FLWORIterator>
                                </FunctionTraceIterator>
                              </ForVariable>
                              <ReturnClause>
                                <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                                  <ForVarIterator varname="x"/>
                                  <ForVarIterator varname="y"/>
                                </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                              </ReturnClause>
                            </FLWORIterator>
                          </FunctionTraceIterator>
                        </ForVariable>
                        <ReturnClause>
                          <SpecificNumArithIterator_AddOperation_DOUBLE>
                            <ForVarIterator varname="x"/>
                            <LetVarIterator varname="v2">
                              <ForVarIterator varname="p"/>
                            </LetVarIterator>
                          </SpecificNumArithIterator_AddOperation_DOUBLE>
                        </ReturnClause>
                      </FLWORIterator>
                    </FunctionTraceIterator>
                  </LetVariable>
                  <ForVariable name="x">
                    <FunctionTraceIterator>
                      <FLWORIterator>
                        <ForVariable name="a">
                          <TreatIterator quant="">
                            <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,forward)" typename="*" nill allowed="0">
                              <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,camera)" typename="*" nill allowed="0">
                                <ForVarIterator varname="scene"/>
                              </ChildAxisIterator>
                            </ChildAxisIterator>
                          </TreatIterator>
                        </ForVariable>
                        <ReturnClause>
                          <FnConcatIterator>
                            <CastIterator type="xs:double">
                              <FnDataIterator>
                                <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                                  <ForVarIterator varname="a"/>
                                </AttributeAxisIterator>
                              </FnDataIterator>
                            </CastIterator>
                            <CastIterator type="xs:double">
                              <FnDataIterator>
                                <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                                  <ForVarIterator varname="a"/>
                                </AttributeAxisIterator>
                              </FnDataIterator>
                            </CastIterator>
                            <CastIterator type="xs:double">
                              <FnDataIterator>
                                <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                                  <ForVarIterator varname="a"/>
                                </AttributeAxisIterator>
                              </FnDataIterator>
                            </CastIterator>
                          </FnConcatIterator>
                        </ReturnClause>
                      </FLWORIterator>
                    </FunctionTraceIterator>
                  </ForVariable>
                  <ReturnClause>
                    <SpecificNumArithIterator_AddOperation_DOUBLE>
                      <ForVarIterator varname="x"/>
                      <LetVarIterator varname="v2">
                        <ForVarIterator varname="p"/>
                      </LetVarIterator>
                    </SpecificNumArithIterator_AddOperation_DOUBLE>
                  </ReturnClause>
                </FLWORIterator>
              </FunctionTraceIterator>
            </UDFunctionCallIterator>
            <FnConcatIterator/>
            <SingletonIterator value="xs:double(1)"/>
          </UDFunctionCallIterator>
        </ForVariable>
        <ReturnClause>
          <IfThenElseIterator>
            <TypedValueCompareIterator_DOUBLE>
              <ForVarIterator varname="channel"/>
              <SingletonIterator value="xs:double(0)"/>
            </TypedValueCompareIterator_DOUBLE>
            <SingletonIterator value="xs:integer(0)"/>
            <IfThenElseIterator>
              <TypedValueCompareIterator_DOUBLE>
                <ForVarIterator varname="channel"/>
                <SingletonIterator value="xs:double(1)"/>
              </TypedValueCompareIterator_DOUBLE>
              <SingletonIterator value="xs:integer(1)"/>
              <ForVarIterator varname="channel"/>
            </IfThenElseIterator>
          </IfThenElseIterator>
        </ReturnClause>
      </FLWORIterator>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="scene:calculate-basis">
    <FLWORIterator>
      <ForVariable name="camera">
        <LetVarIterator varname="camera"/>
      </ForVariable>
      <LetVariable name="position" materialize="true">
        <FunctionTraceIterator>
          <FLWORIterator>
            <ForVariable name="a">
              <TreatIterator quant="">
                <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,position)" typename="*" nill allowed="0">
                  <ForVarIterator varname="camera"/>
                </ChildAxisIterator>
              </TreatIterator>
            </ForVariable>
            <ReturnClause>
              <FnConcatIterator>
                <CastIterator type="xs:double">
                  <FnDataIterator>
                    <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                      <ForVarIterator varname="a"/>
                    </AttributeAxisIterator>
                  </FnDataIterator>
                </CastIterator>
                <CastIterator type="xs:double">
                  <FnDataIterator>
                    <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                      <ForVarIterator varname="a"/>
                    </AttributeAxisIterator>
                  </FnDataIterator>
                </CastIterator>
                <CastIterator type="xs:double">
                  <FnDataIterator>
                    <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                      <ForVarIterator varname="a"/>
                    </AttributeAxisIterator>
                  </FnDataIterator>
                </CastIterator>
              </FnConcatIterator>
            </ReturnClause>
          </FLWORIterator>
        </FunctionTraceIterator>
      </LetVariable>
      <LetVariable name="forward" materialize="true">
        <UDFunctionCallIterator function="vector:normalize">
          <FunctionTraceIterator>
            <FLWORIterator>
              <ForVariable name="x">
                <FunctionTraceIterator>
                  <FLWORIterator>
                    <ForVariable name="a">
                      <TreatIterator quant="">
                        <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,look-at)" typename="*" nill allowed="0">
                          <ForVarIterator varname="camera"/>
                        </ChildAxisIterator>
                      </TreatIterator>
                    </ForVariable>
                    <ReturnClause>
                      <FnConcatIterator>
                        <CastIterator type="xs:double">
                          <FnDataIterator>
                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                              <ForVarIterator varname="a"/>
                            </AttributeAxisIterator>
                          </FnDataIterator>
                        </CastIterator>
                        <CastIterator type="xs:double">
                          <FnDataIterator>
                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                              <ForVarIterator varname="a"/>
                            </AttributeAxisIterator>
                          </FnDataIterator>
                        </CastIterator>
                        <CastIterator type="xs:double">
                          <FnDataIterator>
                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                              <ForVarIterator varname="a"/>
                            </AttributeAxisIterator>
                          </FnDataIterator>
                        </CastIterator>
                      </FnConcatIterator>
                    </ReturnClause>
                  </FLWORIterator>
                </FunctionTraceIterator>
              </ForVariable>
              <ReturnClause>
                <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                  <ForVarIterator varname="x"/>
                  <LetVarIterator varname="position">
                    <ForVarIterator varname="p"/>
                  </LetVarIterator>
                </SpecificNumArithIterator_SubtractOperation_DOUBLE>
              </ReturnClause>
            </FLWORIterator>
          </FunctionTraceIterator>
        </UDFunctionCallIterator>
      </LetVariable>
      <LetVariable name="right" materialize="true">
        <UDFunctionCallIterator function="vector:normalize">
          <FunctionTraceIterator>
            <FLWORIterator>
              <LetVariable name="v2" materialize="true">
                <PromoteIterator type="xs:double">
                  <FnConcatIterator>
                    <SingletonIterator value="xs:integer(0)"/>
                    <SingletonIterator value="xs:integer(-1)"/>
                    <SingletonIterator value="xs:integer(0)"/>
                  </FnConcatIterator>
                </PromoteIterator>
              </LetVariable>
              <ReturnClause>
                <FnConcatIterator>
                  <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <LetVarIterator varname="forward" targetPos="2"/>
                      <LetVarIterator varname="v2" targetPos="3"/>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <LetVarIterator varname="forward" targetPos="3"/>
                      <LetVarIterator varname="v2" targetPos="2"/>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                  </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                  <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <LetVarIterator varname="forward" targetPos="3"/>
                      <LetVarIterator varname="v2" targetPos="1"/>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <LetVarIterator varname="forward" targetPos="1"/>
                      <LetVarIterator varname="v2" targetPos="3"/>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                  </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                  <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <LetVarIterator varname="forward" targetPos="1"/>
                      <LetVarIterator varname="v2" targetPos="2"/>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <LetVarIterator varname="forward" targetPos="2"/>
                      <LetVarIterator varname="v2" targetPos="1"/>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                  </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                </FnConcatIterator>
              </ReturnClause>
            </FLWORIterator>
          </FunctionTraceIterator>
        </UDFunctionCallIterator>
      </LetVariable>
      <ReturnClause>
        <ElementIterator>
          <SingletonIterator value="xs:QName(,,camera)"/>
          <EnclosedIterator attr_cont="false">
            <FnConcatIterator>
              <FunctionTraceIterator>
                <ElementIterator>
                  <SingletonIterator value="xs:QName(,,position)"/>
                  <EnclosedIterator attr_cont="false">
                    <IfThenElseIterator>
                      <FnExactlyOneIterator>
                        <LetVarIterator varname="position">
                          <SingletonIterator value="xs:integer(3)"/>
                          <SingletonIterator value="xs:integer(2)"/>
                        </LetVarIterator>
                      </FnExactlyOneIterator>
                      <FnConcatIterator>
                        <AttributeIterator qname="xs:QName(,,x)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="position" targetPos="1"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                        <AttributeIterator qname="xs:QName(,,y)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="position" targetPos="2"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                        <AttributeIterator qname="xs:QName(,,z)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="position" targetPos="3"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                      </FnConcatIterator>
                      <FnConcatIterator/>
                    </IfThenElseIterator>
                  </EnclosedIterator>
                </ElementIterator>
              </FunctionTraceIterator>
              <FunctionTraceIterator>
                <ElementIterator>
                  <SingletonIterator value="xs:QName(,,forward)"/>
                  <EnclosedIterator attr_cont="false">
                    <IfThenElseIterator>
                      <FnExactlyOneIterator>
                        <LetVarIterator varname="forward">
                          <SingletonIterator value="xs:integer(3)"/>
                          <SingletonIterator value="xs:integer(2)"/>
                        </LetVarIterator>
                      </FnExactlyOneIterator>
                      <FnConcatIterator>
                        <AttributeIterator qname="xs:QName(,,x)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="forward" targetPos="1"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                        <AttributeIterator qname="xs:QName(,,y)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="forward" targetPos="2"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                        <AttributeIterator qname="xs:QName(,,z)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="forward" targetPos="3"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                      </FnConcatIterator>
                      <FnConcatIterator/>
                    </IfThenElseIterator>
                  </EnclosedIterator>
                </ElementIterator>
              </FunctionTraceIterator>
              <FunctionTraceIterator>
                <FLWORIterator>
                  <LetVariable name="v" materialize="true">
                    <FunctionTraceIterator>
                      <FnConcatIterator>
                        <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                          <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            <LetVarIterator varname="forward" targetPos="2"/>
                            <LetVarIterator varname="right" targetPos="3"/>
                          </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            <LetVarIterator varname="forward" targetPos="3"/>
                            <LetVarIterator varname="right" targetPos="2"/>
                          </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                        <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                          <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            <LetVarIterator varname="forward" targetPos="3"/>
                            <LetVarIterator varname="right" targetPos="1"/>
                          </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            <LetVarIterator varname="forward" targetPos="1"/>
                            <LetVarIterator varname="right" targetPos="3"/>
                          </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                        <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                          <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            <LetVarIterator varname="forward" targetPos="1"/>
                            <LetVarIterator varname="right" targetPos="2"/>
                          </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            <LetVarIterator varname="forward" targetPos="2"/>
                            <LetVarIterator varname="right" targetPos="1"/>
                          </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                      </FnConcatIterator>
                    </FunctionTraceIterator>
                  </LetVariable>
                  <ReturnClause>
                    <ElementIterator>
                      <SingletonIterator value="xs:QName(,,up)"/>
                      <EnclosedIterator attr_cont="false">
                        <IfThenElseIterator>
                          <FnExactlyOneIterator>
                            <LetVarIterator varname="v">
                              <SingletonIterator value="xs:integer(3)"/>
                              <SingletonIterator value="xs:integer(2)"/>
                            </LetVarIterator>
                          </FnExactlyOneIterator>
                          <FnConcatIterator>
                            <AttributeIterator qname="xs:QName(,,x)">
                              <EnclosedIterator attr_cont="true">
                                <LetVarIterator varname="v" targetPos="1"/>
                              </EnclosedIterator>
                            </AttributeIterator>
                            <AttributeIterator qname="xs:QName(,,y)">
                              <EnclosedIterator attr_cont="true">
                                <LetVarIterator varname="v" targetPos="2"/>
                              </EnclosedIterator>
                            </AttributeIterator>
                            <AttributeIterator qname="xs:QName(,,z)">
                              <EnclosedIterator attr_cont="true">
                                <LetVarIterator varname="v" targetPos="3"/>
                              </EnclosedIterator>
                            </AttributeIterator>
                          </FnConcatIterator>
                          <FnConcatIterator/>
                        </IfThenElseIterator>
                      </EnclosedIterator>
                    </ElementIterator>
                  </ReturnClause>
                </FLWORIterator>
              </FunctionTraceIterator>
              <FunctionTraceIterator>
                <ElementIterator>
                  <SingletonIterator value="xs:QName(,,right)"/>
                  <EnclosedIterator attr_cont="false">
                    <IfThenElseIterator>
                      <FnExactlyOneIterator>
                        <LetVarIterator varname="right">
                          <SingletonIterator value="xs:integer(3)"/>
                          <SingletonIterator value="xs:integer(2)"/>
                        </LetVarIterator>
                      </FnExactlyOneIterator>
                      <FnConcatIterator>
                        <AttributeIterator qname="xs:QName(,,x)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="right" targetPos="1"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                        <AttributeIterator qname="xs:QName(,,y)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="right" targetPos="2"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                        <AttributeIterator qname="xs:QName(,,z)">
                          <EnclosedIterator attr_cont="true">
                            <LetVarIterator varname="right" targetPos="3"/>
                          </EnclosedIterator>
                        </AttributeIterator>
                      </FnConcatIterator>
                      <FnConcatIterator/>
                    </IfThenElseIterator>
                  </EnclosedIterator>
                </ElementIterator>
              </FunctionTraceIterator>
            </FnConcatIterator>
          </EnclosedIterator>
        </ElementIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="vector:normalize">
    <FLWORIterator>
      <LetVariable name="v" materialize="true">
        <LetVarIterator varname="v"/>
      </LetVariable>
      <LetVariable name="length" materialize="true">
        <FunctionTraceIterator>
          <SqrtIterator>
            <FnSumDoubleIterator>
              <FLWORIterator>
                <ForVariable name="x">
                  <LetVarIterator varname="v"/>
                </ForVariable>
                <ReturnClause>
                  <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    <ForVarIterator varname="x"/>
                    <ForVarIterator varname="x"/>
                  </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                </ReturnClause>
              </FLWORIterator>
            </FnSumDoubleIterator>
          </SqrtIterator>
        </FunctionTraceIterator>
      </LetVariable>
      <ForVariable name="x">
        <LetVarIterator varname="v"/>
      </ForVariable>
      <ReturnClause>
        <SpecificNumArithIterator_DivideOperation_DOUBLE>
          <ForVarIterator varname="x"/>
          <LetVarIterator varname="length"/>
        </SpecificNumArithIterator_DivideOperation_DOUBLE>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="raytracer:trace-ray">
    <FLWORIterator>
      <ForVariable name="scene">
        <LetVarIterator varname="scene"/>
      </ForVariable>
      <LetVariable name="source" materialize="true">
        <LetVarIterator varname="source"/>
      </LetVariable>
      <LetVariable name="direction" materialize="true">
        <LetVarIterator varname="direction"/>
      </LetVariable>
      <LetVariable name="ignore" materialize="true">
        <LetVarIterator varname="ignore"/>
      </LetVariable>
      <ForVariable name="contribution">
        <LetVarIterator varname="contribution"/>
      </ForVariable>
      <ReturnClause>
        <SubsequenceIntIterator>
          <FnConcatIterator>
            <TupleStreamIterator>
              <OrderByIterator>
                <OrderByForVariable inputVar="$$context-item : "/>
                <OrderByLetVariable inputVar="distance : "/>
                <OrderBySpec>
                  <LetVarIterator varname="distance"/>
                </OrderBySpec>
                <WhereIterator>
                  <LetIterator>
                    <LetVariable name="distance" materialize="true"/>
                    <WhereIterator>
                      <ForIterator>
                        <ForVariable name="$$context-item"/>
                        <ForIterator>
                          <ForVariable name="$$context-item"/>
                          <TupleSourceIterator/>
                          <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,shapes)" typename="*" nill allowed="0">
                            <ForVarIterator varname="scene"/>
                          </ChildAxisIterator>
                        </ForIterator>
                        <ChildAxisIterator test kind="match_name_test" qname="*" typename="*" nill allowed="0">
                          <ForVarIterator varname="$$context-item"/>
                        </ChildAxisIterator>
                      </ForIterator>
                      <FnBooleanIterator>
                        <IsSameNodeIterator>
                          <ForVarIterator varname="$$context-item"/>
                          <LetVarIterator varname="ignore"/>
                        </IsSameNodeIterator>
                      </FnBooleanIterator>
                    </WhereIterator>
                    <UDFunctionCallIterator function="shapes:intersect">
                      <LetVarIterator varname="source"/>
                      <LetVarIterator varname="direction"/>
                      <ForVarIterator varname="$$context-item"/>
                    </UDFunctionCallIterator>
                  </LetIterator>
                  <FnExistsIterator>
                    <LetVarIterator varname="distance"/>
                  </FnExistsIterator>
                </WhereIterator>
              </OrderByIterator>
              <UDFunctionCallIterator function="raytracer:shade">
                <FunctionTraceIterator>
                  <FLWORIterator>
                    <LetVariable name="v2" materialize="true">
                      <FunctionTraceIterator>
                        <FLWORIterator>
                          <ForVariable name="y">
                            <LetVarIterator varname="direction"/>
                          </ForVariable>
                          <ReturnClause>
                            <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                              <LetVarIterator varname="distance"/>
                              <ForVarIterator varname="y"/>
                            </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          </ReturnClause>
                        </FLWORIterator>
                      </FunctionTraceIterator>
                    </LetVariable>
                    <ForVariable name="x">
                      <LetVarIterator varname="source"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_AddOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="v2">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_AddOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FunctionTraceIterator>
                <LetVarIterator varname="direction"/>
                <ForVarIterator varname="$$context-item"/>
                <ForVarIterator varname="scene"/>
                <ForVarIterator varname="contribution"/>
              </UDFunctionCallIterator>
            </TupleStreamIterator>
            <FunctionTraceIterator>
              <FLWORIterator>
                <ForVariable name="a">
                  <TreatIterator quant="">
                    <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,background)" typename="*" nill allowed="0">
                      <ForVarIterator varname="scene"/>
                    </ChildAxisIterator>
                  </TreatIterator>
                </ForVariable>
                <ReturnClause>
                  <FnConcatIterator>
                    <CastIterator type="xs:double">
                      <FnDataIterator>
                        <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,r)" typename="*" nill allowed="0">
                          <ForVarIterator varname="a"/>
                        </AttributeAxisIterator>
                      </FnDataIterator>
                    </CastIterator>
                    <CastIterator type="xs:double">
                      <FnDataIterator>
                        <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,g)" typename="*" nill allowed="0">
                          <ForVarIterator varname="a"/>
                        </AttributeAxisIterator>
                      </FnDataIterator>
                    </CastIterator>
                    <CastIterator type="xs:double">
                      <FnDataIterator>
                        <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,b)" typename="*" nill allowed="0">
                          <ForVarIterator varname="a"/>
                        </AttributeAxisIterator>
                      </FnDataIterator>
                    </CastIterator>
                  </FnConcatIterator>
                </ReturnClause>
              </FLWORIterator>
            </FunctionTraceIterator>
          </FnConcatIterator>
          <SingletonIterator value="xs:integer(1)"/>
          <SingletonIterator value="xs:integer(3)"/>
        </SubsequenceIntIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="shapes:intersect">
    <FLWORIterator>
      <ForVariable name="shape">
        <LetVarIterator varname="shape"/>
      </ForVariable>
      <ReturnClause>
        <IfThenElseIterator>
          <InstanceOfIterator>
            <ForVarIterator varname="shape"/>
          </InstanceOfIterator>
          <UDFunctionCallIterator function="shapes:intersect-plane">
            <LetVarIterator varname="start"/>
            <LetVarIterator varname="dir"/>
            <ForVarIterator varname="shape"/>
          </UDFunctionCallIterator>
          <IfThenElseIterator>
            <InstanceOfIterator>
              <ForVarIterator varname="shape"/>
            </InstanceOfIterator>
            <UDFunctionCallIterator function="shapes:intersect-sphere">
              <LetVarIterator varname="start"/>
              <LetVarIterator varname="dir"/>
              <ForVarIterator varname="shape"/>
            </UDFunctionCallIterator>
            <FnConcatIterator/>
          </IfThenElseIterator>
        </IfThenElseIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="raytracer:shade">
    <FLWORIterator>
      <LetVariable name="position" materialize="true">
        <LetVarIterator varname="position"/>
      </LetVariable>
      <LetVariable name="direction" materialize="true">
        <LetVarIterator varname="direction"/>
      </LetVariable>
      <ForVariable name="shape">
        <LetVarIterator varname="shape"/>
      </ForVariable>
      <ForVariable name="scene">
        <LetVarIterator varname="scene"/>
      </ForVariable>
      <LetVariable name="material" materialize="true">
        <FunctionTraceIterator>
          <PromoteIterator type="xs:double">
            <FLWORIterator>
              <ForVariable name="name">
                <PromoteIterator type="xs:string">
                  <FnDataIterator>
                    <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,surface)" typename="*" nill allowed="0">
                      <ForVarIterator varname="shape"/>
                    </AttributeAxisIterator>
                  </FnDataIterator>
                </PromoteIterator>
              </ForVariable>
              <ReturnClause>
                <IfThenElseIterator>
                  <TypedValueCompareIterator_STRING>
                    <ForVarIterator varname="name"/>
                    <SingletonIterator value="xs:string(shiny)"/>
                  </TypedValueCompareIterator_STRING>
                  <FnConcatIterator>
                    <SingletonIterator value="xs:integer(1)"/>
                    <SingletonIterator value="xs:integer(1)"/>
                    <SingletonIterator value="xs:integer(1)"/>
                    <SingletonIterator value="xs:decimal(0.6)"/>
                    <SingletonIterator value="xs:integer(50)"/>
                  </FnConcatIterator>
                  <IfThenElseIterator>
                    <TypedValueCompareIterator_STRING>
                      <ForVarIterator varname="name"/>
                      <SingletonIterator value="xs:string(checkerboard)"/>
                    </TypedValueCompareIterator_STRING>
                    <IfThenElseIterator>
                      <FnBooleanIterator>
                        <TypedValueCompareIterator_DOUBLE>
                          <NumArithIterator_ModOperation>
                            <SpecificNumArithIterator_AddOperation_DOUBLE>
                              <FloorIterator>
                                <LetVarIterator varname="position" targetPos="1"/>
                              </FloorIterator>
                              <FloorIterator>
                                <LetVarIterator varname="position" targetPos="3"/>
                              </FloorIterator>
                            </SpecificNumArithIterator_AddOperation_DOUBLE>
                            <SingletonIterator value="xs:double(2)"/>
                          </NumArithIterator_ModOperation>
                          <SingletonIterator value="xs:double(0)"/>
                        </TypedValueCompareIterator_DOUBLE>
                      </FnBooleanIterator>
                      <FnConcatIterator>
                        <SingletonIterator value="xs:integer(1)"/>
                        <SingletonIterator value="xs:integer(1)"/>
                        <SingletonIterator value="xs:integer(1)"/>
                        <SingletonIterator value="xs:decimal(0.7)"/>
                        <SingletonIterator value="xs:integer(150)"/>
                      </FnConcatIterator>
                      <FnConcatIterator>
                        <SingletonIterator value="xs:integer(0)"/>
                        <SingletonIterator value="xs:integer(0)"/>
                        <SingletonIterator value="xs:integer(0)"/>
                        <SingletonIterator value="xs:decimal(0.1)"/>
                        <SingletonIterator value="xs:integer(50)"/>
                      </FnConcatIterator>
                    </IfThenElseIterator>
                    <FnConcatIterator/>
                  </IfThenElseIterator>
                </IfThenElseIterator>
              </ReturnClause>
            </FLWORIterator>
          </PromoteIterator>
        </FunctionTraceIterator>
      </LetVariable>
      <LetVariable name="normal" materialize="true">
        <UDFunctionCallIterator function="shapes:normal">
          <LetVarIterator varname="position"/>
          <ForVarIterator varname="shape"/>
        </UDFunctionCallIterator>
      </LetVariable>
      <LetVariable name="normal" materialize="true">
        <IfThenElseIterator>
          <TypedValueCompareIterator_DOUBLE>
            <FunctionTraceIterator>
              <FnSumDoubleIterator>
                <FLWORIterator>
                  <ForVariable name="x">
                    <LetVarIterator varname="direction"/>
                  </ForVariable>
                  <ReturnClause>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <ForVarIterator varname="x"/>
                      <LetVarIterator varname="normal">
                        <ForVarIterator varname="p"/>
                      </LetVarIterator>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                  </ReturnClause>
                </FLWORIterator>
              </FnSumDoubleIterator>
            </FunctionTraceIterator>
            <SingletonIterator value="xs:double(0)"/>
          </TypedValueCompareIterator_DOUBLE>
          <OpNumericUnaryIterator>
            <PromoteIterator type="xs:anyAtomicType">
              <LetVarIterator varname="normal"/>
            </PromoteIterator>
          </OpNumericUnaryIterator>
          <LetVarIterator varname="normal"/>
        </IfThenElseIterator>
      </LetVariable>
      <LetVariable name="reflected-direction" materialize="true">
        <FunctionTraceIterator>
          <FLWORIterator>
            <LetVariable name="v2" materialize="true">
              <FunctionTraceIterator>
                <FLWORIterator>
                  <ForVariable name="x">
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <SingletonIterator value="xs:double(2)"/>
                      <FunctionTraceIterator>
                        <FnSumDoubleIterator>
                          <FLWORIterator>
                            <ForVariable name="x">
                              <LetVarIterator varname="normal"/>
                            </ForVariable>
                            <ReturnClause>
                              <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                                <ForVarIterator varname="x"/>
                                <LetVarIterator varname="direction">
                                  <ForVarIterator varname="p"/>
                                </LetVarIterator>
                              </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            </ReturnClause>
                          </FLWORIterator>
                        </FnSumDoubleIterator>
                      </FunctionTraceIterator>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                  </ForVariable>
                  <ForVariable name="y">
                    <LetVarIterator varname="normal"/>
                  </ForVariable>
                  <ReturnClause>
                    <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      <ForVarIterator varname="x"/>
                      <ForVarIterator varname="y"/>
                    </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                  </ReturnClause>
                </FLWORIterator>
              </FunctionTraceIterator>
            </LetVariable>
            <ForVariable name="x">
              <LetVarIterator varname="direction"/>
            </ForVariable>
            <ReturnClause>
              <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                <ForVarIterator varname="x"/>
                <LetVarIterator varname="v2">
                  <ForVarIterator varname="p"/>
                </LetVarIterator>
              </SpecificNumArithIterator_SubtractOperation_DOUBLE>
            </ReturnClause>
          </FLWORIterator>
        </FunctionTraceIterator>
      </LetVariable>
      <LetVariable name="surface-reflectiveness" materialize="true">
        <LetVarIterator varname="material" targetPos="4"/>
      </LetVariable>
      <LetVariable name="contribution" materialize="true">
        <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
          <LetVarIterator varname="contribution"/>
          <LetVarIterator varname="surface-reflectiveness"/>
        </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
      </LetVariable>
      <ReturnClause>
        <UDFunctionCallIterator function="vector:sum">
          <FnConcatIterator>
            <UDFunctionCallIterator function="raytracer:light">
              <ForVarIterator varname="scene"/>
              <ForVarIterator varname="shape"/>
              <LetVarIterator varname="position"/>
              <LetVarIterator varname="normal"/>
              <LetVarIterator varname="reflected-direction"/>
              <LetVarIterator varname="material"/>
            </UDFunctionCallIterator>
            <FunctionTraceIterator>
              <FLWORIterator>
                <ForVariable name="y">
                  <IfThenElseIterator>
                    <FnBooleanIterator>
                      <TypedValueCompareIterator_DOUBLE>
                        <LetVarIterator varname="contribution"/>
                        <SingletonIterator value="xs:double(0.01)"/>
                      </TypedValueCompareIterator_DOUBLE>
                    </FnBooleanIterator>
                    <UDFunctionCallIterator function="raytracer:trace-ray">
                      <ForVarIterator varname="scene"/>
                      <LetVarIterator varname="position"/>
                      <LetVarIterator varname="reflected-direction"/>
                      <ForVarIterator varname="shape"/>
                      <PromoteIterator type="xs:double">
                        <LetVarIterator varname="contribution"/>
                      </PromoteIterator>
                    </UDFunctionCallIterator>
                    <FnConcatIterator/>
                  </IfThenElseIterator>
                </ForVariable>
                <ReturnClause>
                  <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    <LetVarIterator varname="surface-reflectiveness"/>
                    <ForVarIterator varname="y"/>
                  </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                </ReturnClause>
              </FLWORIterator>
            </FunctionTraceIterator>
          </FnConcatIterator>
          <SingletonIterator value="xs:integer(3)"/>
        </UDFunctionCallIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="shapes:intersect-plane">
    <TupleStreamIterator>
      <WhereIterator>
        <LetIterator>
          <LetVariable name="$$temp3" materialize="true"/>
          <WhereIterator>
            <ForIterator>
              <ForVariable name="denom"/>
              <LetIterator>
                <LetVariable name="normal" materialize="true"/>
                <ForIterator>
                  <ForVariable name="plane"/>
                  <TupleSourceIterator/>
                  <LetVarIterator varname="plane"/>
                </ForIterator>
                <FunctionTraceIterator>
                  <FLWORIterator>
                    <ForVariable name="a">
                      <TreatIterator quant="">
                        <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,normal)" typename="*" nill allowed="0">
                          <ForVarIterator varname="plane"/>
                        </ChildAxisIterator>
                      </TreatIterator>
                    </ForVariable>
                    <ReturnClause>
                      <FnConcatIterator>
                        <CastIterator type="xs:double">
                          <FnDataIterator>
                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                              <ForVarIterator varname="a"/>
                            </AttributeAxisIterator>
                          </FnDataIterator>
                        </CastIterator>
                        <CastIterator type="xs:double">
                          <FnDataIterator>
                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                              <ForVarIterator varname="a"/>
                            </AttributeAxisIterator>
                          </FnDataIterator>
                        </CastIterator>
                        <CastIterator type="xs:double">
                          <FnDataIterator>
                            <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                              <ForVarIterator varname="a"/>
                            </AttributeAxisIterator>
                          </FnDataIterator>
                        </CastIterator>
                      </FnConcatIterator>
                    </ReturnClause>
                  </FLWORIterator>
                </FunctionTraceIterator>
              </LetIterator>
              <FunctionTraceIterator>
                <FnSumDoubleIterator>
                  <FLWORIterator>
                    <ForVariable name="x">
                      <LetVarIterator varname="direction"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="normal">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FnSumDoubleIterator>
              </FunctionTraceIterator>
            </ForIterator>
            <TypedValueCompareIterator_DOUBLE>
              <ForVarIterator varname="denom"/>
              <SingletonIterator value="xs:double(0)"/>
            </TypedValueCompareIterator_DOUBLE>
          </WhereIterator>
          <SpecificNumArithIterator_SubtractOperation_DOUBLE>
            <CastIterator type="xs:double">
              <FnDataIterator>
                <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,offset)" typename="*" nill allowed="0">
                  <ForVarIterator varname="plane"/>
                </AttributeAxisIterator>
              </FnDataIterator>
            </CastIterator>
            <SpecificNumArithIterator_DivideOperation_DOUBLE>
              <FunctionTraceIterator>
                <FnSumDoubleIterator>
                  <FLWORIterator>
                    <ForVariable name="x">
                      <LetVarIterator varname="start"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="normal">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FnSumDoubleIterator>
              </FunctionTraceIterator>
              <ForVarIterator varname="denom"/>
            </SpecificNumArithIterator_DivideOperation_DOUBLE>
          </SpecificNumArithIterator_SubtractOperation_DOUBLE>
        </LetIterator>
        <TypedValueCompareIterator_DOUBLE>
          <LetVarIterator varname="$$temp3"/>
          <SingletonIterator value="xs:double(0)"/>
        </TypedValueCompareIterator_DOUBLE>
      </WhereIterator>
      <LetVarIterator varname="$$temp3"/>
    </TupleStreamIterator>
  </iterator-tree>
  <iterator-tree description="shapes:intersect-sphere">
    <TupleStreamIterator>
      <LetIterator>
        <LetVariable name="sqrt" materialize="true"/>
        <WhereIterator>
          <LetIterator>
            <LetVariable name="descriminant" materialize="true"/>
            <ForIterator>
              <ForVariable name="beta"/>
              <LetIterator>
                <LetVariable name="y" materialize="true"/>
                <LetIterator>
                  <LetVariable name="radius" materialize="true"/>
                  <ForIterator>
                    <ForVariable name="sphere"/>
                    <TupleSourceIterator/>
                    <LetVarIterator varname="sphere"/>
                  </ForIterator>
                  <CastIterator type="xs:double">
                    <FnDataIterator>
                      <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,radius)" typename="*" nill allowed="0">
                        <ForVarIterator varname="sphere"/>
                      </AttributeAxisIterator>
                    </FnDataIterator>
                  </CastIterator>
                </LetIterator>
                <FunctionTraceIterator>
                  <FLWORIterator>
                    <LetVariable name="v2" materialize="true">
                      <FunctionTraceIterator>
                        <FLWORIterator>
                          <ForVariable name="a">
                            <TreatIterator quant="">
                              <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,center)" typename="*" nill allowed="0">
                                <ForVarIterator varname="sphere"/>
                              </ChildAxisIterator>
                            </TreatIterator>
                          </ForVariable>
                          <ReturnClause>
                            <FnConcatIterator>
                              <CastIterator type="xs:double">
                                <FnDataIterator>
                                  <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                                    <ForVarIterator varname="a"/>
                                  </AttributeAxisIterator>
                                </FnDataIterator>
                              </CastIterator>
                              <CastIterator type="xs:double">
                                <FnDataIterator>
                                  <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                                    <ForVarIterator varname="a"/>
                                  </AttributeAxisIterator>
                                </FnDataIterator>
                              </CastIterator>
                              <CastIterator type="xs:double">
                                <FnDataIterator>
                                  <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                                    <ForVarIterator varname="a"/>
                                  </AttributeAxisIterator>
                                </FnDataIterator>
                              </CastIterator>
                            </FnConcatIterator>
                          </ReturnClause>
                        </FLWORIterator>
                      </FunctionTraceIterator>
                    </LetVariable>
                    <ForVariable name="x">
                      <LetVarIterator varname="start"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="v2">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FunctionTraceIterator>
              </LetIterator>
              <FunctionTraceIterator>
                <FnSumDoubleIterator>
                  <FLWORIterator>
                    <ForVariable name="x">
                      <LetVarIterator varname="direction"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="y">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FnSumDoubleIterator>
              </FunctionTraceIterator>
            </ForIterator>
            <SpecificNumArithIterator_SubtractOperation_DOUBLE>
              <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                <ForVarIterator varname="beta"/>
                <ForVarIterator varname="beta"/>
              </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
              <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                <FunctionTraceIterator>
                  <FnSumDoubleIterator>
                    <FLWORIterator>
                      <ForVariable name="x">
                        <LetVarIterator varname="y"/>
                      </ForVariable>
                      <ReturnClause>
                        <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          <ForVarIterator varname="x"/>
                          <LetVarIterator varname="y">
                            <ForVarIterator varname="p"/>
                          </LetVarIterator>
                        </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      </ReturnClause>
                    </FLWORIterator>
                  </FnSumDoubleIterator>
                </FunctionTraceIterator>
                <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                  <LetVarIterator varname="radius"/>
                  <LetVarIterator varname="radius"/>
                </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
              </SpecificNumArithIterator_SubtractOperation_DOUBLE>
            </SpecificNumArithIterator_SubtractOperation_DOUBLE>
          </LetIterator>
          <CompareIterator>
            <LetVarIterator varname="descriminant"/>
            <SingletonIterator value="xs:integer(0)"/>
          </CompareIterator>
        </WhereIterator>
        <SqrtIterator>
          <LetVarIterator varname="descriminant"/>
        </SqrtIterator>
      </LetIterator>
      <SequencePointAccessIterator>
        <FLWORIterator>
          <ForVariable name="$$context-item">
            <FnConcatIterator>
              <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                <OpDoubleUnaryIterator>
                  <ForVarIterator varname="beta"/>
                </OpDoubleUnaryIterator>
                <LetVarIterator varname="sqrt"/>
              </SpecificNumArithIterator_SubtractOperation_DOUBLE>
              <SpecificNumArithIterator_AddOperation_DOUBLE>
                <OpDoubleUnaryIterator>
                  <ForVarIterator varname="beta"/>
                </OpDoubleUnaryIterator>
                <LetVarIterator varname="sqrt"/>
              </SpecificNumArithIterator_AddOperation_DOUBLE>
            </FnConcatIterator>
          </ForVariable>
          <WhereClause>
            <TypedValueCompareIterator_DOUBLE>
              <ForVarIterator varname="$$context-item"/>
              <SingletonIterator value="xs:double(0)"/>
            </TypedValueCompareIterator_DOUBLE>
          </WhereClause>
          <ReturnClause>
            <ForVarIterator varname="$$context-item"/>
          </ReturnClause>
        </FLWORIterator>
        <SingletonIterator value="xs:integer(1)"/>
      </SequencePointAccessIterator>
    </TupleStreamIterator>
  </iterator-tree>
  <iterator-tree description="shapes:normal">
    <FLWORIterator>
      <ForVariable name="shape">
        <LetVarIterator varname="shape"/>
      </ForVariable>
      <ReturnClause>
        <IfThenElseIterator>
          <InstanceOfIterator>
            <ForVarIterator varname="shape"/>
          </InstanceOfIterator>
          <FunctionTraceIterator>
            <FLWORIterator>
              <ForVariable name="a">
                <TreatIterator quant="">
                  <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,normal)" typename="*" nill allowed="0">
                    <ForVarIterator varname="shape"/>
                  </ChildAxisIterator>
                </TreatIterator>
              </ForVariable>
              <ReturnClause>
                <FnConcatIterator>
                  <CastIterator type="xs:double">
                    <FnDataIterator>
                      <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                        <ForVarIterator varname="a"/>
                      </AttributeAxisIterator>
                    </FnDataIterator>
                  </CastIterator>
                  <CastIterator type="xs:double">
                    <FnDataIterator>
                      <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                        <ForVarIterator varname="a"/>
                      </AttributeAxisIterator>
                    </FnDataIterator>
                  </CastIterator>
                  <CastIterator type="xs:double">
                    <FnDataIterator>
                      <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                        <ForVarIterator varname="a"/>
                      </AttributeAxisIterator>
                    </FnDataIterator>
                  </CastIterator>
                </FnConcatIterator>
              </ReturnClause>
            </FLWORIterator>
          </FunctionTraceIterator>
          <IfThenElseIterator>
            <InstanceOfIterator>
              <ForVarIterator varname="shape"/>
            </InstanceOfIterator>
            <UDFunctionCallIterator function="shapes:sphere-normal">
              <LetVarIterator varname="position"/>
              <ForVarIterator varname="shape"/>
            </UDFunctionCallIterator>
            <FnConcatIterator/>
          </IfThenElseIterator>
        </IfThenElseIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="raytracer:light">
    <FLWORIterator>
      <ForVariable name="scene">
        <LetVarIterator varname="scene"/>
      </ForVariable>
      <ForVariable name="shape">
        <LetVarIterator varname="shape"/>
      </ForVariable>
      <LetVariable name="position" materialize="true">
        <LetVarIterator varname="position"/>
      </LetVariable>
      <LetVariable name="normal" materialize="true">
        <LetVarIterator varname="normal"/>
      </LetVariable>
      <LetVariable name="reflected-direction" materialize="true">
        <LetVarIterator varname="reflected-direction"/>
      </LetVariable>
      <LetVariable name="material" materialize="true">
        <LetVarIterator varname="material"/>
      </LetVariable>
      <LetVariable name="surface-color" materialize="true">
        <LetVarIterator varname="material">
          <SingletonIterator value="xs:integer(1)"/>
          <SingletonIterator value="xs:integer(3)"/>
        </LetVarIterator>
      </LetVariable>
      <LetVariable name="surface-reflectiveness" materialize="true">
        <LetVarIterator varname="material" targetPos="4"/>
      </LetVariable>
      <ForVariable name="$$opt_temp_0">
        <HoistIterator>
          <PromoteIterator type="xs:anyAtomicType">
            <LetVarIterator varname="material" targetPos="5"/>
          </PromoteIterator>
        </HoistIterator>
      </ForVariable>
      <ReturnClause>
        <UDFunctionCallIterator function="vector:sum">
          <FLWORIterator>
            <ForVariable name="light">
              <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,light)" typename="*" nill allowed="0">
                <ForVarIterator varname="scene"/>
              </ChildAxisIterator>
            </ForVariable>
            <LetVariable name="light-color" materialize="true">
              <FunctionTraceIterator>
                <FLWORIterator>
                  <ForVariable name="a">
                    <TreatIterator quant="">
                      <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,color)" typename="*" nill allowed="0">
                        <ForVarIterator varname="light"/>
                      </ChildAxisIterator>
                    </TreatIterator>
                  </ForVariable>
                  <ReturnClause>
                    <FnConcatIterator>
                      <CastIterator type="xs:double">
                        <FnDataIterator>
                          <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,r)" typename="*" nill allowed="0">
                            <ForVarIterator varname="a"/>
                          </AttributeAxisIterator>
                        </FnDataIterator>
                      </CastIterator>
                      <CastIterator type="xs:double">
                        <FnDataIterator>
                          <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,g)" typename="*" nill allowed="0">
                            <ForVarIterator varname="a"/>
                          </AttributeAxisIterator>
                        </FnDataIterator>
                      </CastIterator>
                      <CastIterator type="xs:double">
                        <FnDataIterator>
                          <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,b)" typename="*" nill allowed="0">
                            <ForVarIterator varname="a"/>
                          </AttributeAxisIterator>
                        </FnDataIterator>
                      </CastIterator>
                    </FnConcatIterator>
                  </ReturnClause>
                </FLWORIterator>
              </FunctionTraceIterator>
            </LetVariable>
            <LetVariable name="light-position" materialize="true">
              <FunctionTraceIterator>
                <FLWORIterator>
                  <ForVariable name="a">
                    <TreatIterator quant="">
                      <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,position)" typename="*" nill allowed="0">
                        <ForVarIterator varname="light"/>
                      </ChildAxisIterator>
                    </TreatIterator>
                  </ForVariable>
                  <ReturnClause>
                    <FnConcatIterator>
                      <CastIterator type="xs:double">
                        <FnDataIterator>
                          <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                            <ForVarIterator varname="a"/>
                          </AttributeAxisIterator>
                        </FnDataIterator>
                      </CastIterator>
                      <CastIterator type="xs:double">
                        <FnDataIterator>
                          <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                            <ForVarIterator varname="a"/>
                          </AttributeAxisIterator>
                        </FnDataIterator>
                      </CastIterator>
                      <CastIterator type="xs:double">
                        <FnDataIterator>
                          <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                            <ForVarIterator varname="a"/>
                          </AttributeAxisIterator>
                        </FnDataIterator>
                      </CastIterator>
                    </FnConcatIterator>
                  </ReturnClause>
                </FLWORIterator>
              </FunctionTraceIterator>
            </LetVariable>
            <LetVariable name="light-direction" materialize="true">
              <UDFunctionCallIterator function="vector:normalize">
                <FunctionTraceIterator>
                  <FLWORIterator>
                    <ForVariable name="x">
                      <LetVarIterator varname="light-position"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="position">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FunctionTraceIterator>
              </UDFunctionCallIterator>
            </LetVariable>
            <ForVariable name="illumination">
              <FunctionTraceIterator>
                <FnSumDoubleIterator>
                  <FLWORIterator>
                    <ForVariable name="x">
                      <LetVarIterator varname="light-direction"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="normal">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FnSumDoubleIterator>
              </FunctionTraceIterator>
            </ForVariable>
            <ForVariable name="specular">
              <FunctionTraceIterator>
                <FnSumDoubleIterator>
                  <FLWORIterator>
                    <ForVariable name="x">
                      <LetVarIterator varname="light-direction"/>
                    </ForVariable>
                    <ReturnClause>
                      <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                        <ForVarIterator varname="x"/>
                        <LetVarIterator varname="reflected-direction">
                          <ForVarIterator varname="p"/>
                        </LetVarIterator>
                      </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                    </ReturnClause>
                  </FLWORIterator>
                </FnSumDoubleIterator>
              </FunctionTraceIterator>
            </ForVariable>
            <WhereClause>
              <FnBooleanIterator>
                <CompareIterator>
                  <UDFunctionCallIterator function="raytracer:test-ray">
                    <ForVarIterator varname="scene"/>
                    <LetVarIterator varname="position"/>
                    <LetVarIterator varname="light-direction"/>
                    <ForVarIterator varname="shape"/>
                  </UDFunctionCallIterator>
                  <FunctionTraceIterator>
                    <SqrtIterator>
                      <FnSumDoubleIterator>
                        <FLWORIterator>
                          <ForVariable name="x">
                            <FunctionTraceIterator>
                              <FLWORIterator>
                                <ForVariable name="x">
                                  <LetVarIterator varname="light-position"/>
                                </ForVariable>
                                <ReturnClause>
                                  <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                                    <ForVarIterator varname="x"/>
                                    <LetVarIterator varname="position">
                                      <ForVarIterator varname="p"/>
                                    </LetVarIterator>
                                  </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                                </ReturnClause>
                              </FLWORIterator>
                            </FunctionTraceIterator>
                          </ForVariable>
                          <ReturnClause>
                            <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                              <ForVarIterator varname="x"/>
                              <ForVarIterator varname="x"/>
                            </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          </ReturnClause>
                        </FLWORIterator>
                      </FnSumDoubleIterator>
                    </SqrtIterator>
                  </FunctionTraceIterator>
                </CompareIterator>
              </FnBooleanIterator>
            </WhereClause>
            <ReturnClause>
              <FnConcatIterator>
                <IfThenElseIterator>
                  <TypedValueCompareIterator_DOUBLE>
                    <ForVarIterator varname="illumination"/>
                    <SingletonIterator value="xs:double(0)"/>
                  </TypedValueCompareIterator_DOUBLE>
                  <FunctionTraceIterator>
                    <FLWORIterator>
                      <ForVariable name="y">
                        <FunctionTraceIterator>
                          <FLWORIterator>
                            <ForVariable name="x">
                              <LetVarIterator varname="light-color"/>
                            </ForVariable>
                            <ReturnClause>
                              <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                                <ForVarIterator varname="x"/>
                                <LetVarIterator varname="surface-color">
                                  <ForVarIterator varname="p"/>
                                </LetVarIterator>
                              </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                            </ReturnClause>
                          </FLWORIterator>
                        </FunctionTraceIterator>
                      </ForVariable>
                      <ReturnClause>
                        <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          <ForVarIterator varname="illumination"/>
                          <ForVarIterator varname="y"/>
                        </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      </ReturnClause>
                    </FLWORIterator>
                  </FunctionTraceIterator>
                  <FnConcatIterator/>
                </IfThenElseIterator>
                <IfThenElseIterator>
                  <TypedValueCompareIterator_DOUBLE>
                    <ForVarIterator varname="specular"/>
                    <SingletonIterator value="xs:double(0)"/>
                  </TypedValueCompareIterator_DOUBLE>
                  <FunctionTraceIterator>
                    <FLWORIterator>
                      <LetVariable name="x" materialize="true">
                        <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          <PowIterator>
                            <ForVarIterator varname="specular"/>
                            <UnhoistIterator>
                              <ForVarIterator varname="$$opt_temp_0"/>
                            </UnhoistIterator>
                          </PowIterator>
                          <LetVarIterator varname="surface-reflectiveness"/>
                        </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      </LetVariable>
                      <ForVariable name="y">
                        <LetVarIterator varname="light-color"/>
                      </ForVariable>
                      <ReturnClause>
                        <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                          <LetVarIterator varname="x"/>
                          <ForVarIterator varname="y"/>
                        </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                      </ReturnClause>
                    </FLWORIterator>
                  </FunctionTraceIterator>
                  <FnConcatIterator/>
                </IfThenElseIterator>
              </FnConcatIterator>
            </ReturnClause>
          </FLWORIterator>
          <SingletonIterator value="xs:integer(3)"/>
        </UDFunctionCallIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="vector:sum">
    <PromoteIterator type="xs:double">
      <FLWORIterator>
        <LetVariable name="v" materialize="true">
          <LetVarIterator varname="v"/>
        </LetVariable>
        <ForVariable name="c">
          <FnCountIterator>
            <LetVarIterator varname="v"/>
          </FnCountIterator>
        </ForVariable>
        <ReturnClause>
          <IfThenElseIterator>
            <TypedValueCompareIterator_INTEGER>
              <ForVarIterator varname="c"/>
              <SingletonIterator value="xs:integer(0)"/>
            </TypedValueCompareIterator_INTEGER>
            <FLWORIterator>
              <ForVariable name="x">
                <OpToIterator>
                  <SingletonIterator value="xs:integer(1)"/>
                  <LetVarIterator varname="stride"/>
                </OpToIterator>
              </ForVariable>
              <ReturnClause>
                <SingletonIterator value="xs:integer(0)"/>
              </ReturnClause>
            </FLWORIterator>
            <UDFunctionCallIterator function="vector:sum-internal">
              <LetVarIterator varname="v"/>
              <LetVarIterator varname="stride"/>
              <ForVarIterator varname="c"/>
              <SingletonIterator value="xs:integer(0)"/>
            </UDFunctionCallIterator>
          </IfThenElseIterator>
        </ReturnClause>
      </FLWORIterator>
    </PromoteIterator>
  </iterator-tree>
  <iterator-tree description="shapes:sphere-normal">
    <FLWORIterator>
      <ForVariable name="sphere">
        <LetVarIterator varname="sphere"/>
      </ForVariable>
      <ReturnClause>
        <FunctionTraceIterator>
          <FLWORIterator>
            <LetVariable name="x" materialize="true">
              <SpecificNumArithIterator_DivideOperation_DOUBLE>
                <SingletonIterator value="xs:double(1)"/>
                <CastIterator type="xs:double">
                  <FnDataIterator>
                    <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,radius)" typename="*" nill allowed="0">
                      <ForVarIterator varname="sphere"/>
                    </AttributeAxisIterator>
                  </FnDataIterator>
                </CastIterator>
              </SpecificNumArithIterator_DivideOperation_DOUBLE>
            </LetVariable>
            <ForVariable name="y">
              <FunctionTraceIterator>
                <FLWORIterator>
                  <LetVariable name="v2" materialize="true">
                    <FunctionTraceIterator>
                      <FLWORIterator>
                        <ForVariable name="a">
                          <TreatIterator quant="">
                            <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,center)" typename="*" nill allowed="0">
                              <ForVarIterator varname="sphere"/>
                            </ChildAxisIterator>
                          </TreatIterator>
                        </ForVariable>
                        <ReturnClause>
                          <FnConcatIterator>
                            <CastIterator type="xs:double">
                              <FnDataIterator>
                                <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,x)" typename="*" nill allowed="0">
                                  <ForVarIterator varname="a"/>
                                </AttributeAxisIterator>
                              </FnDataIterator>
                            </CastIterator>
                            <CastIterator type="xs:double">
                              <FnDataIterator>
                                <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,y)" typename="*" nill allowed="0">
                                  <ForVarIterator varname="a"/>
                                </AttributeAxisIterator>
                              </FnDataIterator>
                            </CastIterator>
                            <CastIterator type="xs:double">
                              <FnDataIterator>
                                <AttributeAxisIterator test kind="match_name_test" qname="xs:QName(,,z)" typename="*" nill allowed="0">
                                  <ForVarIterator varname="a"/>
                                </AttributeAxisIterator>
                              </FnDataIterator>
                            </CastIterator>
                          </FnConcatIterator>
                        </ReturnClause>
                      </FLWORIterator>
                    </FunctionTraceIterator>
                  </LetVariable>
                  <ForVariable name="x">
                    <LetVarIterator varname="position"/>
                  </ForVariable>
                  <ReturnClause>
                    <SpecificNumArithIterator_SubtractOperation_DOUBLE>
                      <ForVarIterator varname="x"/>
                      <LetVarIterator varname="v2">
                        <ForVarIterator varname="p"/>
                      </LetVarIterator>
                    </SpecificNumArithIterator_SubtractOperation_DOUBLE>
                  </ReturnClause>
                </FLWORIterator>
              </FunctionTraceIterator>
            </ForVariable>
            <ReturnClause>
              <SpecificNumArithIterator_MultiplyOperation_DOUBLE>
                <LetVarIterator varname="x"/>
                <ForVarIterator varname="y"/>
              </SpecificNumArithIterator_MultiplyOperation_DOUBLE>
            </ReturnClause>
          </FLWORIterator>
        </FunctionTraceIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="vector:sum-internal">
    <FLWORIterator>
      <LetVariable name="v" materialize="true">
        <LetVarIterator varname="v"/>
      </LetVariable>
      <ForVariable name="stride">
        <LetVarIterator varname="stride"/>
      </ForVariable>
      <ForVariable name="remaining">
        <LetVarIterator varname="remaining"/>
      </ForVariable>
      <ForVariable name="offset">
        <LetVarIterator varname="offset"/>
      </ForVariable>
      <ReturnClause>
        <IfThenElseIterator>
          <TypedValueCompareIterator_INTEGER>
            <ForVarIterator varname="remaining"/>
            <ForVarIterator varname="stride"/>
          </TypedValueCompareIterator_INTEGER>
          <LetVarIterator varname="v">
            <SpecificNumArithIterator_AddOperation_INTEGER>
              <ForVarIterator varname="offset"/>
              <SingletonIterator value="xs:integer(1)"/>
            </SpecificNumArithIterator_AddOperation_INTEGER>
          </LetVarIterator>
          <FLWORIterator>
            <ForVariable name="x">
              <UDFunctionCallIterator function="vector:sum-internal">
                <LetVarIterator varname="v"/>
                <ForVarIterator varname="stride"/>
                <SpecificNumArithIterator_SubtractOperation_INTEGER>
                  <ForVarIterator varname="remaining"/>
                  <ForVarIterator varname="stride"/>
                </SpecificNumArithIterator_SubtractOperation_INTEGER>
                <SpecificNumArithIterator_AddOperation_INTEGER>
                  <ForVarIterator varname="offset"/>
                  <ForVarIterator varname="stride"/>
                </SpecificNumArithIterator_AddOperation_INTEGER>
              </UDFunctionCallIterator>
            </ForVariable>
            <ReturnClause>
              <SpecificNumArithIterator_AddOperation_DOUBLE>
                <ForVarIterator varname="x"/>
                <LetVarIterator varname="v">
                  <SpecificNumArithIterator_AddOperation_INTEGER>
                    <ForVarIterator varname="offset"/>
                    <ForVarIterator varname="p"/>
                  </SpecificNumArithIterator_AddOperation_INTEGER>
                </LetVarIterator>
              </SpecificNumArithIterator_AddOperation_DOUBLE>
            </ReturnClause>
          </FLWORIterator>
        </IfThenElseIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
  <iterator-tree description="raytracer:test-ray">
    <FLWORIterator>
      <LetVariable name="source" materialize="true">
        <LetVarIterator varname="source"/>
      </LetVariable>
      <LetVariable name="direction" materialize="true">
        <LetVarIterator varname="direction"/>
      </LetVariable>
      <ForVariable name="ignore">
        <LetVarIterator varname="ignore"/>
      </ForVariable>
      <ForVariable name="$$context-item">
        <ChildAxisIterator test kind="match_name_test" qname="xs:QName(,,shapes)" typename="*" nill allowed="0">
          <LetVarIterator varname="scene"/>
        </ChildAxisIterator>
      </ForVariable>
      <ForVariable name="$$context-item">
        <ChildAxisIterator test kind="match_name_test" qname="*" typename="*" nill allowed="0">
          <ForVarIterator varname="$$context-item"/>
        </ChildAxisIterator>
      </ForVariable>
      <WhereClause>
        <FnBooleanIterator>
          <IsSameNodeIterator>
            <ForVarIterator varname="$$context-item"/>
            <ForVarIterator varname="ignore"/>
          </IsSameNodeIterator>
        </FnBooleanIterator>
      </WhereClause>
      <ReturnClause>
        <UDFunctionCallIterator function="shapes:intersect">
          <LetVarIterator varname="source"/>
          <LetVarIterator varname="direction"/>
          <ForVarIterator varname="$$context-item"/>
        </UDFunctionCallIterator>
      </ReturnClause>
    </FLWORIterator>
  </iterator-tree>
</iterator-trees>
