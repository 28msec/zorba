/* -*- mode: c++; indent-tabs-mode: nil -*-
 *
 *  $Id: TypeCodes.h,v 1.1 2006/10/09 07:07:59 Paul Pedersen Exp $
 *
 *	Copyright 2006-2007 FLWOR Foundation.
 *  Authors: John Cowan, Paul Pedersen
 */

#ifndef XQP_TYPECODES_H
#define XQP_TYPECODES_H

#include <stdint.h>

namespace xqp {

// The following defines are really internal to this file.

// Masks and shifts for the bitfields in a type code.
#define ARITY_MASK (1<<28+1<<27)
#define ARITY_SHIFT 27
#define NODE_MASK (1<<26+1<<25+1<<24+1<<23)
#define NODE_SHIFT 23
#define REP_MASK (1<<22+1<<21+1<<20+1<<19+1<<18+1<<17)
#define REP_SHIFT 17
#define PRIM_MASK (1<<16+1<<15+1<<14+1<<13+1<<12)
#define PRIM_SHIFT 12
#define SUB_MASK (1<<11+1<<10)
#define SUB_SHIFT 10
#define SUB2_MASK (1<<9+1<<8)
#define SUB2_SHIFT 8
#define SUB3_MASK (1<<7+1<<6)
#define SUB3_SHIFT 6
#define SUB4_MASK (1<<5+1<<4)
#define SUB4_SHIFT 4
#define SUB5_MASK (1<<3+1<<2)
#define SUB5_SHIFT 2
#define SUB6_MASK (1<<1+1<<0)
#define SUB6_SHIFT 0
#define TYPE_MASK (PRIM_MASK+SUB_MASK+SUB2_MASK+SUB3_MASK+SUB4_MASK+SUB5_MASK+SUB6_MASK)

// ARITY specifies whether this value is an item or a sequence.
// Data items use ITEM_ARITY or SEQUENCE_ARITY.
// The other codes are used only to specify argument and result types of functions.
#define ITEM_ARITY (0 << ARITY_SHIFT)
#define SEQUENCE_ARITY (1 << ARITY_SHIFT)
#define NONEMPTY_SEQ_ARITY (2 << ARITY_SHIFT)
#define OPT_ITEM_ARITY (3 << ARITY_SHIFT)

// NODE specifies the node type.
// VALUE_NODE is a dummy for values,
// ANY_NODE is a dummy for sequences of any type of node (but not a value).
#define VALUE_NODE (0 << NODE_SHIFT)
#define DOCUMENT_NODE (1 << NODE_SHIFT)
#define ELEMENT_NODE (2 << NODE_SHIFT)
#define ATTRIBUTE_NODE (3 << NODE_SHIFT)
#define NAMESPACE_NODE (4 << NODE_SHIFT)
#define PROCESSING_INSTRUCTION_NODE (5 << NODE_SHIFT)
#define COMMENT_NODE (6 << NODE_SHIFT)
#define TEXT_NODE (7 << NODE_SHIFT)
#define ANY_NODE (8 << NODE_SHIFT)

// REP specifies the representation (C++ class)
// More reps may be added in future.
// Initially DECIMAL_REP is not used.
// NODE_REP is a dummy value, as node representations are implicit in the NODE.
#define NODE_REP (0 << REP_SHIFT)
#define STRING_REP (1 << REP_SHIFT)
#define DECIMAL_REP (2 << REP_SHIFT)
#define DOUBLE_REP (3 << REP_SHIFT)
#define BOOLEAN_REP (4 << REP_SHIFT)
#define TIME_REP (5 << REP_SHIFT)
#define BINARY_REP (6 << REP_SHIFT)
#define URI_REP (7 << REP_SHIFT)
#define QNAME_REP (8 << REP_SHIFT)

// PRIM specifies the XML Schema primitive type.
// UNTYPED is used for elements, UNTYPED_ATOMIC for other node types.
// COMPLEX_TYPE is reserved for later use with complex types.
#define UNTYPED_PRIM (0 << PRIM_SHIFT)
#define UNTYPED_ATOMIC_PRIM (1 << PRIM_SHIFT)
#define STRING_PRIM (2 << PRIM_SHIFT)
#define DECIMAL_PRIM (3 << PRIM_SHIFT)
#define BOOLEAN_PRIM (4 << PRIM_SHIFT)
#define FLOAT_PRIM (5 << PRIM_SHIFT)
#define DOUBLE_PRIM (6 << PRIM_SHIFT)
#define DURATION_PRIM (7 << PRIM_SHIFT)
#define DATE_TIME_PRIM (8 << PRIM_SHIFT)
#define TIME_PRIM (9 << PRIM_SHIFT)
#define DATE_PRIM (10 << PRIM_SHIFT)
#define G_YEAR_MONTH_PRIM (11 << PRIM_SHIFT)
#define G_YEAR_PRIM (12 << PRIM_SHIFT)
#define G_MONTH_DAY_PRIM (13 << PRIM_SHIFT)
#define G_DAY_PRIM (14 << PRIM_SHIFT)
#define G_MONTH_PRIM (15 << PRIM_SHIFT)
#define HEX_BINARY_PRIM (16 << PRIM_SHIFT)
#define BASE_64_BINARY_PRIM (17 << PRIM_SHIFT)
#define ANY_URI_PRIM (18 << PRIM_SHIFT)
#define QNAME_PRIM (19 << PRIM_SHIFT)
#define NOTATION_PRIM (20 << PRIM_SHIFT)
#define COMPLEX_TYPE (21 << PRIM_SHIFT)

// SUB2-SUB5 specify derived XML Schema types.
#define NORMALIZED_STRING_SUB (STRING_PRIM + (1 << SUB_SHIFT))
#define TOKEN_SUB2 (NORMALIZED_STRING_SUB + (1 << SUB2_SHIFT))
#define LANGUAGE_SUB3 (TOKEN_SUB2 + (1 << SUB3_SHIFT))
#define NMTOKEN_SUB3 (TOKEN_SUB2 + (2 << SUB3_SHIFT))
#define NAME_SUB3 (TOKEN_SUB2 + (3 << SUB3_SHIFT))
#define NCNAME_SUB4 (NAME_SUB3 + (1 << SUB4_SHIFT))
#define ID_SUB5 (NCNAME_SUB4 + (1 << SUB5_SHIFT))
#define IDREF_SUB5 (NCNAME_SUB4 + (2 << SUB5_SHIFT))
#define ENTITY_SUB5 (NCNAME_SUB4 + (3 << SUB5_SHIFT))

#define INTEGER_SUB (DECIMAL_PRIM + (1 << SUB_SHIFT))
#define NON_POSITIVE_INTEGER_SUB2 (INTEGER_SUB + (1 << SUB2_SHIFT))
#define NEGATIVE_INTEGER_SUB3 (NON_POSITIVE_INTEGER_SUB2 + (1 << SUB3_SHIFT))
#define LONG_SUB2 (INTEGER_SUB + (2 << SUB2_SHIFT))
#define INT_SUB3 (LONG_SUB2 + (1 << SUB3_SHIFT))
#define SHORT_SUB4 (INT_SUB3 + (1 << SUB4_SHIFT))
#define BYTE_SUB5 (SHORT_SUB4 + (1 << SUB5_SHIFT))
#define NON_NEGATIVE_INTEGER_SUB2 (INTEGER_SUB + (3 << SUB2_SHIFT))
#define UNSIGNED_LONG_SUB3 (NON_NEGATIVE_INTEGER_SUB2 + (1 << SUB3_SHIFT))
#define UNSIGNED_INT_SUB4 (UNSIGNED_LONG_SUB3 + (1 << SUB4_SHIFT))
#define UNSIGNED_SHORT_SUB5 (UNSIGNED_INT_SUB4 + (1 << SUB5_SHIFT))
#define UNSIGNED_BYTE_SUB6 (UNSIGNED_SHORT_SUB5 + (1 << SUB6_SHIFT))
#define POSITIVE_INTEGER_SUB3 (NON_NEGATIVE_INTEGER_SUB2 + (2 << SUB3_SHIFT))

#define DAY_TIME_DURATION_SUB2 (DURATION_PRIM + (1 << SUB2_SHIFT))
#define YEAR_MONTH_DURATION_SUB2 (DURATION_PRIM + (2 << SUB2_SHIFT))

// Okay, at last the bit-twiddling is done.  Now we just make an enum of type codes
// that assembles the correct values together.

enum TypeCode {
	// Node items.
	documentNode = ITEM_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNode = ITEM_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNode = ITEM_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNode = ITEM_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNode = ITEM_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNode = ITEM_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNode = ITEM_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,

	// String value items.
	xs_string = ITEM_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	xs_normalizedString = ITEM_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	xs_token = ITEM_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	xs_language = ITEM_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	xs_nmtoken = ITEM_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	xs_name = ITEM_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	xs_ncName = ITEM_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	xs_id = ITEM_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	xs_idref = ITEM_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	xs_entity = ITEM_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value items.
//xs_decimal = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	xs_decimal = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//xs_integer = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	xs_integer = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//xs_nonPositiveInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	xs_nonPositiveInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//xs_negativeInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_negativeInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//xs_long = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	xs_long = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	xs_int = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	xs_short = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	xs_byte = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//xs_nonNegativeInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	xs_nonNegativeInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//xs_unsignedLong = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedLong = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedInt = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	xs_unsignedShort = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	xs_unsignedByte = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//xs_positiveInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_positiveInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value items.
	xs_untypedValue = ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	xs_untypedAtomicValue = ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	xs_boolean = ITEM_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	xs_float = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	xs_double = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	xs_duration = 	ITEM_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	xs_dayTimeDuration = ITEM_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	xs_yearMonthDuration = ITEM_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	xs_dateTime = ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	xs_time = ITEM_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	xs_date = ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	xs_gYearMonth = ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	xs_gYear = ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	xs_gMonthDay = ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	xs_gDay = ITEM_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	xs_gMonth = ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	xs_hexBinary = ITEM_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	xs_base64Binary = ITEM_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	xs_anyURI = ITEM_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	xs_qname = ITEM_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	xs_notation = ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	xs_complexType = ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,


	// Node sequences.
	documentNodeSeq = SEQUENCE_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNodeSeq = SEQUENCE_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNodeSeq = SEQUENCE_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNodeSeq = SEQUENCE_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNodeSeq = SEQUENCE_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNodeSeq = SEQUENCE_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNodeSeq = SEQUENCE_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	anyNodeSeq = SEQUENCE_ARITY + ANY_NODE + UNTYPED_PRIM,

	// String value sequences.
	xs_stringSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	xs_normalizedStringSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	xs_tokenSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	xs_languageSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	xs_nmtokenSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	xs_nameSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	xs_ncNameSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	xs_idSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	xs_idrefSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	xs_entitySeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value sequences.
//xs_decimalSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	xs_decimalSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//xs_integerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	xs_integerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//xs_nonPositiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	xs_nonPositiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//xs_negativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_negativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//xs_longSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	xs_longSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	xs_intSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	xs_shortSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	xs_byteSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//xs_nonNegativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	xs_nonNegativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//xs_unsignedLongSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedLongSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedIntSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	xs_unsignedShortSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	xs_unsignedByteSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//xs_positiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_positiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value sequences.
	xs_untypedValueSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	xs_untypedAtomicValueSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	xs_booleanSeq = SEQUENCE_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	xs_floatSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	xs_doubleSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	xs_durationSeq = 	SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	xs_dayTimeDurationSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	xs_yearMonthDurationSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	xs_dateTimeSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	xs_timeSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	xs_dateSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	xs_gYearMonthSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	xs_gYearSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	xs_gMonthDaySeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	xs_gDaySeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	xs_gMonthSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	xs_hexBinarySeq = SEQUENCE_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	xs_base64BinarySeq = SEQUENCE_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	xs_anyURISeq = SEQUENCE_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	xs_qnameSeq = SEQUENCE_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	xs_notationSeq = SEQUENCE_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	xs_complexTypeSeq = SEQUENCE_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,


	// Node non-empty sequences.
	documentNodePlus = NONEMPTY_SEQ_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNodePlus = NONEMPTY_SEQ_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNodePlus = NONEMPTY_SEQ_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNodePlus = NONEMPTY_SEQ_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNodePlus = NONEMPTY_SEQ_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNodePlus = NONEMPTY_SEQ_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNodePlus = NONEMPTY_SEQ_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	anyNodePlus = NONEMPTY_SEQ_ARITY + ANY_NODE + UNTYPED_PRIM,

	// String value non-empty sequences.
	xs_stringPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	xs_normalizedStringPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	xs_tokenPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	xs_languagePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	xs_nmtokenPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	xs_namePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	xs_ncNamePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	xs_idPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	xs_idrefPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	xs_entityPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value non-empty sequences.
//xs_decimalPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	xs_decimalPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//xs_integerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	xs_integerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//xs_nonPositiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	xs_nonPositiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//xs_negativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_negativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//xs_longPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	xs_longPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	xs_intPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	xs_shortPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	xs_bytePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//xs_nonNegativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	xs_nonNegativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//xs_unsignedLongPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedLongPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedIntPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	xs_unsignedShortPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	xs_unsignedBytePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//xs_positiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_positiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value non-empty sequences.
	xs_untypedValuePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	xs_untypedAtomicValuePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	xs_booleanPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	xs_floatPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	xs_doublePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	xs_durationPlus = 	NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	xs_dayTimeDurationPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	xs_yearMonthDurationPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	xs_dateTimePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	xs_timePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	xs_datePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	xs_gYearMonthPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	xs_gYearPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	xs_gMonthDayPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	xs_gDayPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	xs_gMonthPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	xs_hexBinaryPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	xs_base64BinaryPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	xs_anyURIPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	xs_qnamePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	xs_notationPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	xs_complexTypePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,


	// Node optional items.
	documentNodeOpt = OPT_ITEM_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNodeOpt = OPT_ITEM_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNodeOpt = OPT_ITEM_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNodeOpt = OPT_ITEM_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNodeOpt = OPT_ITEM_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNodeOpt = OPT_ITEM_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNodeOpt = OPT_ITEM_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	anyNodeOpt = OPT_ITEM_ARITY + ANY_NODE + UNTYPED_PRIM,

	// String value optional items.
	xs_stringOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	xs_normalizedStringOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	xs_tokenOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	xs_languageOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	xs_nmtokenOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	xs_nameOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	xs_ncNameOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	xs_idOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	xs_idrefOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	xs_entityOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value optional items.
//xs_decimalOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	xs_decimalOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//xs_integerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	xs_integerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//nonPositiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	xs_nonPositiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//xs_negativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_negativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//xs_longOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	xs_longOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	xs_intOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	xs_shortOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	xs_byteOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//xs_nonNegativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	xs_nonNegativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//xs_unsignedLongOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedLongOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	xs_unsignedIntOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	xs_unsignedShortOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	xs_unsignedByteOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//xs_positiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	xs_positiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value optional items.
	xs_untypedValueOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	xs_untypedAtomicValueOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	xs_booleanOpt = OPT_ITEM_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	xs_floatOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	xs_doubleOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	xs_durationOpt = 	OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	xs_dayTimeDurationOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	xs_yearMonthDurationOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	xs_dateTimeOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	xs_timeOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	xs_dateOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	xs_gYearMonthOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	xs_gYearOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	xs_gMonthDayOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	xs_gDayOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	xs_gMonthOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	xs_hexBinaryOpt = OPT_ITEM_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	xs_base64BinaryOpt = OPT_ITEM_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	xs_anyURIOpt = OPT_ITEM_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	xs_qnameOpt = OPT_ITEM_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	xs_notationOpt = OPT_ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	xs_complexTypeOpt = OPT_ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM
};

} /* namespace xqp */
#endif /* XQP_TYPECODES_H */

