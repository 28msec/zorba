<?xml version="1.0" encoding="UTF-8"?>

<!--
/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
//  14 Functions and Operators on Nodes                                        // 
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////
-->
<zorba:iterators
  xmlns:zorba="http://www.zorba-xquery.com"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.zorba-xquery.com ../runtime.xsd">

<!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="NodeReferenceIterator">

    <zorba:description author="Federico Cavalieri">       
      declare function ref:node-reference($node as node) as xs:anyURI
    </zorba:description>
    
    <zorba:function>
    
      <zorba:signature localname="node-reference" prefix="fn-zorba-ref">
        <zorba:param>node()</zorba:param>   
        <zorba:output>xs:anyURI</zorba:output>
      </zorba:signature>
      
    </zorba:function>

  </zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="NodeByReferenceIterator">

    <zorba:description author="Federico Cavalieri">
      declare function id:node-by-identifier($identifier as xs:string) as node()?
    </zorba:description>

    <zorba:function>
    
      <zorba:signature localname="node-by-reference" prefix="fn-zorba-ref">        
        <zorba:param>xs:anyURI</zorba:param>        
        <zorba:output>node()?</zorba:output>
      </zorba:signature>
      
    </zorba:function>
        
  </zorba:iterator>
    
<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="FnLocalNameIterator">

  <zorba:description author="Zorba Team">
    fn:local-name
  </zorba:description>

  <zorba:function>
    <zorba:signature localname="local-name" prefix="fn">
      <zorba:output>xs:string</zorba:output>
    </zorba:signature>

    <zorba:signature localname="local-name" prefix="fn">
      <zorba:param>node()?</zorba:param>
      <zorba:output>xs:string</zorba:output>
    </zorba:signature>
  </zorba:function>
</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="FnNamespaceUriIterator">

  <zorba:description author="Zorba Team">
    fn:namespace-uri
  </zorba:description>

  <zorba:function>
    <zorba:signature localname="namespace-uri" prefix="fn">
      <zorba:output>xs:anyURI?</zorba:output>
    </zorba:signature>

    <zorba:signature localname="namespace-uri" prefix="fn">
      <zorba:param>node()?</zorba:param>
      <zorba:output>xs:anyURI?</zorba:output>
    </zorba:signature>
  </zorba:function>
</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="FnLangIterator">

  <zorba:description author="Zorba Team">
    fn:lang
  </zorba:description>

  <zorba:function>
    <zorba:signature localname="lang" prefix="fn">
      <zorba:param>xs:string?</zorba:param>
      <zorba:output>xs:boolean</zorba:output>
    </zorba:signature>

    <zorba:signature localname="lang" prefix="fn">
      <zorba:param>xs:string?</zorba:param>
      <zorba:param>node()</zorba:param>
      <zorba:output>xs:boolean</zorba:output>
    </zorba:signature>
  </zorba:function>

  <zorba:method return="bool" name="isLangAttr" const="true">
    <zorba:param name="aAttr" type="const store::Item_t&amp;"/>
  </zorba:method>
  <zorba:method return="bool" name="matchesReqLang" const="true">
    <zorba:param name="aLangAttr" type="const store::Item_t&amp;"/>
    <zorba:param name="aRequestLang" type="const zstring&amp;"/>
  </zorba:method>

</zorba:iterator>

<!--
/*******************************************************************************
* 13.4 fn:number
********************************************************************************/
-->

<zorba:iterator name="">

  <zorba:description author="Zorba Team">fn:number</zorba:description>

  <zorba:function>
    <zorba:signature localname="number" prefix="fn">
      <zorba:output>xs:double</zorba:output>
    </zorba:signature>

    <zorba:signature localname="number" prefix="fn">
      <zorba:param>xs:anyAtomicType?</zorba:param>
      <zorba:output>xs:double</zorba:output>
    </zorba:signature>
  </zorba:function>

</zorba:iterator>

  <!--
/*******************************************************************************
* 13.4 fn:has-children
********************************************************************************/
-->

  <zorba:iterator name="FnHasChildrenIterator">

    <zorba:description author="Zorba Team">fn:has-children</zorba:description>

    <zorba:function>
      <zorba:signature localname="has-children" prefix="fn" version="3.0">
        <zorba:param>node()?</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>

    </zorba:function>

  </zorba:iterator>

<!--
/*******************************************************************************
* 13.4 fn:innermost
********************************************************************************/
-->

  <zorba:iterator name="FnInnermostIterator">

    <zorba:description author="Zorba Team">fn:innermost</zorba:description>

    <zorba:function>
      <zorba:signature localname="innermost" prefix="fn" version="3.0">
        <zorba:param>node()*</zorba:param>
        <zorba:output>node()*</zorba:output>
      </zorba:signature>

    </zorba:function>

    <zorba:state>
      <zorba:member type="std::list&lt;store::Item_t&gt;" name="node_list"
                    brief="temporary list of nodes"/>
      <zorba:member type="std::list&lt;store::Item_t&gt;::iterator" name="list_it"
                    brief="iterator through result sequence"/>
    </zorba:state>

  </zorba:iterator>

<!--
/*******************************************************************************
* 13.4 fn:outermost
********************************************************************************/
-->

  <zorba:iterator name="FnOutermostIterator">

    <zorba:description author="Zorba Team">fn:outermost</zorba:description>

    <zorba:function>
      <zorba:signature localname="outermost" prefix="fn" version="3.0">
        <zorba:param>node()*</zorba:param>
        <zorba:output>node()*</zorba:output>
      </zorba:signature>

    </zorba:function>

    <zorba:state>
      <zorba:member type="std::list&lt;store::Item_t&gt;" name="node_list"
                    brief="temporary list of nodes"/>
      <zorba:member type="std::list&lt;store::Item_t&gt;::iterator" name="list_it"
                    brief="iterator through result sequence"/>
    </zorba:state>

  </zorba:iterator>

  <!--
/*******************************************************************************
* 13.4 fn:generate-id
********************************************************************************/
-->

  <zorba:iterator name="FnGenerateIdIterator">

    <zorba:description author="Zorba Team">fn:generate-id</zorba:description>

    <zorba:function>
      <zorba:signature localname="generate-id" prefix="fn" version="3.0">
        <zorba:output>xs:string</zorba:output>
      </zorba:signature>
      <zorba:signature localname="generate-id" prefix="fn" version="3.0">
        <zorba:param>node()?</zorba:param>
        <zorba:output>xs:string</zorba:output>
      </zorba:signature>

    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsAncestorIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="ancestor-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsDescendantIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="descendant-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsParentIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="parent-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsChildIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="child-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsFollowingIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="following-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsPrecedingIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="preceding-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>


  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsFollowingSiblingIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="following-sibling-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="IsPrecedingSiblingIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="preceding-sibling-of" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="LevelIterator">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="level" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:output>xs:integer</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

  <!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="LeastCommonAncestor">

    <zorba:description author="Zorba Team"></zorba:description>

    <zorba:function>
      <zorba:signature localname="least-common-ancestor" prefix="fn-zorba-node">
        <zorba:param>node()</zorba:param>
        <zorba:param>node()</zorba:param>
        <zorba:output>node()?</zorba:output>
      </zorba:signature>
    </zorba:function>

  </zorba:iterator>

</zorba:iterators>
