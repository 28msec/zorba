<?xml version="1.0" encoding="UTF-8"?>

<!--
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
-->
<zorba:iterators
  xmlns:zorba="http://www.zorba-xquery.com"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.zorba-xquery.com ../runtime.xsd">

<zorba:header>
  <zorba:include form="Angle-bracket">context/uri_resolver.h</zorba:include>
  <zorba:include form="Quoted">runtime/json/json_loader.h</zorba:include>
  <zorba:include form="Quoted">zorbautils/hashset.h</zorba:include>
  <zorba:include form="Quoted">zorbautils/hashmap_zstring.h</zorba:include>
</zorba:header>
  
<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONDecodeFromRoundtripIterator">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="decode-from-roundtrip" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:signature localname="decode-from-roundtrip" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:param>object()</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="zstring" name="thePrefix" brief=""/>
  </zorba:state>

  <zorba:method static="true" name="extractChildOfKind" return="void">
    <zorba:param type="const store::Item_t&amp;" name="aParent"/>
    <zorba:param type="const store::NodeKind&amp;" name="aKind"/>
    <zorba:param type="store::Item_t&amp;" name="aChild"/>
  </zorba:method>

  <zorba:method const="true" name="decodeNode" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="aSerializedNode"/>
    <zorba:param type="const store::NodeKind&amp;" name="aKind"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
  </zorba:method>

  <zorba:method const="true" name="decodeXDM" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="anObj"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONDecodeFromRoundtripIteratorState*" name="aState"/>
  </zorba:method>

  <zorba:method const="true" name="decodeObject" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="anObj"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONDecodeFromRoundtripIteratorState*" name="aState"/>
  </zorba:method>

  <zorba:method const="true" name="decodeArray" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="anArray"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONDecodeFromRoundtripIteratorState*" name="aState"/>
  </zorba:method>

  <zorba:method const="true" name="decodeItem" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="anItem"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONDecodeFromRoundtripIteratorState*" name="aState"/>
  </zorba:method>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONEncodeForRoundtripIterator">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="encode-for-roundtrip" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:signature localname="encode-for-roundtrip" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:param>object()</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="zstring" name="thePrefix" brief=""/>
    <zorba:member type="store::Item_t" name="theSerParams" brief=""/>
    <zorba:member type="XQueryDiagnostics*" name="theDiag" brief=""/>
  </zorba:state>

  <zorba:method const="true" name="encodeObject" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="anObj"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONEncodeForRoundtripIteratorState*" name="aState"/>
  </zorba:method>

  <zorba:method const="true" name="encodeArray" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="anArray"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONEncodeForRoundtripIteratorState*" name="aState"/>
  </zorba:method>

  <zorba:method const="true" name="encodeAtomic" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="aValue"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONEncodeForRoundtripIteratorState*" name="aState"/>
  </zorba:method>

  <zorba:method const="true" name="encodeNode" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="aNode"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONEncodeForRoundtripIteratorState*" name="aState"/>
  </zorba:method>

  <zorba:method const="true" name="encodeItem" return="bool">
    <zorba:param type="const store::Item_t&amp;" name="anItem"/>
    <zorba:param type="store::Item_t&amp;" name="aResult"/>
    <zorba:param type="JSONEncodeForRoundtripIteratorState*" name="aState"/>
  </zorba:method>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONParseIterator" arity="nary">

  <zorba:function isDeterministic="true" generateCodegen="false">
    <zorba:signature localname="parse-json" prefix="fn-jsoniq">
      <zorba:param>xs:string?</zorba:param>
      <zorba:output>json-item()*</zorba:output>
    </zorba:signature>

    <zorba:signature localname="parse-json" prefix="fn-jsoniq">
      <zorba:param>xs:string?</zorba:param>
      <zorba:param>object()</zorba:param>
      <zorba:output>json-item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:accessesDynCtx returnValue="true"/>
      <zorba:isSource returnValue="true"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state generateInit="false" generateReset="false" generateDestructor="false">
    <zorba:member type="bool" name="theAllowMultiple" brief=""/>
    <zorba:member type="store::Item_t" name="theInput" brief=""/>
    <zorba:member type="std::istream*" name="theInputStream" brief=""/>
    <zorba:member type="bool" name="theGotOne"/>
    <zorba:member type="json::loader*" name="loader_" brief=""/>
  </zorba:state>

  <zorba:constructor>
    <zorba:parameter type="QueryLoc" name="aRelativeLocation" />
  </zorba:constructor>

  <zorba:member type="QueryLoc" name="theRelativeLocation" />

  <zorba:method return="bool" name="processBooleanOption" const="true">
    <zorba:param type="const store::Item_t&amp;" name="options"/>
    <zorba:param type="char const*" name="option_name"/>
    <zorba:param type="bool*" name="option_value"/>
  </zorba:method>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="MultiObjectKeysIterator" arity="unary">

  <zorba:function isDeterministic="true"
                  generateCodegen="false">

    <zorba:signature localname="keys" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:output>xs:string*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
      <zorba:isMap producer="0"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state generateInit="false" generateReset="false">

    <zorba:member type="store::Iterator_t" name="theObjKeysIte"/>

    <zorba:member type="store::Item_t" name="theSecondObj"/>

    <zorba:member type="std::unique_ptr&lt;HashSet&lt;zstring, HashMapZStringCmp> >"
                  name="theUniqueKeys"/>
  </zorba:state>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="SingleObjectKeysIterator" arity="unary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="keys" prefix="op-zorba">
      <zorba:param>item()?</zorba:param>
      <zorba:output>xs:string*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Iterator_t" name="theObjKeysIte" brief=""/>
  </zorba:state>

  <zorba:method name="count" const="true" return="bool">
     <zorba:param name="result" type="store::Item_t&amp;"/>
     <zorba:param name="planState" type="PlanState&amp;"/>
  </zorba:method>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="MultiObjectLookupIterator" arity="binary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="multi-object-lookup" prefix="op-zorba">
      <zorba:param>item()*</zorba:param>
      <zorba:param>item()?</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getReturnType/>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Item_t" name="theKey"/>
  </zorba:state>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="SingleObjectLookupIterator" arity="binary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="single-object-lookup" prefix="op-zorba">
      <zorba:param>item()?</zorba:param>
      <zorba:param>item()?</zorba:param>
      <zorba:output>item()?</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getReturnType/>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONObjectProjectIterator" arity="binary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="project" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:param>xs:string*</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getReturnType/>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
      <zorba:isMap producer="0"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="std::vector&lt;store::Item_t&gt;" name="theFilterKeys"/>
  </zorba:state>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONObjectTrimIterator" arity="binary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="trim" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:param>xs:string*</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getReturnType/>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
      <zorba:isMap producer="0"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="std::vector&lt;store::Item_t&gt;" name="theFilterKeys"/>
  </zorba:state>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="MultiArrayMembersIterator" arity="unary">

  <zorba:function isDeterministic="true"
                  generateCodegen="false">

    <zorba:signature localname="members" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
      <zorba:isMap producer="0"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Iterator_t" name="theMembers" brief=""/>
  </zorba:state>

  <zorba:method name="count" const="true" return="bool">
     <zorba:param name="result" type="store::Item_t&amp;"/>
     <zorba:param name="planState" type="PlanState&amp;"/>
  </zorba:method>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="SingleArrayMembersIterator" arity="unary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="members" prefix="op-zorba">
      <zorba:param>item()?</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Iterator_t" name="theMembers" brief=""/>
  </zorba:state>

  <zorba:method name="count" const="true" return="bool">
     <zorba:param name="result" type="store::Item_t&amp;"/>
     <zorba:param name="planState" type="PlanState&amp;"/>
  </zorba:method>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="MultiArrayLookupIterator" arity="binary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="multi-array-lookup" prefix="op-zorba">
      <zorba:param>item()*</zorba:param>
      <zorba:param>item()?</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getReturnType/>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
      <zorba:isMap producer="0"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Item_t" name="thePosition"/>
  </zorba:state>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="SingleArrayLookupIterator" arity="binary">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="single-array-lookup" prefix="op-zorba">
      <zorba:param>item()?</zorba:param>
      <zorba:param>item()?</zorba:param>
      <zorba:output>item()?</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getReturnType/>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONArraySizeIterator" arity="unary">

  <zorba:function isDeterministic="true">
    <zorba:signature localname="size" prefix="fn-jsoniq">
      <zorba:param>array()?</zorba:param>
      <zorba:output>xs:integer?</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getReturnType/>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONArrayFlattenIterator" arity="unary">

  <zorba:description author="Zorba Team">
    jsoniq:flatten function
  </zorba:description>

  <zorba:function isDeterministic="true">

    <zorba:signature localname="flatten" prefix="fn-jsoniq">
      <zorba:param>item()*</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="true"/>
      <zorba:mustCopyInputNodes value="false"/>
      <zorba:isMap producer="0"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state generateReset="false">
    <zorba:member type="std::stack&lt;store::Iterator_t>" name="theStack" brief=""/>
  </zorba:state>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="JSONNullIterator" arity="noary">

    <zorba:function isDeterministic="true">
      <zorba:signature localname="null" prefix="fn-jsoniq">
        <zorba:output>js:null</zorba:output>
      </zorba:signature>

    </zorba:function>

  </zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
  <zorba:iterator name="JSONIsNullIterator" arity="unary">

    <zorba:function isDeterministic="true">
      <zorba:signature localname="is-null" prefix="fn-jsoniq">
        <zorba:param>xs:anyAtomicType</zorba:param>
        <zorba:output>xs:boolean</zorba:output>
      </zorba:signature>

    </zorba:function>

  </zorba:iterator>
-->

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONObjectInsertIterator" arity="nary">

  <zorba:description author="Zorba Team">
      internal function
  </zorba:description>

  <zorba:function>

    <zorba:signature localname="json-object-insert" prefix="op-zorba">
      <zorba:param>object()</zorba:param>
      <zorba:param>object()</zorba:param>
      <zorba:output>empty-sequence()</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
      <zorba:accessesDynCtx returnValue="true"/>
      <zorba:mustCopyInputNodes/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONArrayInsertIterator"
                arity="nary">

    <zorba:description author="Zorba Team">
      internal function 
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="json-array-insert" prefix="op-zorba">
        <zorba:param>array()</zorba:param>
        <zorba:param>xs:integer</zorba:param>
        <zorba:param>item()*</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONDeleteIterator"
                arity="nary">

    <zorba:description author="Zorba Team">
      json:delete-member
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="json-delete" prefix="op-zorba">
        <zorba:param>json-item()</zorba:param>
        <zorba:param>xs:anyAtomicType</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONReplaceValueIterator" arity="nary"
                generateConstructor="false">

    <zorba:description author="Zorba Team">
      internal function
    </zorba:description>

    <zorba:function generateCodegen="false">

      <zorba:signature localname="json-replace-value" prefix="op-zorba">
        <zorba:param>json-item()</zorba:param>
        <zorba:param>xs:anyAtomicType</zorba:param>
        <zorba:param>item()</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes/>
      </zorba:methods>

    </zorba:function>

  <zorba:constructor generate="false">
    <zorba:parameter type="bool" name="copyInput" />
  </zorba:constructor>

  <zorba:member type="bool" name="theCopyInput" />

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONRenameIterator" 
                arity="nary">

    <zorba:description author="Zorba Team">
      
    </zorba:description>
      internal function
    <zorba:function>

      <zorba:signature localname="json-rename" prefix="op-zorba">
        <zorba:param>object()</zorba:param>
        <zorba:param>xs:string</zorba:param>
        <zorba:param>xs:string</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
  <zorba:iterator name="JSONArrayAppendIterator"
                  arity="nary">
    
    <zorba:description author="Zorba Team">
      internal function 
    </zorba:description>
    
    <zorba:function>
      
      <zorba:signature localname="json-array-append" prefix="op-zorba">
        <zorba:param>array()</zorba:param>
        <zorba:param>item()*</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>
      
      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes/>
      </zorba:methods>
      
    </zorba:function>
    
  </zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONBoxIterator" 
                arity="unary">

    <zorba:description author="Zorba Team">
      
    </zorba:description>
      internal function
    <zorba:function>

      <zorba:signature localname="json-box" prefix="op-zorba">
        <zorba:param>item()*</zorba:param>
        <zorba:output>item()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getReturnType/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:propagatesInputNodes value="true"/>
        <zorba:mustCopyInputNodes value="false"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>


</zorba:iterators>
