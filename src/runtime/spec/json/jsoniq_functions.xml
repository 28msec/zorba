<?xml version="1.0" encoding="UTF-8"?>

<!--
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
-->
<zorba:iterators
  xmlns:zorba="http://www.zorba-xquery.com"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.zorba-xquery.com ../runtime.xsd">

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONFlattenIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:description author="Zorba Team">
    jsoniq:flatten function
  </zorba:description>

  <zorba:function isDeterministic="true" generateCodegen="false">

    <zorba:signature localname="flatten" prefix="fn-jsoniq">
      <zorba:param>array()</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="true"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:function isDeterministic="true" generateCodegen="false">

    <zorba:signature localname="flatten-internal" prefix="op-zorba">
      <zorba:param>item()*</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:isMap producer="0"/>
      <zorba:propagatesInputNodes value="true"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state generateReset="false">
    <zorba:member type="std::stack&lt;store::Iterator_t>" name="theStack" brief=""/>
  </zorba:state>
    
  <zorba:constructor>
    <zorba:parameter type="bool" name="propagateNonArrayItems" />
  </zorba:constructor>

  <zorba:member type="bool" name="thePropagateNonArrayItems" />

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONParseIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true" generateCodegen="false">
    <zorba:signature localname="parse-json" prefix="fn-jsoniq">
      <zorba:param>xs:string</zorba:param>
      <zorba:output>json-item()?</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:accessesDynCtx returnValue="true"/>
      <zorba:isSource returnValue="true"/>
    </zorba:methods>

  </zorba:function>

  <zorba:constructor>
    <zorba:parameter type="QueryLoc" name="aRelativeLocation" />
  </zorba:constructor>

  <zorba:member type="QueryLoc" name="theRelativeLocation" />

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONNamesIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="names" prefix="fn-jsoniq">
      <zorba:param>object()</zorba:param>
      <zorba:output>xs:string*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Iterator_t" name="thePairs" brief=""/>
  </zorba:state>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONNameIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="name" prefix="fn-jsoniq">
      <zorba:param>pair()</zorba:param>
      <zorba:output>xs:string</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONPairsIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="pairs" prefix="fn-jsoniq">
      <zorba:param>object()</zorba:param>
      <zorba:output>pair()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="true"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Iterator_t" name="thePairs" brief=""/>
  </zorba:state>
</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONPairAccessorIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="pair" prefix="fn-jsoniq">
      <zorba:param>object()</zorba:param>
      <zorba:param>xs:string</zorba:param>
      <zorba:output>pair()?</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONMemberAccessorIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="member" prefix="fn-jsoniq">
      <zorba:param>array()</zorba:param>
      <zorba:param>xs:integer</zorba:param>
      <zorba:output>item()?</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONPairOrMemberAccessorIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="pair-or-member" prefix="op-zorba">
      <zorba:param>json-item()</zorba:param>
      <zorba:param>xs:anyAtomicType</zorba:param>
      <zorba:output>item()?</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>


<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONSizeIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">
    <zorba:signature localname="size" prefix="fn-jsoniq">
      <zorba:param>json-item()</zorba:param>
      <zorba:output>xs:integer</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes value="false"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONValuesIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="values" prefix="fn-jsoniq">
      <zorba:param>json-item()</zorba:param>
      <zorba:output>item()*</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

  <zorba:state>
    <zorba:member type="store::Iterator_t" name="theValues" brief=""/>
  </zorba:state>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONValueIterator" arity="nary"
  preprocessorGuard="#ifdef ZORBA_WITH_JSON">

  <zorba:function isDeterministic="true">

    <zorba:signature localname="value" prefix="fn-jsoniq">
      <zorba:param>pair()</zorba:param>
      <zorba:output>item()</zorba:output>
    </zorba:signature>

    <zorba:methods>
      <zorba:propagatesInputNodes producer="0"/>
      <zorba:mustCopyInputNodes value="false"/>
    </zorba:methods>

  </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONInsertIntoIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:insert-into
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="insert-into" prefix="fn-jsoniq">
        <zorba:param>object()</zorba:param>
        <zorba:param>pair()*</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONInsertAsFirstIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:insert-as-first
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="insert-as-first" prefix="fn-jsoniq">
        <zorba:param>array()</zorba:param>
        <zorba:param>item()*</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONInsertAfterIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:insert-after
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="insert-after" prefix="fn-jsoniq">
        <zorba:param>array()</zorba:param>
        <zorba:param>xs:integer</zorba:param>
        <zorba:param>item()*</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONInsertBeforeIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:insert-before
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="insert-before" prefix="fn-jsoniq">
        <zorba:param>array()</zorba:param>
        <zorba:param>xs:integer</zorba:param>
        <zorba:param>item()*</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONInsertAsLastIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:insert-as-last
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="insert-as-last" prefix="fn-jsoniq">
        <zorba:param>array()</zorba:param>
        <zorba:param>item()*</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONDeleteIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:delete
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="delete" prefix="fn-jsoniq">
        <zorba:param>json-item()</zorba:param>
        <zorba:param>item()</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONRenameIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:rename
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="rename" prefix="fn-jsoniq">
        <zorba:param>pair()</zorba:param>
        <zorba:param>xs:string</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

<!--
/*******************************************************************************
********************************************************************************/
-->
<zorba:iterator name="JSONReplaceValueIterator" arity="nary">

    <zorba:description author="Zorba Team">
      json:replace-value
    </zorba:description>

    <zorba:function>

      <zorba:signature localname="replace-value" prefix="fn-jsoniq">
        <zorba:param>pair()</zorba:param>
        <zorba:param>item()</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:signature localname="replace-value" prefix="fn-jsoniq">
        <zorba:param>array()</zorba:param>
        <zorba:param>xs:integer</zorba:param>
        <zorba:param>item()</zorba:param>
        <zorba:output>empty-sequence()</zorba:output>
      </zorba:signature>

      <zorba:methods>
        <zorba:getScriptingKind returnValue="UPDATING_EXPR"/>
        <zorba:accessesDynCtx returnValue="true"/>
        <zorba:mustCopyInputNodes producer="1"/>
      </zorba:methods>

    </zorba:function>

</zorba:iterator>

</zorba:iterators>
