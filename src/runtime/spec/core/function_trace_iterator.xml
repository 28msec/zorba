<?xml version="1.0" encoding="UTF-8"?>

<!--
/******************************************************************************
* A dummy iterator to allow catch the stack in case of a dynamic exception
******************************************************************************/
-->

<zorba:iterators
  xmlns:zorba="http://www.zorba-xquery.com"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.zorba-xquery.com ../runtime.xsd">

  <zorba:iterator name="FunctionTraceIterator">
    <zorba:description author="Zorba Team">
      This is just a dummy iterator, which calls
      its children. This iterator is used to wrap
      inlined expressions to be able to add the call
      to the call stack in case of an exception.
    </zorba:description>


    <zorba:member type="store::Item_t" name="theFunctionName"
      brief="stores the name of the function it substitutes"/>
    <zorba:member type="QueryLoc" name="theFunctionLocation"
      brief="stores the location of the function call"/>
    <zorba:member type="QueryLoc" name="theFunctionCallLocation"
      brief="stores the location of the function which it calls"/>
    <zorba:member type="unsigned int" name="theFunctionArity"
      brief="stores the arity of the function being called" />

    <zorba:method return="void" name="setFunctionName" const="false">
      <zorba:param type="const store::Item_t&amp;" name="aFunctionName"/>
    </zorba:method>

    <zorba:method return="void" name="setFunctionCallLocation" const="false">
      <zorba:param type="const QueryLoc&amp;" name="aFunctionLocation"/> 
    </zorba:method>

    <zorba:method return="void" name="setFunctionLocation" const="false">
      <zorba:param type="const QueryLoc&amp;" name="aFunctionLocation"/> 
    </zorba:method>
  
   <zorba:method return="void" name="setFunctionArity" const="false">
     <zorba:param type="unsigned int" name="arity" />
   </zorba:method>

   <zorba:method return="void" name="record_stack_trace" const="true">
     <zorba:param type="const QueryLoc&amp;" name="aLoc" />
     <zorba:param type="const QueryLoc&amp;" name="aFuncCallLoc" />
     <zorba:param type="const store::Item_t&amp;" name="aFunctionName" />
     <zorba:param type="unsigned int" name="aFunctionArity" />
     <zorba:param type="error::ZorbaError*" name="aError" />
   </zorba:method>

  </zorba:iterator>
</zorba:iterators>
