      ("abort", "abort when fatal error happens")
      ("CLASSPATH", po::value<std::string>(), "JVM classpath to be used by modules using Java implementations")
      ("compile-only", "only compile (don't execute)")
      ("debug", "compile the query in debug mode")
      ("debug-file", po::value<std::string>(), "log file for debugging information")
      ("dot-plan-file", po::value<std::string>(), "generate the dot iterator plan")
      ("dump-lib", "dump function library")
      ("external-var,x", po::value<std::vector<std::string> >(), "external variables (e.g. -x x=file1.xml -x y:=strValue)")
      ("force-gflwor", "force compiler to generate GFLWOR iterators")
      ("infer-joins", po::value<bool>()->default_value (true), "infer joins (1=enabled (default), 0=off)")
      ("inline-udf", po::value<bool> ()->default_value (true), "inline functions (1=enabled (default), 0=off)")
      ("iter-plan-test", "run as iterator plan test")
      ("jsoniq,j", "use the new alternative jsoniq parser")
      ("lib-module", "treat the query as a library module. If this is set --compile-only option is also set to true")
      ("loop-hoisting", po::value<bool>()->default_value (true), "hoist expressions out of loops (1=enabled (default), 0=off)")
      ("max-udf-call-depth", po::value<uint32_t>()->default_value(1024), "maximum stack depth of udf function calls")
      ("no-copy-optim", po::value<bool>()->default_value(true), "no copy optim (1=enabled (default), 0=off)")
      ("no-tree-ids", "suppress ids and locations from compiler tree dumps")
      ("optimizer,O", po::value<int> ()->default_value (1), "optimization level (0, 1 or 2 - 1 is default)")
      ("plan", "test plan serialization, i.e. save the plan, load it back and then execute it")
      ("print-ast,a", "print the parse tree")
      ("print-intermediate-opt", "print intermediate optimizations")
      ("print-item-flow,f", "show items produced by all iterators")
      ("print-iterator-tree,i", "print the iterator tree")
      ("print-locations", "print parser locations for compiler expressions")
      ("print-normalized,n", "print the translated expression tree")
      ("print-optimized,P", "print the optimized expression tree")
      ("print-query,q", "print the query")
      ("print-static-types", po::value<bool> ()->default_value (true), "print static type inference")
      ("print-time,t", "print the execution time")
      ("print-translated", "print the normalized expression tree")
      ("print-xqdoc", "create output for XQDoc")
      ("profile","enable profiling")
      ("query,e", po::value<std::string>(), "execute inline query")
      ("reorder-globals", po::value<bool> ()->default_value (true), "reorder global variables (1=enabled (default), 0=off)")
      ("result-file,o", po::value<std::string>(), "result file")
      ("serialize-only-query", po::value<int>()->default_value(-1), "serialize-only query (1=true, 0=false, -1 unknown (default))")
      ("serializer-param,z", po::value<std::vector<std::string> >(), "serializer parameters (see http://www.w3.org/TR/xslt-xquery-serialization/#serparam, e.g. -z method=xhtml, -z doctype-system='DTD/xhtml1-strict.dtd', -z indent=yes)")
      ("specialize-cmp", po::value<bool> ()->default_value (true), "specialize generic comparisons (1=enabled (default), 0=off)")
      ("specialize-num", po::value<bool> ()->default_value (true), "specialize numerics (1=enabled (default), 0=off)")
      ("stable-iterator-ids", "print the iterator plan with stable ids")
#ifndef NDEBUG
      ("trace-codegen,c", "trace the codegenerator")
      ("trace-fulltext", "trace full-text evaluation")
      ("trace-translator,l", "trace the translator")
#endif
      ("trace-parsing,p", "trace parsing")
      ("trace-scanning,s", "trace scanning")
      ("tz", po::value<int>(), "implicit time zone (in minutes)")
      ("use-serializer,r", "use serializer")
