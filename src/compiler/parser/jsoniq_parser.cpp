/* A Bison parser, made by GNU Bison 2.5.  */

/* Skeleton implementation for Bison LALR(1) parsers in C++
   
      Copyright (C) 2002-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

// Take the name prefix into account.
#define yylex   zorbalex

/* First part of user declarations.  */

/* Line 293 of lalr1.cc  */
<<<<<<< TREE
#line 88 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 88 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE


#include "common/common.h"

#ifdef WIN32
#pragma warning(disable: 4786)
#endif

#include "compiler/parsetree/parsenodes.h"
#include "compiler/parser/parse_constants.h"
#include "compiler/api/compilercb.h"
#include "store/api/update_consts.h"
#include "compiler/parser/jsoniq_driver.h"
#include "compiler/parser/parser_helpers.h"

#define SYMTAB( n ) driver.symtab.get( (off_t)n )
#define SYMTAB_PUT( s ) driver.symtab.put( s )
#define LOC( p ) driver.createQueryLoc( p )


#define YYDEBUG 1

using namespace std;
using namespace zorba;



/* Line 293 of lalr1.cc  */
<<<<<<< TREE
#line 69 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 69 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE


#include "jsoniq_parser.hpp"

/* User implementation prologue.  */

/* Line 299 of lalr1.cc  */
<<<<<<< TREE
#line 915 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 915 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE

// HACK to trigger rchandle release: rchandles are freed when refcount == 0
// (not <= 0); but Bison never increments the refcount, so we do it manually...
template<typename T> inline void release_hack( T *ref ) {
    if ( ref ) {
        RCHelper::addReference( ref );
        RCHelper::removeReference( ref );
    }
}

/* Line 299 of lalr1.cc  */
<<<<<<< TREE
#line 1053 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1054 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE

#include "compiler/parser/jsoniq_scanner.h"

#undef yylex
#define yylex driver.lexer->lex



/* Line 299 of lalr1.cc  */
<<<<<<< TREE
#line 99 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 99 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* FIXME: INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                               \
 do                                                                    \
   if (N)                                                              \
     {                                                                 \
       (Current).begin = YYRHSLOC (Rhs, 1).begin;                      \
       (Current).end   = YYRHSLOC (Rhs, N).end;                        \
     }                                                                 \
   else                                                                \
     {                                                                 \
       (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;        \
     }                                                                 \
 while (false)
#endif

/* Suppress unused-variable warnings by "using" E.  */
#define YYUSE(e) ((void) (e))

/* Enable debugging if requested.  */
#if YYDEBUG

/* A pseudo ostream that takes yydebug_ into account.  */
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)	\
do {							\
  if (yydebug_)						\
    {							\
      *yycdebug_ << Title << ' ';			\
      yy_symbol_print_ ((Type), (Value), (Location));	\
      *yycdebug_ << std::endl;				\
    }							\
} while (false)

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug_)				\
    yy_reduce_print_ (Rule);		\
} while (false)

# define YY_STACK_PRINT()		\
do {					\
  if (yydebug_)				\
    yystack_print_ ();			\
} while (false)

#else /* !YYDEBUG */

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_REDUCE_PRINT(Rule)
# define YY_STACK_PRINT()

#endif /* !YYDEBUG */

#define yyerrok		(yyerrstatus_ = 0)
#define yyclearin	(yychar = yyempty_)

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace zorba {

/* Line 382 of lalr1.cc  */
<<<<<<< TREE
#line 185 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 185 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  jsoniq_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              /* Fall through.  */
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  jsoniq_parser::jsoniq_parser (jsoniq_driver& driver_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      driver (driver_yyarg)
  {
  }

  jsoniq_parser::~jsoniq_parser ()
  {
  }

#if YYDEBUG
  /*--------------------------------.
  | Print this symbol on YYOUTPUT.  |
  `--------------------------------*/

  inline void
  jsoniq_parser::yy_symbol_value_print_ (int yytype,
			   const semantic_type* yyvaluep, const location_type* yylocationp)
  {
    YYUSE (yylocationp);
    YYUSE (yyvaluep);
    switch (yytype)
      {
         default:
	  break;
      }
  }


  void
  jsoniq_parser::yy_symbol_print_ (int yytype,
			   const semantic_type* yyvaluep, const location_type* yylocationp)
  {
    *yycdebug_ << (yytype < yyntokens_ ? "token" : "nterm")
	       << ' ' << yytname_[yytype] << " ("
	       << *yylocationp << ": ";
    yy_symbol_value_print_ (yytype, yyvaluep, yylocationp);
    *yycdebug_ << ')';
  }
#endif

  void
  jsoniq_parser::yydestruct_ (const char* yymsg,
			   int yytype, semantic_type* yyvaluep, location_type* yylocationp)
  {
    YYUSE (yylocationp);
    YYUSE (yymsg);
    YYUSE (yyvaluep);

    YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

    switch (yytype)
      {
        case 112: /* "\"'DECIMAL'\"" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 913 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 913 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->decval); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 290 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 290 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 126: /* "\"'DOUBLE'\"" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 912 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 912 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->dval); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 299 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 299 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 151: /* "\"'INTEGER'\"" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 911 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 911 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->ival); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 308 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 308 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 345: /* "VersionDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 317 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 317 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 346: /* "MainModule" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 326 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 326 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 347: /* "LibraryModule" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 335 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 335 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 348: /* "ModuleDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 344 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 344 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 349: /* "SIND_DeclList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 353 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 353 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 350: /* "SIND_Decl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 362 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 362 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 351: /* "Setter" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 371 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 371 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 352: /* "BoundarySpaceDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 380 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 380 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 353: /* "DefaultCollationDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 389 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 389 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 354: /* "BaseURIDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 398 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 398 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 355: /* "ConstructionDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 407 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 407 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 356: /* "OrderingModeDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 416 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 416 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 357: /* "EmptyOrderDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 425 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 425 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 358: /* "CopyNamespacesDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 434 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 434 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 359: /* "Import" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 443 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 443 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 360: /* "SchemaImport" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 452 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 452 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 361: /* "URILiteralList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 461 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 461 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 362: /* "SchemaPrefix" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 470 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 470 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 363: /* "ModuleImport" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 479 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 479 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 364: /* "NamespaceDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 488 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 488 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 365: /* "DefaultNamespaceDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 497 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 497 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 366: /* "VFO_DeclList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 506 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 506 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 367: /* "VFO_Decl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 515 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 515 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 368: /* "DecimalFormatDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 524 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 524 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 369: /* "DecimalFormatParamList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 945 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->vstrpair); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 533 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 533 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 370: /* "DecimalFormatParam" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 945 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->strpair); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 542 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 542 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 372: /* "OptionDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 551 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 551 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 373: /* "FTOptionDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 560 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 560 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 374: /* "CtxItemDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 569 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 569 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 375: /* "CtxItemDecl2" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 578 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 578 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 376: /* "CtxItemDecl3" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 587 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 587 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 377: /* "CtxItemDecl4" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 596 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 596 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 378: /* "VarDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 605 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 605 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 379: /* "VarNameAndType" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 945 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->varnametype); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 614 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 614 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 380: /* "AnnotationList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 623 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 623 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 381: /* "Annotation" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 632 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 632 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 382: /* "AnnotationLiteralList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 641 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 641 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 383: /* "FunctionDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 650 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 650 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 384: /* "FunctionDecl2" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 659 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 659 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 385: /* "FunctionDeclSimple" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 668 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 668 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 386: /* "FunctionDeclUpdating" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 677 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 677 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 387: /* "FunctionSig" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 945 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->fnsig); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 686 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 686 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 388: /* "ParamList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 695 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 695 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 389: /* "Param" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 704 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 704 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 390: /* "CollectionDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 713 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 713 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 392: /* "IndexDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 722 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 722 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 393: /* "IndexKeyList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 731 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 731 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 394: /* "IndexKeySpec" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 740 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 740 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 395: /* "IntegrityConstraintDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 749 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 749 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 396: /* "QueryBody" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 758 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 758 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 397: /* "StatementsAndOptionalExprTop" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 767 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 767 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 398: /* "StatementsAndOptionalExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 776 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 776 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 399: /* "StatementsAndExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 785 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 785 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 400: /* "Statements" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 794 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 794 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 401: /* "Statement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 803 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 803 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 402: /* "BlockStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 812 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 812 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 403: /* "BlockExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 821 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 821 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 404: /* "EnclosedStatementsAndOptionalExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 830 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 830 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 405: /* "VarDeclStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 839 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 839 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 408: /* "AssignStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 848 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 848 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 409: /* "ApplyStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 857 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 857 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 410: /* "ExitStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 866 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 866 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 411: /* "WhileStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 875 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 875 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 412: /* "FlowCtlStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 884 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 884 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 413: /* "FLWORStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 893 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 893 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 414: /* "ReturnStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 902 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 902 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 415: /* "IfStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 911 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 911 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 416: /* "TryStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 920 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 920 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 417: /* "CatchListStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 929 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 929 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 418: /* "CatchStatement" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 938 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 420: /* "Expr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 947 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 421: /* "ExprSingle" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 956 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 422: /* "ExprSimple" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 965 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 423: /* "FLWORExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 974 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 424: /* "ReturnExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 983 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 427: /* "FLWORWinCond" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 992 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 428: /* "WindowClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1001 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 429: /* "CountClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1010 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 430: /* "ForLetWinClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1019 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 432: /* "FLWORClauseList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1028 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 433: /* "ForClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1037 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 435: /* "VarInDeclList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1046 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 436: /* "VarInDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1055 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 437: /* "PositionalVar" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1064 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 438: /* "FTScoreVar" */

/* Line 480 of lalr1.cc  */
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1073 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 439: /* "LetClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1082 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 440: /* "VarGetsDeclList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1091 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 441: /* "VarGetsDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1100 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 442: /* "WindowVarDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1109 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 443: /* "WindowVars" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1118 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 444: /* "WindowVars3" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1127 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 445: /* "WindowVars2" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1136 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 446: /* "WhereClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1145 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 447: /* "GroupByClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1154 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 448: /* "GroupSpecList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1163 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 449: /* "GroupSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1172 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 450: /* "GroupCollationSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1181 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 451: /* "OrderByClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1190 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 452: /* "OrderSpecList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1199 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 453: /* "OrderSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1208 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 454: /* "OrderModifier" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1217 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 455: /* "OrderDirSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1226 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 456: /* "OrderEmptySpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1235 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 457: /* "OrderCollationSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1244 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 458: /* "QuantifiedExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1253 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 459: /* "QVarInDeclList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1262 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 460: /* "QVarInDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1271 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 461: /* "SwitchExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1280 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 462: /* "SwitchCaseClauseList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1289 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 463: /* "SwitchCaseClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1298 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 464: /* "SwitchCaseOperandList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1307 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 465: /* "SwitchStatement" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1316 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 468: /* "TypeswitchExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1325 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 469: /* "TypeswitchStatement" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1334 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 470: /* "CaseClauseList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1343 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 471: /* "CaseClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1352 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 474: /* "SequenceTypeList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1361 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 475: /* "IfExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1370 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 476: /* "OrExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1379 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 477: /* "AndExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1388 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 938 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 419: /* "Expr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 947 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 420: /* "ExprSingle" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 956 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 421: /* "ExprSimple" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 965 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 422: /* "FLWORExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 974 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 423: /* "ReturnExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 983 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 426: /* "FLWORWinCond" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 992 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 427: /* "WindowClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1001 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 428: /* "CountClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1010 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 429: /* "ForLetWinClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1019 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 431: /* "FLWORClauseList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1028 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 432: /* "ForClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1037 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 434: /* "VarInDeclList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1046 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 435: /* "VarInDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1055 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 436: /* "PositionalVar" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1064 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 437: /* "FTScoreVar" */

/* Line 480 of lalr1.cc  */
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1073 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 438: /* "LetClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1082 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 439: /* "VarGetsDeclList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1091 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 440: /* "VarGetsDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1100 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 441: /* "WindowVarDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1109 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 442: /* "WindowVars" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1118 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 443: /* "WindowVars3" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1127 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 444: /* "WindowVars2" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1136 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 445: /* "WhereClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1145 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 446: /* "GroupByClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1154 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 447: /* "GroupSpecList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1163 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 448: /* "GroupSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1172 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 449: /* "GroupCollationSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1181 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 450: /* "OrderByClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1190 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 451: /* "OrderSpecList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1199 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 452: /* "OrderSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1208 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 453: /* "OrderModifier" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1217 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 454: /* "OrderDirSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1226 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 455: /* "OrderEmptySpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1235 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 456: /* "OrderCollationSpec" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1244 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 457: /* "QuantifiedExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1253 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 458: /* "QVarInDeclList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1262 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 459: /* "QVarInDecl" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1271 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 460: /* "SwitchExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1280 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 461: /* "SwitchCaseClauseList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1289 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 462: /* "SwitchCaseClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1298 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 463: /* "SwitchCaseOperandList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1307 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 464: /* "SwitchStatement" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1316 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 467: /* "TypeswitchExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1325 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 468: /* "TypeswitchStatement" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1334 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 469: /* "CaseClauseList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1343 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 470: /* "CaseClause" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1352 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 473: /* "SequenceTypeList" */

/* Line 480 of lalr1.cc  */
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
#line 1361 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 474: /* "IfExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1370 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 475: /* "OrExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1379 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 476: /* "AndExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1388 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
	break;
      case 477: /* "NotExpr" */

/* Line 480 of lalr1.cc  */
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
#line 1397 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 478: /* "ComparisonExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1397 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1406 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 480: /* "FTContainsExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1406 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1415 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 481: /* "StringConcatExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1415 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1424 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 482: /* "opt_FTIgnoreOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1424 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1433 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 483: /* "RangeExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1433 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1442 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 484: /* "AdditiveExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1442 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1451 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 485: /* "MultiplicativeExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1451 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1460 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 486: /* "UnionExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1460 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1469 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 487: /* "IntersectExceptExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1469 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1478 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 488: /* "InstanceofExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1478 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1487 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 489: /* "TreatExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1487 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1496 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 490: /* "CastableExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1496 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1505 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 491: /* "CastExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1505 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1514 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 492: /* "SingleType" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1514 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1523 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 493: /* "UnaryExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1523 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1532 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 494: /* "SignList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1532 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1541 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 495: /* "ValueExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1541 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1550 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 496: /* "SimpleMapExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1550 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1559 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 497: /* "ValueComp" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1559 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1568 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 498: /* "NodeComp" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1568 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1577 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 499: /* "ValidateExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1577 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1586 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 500: /* "ExtensionExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1586 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1595 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 501: /* "Pragma_list" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1595 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1604 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 502: /* "Pragma" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1604 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1613 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 503: /* "PathExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1613 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1622 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 504: /* "RelativePathExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1622 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1631 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 505: /* "StepExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1631 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1640 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 506: /* "NameTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1640 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1649 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 507: /* "Wildcard" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1649 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1658 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 508: /* "FilterExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1658 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1667 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 509: /* "PredicateList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1667 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1676 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 510: /* "Predicate" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1676 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1685 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 511: /* "PrimaryExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1685 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1694 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 512: /* "Literal" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1694 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1703 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 513: /* "NumericLiteral" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1703 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1712 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 515: /* "VarRef" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1712 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1721 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 516: /* "ParenthesizedExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1721 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1730 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 517: /* "ContextItemExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1730 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1739 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 518: /* "OrderedExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1739 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1748 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 519: /* "UnorderedExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1748 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1757 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 520: /* "FunctionCall" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1757 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1766 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 521: /* "ArgList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1766 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1775 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 525: /* "Constructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1775 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1784 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 526: /* "DirectConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1784 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1793 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 527: /* "DirElemConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1793 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1802 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 528: /* "DirElemContentList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1802 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1811 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 529: /* "DirAttributeList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1811 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1820 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 530: /* "DirAttr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1820 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1829 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 532: /* "DirAttributeValue" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1829 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1838 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 533: /* "opt_QuoteAttrContentList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1838 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1847 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 534: /* "QuoteAttrContentList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1847 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1856 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 535: /* "opt_AposAttrContentList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1856 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1865 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 536: /* "AposAttrContentList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1865 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1874 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 537: /* "QuoteAttrValueContent" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1874 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1883 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 538: /* "AposAttrValueContent" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1883 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1892 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 539: /* "DirElemContent" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1892 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1901 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 540: /* "CommonContent" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1901 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1910 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 541: /* "DirCommentConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1910 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1919 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 542: /* "DirPIConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1919 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1928 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 543: /* "CDataSection" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1928 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1937 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 544: /* "ComputedConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1937 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1946 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 545: /* "CompDocConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1946 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1955 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 546: /* "CompElemConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1955 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1964 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 547: /* "CompAttrConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1964 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1973 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 548: /* "CompTextConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1973 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1982 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 549: /* "CompCommentConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1982 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 1991 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 550: /* "CompPIConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 1991 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2000 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 551: /* "CompNamespaceConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2000 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2009 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 552: /* "TypeDeclaration" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2009 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2018 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 553: /* "SequenceType" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2018 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2027 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 554: /* "OccurrenceIndicator" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2027 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2036 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 555: /* "ItemType" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2036 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2045 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 556: /* "TypeList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2045 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2054 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 557: /* "GeneralizedAtomicType" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2054 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2063 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 558: /* "SimpleType" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2063 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2072 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 559: /* "KindTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2072 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2081 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 560: /* "AnyKindTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2081 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2090 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 561: /* "DocumentTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2090 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2099 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 562: /* "NamespaceTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2099 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2108 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 563: /* "TextTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2108 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2117 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 564: /* "CommentTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2117 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2126 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 565: /* "PITest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2126 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2135 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 566: /* "AttributeTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2135 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2144 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 567: /* "SchemaAttributeTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2144 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2153 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 568: /* "ElementTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2153 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2162 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 569: /* "SchemaElementTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2162 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2171 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 570: /* "TypeName" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2171 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2180 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 571: /* "TypeName_WITH_HOOK" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2180 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2189 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 572: /* "StringLiteral" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2189 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2198 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 574: /* "AnyFunctionTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2198 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2207 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 575: /* "TypedFunctionTest" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 930 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2207 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2216 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 578: /* "InsertExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2216 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2225 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 579: /* "DeleteExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2225 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2234 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 580: /* "ReplaceExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2234 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2243 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 581: /* "RenameExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2243 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2252 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 582: /* "TransformExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2252 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2261 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 583: /* "VarNameList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2261 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2270 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 584: /* "VarNameDecl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2270 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2279 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 585: /* "TryExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2279 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2288 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 586: /* "CatchListExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2288 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2297 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 587: /* "CatchExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2297 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2306 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 588: /* "BracedExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2306 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2315 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 589: /* "NameTestList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 945 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ delete (yyvaluep->name_test_list); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2315 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2324 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 590: /* "FTSelection" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2324 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2333 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 593: /* "FTOr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2333 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2342 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 594: /* "FTAnd" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2342 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2351 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 595: /* "FTMildNot" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2351 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2360 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 596: /* "FTUnaryNot" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2360 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2369 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 597: /* "FTPrimaryWithOptions" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2369 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2378 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 598: /* "opt_FTMatchOptions" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2378 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2387 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 600: /* "FTWeight" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2387 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2396 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 601: /* "FTPrimary" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2396 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2405 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 602: /* "opt_FTTimes" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2405 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2414 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 603: /* "FTExtensionSelection" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2414 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2423 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 605: /* "FTWords" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2423 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2432 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 606: /* "FTWordsValue" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2432 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2441 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 608: /* "FTAnyallOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2441 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2450 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 611: /* "FTPosFilter" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2450 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2459 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 612: /* "FTOrder" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2459 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2468 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 613: /* "FTWindow" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2468 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2477 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 614: /* "FTDistance" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2477 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2486 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 615: /* "FTUnit" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2486 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2495 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 616: /* "FTMatchOptions" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2495 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2504 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 617: /* "FTMatchOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2504 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2513 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 618: /* "FTCaseOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2513 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2522 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 619: /* "FTDiacriticsOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2522 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2531 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 620: /* "FTExtensionOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2531 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2540 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 621: /* "FTStemOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2540 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2549 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 622: /* "FTThesaurusOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2549 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2558 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 626: /* "FTThesaurusID" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2558 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2567 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 629: /* "FTStopWordOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2567 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2576 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 630: /* "FTStopWords" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2576 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2585 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 634: /* "FTStopWordsInclExcl" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2585 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2594 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 635: /* "FTLanguageOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2594 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2603 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 636: /* "FTWildCardOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2603 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2612 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 637: /* "FTContent" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2612 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2621 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 638: /* "FTTimes" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2621 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2630 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 639: /* "FTRange" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2630 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2639 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 640: /* "FTScope" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2639 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2648 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 641: /* "FTBigUnit" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2648 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2657 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 642: /* "FTIgnoreOption" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2657 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2666 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 643: /* "JSONArrayConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2666 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2675 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 644: /* "JSONSimpleObjectUnion" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2675 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2684 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 645: /* "JSONAccumulatorObjectUnion" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2684 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2693 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 646: /* "JSONObjectConstructor" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2693 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2702 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 647: /* "JSONPairList" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->node) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2702 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2711 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 648: /* "JSONInsertExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2711 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2720 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 649: /* "JSONAppendExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2720 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2729 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 650: /* "JSONDeleteExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2729 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2738 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 651: /* "JSONRenameExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2738 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2747 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 652: /* "JSONReplaceExpr" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2747 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2756 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 659: /* "QNAME" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2756 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2765 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 660: /* "FUNCTION_NAME" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2765 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2774 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;
      case 661: /* "EQNAME" */

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 942 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
	{ release_hack( (yyvaluep->expr) ); };

/* Line 480 of lalr1.cc  */
<<<<<<< TREE
#line 2774 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2783 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	break;

	default:
	  break;
      }
  }

  void
  jsoniq_parser::yypop_ (unsigned int n)
  {
    yystate_stack_.pop (n);
    yysemantic_stack_.pop (n);
    yylocation_stack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  jsoniq_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  jsoniq_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  jsoniq_parser::debug_level_type
  jsoniq_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  jsoniq_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif

  inline bool
  jsoniq_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  jsoniq_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  jsoniq_parser::parse ()
  {
    /// Lookahead and lookahead in internal form.
    int yychar = yyempty_;
    int yytoken = 0;

    /* State.  */
    int yyn;
    int yylen = 0;
    int yystate = 0;

    /* Error handling.  */
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// Semantic value of the lookahead.
    semantic_type yylval;
    /// Location of the lookahead.
    location_type yylloc;
    /// The locations where the error started and ended.
    location_type yyerror_range[3];

    /// $$.
    semantic_type yyval;
    /// @$.
    location_type yyloc;

    int yyresult;

    YYCDEBUG << "Starting parse" << std::endl;


    /* User initialization code.  */
    
/* Line 565 of lalr1.cc  */
<<<<<<< TREE
#line 133 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 133 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
{
    yylloc.begin.filename = yylloc.end.filename = &(driver.theFilename2);
}

/* Line 565 of lalr1.cc  */
<<<<<<< TREE
#line 2871 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 2880 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE

    /* Initialize the stacks.  The initial state will be pushed in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystate_stack_ = state_stack_type (0);
    yysemantic_stack_ = semantic_stack_type (0);
    yylocation_stack_ = location_stack_type (0);
    yysemantic_stack_.push (yylval);
    yylocation_stack_.push (yylloc);

    /* New state.  */
  yynewstate:
    yystate_stack_.push (yystate);
    YYCDEBUG << "Entering state " << yystate << std::endl;

    /* Accept?  */
    if (yystate == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    /* Backup.  */
  yybackup:

    /* Try to take a decision without lookahead.  */
    yyn = yypact_[yystate];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    /* Read a lookahead token.  */
    if (yychar == yyempty_)
      {
	YYCDEBUG << "Reading a token: ";
	yychar = yylex (&yylval, &yylloc);
      }


    /* Convert token to internal form.  */
    if (yychar <= yyeof_)
      {
	yychar = yytoken = yyeof_;
	YYCDEBUG << "Now at end of input." << std::endl;
      }
    else
      {
	yytoken = yytranslate_ (yychar);
	YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
      }

    /* If the proper action on seeing token YYTOKEN is to reduce or to
       detect an error, take that action.  */
    yyn += yytoken;
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yytoken)
      goto yydefault;

    /* Reduce or error.  */
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
	if (yy_table_value_is_error_ (yyn))
	  goto yyerrlab;
	yyn = -yyn;
	goto yyreduce;
      }

    /* Shift the lookahead token.  */
    YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

    /* Discard the token being shifted.  */
    yychar = yyempty_;

    yysemantic_stack_.push (yylval);
    yylocation_stack_.push (yylloc);

    /* Count tokens shifted since error; after three, turn off error
       status.  */
    if (yyerrstatus_)
      --yyerrstatus_;

    yystate = yyn;
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystate];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    /* If YYLEN is nonzero, implement the default value of the action:
       `$$ = $1'.  Otherwise, use the top of the stack.

       Otherwise, the following line sets YYVAL to garbage.
       This behavior is undocumented and Bison
       users should not rely upon it.  */
    if (yylen)
      yyval = yysemantic_stack_[yylen - 1];
    else
      yyval = yysemantic_stack_[0];

    {
      slice<location_type, location_stack_type> slice (yylocation_stack_, yylen);
      YYLLOC_DEFAULT (yyloc, slice, yylen);
    }
    YY_REDUCE_PRINT (yyn);
    switch (yyn)
      {
	  case 3:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1071 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1072 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
      }
    break;

  case 4:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1075 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1076 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
      }
    break;

  case 5:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1079 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1080 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.node) = (yysemantic_stack_[(3) - (3)].node);
      }
    break;

  case 6:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1087 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1088 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.node) = NULL;
      }
    break;

  case 7:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1093 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1094 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.node) = NULL; YYABORT;
      }
    break;

  case 8:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1097 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1098 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.node) = NULL; YYABORT;
      }
    break;

  case 9:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1106 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1107 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
      driver.set_expr( (yyval.node) );
    }
    break;

  case 10:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1112 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1113 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      MainModule* mm = dynamic_cast<MainModule*>((yysemantic_stack_[(2) - (2)].node));
      mm->set_version_decl( static_cast<VersionDecl*>((yysemantic_stack_[(2) - (1)].node)) );
      (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
      driver.set_expr( (yyval.node) );
    }
    break;

  case 11:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1120 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1121 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
      driver.set_expr( (yyval.node) );
    }
    break;

  case 12:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1126 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1127 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      LibraryModule* lm = dynamic_cast<LibraryModule*>((yysemantic_stack_[(2) - (2)].node));
      lm->set_version_decl( static_cast<VersionDecl*>((yysemantic_stack_[(2) - (1)].node)) );
      (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
      driver.set_expr( (yyval.node) );
    }
    break;

  case 13:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1137 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1138 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VersionDecl( LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (3)].sval)), "utf-8" );
    }
    break;

  case 14:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1142 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1143 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VersionDecl( LOC((yyloc)), SYMTAB((yysemantic_stack_[(6) - (3)].sval)), SYMTAB((yysemantic_stack_[(6) - (5)].sval)) );
    }
    break;

  case 15:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1146 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1147 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VersionDecl( LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (3)].sval)), "utf-8", VersionDecl::jsoniq );
    }
    break;

  case 16:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1151 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1152 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VersionDecl(
        LOC((yyloc)), SYMTAB((yysemantic_stack_[(6) - (3)].sval)), SYMTAB((yysemantic_stack_[(6) - (5)].sval)), VersionDecl::jsoniq );
    }
    break;

  case 17:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1160 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1161 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      Prolog* prolog = new Prolog(LOC((yyloc)), static_cast<SIND_DeclList*>((yysemantic_stack_[(3) - (1)].node)), NULL);

      (yyval.node) = new MainModule(LOC((yyloc)), static_cast<QueryBody*>((yysemantic_stack_[(3) - (3)].expr)), prolog);
    }
    break;

  case 18:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1167 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1168 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      Prolog* prolog = new Prolog(LOC((yyloc)), NULL, static_cast<VFO_DeclList*>((yysemantic_stack_[(3) - (1)].node)));

      (yyval.node) = new MainModule(LOC((yyloc)), static_cast<QueryBody*>((yysemantic_stack_[(3) - (3)].expr)), prolog);
    }
    break;

  case 19:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1174 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1175 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      Prolog* prolog = new Prolog(LOC((yyloc)),
                                  static_cast<SIND_DeclList*>((yysemantic_stack_[(5) - (1)].node)),
                                  static_cast<VFO_DeclList*>((yysemantic_stack_[(5) - (3)].node)));

      (yyval.node) = new MainModule(LOC((yyloc)), static_cast<QueryBody*>((yysemantic_stack_[(5) - (5)].expr)), prolog);
    }
    break;

  case 20:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1183 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1184 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new MainModule( LOC((yyloc)), static_cast<QueryBody*>((yysemantic_stack_[(1) - (1)].expr)), NULL );
    }
    break;

  case 21:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1190 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1191 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node); (yyval.node) = (yysemantic_stack_[(3) - (3)].expr); // to prevent the Bison warning
      (yylocation_stack_[(3) - (1)]).step();
      error((yylocation_stack_[(3) - (1)]), "syntax error, missing semicolon \";\" after statement.");
      YYERROR;
    }
    break;

  case 22:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1198 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1199 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node); (yyval.node) = (yysemantic_stack_[(3) - (3)].expr); // to prevent the Bison warning
      (yylocation_stack_[(3) - (1)]).step();
      error((yylocation_stack_[(3) - (1)]), "syntax error, missing semicolon \";\" after declaration.");
      YYERROR;
    }
    break;

  case 23:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1206 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1207 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(5) - (1)].node); (yyval.node) = (yysemantic_stack_[(5) - (3)].node); (yyval.node) = (yysemantic_stack_[(5) - (5)].expr); // to prevent the Bison warning
      (yylocation_stack_[(5) - (3)]).step();
      error((yylocation_stack_[(5) - (3)]), "syntax error, missing semicolon \";\" after declaration.");
      YYERROR;
    }
    break;

  case 24:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1214 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1215 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(5) - (1)].node); (yyval.node) = (yysemantic_stack_[(5) - (3)].node); (yyval.node) = (yysemantic_stack_[(5) - (5)].expr); // to prevent the Bison warning
      (yylocation_stack_[(5) - (1)]).step();
      error((yylocation_stack_[(5) - (1)]), "syntax error, missing semicolon \";\" after statement.");
      YYERROR;
    }
    break;

  case 25:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1225 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1226 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new LibraryModule(LOC((yyloc)), static_cast<ModuleDecl*>((yysemantic_stack_[(1) - (1)].node)), NULL);
    }
    break;

  case 26:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1230 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1231 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      Prolog* prolog = new Prolog(LOC((yyloc)), static_cast<SIND_DeclList*>((yysemantic_stack_[(3) - (2)].node)), NULL);

      (yyval.node) = new LibraryModule(LOC((yyloc)), static_cast<ModuleDecl*>((yysemantic_stack_[(3) - (1)].node)), prolog);
    }
    break;

  case 27:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1237 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1238 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      Prolog* prolog = new Prolog(LOC((yyloc)), NULL, static_cast<VFO_DeclList*>((yysemantic_stack_[(3) - (2)].node)));

      (yyval.node) = new LibraryModule(LOC((yyloc)), static_cast<ModuleDecl*>((yysemantic_stack_[(3) - (1)].node)), prolog);
    }
    break;

  case 28:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1244 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1245 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      Prolog* prolog = new Prolog(LOC((yyloc)),
                                  static_cast<SIND_DeclList*>((yysemantic_stack_[(5) - (2)].node)),
                                  static_cast<VFO_DeclList*>((yysemantic_stack_[(5) - (4)].node)));

      (yyval.node) = new LibraryModule(LOC((yyloc)), static_cast<ModuleDecl*>((yysemantic_stack_[(5) - (1)].node)), prolog);
    }
    break;

  case 29:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1256 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1257 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ModuleDecl( LOC((yyloc)), SYMTAB((yysemantic_stack_[(6) - (3)].sval)), SYMTAB((yysemantic_stack_[(6) - (5)].sval)) );

      dynamic_cast<ModuleDecl*>((yyval.node))->setComment( SYMTAB((yysemantic_stack_[(6) - (1)].sval)) );
    }
    break;

  case 30:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1266 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1267 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SIND_DeclList *sdl = new SIND_DeclList( LOC((yyloc)) );
      sdl->push_back( (yysemantic_stack_[(1) - (1)].node) );
      (yyval.node) = sdl;
    }
    break;

  case 31:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1273 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1274 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ((SIND_DeclList*)(yysemantic_stack_[(3) - (1)].node))->push_back( (yysemantic_stack_[(3) - (3)].node) );
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

  case 32:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1280 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1281 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      // error
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node); (yyval.node) = (yysemantic_stack_[(3) - (3)].node); // to prevent the Bison warning
      (yylocation_stack_[(3) - (1)]).step();
      error((yylocation_stack_[(3) - (1)]), "syntax error, missing semicolon \";\" after declaration.");
      YYERROR;
    }
    break;

  case 46:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1315 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1316 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new BoundarySpaceDecl(LOC((yyloc)), StaticContextConsts::preserve_space);
    }
    break;

  case 47:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1320 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1321 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new BoundarySpaceDecl(LOC((yyloc)), StaticContextConsts::strip_space);
    }
    break;

  case 48:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1328 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1329 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DefaultCollationDecl( LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (4)].sval)) );
    }
    break;

  case 49:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1336 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1337 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new BaseURIDecl( LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (3)].sval)) );
    }
    break;

  case 50:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1344 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1345 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ConstructionDecl(LOC((yyloc)), StaticContextConsts::cons_preserve);
    }
    break;

  case 51:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1349 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1350 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ConstructionDecl(LOC((yyloc)), StaticContextConsts::cons_strip);
    }
    break;

  case 52:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1357 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1358 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new OrderingModeDecl(LOC((yyloc)), StaticContextConsts::ordered);
    }
    break;

  case 53:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1362 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1363 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new OrderingModeDecl(LOC((yyloc)), StaticContextConsts::unordered);
    }
    break;

  case 54:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1370 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1371 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new EmptyOrderDecl(LOC((yyloc)), StaticContextConsts::empty_greatest);
    }
    break;

  case 55:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1375 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1376 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new EmptyOrderDecl(LOC((yyloc)), StaticContextConsts::empty_least);
    }
    break;

  case 56:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1383 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1384 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CopyNamespacesDecl(LOC((yyloc)), true, true);
    }
    break;

  case 57:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1388 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1389 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CopyNamespacesDecl(LOC((yyloc)), true, false);
    }
    break;

  case 58:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1393 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1394 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CopyNamespacesDecl(LOC((yyloc)), false, true);
    }
    break;

  case 59:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1398 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1399 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CopyNamespacesDecl(LOC((yyloc)), false, false);
    }
    break;

  case 62:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1411 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1412 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yyval.node); // to prevent the Bison warning
      error((yylocation_stack_[(3) - (2)]), "syntax error, \"import\" should be followed by either \"schema\" or \"module\".");
      YYERROR;
    }
    break;

  case 63:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1421 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1422 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SchemaImport( LOC((yyloc)), NULL, SYMTAB((yysemantic_stack_[(3) - (3)].sval)), NULL );
    }
    break;

  case 64:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1426 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1427 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SchemaImport(LOC((yyloc)),
                            dynamic_cast<SchemaPrefix*>((yysemantic_stack_[(4) - (3)].node)),
                            SYMTAB((yysemantic_stack_[(4) - (4)].sval)),
                            NULL);
    }
    break;

  case 65:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1434 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1435 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SchemaImport(LOC((yyloc)),
                            NULL,
                            SYMTAB((yysemantic_stack_[(5) - (3)].sval)),
                            dynamic_cast<URILiteralList*>((yysemantic_stack_[(5) - (5)].node)));
    }
    break;

  case 66:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1442 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1443 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SchemaImport(LOC((yyloc)),
                            dynamic_cast<SchemaPrefix*>((yysemantic_stack_[(6) - (3)].node)),
                            SYMTAB((yysemantic_stack_[(6) - (4)].sval)),
                            dynamic_cast<URILiteralList*>((yysemantic_stack_[(6) - (6)].node)));
    }
    break;

  case 67:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1453 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1454 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      URILiteralList *ull = new URILiteralList( LOC((yyloc)));
      ull->push_back( SYMTAB((yysemantic_stack_[(1) - (1)].sval)) );
      (yyval.node) = ull;
    }
    break;

  case 68:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1460 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1461 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if ( URILiteralList *ull = dynamic_cast<URILiteralList*>((yysemantic_stack_[(3) - (1)].node)) )
        ull->push_back( SYMTAB((yysemantic_stack_[(3) - (3)].sval)) );

      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

  case 69:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1471 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1472 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SchemaPrefix( LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (2)].sval)) );
    }
    break;

  case 70:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1476 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1477 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SchemaPrefix( LOC((yyloc)), true );
    }
    break;

  case 71:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1484 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1485 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ModuleImport(LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (3)].sval)), NULL);

      dynamic_cast<ModuleImport *>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(3) - (2)].sval)));
    }
    break;

  case 72:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1491 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1492 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ModuleImport(LOC((yyloc)), SYMTAB((yysemantic_stack_[(6) - (4)].sval)), SYMTAB((yysemantic_stack_[(6) - (6)].sval)), NULL);

      dynamic_cast<ModuleImport *>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(6) - (2)].sval)));
    }
    break;

  case 73:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1498 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1499 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ModuleImport(LOC((yyloc)),
                            SYMTAB((yysemantic_stack_[(5) - (3)].sval)),
                            dynamic_cast<URILiteralList*>((yysemantic_stack_[(5) - (5)].node)));

      dynamic_cast<ModuleImport *>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(5) - (2)].sval)));
    }
    break;

  case 74:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1507 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1508 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ModuleImport(LOC((yyloc)),
                            SYMTAB((yysemantic_stack_[(8) - (4)].sval)),
                            SYMTAB((yysemantic_stack_[(8) - (6)].sval)),
                            dynamic_cast<URILiteralList*>((yysemantic_stack_[(8) - (8)].node)));

      dynamic_cast<ModuleImport *>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(8) - (2)].sval)));
    }
    break;

  case 75:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1520 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1521 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new NamespaceDecl( LOC((yyloc)), SYMTAB((yysemantic_stack_[(5) - (3)].sval)), SYMTAB((yysemantic_stack_[(5) - (5)].sval)) );
    }
    break;

  case 76:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1528 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1529 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DefaultNamespaceDecl(LOC((yyloc)),
                                    ParseConstants::ns_element_default,
                                    SYMTAB((yysemantic_stack_[(5) - (5)].sval)));
    }
    break;

  case 77:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1535 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1536 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DefaultNamespaceDecl(LOC((yyloc)),
                                    ParseConstants::ns_function_default,
                                    SYMTAB((yysemantic_stack_[(5) - (5)].sval)));
    }
    break;

  case 78:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1545 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1546 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      VFO_DeclList *vdl = new VFO_DeclList( LOC((yyloc)));
      vdl->push_back( (yysemantic_stack_[(1) - (1)].node) );
      (yyval.node) = vdl;
    }
    break;

  case 79:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1552 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1553 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ((VFO_DeclList*)(yysemantic_stack_[(3) - (1)].node))->push_back( (yysemantic_stack_[(3) - (3)].node) );
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

  case 80:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1559 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1560 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node); (yyval.node) = (yysemantic_stack_[(3) - (3)].node); // to prevent the Bison warning
      (yylocation_stack_[(3) - (1)]).step();
      error((yylocation_stack_[(3) - (1)]), "syntax error, missing semicolon \";\" after declaration.");
      YYERROR;
    }
    break;

  case 89:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1582 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1583 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DecimalFormatNode(LOC((yyloc)), (yysemantic_stack_[(4) - (4)].vstrpair));
      delete (yysemantic_stack_[(4) - (4)].vstrpair);
    }
    break;

  case 90:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1588 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1589 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DecimalFormatNode(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (3)].expr)), (yysemantic_stack_[(4) - (4)].vstrpair));
      delete (yysemantic_stack_[(4) - (4)].vstrpair);
    }
    break;

  case 91:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1597 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1598 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.vstrpair) = new vector<string_pair_t>();
      (yyval.vstrpair)->push_back( *(yysemantic_stack_[(1) - (1)].strpair) );
      delete (yysemantic_stack_[(1) - (1)].strpair);
    }
    break;

  case 92:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1604 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1605 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yysemantic_stack_[(2) - (1)].vstrpair)->push_back( *(yysemantic_stack_[(2) - (2)].strpair) );
      delete (yysemantic_stack_[(2) - (2)].strpair);
      (yyval.vstrpair) = (yysemantic_stack_[(2) - (1)].vstrpair);
    }
    break;

  case 93:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1614 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1615 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      StringLiteral *sl = static_cast<StringLiteral*>((yysemantic_stack_[(3) - (3)].expr));
      (yyval.strpair) = new string_pair_t( (yysemantic_stack_[(3) - (1)].strval), sl->get_strval().str() );
      delete sl;
    }
    break;

  case 94:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1623 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1624 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "decimal-separator"; }
    break;

  case 95:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1624 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1625 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "digit"; }
    break;

  case 96:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1625 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1626 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "grouping-separator"; }
    break;

  case 97:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1626 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1627 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "infinty"; }
    break;

  case 98:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1627 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1628 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "minus-sign"; }
    break;

  case 99:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1628 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1629 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "NaN"; }
    break;

  case 100:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1629 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1630 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "pattern-separator"; }
    break;

  case 101:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1630 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1631 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "percent"; }
    break;

  case 102:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1631 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1632 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "per-mille"; }
    break;

  case 103:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1632 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1633 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.strval) = "zero-digit"; }
    break;

  case 104:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1638 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1639 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new OptionDecl(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (3)].expr)), SYMTAB((yysemantic_stack_[(4) - (4)].sval)));
    }
    break;

  case 105:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1646 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1647 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FTOptionDecl( LOC((yyloc)), dynamic_cast<FTMatchOptions*>((yysemantic_stack_[(3) - (3)].node)) );
    }
    break;

  case 106:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1654 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1655 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(4) - (4)].node);
    }
    break;

  case 107:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1662 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1663 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CtxItemDecl* d = dynamic_cast<CtxItemDecl*>((yysemantic_stack_[(3) - (3)].node));
      d->theType = (yysemantic_stack_[(3) - (2)].node);
      (yyval.node) = d;
    }
    break;

  case 108:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1669 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1670 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 109:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1677 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1678 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CtxItemDecl* d = dynamic_cast<CtxItemDecl*>((yysemantic_stack_[(1) - (1)].node));
      d->theIsExternal = false;
      (yyval.node) = d;
    }
    break;

  case 110:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1684 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1685 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CtxItemDecl(LOC((yyloc)), NULL);
    }
    break;

  case 111:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1689 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1690 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
    }
    break;

  case 112:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1697 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1698 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CtxItemDecl(LOC((yyloc)), (yysemantic_stack_[(2) - (2)].expr));
    }
    break;

  case 113:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1705 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1706 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      std::auto_ptr<VarNameAndType> nt(dynamic_cast<VarNameAndType *>((yysemantic_stack_[(4) - (2)].varnametype)));

      (yyval.node) = new GlobalVarDecl(LOC((yyloc)),
                             nt->theName,
                             nt->theType,
                             (yysemantic_stack_[(4) - (4)].expr),
                             nt->get_annotations(),
                             false);  // not external

      static_cast<GlobalVarDecl*>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(4) - (1)].sval)));
    }
    break;

  case 114:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1719 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1720 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      std::auto_ptr<VarNameAndType> nt(dynamic_cast<VarNameAndType *>((yysemantic_stack_[(3) - (2)].varnametype)));

      (yyval.node) = new GlobalVarDecl(LOC((yyloc)),
                             nt->theName,
                             nt->theType,
                             NULL,   // no init expr
                             nt->get_annotations(),
                             true);  // external

      static_cast<GlobalVarDecl*>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(3) - (1)].sval)));
    }
    break;

  case 115:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1733 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1734 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      std::auto_ptr<VarNameAndType> nt(dynamic_cast<VarNameAndType *>((yysemantic_stack_[(5) - (2)].varnametype)));

      (yyval.node) = new GlobalVarDecl(LOC((yyloc)),
                             nt->theName,
                             nt->theType,
                             (yysemantic_stack_[(5) - (5)].expr),     // init expr
                             nt->get_annotations(),
                             true);  // external

      static_cast<GlobalVarDecl*>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(5) - (1)].sval)));
    }
    break;

  case 116:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1750 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1751 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.varnametype) = new VarNameAndType(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (3)].expr)), NULL, NULL);
    }
    break;

  case 117:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1755 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1756 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.varnametype) = new VarNameAndType(LOC((yyloc)),
                              static_cast<QName*>((yysemantic_stack_[(4) - (3)].expr)),
                              dynamic_cast<SequenceType *>((yysemantic_stack_[(4) - (4)].node)),
                              NULL);
    }
    break;

  case 118:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1763 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1764 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.varnametype) = new VarNameAndType(LOC((yyloc)),
                              static_cast<QName*>((yysemantic_stack_[(4) - (4)].expr)),
                              NULL,
                              static_cast<AnnotationListParsenode*>((yysemantic_stack_[(4) - (1)].node)));
    }
    break;

  case 119:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1771 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1772 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.varnametype) = new VarNameAndType(LOC((yyloc)),
                              static_cast<QName*>((yysemantic_stack_[(5) - (4)].expr)),
                              dynamic_cast<SequenceType *>((yysemantic_stack_[(5) - (5)].node)),
                              static_cast<AnnotationListParsenode*>((yysemantic_stack_[(5) - (1)].node)));
    }
    break;

  case 120:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1782 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1783 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnnotationListParsenode(LOC((yyloc)), static_cast<AnnotationParsenode*>((yysemantic_stack_[(1) - (1)].node)));
    }
    break;

  case 121:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1787 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1788 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      static_cast<AnnotationListParsenode*>((yysemantic_stack_[(2) - (1)].node))->push_back(static_cast<AnnotationParsenode*>((yysemantic_stack_[(2) - (2)].node)));
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

  case 122:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1796 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1797 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnnotationParsenode(LOC((yyloc)), new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval))), NULL);
    }
    break;

  case 123:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1801 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1802 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnnotationParsenode(LOC((yyloc)),
                                   new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (1)].sval))),
                                   static_cast<AnnotationLiteralListParsenode*>((yysemantic_stack_[(4) - (3)].node)));
    }
    break;

  case 124:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1808 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1809 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnnotationParsenode(LOC((yyloc)), new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)), true), NULL);
    }
    break;

  case 125:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1813 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1814 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnnotationParsenode(LOC((yyloc)),
                                   new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (1)].sval)), true),
                                   static_cast<AnnotationLiteralListParsenode*>((yysemantic_stack_[(4) - (3)].node)));
    }
    break;

  case 126:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1823 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1824 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnnotationLiteralListParsenode(LOC((yyloc)), (yysemantic_stack_[(1) - (1)].expr));
    }
    break;

  case 127:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1828 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1829 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      static_cast<AnnotationLiteralListParsenode*>((yysemantic_stack_[(3) - (1)].node))->push_back((yysemantic_stack_[(3) - (3)].expr));
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

  case 128:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1837 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1838 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      static_cast<FunctionDecl*>((yysemantic_stack_[(2) - (2)].node))->setComment( SYMTAB((yysemantic_stack_[(2) - (1)].sval)) );
      (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
    }
    break;

  case 129:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1843 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1844 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      FunctionDecl* fdecl = static_cast<FunctionDecl*>((yysemantic_stack_[(3) - (3)].node));

      fdecl->setComment( SYMTAB((yysemantic_stack_[(3) - (1)].sval)) );

      fdecl->set_annotations(static_cast<AnnotationListParsenode*>((yysemantic_stack_[(3) - (2)].node)));
      (yyval.node) = (yysemantic_stack_[(3) - (3)].node);
    }
    break;

  case 130:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1856 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1857 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 131:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1861 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1862 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 132:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1869 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1870 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FunctionDecl(LOC((yyloc)),
                            static_cast<QName*>((yysemantic_stack_[(4) - (2)].expr)),
                            &* (yysemantic_stack_[(4) - (3)].fnsig)->theParams,
                            &* (yysemantic_stack_[(4) - (3)].fnsig)->theReturnType,
                            (yysemantic_stack_[(4) - (4)].expr),      // body
                            false,   // not explicitly updating
                            false);  // not external
      delete (yysemantic_stack_[(4) - (3)].fnsig);
    }
    break;

  case 133:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1880 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1881 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FunctionDecl(LOC ((yyloc)),
                            static_cast<QName*>((yysemantic_stack_[(4) - (2)].expr)),
                            (yysemantic_stack_[(4) - (3)].fnsig)->theParams.getp(),
                            (yysemantic_stack_[(4) - (3)].fnsig)->theReturnType.getp(),
                            NULL,   // no body
                            false,   // not explicitly updating
                            true);  // external
      delete (yysemantic_stack_[(4) - (3)].fnsig);
    }
    break;

  case 134:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1895 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1896 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FunctionDecl(LOC ((yyloc)),
                            static_cast<QName*>((yysemantic_stack_[(5) - (3)].expr)),
                            (yysemantic_stack_[(5) - (4)].fnsig)->theParams.getp(),
                            (yysemantic_stack_[(5) - (4)].fnsig)->theReturnType.getp(),
                            (yysemantic_stack_[(5) - (5)].expr),    // body
                            true,  // updating
                            false);// not external
      delete (yysemantic_stack_[(5) - (4)].fnsig);
    }
    break;

  case 135:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1907 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1908 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FunctionDecl(LOC((yyloc)),
                            static_cast<QName*>((yysemantic_stack_[(5) - (3)].expr)),
                            (yysemantic_stack_[(5) - (4)].fnsig)->theParams.getp(),
                            (yysemantic_stack_[(5) - (4)].fnsig)->theReturnType.getp(),
                            NULL,  // no body
                            true,  // updating
                            true); // external
      delete (yysemantic_stack_[(5) - (4)].fnsig);
    }
    break;

  case 136:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1922 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1923 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.fnsig) = new FunctionSig(NULL);
    }
    break;

  case 137:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1927 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1928 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.fnsig) = new FunctionSig(dynamic_cast<ParamList*>((yysemantic_stack_[(3) - (2)].node)));
    }
    break;

  case 138:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1932 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1933 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.fnsig) = new FunctionSig(NULL, dynamic_cast<SequenceType*>((yysemantic_stack_[(4) - (4)].node)));
    }
    break;

  case 139:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1937 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1938 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.fnsig) = new FunctionSig(dynamic_cast<ParamList*>((yysemantic_stack_[(5) - (2)].node)), dynamic_cast<SequenceType*>((yysemantic_stack_[(5) - (5)].node)));
    }
    break;

  case 140:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1946 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ParamList *pl = new ParamList( LOC((yyloc)) );
      pl->push_back( dynamic_cast<Param*>((yysemantic_stack_[(1) - (1)].node)) );
      (yyval.node) = pl;
    }
    break;

  case 141:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1952 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1953 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if ( ParamList *pl = dynamic_cast<ParamList*>((yysemantic_stack_[(3) - (1)].node)) )
        pl->push_back( dynamic_cast<Param*>((yysemantic_stack_[(3) - (3)].node)) );

      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

  case 142:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1963 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1964 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new Param(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(2) - (2)].expr)), NULL);
    }
    break;

  case 143:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1968 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1969 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new Param(LOC((yyloc)),
                     static_cast<QName*>((yysemantic_stack_[(3) - (2)].expr)),
                     dynamic_cast<SequenceType *>((yysemantic_stack_[(3) - (3)].node)));
    }
    break;

  case 144:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1978 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1979 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CollectionDecl( LOC((yyloc)),
                              static_cast<QName*>((yysemantic_stack_[(3) - (3)].expr)),
                              NULL,
                              NULL);

      static_cast<CollectionDecl*>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(3) - (1)].sval)));
    }
    break;

  case 145:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1987 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1988 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CollectionDecl( LOC((yyloc)),
                              static_cast<QName*>((yysemantic_stack_[(5) - (3)].expr)),
                              0,
                              static_cast<SequenceType*>((yysemantic_stack_[(5) - (5)].node)));

      static_cast<CollectionDecl*>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(5) - (1)].sval)));
    }
    break;

  case 146:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 1996 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 1997 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CollectionDecl( LOC((yyloc)),
                               static_cast<QName*>((yysemantic_stack_[(4) - (4)].expr)),
                               static_cast<AnnotationListParsenode*>((yysemantic_stack_[(4) - (2)].node)),
                               0);

      static_cast<CollectionDecl*>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(4) - (1)].sval)));
    }
    break;

  case 147:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2005 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2006 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CollectionDecl( LOC((yyloc)),
                               static_cast<QName*>((yysemantic_stack_[(6) - (4)].expr)),
                               static_cast<AnnotationListParsenode*>((yysemantic_stack_[(6) - (2)].node)),
                               static_cast<SequenceType*>((yysemantic_stack_[(6) - (6)].node)));

      static_cast<CollectionDecl*>((yyval.node))->setComment(SYMTAB((yysemantic_stack_[(6) - (1)].sval)));
    }
    break;

  case 148:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2017 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2018 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = static_cast<parsenode*>(new SequenceType(LOC((yyloc)), (yysemantic_stack_[(1) - (1)].node), NULL));
    }
    break;

  case 149:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2021 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2022 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = static_cast<parsenode*>(new SequenceType(LOC((yyloc)),
                                                    (yysemantic_stack_[(2) - (1)].node),
                                                    dynamic_cast<OccurrenceIndicator*>((yysemantic_stack_[(2) - (2)].node))));
    }
    break;

  case 150:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2027 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2028 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = static_cast<parsenode*>(new SequenceType(LOC((yyloc)), (yysemantic_stack_[(1) - (1)].node), NULL));
    }
    break;

  case 151:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2031 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2032 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = static_cast<parsenode*>(new SequenceType(LOC((yyloc)),
                                                    (yysemantic_stack_[(2) - (1)].node),
                                                    dynamic_cast<OccurrenceIndicator*>((yysemantic_stack_[(2) - (2)].node))));

    }
    break;

  case 152:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2041 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2042 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AST_IndexDecl(LOC((yyloc)),
                             static_cast<QName*>((yysemantic_stack_[(8) - (3)].expr)),
                             (yysemantic_stack_[(8) - (6)].expr),
                             dynamic_cast<IndexKeyList*>((yysemantic_stack_[(8) - (8)].node)),
                             NULL);

      static_cast<AST_IndexDecl*>((yyval.node))->setComment( SYMTAB((yysemantic_stack_[(8) - (1)].sval)) );
    }
    break;

  case 153:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2051 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2052 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AST_IndexDecl(LOC((yyloc)),
                             static_cast<QName*>((yysemantic_stack_[(9) - (4)].expr)),
                             (yysemantic_stack_[(9) - (7)].expr),
                             dynamic_cast<IndexKeyList*>((yysemantic_stack_[(9) - (9)].node)),
                             static_cast<AnnotationListParsenode*>((yysemantic_stack_[(9) - (2)].node)));

      static_cast<AST_IndexDecl*>((yyval.node))->setComment( SYMTAB((yysemantic_stack_[(9) - (1)].sval)) );
    }
    break;

  case 154:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2064 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2065 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      IndexKeyList* keyList = new IndexKeyList(LOC((yyloc)));
      keyList->addKeySpec(dynamic_cast<IndexKeySpec*>((yysemantic_stack_[(1) - (1)].node)));
      (yyval.node) = keyList;
    }
    break;

  case 155:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2070 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2071 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      dynamic_cast<IndexKeyList*>((yysemantic_stack_[(3) - (1)].node))->addKeySpec(dynamic_cast<IndexKeySpec*>((yysemantic_stack_[(3) - (3)].node)));
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

  case 156:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2079 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2080 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new IndexKeySpec(LOC((yyloc)), (yysemantic_stack_[(1) - (1)].expr), NULL, NULL);
    }
    break;

  case 157:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2084 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2085 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new IndexKeySpec(LOC((yyloc)),
                            (yysemantic_stack_[(2) - (1)].expr),
                            dynamic_cast<SequenceType*>((yysemantic_stack_[(2) - (2)].node)),
                            NULL);
    }
    break;

  case 158:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2091 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2092 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new IndexKeySpec(LOC((yyloc)),
                            (yysemantic_stack_[(2) - (1)].expr),
                            NULL,
                            dynamic_cast<OrderCollationSpec*>((yysemantic_stack_[(2) - (2)].node)));
    }
    break;

  case 159:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2098 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2099 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new IndexKeySpec(LOC((yyloc)),
                            (yysemantic_stack_[(3) - (1)].expr),
                            dynamic_cast<SequenceType*>((yysemantic_stack_[(3) - (2)].node)),
                            dynamic_cast<OrderCollationSpec*>((yysemantic_stack_[(3) - (3)].node)));
    }
    break;

  case 160:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2110 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2111 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ICCollSimpleCheck(LOC((yyloc)),
                                 static_cast<QName*>((yysemantic_stack_[(11) - (4)].expr)),
                                 static_cast<QName*>((yysemantic_stack_[(11) - (7)].expr)),
                                 static_cast<QName*>((yysemantic_stack_[(11) - (9)].expr)),
                                 (yysemantic_stack_[(11) - (11)].expr));
    }
    break;

  case 161:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2120 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2121 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ICCollUniqueKeyCheck(LOC((yyloc)),
                                    static_cast<QName*>((yysemantic_stack_[(14) - (4)].expr)),
                                    static_cast<QName*>((yysemantic_stack_[(14) - (7)].expr)),
                                    static_cast<QName*>((yysemantic_stack_[(14) - (10)].expr)),
                                    (yysemantic_stack_[(14) - (14)].expr));
    }
    break;

  case 162:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2130 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2131 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ICCollForeachNode(LOC((yyloc)),
                                 static_cast<QName*>((yysemantic_stack_[(13) - (4)].expr)),
                                 static_cast<QName*>((yysemantic_stack_[(13) - (7)].expr)),
                                 static_cast<QName*>((yysemantic_stack_[(13) - (11)].expr)),
                                 (yysemantic_stack_[(13) - (13)].expr));
    }
    break;

  case 163:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2141 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2142 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ICForeignKey( LOC((yyloc)),
                            static_cast<QName*>((yysemantic_stack_[(22) - (4)].expr)),
                            static_cast<QName*>((yysemantic_stack_[(22) - (9)].expr)),
                            static_cast<QName*>((yysemantic_stack_[(22) - (12)].expr)),
                            (yysemantic_stack_[(22) - (14)].expr),
                            static_cast<QName*>((yysemantic_stack_[(22) - (17)].expr)),
                            static_cast<QName*>((yysemantic_stack_[(22) - (20)].expr)),
                            (yysemantic_stack_[(22) - (22)].expr));
    }
    break;

  case 164:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2157 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2158 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if ((yysemantic_stack_[(1) - (1)].expr) == NULL)
      {
        error((yylocation_stack_[(1) - (1)]), "syntax error, unexpected end of file, the query body should not be empty");
        YYERROR;
      }

      if (dynamic_cast<BlockBody*>((yysemantic_stack_[(1) - (1)].expr)) != NULL)
      {
        BlockBody* blk = static_cast<BlockBody*>((yysemantic_stack_[(1) - (1)].expr));
        blk->setTopLevel(true);
      }

      (yyval.expr) = new QueryBody(LOC((yyloc)), (yysemantic_stack_[(1) - (1)].expr));
    }
    break;

  case 165:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2177 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2178 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 166:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2181 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2182 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 167:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2185 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2186 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) =  NULL;
    }
    break;

  case 168:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2193 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2194 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 169:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2197 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2198 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 170:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2201 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2202 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) =  new BlockBody(LOC((yyloc)));
    }
    break;

  case 171:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2209 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2210 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 172:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2214 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2215 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      BlockBody* blk = static_cast<BlockBody*>((yysemantic_stack_[(2) - (1)].expr));

      blk->add((yysemantic_stack_[(2) - (2)].expr));

      (yyval.expr) = blk;
    }
    break;

  case 173:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2226 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2227 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      BlockBody* blk = new BlockBody(LOC((yyloc)));
      blk->add((yysemantic_stack_[(1) - (1)].expr));
      (yyval.expr) = blk;
    }
    break;

  case 174:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2233 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2234 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      BlockBody* blk = static_cast<BlockBody*>((yysemantic_stack_[(2) - (1)].expr));

      blk->add((yysemantic_stack_[(2) - (2)].expr));

      (yyval.expr) = blk;
    }
    break;

  case 175:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2243 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2244 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(4) - (1)].expr); // to prevent the Bison warning
      (yyval.expr) = (yysemantic_stack_[(4) - (2)].expr); // to prevent the Bison warning
      (yyval.expr) = (yysemantic_stack_[(4) - (4)].expr); // to prevent the Bison warning
      error((yylocation_stack_[(4) - (3)]), "syntax error, unexpected statement (missing semicolon \";\" between statements?)");
      delete (yysemantic_stack_[(4) - (1)].expr); // these need to be deleted here because the parser deallocator will skip them
      delete (yysemantic_stack_[(4) - (2)].expr);
      delete (yysemantic_stack_[(4) - (4)].expr);
      YYERROR;
    }
    break;

<<<<<<< TREE
=======
  case 188:

/* Line 690 of lalr1.cc  */
#line 2276 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(3) - (2)].expr);
    }
    break;

>>>>>>> MERGE-SOURCE
  case 189:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2276 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2281 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(3) - (2)].expr);
    }
    break;

  case 190:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2284 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2289 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if (dynamic_cast<BlockBody*>((yysemantic_stack_[(3) - (2)].expr)) == NULL)
      {
        BlockBody* blk = new BlockBody(LOC((yyloc)));
        blk->add((yysemantic_stack_[(3) - (2)].expr));
        (yyval.expr) = blk;
      }
      else
      {
        (yyval.expr) = (yysemantic_stack_[(3) - (2)].expr);
      }
    }
    break;

  case 191:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2301 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2306 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(3) - (2)].expr);
    }
    break;

  case 192:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2309 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2314 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(2) - (1)].expr);
    }
    break;

  case 193:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2317 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2322 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      VarDeclStmt* vdecl = static_cast<VarDeclStmt*>((yysemantic_stack_[(3) - (1)].expr));
      vdecl->add((yysemantic_stack_[(3) - (3)].node));
      (yyval.expr) = vdecl;
    }
    break;

  case 194:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2324 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2329 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      VarDeclStmt* vdecl = new VarDeclStmt(LOC((yyloc)), NULL);
      vdecl->add((yysemantic_stack_[(2) - (2)].node));
      (yyval.expr) = vdecl;
    }
    break;

  case 195:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2331 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2336 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      VarDeclStmt* vdecl = new VarDeclStmt(LOC((yyloc)),
                                           static_cast<AnnotationListParsenode*>((yysemantic_stack_[(3) - (1)].node)));
      vdecl->add((yysemantic_stack_[(3) - (3)].node));
      (yyval.expr) = vdecl;
    }
    break;

  case 196:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2342 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2347 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      LocalVarDecl* vd = new LocalVarDecl(LOC((yyloc)),
                                          static_cast<QName*>((yysemantic_stack_[(2) - (2)].expr)),
                                          NULL,  // no type
                                          NULL,  // no init expr
                                          NULL); // no annotations
      (yyval.node) = vd;
    }
    break;

  case 197:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2351 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2356 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      LocalVarDecl* vd = new LocalVarDecl(LOC((yyloc)),
                                          static_cast<QName*>((yysemantic_stack_[(3) - (2)].expr)),
                                          dynamic_cast<SequenceType*>((yysemantic_stack_[(3) - (3)].node)), // type
                                          NULL,  // no init expr
                                          NULL); // no annotations
      (yyval.node) = vd;
    }
    break;

  case 198:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2360 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2365 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      LocalVarDecl* vd = new LocalVarDecl(LOC((yyloc)),
                                          static_cast<QName*>((yysemantic_stack_[(4) - (2)].expr)),
                                          NULL,  // no type
                                          (yysemantic_stack_[(4) - (4)].expr),    // init expr
                                          NULL); // no annotations
      (yyval.node) = vd;
    }
    break;

  case 199:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2369 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2374 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      LocalVarDecl* vd = new LocalVarDecl(LOC((yyloc)),
                                          static_cast<QName*>((yysemantic_stack_[(5) - (2)].expr)),
                                          dynamic_cast<SequenceType*>((yysemantic_stack_[(5) - (3)].node)), // type
                                          (yysemantic_stack_[(5) - (5)].expr),    // init expr
                                          NULL); // no annotations
      (yyval.node) = vd;
    }
    break;

  case 200:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2382 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2387 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new AssignExpr(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(5) - (2)].expr)), (yysemantic_stack_[(5) - (4)].expr));
    }
    break;

  case 201:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2390 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2395 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new ApplyExpr(LOC((yyloc)), (yysemantic_stack_[(2) - (1)].expr));
    }
    break;

  case 202:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2398 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2403 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new ExitExpr(LOC((yyloc)), (yysemantic_stack_[(4) - (3)].expr));
    }
    break;

  case 203:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2406 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2411 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      BlockBody* bb = dynamic_cast<BlockBody *>((yysemantic_stack_[(5) - (5)].expr));
      if (bb == NULL)
      {
        bb = new BlockBody((yysemantic_stack_[(5) - (5)].expr)->get_location());
        bb->add((yysemantic_stack_[(5) - (5)].expr));
      }

      (yyval.expr) = new WhileExpr(LOC((yyloc)), (yysemantic_stack_[(5) - (3)].expr), bb);
    }
    break;

  case 204:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2421 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2426 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new FlowCtlStatement(LOC((yyloc)), FlowCtlStatement::BREAK);
    }
    break;

  case 205:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2426 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2431 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new FlowCtlStatement( LOC((yyloc)), FlowCtlStatement::CONTINUE );
    }
    break;

  case 206:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2434 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2439 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ReturnExpr* re = dynamic_cast<ReturnExpr*>((yysemantic_stack_[(2) - (2)].expr));
      (yyval.expr) = new FLWORExpr(LOC((yyloc)),
                         dynamic_cast<FLWORClauseList*>((yysemantic_stack_[(2) - (1)].node)),
                         re->get_return_val(),
                         re->get_location(),
                         driver.theCompilerCB->theConfig.force_gflwor);
      delete (yysemantic_stack_[(2) - (2)].expr);
    }
    break;

  case 207:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2448 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2453 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      exprnode* retExpr = (yysemantic_stack_[(2) - (2)].expr);

      if (dynamic_cast<VarDeclStmt*>(retExpr) != NULL)
      {
        BlockBody* blk = new BlockBody(LOC((yyloc)));
        blk->add(retExpr);
        retExpr = blk;
      }

      (yyval.expr) = new ReturnExpr(LOC((yyloc)), retExpr);
    }
    break;

  case 208:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2465 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2470 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      exprnode* thenExpr = (yysemantic_stack_[(8) - (6)].expr);
      exprnode* elseExpr = (yysemantic_stack_[(8) - (8)].expr);

      if (dynamic_cast<VarDeclStmt*>(thenExpr) != NULL)
      {
        BlockBody* blk = new BlockBody(LOC((yyloc)));
        blk->add(thenExpr);
        thenExpr = blk;
      }

      if (dynamic_cast<VarDeclStmt*>(elseExpr) != NULL)
      {
        BlockBody* blk = new BlockBody(LOC((yyloc)));
        blk->add(elseExpr);
        elseExpr = blk;
      }

      (yyval.expr) = new IfExpr(LOC((yyloc)), (yysemantic_stack_[(8) - (3)].expr), thenExpr, elseExpr);
    }
    break;

  case 209:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2490 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2495 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new TryExpr(LOC((yyloc)), (yysemantic_stack_[(3) - (2)].expr), (yysemantic_stack_[(3) - (3)].expr));
    }
    break;

  case 210:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2498 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2503 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CatchListExpr* cle = new CatchListExpr( LOC((yyloc)) );
      cle->push_back( static_cast<CatchExpr*>((yysemantic_stack_[(1) - (1)].expr)) );
      (yyval.expr) = cle;
    }
    break;

  case 211:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2505 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2510 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CatchListExpr *cle = dynamic_cast<CatchListExpr*>((yysemantic_stack_[(2) - (1)].expr));
      if ( cle )
        cle->push_back( static_cast<CatchExpr*>((yysemantic_stack_[(2) - (2)].expr)) );
      (yyval.expr) = (yysemantic_stack_[(2) - (1)].expr);
    }
    break;

  case 212:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2516 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2521 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new CatchExpr(LOC((yyloc)), *(yysemantic_stack_[(3) - (2)].name_test_list), (yysemantic_stack_[(3) - (3)].expr));
       delete (yysemantic_stack_[(3) - (2)].name_test_list);
    }
    break;

  case 213:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2525 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2531 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new BlockBody(LOC((yyloc)));
    }
    break;

  case 214:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2532 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 215:

/* Line 690 of lalr1.cc  */
#line 2537 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2536 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      Expr* expr = dynamic_cast<Expr*>((yysemantic_stack_[(3) - (1)].expr));
      if ( !expr )
      {
        expr = new Expr( LOC((yyloc)) );
        expr->push_back( (yysemantic_stack_[(3) - (1)].expr) );
      }
      expr->push_back( (yysemantic_stack_[(3) - (3)].expr) );
      (yyval.expr) = expr;
    }
    break;

  case 216:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2550 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2549 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(3) - (1)].expr); // to prevent the Bison warning
      (yyval.expr) = (yysemantic_stack_[(3) - (3)].expr); // to prevent the Bison warning
      // Heuristics to improve the error message: if the $1 Expr is a QName (which in turn gets
      // promoted to a PathExpr), chances are that it's not a missing comma, so don't modify
      // the error message.
      if (dynamic_cast<PathExpr*>((yysemantic_stack_[(3) - (1)].expr)) == NULL)
        error((yylocation_stack_[(3) - (2)]), "syntax error, unexpected expression (missing comma \",\" between expressions?)");
      delete (yysemantic_stack_[(3) - (1)].expr); // these need to be deleted here because the parser deallocator will skip them
      delete (yysemantic_stack_[(3) - (3)].expr);
      YYERROR;
    }
    break;

  case 235:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2597 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2596 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ReturnExpr *re = dynamic_cast<ReturnExpr*>((yysemantic_stack_[(2) - (2)].expr));
      (yyval.expr) = new FLWORExpr(LOC((yyloc)),
                         dynamic_cast<FLWORClauseList*>((yysemantic_stack_[(2) - (1)].node)),
                         re->get_return_val(),
                         re->get_location(),
                         driver.theCompilerCB->theConfig.force_gflwor);
      delete (yysemantic_stack_[(2) - (2)].expr);
    }
    break;

  case 236:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2611 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2610 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new ReturnExpr( LOC((yyloc)), (yysemantic_stack_[(2) - (2)].expr) );
    }
    break;

  case 237:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2619 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2618 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.strval) = parser::the_sliding;
    }
    break;

  case 238:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2624 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2623 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.strval) = parser::the_tumbling;
    }
    break;

  case 239:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2632 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2631 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.strval) = parser::the_start;
    }
    break;

  case 240:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2637 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2636 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.strval) = parser::the_end;
    }
    break;

  case 241:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2642 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2641 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
    (yyval.strval) = parser::the_only_end;
  }
    break;

  case 242:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2650 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2649 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FLWORWinCond(LOC((yyloc)),
                            dynamic_cast<WindowVars*>((yysemantic_stack_[(4) - (2)].node)),
                            (yysemantic_stack_[(4) - (4)].expr),
                            (yysemantic_stack_[(4) - (1)].strval) == parser::the_start,
                            (yysemantic_stack_[(4) - (1)].strval) == parser::the_only_end);
    }
    break;

  case 243:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2659 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2658 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FLWORWinCond(LOC((yyloc)),
                            NULL,
                            (yysemantic_stack_[(3) - (3)].expr),
                            (yysemantic_stack_[(3) - (1)].strval) == parser::the_start,
                            (yysemantic_stack_[(3) - (1)].strval) == parser::the_only_end);
    }
    break;

  case 244:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2671 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2670 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowClause (LOC ((yyloc)),
                             ((yysemantic_stack_[(5) - (2)].strval) == parser::the_tumbling ?
                              WindowClause::tumbling_window :
                              WindowClause::sliding_window),
                             dynamic_cast<WindowVarDecl *> ((yysemantic_stack_[(5) - (3)].node)),
                             dynamic_cast<FLWORWinCond *> ((yysemantic_stack_[(5) - (4)].node)),
                             dynamic_cast<FLWORWinCond *> ((yysemantic_stack_[(5) - (5)].node)));
    }
    break;

  case 245:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2681 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2680 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowClause (LOC ((yyloc)),
                             ((yysemantic_stack_[(4) - (2)].strval) == parser::the_tumbling ?
                              WindowClause::tumbling_window :
                              WindowClause::sliding_window),
                             dynamic_cast<WindowVarDecl *> ((yysemantic_stack_[(4) - (3)].node)),
                             dynamic_cast<FLWORWinCond *> ((yysemantic_stack_[(4) - (4)].node)), NULL);
    }
    break;

  case 246:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2694 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2693 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CountClause(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (3)].expr)));
    }
    break;

  case 255:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2718 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2717 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      FLWORClauseList *fcl = new FLWORClauseList( LOC((yyloc)) );
      fcl->push_back( dynamic_cast<FLWORClause*>((yysemantic_stack_[(1) - (1)].node)) );
      (yyval.node) = fcl;
    }
    break;

  case 256:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2725 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2724 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      FLWORClauseList *fcl = dynamic_cast<FLWORClauseList*>((yysemantic_stack_[(2) - (1)].node));
      fcl->push_back( dynamic_cast<FLWORClause*>((yysemantic_stack_[(2) - (2)].node)) );
      (yyval.node) = fcl;
    }
    break;

  case 257:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2735 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2734 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new ForClause(LOC((yyloc)), dynamic_cast<VarInDeclList*>((yysemantic_stack_[(3) - (3)].node)));
    }
    break;

  case 258:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2741 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2740 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(3) - (3)].node); // to prevent the Bison warning
      error((yylocation_stack_[(3) - (2)]), "syntax error, unexpected qualified name \""
          + static_cast<VarInDeclList*>((yysemantic_stack_[(3) - (3)].node))->operator[](0)->get_var_name()->get_qname().str() + "\" (missing \"$\" sign?)");
      delete (yysemantic_stack_[(3) - (3)].node);
      YYERROR;
    }
    break;

  case 259:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2750 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2749 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = NULL; // to prevent the Bison warning
      error((yylocation_stack_[(2) - (2)]), ""); // the error message is already set in the driver's parseError member
      YYERROR;
    }
    break;

  case 261:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2760 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2759 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      // this adds on shift-reduce conflict (probably with FTRange expression)
    }
    break;

  case 262:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2768 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2767 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      VarInDeclList* vdl = new VarInDeclList( LOC((yyloc)) );
      vdl->push_back( dynamic_cast<VarInDecl*>((yysemantic_stack_[(1) - (1)].node)) );
      (yyval.node) = vdl;
    }
    break;

  case 263:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2775 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2774 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if ( VarInDeclList* vdl = dynamic_cast<VarInDeclList*>((yysemantic_stack_[(4) - (1)].node)) )
        vdl->push_back( dynamic_cast<VarInDecl*>((yysemantic_stack_[(4) - (4)].node)) );
      (yyval.node) = (yysemantic_stack_[(4) - (1)].node);
    }
    break;

  case 264:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2783 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2782 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node); // to prevent the Bison warning
      error((yylocation_stack_[(3) - (3)]), "syntax error, unexpected QName \""
          + static_cast<VarInDecl*>((yysemantic_stack_[(3) - (3)].node))->get_var_name()->get_qname().str() + "\" (missing \"$\" sign?)");
      delete (yysemantic_stack_[(3) - (1)].node);
      YYERROR;
    }
    break;

  case 265:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2795 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2794 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(3) - (1)].expr)),
                         NULL,
                         NULL,
                         NULL,
                         (yysemantic_stack_[(3) - (3)].expr),
                         false);
    }
    break;

<<<<<<< TREE
=======
  case 265:

/* Line 690 of lalr1.cc  */
#line 2804 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (1)].expr)),
                         NULL,
                         NULL,
                         NULL,
                         (yysemantic_stack_[(5) - (5)].expr),
                         true);
    }
    break;

>>>>>>> MERGE-SOURCE
  case 266:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2805 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (1)].expr)),
                         NULL,
                         NULL,
                         NULL,
                         (yysemantic_stack_[(5) - (5)].expr),
                         true);
    }
    break;

  case 267:

/* Line 690 of lalr1.cc  */
#line 2815 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2814 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(4) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(4) - (2)].node)),
                         NULL,
                         NULL,
                         (yysemantic_stack_[(4) - (4)].expr),
                         false);
    }
    break;

<<<<<<< TREE
=======
  case 267:

/* Line 690 of lalr1.cc  */
#line 2824 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(6) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(6) - (2)].node)),
                         NULL,
                         NULL,
                         (yysemantic_stack_[(6) - (6)].expr),
                         true);
    }
    break;

>>>>>>> MERGE-SOURCE
  case 268:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2825 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(6) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(6) - (2)].node)),
                         NULL,
                         NULL,
                         (yysemantic_stack_[(6) - (6)].expr),
                         true);
    }
    break;

  case 269:

/* Line 690 of lalr1.cc  */
#line 2835 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2834 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(4) - (1)].expr)),
                         NULL,
                         dynamic_cast<PositionalVar*>((yysemantic_stack_[(4) - (2)].node)),
                         NULL,
                         (yysemantic_stack_[(4) - (4)].expr),
                         false);
    }
    break;

  case 270:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2845 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2844 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(6) - (1)].expr)),
                         NULL,
                         dynamic_cast<PositionalVar*>((yysemantic_stack_[(6) - (4)].node)),
                         NULL,
                         (yysemantic_stack_[(6) - (6)].expr),
                         true);
    }
    break;

  case 271:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2855 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2854 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(5) - (2)].node)),
                         dynamic_cast<PositionalVar*>((yysemantic_stack_[(5) - (3)].node)),
                         NULL,
                         (yysemantic_stack_[(5) - (5)].expr),
                         false);
    }
    break;

  case 272:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2865 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2864 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(7) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(7) - (2)].node)),
                         dynamic_cast<PositionalVar*>((yysemantic_stack_[(7) - (5)].node)),
                         NULL,
                         (yysemantic_stack_[(7) - (7)].expr),
                         true);
    }
    break;

  case 273:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2876 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2875 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(4) - (1)].expr)),
                         NULL,NULL,
                         dynamic_cast<FTScoreVar*>((yysemantic_stack_[(4) - (2)].node)),
                         (yysemantic_stack_[(4) - (4)].expr),
                         false);
    }
    break;

<<<<<<< TREE
=======
  case 273:

/* Line 690 of lalr1.cc  */
#line 2884 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(5) - (2)].node)),
                         NULL,
                         dynamic_cast<FTScoreVar*>((yysemantic_stack_[(5) - (3)].node)),
                         (yysemantic_stack_[(5) - (5)].expr),
                         false);
    }
    break;

>>>>>>> MERGE-SOURCE
  case 274:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2885 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new VarInDecl(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(5) - (2)].node)),
                         NULL,
                         dynamic_cast<FTScoreVar*>((yysemantic_stack_[(5) - (3)].node)),
                         (yysemantic_stack_[(5) - (5)].expr),
                         false);
    }
    break;

  case 275:

/* Line 690 of lalr1.cc  */
#line 2895 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2894 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC ((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (1)].expr)),
                         NULL,
                         dynamic_cast<PositionalVar*>((yysemantic_stack_[(5) - (2)].node)),
                         dynamic_cast<FTScoreVar*>((yysemantic_stack_[(5) - (3)].node)),
                         (yysemantic_stack_[(5) - (5)].expr),
                         false);
    }
    break;

  case 276:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2905 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2904 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarInDecl(LOC ((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(6) - (1)].expr)),
                         dynamic_cast<SequenceType *>((yysemantic_stack_[(6) - (2)].node)),
                         dynamic_cast<PositionalVar*>((yysemantic_stack_[(6) - (3)].node)),
                         dynamic_cast<FTScoreVar*>((yysemantic_stack_[(6) - (4)].node)),
                         (yysemantic_stack_[(6) - (6)].expr),
                         false);
    }
    break;

  case 277:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2921 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2920 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new PositionalVar(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (3)].expr)));
    }
    break;

  case 278:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2929 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new FTScoreVar(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (3)].expr)));
    }
    break;

  case 279:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2939 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2938 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new LetClause( LOC((yyloc)), dynamic_cast<VarGetsDeclList*>((yysemantic_stack_[(2) - (2)].node)) );
        }
    break;

  case 280:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2947 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2946 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            VarGetsDeclList *vgdl = new VarGetsDeclList( LOC((yyloc)) );
            vgdl->push_back( dynamic_cast<VarGetsDecl*>((yysemantic_stack_[(1) - (1)].node)) );
            (yyval.node) = vgdl;
        }
    break;

  case 281:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2953 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2952 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            if( VarGetsDeclList *vgdl = dynamic_cast<VarGetsDeclList*>((yysemantic_stack_[(3) - (1)].node)) )
                vgdl->push_back( dynamic_cast<VarGetsDecl*>((yysemantic_stack_[(3) - (3)].node)) );
            (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
        }
    break;

  case 282:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2965 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2964 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarGetsDecl(LOC ((yyloc)),
                           static_cast<QName*>((yysemantic_stack_[(4) - (2)].expr)),
                           NULL,
                           NULL,
                           (yysemantic_stack_[(4) - (4)].expr));
    }
    break;

  case 283:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2973 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2972 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarGetsDecl(LOC ((yyloc)),
                           static_cast<QName*>((yysemantic_stack_[(5) - (2)].expr)),
                           dynamic_cast<SequenceType *>((yysemantic_stack_[(5) - (3)].node)),
                           NULL,
                           (yysemantic_stack_[(5) - (5)].expr));
    }
    break;

  case 284:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2983 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2982 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarGetsDecl(LOC ((yyloc)),
                           dynamic_cast<FTScoreVar*>((yysemantic_stack_[(3) - (1)].node))->get_var_name(),
                           NULL,
                           dynamic_cast<FTScoreVar*>((yysemantic_stack_[(3) - (1)].node)),
                           (yysemantic_stack_[(3) - (3)].expr));
     }
    break;

  case 285:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 2991 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 2990 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new VarGetsDecl(LOC ((yyloc)),
                           static_cast<QName*>((yysemantic_stack_[(6) - (2)].expr)),
                           dynamic_cast<SequenceType *>((yysemantic_stack_[(6) - (3)].node)),
                           dynamic_cast<FTScoreVar*>((yysemantic_stack_[(6) - (4)].node)),
                           (yysemantic_stack_[(6) - (6)].expr));
    }
    break;

  case 286:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3003 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3002 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowVarDecl(LOC ((yyloc)),
                             static_cast<QName*>((yysemantic_stack_[(4) - (2)].expr)),
                             NULL, (yysemantic_stack_[(4) - (4)].expr));
    }
    break;

  case 287:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3009 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3008 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowVarDecl(LOC ((yyloc)),
                             static_cast<QName*>((yysemantic_stack_[(5) - (2)].expr)),
                             dynamic_cast<SequenceType *>((yysemantic_stack_[(5) - (3)].node)),
                             (yysemantic_stack_[(5) - (5)].expr));
    }
    break;

  case 289:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3022 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3021 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowVars(LOC((yyloc)), NULL, static_cast<QName*>((yysemantic_stack_[(2) - (2)].expr)), NULL, NULL);
    }
    break;

  case 290:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3026 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3025 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(3) - (3)].node);
      dynamic_cast<WindowVars *>((yyval.node))->set_curr(static_cast<QName*>((yysemantic_stack_[(3) - (2)].expr)));
    }
    break;

  case 291:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3034 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3033 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowVars(LOC((yyloc)), dynamic_cast<PositionalVar*>((yysemantic_stack_[(1) - (1)].node)), NULL, NULL, NULL);
    }
    break;

  case 292:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3038 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3037 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
      dynamic_cast<WindowVars *>((yyval.node))->set_posvar(dynamic_cast<PositionalVar*>((yysemantic_stack_[(2) - (1)].node)));
    }
    break;

  case 294:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3047 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3046 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowVars(LOC((yyloc)), NULL, NULL, static_cast<QName*>((yysemantic_stack_[(6) - (3)].expr)), static_cast<QName*>((yysemantic_stack_[(6) - (6)].expr)));
    }
    break;

  case 295:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3051 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3050 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowVars(LOC((yyloc)), NULL, NULL, NULL, static_cast<QName*>((yysemantic_stack_[(3) - (3)].expr)));
    }
    break;

  case 296:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3055 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3054 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WindowVars(LOC((yyloc)), NULL, NULL, static_cast<QName*>((yysemantic_stack_[(3) - (3)].expr)), NULL);
    }
    break;

  case 297:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3065 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3064 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new WhereClause(LOC ((yyloc)), (yysemantic_stack_[(2) - (2)].expr));
    }
    break;

  case 298:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3073 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3072 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupByClause(LOC((yyloc)), dynamic_cast<GroupSpecList*>((yysemantic_stack_[(3) - (3)].node)));
    }
    break;

  case 299:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3080 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3079 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      GroupSpecList* gsl = new GroupSpecList(LOC((yyloc)));
      gsl->push_back(static_cast<GroupSpec*>((yysemantic_stack_[(1) - (1)].node)));
      (yyval.node) = gsl;
    }
    break;

  case 300:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3086 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3085 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      GroupSpecList* gsl = static_cast<GroupSpecList*>((yysemantic_stack_[(3) - (1)].node));
      gsl->push_back(static_cast<GroupSpec*>((yysemantic_stack_[(3) - (3)].node)));
      (yyval.node) = gsl;
    }
    break;

  case 301:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3096 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3095 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupSpec(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(2) - (2)].expr)), NULL, NULL, NULL);
    }
    break;

  case 302:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3100 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3099 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupSpec(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (2)].expr)), NULL, (yysemantic_stack_[(4) - (4)].expr), NULL);
    }
    break;

  case 303:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3104 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3103 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupSpec(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (2)].expr)),
                         static_cast<SequenceType*>((yysemantic_stack_[(5) - (3)].node)),
                         (yysemantic_stack_[(5) - (5)].expr),
                         NULL);
    }
    break;

  case 304:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3112 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3111 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupSpec(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(6) - (2)].expr)),
                         static_cast<SequenceType*>((yysemantic_stack_[(6) - (3)].node)),
                         (yysemantic_stack_[(6) - (5)].expr),
                         static_cast<GroupCollationSpec*>((yysemantic_stack_[(6) - (6)].node)));
    }
    break;

  case 305:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3120 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3119 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupSpec(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(5) - (2)].expr)),
                         NULL,
                         (yysemantic_stack_[(5) - (4)].expr),
                         static_cast<GroupCollationSpec*>((yysemantic_stack_[(5) - (5)].node)));
    }
    break;

  case 306:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3128 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3127 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupSpec(LOC((yyloc)),
                         static_cast<QName*>((yysemantic_stack_[(3) - (2)].expr)),
                         NULL,
                         NULL,
                         static_cast<GroupCollationSpec*>((yysemantic_stack_[(3) - (3)].node)));
    }
    break;

  case 307:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3140 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3139 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GroupCollationSpec( LOC((yyloc)), SYMTAB((yysemantic_stack_[(2) - (2)].sval)) );
    }
    break;

  case 308:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3148 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3147 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderByClause(
                LOC((yyloc)), dynamic_cast<OrderSpecList*>((yysemantic_stack_[(3) - (3)].node))
            );
        }
    break;

  case 309:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3154 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3153 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderByClause(
                LOC((yyloc)), dynamic_cast<OrderSpecList*>((yysemantic_stack_[(4) - (4)].node)), true
            );
        }
    break;

  case 310:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3164 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3163 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            OrderSpecList *osl = new OrderSpecList( LOC((yyloc)) );
            osl->push_back( dynamic_cast<OrderSpec*>((yysemantic_stack_[(1) - (1)].node)) );
            (yyval.node) = osl;
        }
    break;

  case 311:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3170 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3169 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            if ( OrderSpecList* osl = dynamic_cast<OrderSpecList*>((yysemantic_stack_[(3) - (1)].node)) )
                osl->push_back( dynamic_cast<OrderSpec*>((yysemantic_stack_[(3) - (3)].node)) );
            (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
        }
    break;

  case 312:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3180 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3179 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderSpec( LOC((yyloc)), (yysemantic_stack_[(1) - (1)].expr), NULL );
        }
    break;

  case 313:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3184 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3183 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderSpec(
                LOC((yyloc)), (yysemantic_stack_[(2) - (1)].expr), dynamic_cast<OrderModifierPN*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

  case 314:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3194 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3193 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)), dynamic_cast<OrderDirSpec*>((yysemantic_stack_[(1) - (1)].node)), NULL, NULL
            );
        }
    break;

  case 315:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3200 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3199 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)), NULL, dynamic_cast<OrderEmptySpec*>((yysemantic_stack_[(1) - (1)].node)), NULL
            );
        }
    break;

  case 316:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3206 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3205 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)), NULL, NULL, dynamic_cast<OrderCollationSpec*>((yysemantic_stack_[(1) - (1)].node))
            );
        }
    break;

  case 317:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3212 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3211 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)),
                dynamic_cast<OrderDirSpec*>((yysemantic_stack_[(2) - (1)].node)),
                dynamic_cast<OrderEmptySpec*>((yysemantic_stack_[(2) - (2)].node)),
                NULL
            );
        }
    break;

<<<<<<< TREE
=======
  case 317:

/* Line 690 of lalr1.cc  */
#line 3220 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)),
                dynamic_cast<OrderDirSpec*>((yysemantic_stack_[(2) - (1)].node)),
                NULL,
                dynamic_cast<OrderCollationSpec*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 318:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3221 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)),
                dynamic_cast<OrderDirSpec*>((yysemantic_stack_[(2) - (1)].node)),
                NULL,
                dynamic_cast<OrderCollationSpec*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

  case 319:

/* Line 690 of lalr1.cc  */
#line 3230 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3229 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)),
                NULL,
                dynamic_cast<OrderEmptySpec*>((yysemantic_stack_[(2) - (1)].node)),
                dynamic_cast<OrderCollationSpec*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

  case 320:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3239 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3238 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderModifierPN(
                LOC((yyloc)),
                dynamic_cast<OrderDirSpec*>((yysemantic_stack_[(3) - (1)].node)),
                dynamic_cast<OrderEmptySpec*>((yysemantic_stack_[(3) - (2)].node)),
                dynamic_cast<OrderCollationSpec*>((yysemantic_stack_[(3) - (3)].node))
            );
        }
    break;

  case 321:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3252 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3251 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderDirSpec( LOC((yyloc)), ParseConstants::dir_ascending );
        }
    break;

  case 322:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3256 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3255 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderDirSpec( LOC((yyloc)), ParseConstants::dir_descending );
        }
    break;

  case 323:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3264 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3263 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderEmptySpec(
                LOC((yyloc)), StaticContextConsts::empty_greatest
            );
        }
    break;

  case 324:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3270 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3269 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderEmptySpec(
                LOC((yyloc)), StaticContextConsts::empty_least
            );
        }
    break;

  case 325:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3280 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3279 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OrderCollationSpec( LOC((yyloc)), SYMTAB((yysemantic_stack_[(2) - (2)].sval)) );
        }
    break;

  case 326:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3288 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3287 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new QuantifiedExpr(
                LOC((yyloc)),
                ParseConstants::quant_some,
                dynamic_cast<QVarInDeclList*>((yysemantic_stack_[(5) - (3)].node)),
                (yysemantic_stack_[(5) - (5)].expr)
            );
        }
    break;

  case 327:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3297 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3296 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new QuantifiedExpr(
                LOC((yyloc)),
                ParseConstants::quant_every,
                dynamic_cast<QVarInDeclList*>((yysemantic_stack_[(5) - (3)].node)),
                (yysemantic_stack_[(5) - (5)].expr)
            );
        }
    break;

  case 328:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3310 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3309 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      QVarInDeclList *qvidl = new QVarInDeclList( LOC((yyloc)) );
      qvidl->push_back( dynamic_cast<QVarInDecl*>((yysemantic_stack_[(1) - (1)].node)) );
      (yyval.node) = qvidl;

    }
    break;

  case 329:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3317 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3316 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      QVarInDeclList *qvidl = dynamic_cast<QVarInDeclList*>((yysemantic_stack_[(4) - (1)].node));
      qvidl->push_back( dynamic_cast<QVarInDecl*>((yysemantic_stack_[(4) - (4)].node)) );
      (yyval.node) = (yysemantic_stack_[(4) - (1)].node);
    }
    break;

  case 330:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3329 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3328 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new QVarInDecl(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (1)].expr)), (yysemantic_stack_[(3) - (3)].expr));
    }
    break;

  case 331:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3333 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3332 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new QVarInDecl(LOC((yyloc)),
                          static_cast<QName*>((yysemantic_stack_[(4) - (1)].expr)),
                          dynamic_cast<SequenceType *>((yysemantic_stack_[(4) - (2)].node)),
                          (yysemantic_stack_[(4) - (4)].expr));
    }
    break;

<<<<<<< TREE
=======
  case 331:

/* Line 690 of lalr1.cc  */
#line 3344 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = new SwitchExpr(LOC((yyloc)), (yysemantic_stack_[(8) - (3)].expr), static_cast<SwitchCaseClauseList*>((yysemantic_stack_[(8) - (5)].node)), (yysemantic_stack_[(8) - (8)].expr));
    }
    break;

>>>>>>> MERGE-SOURCE
  case 332:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3345 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3351 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new SwitchExpr(LOC((yyloc)), (yysemantic_stack_[(8) - (3)].expr), static_cast<SwitchCaseClauseList*>((yysemantic_stack_[(8) - (5)].node)), (yysemantic_stack_[(8) - (8)].expr));
    }
    break;

  case 333:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3352 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3357 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SwitchCaseClauseList* scc_list_p = new SwitchCaseClauseList(LOC((yyloc)));
      scc_list_p->push_back(static_cast<SwitchCaseClause*>((yysemantic_stack_[(1) - (1)].node)));
      (yyval.node) = scc_list_p;
    }
    break;

  case 334:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3358 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3366 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SwitchCaseClauseList* scc_list_p = static_cast<SwitchCaseClauseList*>((yysemantic_stack_[(2) - (1)].node));
      scc_list_p->push_back(static_cast<SwitchCaseClause*>((yysemantic_stack_[(2) - (2)].node)));
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

  case 335:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3367 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new SwitchCaseClause(LOC((yyloc)), dynamic_cast<SwitchCaseOperandList*>((yysemantic_stack_[(3) - (1)].node)), (yysemantic_stack_[(3) - (3)].expr));
    }
    break;

  case 336:

/* Line 690 of lalr1.cc  */
#line 3374 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3373 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SwitchCaseOperandList* sco_list_p = new SwitchCaseOperandList(LOC((yyloc)));
      sco_list_p->push_back((yysemantic_stack_[(2) - (2)].expr));
      (yyval.node) = sco_list_p;
    }
    break;

  case 337:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3380 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3379 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SwitchCaseOperandList* sco_list_p = static_cast<SwitchCaseOperandList*>((yysemantic_stack_[(3) - (1)].node));
      sco_list_p->push_back((yysemantic_stack_[(3) - (3)].expr));
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

<<<<<<< TREE
=======
  case 337:

/* Line 690 of lalr1.cc  */
#line 3390 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = new SwitchExpr(LOC((yyloc)), (yysemantic_stack_[(8) - (3)].expr), static_cast<SwitchCaseClauseList*>((yysemantic_stack_[(8) - (5)].node)), (yysemantic_stack_[(8) - (8)].expr));
    }
    break;

>>>>>>> MERGE-SOURCE
  case 338:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3391 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3397 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new SwitchExpr(LOC((yyloc)), (yysemantic_stack_[(8) - (3)].expr), static_cast<SwitchCaseClauseList*>((yysemantic_stack_[(8) - (5)].node)), (yysemantic_stack_[(8) - (8)].expr));
    }
    break;

  case 339:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3398 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3403 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SwitchCaseClauseList* scc_list_p = new SwitchCaseClauseList(LOC((yyloc)));
      scc_list_p->push_back(static_cast<SwitchCaseClause*>((yysemantic_stack_[(1) - (1)].node)));
      (yyval.node) = scc_list_p;
    }
    break;

  case 340:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3404 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3412 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SwitchCaseClauseList* scc_list_p = static_cast<SwitchCaseClauseList*>((yysemantic_stack_[(2) - (1)].node));
      scc_list_p->push_back(static_cast<SwitchCaseClause*>((yysemantic_stack_[(2) - (2)].node)));
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

  case 341:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3413 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3421 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SwitchCaseClause(LOC((yyloc)), dynamic_cast<SwitchCaseOperandList*>((yysemantic_stack_[(3) - (1)].node)), (yysemantic_stack_[(3) - (3)].expr));
    }
    break;

  case 342:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3422 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3428 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new TypeswitchExpr(LOC((yyloc)),
                              (yysemantic_stack_[(8) - (3)].expr),
                              static_cast<CaseClauseList*>((yysemantic_stack_[(8) - (5)].node)),
                              (yysemantic_stack_[(8) - (8)].expr));
    }
    break;

  case 343:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3429 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3439 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new TypeswitchExpr(LOC ((yyloc)),
                              (yysemantic_stack_[(10) - (3)].expr),
                              static_cast<CaseClauseList*>((yysemantic_stack_[(10) - (5)].node)),
                              static_cast<QName*>((yysemantic_stack_[(10) - (8)].expr)),
                              (yysemantic_stack_[(10) - (10)].expr));
    }
    break;

  case 344:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3440 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3446 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new TypeswitchExpr(LOC((yyloc)),
                              (yysemantic_stack_[(8) - (3)].expr),
                              static_cast<CaseClauseList*>((yysemantic_stack_[(8) - (5)].node)),
                              (yysemantic_stack_[(8) - (8)].expr));
    }
    break;

  case 345:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3447 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3458 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new TypeswitchExpr(LOC ((yyloc)),
                              (yysemantic_stack_[(10) - (3)].expr),
                              static_cast<CaseClauseList*>((yysemantic_stack_[(10) - (5)].node)),
                              static_cast<QName*>((yysemantic_stack_[(10) - (8)].expr)),
                              (yysemantic_stack_[(10) - (10)].expr));
    }
    break;

  case 346:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3459 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      CaseClauseList* cc_list_p = new CaseClauseList(LOC ((yyloc)));
      cc_list_p->push_back(static_cast<CaseClause*>((yysemantic_stack_[(1) - (1)].node)));
      (yyval.node) = cc_list_p;
    }
    break;

  case 347:

/* Line 690 of lalr1.cc  */
#line 3465 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3464 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CaseClauseList* cc_list_p = dynamic_cast<CaseClauseList*>((yysemantic_stack_[(2) - (1)].node));
      cc_list_p->push_back(static_cast<CaseClause*>((yysemantic_stack_[(2) - (2)].node)));
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
=======
  case 347:

/* Line 690 of lalr1.cc  */
#line 3476 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new CaseClause(LOC ((yyloc)),
                          static_cast<SequenceTypeList*>((yysemantic_stack_[(4) - (2)].node)),
                          (yysemantic_stack_[(4) - (4)].expr));
    }
    break;

>>>>>>> MERGE-SOURCE
  case 348:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3477 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3482 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CaseClause(LOC ((yyloc)),
                          static_cast<SequenceTypeList*>((yysemantic_stack_[(4) - (2)].node)),
                          (yysemantic_stack_[(4) - (4)].expr));
    }
    break;

  case 349:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3483 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3493 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CaseClause(LOC ((yyloc)),
                          static_cast<QName*>((yysemantic_stack_[(7) - (3)].expr)),
                          static_cast<SequenceTypeList*>((yysemantic_stack_[(7) - (5)].node)),
                          (yysemantic_stack_[(7) - (7)].expr));
     }
    break;

  case 350:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3494 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      CaseClauseList* cc_list_p = new CaseClauseList(LOC ((yyloc)));
      cc_list_p->push_back(static_cast<CaseClause*>((yysemantic_stack_[(1) - (1)].node)));
      (yyval.node) = cc_list_p;
    }
    break;

  case 351:

/* Line 690 of lalr1.cc  */
#line 3500 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3499 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CaseClauseList* cc_list_p = static_cast<CaseClauseList*>((yysemantic_stack_[(2) - (1)].node));
      cc_list_p->push_back(static_cast<CaseClause*>((yysemantic_stack_[(2) - (2)].node)));
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
=======
  case 351:

/* Line 690 of lalr1.cc  */
#line 3510 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new CaseClause(LOC ((yyloc)),
                          static_cast<SequenceTypeList*>((yysemantic_stack_[(4) - (2)].node)),
                          (yysemantic_stack_[(4) - (4)].expr));
    }
    break;

>>>>>>> MERGE-SOURCE
  case 352:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3511 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3516 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CaseClause(LOC ((yyloc)),
                          static_cast<SequenceTypeList*>((yysemantic_stack_[(4) - (2)].node)),
                          (yysemantic_stack_[(4) - (4)].expr));
    }
    break;

  case 353:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3517 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new CaseClause(LOC ((yyloc)),
                          static_cast<QName*>((yysemantic_stack_[(7) - (3)].expr)),
                          static_cast<SequenceTypeList*>((yysemantic_stack_[(7) - (5)].node)),
                          (yysemantic_stack_[(7) - (7)].expr));
     }
    break;

  case 354:

/* Line 690 of lalr1.cc  */
#line 3528 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3527 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SequenceTypeList* seqList = new SequenceTypeList(LOC((yyloc)));
      seqList->push_back(static_cast<SequenceType*>((yysemantic_stack_[(1) - (1)].node)));
      (yyval.node) = seqList;
    }
    break;

  case 355:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3534 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3533 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      SequenceTypeList* seqList = static_cast<SequenceTypeList*>((yysemantic_stack_[(3) - (1)].node));
      seqList->push_back(static_cast<SequenceType*>((yysemantic_stack_[(3) - (3)].node)));
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

  case 356:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3545 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3544 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new IfExpr(LOC ((yyloc)), (yysemantic_stack_[(8) - (3)].expr), (yysemantic_stack_[(8) - (6)].expr), (yysemantic_stack_[(8) - (8)].expr));
    }
    break;

<<<<<<< TREE
=======
  case 356:

/* Line 690 of lalr1.cc  */
#line 3553 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

>>>>>>> MERGE-SOURCE
  case 357:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3554 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 358:

/* Line 690 of lalr1.cc  */
#line 3558 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3557 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new OrExpr( LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr) );
    }
    break;

<<<<<<< TREE
=======
  case 358:

/* Line 690 of lalr1.cc  */
#line 3566 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 359:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3567 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 360:

/* Line 690 of lalr1.cc  */
#line 3571 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3570 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new AndExpr( LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

<<<<<<< TREE
=======
  case 360:

/* Line 690 of lalr1.cc  */
#line 3577 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 361:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3579 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3581 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = new ComparisonExpr(
              LOC((yyloc)),
              new ValueComp( LOC((yyloc)), ParseConstants::op_val_not ),
              (yysemantic_stack_[(2) - (2)].expr),
              NULL
          );
        }
    break;

  case 362:

/* Line 690 of lalr1.cc  */
#line 3594 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

<<<<<<< TREE
  case 362:
=======
  case 363:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3583 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3598 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            /*  ::=  "eq" | "ne" | "lt" | "le" | "gt" | "ge" */
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)),
                dynamic_cast<ValueComp*>((yysemantic_stack_[(3) - (2)].node)),
                (yysemantic_stack_[(3) - (1)].expr),
                (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 363:
=======
  case 364:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3593 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3608 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            /*  ::=  "is" | "<<" | ">>" */
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)), dynamic_cast<NodeComp*>((yysemantic_stack_[(3) - (2)].node)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 364:
=======
  case 365:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3600 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3615 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)),
                new GeneralComp( LOC((yyloc)), ParseConstants::op_eq ),
                (yysemantic_stack_[(3) - (1)].expr),
                (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 365:
=======
  case 366:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3609 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3624 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)),
                new GeneralComp( LOC((yyloc)), ParseConstants::op_ne ),
                (yysemantic_stack_[(3) - (1)].expr),
                (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 366:
=======
  case 367:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3618 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3633 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            /* this call is needed */
            driver.lexer->interpretAsLessThan();
        }
    break;

<<<<<<< TREE
  case 367:
=======
  case 368:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3623 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3638 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)),
                new GeneralComp( LOC((yyloc)), ParseConstants::op_lt ),
                (yysemantic_stack_[(4) - (1)].expr),
                (yysemantic_stack_[(4) - (4)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 368:
=======
  case 369:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3632 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3647 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)),
                new GeneralComp( LOC((yyloc)), ParseConstants::op_le ),
                (yysemantic_stack_[(3) - (1)].expr),
                (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 369:
=======
  case 370:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3641 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3656 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)),
                new GeneralComp( LOC((yyloc)), ParseConstants::op_gt ),
                (yysemantic_stack_[(3) - (1)].expr),
                (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 370:
=======
  case 371:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3650 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3665 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ComparisonExpr(
                LOC((yyloc)),
                new GeneralComp( LOC((yyloc)), ParseConstants::op_ge ),
                (yysemantic_stack_[(3) - (1)].expr),
                (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 371:
=======
  case 372:

/* Line 690 of lalr1.cc  */
#line 3678 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 373:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3663 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 372:

/* Line 690 of lalr1.cc  */
#line 3667 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3682 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new FTContainsExpr(
                LOC((yyloc)),
                (yysemantic_stack_[(5) - (1)].expr),
                dynamic_cast<FTSelection*>((yysemantic_stack_[(5) - (4)].node)),
                dynamic_cast<FTIgnoreOption*>((yysemantic_stack_[(5) - (5)].node))
            );
        }
    break;

<<<<<<< TREE
  case 373:
=======
  case 374:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3679 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3694 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

<<<<<<< TREE
  case 374:

/* Line 690 of lalr1.cc  */
#line 3683 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = new StringConcatExpr(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr));
        }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 375:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3690 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3698 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.node) = NULL;
=======
          (yyval.expr) = new StringConcatExpr(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr));
>>>>>>> MERGE-SOURCE
        }
    break;

  case 376:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3694 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3705 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
=======
            (yyval.node) = NULL;
>>>>>>> MERGE-SOURCE
        }
    break;

  case 377:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3701 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 378:

/* Line 690 of lalr1.cc  */
#line 3705 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3709 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

<<<<<<< TREE
=======
  case 378:

/* Line 690 of lalr1.cc  */
#line 3716 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 379:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3714 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 380:

/* Line 690 of lalr1.cc  */
#line 3718 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3720 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new RangeExpr( LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

  case 381:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3722 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3729 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

<<<<<<< TREE
=======
  case 381:

/* Line 690 of lalr1.cc  */
#line 3733 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new AdditiveExpr( LOC((yyloc)), ParseConstants::op_plus, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 382:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3730 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 383:

/* Line 690 of lalr1.cc  */
#line 3734 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3737 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new AdditiveExpr( LOC((yyloc)), ParseConstants::op_minus, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

  case 384:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3740 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3745 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 385:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3746 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3749 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new MultiplicativeExpr(
                LOC((yyloc)), ParseConstants::op_mul, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

  case 386:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3752 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3755 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new MultiplicativeExpr(
                LOC((yyloc)), ParseConstants::op_div, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
=======
  case 386:

/* Line 690 of lalr1.cc  */
#line 3761 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new MultiplicativeExpr(
                LOC((yyloc)), ParseConstants::op_idiv, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 387:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3762 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3767 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
=======
            (yyval.expr) = new MultiplicativeExpr(
                LOC((yyloc)), ParseConstants::op_mod, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)
            );
>>>>>>> MERGE-SOURCE
        }
    break;

  case 388:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3766 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3777 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 389:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3770 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3781 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new UnionExpr( LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

  case 390:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3778 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 391:

/* Line 690 of lalr1.cc  */
#line 3782 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3785 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new UnionExpr( LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

  case 392:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3788 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3793 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

<<<<<<< TREE
=======
  case 392:

/* Line 690 of lalr1.cc  */
#line 3797 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new IntersectExceptExpr(
                LOC((yyloc)), ParseConstants::op_intersect, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 393:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3798 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 394:

/* Line 690 of lalr1.cc  */
#line 3802 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3803 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new IntersectExceptExpr(
                LOC((yyloc)), ParseConstants::op_except, (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
=======
  case 394:

/* Line 690 of lalr1.cc  */
#line 3813 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 395:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3812 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 396:

/* Line 690 of lalr1.cc  */
#line 3816 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3817 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new InstanceofExpr(
                LOC((yyloc)), (yysemantic_stack_[(4) - (1)].expr), dynamic_cast<SequenceType*>((yysemantic_stack_[(4) - (4)].node))
            );
        }
    break;

<<<<<<< TREE
=======
  case 396:

/* Line 690 of lalr1.cc  */
#line 3827 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 397:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3826 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 398:

/* Line 690 of lalr1.cc  */
#line 3830 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3831 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new TreatExpr(
                LOC((yyloc)), (yysemantic_stack_[(4) - (1)].expr), dynamic_cast<SequenceType*>((yysemantic_stack_[(4) - (4)].node))
            );
        }
    break;

<<<<<<< TREE
=======
  case 398:

/* Line 690 of lalr1.cc  */
#line 3841 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 399:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3840 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 400:

/* Line 690 of lalr1.cc  */
#line 3844 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3845 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new CastableExpr(
                LOC((yyloc)), (yysemantic_stack_[(4) - (1)].expr), dynamic_cast<SingleType*>((yysemantic_stack_[(4) - (4)].node))
            );
        }
    break;

  case 401:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3854 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3855 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 402:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3858 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3859 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new CastExpr(
                LOC((yyloc)), (yysemantic_stack_[(4) - (1)].expr), dynamic_cast<SingleType*>((yysemantic_stack_[(4) - (4)].node))
            );
        }
    break;

<<<<<<< TREE
=======
  case 402:

/* Line 690 of lalr1.cc  */
#line 3869 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new SingleType(LOC((yyloc)), dynamic_cast<SimpleType*>((yysemantic_stack_[(1) - (1)].node)), false);
    }
    break;

>>>>>>> MERGE-SOURCE
  case 403:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3867 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 404:

/* Line 690 of lalr1.cc  */
#line 3871 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3873 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SingleType(LOC((yyloc)), dynamic_cast<SimpleType*>((yysemantic_stack_[(2) - (1)].node)), true);
    }
    break;

  case 405:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3879 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3882 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 406:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3883 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3886 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new UnaryExpr( LOC((yyloc)), dynamic_cast<SignList*>((yysemantic_stack_[(2) - (1)].node)), (yysemantic_stack_[(2) - (2)].expr) );
        }
    break;

<<<<<<< TREE
=======
  case 406:

/* Line 690 of lalr1.cc  */
#line 3894 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new SignList( LOC((yyloc)), true );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 407:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3887 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3898 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new SignList( LOC((yyloc)), false );
        }
    break;

  case 408:

/* Line 690 of lalr1.cc  */
#line 3902 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
        }
    break;

<<<<<<< TREE
  case 408:
=======
  case 409:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3891 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3906 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            if ( SignList *sl = dynamic_cast<SignList*>((yysemantic_stack_[(2) - (1)].node)) )
                sl->negate();
            (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
        }
    break;

<<<<<<< TREE
  case 409:

/* Line 690 of lalr1.cc  */
#line 3901 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 410:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3905 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3916 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 411:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3909 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3920 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 412:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3916 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3924 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 413:

/* Line 690 of lalr1.cc  */
#line 3931 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
      }
    break;

<<<<<<< TREE
  case 413:
=======
  case 414:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3921 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
        (yyval.expr) = new SimpleMapExpr(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr));
      }
    break;

<<<<<<< TREE
  case 414:
=======
  case 415:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3929 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3944 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ValueComp( LOC((yyloc)), ParseConstants::op_val_eq );
        }
    break;

<<<<<<< TREE
  case 415:
=======
  case 416:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3948 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ValueComp( LOC((yyloc)), ParseConstants::op_val_ne );
        }
    break;

<<<<<<< TREE
  case 416:
=======
  case 417:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3937 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3952 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ValueComp( LOC((yyloc)), ParseConstants::op_val_lt );
        }
    break;

<<<<<<< TREE
  case 417:
=======
  case 418:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3941 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3956 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ValueComp( LOC((yyloc)), ParseConstants::op_val_le );
        }
    break;

<<<<<<< TREE
  case 418:
=======
  case 419:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3960 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ValueComp( LOC((yyloc)), ParseConstants::op_val_gt );
        }
    break;

<<<<<<< TREE
  case 419:
=======
  case 420:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3949 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3964 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ValueComp( LOC((yyloc)), ParseConstants::op_val_ge );
        }
    break;

<<<<<<< TREE
  case 420:
=======
  case 421:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3957 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3972 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new NodeComp( LOC((yyloc)), ParseConstants::op_is );
        }
    break;

<<<<<<< TREE
  case 421:
=======
  case 422:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3961 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3976 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new NodeComp( LOC((yyloc)), ParseConstants::op_precedes );
        }
    break;

<<<<<<< TREE
  case 422:
=======
  case 423:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3965 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3980 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new NodeComp( LOC((yyloc)), ParseConstants::op_follows );
        }
    break;

<<<<<<< TREE
  case 423:
=======
  case 424:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3973 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3988 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ValidateExpr( LOC((yyloc)), "strict", (yysemantic_stack_[(4) - (3)].expr) );
        }
    break;

<<<<<<< TREE
  case 424:
=======
  case 425:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3977 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3992 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ValidateExpr( LOC((yyloc)), "lax", (yysemantic_stack_[(5) - (4)].expr) );
        }
    break;

<<<<<<< TREE
  case 425:
=======
  case 426:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3981 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 3996 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ValidateExpr( LOC((yyloc)), "strict", (yysemantic_stack_[(5) - (4)].expr) );
        }
    break;

<<<<<<< TREE
  case 426:
=======
  case 427:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3985 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4000 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ValidateExpr(
                LOC((yyloc)), dynamic_cast<TypeName*>((yysemantic_stack_[(6) - (3)].node))->get_name(), (yysemantic_stack_[(6) - (5)].expr)
            );
            delete (yysemantic_stack_[(6) - (3)].node);
        }
    break;

<<<<<<< TREE
  case 427:
=======
  case 428:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 3996 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4011 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ExtensionExpr(
                LOC((yyloc)), dynamic_cast<PragmaList*>((yysemantic_stack_[(3) - (1)].node)), NULL
            );
        }
    break;

<<<<<<< TREE
  case 428:
=======
  case 429:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4002 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4017 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ExtensionExpr(
                LOC((yyloc)), dynamic_cast<PragmaList*>((yysemantic_stack_[(4) - (1)].node)), (yysemantic_stack_[(4) - (3)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 429:
=======
  case 430:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4012 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4027 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            PragmaList *pl = new PragmaList( LOC((yyloc)) );
            pl->push_back( dynamic_cast<Pragma*>((yysemantic_stack_[(1) - (1)].node)) );
            (yyval.node) = pl;
        }
    break;

<<<<<<< TREE
  case 430:
=======
  case 431:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4018 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4033 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            if ( PragmaList *pl = dynamic_cast<PragmaList*>((yysemantic_stack_[(2) - (1)].node)) )
                pl->push_back( dynamic_cast<Pragma*>((yysemantic_stack_[(2) - (2)].node)) );
            (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
        }
    break;

<<<<<<< TREE
  case 431:
=======
  case 432:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4028 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4043 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new Pragma( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (2)].expr)), SYMTAB((yysemantic_stack_[(3) - (3)].sval)) );
        }
    break;

<<<<<<< TREE
  case 432:
=======
  case 433:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4032 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4047 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new Pragma( LOC((yyloc)), new QName( LOC((yyloc)), SYMTAB((yysemantic_stack_[(2) - (2)].sval)) ), "" );
        }
    break;

<<<<<<< TREE
  case 433:
=======
  case 434:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4036 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4051 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new Pragma( LOC((yyloc)), new QName( LOC((yyloc)), SYMTAB((yysemantic_stack_[(2) - (2)].sval)), true ), "" );
        }
    break;

<<<<<<< TREE
  case 434:
=======
  case 435:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4099 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4114 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      RelativePathExpr* rpe = dynamic_cast<RelativePathExpr*>((yysemantic_stack_[(1) - (1)].expr));
      (yyval.expr) = (!rpe ?
            (yysemantic_stack_[(1) - (1)].expr) :
            new PathExpr( LOC((yyloc)), ParseConstants::path_relative, (yysemantic_stack_[(1) - (1)].expr)));
    }
    break;

<<<<<<< TREE
  case 435:
=======
  case 436:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4121 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4136 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      AxisStep* as = dynamic_cast<AxisStep*>((yysemantic_stack_[(1) - (1)].expr));
      (yyval.expr) = (as ?
            new RelativePathExpr(LOC((yyloc)),
                                 ParseConstants::st_slash,
                                 new ContextItemExpr( LOC((yyloc)), true ), (yysemantic_stack_[(1) - (1)].expr), true)
            :
            (yysemantic_stack_[(1) - (1)].expr));
    }
    break;

<<<<<<< TREE
  case 436:
=======
  case 437:

/* Line 690 of lalr1.cc  */
#line 4164 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 438:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4149 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 437:

/* Line 690 of lalr1.cc  */
#line 4313 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4328 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new NameTest( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(1) - (1)].expr)) );
        }
    break;

<<<<<<< TREE
  case 438:
=======
  case 439:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4317 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4332 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new NameTest( LOC((yyloc)), dynamic_cast<Wildcard*>((yysemantic_stack_[(1) - (1)].node)) );
        }
    break;

<<<<<<< TREE
  case 439:
=======
  case 440:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4327 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4342 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new Wildcard(LOC((yyloc)), "", "", ParseConstants::wild_all, false);
    }
    break;

<<<<<<< TREE
  case 440:
=======
  case 441:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4331 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4346 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new Wildcard(LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)), "", ParseConstants::wild_elem, false);
    }
    break;

<<<<<<< TREE
  case 441:
=======
  case 442:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4335 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4350 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new Wildcard(LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)), "", ParseConstants::wild_elem, true);
    }
    break;

<<<<<<< TREE
  case 442:
=======
  case 443:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4339 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4354 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new Wildcard(LOC((yyloc)), "", SYMTAB((yysemantic_stack_[(1) - (1)].sval)), ParseConstants::wild_prefix, false);
    }
    break;

<<<<<<< TREE
  case 443:
=======
  case 444:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4348 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4363 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
     }
    break;

<<<<<<< TREE
  case 444:
=======
  case 445:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4352 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4367 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new FilterExpr(LOC((yyloc)), (yysemantic_stack_[(2) - (1)].expr), dynamic_cast<PredicateList*>((yysemantic_stack_[(2) - (2)].node)));
     }
    break;

<<<<<<< TREE
  case 445:
=======
  case 446:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4356 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4371 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new DynamicFunctionInvocation(LOC ((yyloc)), (yysemantic_stack_[(3) - (1)].expr), false);
     }
    break;

<<<<<<< TREE
  case 446:
=======
  case 447:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4360 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4375 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new DynamicFunctionInvocation(LOC ((yyloc)), (yysemantic_stack_[(4) - (1)].expr), dynamic_cast<ArgList*>((yysemantic_stack_[(4) - (3)].node)), false);
     }
    break;

<<<<<<< TREE
  case 447:
=======
  case 448:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4364 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4379 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       StringLiteral* sl = new StringLiteral( LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (3)].sval)) );
       (yyval.expr) = new JSONObjectLookup(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), sl);
     }
    break;

<<<<<<< TREE
  case 448:

/* Line 690 of lalr1.cc  */
#line 4369 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
       (yyval.expr) = new JSONObjectLookup(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr));
     }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 449:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4373 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4384 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new JSONObjectLookup(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr));
     }
    break;

  case 450:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4377 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4388 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new JSONObjectLookup(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr));
     }
    break;

  case 451:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4381 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4392 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
       (yyval.expr) = new JSONObjectLookup(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr));
     }
    break;

  case 452:

/* Line 690 of lalr1.cc  */
#line 4396 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new JSONObjectLookup(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr));
     }
    break;

<<<<<<< TREE
  case 452:
=======
  case 453:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4390 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4405 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            PredicateList *pl = new PredicateList( LOC((yyloc)) );
            pl->push_back( dynamic_cast<exprnode*>((yysemantic_stack_[(1) - (1)].expr)) );
            (yyval.node) = pl;
        }
    break;

<<<<<<< TREE
  case 453:
=======
  case 454:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4396 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4411 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            if ( PredicateList *pl = dynamic_cast<PredicateList*>((yysemantic_stack_[(2) - (1)].node)) )
                pl->push_back( dynamic_cast<exprnode*>((yysemantic_stack_[(2) - (2)].expr)) );
            (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
        }
    break;

<<<<<<< TREE
  case 454:
=======
  case 455:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4406 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4421 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(3) - (2)].expr);
        }
    break;

<<<<<<< TREE
  case 455:

/* Line 690 of lalr1.cc  */
#line 4414 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 456:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4418 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4429 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 457:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4422 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4433 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 458:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4426 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4437 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 459:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4430 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4441 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 460:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4434 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4445 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 461:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4438 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4449 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 462:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4442 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4453 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 463:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4446 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4457 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 464:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4450 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4461 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 465:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4455 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4465 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 466:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4459 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4470 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 467:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4463 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4474 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 468:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4467 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4478 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 469:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4475 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4482 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 470:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4479 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4490 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 471:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4483 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4494 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 472:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4487 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4498 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
        }
    break;

  case 473:

/* Line 690 of lalr1.cc  */
#line 4502 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new NullLiteral(LOC((yyloc)));
        }
    break;

<<<<<<< TREE
  case 473:
=======
  case 474:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4495 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4510 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = NumericLiteral::new_literal(
                LOC((yyloc)), ParseConstants::num_decimal, *(yysemantic_stack_[(1) - (1)].decval)
            );
            delete yylval.decval;
        }
    break;

<<<<<<< TREE
  case 474:
=======
  case 475:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4502 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4517 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = NumericLiteral::new_literal(
                LOC((yyloc)), ParseConstants::num_integer, *(yysemantic_stack_[(1) - (1)].ival)
            );
            delete yylval.ival;
        }
    break;

<<<<<<< TREE
  case 475:
=======
  case 476:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4509 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4524 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = NumericLiteral::new_literal(
                LOC((yyloc)), ParseConstants::num_double, *(yysemantic_stack_[(1) - (1)].dval)
            );
            delete yylval.dval;
        }
    break;

<<<<<<< TREE
  case 476:
=======
  case 477:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4519 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4534 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new BooleanLiteral(LOC((yyloc)), true);
        }
    break;

<<<<<<< TREE
  case 477:
=======
  case 478:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4523 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4538 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new BooleanLiteral(LOC((yyloc)), false);
        }
    break;

<<<<<<< TREE
  case 478:
=======
  case 479:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4531 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4546 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new VarRef(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(2) - (2)].expr)));
        }
    break;

<<<<<<< TREE
  case 479:
=======
  case 480:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4539 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4554 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ParenthesizedExpr( LOC((yyloc)), NULL);
        }
    break;

<<<<<<< TREE
  case 480:
=======
  case 481:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4543 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4558 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ParenthesizedExpr( LOC((yyloc)), (yysemantic_stack_[(3) - (2)].expr) );
        }
    break;

<<<<<<< TREE
  case 481:
=======
  case 482:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4551 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4566 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ContextItemExpr( LOC((yyloc)) );
        }
    break;

<<<<<<< TREE
  case 482:
=======
  case 483:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4559 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4574 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new OrderedExpr( LOC((yyloc)), (yysemantic_stack_[(4) - (3)].expr) );
        }
    break;

<<<<<<< TREE
  case 483:
=======
  case 484:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4567 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4582 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new UnorderedExpr( LOC((yyloc)), (yysemantic_stack_[(4) - (3)].expr) );
        }
    break;

<<<<<<< TREE
  case 484:
=======
  case 485:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4621 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4636 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new FunctionCall( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (1)].expr)), NULL );
    }
    break;

<<<<<<< TREE
  case 485:
=======
  case 486:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4625 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4640 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ArgList* argList = dynamic_cast<ArgList*>((yysemantic_stack_[(4) - (3)].node));

      if (argList->has_placeholder())
      {
        LiteralFunctionItem* lfi = 
        new LiteralFunctionItem(LOC((yyloc)),
                                dynamic_cast<QName*>((yysemantic_stack_[(4) - (1)].expr)),
                                new Integer(argList->size()));

        (yyval.expr) = new DynamicFunctionInvocation(LOC((yyloc)), lfi, argList, true);
      }
      else
      {
        (yyval.expr) = new FunctionCall(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (1)].expr)), argList);
      }
    }
    break;

<<<<<<< TREE
  case 486:
=======
  case 487:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4647 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4662 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ArgList *al = new ArgList( LOC((yyloc)) );
      al->push_back(new ArgumentPlaceholder(LOC((yyloc))));
      (yyval.node) = al;
    }
    break;

<<<<<<< TREE
  case 487:
=======
  case 488:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4653 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4668 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if ( ArgList *al = dynamic_cast<ArgList*>((yysemantic_stack_[(3) - (1)].node)) )
        al->push_back( new ArgumentPlaceholder(LOC((yyloc))) );
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 488:
=======
  case 489:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4659 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4674 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      ArgList *al = new ArgList( LOC((yyloc)) );
      al->push_back( (yysemantic_stack_[(1) - (1)].expr) );
      (yyval.node) = al;
    }
    break;

<<<<<<< TREE
  case 489:
=======
  case 490:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4665 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4680 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if ( ArgList *al = dynamic_cast<ArgList*>((yysemantic_stack_[(3) - (1)].node)) )
        al->push_back( (yysemantic_stack_[(3) - (3)].expr) );
      (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 490:

/* Line 690 of lalr1.cc  */
#line 4675 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 491:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4679 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4690 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 492:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4687 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4694 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 493:

/* Line 690 of lalr1.cc  */
#line 4702 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new LiteralFunctionItem(LOC ((yyloc)), dynamic_cast<QName*>((yysemantic_stack_[(3) - (1)].expr)), (yysemantic_stack_[(3) - (3)].ival));
    }
    break;

<<<<<<< TREE
  case 493:
=======
  case 494:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4695 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4710 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new InlineFunction(LOC((yyloc)),
                              &*(yysemantic_stack_[(3) - (2)].fnsig)->theParams,
                              &*(yysemantic_stack_[(3) - (2)].fnsig)->theReturnType,
                              (yysemantic_stack_[(3) - (3)].expr));
      delete (yysemantic_stack_[(3) - (2)].fnsig);
    }
    break;

<<<<<<< TREE
  case 494:

/* Line 690 of lalr1.cc  */
#line 4707 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 495:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4711 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4722 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 496:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4719 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4726 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 497:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4723 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4734 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 498:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4727 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4738 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 499:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4735 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4742 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 500:

/* Line 690 of lalr1.cc  */
#line 4750 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirElemConstructor(LOC((yyloc)),
                                  static_cast<QName*>((yysemantic_stack_[(4) - (2)].expr)),
                                  NULL,
                                  NULL,
                                  NULL);
    }
    break;

<<<<<<< TREE
  case 500:
=======
  case 501:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4743 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4758 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if (static_cast<QName*>((yysemantic_stack_[(8) - (2)].expr))->get_qname() != static_cast<QName*>((yysemantic_stack_[(8) - (6)].expr))->get_qname())
      {
        error((yylocation_stack_[(8) - (5)]), "syntax error, end tag </" +
                  static_cast<QName*>((yysemantic_stack_[(8) - (6)].expr))->get_qname().str() +
                  "> does not match start tag <" +
                  static_cast<QName*>((yysemantic_stack_[(8) - (2)].expr))->get_qname().str() + ">");
        YYERROR;
      }

      (yyval.expr) = new DirElemConstructor(LOC((yyloc)),
                                  static_cast<QName*>((yysemantic_stack_[(8) - (2)].expr)),
                                  static_cast<QName*>((yysemantic_stack_[(8) - (6)].expr)),
                                  NULL,
                                  NULL);
    }
    break;

<<<<<<< TREE
  case 501:
=======
  case 502:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4760 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4775 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirElemConstructor(LOC((yyloc)),
                                  static_cast<QName*>((yysemantic_stack_[(5) - (2)].expr)),
                                  NULL,
                                  dynamic_cast<DirAttributeList*>((yysemantic_stack_[(5) - (3)].node)),
                                  NULL);
    }
    break;

<<<<<<< TREE
  case 502:
=======
  case 503:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4768 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4783 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if (static_cast<QName*>((yysemantic_stack_[(9) - (2)].expr))->get_qname() != static_cast<QName*>((yysemantic_stack_[(9) - (7)].expr))->get_qname())
      {
        error((yylocation_stack_[(9) - (5)]), "syntax error, end tag </" +
                  static_cast<QName*>((yysemantic_stack_[(9) - (7)].expr))->get_qname().str() +
                  "> does not match start tag <" +
                  static_cast<QName*>((yysemantic_stack_[(9) - (2)].expr))->get_qname().str() + ">");
        YYERROR;
      }

      (yyval.expr) = new DirElemConstructor(LOC((yyloc)),
                                  static_cast<QName*>((yysemantic_stack_[(9) - (2)].expr)),
                                  static_cast<QName*>((yysemantic_stack_[(9) - (7)].expr)),
                                  dynamic_cast<DirAttributeList*>((yysemantic_stack_[(9) - (3)].node)),
                                  NULL);
    }
    break;

<<<<<<< TREE
  case 503:
=======
  case 504:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4787 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4802 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if (static_cast<QName*>((yysemantic_stack_[(9) - (2)].expr))->get_qname() != static_cast<QName*>((yysemantic_stack_[(9) - (7)].expr))->get_qname())
      {
        error((yylocation_stack_[(9) - (5)]), "syntax error, end tag </" +
                  static_cast<QName*>((yysemantic_stack_[(9) - (7)].expr))->get_qname().str() +
                  "> does not match start tag <" +
                  static_cast<QName*>((yysemantic_stack_[(9) - (2)].expr))->get_qname().str() + ">");
        YYERROR;
      }

      (yyval.expr) = new DirElemConstructor(LOC((yyloc)),
                                  static_cast<QName*>((yysemantic_stack_[(9) - (2)].expr)),
                                  static_cast<QName*>((yysemantic_stack_[(9) - (7)].expr)),
                                  NULL,
                                  dynamic_cast<DirElemContentList*>((yysemantic_stack_[(9) - (5)].node)));
    }
    break;

<<<<<<< TREE
  case 504:
=======
  case 505:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4806 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4821 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      if (static_cast<QName*>((yysemantic_stack_[(10) - (2)].expr))->get_qname() != static_cast<QName*>((yysemantic_stack_[(10) - (8)].expr))->get_qname())
      {
        error((yylocation_stack_[(10) - (5)]), "syntax error, end tag </" +
                  static_cast<QName*>((yysemantic_stack_[(10) - (8)].expr))->get_qname().str() +
                  "> does not match start tag <" +
                  static_cast<QName*>((yysemantic_stack_[(10) - (2)].expr))->get_qname().str() + ">");
        YYERROR;
      }

      (yyval.expr) = new DirElemConstructor(LOC((yyloc)),
                                  static_cast<QName*>((yysemantic_stack_[(10) - (2)].expr)),
                                  static_cast<QName*>((yysemantic_stack_[(10) - (8)].expr)),
                                  dynamic_cast<DirAttributeList*>((yysemantic_stack_[(10) - (3)].node)),
                                  dynamic_cast<DirElemContentList*>((yysemantic_stack_[(10) - (6)].node)));
    }
    break;

<<<<<<< TREE
  case 505:
=======
  case 506:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4828 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4843 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      DirElemContentList *decl = new DirElemContentList( LOC((yyloc)) );
      decl->push_back( dynamic_cast<DirElemContent*>((yysemantic_stack_[(1) - (1)].expr)) );
      (yyval.node) = decl;
    }
    break;

<<<<<<< TREE
  case 506:
=======
  case 507:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4834 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4849 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      DirElemContentList *decl = dynamic_cast<DirElemContentList*>((yysemantic_stack_[(2) - (1)].node));
      if ( decl )
        decl->push_back( dynamic_cast<DirElemContent*>((yysemantic_stack_[(2) - (2)].expr)) );
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 507:
=======
  case 508:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4845 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4860 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      DirAttributeList *dal = new DirAttributeList( LOC((yyloc)) );
      dal->push_back( dynamic_cast<DirAttr*>((yysemantic_stack_[(1) - (1)].node)) );
      (yyval.node) = dal;
    }
    break;

<<<<<<< TREE
  case 508:
=======
  case 509:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4851 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4866 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      DirAttributeList *dal = dynamic_cast<DirAttributeList*>((yysemantic_stack_[(2) - (1)].node));
      if ( dal )
        dal->push_back( dynamic_cast<DirAttr*>((yysemantic_stack_[(2) - (2)].node)) );
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 509:
=======
  case 510:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4862 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4877 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DirAttr(LOC((yyloc)),
                       static_cast<QName*>((yysemantic_stack_[(6) - (2)].expr)),
                       dynamic_cast<DirAttributeValue*>((yysemantic_stack_[(6) - (6)].node)));
    }
    break;

<<<<<<< TREE
  case 512:
=======
  case 513:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4877 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4892 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DirAttributeValue(LOC((yyloc)),
                                 dynamic_cast<QuoteAttrContentList*>((yysemantic_stack_[(3) - (2)].node)));
    }
    break;

<<<<<<< TREE
  case 513:
=======
  case 514:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4882 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4897 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DirAttributeValue( LOC((yyloc)),
                                  dynamic_cast<AposAttrContentList*>((yysemantic_stack_[(3) - (2)].node)));
    }
    break;

<<<<<<< TREE
  case 514:
=======
  case 515:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4891 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4906 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new QuoteAttrContentList( LOC((yyloc)) );
    }
    break;

<<<<<<< TREE
  case 515:
=======
  case 516:

/* Line 690 of lalr1.cc  */
#line 4910 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 517:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4895 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 516:

/* Line 690 of lalr1.cc  */
#line 4902 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4917 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      QuoteAttrContentList *qacl = new QuoteAttrContentList( LOC((yyloc)) );
      qacl->push_back( new QuoteAttrValueContent( LOC((yyloc)), "\"" ) );
      (yyval.node) = qacl;
    }
    break;

<<<<<<< TREE
  case 517:
=======
  case 518:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4908 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4923 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      QuoteAttrContentList *qacl = new QuoteAttrContentList( LOC((yyloc)) );
      qacl->push_back( dynamic_cast<QuoteAttrValueContent*>((yysemantic_stack_[(1) - (1)].node)) );
      (yyval.node) = qacl;
    }
    break;

<<<<<<< TREE
  case 518:
=======
  case 519:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4914 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4929 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      QuoteAttrContentList* qacl = dynamic_cast<QuoteAttrContentList*>((yysemantic_stack_[(2) - (1)].node));
      if ( qacl )
        qacl->push_back( new QuoteAttrValueContent( LOC((yyloc)), "\"" ) );
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 519:
=======
  case 520:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4921 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      QuoteAttrContentList *qacl = dynamic_cast<QuoteAttrContentList*>((yysemantic_stack_[(2) - (1)].node));
      if ( qacl )
        qacl->push_back( dynamic_cast<QuoteAttrValueContent*>((yysemantic_stack_[(2) - (2)].node)) );
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 520:
=======
  case 521:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4932 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4947 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AposAttrContentList( LOC((yyloc)) );
    }
    break;

<<<<<<< TREE
  case 521:
=======
  case 522:

/* Line 690 of lalr1.cc  */
#line 4951 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 523:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 522:

/* Line 690 of lalr1.cc  */
#line 4943 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4958 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      AposAttrContentList *aacl = new AposAttrContentList( LOC((yyloc)) );
      aacl->push_back( new AposAttrValueContent( LOC((yyloc)),"'") );
      (yyval.node) = aacl;
    }
    break;

<<<<<<< TREE
  case 523:
=======
  case 524:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4949 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4964 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      AposAttrContentList *aacl = new AposAttrContentList( LOC((yyloc)) );
      aacl->push_back( dynamic_cast<AposAttrValueContent*>((yysemantic_stack_[(1) - (1)].node)) );
      (yyval.node) = aacl;
    }
    break;

<<<<<<< TREE
  case 524:
=======
  case 525:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4955 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4970 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      AposAttrContentList *aacl = dynamic_cast<AposAttrContentList*>((yysemantic_stack_[(2) - (1)].node));
      if (aacl)
        aacl->push_back( new AposAttrValueContent( LOC((yyloc)),"'") );
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 525:
=======
  case 526:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4962 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4977 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      AposAttrContentList *aacl = dynamic_cast<AposAttrContentList*>((yysemantic_stack_[(2) - (1)].node));
      if ( aacl )
        aacl->push_back( dynamic_cast<AposAttrValueContent*>((yysemantic_stack_[(2) - (2)].node)) );
      (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
    }
    break;

<<<<<<< TREE
  case 526:
=======
  case 527:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4973 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4988 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new QuoteAttrValueContent( LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)) );
    }
    break;

<<<<<<< TREE
  case 527:
=======
  case 528:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4977 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 4992 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new QuoteAttrValueContent(LOC((yyloc)), dynamic_cast<CommonContent*>((yysemantic_stack_[(1) - (1)].expr)));
    }
    break;

<<<<<<< TREE
  case 528:
=======
  case 529:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4985 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5000 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AposAttrValueContent( LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)) );
    }
    break;

<<<<<<< TREE
  case 529:
=======
  case 530:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4989 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5004 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AposAttrValueContent(LOC((yyloc)), dynamic_cast<CommonContent*>((yysemantic_stack_[(1) - (1)].expr)));
    }
    break;

<<<<<<< TREE
  case 530:
=======
  case 531:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 4997 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5012 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirElemContent( LOC((yyloc)), (yysemantic_stack_[(1) - (1)].expr) );
    }
    break;

<<<<<<< TREE
  case 531:
=======
  case 532:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5001 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5016 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirElemContent( LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)) );
    }
    break;

<<<<<<< TREE
  case 532:
=======
  case 533:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5005 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5020 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      rchandle<CDataSection> cdata_h = dynamic_cast<CDataSection*>((yysemantic_stack_[(1) - (1)].expr));
      (yyval.expr) = new DirElemContent( LOC((yyloc)), cdata_h );
    }
    break;

<<<<<<< TREE
  case 533:
=======
  case 534:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5010 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5025 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      rchandle<CommonContent> cont_h = dynamic_cast<CommonContent*>((yysemantic_stack_[(1) - (1)].expr));
      (yyval.expr) = new DirElemContent( LOC((yyloc)), cont_h );
    }
    break;

<<<<<<< TREE
  case 534:
=======
  case 535:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5019 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5034 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CommonContent(LOC((yyloc)), ParseConstants::cont_charref, SYMTAB((yysemantic_stack_[(1) - (1)].sval)));
    }
    break;

<<<<<<< TREE
  case 535:
=======
  case 536:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5023 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5038 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CommonContent(LOC((yyloc)), ParseConstants::cont_escape_lbrace);
    }
    break;

<<<<<<< TREE
  case 536:
=======
  case 537:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5027 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5042 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CommonContent(LOC((yyloc)), ParseConstants::cont_escape_rbrace);
    }
    break;

<<<<<<< TREE
  case 537:
=======
  case 538:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5031 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5046 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CommonContent(LOC((yyloc)), new EnclosedExpr(LOC((yyloc)), (yysemantic_stack_[(3) - (2)].expr)));
    }
    break;

<<<<<<< TREE
  case 538:
=======
  case 539:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5039 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5054 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirCommentConstructor( LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (2)].sval)) );
    }
    break;

<<<<<<< TREE
  case 539:
=======
  case 540:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5044 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5059 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirCommentConstructor( LOC((yyloc)), "" );
    }
    break;

<<<<<<< TREE
  case 540:
=======
  case 541:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5052 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5067 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirPIConstructor( LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (2)].sval)) );
    }
    break;

<<<<<<< TREE
  case 541:
=======
  case 542:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5057 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5072 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new DirPIConstructor( LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (2)].sval)), SYMTAB((yysemantic_stack_[(3) - (3)].sval)) );
    }
    break;

<<<<<<< TREE
  case 542:
=======
  case 543:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5065 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5080 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CDataSection( LOC((yyloc)),SYMTAB((yysemantic_stack_[(2) - (2)].sval)) );
    }
    break;

<<<<<<< TREE
  case 543:

/* Line 690 of lalr1.cc  */
#line 5073 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 544:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5078 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5088 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 545:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5083 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5093 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 546:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5088 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5098 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 547:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5093 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5103 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 548:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5098 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 550:

/* Line 690 of lalr1.cc  */
#line 5109 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5108 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 549:

/* Line 690 of lalr1.cc  */
#line 5113 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(1) - (1)].expr);
    }
    break;

  case 551:

/* Line 690 of lalr1.cc  */
#line 5124 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompDocConstructor( LOC((yyloc)), (yysemantic_stack_[(4) - (3)].expr) );
    }
    break;

<<<<<<< TREE
  case 551:
=======
  case 552:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5117 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5132 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompElemConstructor(LOC((yyloc)), new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (1)].sval))), (yysemantic_stack_[(3) - (2)].expr));
    }
    break;

<<<<<<< TREE
  case 552:
=======
  case 553:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5121 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5136 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompElemConstructor( LOC((yyloc)), (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (6)].expr) );
    }
    break;

<<<<<<< TREE
  case 553:
=======
  case 554:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5138 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5153 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompAttrConstructor( LOC((yyloc)), new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (1)].sval))), (yysemantic_stack_[(3) - (2)].expr) );
    }
    break;

<<<<<<< TREE
  case 554:
=======
  case 555:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5142 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5157 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompAttrConstructor( LOC((yyloc)), (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (6)].expr) );
    }
    break;

<<<<<<< TREE
  case 555:
=======
  case 556:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5150 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5165 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompTextConstructor( LOC((yyloc)), (yysemantic_stack_[(4) - (3)].expr) );
    }
    break;

<<<<<<< TREE
  case 556:
=======
  case 557:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5158 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5173 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompCommentConstructor( LOC((yyloc)), (yysemantic_stack_[(4) - (3)].expr) );
    }
    break;

<<<<<<< TREE
  case 557:
=======
  case 558:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5166 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5181 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompPIConstructor(LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (1)].sval)), (yysemantic_stack_[(3) - (2)].expr));
    }
    break;

<<<<<<< TREE
  case 558:
=======
  case 559:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5170 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5185 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompPIConstructor(LOC((yyloc)), (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (6)].expr));
    }
    break;

<<<<<<< TREE
  case 559:
=======
  case 560:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5178 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5193 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompNamespaceConstructor(LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (1)].sval)), (yysemantic_stack_[(3) - (2)].expr));
    }
    break;

<<<<<<< TREE
  case 560:
=======
  case 561:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5182 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5197 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.expr) = new CompNamespaceConstructor(LOC((yyloc)), (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (6)].expr));
    }
    break;

<<<<<<< TREE
  case 561:

/* Line 690 of lalr1.cc  */
#line 5190 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
    }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 562:
<<<<<<< TREE

/* Line 690 of lalr1.cc  */
#line 5198 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new SequenceType( LOC((yyloc)), (yysemantic_stack_[(1) - (1)].node), NULL );
        }
    break;

  case 563:
=======
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5202 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5205 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(2) - (2)].node);
    }
    break;

  case 564:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5206 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5213 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new SequenceType( LOC((yyloc)), (yysemantic_stack_[(1) - (1)].node), NULL );
        }
    break;

  case 565:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5241 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5217 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new SequenceType(LOC((yyloc)), (yysemantic_stack_[(2) - (1)].node), dynamic_cast<OccurrenceIndicator*>((yysemantic_stack_[(2) - (2)].node)));
        }
    break;

  case 566:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5247 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5221 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new SequenceType( LOC((yyloc)), NULL, NULL );
        }
    break;

  case 567:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5253 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5226 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new SequenceType( LOC((yyloc)), NULL, NULL );
        }
    break;

<<<<<<< TREE
=======
  case 567:

/* Line 690 of lalr1.cc  */
#line 5261 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new OccurrenceIndicator(
                LOC((yyloc)), ParseConstants::occurs_optionally
            );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 568:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5263 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5267 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OccurrenceIndicator(
                LOC((yyloc)), ParseConstants::occurs_zero_or_more
            );
        }
    break;

  case 569:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5267 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 570:

/* Line 690 of lalr1.cc  */
#line 5271 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5273 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new OccurrenceIndicator(
                LOC((yyloc)), ParseConstants::occurs_one_or_more
            );
        }
    break;

  case 571:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5275 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5283 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

<<<<<<< TREE
=======
  case 571:

/* Line 690 of lalr1.cc  */
#line 5287 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 572:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5279 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5291 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ItemType( LOC((yyloc)), true );
        }
    break;

  case 573:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5283 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5296 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ItemType( LOC((yyloc)), true );
        }
    break;

  case 574:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5287 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5300 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
=======
            (yyval.node) = new StructuredItemType(LOC((yyloc)));
>>>>>>> MERGE-SOURCE
        }
    break;

  case 575:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5294 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5305 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new StructuredItemType(LOC((yyloc)));
        }
    break;

  case 576:

/* Line 690 of lalr1.cc  */
#line 5309 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 577:

/* Line 690 of lalr1.cc  */
#line 5313 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 578:

/* Line 690 of lalr1.cc  */
#line 5317 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 579:

/* Line 690 of lalr1.cc  */
#line 5324 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          TypeList* aTypeList = new TypeList(LOC ((yyloc)));
          aTypeList->push_back(dynamic_cast<SequenceType *>((yysemantic_stack_[(1) - (1)].node)));
          (yyval.node) = aTypeList;
        }
    break;

<<<<<<< TREE
  case 576:
=======
  case 580:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5300 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5330 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          TypeList* aTypeList = dynamic_cast<TypeList *>((yysemantic_stack_[(3) - (1)].node));
          aTypeList->push_back(dynamic_cast<SequenceType *>((yysemantic_stack_[(3) - (3)].node)));
          (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
        }
    break;

<<<<<<< TREE
  case 577:
=======
  case 581:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5310 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5340 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new GeneralizedAtomicType( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(1) - (1)].expr)) );
    }
    break;

<<<<<<< TREE
  case 578:
=======
  case 582:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5318 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5348 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new SimpleType( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(1) - (1)].expr)) );
    }
    break;

<<<<<<< TREE
  case 579:

/* Line 690 of lalr1.cc  */
#line 5326 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 580:

/* Line 690 of lalr1.cc  */
#line 5330 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 581:

/* Line 690 of lalr1.cc  */
#line 5334 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 582:

/* Line 690 of lalr1.cc  */
#line 5338 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 583:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5342 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5356 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 584:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5346 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5360 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 585:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5350 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5364 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 586:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5354 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5368 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 587:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5358 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5372 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 588:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5362 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 589:

/* Line 690 of lalr1.cc  */
#line 5370 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5376 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 590:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5378 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5380 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 591:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5382 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5384 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 592:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5386 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5388 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 593:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5394 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5392 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 594:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5401 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5400 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnyKindTest( LOC((yyloc)) );
    }
    break;

  case 595:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5409 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5408 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DocumentTest(LOC((yyloc)));
    }
    break;

  case 596:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5417 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5412 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new DocumentTest(LOC((yyloc)), dynamic_cast<ElementTest*>((yysemantic_stack_[(4) - (3)].node)));
    }
    break;

<<<<<<< TREE
=======
  case 596:

/* Line 690 of lalr1.cc  */
#line 5416 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = new DocumentTest(LOC((yyloc)), dynamic_cast<SchemaElementTest*>((yysemantic_stack_[(4) - (3)].node)));
    }
    break;

>>>>>>> MERGE-SOURCE
  case 597:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5421 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5424 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new NamespaceTest(LOC((yyloc)));
    }
    break;

  case 598:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5425 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5431 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.node) = new PITest( LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (3)].sval)) );
        }
=======
      (yyval.node) = new TextTest(LOC((yyloc)));
    }
>>>>>>> MERGE-SOURCE
    break;

  case 599:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5433 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new AttributeTest( LOC((yyloc)), NULL, NULL );
        }
    break;

  case 600:

/* Line 690 of lalr1.cc  */
#line 5437 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5439 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new CommentTest(LOC((yyloc)));
    }
    break;

  case 601:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5443 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5447 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new PITest( LOC((yyloc)), "" );
        }
    break;

<<<<<<< TREE
=======
  case 601:

/* Line 690 of lalr1.cc  */
#line 5451 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new PITest( LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (3)].sval)) );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 602:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5449 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new AttributeTest( LOC((yyloc)), NULL, NULL );
        }
    break;

  case 603:

/* Line 690 of lalr1.cc  */
#line 5453 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5455 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new PITest( LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (3)].sval)) );
        }
    break;

  case 604:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5463 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5463 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new AttributeTest( LOC((yyloc)), NULL, NULL );
        }
    break;

  case 605:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5471 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5467 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new AttributeTest(
                LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (3)].expr)), NULL
            );
        }
    break;

  case 606:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5475 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5473 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new AttributeTest(
                LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(6) - (3)].expr)), dynamic_cast<TypeName*>((yysemantic_stack_[(6) - (5)].node))
            );
        }
    break;

  case 607:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5481 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5479 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new AttributeTest( LOC((yyloc)), NULL, NULL );
        }
    break;

  case 608:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5490 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5483 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new AttributeTest(
                LOC((yyloc)), NULL, dynamic_cast<TypeName*>((yysemantic_stack_[(6) - (5)].node))
            );
        }
    break;

  case 609:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5499 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5493 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new SchemaAttributeTest( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (3)].expr)) );
        }
    break;

  case 610:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5505 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5501 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ElementTest( LOC((yyloc)), NULL, NULL, true );
        }
    break;

  case 611:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5511 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5505 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ElementTest(
                LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (3)].expr)), NULL, true
            );
        }
    break;

  case 612:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5521 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5511 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ElementTest(
                LOC((yyloc)),
                static_cast<QName*>((yysemantic_stack_[(6) - (3)].expr)),
                dynamic_cast<TypeName*>((yysemantic_stack_[(6) - (5)].node)),
                false
            );
        }
    break;

  case 613:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5538 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5520 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ElementTest(
                LOC((yyloc)),
                static_cast<QName*>((yysemantic_stack_[(6) - (3)].expr)),
                dynamic_cast<TypeName*>((yysemantic_stack_[(6) - (5)].node)),
                true
            );
        }
    break;

  case 614:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5545 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5529 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ElementTest(
                LOC((yyloc)), NULL, NULL, true
            );
        }
    break;

  case 615:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5560 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5535 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new ElementTest(
                LOC((yyloc)), NULL, dynamic_cast<TypeName*>((yysemantic_stack_[(6) - (5)].node)), false
            );
        }
    break;

<<<<<<< TREE
=======
  case 615:

/* Line 690 of lalr1.cc  */
#line 5541 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new ElementTest(
                LOC((yyloc)), NULL, dynamic_cast<TypeName*>((yysemantic_stack_[(6) - (5)].node)), true
            );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 616:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5587 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5551 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new SchemaElementTest( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(4) - (3)].expr)) );
        }
    break;

  case 617:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5591 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 618:

/* Line 690 of lalr1.cc  */
#line 5599 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5568 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new TypeName( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(1) - (1)].expr)) );
        }
    break;

  case 619:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5607 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5575 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new TypeName( LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(2) - (1)].expr)), true );
        }
    break;

  case 620:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5611 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5590 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new StringLiteral( LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)) );
        }
    break;

  case 621:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5622 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5617 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 622:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5639 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5621 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
    }
    break;

  case 623:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5645 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5629 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      (yyval.node) = new AnyFunctionTest(LOC((yyloc)));
    }
    break;

  case 624:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5651 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5637 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.node) = new TypedFunctionTest(LOC ((yyloc)), dynamic_cast<SequenceType *>((yysemantic_stack_[(5) - (5)].node)));
        }
    break;

<<<<<<< TREE
=======
  case 624:

/* Line 690 of lalr1.cc  */
#line 5641 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new TypedFunctionTest(LOC ((yyloc)),
              dynamic_cast<TypeList *>((yysemantic_stack_[(6) - (3)].node)),
              dynamic_cast<SequenceType *>((yysemantic_stack_[(6) - (6)].node)));
        }
    break;

>>>>>>> MERGE-SOURCE
  case 625:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5661 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5652 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.expr) = new InsertExpr( LOC((yyloc)), store::UpdateConsts::INTO, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr) );
=======
           (yyval.node) = (yysemantic_stack_[(3) - (2)].node);
>>>>>>> MERGE-SOURCE
        }
    break;

  case 626:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5665 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new InsertExpr(
                LOC((yyloc)), store::UpdateConsts::AS_FIRST_INTO, (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (7)].expr)
            );
        }
    break;

  case 627:

/* Line 690 of lalr1.cc  */
#line 5671 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5669 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new RevalidationDecl(
                LOC((yyloc)), StaticContextConsts::strict_validation
            );
        }
    break;

  case 628:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5677 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5675 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new RevalidationDecl(
                LOC((yyloc)), StaticContextConsts::lax_validation
            );
        }
    break;

<<<<<<< TREE
=======
  case 628:

/* Line 690 of lalr1.cc  */
#line 5681 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new RevalidationDecl(
                LOC((yyloc)), StaticContextConsts::skip_validation
            );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 629:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5681 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5691 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new InsertExpr(
                LOC ((yyloc)), store::UpdateConsts::BEFORE, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr)
            );
        }
    break;

  case 630:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5687 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5695 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new InsertExpr( LOC((yyloc)), store::UpdateConsts::INTO, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr) );
        }
    break;

  case 631:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5691 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new InsertExpr(
                LOC((yyloc)), store::UpdateConsts::AS_FIRST_INTO, (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (7)].expr)
            );
        }
    break;

  case 632:

/* Line 690 of lalr1.cc  */
#line 5697 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5701 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new InsertExpr(
                LOC((yyloc)), store::UpdateConsts::AS_LAST_INTO, (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (7)].expr)
            );
        }
    break;

  case 633:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5703 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5707 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new InsertExpr( LOC((yyloc)), store::UpdateConsts::AFTER, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr) );
        }
    break;

<<<<<<< TREE
=======
  case 633:

/* Line 690 of lalr1.cc  */
#line 5711 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new InsertExpr(
                LOC ((yyloc)), store::UpdateConsts::BEFORE, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr)
            );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 634:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5710 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5717 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.expr) = new InsertExpr(
                LOC ((yyloc)), store::UpdateConsts::BEFORE, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr)
            );
=======
            (yyval.expr) = new InsertExpr( LOC((yyloc)), store::UpdateConsts::INTO, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr) );
>>>>>>> MERGE-SOURCE
        }
    break;

  case 635:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5720 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5721 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new InsertExpr(
                LOC((yyloc)), store::UpdateConsts::AS_FIRST_INTO, (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (7)].expr)
            );
        }
    break;

  case 636:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5725 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5727 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.expr) = new DeleteExpr( LOC ((yyloc)), (yysemantic_stack_[(3) - (3)].expr) );
=======
            (yyval.expr) = new InsertExpr(
                  LOC((yyloc)), store::UpdateConsts::AS_LAST_INTO, (yysemantic_stack_[(7) - (3)].expr), (yysemantic_stack_[(7) - (7)].expr)
            );
>>>>>>> MERGE-SOURCE
        }
    break;

  case 637:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5733 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5733 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new InsertExpr(
                LOC ((yyloc)),
                store::UpdateConsts::AFTER, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr)
            );
        }
    break;

  case 638:

/* Line 690 of lalr1.cc  */
#line 5740 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new InsertExpr(
                LOC ((yyloc)), store::UpdateConsts::BEFORE, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr)
            );
        }
    break;

  case 639:

/* Line 690 of lalr1.cc  */
#line 5750 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new DeleteExpr( LOC ((yyloc)), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

  case 640:

/* Line 690 of lalr1.cc  */
#line 5755 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.expr) = new DeleteExpr( LOC ((yyloc)), (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

  case 641:

/* Line 690 of lalr1.cc  */
#line 5763 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ReplaceExpr(
                LOC((yyloc)), store::UpdateConsts::NODE, (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 638:
=======
  case 642:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5739 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5769 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new ReplaceExpr(
                LOC((yyloc)), store::UpdateConsts::VALUE_OF_NODE, (yysemantic_stack_[(7) - (5)].expr), (yysemantic_stack_[(7) - (7)].expr)
            );
        }
    break;

<<<<<<< TREE
  case 639:
=======
  case 643:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5749 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5779 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new RenameExpr( LOC ((yyloc)), (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr) );
        }
    break;

<<<<<<< TREE
  case 640:
=======
  case 644:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5771 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5801 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CopyVarList *cvl = dynamic_cast<CopyVarList*>((yysemantic_stack_[(7) - (3)].expr));
      (yyval.expr) = new TransformExpr( LOC((yyloc)), cvl, (yysemantic_stack_[(7) - (5)].expr), (yysemantic_stack_[(7) - (7)].expr) );
    }
    break;

<<<<<<< TREE
  case 641:
=======
  case 645:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5780 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5810 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CopyVarList* lList = new CopyVarList(LOC((yyloc)));
      lList->push_back (dynamic_cast<VarBinding*> ((yysemantic_stack_[(1) - (1)].expr)));
      (yyval.expr) = lList;
    }
    break;

<<<<<<< TREE
  case 642:
=======
  case 646:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5786 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5816 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
      CopyVarList* lList = dynamic_cast<CopyVarList*>((yysemantic_stack_[(4) - (1)].expr));
      VarBinding* lBinding = dynamic_cast<VarBinding*>((yysemantic_stack_[(4) - (4)].expr));
      lList->push_back(lBinding);
      (yyval.expr) = lList;
    }
    break;

<<<<<<< TREE
  case 643:
=======
  case 647:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5799 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5829 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new VarBinding(LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (1)].expr)), (yysemantic_stack_[(3) - (3)].expr));
    }
    break;

<<<<<<< TREE
  case 644:
=======
  case 648:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5813 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5843 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.expr) = new TryExpr( LOC((yyloc)), (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr) );
        }
    break;

<<<<<<< TREE
  case 645:
=======
  case 649:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5820 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5850 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            CatchListExpr *cle = new CatchListExpr( LOC((yyloc)) );
            cle->push_back( static_cast<CatchExpr*>((yysemantic_stack_[(1) - (1)].expr)) );
            (yyval.expr) = cle;
        }
    break;

<<<<<<< TREE
  case 646:
=======
  case 650:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5826 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5856 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            CatchListExpr *cle = dynamic_cast<CatchListExpr*>((yysemantic_stack_[(2) - (1)].expr));
            if ( cle )
                cle->push_back( static_cast<CatchExpr*>((yysemantic_stack_[(2) - (2)].expr)) );
            (yyval.expr) = (yysemantic_stack_[(2) - (1)].expr);
        }
    break;

<<<<<<< TREE
  case 647:
=======
  case 651:

/* Line 690 of lalr1.cc  */
#line 5866 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
       (yyval.expr) = new CatchExpr(LOC((yyloc)), *(yysemantic_stack_[(3) - (2)].name_test_list), (yysemantic_stack_[(3) - (3)].expr));
       delete (yysemantic_stack_[(3) - (2)].name_test_list);
    }
    break;

  case 652:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5836 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5875 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
       (yyval.expr) = new CatchExpr(LOC((yyloc)), *(yysemantic_stack_[(3) - (2)].name_test_list), (yysemantic_stack_[(3) - (3)].expr));
       delete (yysemantic_stack_[(3) - (2)].name_test_list);
    }
    break;

  case 653:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5845 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
      (yyval.expr) = (yysemantic_stack_[(3) - (2)].expr);
    }
    break;

  case 649:

/* Line 690 of lalr1.cc  */
#line 5853 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5883 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            CatchExpr::NameTestList *ntl = new CatchExpr::NameTestList;
            ntl->push_back( static_cast<NameTest*>((yysemantic_stack_[(1) - (1)].node)) );
            (yyval.name_test_list) = ntl;
        }
    break;

<<<<<<< TREE
  case 650:
=======
  case 654:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5859 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5889 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            CatchExpr::NameTestList *ntl =
                static_cast<CatchExpr::NameTestList*>((yysemantic_stack_[(3) - (1)].name_test_list));
            ntl->push_back( static_cast<NameTest*>((yysemantic_stack_[(3) - (3)].node)) );
            (yyval.name_test_list) = ntl;
        }
    break;

<<<<<<< TREE
  case 651:
=======
  case 655:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5877 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5907 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTSelection( LOC((yyloc)), (yysemantic_stack_[(2) - (1)].node), (yysemantic_stack_[(2) - (2)].pos_filter_list) );
            delete (yysemantic_stack_[(2) - (2)].pos_filter_list);
        }
    break;

<<<<<<< TREE
  case 652:
=======
  case 656:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5885 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5915 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.pos_filter_list) = NULL;
        }
    break;

<<<<<<< TREE
  case 653:
=======
  case 657:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5889 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5919 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.pos_filter_list) = (yysemantic_stack_[(1) - (1)].pos_filter_list);
        }
    break;

<<<<<<< TREE
  case 654:
=======
  case 658:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5896 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5926 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.pos_filter_list) = new FTSelection::pos_filter_list_t;
            (yyval.pos_filter_list)->push_back( dynamic_cast<FTPosFilter*>((yysemantic_stack_[(1) - (1)].node)) );
        }
    break;

<<<<<<< TREE
  case 655:
=======
  case 659:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5901 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5931 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yysemantic_stack_[(2) - (1)].pos_filter_list)->push_back( dynamic_cast<FTPosFilter*>((yysemantic_stack_[(2) - (2)].node)) );
            (yyval.pos_filter_list) = (yysemantic_stack_[(2) - (1)].pos_filter_list);
        }
    break;

<<<<<<< TREE
  case 656:
=======
  case 660:

/* Line 690 of lalr1.cc  */
#line 5939 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 661:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5909 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 657:

/* Line 690 of lalr1.cc  */
#line 5913 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5943 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTOr( LOC((yyloc)), (yysemantic_stack_[(3) - (1)].node), (yysemantic_stack_[(3) - (3)].node) );
        }
    break;

<<<<<<< TREE
  case 658:
=======
  case 662:

/* Line 690 of lalr1.cc  */
#line 5950 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 663:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5920 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 659:

/* Line 690 of lalr1.cc  */
#line 5924 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5954 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTAnd( LOC((yyloc)), (yysemantic_stack_[(3) - (1)].node), (yysemantic_stack_[(3) - (3)].node) );
        }
    break;

<<<<<<< TREE
  case 660:
=======
  case 664:

/* Line 690 of lalr1.cc  */
#line 5961 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 665:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5931 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 661:

/* Line 690 of lalr1.cc  */
#line 5935 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5965 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTMildNot( LOC((yyloc)), (yysemantic_stack_[(4) - (1)].node), (yysemantic_stack_[(4) - (4)].node) );
        }
    break;

<<<<<<< TREE
  case 662:
=======
  case 666:

/* Line 690 of lalr1.cc  */
#line 5972 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 667:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 663:

/* Line 690 of lalr1.cc  */
#line 5946 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5976 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTUnaryNot(
                LOC((yyloc)), dynamic_cast<FTPrimaryWithOptions*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

<<<<<<< TREE
  case 664:
=======
  case 668:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5955 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5985 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTPrimaryWithOptions(
                LOC((yyloc)),
                dynamic_cast<FTPrimary*>((yysemantic_stack_[(3) - (1)].node)),
                dynamic_cast<FTMatchOptions*>((yysemantic_stack_[(3) - (2)].node)),
                dynamic_cast<FTWeight*>((yysemantic_stack_[(3) - (3)].node))
            );
        }
    break;

<<<<<<< TREE
  case 665:

/* Line 690 of lalr1.cc  */
#line 5967 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = NULL;
        }
    break;

  case 666:

/* Line 690 of lalr1.cc  */
#line 5971 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 667:

/* Line 690 of lalr1.cc  */
#line 5978 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = NULL;
        }
    break;

  case 668:

/* Line 690 of lalr1.cc  */
#line 5982 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 669:
<<<<<<< TREE

/* Line 690 of lalr1.cc  */
#line 5990 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new FTWeight( LOC((yyloc)), dynamic_cast<exprnode*>((yysemantic_stack_[(4) - (3)].expr)) );
        }
    break;

  case 670:
=======
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 5998 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 5997 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = NULL;
        }
    break;

  case 671:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6006 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6001 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

<<<<<<< TREE
=======
  case 671:

/* Line 690 of lalr1.cc  */
#line 6008 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = NULL;
        }
    break;

>>>>>>> MERGE-SOURCE
  case 672:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6010 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6012 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 673:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6017 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6020 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.node) = NULL;
=======
            (yyval.node) = new FTWeight( LOC((yyloc)), dynamic_cast<exprnode*>((yysemantic_stack_[(4) - (3)].expr)) );
>>>>>>> MERGE-SOURCE
        }
    break;

  case 674:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6021 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 675:

/* Line 690 of lalr1.cc  */
#line 6029 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6028 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTWordsTimes(
                LOC((yyloc)),
                dynamic_cast<FTWords*>((yysemantic_stack_[(2) - (1)].node)),
                dynamic_cast<FTTimes*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

<<<<<<< TREE
=======
  case 675:

/* Line 690 of lalr1.cc  */
#line 6036 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(3) - (2)].node);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 676:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6040 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6040 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = NULL;
        }
    break;

  case 677:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6044 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 678:

/* Line 690 of lalr1.cc  */
#line 6052 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6047 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = NULL;
        }
    break;

  case 679:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6064 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6051 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 680:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6070 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6059 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTExtensionSelection(
                LOC((yyloc)),
                dynamic_cast<PragmaList*>((yysemantic_stack_[(4) - (1)].node)),
                dynamic_cast<FTSelection*>((yysemantic_stack_[(4) - (3)].node))
            );
        }
    break;

  case 681:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6079 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6070 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = NULL;
        }
    break;

<<<<<<< TREE
=======
  case 681:

/* Line 690 of lalr1.cc  */
#line 6074 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

>>>>>>> MERGE-SOURCE
  case 682:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6083 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6082 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
<<<<<<< TREE
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
=======
            (yyval.node) = new FTWords(
                LOC((yyloc)),
                dynamic_cast<FTWordsValue*>((yysemantic_stack_[(2) - (1)].node)),
                dynamic_cast<FTAnyallOption*>((yysemantic_stack_[(2) - (2)].node))
            );
>>>>>>> MERGE-SOURCE
        }
    break;

  case 683:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6091 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6094 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTWordsValue(
                LOC((yyloc)), static_cast<StringLiteral*>((yysemantic_stack_[(1) - (1)].expr)), NULL
            );
        }
    break;

  case 684:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6095 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new FTAnyallOption( LOC((yyloc)), (yysemantic_stack_[(2) - (2)].ft_anyall_value) );
        }
    break;

  case 685:

/* Line 690 of lalr1.cc  */
#line 6099 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6100 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTWordsValue(
                LOC((yyloc)), NULL, dynamic_cast<exprnode*>((yysemantic_stack_[(3) - (2)].expr))
            );
        }
    break;

  case 686:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6106 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6109 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTAnyallOption( LOC((yyloc)), ft_anyall_mode::any );
        }
    break;

  case 687:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6110 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6113 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 688:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6117 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6121 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTAnyallOption( LOC((yyloc)), (yysemantic_stack_[(2) - (2)].ft_anyall_value) );
        }
    break;

  case 689:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6121 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6125 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTAnyallOption( LOC((yyloc)), (yysemantic_stack_[(2) - (2)].ft_anyall_value) );
        }
    break;

<<<<<<< TREE
=======
  case 689:

/* Line 690 of lalr1.cc  */
#line 6129 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = new FTAnyallOption( LOC((yyloc)), ft_anyall_mode::phrase );
        }
    break;

>>>>>>> MERGE-SOURCE
  case 690:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6129 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6136 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.ft_anyall_value) = ft_anyall_mode::any;
        }
    break;

  case 691:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6133 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6140 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.ft_anyall_value) = ft_anyall_mode::any_word;
        }
    break;

  case 692:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6137 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6147 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.ft_anyall_value) = ft_anyall_mode::all;
        }
    break;

  case 693:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6141 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6151 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.ft_anyall_value) = ft_anyall_mode::all_words;
        }
    break;

  case 694:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6145 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6159 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 695:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6153 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6163 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 696:

/* Line 690 of lalr1.cc  */
#line 6167 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 697:

/* Line 690 of lalr1.cc  */
#line 6171 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 698:

/* Line 690 of lalr1.cc  */
#line 6175 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 699:

/* Line 690 of lalr1.cc  */
#line 6183 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTOrder( LOC((yyloc)) );
        }
    break;

<<<<<<< TREE
  case 696:
=======
  case 700:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6161 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6191 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTWindow(
                LOC((yyloc)),
                static_cast<AdditiveExpr*>((yysemantic_stack_[(3) - (2)].expr)),
                static_cast<FTUnit*>((yysemantic_stack_[(3) - (3)].node))
            );
        }
    break;

<<<<<<< TREE
  case 697:
=======
  case 701:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6173 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6203 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTDistance(
                LOC((yyloc)),
                dynamic_cast<FTRange*>((yysemantic_stack_[(3) - (2)].node)),
                dynamic_cast<FTUnit*>((yysemantic_stack_[(3) - (3)].node))
            );
        }
    break;

<<<<<<< TREE
  case 698:
=======
  case 702:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6185 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6215 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTUnit( LOC((yyloc)), ft_unit::words );
        }
    break;

<<<<<<< TREE
  case 699:
=======
  case 703:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6189 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6219 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTUnit( LOC((yyloc)), ft_unit::sentences );
        }
    break;

<<<<<<< TREE
  case 700:
=======
  case 704:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6193 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6223 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTUnit( LOC((yyloc)), ft_unit::paragraphs );
        }
    break;

<<<<<<< TREE
  case 701:
=======
  case 705:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6201 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6231 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            FTMatchOptions *mo = new FTMatchOptions( LOC((yyloc)) );
            mo->push_back( dynamic_cast<FTMatchOption*>((yysemantic_stack_[(2) - (2)].node)) );
            (yyval.node) = mo;
        }
    break;

<<<<<<< TREE
  case 702:
=======
  case 706:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6207 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6237 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            FTMatchOptions *mo = dynamic_cast<FTMatchOptions*>((yysemantic_stack_[(3) - (1)].node));
            mo->push_back( dynamic_cast<FTMatchOption*>((yysemantic_stack_[(3) - (3)].node)) );
            (yyval.node) = (yysemantic_stack_[(3) - (1)].node);
        }
    break;

<<<<<<< TREE
  case 703:

/* Line 690 of lalr1.cc  */
#line 6217 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 704:

/* Line 690 of lalr1.cc  */
#line 6221 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 705:

/* Line 690 of lalr1.cc  */
#line 6225 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 706:

/* Line 690 of lalr1.cc  */
#line 6229 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

=======
>>>>>>> MERGE-SOURCE
  case 707:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6233 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6247 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 708:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6237 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6251 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 709:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6241 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6255 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 710:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6245 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6259 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 711:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6253 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6263 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 712:

/* Line 690 of lalr1.cc  */
#line 6267 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 713:

/* Line 690 of lalr1.cc  */
#line 6271 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 714:

/* Line 690 of lalr1.cc  */
#line 6275 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 715:

/* Line 690 of lalr1.cc  */
#line 6283 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTCaseOption( LOC((yyloc)), ft_case_mode::sensitive );
        }
    break;

<<<<<<< TREE
  case 712:
=======
  case 716:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6257 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6287 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTCaseOption( LOC((yyloc)), ft_case_mode::insensitive );
        }
    break;

<<<<<<< TREE
  case 713:
=======
  case 717:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6261 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6291 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTCaseOption( LOC((yyloc)), ft_case_mode::lower );
        }
    break;

<<<<<<< TREE
  case 714:
=======
  case 718:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6265 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6295 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTCaseOption( LOC((yyloc)), ft_case_mode::upper );
        }
    break;

<<<<<<< TREE
  case 715:
=======
  case 719:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6273 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6303 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTDiacriticsOption(
                LOC((yyloc)), ft_diacritics_mode::sensitive
            );
        }
    break;

<<<<<<< TREE
  case 716:
=======
  case 720:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6279 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6309 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTDiacriticsOption(
                LOC((yyloc)), ft_diacritics_mode::insensitive
            );
        }
    break;

<<<<<<< TREE
  case 717:
=======
  case 721:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6289 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6319 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTExtensionOption(
                LOC((yyloc)), static_cast<QName*>((yysemantic_stack_[(3) - (2)].expr)), SYMTAB((yysemantic_stack_[(3) - (3)].sval))
            );
        }
    break;

<<<<<<< TREE
  case 718:
=======
  case 722:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6299 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6329 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStemOption( LOC((yyloc)), ft_stem_mode::stemming );
        }
    break;

<<<<<<< TREE
  case 719:
=======
  case 723:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6303 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6333 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStemOption( LOC((yyloc)), ft_stem_mode::no_stemming );
        }
    break;

<<<<<<< TREE
  case 720:
=======
  case 724:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6311 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6341 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            FTThesaurusOption::thesaurus_id_list_t *til = NULL;
            if ( (yysemantic_stack_[(2) - (2)].node) ) {
                til = new FTThesaurusOption::thesaurus_id_list_t;
                til->push_back( dynamic_cast<FTThesaurusID*>((yysemantic_stack_[(2) - (2)].node)) );
            }
            (yyval.node) = new FTThesaurusOption( LOC((yyloc)), til, !til );
            delete til;
        }
    break;

<<<<<<< TREE
  case 721:
=======
  case 725:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6321 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6351 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            FTThesaurusOption::thesaurus_id_list_t *til = (yysemantic_stack_[(5) - (4)].thesaurus_id_list);
            if ( (yysemantic_stack_[(5) - (3)].node) ) {
                if ( !til )
                    til = new FTThesaurusOption::thesaurus_id_list_t;
                til->push_back( dynamic_cast<FTThesaurusID*>((yysemantic_stack_[(5) - (3)].node)) );
            }
            (yyval.node) = new FTThesaurusOption( LOC((yyloc)), til, !(yysemantic_stack_[(5) - (3)].node) );
            delete til;
        }
    break;

<<<<<<< TREE
  case 722:
=======
  case 726:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6332 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6362 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTThesaurusOption( LOC((yyloc)), NULL, false, true );
        }
    break;

<<<<<<< TREE
  case 723:
=======
  case 727:

/* Line 690 of lalr1.cc  */
#line 6369 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 728:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6339 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6373 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 729:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6343 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = NULL;
        }
    break;

  case 725:

/* Line 690 of lalr1.cc  */
#line 6350 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6380 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.thesaurus_id_list) = NULL;
        }
    break;

<<<<<<< TREE
  case 726:
=======
  case 730:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6354 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6384 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.thesaurus_id_list) = (yysemantic_stack_[(2) - (2)].thesaurus_id_list);
        }
    break;

<<<<<<< TREE
  case 727:
=======
  case 731:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6361 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6391 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.thesaurus_id_list) = new FTThesaurusOption::thesaurus_id_list_t;
            (yyval.thesaurus_id_list)->push_back( dynamic_cast<FTThesaurusID*>((yysemantic_stack_[(1) - (1)].node)) );
        }
    break;

<<<<<<< TREE
  case 728:
=======
  case 732:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6366 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6396 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yysemantic_stack_[(3) - (1)].thesaurus_id_list)->push_back( dynamic_cast<FTThesaurusID*>((yysemantic_stack_[(3) - (3)].node)) );
            (yyval.thesaurus_id_list) = (yysemantic_stack_[(3) - (1)].thesaurus_id_list);
        }
    break;

<<<<<<< TREE
  case 729:
=======
  case 733:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6375 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6405 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTThesaurusID(
                LOC((yyloc)), SYMTAB((yysemantic_stack_[(4) - (2)].sval)), SYMTAB((yysemantic_stack_[(4) - (3)].sval)), dynamic_cast<FTRange*>((yysemantic_stack_[(4) - (4)].node))
            );
        }
    break;

<<<<<<< TREE
  case 730:
=======
  case 734:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6384 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6414 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.sval) = 0;
        }
    break;

<<<<<<< TREE
  case 731:
=======
  case 735:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6388 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6418 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.sval) = (yysemantic_stack_[(2) - (2)].sval);
        }
    break;

<<<<<<< TREE
  case 732:
=======
  case 736:

/* Line 690 of lalr1.cc  */
#line 6425 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = NULL;
        }
    break;

  case 737:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6395 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6429 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = NULL;
        }
    break;

  case 738:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6399 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
            (yyval.node) = (yysemantic_stack_[(2) - (1)].node);
        }
    break;

  case 734:

/* Line 690 of lalr1.cc  */
#line 6407 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6437 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStopWordOption(
                LOC((yyloc)),
                dynamic_cast<FTStopWords*>((yysemantic_stack_[(4) - (3)].node)), (yysemantic_stack_[(4) - (4)].incl_excl_list),
                ft_stop_words_mode::with
            );
            delete (yysemantic_stack_[(4) - (4)].incl_excl_list);
        }
    break;

<<<<<<< TREE
  case 735:
=======
  case 739:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6416 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6446 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStopWordOption(
                LOC((yyloc)), NULL, (yysemantic_stack_[(4) - (4)].incl_excl_list), ft_stop_words_mode::with_default
            );
            delete (yysemantic_stack_[(4) - (4)].incl_excl_list);
        }
    break;

<<<<<<< TREE
  case 736:
=======
  case 740:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6423 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6453 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStopWordOption(
                LOC((yyloc)), NULL, NULL, ft_stop_words_mode::without
            );
        }
    break;

<<<<<<< TREE
  case 737:
=======
  case 741:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6433 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6463 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStopWords( LOC((yyloc)), SYMTAB((yysemantic_stack_[(2) - (2)].sval)), NULL );
        }
    break;

<<<<<<< TREE
  case 738:
=======
  case 742:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6437 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6467 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStopWords( LOC((yyloc)), "", (yysemantic_stack_[(3) - (2)].strlist) );
        }
    break;

<<<<<<< TREE
  case 739:
=======
  case 743:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6444 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6474 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            string_list_t *sl = new string_list_t;
            sl->push_back( SYMTAB((yysemantic_stack_[(1) - (1)].sval)) );
            (yyval.strlist) = sl;
        }
    break;

<<<<<<< TREE
  case 740:
=======
  case 744:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6450 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6480 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            if ( (yysemantic_stack_[(3) - (1)].strlist) )
                (yysemantic_stack_[(3) - (1)].strlist)->push_back( SYMTAB((yysemantic_stack_[(3) - (3)].sval)) );
            (yyval.strlist) = (yysemantic_stack_[(3) - (1)].strlist);
        }
    break;

<<<<<<< TREE
  case 741:
=======
  case 745:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6459 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6489 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.incl_excl_list) = NULL;
        }
    break;

<<<<<<< TREE
  case 742:
=======
  case 746:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6463 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6493 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.incl_excl_list) = (yysemantic_stack_[(1) - (1)].incl_excl_list);
        }
    break;

<<<<<<< TREE
  case 743:
=======
  case 747:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6470 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6500 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.incl_excl_list) = new FTStopWordOption::incl_excl_list_t;
            (yyval.incl_excl_list)->push_back( dynamic_cast<FTStopWordsInclExcl*>((yysemantic_stack_[(1) - (1)].node)) );
        }
    break;

<<<<<<< TREE
  case 744:
=======
  case 748:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6475 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6505 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            FTStopWordOption::incl_excl_list_t *iel = (yysemantic_stack_[(2) - (1)].incl_excl_list);
            if ( !iel )
                iel = new FTStopWordOption::incl_excl_list_t;
            iel->push_back( dynamic_cast<FTStopWordsInclExcl*>((yysemantic_stack_[(2) - (2)].node)) );
            (yyval.incl_excl_list) = iel;
        }
    break;

<<<<<<< TREE
  case 745:
=======
  case 749:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6487 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6517 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStopWordsInclExcl(
                LOC((yyloc)),
                dynamic_cast<FTStopWords*>((yysemantic_stack_[(2) - (2)].node)),
                ft_stop_words_unex::union_
            );
        }
    break;

<<<<<<< TREE
  case 746:
=======
  case 750:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6495 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6525 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTStopWordsInclExcl(
                LOC((yyloc)),
                dynamic_cast<FTStopWords*>((yysemantic_stack_[(2) - (2)].node)),
                ft_stop_words_unex::except
            );
        }
    break;

<<<<<<< TREE
  case 747:
=======
  case 751:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6507 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6537 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTLanguageOption( LOC((yyloc)), SYMTAB((yysemantic_stack_[(2) - (2)].sval)) );
        }
    break;

<<<<<<< TREE
  case 748:
=======
  case 752:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6515 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6545 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTWildCardOption( LOC((yyloc)), ft_wild_card_mode::with );
        }
    break;

<<<<<<< TREE
  case 749:
=======
  case 753:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6519 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6549 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTWildCardOption( LOC((yyloc)), ft_wild_card_mode::without );
        }
    break;

<<<<<<< TREE
  case 750:
=======
  case 754:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6527 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6557 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTContent( LOC((yyloc)), ft_content_mode::at_start );
        }
    break;

<<<<<<< TREE
  case 751:
=======
  case 755:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6531 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6561 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTContent( LOC((yyloc)), ft_content_mode::at_end );
        }
    break;

<<<<<<< TREE
  case 752:
=======
  case 756:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6535 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6565 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTContent( LOC((yyloc)), ft_content_mode::entire );
        }
    break;

<<<<<<< TREE
  case 753:
=======
  case 757:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6543 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6573 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTTimes( LOC((yyloc)), dynamic_cast<FTRange*>((yysemantic_stack_[(3) - (2)].node)) );
        }
    break;

<<<<<<< TREE
  case 754:
=======
  case 758:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6551 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6581 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTRange( LOC((yyloc)), ft_range_mode::exactly, (yysemantic_stack_[(2) - (2)].expr) );
        }
    break;

<<<<<<< TREE
  case 755:
=======
  case 759:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6555 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6585 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTRange( LOC((yyloc)), ft_range_mode::at_least, (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

<<<<<<< TREE
  case 756:
=======
  case 760:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6559 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6589 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTRange( LOC((yyloc)), ft_range_mode::at_most, (yysemantic_stack_[(3) - (3)].expr) );
        }
    break;

<<<<<<< TREE
  case 757:
=======
  case 761:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6563 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6593 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTRange( LOC((yyloc)), ft_range_mode::from_to, (yysemantic_stack_[(4) - (2)].expr), (yysemantic_stack_[(4) - (4)].expr) );
        }
    break;

<<<<<<< TREE
  case 758:
=======
  case 762:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6571 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6601 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTScope(
                LOC((yyloc)),
                ft_scope::same,
                dynamic_cast<FTBigUnit*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

<<<<<<< TREE
  case 759:
=======
  case 763:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6579 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6609 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTScope(
                LOC((yyloc)),
                ft_scope::different,
                dynamic_cast<FTBigUnit*>((yysemantic_stack_[(2) - (2)].node))
            );
        }
    break;

<<<<<<< TREE
  case 760:
=======
  case 764:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6591 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6621 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTBigUnit( LOC((yyloc)), ft_big_unit::sentence );
        }
    break;

<<<<<<< TREE
  case 761:
=======
  case 765:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6595 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6625 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTBigUnit( LOC((yyloc)), ft_big_unit::paragraph );
        }
    break;

<<<<<<< TREE
  case 762:
=======
  case 766:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6603 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6633 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
            (yyval.node) = new FTIgnoreOption( LOC((yyloc)), static_cast<UnionExpr*>((yysemantic_stack_[(3) - (3)].expr)) );
        }
    break;

<<<<<<< TREE
  case 763:
=======
  case 767:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6617 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6647 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new JSONArrayConstructor( LOC((yyloc)), NULL );
        }
    break;

<<<<<<< TREE
  case 764:
=======
  case 768:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6621 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6651 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new JSONArrayConstructor( LOC((yyloc)), (yysemantic_stack_[(3) - (2)].expr) );
        }
    break;

<<<<<<< TREE
  case 765:
=======
  case 769:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6628 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6658 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          // TODO: fill in with the correct constructor
          (yyval.expr) = new JSONObjectConstructor(LOC((yyloc)), NULL, false);
        }
    break;

<<<<<<< TREE
  case 766:
=======
  case 770:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6633 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6663 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          // TODO: fill in with the correct constructor
          (yyval.expr) = new JSONObjectConstructor(LOC((yyloc)), (yysemantic_stack_[(3) - (2)].expr), false);
        }
    break;

<<<<<<< TREE
  case 767:
=======
  case 771:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6641 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6671 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          // TODO: fill in with the correct constructor
          (yyval.expr) = new JSONObjectConstructor(LOC((yyloc)), NULL, true);
        }
    break;

<<<<<<< TREE
  case 768:
=======
  case 772:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6646 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6676 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          // TODO: fill in with the correct constructor
          (yyval.expr) = new JSONObjectConstructor(LOC((yyloc)), (yysemantic_stack_[(3) - (2)].expr), true);
        }
    break;

<<<<<<< TREE
  case 769:

/* Line 690 of lalr1.cc  */
#line 6655 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = new JSONDirectObjectConstructor(LOC((yyloc)));
        }
    break;

  case 770:

/* Line 690 of lalr1.cc  */
#line 6659 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
  case 773:

/* Line 690 of lalr1.cc  */
#line 6685 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new JSONDirectObjectConstructor(LOC((yyloc)),
                                               dynamic_cast<JSONPairList*>((yysemantic_stack_[(3) - (2)].node)));
        }
    break;

<<<<<<< TREE
  case 771:
=======
  case 774:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6667 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6693 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          StringLiteral* sl = new StringLiteral( LOC((yyloc)), SYMTAB((yysemantic_stack_[(3) - (1)].sval)) );
          JSONPairList* jpl = new JSONPairList(LOC((yyloc)));
          jpl->push_back(new JSONPairConstructor(LOC((yyloc)), sl, (yysemantic_stack_[(3) - (3)].expr)));
          (yyval.node) = jpl;
        }
    break;

<<<<<<< TREE
  case 772:
=======
  case 775:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6674 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6700 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          JSONPairList* jpl = new JSONPairList(LOC((yyloc)));
          jpl->push_back(new JSONPairConstructor(LOC((yyloc)), (yysemantic_stack_[(3) - (1)].expr), (yysemantic_stack_[(3) - (3)].expr)));
          (yyval.node) = jpl;
        }
    break;

<<<<<<< TREE
  case 773:
=======
  case 776:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6680 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6706 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          JSONPairList* jpl = dynamic_cast<JSONPairList*>((yysemantic_stack_[(5) - (1)].node));
          assert(jpl);
          jpl->push_back(new JSONPairConstructor(LOC((yyloc)), (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr)));
          (yyval.node) = jpl;
        }
    break;

<<<<<<< TREE
  case 774:
=======
  case 777:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6687 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6713 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          JSONPairList* jpl = dynamic_cast<JSONPairList*>((yysemantic_stack_[(5) - (1)].node));
          assert(jpl);
          StringLiteral* sl = new StringLiteral( LOC((yyloc)), SYMTAB((yysemantic_stack_[(5) - (3)].sval)) );
          jpl->push_back(new JSONPairConstructor(LOC((yyloc)), sl, (yysemantic_stack_[(5) - (5)].expr)));
          (yyval.node) = jpl;
        }
    break;

<<<<<<< TREE
  case 775:
=======
  case 778:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6698 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6724 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new JSONObjectInsertExpr(LOC((yyloc)),
                                        (yysemantic_stack_[(5) - (3)].expr),
                                        (yysemantic_stack_[(5) - (5)].expr));
        }
    break;

<<<<<<< TREE
  case 776:
=======
  case 779:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6704 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6730 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          JSONPairList* jpl = dynamic_cast<JSONPairList*>((yysemantic_stack_[(5) - (3)].node));
          (yyval.expr) = new JSONObjectInsertExpr(
              LOC((yyloc)),
              new JSONDirectObjectConstructor(
                  LOC((yyloc)),
                  jpl),
              (yysemantic_stack_[(5) - (5)].expr));
        }
    break;

<<<<<<< TREE
  case 777:
=======
  case 780:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6714 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 6740 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new JSONArrayInsertExpr(LOC((yyloc)), (yysemantic_stack_[(8) - (3)].expr), (yysemantic_stack_[(8) - (5)].expr), (yysemantic_stack_[(8) - (8)].expr));
        }
    break;

<<<<<<< TREE
  case 778:

/* Line 690 of lalr1.cc  */
#line 6721 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
  case 781:

/* Line 690 of lalr1.cc  */
#line 6745 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = new JSONObjectInsertExpr(LOC((yyloc)),
                                        (yysemantic_stack_[(4) - (2)].expr),
                                        (yysemantic_stack_[(4) - (4)].expr));
        }
    break;

  case 782:

/* Line 690 of lalr1.cc  */
#line 6751 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          JSONPairList* jpl = dynamic_cast<JSONPairList*>((yysemantic_stack_[(4) - (2)].node));
          (yyval.expr) = new JSONObjectInsertExpr(
              LOC((yyloc)),
              new JSONDirectObjectConstructor(
                  LOC((yyloc)),
                  jpl),
              (yysemantic_stack_[(4) - (4)].expr));
        }
    break;

  case 783:

/* Line 690 of lalr1.cc  */
#line 6761 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = new JSONArrayInsertExpr(LOC((yyloc)), (yysemantic_stack_[(7) - (2)].expr), (yysemantic_stack_[(7) - (4)].expr), (yysemantic_stack_[(7) - (7)].expr));
        }
    break;

  case 784:

/* Line 690 of lalr1.cc  */
#line 6768 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          (yyval.expr) = new JSONArrayAppendExpr(LOC((yyloc)), (yysemantic_stack_[(5) - (3)].expr), (yysemantic_stack_[(5) - (5)].expr));
        }
    break;

<<<<<<< TREE
  case 779:

/* Line 690 of lalr1.cc  */
#line 6728 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
  case 785:

/* Line 690 of lalr1.cc  */
#line 6772 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.expr) = new JSONArrayAppendExpr(LOC((yyloc)), (yysemantic_stack_[(4) - (2)].expr), (yysemantic_stack_[(4) - (4)].expr));
        }
    break;

  case 786:

/* Line 690 of lalr1.cc  */
#line 6779 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          rchandle<DynamicFunctionInvocation> lDynamicFunctionInvocation =
          dynamic_cast<DynamicFunctionInvocation*>((yysemantic_stack_[(3) - (3)].expr));

          if (lDynamicFunctionInvocation == NULL)
          {
            error((yylocation_stack_[(3) - (3)]), "An object invocation is expected. A filter was found instead.");
            YYERROR;
          }

          if (lDynamicFunctionInvocation->getArgList()->size() != 1)
          {
            error((yylocation_stack_[(3) - (3)]), "An object invocation with exactly one argument is expected. Zero or more than one argument were found.");
            YYERROR;
          }

          (yyval.expr) = new JSONDeleteExpr(
                LOC((yyloc)),
                lDynamicFunctionInvocation->getPrimaryExpr(),
                lDynamicFunctionInvocation->getArgList()->operator[](0));
        }
    break;

<<<<<<< TREE
  case 780:

/* Line 690 of lalr1.cc  */
#line 6753 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
  case 787:

/* Line 690 of lalr1.cc  */
#line 6801 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          rchandle<DynamicFunctionInvocation> lDynamicFunctionInvocation =
          dynamic_cast<DynamicFunctionInvocation*>((yysemantic_stack_[(2) - (2)].expr));

          if (lDynamicFunctionInvocation == NULL)
          {
            error((yylocation_stack_[(2) - (2)]), "An object invocation is expected. A filter was found instead.");
            YYERROR;
          }

          if (lDynamicFunctionInvocation->getArgList()->size() != 1)
          {
            error((yylocation_stack_[(2) - (2)]), "An object invocation with exactly one argument is expected. Zero or more than one argument were found.");
            YYERROR;
          }

          (yyval.expr) = new JSONDeleteExpr(
                LOC((yyloc)),
                lDynamicFunctionInvocation->getPrimaryExpr(),
                lDynamicFunctionInvocation->getArgList()->operator[](0));
        }
    break;

  case 788:

/* Line 690 of lalr1.cc  */
#line 6826 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          rchandle<DynamicFunctionInvocation> lDynamicFunctionInvocation =
          dynamic_cast<DynamicFunctionInvocation*>((yysemantic_stack_[(5) - (3)].expr));

          if(lDynamicFunctionInvocation == NULL)
          {
            error((yylocation_stack_[(5) - (3)]), "An object invocation is expected. A filter was found instead.");
            delete (yysemantic_stack_[(5) - (5)].expr);
            YYERROR;
          }

          if (lDynamicFunctionInvocation->getArgList()->size() != 1)
          {
            error((yylocation_stack_[(5) - (3)]), "An object invocation with exactly one argument is expected. Zero or more than one argument were found.");
            delete (yysemantic_stack_[(5) - (5)].expr);
            YYERROR;
          }

          (yyval.expr) = new JSONRenameExpr(
                LOC((yyloc)),
                lDynamicFunctionInvocation->getPrimaryExpr(),
                lDynamicFunctionInvocation->getArgList()->operator[](0),
                (yysemantic_stack_[(5) - (5)].expr));
        }
    break;

<<<<<<< TREE
  case 781:

/* Line 690 of lalr1.cc  */
#line 6781 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
  case 789:

/* Line 690 of lalr1.cc  */
#line 6851 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          rchandle<DynamicFunctionInvocation> lDynamicFunctionInvocation =
          dynamic_cast<DynamicFunctionInvocation*>((yysemantic_stack_[(4) - (2)].expr));

          if(lDynamicFunctionInvocation == NULL)
          {
            error((yylocation_stack_[(4) - (2)]), "An object invocation is expected. A filter was found instead.");
            delete (yysemantic_stack_[(4) - (4)].expr);
            YYERROR;
          }

          if (lDynamicFunctionInvocation->getArgList()->size() != 1)
          {
            error((yylocation_stack_[(4) - (2)]), "An object invocation with exactly one argument is expected. Zero or more than one argument were found.");
            delete (yysemantic_stack_[(4) - (4)].expr);
            YYERROR;
          }

          (yyval.expr) = new JSONRenameExpr(
                LOC((yyloc)),
                lDynamicFunctionInvocation->getPrimaryExpr(),
                lDynamicFunctionInvocation->getArgList()->operator[](0),
                (yysemantic_stack_[(4) - (4)].expr));
        }
    break;

  case 790:

/* Line 690 of lalr1.cc  */
#line 6879 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    {
          rchandle<DynamicFunctionInvocation> lDynamicFunctionInvocation =
          dynamic_cast<DynamicFunctionInvocation*>((yysemantic_stack_[(7) - (5)].expr));

          if(lDynamicFunctionInvocation == NULL)
          {
            error((yylocation_stack_[(7) - (3)]), "An object invocation is expected. A filter was found instead.");
            delete (yysemantic_stack_[(7) - (7)].expr);
            YYERROR;
          }

          if (lDynamicFunctionInvocation->getArgList()->size() != 1)
          {
            error((yylocation_stack_[(7) - (3)]), "An object invocation with exactly one argument is expected. Zero or more than one argument were found.");
            delete (yysemantic_stack_[(7) - (7)].expr);
            YYERROR;
          }

          (yyval.expr) = new JSONReplaceExpr(
                LOC((yyloc)),
                lDynamicFunctionInvocation->getPrimaryExpr(),
                lDynamicFunctionInvocation->getArgList()->operator[](0),
                (yysemantic_stack_[(7) - (7)].expr));
        }
    break;

<<<<<<< TREE
  case 782:

/* Line 690 of lalr1.cc  */
#line 6809 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 783:

/* Line 690 of lalr1.cc  */
#line 6813 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 784:

/* Line 690 of lalr1.cc  */
#line 6817 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
    break;

  case 785:

/* Line 690 of lalr1.cc  */
#line 6825 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonItem);
        }
    break;

  case 786:

/* Line 690 of lalr1.cc  */
#line 6832 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonObject);
        }
    break;

  case 787:

/* Line 690 of lalr1.cc  */
#line 6839 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonArray);
        }
    break;

  case 790:

/* Line 690 of lalr1.cc  */
#line 6856 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    {
          auto_ptr<QName> lQName( static_cast<QName*>((yysemantic_stack_[(1) - (1)].expr)) );
          zstring const &tmp = lQName->get_qname();
          if ( tmp.find (':') != string::npos ) {
            error((yylocation_stack_[(1) - (1)]), "A NCName is expected, found a QName");
            YYERROR;
          }
          (yyval.sval) = SYMTAB_PUT(tmp.c_str());
        }
    break;

  case 792:

/* Line 690 of lalr1.cc  */
#line 6869 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("attribute"))); }
    break;

  case 793:
=======
  case 791:
>>>>>>> MERGE-SOURCE

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6870 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("comment"))); }
=======
#line 6904 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          rchandle<DynamicFunctionInvocation> lDynamicFunctionInvocation =
          dynamic_cast<DynamicFunctionInvocation*>((yysemantic_stack_[(6) - (4)].expr));

          if(lDynamicFunctionInvocation == NULL)
          {
            error((yylocation_stack_[(6) - (2)]), "An object invocation is expected. A filter was found instead.");
            delete (yysemantic_stack_[(6) - (6)].expr);
            YYERROR;
          }

          if (lDynamicFunctionInvocation->getArgList()->size() != 1)
          {
            error((yylocation_stack_[(6) - (2)]), "An object invocation with exactly one argument is expected. Zero or more than one argument were found.");
            delete (yysemantic_stack_[(6) - (6)].expr);
            YYERROR;
          }

          (yyval.expr) = new JSONReplaceExpr(
                LOC((yyloc)),
                lDynamicFunctionInvocation->getPrimaryExpr(),
                lDynamicFunctionInvocation->getArgList()->operator[](0),
                (yysemantic_stack_[(6) - (6)].expr));
        }
>>>>>>> MERGE-SOURCE
    break;

  case 794:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6871 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("document-node"))); }
=======
#line 6932 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 795:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6872 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("namespace-node"))); }
=======
#line 6936 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 796:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6873 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("element"))); }
=======
#line 6940 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = (yysemantic_stack_[(1) - (1)].node);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 797:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6874 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("item"))); }
=======
#line 6947 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonItem);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 798:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6875 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("if"))); }
=======
#line 6952 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonItem);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 799:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6876 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("node"))); }
=======
#line 6959 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonObject);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 800:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6877 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("processing-instruction"))); }
=======
#line 6964 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonObject);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 801:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6878 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("schema-attribute"))); }
=======
#line 6971 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonArray);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 802:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6879 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("schema-element"))); }
    break;

  case 803:

/* Line 690 of lalr1.cc  */
#line 6880 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("text"))); }
    break;

  case 804:

/* Line 690 of lalr1.cc  */
#line 6881 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("typeswitch"))); }
=======
#line 6976 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          (yyval.node) = new JSON_Test(LOC((yyloc)), store::StoreConsts::jsonArray);
        }
>>>>>>> MERGE-SOURCE
    break;

  case 805:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6882 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("switch"))); }
    break;

  case 806:

/* Line 690 of lalr1.cc  */
#line 6883 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("empty-sequence"))); }
=======
#line 6993 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    {
          auto_ptr<QName> lQName( static_cast<QName*>((yysemantic_stack_[(1) - (1)].expr)) );
          zstring const &tmp = lQName->get_qname();
          if ( tmp.find (':') != string::npos ) {
            error((yylocation_stack_[(1) - (1)]), "A NCName is expected, found a QName");
            YYERROR;
          }
          (yyval.sval) = SYMTAB_PUT(tmp.c_str());
        }
>>>>>>> MERGE-SOURCE
    break;

  case 807:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6884 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("while"))); }
=======
#line 7006 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("attribute"))); }
    break;

  case 806:

/* Line 690 of lalr1.cc  */
#line 7007 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("comment"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 809:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6889 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval))); }
=======
#line 7008 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("document-node"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 810:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6890 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("xquery"))); }
=======
#line 7009 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("namespace-node"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 811:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6891 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("empty"))); }
=======
#line 7010 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("element"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 812:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6892 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("boundary-space"))); }
=======
#line 7012 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("if"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 813:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6893 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ft-option"))); }
=======
#line 7013 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("node"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 814:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6894 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("base-uri"))); }
=======
#line 7014 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("processing-instruction"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 815:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6895 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("lax"))); }
=======
#line 7015 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("schema-attribute"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 816:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6896 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("strict"))); }
=======
#line 7016 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("schema-element"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 817:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6897 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("idiv"))); }
=======
#line 7017 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("text"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 818:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6898 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("document"))); }
=======
#line 7018 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("typeswitch"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 819:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6899 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ftnot"))); }
=======
#line 7019 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("switch"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 820:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6900 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("not"))); }
=======
#line 7020 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("empty-sequence"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 821:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6901 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sensitive"))); }
    break;

  case 822:

/* Line 690 of lalr1.cc  */
#line 6902 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("insensitive"))); }
=======
#line 7021 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("while"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 823:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6903 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("diacritics"))); }
=======
#line 7026 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval))); }
>>>>>>> MERGE-SOURCE
    break;

  case 824:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6904 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("without"))); }
=======
#line 7027 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("xquery"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 825:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6905 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("stemming"))); }
=======
#line 7028 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("empty"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 826:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6906 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("thesaurus"))); }
=======
#line 7029 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("boundary-space"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 827:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6907 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("stop"))); }
=======
#line 7030 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ft-option"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 828:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6908 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("wildcards"))); }
=======
#line 7031 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("base-uri"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 829:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6909 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("entire"))); }
=======
#line 7032 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("lax"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 830:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6910 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("content"))); }
=======
#line 7033 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("strict"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 831:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6911 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("word"))); }
=======
#line 7034 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("idiv"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 832:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6912 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("start"))); }
=======
#line 7035 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("document"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 833:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6913 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("end"))); }
=======
#line 7036 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ftnot"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 834:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6914 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("most"))); }
=======
#line 7037 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("not"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 835:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6915 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("skip"))); }
=======
#line 7038 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sensitive"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 836:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6916 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("copy"))); }
=======
#line 7039 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("insensitive"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 837:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6917 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("general"))); }
=======
#line 7040 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("diacritics"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 838:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6918 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("value"))); }
=======
#line 7041 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("without"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 839:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6919 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("eq"))); }
=======
#line 7042 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("stemming"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 840:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6920 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ne"))); }
=======
#line 7043 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("thesaurus"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 841:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6921 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("lt"))); }
=======
#line 7044 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("stop"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 842:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6922 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("le"))); }
=======
#line 7045 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("wildcards"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 843:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6923 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("gt"))); }
=======
#line 7046 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("entire"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 844:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6924 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ge"))); }
=======
#line 7047 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("content"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 845:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6925 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("at"))); }
=======
#line 7048 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("word"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 846:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6926 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("context"))); }
=======
#line 7049 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("start"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 847:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6927 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("variable"))); }
=======
#line 7050 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("end"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 848:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6928 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("return"))); }
=======
#line 7051 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("most"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 849:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6929 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("for"))); }
=======
#line 7052 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("skip"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 850:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("allowing"))); }
=======
#line 7053 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("copy"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 851:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6931 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sliding"))); }
=======
#line 7054 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("general"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 852:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6932 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("tumbling"))); }
=======
#line 7055 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("value"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 853:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6933 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("previous"))); }
=======
#line 7056 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("eq"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 854:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6934 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("next"))); }
=======
#line 7057 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ne"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 855:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6935 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("only"))); }
=======
#line 7058 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("lt"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 856:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6936 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("when"))); }
=======
#line 7059 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("le"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 857:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6937 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("count"))); }
=======
#line 7060 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("gt"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 858:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6938 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("in"))); }
=======
#line 7061 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ge"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 859:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6939 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("let"))); }
=======
#line 7062 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("at"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 860:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6940 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("where"))); }
=======
#line 7063 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("context"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 861:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6941 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("by"))); }
=======
#line 7064 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("variable"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 862:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("group"))); }
=======
#line 7065 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("return"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 863:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6943 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("order"))); }
=======
#line 7066 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("for"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 864:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6944 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("stable"))); }
=======
#line 7067 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("allowing"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 865:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ascending"))); }
=======
#line 7068 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sliding"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 866:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6946 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("descending"))); }
=======
#line 7069 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("tumbling"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 867:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6947 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("greatest"))); }
=======
#line 7070 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("previous"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 868:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6948 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("least"))); }
=======
#line 7071 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("next"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 869:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6949 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("collation"))); }
=======
#line 7072 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("only"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 870:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6950 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("some"))); }
=======
#line 7073 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("when"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 871:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6951 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("every"))); }
=======
#line 7074 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("count"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 872:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6952 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("satisfies"))); }
=======
#line 7075 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("in"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 873:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6953 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("case"))); }
=======
#line 7076 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("let"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 874:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6954 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("as"))); }
=======
#line 7077 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("where"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 875:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6955 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("then"))); }
=======
#line 7078 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("by"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 876:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6956 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("else"))); }
=======
#line 7079 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("group"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 877:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6957 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("or"))); }
=======
#line 7080 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("order"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 878:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6958 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("and"))); }
=======
#line 7081 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("stable"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 879:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6959 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("instance"))); }
=======
#line 7082 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ascending"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 880:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6960 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("of"))); }
=======
#line 7083 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("descending"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 881:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6961 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("castable"))); }
=======
#line 7084 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("greatest"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 882:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6962 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("to"))); }
=======
#line 7085 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("least"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 883:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6963 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("div"))); }
=======
#line 7086 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("collation"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 884:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6964 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("mod"))); }
=======
#line 7087 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("some"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 885:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6965 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("union"))); }
=======
#line 7088 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("every"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 886:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6966 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("intersect"))); }
=======
#line 7089 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("satisfies"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 887:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6967 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("except"))); }
=======
#line 7090 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("case"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 888:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6968 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("validate"))); }
=======
#line 7091 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("as"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 889:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6969 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("type"))); }
=======
#line 7092 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("then"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 890:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6970 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("cast"))); }
=======
#line 7093 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("else"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 891:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6971 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("treat"))); }
=======
#line 7094 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("or"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 892:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6972 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("is"))); }
=======
#line 7095 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("and"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 893:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6973 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("preserve"))); }
=======
#line 7096 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("instance"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 894:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6974 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("strip"))); }
=======
#line 7097 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("of"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 895:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6975 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("namespace"))); }
=======
#line 7098 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("castable"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 896:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6976 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("external"))); }
=======
#line 7099 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("to"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 897:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6977 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("encoding"))); }
=======
#line 7100 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("div"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 898:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6978 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("no-preserve"))); }
=======
#line 7101 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("mod"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 899:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6979 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("inherit"))); }
=======
#line 7102 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("union"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 900:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6980 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("no-inherit"))); }
=======
#line 7103 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("intersect"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 901:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6981 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("declare"))); }
=======
#line 7104 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("except"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 902:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6982 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("construction"))); }
=======
#line 7105 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("validate"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 903:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6983 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ordering"))); }
=======
#line 7106 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("type"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 904:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6984 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("default"))); }
=======
#line 7107 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("cast"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 905:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6985 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("copy-namespaces"))); }
=======
#line 7108 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("treat"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 906:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6986 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("option"))); }
=======
#line 7109 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("is"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 907:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6987 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("version"))); }
=======
#line 7110 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("preserve"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 908:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6988 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("import"))); }
=======
#line 7111 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("strip"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 909:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6989 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("schema"))); }
=======
#line 7112 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("namespace"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 910:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6990 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("module"))); }
=======
#line 7113 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("external"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 911:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6991 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("function"))); }
=======
#line 7114 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("encoding"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 912:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6992 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("score"))); }
=======
#line 7115 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("no-preserve"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 913:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6993 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("contains"))); }
=======
#line 7116 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("inherit"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 914:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6994 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("weight"))); }
=======
#line 7117 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("no-inherit"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 915:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6995 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("window"))); }
=======
#line 7118 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("declare"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 916:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6996 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("distance"))); }
=======
#line 7119 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("construction"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 917:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6997 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("occurs"))); }
=======
#line 7120 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ordering"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 918:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6998 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("times"))); }
=======
#line 7121 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("default"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 919:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 6999 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("same"))); }
=======
#line 7122 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("copy-namespaces"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 920:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7000 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("different"))); }
=======
#line 7123 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("option"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 921:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7001 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("lowercase"))); }
=======
#line 7124 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("version"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 922:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7002 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("uppercase"))); }
=======
#line 7125 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("import"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 923:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7003 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("relationship"))); }
=======
#line 7126 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("schema"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 924:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7004 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("levels"))); }
=======
#line 7127 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("module"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 925:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7005 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("language"))); }
=======
#line 7128 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("function"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 926:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7006 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("any"))); }
=======
#line 7129 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("score"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 927:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7007 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("all"))); }
=======
#line 7130 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("contains"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 928:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7008 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("exactly"))); }
=======
#line 7131 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("weight"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 929:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7009 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("from"))); }
=======
#line 7132 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("window"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 930:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7010 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("words"))); }
=======
#line 7133 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("distance"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 931:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7011 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sentences"))); }
=======
#line 7134 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("occurs"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 932:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7012 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sentence"))); }
=======
#line 7135 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("times"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 933:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7013 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("phrase"))); }
=======
#line 7136 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("same"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 934:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7014 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("paragraph"))); }
=======
#line 7137 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("different"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 935:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7015 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("paragraphs"))); }
=======
#line 7138 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("lowercase"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 936:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7016 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("replace"))); }
=======
#line 7139 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("uppercase"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 937:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7017 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("modify"))); }
=======
#line 7140 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("relationship"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 938:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7018 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("first"))); }
=======
#line 7141 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("levels"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 939:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7019 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("insert"))); }
=======
#line 7142 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("language"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 940:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7020 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("before"))); }
=======
#line 7143 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("any"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 941:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7021 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("after"))); }
=======
#line 7144 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("all"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 942:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7022 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("revalidation"))); }
=======
#line 7145 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("exactly"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 943:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7023 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("with"))); }
=======
#line 7146 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("from"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 944:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7024 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("nodes"))); }
=======
#line 7147 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("words"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 945:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7025 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("rename"))); }
=======
#line 7148 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sentences"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 946:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7026 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("last"))); }
=======
#line 7149 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sentence"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 947:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7027 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("delete"))); }
=======
#line 7150 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("phrase"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 948:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7028 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("into"))); }
=======
#line 7151 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("paragraph"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 949:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7029 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("simple"))); }
=======
#line 7152 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("paragraphs"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 950:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7030 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sequential"))); }
=======
#line 7154 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("modify"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 951:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7031 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("updating"))); }
=======
#line 7155 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("first"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 952:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7032 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ordered"))); }
=======
#line 7157 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("before"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 953:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7033 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("unordered"))); }
=======
#line 7158 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("after"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 954:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7034 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("returning"))); }
=======
#line 7159 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("revalidation"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 955:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7035 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("exit"))); }
=======
#line 7160 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("with"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 956:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7036 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("loop"))); }
=======
#line 7161 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("nodes"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 957:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7037 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("break"))); }
=======
#line 7163 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("last"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 958:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7038 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("continue"))); }
=======
#line 7165 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("into"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 959:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7039 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("try"))); }
=======
#line 7166 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("simple"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 960:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7040 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("catch"))); }
=======
#line 7167 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("sequential"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 961:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7041 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("using"))); }
=======
#line 7168 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("updating"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 962:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7042 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("set"))); }
=======
#line 7169 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ordered"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 963:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7043 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("index"))); }
=======
#line 7170 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("unordered"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 964:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7044 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("unique"))); }
=======
#line 7171 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("returning"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 965:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7045 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("non"))); }
=======
#line 7172 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("exit"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 966:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7046 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("on"))); }
=======
#line 7173 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("loop"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 967:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7047 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("range"))); }
=======
#line 7174 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("break"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 968:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7048 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("equality"))); }
=======
#line 7175 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("continue"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 969:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7049 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("manually"))); }
=======
#line 7176 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("try"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 970:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7050 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("automatically"))); }
=======
#line 7177 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("catch"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 971:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7051 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("maintained"))); }
=======
#line 7178 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("using"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 972:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7052 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("decimal-format"))); }
=======
#line 7179 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("set"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 973:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7053 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("decimal-separator"))); }
=======
#line 7180 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("index"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 974:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7054 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("grouping-separator"))); }
=======
#line 7181 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("unique"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 975:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7055 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("infinity"))); }
=======
#line 7182 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("non"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 976:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7056 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("minus-sign"))); }
=======
#line 7183 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("on"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 977:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7057 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("NaN"))); }
=======
#line 7184 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("range"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 978:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7058 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("percent"))); }
=======
#line 7185 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("equality"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 979:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7059 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("per-mille"))); }
=======
#line 7186 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("manually"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 980:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7060 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("zero-digit"))); }
=======
#line 7187 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("automatically"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 981:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7061 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("digit"))); }
=======
#line 7188 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("maintained"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 982:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7062 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("pattern-separator"))); }
=======
#line 7189 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("decimal-format"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 983:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7063 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("collection"))); }
=======
#line 7190 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("decimal-separator"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 984:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7064 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("const"))); }
=======
#line 7191 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("grouping-separator"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 985:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7065 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("append-only"))); }
=======
#line 7192 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("infinity"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 986:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7066 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("queue"))); }
=======
#line 7193 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("minus-sign"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 987:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7067 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("mutable"))); }
=======
#line 7194 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("NaN"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 988:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7068 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("read-only"))); }
=======
#line 7195 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("percent"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 989:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7069 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("integrity"))); }
=======
#line 7196 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("per-mille"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 990:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7070 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("constraint"))); }
=======
#line 7197 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("zero-digit"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 991:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7071 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("check"))); }
=======
#line 7198 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("digit"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 992:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7072 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("key"))); }
=======
#line 7199 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("pattern-separator"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 993:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7073 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("foreach"))); }
=======
#line 7200 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("collection"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 994:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7074 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("foreign"))); }
=======
#line 7201 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("const"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 995:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7075 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("keys"))); }
=======
#line 7202 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("append-only"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 996:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7076 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ancestor"))); }
=======
#line 7203 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("queue"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 997:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7077 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("child"))); }
=======
#line 7204 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("mutable"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 998:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7078 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("descendant"))); }
=======
#line 7205 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("read-only"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 999:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7079 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("parent"))); }
=======
#line 7206 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("integrity"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1000:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7080 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("preceding"))); }
=======
#line 7207 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("constraint"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1001:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7081 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("self"))); }
=======
#line 7208 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("check"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1002:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7082 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("following"))); }
=======
#line 7209 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("key"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1003:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7083 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ancestor-or-self"))); }
=======
#line 7210 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("foreach"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1004:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7084 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("descendant-or-self"))); }
=======
#line 7211 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("foreign"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1005:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7085 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("following-sibling"))); }
=======
#line 7212 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("keys"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1006:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7086 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("preceding-sibling"))); }
=======
#line 7213 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ancestor"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1007:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7087 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("json"))); }
=======
#line 7214 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("child"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1008:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7088 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("append"))); }
=======
#line 7215 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("descendant"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1009:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7089 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("position"))); }
=======
#line 7216 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("parent"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1010:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7091 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("array"))); }
=======
#line 7217 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("preceding"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1011:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7092 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("object"))); }
=======
#line 7218 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("self"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1012:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7093 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("structured-item"))); }
=======
#line 7219 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("following"))); }
>>>>>>> MERGE-SOURCE
    break;

  case 1013:

/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 7098 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 7220 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("ancestor-or-self"))); }
    break;

  case 1012:

/* Line 690 of lalr1.cc  */
#line 7221 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("descendant-or-self"))); }
    break;

  case 1013:

/* Line 690 of lalr1.cc  */
#line 7222 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("following-sibling"))); }
    break;

  case 1014:

/* Line 690 of lalr1.cc  */
#line 7223 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("preceding-sibling"))); }
    break;

  case 1015:

/* Line 690 of lalr1.cc  */
#line 7226 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB(SYMTAB_PUT("position"))); }
    break;

  case 1016:

/* Line 690 of lalr1.cc  */
#line 7235 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE
    { (yyval.expr) = new QName(LOC((yyloc)), SYMTAB((yysemantic_stack_[(1) - (1)].sval)), true); }
    break;



/* Line 690 of lalr1.cc  */
<<<<<<< TREE
#line 12108 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 12246 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE
	default:
          break;
      }
    /* User semantic actions sometimes alter yychar, and that requires
       that yytoken be updated with the new translation.  We take the
       approach of translating immediately before every use of yytoken.
       One alternative is translating here after every semantic action,
       but that translation would be missed if the semantic action
       invokes YYABORT, YYACCEPT, or YYERROR immediately after altering
       yychar.  In the case of YYABORT or YYACCEPT, an incorrect
       destructor might then be invoked immediately.  In the case of
       YYERROR, subsequent parser actions might lead to an incorrect
       destructor call or verbose syntax error message before the
       lookahead is translated.  */
    YY_SYMBOL_PRINT ("-> $$ =", yyr1_[yyn], &yyval, &yyloc);

    yypop_ (yylen);
    yylen = 0;
    YY_STACK_PRINT ();

    yysemantic_stack_.push (yyval);
    yylocation_stack_.push (yyloc);

    /* Shift the result of the reduction.  */
    yyn = yyr1_[yyn];
    yystate = yypgoto_[yyn - yyntokens_] + yystate_stack_[0];
    if (0 <= yystate && yystate <= yylast_
	&& yycheck_[yystate] == yystate_stack_[0])
      yystate = yytable_[yystate];
    else
      yystate = yydefgoto_[yyn - yyntokens_];
    goto yynewstate;

  /*------------------------------------.
  | yyerrlab -- here on detecting error |
  `------------------------------------*/
  yyerrlab:
    /* Make sure we have latest lookahead translation.  See comments at
       user semantic actions for why this is necessary.  */
    yytoken = yytranslate_ (yychar);

    /* If not already recovering from an error, report this error.  */
    if (!yyerrstatus_)
      {
	++yynerrs_;
	if (yychar == yyempty_)
	  yytoken = yyempty_;
	error (yylloc, yysyntax_error_ (yystate, yytoken));
      }

    yyerror_range[1] = yylloc;
    if (yyerrstatus_ == 3)
      {
	/* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

	if (yychar <= yyeof_)
	  {
	  /* Return failure if at end of input.  */
	  if (yychar == yyeof_)
	    YYABORT;
	  }
	else
	  {
	    yydestruct_ ("Error: discarding", yytoken, &yylval, &yylloc);
	    yychar = yyempty_;
	  }
      }

    /* Else will try to reuse lookahead token after shifting the error
       token.  */
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;

    yyerror_range[1] = yylocation_stack_[yylen - 1];
    /* Do not reclaim the symbols of the rule which action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    yystate = yystate_stack_[0];
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;	/* Each real token shifted decrements this.  */

    for (;;)
      {
	yyn = yypact_[yystate];
	if (!yy_pact_value_is_default_ (yyn))
	{
	  yyn += yyterror_;
	  if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
	    {
	      yyn = yytable_[yyn];
	      if (0 < yyn)
		break;
	    }
	}

	/* Pop the current state because it cannot handle the error token.  */
	if (yystate_stack_.height () == 1)
	YYABORT;

	yyerror_range[1] = yylocation_stack_[0];
	yydestruct_ ("Error: popping",
		     yystos_[yystate],
		     &yysemantic_stack_[0], &yylocation_stack_[0]);
	yypop_ ();
	yystate = yystate_stack_[0];
	YY_STACK_PRINT ();
      }

    yyerror_range[2] = yylloc;
    // Using YYLLOC is tempting, but would change the location of
    // the lookahead.  YYLOC is available though.
    YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
    yysemantic_stack_.push (yylval);
    yylocation_stack_.push (yyloc);

    /* Shift the error token.  */
    YY_SYMBOL_PRINT ("Shifting", yystos_[yyn],
		     &yysemantic_stack_[0], &yylocation_stack_[0]);

    yystate = yyn;
    goto yynewstate;

    /* Accept.  */
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    /* Abort.  */
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (yychar != yyempty_)
      {
        /* Make sure we have latest lookahead translation.  See comments
           at user semantic actions for why this is necessary.  */
        yytoken = yytranslate_ (yychar);
        yydestruct_ ("Cleanup: discarding lookahead", yytoken, &yylval,
                     &yylloc);
      }

    /* Do not reclaim the symbols of the rule which action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (yystate_stack_.height () != 1)
      {
	yydestruct_ ("Cleanup: popping",
		   yystos_[yystate_stack_[0]],
		   &yysemantic_stack_[0],
		   &yylocation_stack_[0]);
	yypop_ ();
      }

    return yyresult;
  }

  // Generate an error message.
  std::string
  jsoniq_parser::yysyntax_error_ (int yystate, int yytoken)
  {
    std::string yyres;
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yytoken) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yychar.
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (yytoken != yyempty_)
      {
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            /* Stay within bounds of both yycheck and yytname.  */
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = 0;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
<<<<<<< TREE
  const short int jsoniq_parser::yypact_ninf_ = -1494;
=======
  const short int jsoniq_parser::yypact_ninf_ = -1481;
>>>>>>> MERGE-SOURCE
  const short int
  jsoniq_parser::yypact_[] =
  {
<<<<<<< TREE
      6520,  7748,  7748,  7748,  7748, -1494, -1494,    82,   259, -1494,
     779,    15, -1494, -1494, -1494,    56, -1494, -1494, -1494,   268,
   -1494,   298,   696,   280,   350,   651, -1494,   -42, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494,   359, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494,   432, -1494,   474, -1494,   481,   533, -1494,
     387, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494,   598, -1494, -1494, -1494, -1494, -1494, -1494, -1494,   567,
   -1494, -1494, -1494, -1494, -1494, 15583, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494,   659, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494,  4689,  9890, 10196, 15583, -1494,
   -1494,   628, -1494, -1494, -1494, -1494,   634, -1494, -1494, -1494,
    5905, -1494,  6214, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494,   679, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494,   109,   767,   785, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,   141, -1494,
     200, -1494,  -110,   391, -1494, -1494, -1494, -1494, -1494, -1494,
     850, -1494,   763,   776,   793, -1494, -1494,   869,   878, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494,   772, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, 10502, 10808, -1494,   732, -1494, -1494, -1494, -1494,
    6828,  7136,  1051, -1494,  8054, -1494, -1494,   459,    72, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494,    83, -1494, -1494, -1494, -1494, -1494, -1494,
     458, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,  7748,
   -1494, -1494, -1494, -1494,    11, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494,   222, -1494,   861, -1494, -1494, -1494,
     578, -1494,   454, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
     885,   961, -1494,   922,   804,   957,   719,   661,   684,    31,
   -1494,  1010,   860,   960,   964, 11726, -1494,   874, -1494, -1494,
     506, -1494, -1494, -1494, -1494,    34, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,   924,
     916, -1494, -1494, -1494, -1494, -1494,   890, -1494,  7748,   891,
     892,   896,  7748,   119,   119,  1053,   562,   764,     4, 15876,
   15583,    -7,  1036, 15583,   931,   969,   571,  5905,   780,   849,
   15583, 15583,   792,   615,    53, -1494, -1494, -1494,  5905,  7748,
    7748, 12032,   273,   949, 12032,  1104,   176,   325, 15583,   987,
     967,  1003, -1494, 12032, 15583,  7748, 12032, 12032, 15583,  7748,
     962,   965, 12032, 15583, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494,   971, -1494, 15583, -1494,
   -1494,   930,  7442,   996,    35,   998,   924,   966,   975,   976,
   15583,  4689, -1494,   968,   172, -1494,   599, -1494,    78,  1086,
   12032, 12032,    67, -1494, -1494, -1494,  1108, 12032,   919, -1494,
    1106,  1107, 12032, 12032, 12644, 12032, 12032,  4998, 12032, 12644,
   12032,   902,   904, 15583,   950,   951, 12032, 12032,  7748,   893,
   -1494,    52, -1494,    41, 12032,  7136, -1494, -1494, -1494, -1494,
   -1494,   779,   651,    91,    94,  1138,  8360,  3105,  8666,  3432,
     567, -1494, -1494,   272,   567, -1494, 12032,  4064, -1494,  1025,
   -1494,   -42,   977,   974,   978,  7748, 12032, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, 15583, -1494,   858,   859,
   15583,  1031, 12338, 12338, 12338, -1494, 12338, 12338, -1494, 12338,
   -1494, 12338, -1494, -1494, -1494, -1494, -1494, -1494, -1494, 12338,
   12338,  1080, 12338, 12338, 12338, 12338, 12338, 12338, 12338, 12338,
   12338, 12338, 12338, 12338,   917,  1057,  1059,  1060, -1494, -1494,
   -1494, 12644, 11114, -1494,  5301, 12032,  9278,  1001, -1494,  1007,
    9584, -1494, -1494, -1494, -1494,   300, -1494,   328, -1494, -1494,
   -1494, -1494, -1494, -1494,  1050,  1052,   280,  1130, -1494, -1494,
   15876,  1009,   594, 15583,  1000,  1002,  1009,  1053,  1034,  1033,
   -1494, -1494, -1494,   107,   913,  1072,   864, 15583,  1026, 12032,
    1054, 15583, 15583, -1494,  1039,   989,   990,    71, 15583,  1083,
     500, -1494,  7748, -1494,    96, -1494,  5905,  1082,  1136,  5905,
    1053,  1085,    57, 15583, 12032,   -42,   238,   278, -1494,   494,
     999,   121,   129,  1032, -1494,  1004,  7748,  7748,   286,   434,
   12032,   290, -1494, -1494, 12032,  4998, -1494, 12032, 12032, 12032,
   12032, -1494, 12032, -1494, 12032, -1494, 15583,  1086, -1494,    20,
     355,   379, -1494, -1494, -1494,   403, -1494,    49,   315, -1494,
   -1494,    34,   188,   511,   212,   124,  1090,   618,   945,   963,
     954,   -26, -1494,  1048, -1494, -1494,  1005,   133,  7442,   417,
    4380,   893, -1494, -1494, -1494,   959, -1494,   459,   876,  1165,
     706, -1494, -1494,   110, -1494, -1494, -1494,   112, -1494,    28,
   -1494, -1494, -1494, -1494, -1494,  3748, -1494, -1494, -1494, 15583,
    1028, 12032,  1081, -1494, -1494, -1494,  1093, -1494,    37, -1494,
   -1494,  1093, 15583,    14,   961, -1494, -1494, -1494, -1494, -1494,
   12338, -1494, -1494, -1494,    69, -1494,   661,   661,   442,   684,
     684,   684,   684,    31,    31, -1494, -1494, 14118, 14118, 15583,
   15583, -1494, -1494,   419, -1494, -1494, -1494, -1494, -1494,   234,
   -1494, -1494, -1494,   507, -1494, -1494, -1494,   529,   119, -1494,
   -1494,   269,   641,   710, -1494,   280, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494,  1009, -1494,  1070, 14411,
    1062, 12032, -1494, -1494, -1494,  1111,  1053,  1053,  1009, -1494,
     760,  1053,   751, 15583,   680,   748,  1179, -1494, -1494,   918,
     717, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494,   107,   153,   979,   649, 12032, -1494, 15583,  1115,
     908,  1053, -1494, -1494,  1063,  1111, 14118,  1094,  1121,  1035,
    1019,  1089,  1053,  1058,  1091,  1126,  1053, 14118, 12032,    16,
   -1494, -1494, -1494,  1071,  1110, 12032, 12032,  1079, -1494,  1131,
    1133,  7748, -1494,  1046,  1056,  1098, 12032,  1092,  1045, 12032,
   -1494,  1123,  1125, -1494,   138,   144,   169,  1202, -1494,    30,
   -1494,   486,  1099, -1494, -1494,  1214, -1494,  1219, -1494,   683,
   12032, 12032, 12032,   762, 12032, 12032, 12032, 12032, 12032, 12032,
   12032, 12032, 12032, 12644,  1135, 12032, 12032, -1494,  8972,   343,
    1006, -1494, -1494, -1494, -1494, -1494, -1494,   438, -1494, -1494,
   12032,   114,   329,    28,  8666,  3432,  8666,  1175, -1494, -1494,
   12032,   816,  1150, -1494, 15583,  1151, -1494, 15290,  1132,  1143,
   12032,    51,  1116,    29,   532,  1011, -1494, -1494,   809,    14,
   -1494, 12032,    69,   887,   509, -1494,   973,   308,  1008,  1013,
   -1494, -1494,   849, -1494,   993,   704,  1117,  1118,  1119,  1122,
    1124,  1127,  1128,  1129,  1139,  1140,  1141, 14411,  1142,  1144,
    1149,  1152, -1494,  1153, -1494,   702, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,  1145,
   -1494, -1494, -1494, -1494, 11420, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494,   789, -1494,  1243,   845, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494,   992, -1494, -1494,
    1251, -1494, -1494, -1494, -1494, -1494,   731,  1258, -1494,   803,
   -1494, -1494, -1494,  1117,  1118,  1119,  1124,  1127,  1128,  1129,
    1139,  1140,  1144,  1149,  1152, -1494,   702,   702, 12644,   997,
     981, -1494,  1111,   153,  1061,  1109,  7748, -1494, -1494, -1494,
   14118, -1494,  7748,  1053,  1187, -1494, -1494, -1494,  1053,  1187,
   -1494, -1494, 12032,  1168,  7748, 15583, -1494, -1494, 12032, 12032,
     569, -1494,    44,   610, -1494, 13239,   686, -1494,   812, -1494,
    1134, -1494, -1494,  7748, -1494, 12032, -1494, -1494, 12032, 12032,
    1113,  1131,  1215, -1494,  1182, -1494,   638, -1494, -1494,  1312,
   -1494, -1494,  7748, 15583, -1494,   685, -1494, -1494, -1494,  7748,
    1146,  1148,  1084,  1087, -1494, -1494, -1494,  1088,  1095, -1494,
   -1494, -1494,  1224, -1494, -1494, -1494, -1494,  1100,   450, 15583,
    1137, -1494,  1166,  1170,  1173,  1178, -1494,   861,   611,  4380,
    1006, -1494,  8972,  4380, -1494, -1494,  1165,   607, -1494, -1494,
   -1494,  1150, -1494,  1053, -1494,   881, -1494,   303,  1227, -1494,
   12032,   734,  1081, 15583, -1494,    40, 15583, -1494, 12032,  1188,
   12032,  1207, 12032,   149,  1192, 12032,  1193, -1494,  1225,  1226,
   12032, 15583,   933,  1265, -1494, -1494, -1494,   424,  1163, -1494,
      69,  1097, -1494, -1494,   166, -1494,   270,   120,  1101,    69,
     270, 12338, -1494,   441, -1494, -1494, -1494, -1494, -1494, -1494,
      69,  1205,  1067,   913,   120, -1494, -1494,  1064,  1279, -1494,
   -1494, -1494,  1171,    54, 14704, 12946,  1172,  5603, 15583, 15583,
    1176, 14997,  1177,  1180,  1181,  1183,  1184,  1185,  1186, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494,  1332,    -1,  1334,    -1,  1102,  1259, -1494, -1494,
    1195, 15583,  1120, -1494, -1494, 12644, -1494,  1190, -1494,  1250,
    1252,  1273,  1053,  1187, -1494, 12032,  1196, -1494, -1494, -1494,
    1197, -1494,   283, 12032,  7748,  1198,   287, -1494, 15583,   720,
   -1494, 13532,   281, -1494, 13825,  1199, -1494, -1494,  1203, -1494,
   -1494, -1494, 12032,   877,  1202, 15583,   842, -1494,  1206,  1202,
   15583, -1494,  1210, -1494, -1494, 12032, 12032, 12032, 12032,  1066,
   12032, 12032, -1494, 12032, 12032, 12032, 12032,  8972,   463, -1494,
   -1494, -1494, -1494, -1494,  1227, -1494, -1494, -1494,  1053, 12032,
   -1494,  1237, -1494, -1494, 12032,  1249, -1494, -1494, 12032, -1494,
     362, -1494, 12032,  1253, 12032, -1494, 12032, 15583, 15583, -1494,
     813, -1494, 12032, -1494, -1494, -1494,  1213, 12338, -1494, -1494,
   -1494, -1494, -1494,   352, 12338, 12338,   699, -1494,  1008, -1494,
     584, -1494,  1013,    69,  1245, -1494, -1494,  1147, -1494, -1494,
   -1494, -1494, -1494, -1494,  1212,  1216, -1494,   535,   548,  1307,
    1217, -1494,   558, -1494,  1218, -1494,  1221,  1222,  1223, -1494,
   -1494,   563,   568, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494,   312,   312, -1494,    -1, -1494, -1494,   596, -1494,  1378,
      18,  1315,  1228, 12644,   -55,  1155,  1242, -1494,  8972, 12032,
    1053, -1494, -1494, -1494, 12032, 12032, -1494, -1494, -1494,  8972,
    8972,  1319,  7748, 14118, 15583,   724, 15583, 12032, 15583,   728,
    8972, -1494,   294,    19,  1202, 15583, -1494,  1229,  1202, -1494,
   -1494, -1494, -1494, -1494, 12032, -1494, -1494, -1494,   173,   184,
     211, 12032, -1494, -1494, -1494,  1310, 12032, -1494, 12032, -1494,
   12032,  1272, -1494, 12032, -1494, -1494, -1494,  1367, -1494, -1494,
   -1494,   684, 12338, 12338,   442,   721, -1494, -1494, -1494, -1494,
   -1494, -1494, 12032, -1494, -1494, -1494, 15583, -1494, 15583, -1494,
   14118, -1494, 14118,  1327, -1494, -1494, -1494, -1494, 15583, -1494,
   15583, -1494, -1494, -1494, -1494,  1394, -1494, -1494, -1494,  1154,
    1317, -1494, -1494,  1320, -1494,   882, 15583,  1311,  1201, 15583,
   12644, -1494, -1494,  1187, -1494, -1494, 14118, -1494, -1494, -1494,
    1338, 12032,  1247, -1494,  1340,  8972, -1494, 15583,   669,   631,
   -1494,  1231,  1202, -1494,  1238, -1494,  1239,  1131,  1133,   440,
   -1494,  1310, -1494, -1494, 12032, -1494,  1318,   442,   442, 12338,
     445,  1254,  1255,  1294,  1256,  1260, -1494, -1494, 14118,  1261,
    1262, -1494, -1494,  1315, 12644, -1494,  1227,  1156, 15583,  1321,
    1211,  1320,   743, 14118,  7748, 14118,  1267, -1494, -1494,  1358,
     701, -1494, -1494, -1494, -1494,  1271,   841, -1494, -1494, -1494,
    1263, -1494,  8972,   880, -1494, -1494, -1494, 15583,   442, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, 12032,  1158, 15583,  1339,  7748,   747, -1494, -1494,   749,
   12032, -1494, -1494, -1494, -1494, -1494, -1494, -1494,  1343, -1494,
   -1494,  1159,  1161, 15583, -1494, -1494, 12032,  8972, 15583,  1162,
   12032,  1167,  1277, 12644, -1494, 12644,  8972, -1494,  1269,  1189,
   15583,  1230,  1346, 15583,  1169, 12644, -1494
=======
      4438,  8672,  8672,  8672,  8672, -1481, -1481,    71,   297, -1481,
     815,    37, -1481, -1481, -1481,   490, -1481, -1481, -1481,   505,
   -1481,   525,    60,   594,   601,   410, -1481,    10, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481,   610, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,   682, -1481,   669, -1481,   672,   694, -1481,
     355, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481,   745, -1481, -1481, -1481, -1481, -1481, -1481, -1481,   755,
   -1481, -1481, -1481, -1481, -1481, 18836, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,   805, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481,  5054, 10786, 11088, 18836, -1481, -1481,
     793, -1481, -1481, -1481, -1481,   799, -1481, -1481, -1481,  6864,
   -1481,  7162, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,   813, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481,    76,   769,   775, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, 14712, -1481,  5660, -1481,
   15014,   400, -1481, -1481, -1481, -1481, -1481, -1481,   854, -1481,
     750,   768,   774, -1481, -1481,   871,   878, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,   762,
   -1481, 14410, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   11390, 11692, 11994, -1481,  4746,  7464,  1036, -1481,  8974, -1481,
   -1481,   810,   101, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481,   107, -1481, -1481,
   -1481, -1481, -1481, -1481,   580, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,  8672, -1481, -1481, -1481, -1481,   282, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481,   251, -1481,   851,
   -1481, -1481, -1481,   604, -1481,   603, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,   884,   962, -1481, -1481,  1129,   818,   959,
     508,   635,   237,   572, -1481,  1018,   876,   977,   979, 13504,
   -1481,   886, -1481, -1481,    27, -1481, -1481, -1481, -1481,   650,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,   938,   930, -1481, -1481, -1481, -1481, -1481,
     905, -1481,  8672,   906,   907,   908,  8672,    64,    64,  1059,
      14,   481,   703, 19127, 18836,    22,  1048, 18836,   943,   981,
     652,  6864,   811,   847, 18836, 18836,   792,   733,    53, -1481,
   -1481, -1481,  6864,  8672,  8672, 12900,    33,   948, 12900,  1104,
     254,   132, 18836,   986,   963,  1001, -1481, 12900, 18836,  8672,
   12900, 12900, 18836,  8672,   956,   960, 12900, 18836, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481,   969, -1481, 18836, -1481,
   -1481,   928,  7766,   994,   361,   996,   938,   965,   967,   968,
   18836,  5357, -1481,   972,   188, -1481,   644, -1481,    91,  1084,
   12900, 12900,    92, -1481, -1481, -1481,  1111, 12900,   914, -1481,
    1102,  1103, 12900, 13202, 15316,   650, 12900, 13202,  5963,    -4,
       7, 12900, 15316,   630, 12900,   894,   898, 18836,   944,   947,
   12900, 12900,  8068,   895, -1481, -1481,    62, -1481,    57, 12900,
     910,  7464, -1481, -1481, -1481, -1481, -1481,   815,   410,   114,
     130,  1142,  9276,  2877,  9578,  3196,   755, -1481, -1481,   312,
     755, -1481, 12900,  3828, -1481,  1027, -1481,    10,   980,   982,
     983,  8672, 12900, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, 18836, -1481,   861,   869, 18836,  1033, 13806, 13806,
   14108, -1481, 14108, 14108, -1481, 14108, -1481, 14108, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, 14108, 14108,  1086, 14108, 14108,
   14108, 14108, 14108, 14108, 14108, 14108, 14108, 14108, 14108, 14108,
     923,  1065,  1066,  1068, -1481, -1481, -1481, 15316, 12296, -1481,
    6264, 12900,  9880,  1009, -1481,  1015, 10182, -1481, -1481, -1481,
   -1481,   327, -1481,   360, -1481, -1481, -1481, -1481, -1481, -1481,
    1058,  1060,   594,  1138, -1481, -1481, 19127,  1262,   646, 18836,
    1010,  1011,  1262,  1059,  1050,  1043, -1481, -1481, -1481,   128,
     931,  1088,   875, 18836,  1038, 12900,  1067, 18836, 18836, -1481,
    1051,  1000,  1005,   261, 18836,  1096,   395, -1481,  8672, -1481,
     111, -1481,  6864,  1097,  1148,  6864,  1059,  1098,   640, 18836,
   12900,    10,   274,   299, -1481,    79,  1013,   125,   134,  1042,
   -1481,  1014,  8672,  8672,   356,   715, 12900,   322, -1481, -1481,
   12900,  5963, -1481, 12900, 12900, 12900, 12900, -1481, 12900, -1481,
   12900, -1481, 18836,  1084, -1481,   310,   377,   386, -1481, -1481,
   -1481,   388, -1481,    32,   276, -1481, -1481,   650,   389,   405,
      17,   290, 12900, 12900,  1106,   803, 12900,   966, 15618,   973,
     277, -1481,  1062, -1481, -1481,  1022,   149,  7766,   393,  4136,
     895, -1481, -1481, -1481,   976, 12900, -1481,   810,   786,  1183,
     187, -1481, -1481,   157, -1481, -1481, -1481,   159, -1481,    41,
   -1481, -1481, -1481, -1481, -1481,  3512, -1481, -1481, -1481, 18836,
    1046, 12900,  1099, -1481, -1481, -1481,  1112, -1481,    74, -1481,
   -1481,  1112, 18836,    21,   962, -1481, -1481, -1481, -1481, -1481,
   14108, -1481, -1481, -1481,   483, -1481,   635,   635,   656,   237,
     237,   237,   237,   572,   572, -1481, -1481, 17377, 17377, 18836,
   18836, -1481, -1481,   394, -1481, -1481, -1481, -1481, -1481,   215,
   -1481, -1481, -1481,   466, -1481, -1481, -1481,   472,    64, -1481,
   -1481,   731,   764,   434, -1481,   594, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481,  1262, -1481,  1089, 17670,
    1076, 12900, -1481, -1481, -1481,  1128,  1059,  1059,  1262, -1481,
     870,  1059,   720, 18836,   298,   684,  1195, -1481, -1481,   936,
      80, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481,   128,    42,   997,   613, 12900, -1481, 18836,  1133,
     927,  1059, -1481, -1481,  1079,  1128, 17377,  1116,  1141,  1053,
    1044,  1108,  1059,  1083,  1113,  1151,  1059, 17377, 12900,    29,
   -1481, -1481, -1481,  1091,  1130, 12900, 12900,  1107, -1481,  1150,
    1153,  8672, -1481,  1071,  1072,  1109, 12900,  1118,  1061, 12900,
   -1481,  1143,  1146, -1481,   158,   167,   193,  1229, -1481,   344,
   -1481,   664,  1115, -1481, -1481,  1245, -1481,  1246, -1481,   814,
   12900, 12900, 12900,   819, 12900, 12900, 12900, 12900, 12900,  1179,
   -1481, 12900, 12900, -1481, 12900, 12900,   441, 15316,  1159, 12900,
   12900, -1481, 10484,   162,  1029, -1481, -1481, -1481, -1481, -1481,
   -1481,   487, -1481, -1481, 12900, -1481,   160,   110,    41,  9578,
    3196,  9578,  1200, -1481, -1481, 12900,   863,  1175, -1481, 18836,
    1176, -1481, 18545,  1158,  1169, 12900,   265,  1145,    47,   536,
    1030, -1481, -1481,   749,    21, -1481, 12900,   483,   919,   267,
   -1481,  1004,   103,  1028,  1031, -1481, -1481,   847, -1481,  1023,
     527,  1140,  1147,  1149,  1156,  1162,  1163,  1164,  1166,  1167,
    1168,  1170, 16205,  1171,  1172,  1173,  1174,  1182,  1184, -1481,
      31, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481,  1154, -1481, -1481, -1481, -1481, 12598,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,   808,
   -1481,  1269, 17670,   873, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,  1012, -1481, -1481,  1273, -1481, -1481, -1481,
   -1481, -1481,   592,  1276, -1481,   821, -1481, -1481, -1481,  1140,
    1147,  1149,  1162,  1163,  1164,  1166,  1167,  1168,  1172, -1481,
      31,    31, 15316,  1016,   999, -1481,  1128,    42,  1075,  1135,
    8672, -1481, -1481, -1481, 17377, -1481,  8672,  1059,  1232, -1481,
   -1481, -1481,  1059,  1232, -1481, -1481, 12900,  1210,  8672, 18836,
   -1481, -1481, 12900, 12900,    95, -1481,    25,   535, -1481, 16498,
     629, -1481,   837, -1481,  1177, -1481, -1481,  8672, -1481, 12900,
   -1481, -1481, 12900, 12900,  1155,  1150,  1254, -1481,  1223, -1481,
     817, -1481, -1481,  1352, -1481, -1481,  8672, 18836, -1481,   840,
   -1481, -1481, -1481,  8672,  1178,  1181,  1121,  1122, -1481, -1481,
   -1481,  1123,  1125, -1481, -1481, -1481,  1267, -1481,  1045, -1481,
   -1481, -1481,  1126, 12900,   514, 18836,  1180, -1481,  1208,  1213,
    1216,  1220, -1481,   851,   678,  4136,  1029, -1481,  8370,  4136,
   -1481, -1481,  1183,   469, -1481, -1481, -1481,  1175, -1481,  1059,
   -1481,   916, -1481,   330,  1268, -1481, 12900,   772,  1099, 18836,
   -1481,    83, 18836, -1481, 12900,  1228, 12900,  1249, 12900,   271,
    1230, 12900,  1231, -1481,  1261,  1263, 12900, 18836,   958,  1303,
   -1481, -1481, -1481,   402,  1197, -1481,   483,  1131, -1481, -1481,
     190, -1481,   708,   144,  1132,   483,   708, 14108, -1481,   203,
   -1481, -1481, -1481, -1481, -1481, -1481,   483,  1235,  1105,   931,
     144, -1481, -1481,  1100,  1309, -1481, -1481, -1481,  1201,    93,
   17963, 15912,  1202,  6564, 18836, 18836,  1205, 18254,  1206, -1481,
    1207,  1209,  1212,  1214,  1215,  1217,  1218, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
    1369,   289,  1372,   289,  1134,  1299, -1481, -1481,  1237, 18836,
    1152, -1481, -1481, 15316, -1481,  1227, -1481,  1286,  1290,  1321,
    1059,  1232, -1481, 12900,  1234, -1481, -1481, -1481,  1233, -1481,
      72, 12900,  8672,  1236,   253, -1481, 18836,    -8, -1481, 16791,
     363, -1481, 17084,  1238, -1481, -1481,  1239, -1481, -1481, -1481,
   12900,   860,  1229, 18836,   903, -1481,  1241,  1229, 18836, -1481,
    1242, -1481, -1481, 12900, 12900, 12900, 12900,  1110, 12900, 12900,
   -1481, 12900, -1481, 12900, 12900, 12900, 12900, 10484,   499, -1481,
   -1481, -1481, -1481, -1481,  1268, -1481, -1481, -1481,  1059, 12900,
   -1481,  1278, -1481, -1481, 12900,  1274, -1481, -1481, 12900, -1481,
     565, -1481, 12900,  1281, 12900, -1481, 12900, 18836, 18836, -1481,
     778, -1481, 12900, -1481, -1481, -1481,  1247, 14108, -1481, -1481,
   -1481, -1481, -1481,   564, 14108, 14108,   -90, -1481,  1028, -1481,
     486, -1481,  1031,   483,  1279, -1481, -1481,  1157, -1481, -1481,
   -1481, -1481, -1481, -1481,  1248,  1250, -1481,   478,   492,  1335,
    1251, -1481,   493, -1481,  1252, -1481,  1253,  1255,  1256, -1481,
   -1481,   539,   543, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481,    81,    81, -1481,   289, -1481, -1481,   548, -1481,
    1405,    15,  1338,  1257, 15316,   -23,  1160,  1275, -1481, 10484,
   12900,  1059, -1481, -1481, -1481, 12900, 12900, -1481, -1481, -1481,
   10484, 10484,  1353,  8672, 17377, 18836,    -1, 18836, 12900, 18836,
     268, 10484, -1481,   504,    51,  1229, 18836, -1481,  1259,  1229,
   -1481, -1481, -1481, -1481, -1481, 12900, -1481, -1481, -1481, -1481,
     216,   230,   236, 12900, -1481, -1481, -1481,  1340, 12900, -1481,
   12900, -1481, 12900,  1301, -1481, 12900, -1481, -1481, -1481,  1396,
   -1481, -1481, -1481,   237, 14108, 14108,   656,   737, -1481, -1481,
   -1481, -1481, -1481, -1481, 12900, -1481, -1481, -1481, 18836, -1481,
   18836, -1481, 17377, -1481, 17377,  1356, -1481, -1481, -1481, -1481,
   18836, -1481, 18836, -1481, -1481, -1481, -1481,  1424, -1481, -1481,
   -1481,  1185,  1346, -1481, -1481,  1350, -1481,   882, 18836,  1341,
    1240, 18836, 15316, -1481, -1481,  1232, -1481, -1481, 17377, -1481,
   -1481, -1481,  1364, 12900,  1277, -1481,  1367, 10484, -1481, 18836,
     485,   674, -1481,  1265,  1229, -1481,  1270, -1481,  1272,  1150,
    1153,   417, -1481,  1340, -1481, -1481, 12900, -1481,  1347,   656,
     656, 14108,   425,  1284,  1285,  1322,  1288,  1292, -1481, -1481,
   17377,  1293,  1294, -1481, -1481,  1338, 15316, -1481,  1268,  1186,
   18836,  1355,  1258,  1350,   627, 17377,  8672, 17377,  1282, -1481,
   -1481,  1384,   618, -1481, -1481, -1481, -1481,  1300,   710, -1481,
   -1481, -1481,  1287, -1481, 10484,   868, -1481, -1481, -1481, 18836,
     656, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481, 12900,  1187, 18836,  1368,  8672,   690, -1481,
   -1481,   746, 12900, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
    1370, -1481, -1481,  1188,  1190, 18836, -1481, -1481, 12900, 10484,
   18836,  1192, 12900,  1193,  1296, 15316, -1481, 15316, 10484, -1481,
    1298,  1198, 18836,  1264,  1382, 18836,  1194, 15316, -1481
>>>>>>> MERGE-SOURCE
  };

  /* YYDEFACT[S] -- default reduction number in state S.  Performed when
     YYTABLE doesn't specify something else to do.  Zero means the
     default is an error.  */
  const unsigned short int
  jsoniq_parser::yydefact_[] =
  {
<<<<<<< TREE
       167,   170,   170,   170,     0,   809,  1013,   122,   124,   615,
     901,   910,   850,   814,   812,   793,   902,   905,   857,   818,
     794,   796,   260,   911,   798,   908,   879,   859,   834,   795,
     854,   855,   906,   903,   853,   800,   909,   801,   802,   950,
     962,   949,   851,   870,   864,   803,   852,   805,   804,   951,
     888,   889,   856,   831,   972,   973,   974,   975,   976,   977,
     978,   979,   980,   981,   982,   996,  1003,   878,   874,   865,
     845,   792,   873,   881,   890,   997,   869,   473,   846,   847,
     904,   998,  1004,   866,   883,     0,   481,   475,   876,   811,
     867,   868,   897,   871,   887,   896,  1002,  1005,   817,   858,
     899,   474,   886,   892,   797,     0,     0,     0,     0,   406,
     884,   895,   900,   898,   877,   863,   952,   861,   862,   999,
       0,   405,     0,  1000,  1006,   893,   848,   872,  1001,   213,
     894,   875,   882,   891,   885,   953,   839,   844,   843,   842,
     841,   840,   806,   860,     0,   810,     0,   907,   832,   472,
     476,   477,   941,   940,   942,   816,   815,   835,   947,   799,
     939,   944,   945,   936,   838,   880,   938,   948,   946,   937,
     836,   943,   957,   958,   955,   956,   954,   807,   959,   960,
     961,   927,   926,   913,   830,   823,   920,   916,   833,   829,
     928,   261,   819,   820,   813,   822,   925,   924,   921,   917,
     934,   935,   933,   923,   919,   912,   821,   932,   931,   825,
     827,   826,   918,   922,   914,   828,   915,   824,   930,   983,
     984,   985,   986,   987,   988,   964,   965,   963,   969,   970,
     971,   966,   967,   968,   837,   989,   990,   991,   992,   993,
     994,   995,     0,     0,  1007,  1008,  1009,  1011,  1010,  1012,
     167,   167,     0,     2,   167,     9,    11,    25,     0,    30,
      33,    38,    39,    40,    41,    42,    43,    44,    34,    60,
      61,    35,    36,     0,    78,    81,    82,    37,    83,    84,
       0,   120,    85,    86,    87,    88,    20,   164,   165,   166,
     173,   176,   464,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   187,   188,     0,   214,   222,   217,   249,   255,
       0,   247,     0,   248,   224,   218,   186,   219,   185,   220,
     223,   357,   359,   361,   371,   373,   377,   379,   382,   387,
     390,   393,   395,   397,   399,     0,   403,   410,   409,   411,
       0,   429,   412,   434,   435,   436,   443,   455,   469,   471,
     456,   457,   458,   461,   462,   459,   463,   490,   491,   460,
     494,   496,   497,   498,   495,   543,   544,   545,   546,   547,
     548,   549,   470,    45,   225,   226,   228,   227,   229,   221,
     466,   467,   468,   465,   231,   234,   230,   232,   233,     0,
     791,   808,   901,   910,   908,   810,     0,   168,   169,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   128,   130,   131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   194,   793,   818,   796,   849,   911,
     798,   859,   800,   870,   803,   805,   804,   888,   792,   847,
     871,   895,   952,   953,   947,   939,   945,   936,   836,   957,
     958,   955,   807,   959,   929,  1008,   478,   791,     0,   789,
     769,     0,     0,   214,     0,     0,   790,   798,   805,   804,
       0,     0,   763,   959,     0,   222,     0,   479,     0,   510,
       0,     0,     0,   790,   432,   433,     0,     0,     0,   539,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     765,     0,   767,     0,     0,   167,     3,     4,     1,    10,
      12,     0,     0,     0,     0,     6,   167,     0,   167,     0,
       0,   121,   174,     0,     0,   192,     0,     0,   201,     0,
     260,     0,     0,     0,     0,     0,     0,   261,   206,   235,
     254,   250,   256,   251,   253,   252,     0,   259,     0,     0,
       0,     0,     0,     0,     0,   422,     0,     0,   420,     0,
     366,     0,   421,   414,   419,   418,   417,   416,   415,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   408,   407,
     404,     0,     0,   430,     0,     0,     0,   444,   452,     0,
       0,   551,   553,   557,   559,     0,   126,     0,   788,    49,
      46,    47,    50,    51,     0,     0,     0,     0,    52,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     622,   623,   624,     0,   105,   144,     0,     0,   114,     0,
       0,     0,     0,   129,     0,     0,     0,     0,     0,   136,
       0,   140,   170,   493,     0,    62,     0,    71,     0,     0,
       0,    63,     0,     0,     0,     0,     0,     0,   328,     0,
       0,     0,     0,     0,   613,     0,     0,     0,     0,   196,
       0,     0,   190,   189,     0,     0,   770,     0,     0,     0,
       0,   478,     0,   764,     0,   480,   511,   510,   507,     0,
       0,     0,   541,   540,   431,     0,   538,     0,     0,   635,
     636,   779,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   641,     0,   204,   205,     0,     0,     0,     0,
       0,   209,   210,   766,   768,     0,     5,    26,     0,    27,
       0,     7,    31,     0,    17,     8,    32,     0,    21,   901,
      79,    18,    80,    22,   195,     0,   193,   215,   216,     0,
       0,     0,     0,   207,   236,   297,   258,   262,     0,   237,
     238,   257,     0,     0,   358,   360,   364,   370,   369,   368,
       0,   365,   362,   363,     0,   374,   381,   380,   378,   384,
     385,   386,   383,   388,   389,   392,   391,     0,     0,     0,
       0,   413,   427,     0,   451,   449,   448,   450,   447,     0,
     486,   445,   488,     0,   453,   492,   484,     0,     0,   123,
=======
       167,   170,   170,   170,     0,   821,  1016,   122,   124,   619,
     913,   922,   862,   826,   824,   806,   914,   917,   869,   830,
     807,   809,   259,   923,   810,   920,   891,   871,   846,   808,
     866,   867,   918,   915,   865,   812,   921,   813,   814,   958,
     970,   957,   863,   882,   876,   815,   864,   817,   816,   959,
     900,   901,   868,   843,   980,   981,   982,   983,   984,   985,
     986,   987,   988,   989,   990,  1004,  1011,   890,   886,   877,
     857,   805,   885,   893,   902,  1005,   881,   474,   858,   859,
     916,  1006,  1012,   878,   895,     0,   482,   476,   888,   823,
     879,   880,   909,   883,   899,   908,  1010,  1013,   829,   870,
     911,   475,   898,   904,     0,     0,     0,     0,   407,   896,
     907,   912,   910,   889,   875,   960,   873,   874,  1007,     0,
     406,     0,  1008,  1014,   905,   860,   884,  1009,   906,   887,
     894,   903,   897,   961,   851,   856,   855,   854,   853,   852,
     818,   872,     0,   822,     0,   919,   844,   473,   477,   478,
     951,   950,   952,   828,   827,   847,     0,   811,     0,   954,
       0,     0,   850,   892,   949,   956,   955,   948,   848,   953,
     965,   966,   963,   964,   962,   819,   967,   968,   969,   939,
     938,   925,   842,   835,   932,   928,   845,   841,   940,   260,
     831,   832,   825,   834,   937,   936,   933,   929,   946,   947,
     945,   935,   931,   924,   833,   944,   943,   837,   839,   838,
     930,   934,   926,   840,   927,   836,   942,   991,   992,   993,
     994,   995,   996,   972,   973,   971,   977,   978,   979,   974,
     975,   976,   849,   997,   998,   999,  1000,  1001,  1002,  1003,
       0,     0,     0,  1015,   167,   167,     0,     2,   167,     9,
      11,    25,     0,    30,    33,    38,    39,    40,    41,    42,
      43,    44,    34,    60,    61,    35,    36,     0,    78,    81,
      82,    37,    83,    84,     0,   120,    85,    86,    87,    88,
      20,   164,   165,   166,   173,   176,   465,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   187,     0,   213,   221,
     216,   248,   254,     0,   246,     0,   247,   223,   217,   186,
     218,   185,   219,   222,   356,   358,   360,   362,   372,   374,
     378,   380,   383,   388,   391,   394,   396,   398,   400,     0,
     404,   411,   410,   412,     0,   430,   413,   435,   436,   437,
     444,   456,   470,   472,   457,   458,   459,   462,   463,   460,
     464,   491,   492,   461,   495,   497,   498,   499,   496,   544,
     545,   546,   547,   548,   549,   550,   471,    45,   224,   225,
     227,   226,   228,   220,   467,   468,   469,   466,   230,   233,
     229,   231,   232,     0,   804,   820,   913,   922,   920,   822,
       0,   168,   169,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
     130,   131,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   278,   279,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   194,   806,
     830,   809,   861,   923,   810,   871,   812,   882,   815,   817,
     816,   900,   805,   859,   883,   907,   960,   961,   848,   965,
     966,   963,   819,   967,   941,   832,   479,   804,     0,   802,
     189,     0,     0,   213,     0,     0,   803,   810,   817,   816,
       0,   170,   767,   967,     0,   221,     0,   480,     0,   511,
       0,     0,     0,   803,   433,   434,     0,     0,     0,   540,
       0,     0,   811,   954,     0,   787,   811,   954,     0,     0,
       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   769,     0,   771,     0,     0,
       0,   167,     3,     4,     1,    10,    12,     0,     0,     0,
       0,     6,   167,     0,   167,     0,     0,   121,   174,     0,
       0,   192,     0,     0,   201,     0,   259,     0,     0,     0,
       0,     0,     0,   260,   206,   234,   253,   249,   255,   250,
     252,   251,     0,   258,     0,     0,     0,     0,     0,     0,
       0,   423,     0,     0,   421,     0,   367,     0,   422,   415,
     420,   419,   418,   417,   416,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   409,   408,   405,     0,     0,   431,
       0,     0,     0,   445,   453,     0,     0,   552,   554,   558,
     560,     0,   126,     0,   801,    49,    46,    47,    50,    51,
       0,     0,     0,     0,    52,    53,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   626,   627,   628,     0,
     105,   144,     0,     0,   114,     0,     0,     0,     0,   129,
       0,     0,     0,     0,     0,   136,     0,   140,   170,   494,
       0,    62,     0,    71,     0,     0,     0,    63,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,     0,
     617,     0,     0,     0,     0,   196,     0,     0,   190,   188,
       0,     0,   773,     0,     0,     0,     0,   479,     0,   768,
       0,   481,   512,   511,   508,     0,     0,     0,   542,   541,
     432,     0,   539,     0,     0,   639,   640,   786,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   645,     0,   204,   205,     0,     0,     0,     0,     0,
     209,   210,   770,   772,     0,     0,     5,    26,     0,    27,
       0,     7,    31,     0,    17,     8,    32,     0,    21,   913,
      79,    18,    80,    22,   195,     0,   193,   214,   215,     0,
       0,     0,     0,   207,   235,   296,   257,   261,     0,   236,
     237,   256,     0,     0,   357,   359,   365,   371,   370,   369,
       0,   366,   363,   364,     0,   375,   382,   381,   379,   385,
     386,   387,   384,   389,   390,   393,   392,     0,     0,     0,
       0,   414,   428,     0,   452,   450,   449,   451,   448,     0,
     487,   446,   489,     0,   454,   493,   485,     0,     0,   123,
>>>>>>> MERGE-SOURCE
     125,     0,     0,     0,   104,     0,    94,    96,    97,    98,
      99,   101,   102,   103,    95,   100,    90,    91,     0,     0,
     110,     0,   106,   108,   109,   116,     0,     0,    89,    48,
<<<<<<< TREE
       0,     0,     0,     0,     0,     0,     0,   713,   718,     0,
       0,   714,   748,   701,   703,   704,   705,   707,   709,   708,
     706,   710,     0,     0,     0,     0,     0,   113,     0,   146,
       0,     0,   556,   550,     0,   142,     0,     0,   137,     0,
=======
       0,     0,     0,     0,     0,     0,     0,   717,   722,     0,
       0,   718,   752,   705,   707,   708,   709,   711,   713,   712,
     710,   714,     0,     0,     0,     0,     0,   113,     0,   146,
       0,     0,   557,   551,     0,   142,     0,     0,   137,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,     0,    64,     0,     0,     0,     0,
<<<<<<< TREE
     278,   284,   281,     0,     0,     0,     0,     0,   555,     0,
       0,     0,   423,     0,     0,     0,     0,   197,     0,     0,
     772,     0,     0,   771,     0,     0,     0,   510,   508,     0,
     499,     0,     0,   482,   483,     0,    13,     0,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   202,     0,     0,
       0,   440,   441,   442,   439,   649,   438,     0,   437,   211,
       0,     0,     0,     0,   167,     0,   167,     0,   175,   246,
       0,   312,   308,   310,     0,   298,   299,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   239,   240,     0,   245,
     367,     0,     0,     0,     0,   679,   375,   652,   656,   658,
     660,   662,   665,   672,   673,   681,   793,   794,   796,   911,
     795,   800,   801,   802,   803,   792,   797,     0,   806,   799,
    1011,  1010,   785,  1012,   394,   562,   568,   569,   588,   579,
     587,   586,   585,   584,   581,   583,   580,   582,   572,   616,
     617,   573,   574,   782,   783,   784,   577,   396,   398,   401,
     578,   400,   428,   454,     0,   446,   485,   127,    58,    59,
      56,    57,   133,   132,     0,    92,     0,     0,   111,   112,
     117,    76,    77,    54,    55,    75,   719,     0,   722,   749,
       0,   712,   711,   716,   715,   747,     0,     0,   724,     0,
     720,   723,   702,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,   148,   150,     0,     0,
       0,   115,   118,     0,     0,     0,   170,   143,   138,   141,
       0,   191,     0,     0,    73,    67,    70,    69,     0,    65,
     561,   282,     0,     0,   170,     0,   326,   330,     0,     0,
       0,   333,     0,     0,   339,     0,     0,   346,     0,   350,
       0,   425,   424,   170,   198,     0,   200,   327,     0,     0,
       0,     0,     0,   511,     0,   501,     0,   534,   531,     0,
     535,   536,     0,     0,   530,     0,   505,   533,   532,     0,
       0,     0,     0,     0,   628,   629,   625,     0,     0,   633,
     634,   630,   775,   776,   639,   780,   637,     0,     0,     0,
       0,   643,   798,   805,   804,   959,   203,     0,     0,     0,
     644,   645,     0,     0,   212,   778,    28,     0,    19,    23,
      24,   309,   321,     0,   322,     0,   313,   314,   315,   316,
       0,   301,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   241,     0,     0,
       0,     0,   291,     0,   288,   293,   244,     0,     0,   663,
     676,     0,   372,   376,     0,   695,     0,     0,     0,     0,
       0,     0,   651,   653,   654,   690,   691,   692,   694,   693,
       0,     0,   667,   666,     0,   670,   674,   688,   686,   685,
     678,   682,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   565,
     567,   566,   563,   402,   487,   489,   135,   134,    93,   107,
     736,   717,     0,   741,     0,   741,   730,   725,   149,   151,
       0,     0,     0,   119,   147,     0,    29,     0,   139,     0,
       0,    72,     0,    66,   283,     0,     0,   329,   331,   336,
       0,   334,     0,     0,     0,     0,     0,   340,     0,     0,
     354,     0,     0,   347,     0,     0,   351,   426,     0,   199,
     773,   774,     0,     0,   510,     0,     0,   542,     0,   510,
       0,   506,     0,    14,    16,     0,     0,     0,     0,     0,
       0,     0,   642,     0,     0,     0,     0,     0,     0,   646,
     650,   325,   323,   324,   317,   318,   319,   311,     0,     0,
     306,     0,   300,   263,     0,     0,   277,   269,     0,   273,
       0,   267,     0,     0,     0,   286,     0,     0,     0,   243,
     289,   292,     0,   680,   671,   677,     0,     0,   750,   751,
     761,   760,   759,     0,     0,     0,     0,   752,   657,   758,
       0,   655,   659,     0,     0,   664,   668,     0,   689,   684,
     687,   683,   595,   590,     0,     0,   605,     0,     0,     0,
       0,   575,     0,   593,     0,   596,     0,     0,     0,   594,
     599,     0,     0,   570,   621,   564,   589,   786,   787,   571,
     737,     0,     0,   735,   742,   743,   739,     0,   734,     0,
     732,     0,     0,     0,     0,     0,     0,   552,     0,     0,
       0,    68,   285,   558,     0,     0,   337,   341,   335,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   554,     0,     0,   510,     0,   537,     0,   510,   560,
     626,   627,   631,   632,     0,   638,   781,   640,     0,     0,
       0,     0,   647,   320,   307,   302,     0,   266,     0,   275,
       0,     0,   271,     0,   274,   287,   295,   296,   290,   242,
     675,   762,     0,     0,   754,     0,   700,   699,   698,   697,
     696,   661,     0,   753,   591,   592,     0,   609,     0,   606,
       0,   618,     0,     0,   598,   597,   604,   612,     0,   602,
       0,   600,   746,   745,   744,     0,   738,   731,   729,     0,
     726,   727,   721,   152,   154,   156,     0,     0,     0,     0,
       0,   208,   356,    74,   332,   338,     0,   352,   348,   355,
       0,     0,     0,   342,     0,     0,   344,     0,   520,   514,
     509,     0,   510,   500,     0,   777,     0,     0,     0,     0,
     305,   303,   270,   268,     0,   276,     0,   756,   755,     0,
       0,     0,     0,   613,     0,     0,   619,   576,     0,     0,
       0,   740,   733,     0,     0,   158,   157,     0,     0,     0,
       0,   153,     0,     0,     0,     0,     0,   528,   522,     0,
     521,   523,   529,   526,   516,     0,   515,   517,   527,   502,
       0,   503,     0,     0,   648,   304,   272,     0,   757,   669,
     610,   611,   614,   607,   608,   620,   603,   601,   728,   155,
     159,     0,     0,     0,     0,     0,     0,   345,   343,     0,
       0,   513,   524,   525,   512,   518,   519,   504,     0,   294,
     160,     0,     0,     0,   353,   349,     0,     0,     0,     0,
       0,     0,     0,     0,   162,     0,     0,   161,     0,     0,
       0,     0,     0,     0,     0,     0,   163
=======
     277,   283,   280,     0,     0,     0,     0,     0,   556,     0,
       0,     0,   424,     0,     0,     0,     0,   197,     0,     0,
     775,     0,     0,   774,     0,     0,     0,   511,   509,     0,
     500,     0,     0,   483,   484,     0,    13,     0,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   781,
     782,     0,     0,   789,     0,   811,     0,     0,     0,     0,
       0,   202,     0,     0,     0,   441,   442,   443,   440,   653,
     439,     0,   438,   211,     0,   785,     0,     0,     0,   167,
       0,   167,     0,   175,   245,     0,   311,   307,   309,     0,
     297,   298,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   238,   239,     0,   244,   368,     0,     0,     0,     0,
     683,   376,   656,   660,   662,   664,   666,   669,   676,   677,
     685,   806,   807,   809,   923,   808,   812,   813,   814,   815,
     805,   573,     0,   818,   811,   798,   800,   796,   575,   395,
     563,   570,   571,   592,   583,   591,   590,   589,   588,   585,
     587,   584,   586,   576,   620,   621,   577,   578,   792,   793,
     794,   581,   397,   399,   402,   582,   401,   429,   455,     0,
     447,   486,   127,    58,    59,    56,    57,   133,   132,     0,
      92,     0,     0,     0,   111,   112,   117,    76,    77,    54,
      55,    75,   723,     0,   726,   753,     0,   716,   715,   720,
     719,   751,     0,     0,   728,     0,   724,   727,   706,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
     148,   150,     0,     0,     0,   115,   118,     0,     0,     0,
     170,   143,   138,   141,     0,   191,     0,     0,    73,    67,
      70,    69,     0,    65,   562,   281,     0,     0,   170,     0,
     325,   329,     0,     0,     0,   332,     0,     0,   338,     0,
       0,   345,     0,   349,     0,   426,   425,   170,   198,     0,
     200,   326,     0,     0,     0,     0,     0,   512,     0,   502,
       0,   535,   532,     0,   536,   537,     0,     0,   531,     0,
     506,   534,   533,     0,     0,     0,     0,     0,   632,   633,
     629,     0,     0,   637,   638,   634,   778,   779,     0,   643,
     788,   641,     0,     0,     0,     0,     0,   647,   810,   817,
     816,   967,   203,     0,     0,     0,   648,   649,     0,     0,
     212,   784,    28,     0,    19,    23,    24,   308,   320,     0,
     321,     0,   312,   313,   314,   315,     0,   300,     0,     0,
     263,     0,     0,   264,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   240,     0,     0,     0,     0,   290,     0,
     287,   292,   243,     0,     0,   667,   680,     0,   373,   377,
       0,   699,     0,     0,     0,     0,     0,     0,   655,   657,
     658,   694,   695,   696,   698,   697,     0,     0,   671,   670,
       0,   674,   678,   692,   690,   689,   682,   686,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   566,
       0,     0,     0,     0,     0,     0,     0,   567,   569,   568,
     564,   403,   488,   490,   135,   134,    93,   107,   740,   721,
       0,   745,     0,   745,   734,   729,   149,   151,     0,     0,
       0,   119,   147,     0,    29,     0,   139,     0,     0,    72,
       0,    66,   282,     0,     0,   328,   330,   335,     0,   333,
       0,     0,     0,     0,     0,   339,     0,     0,   353,     0,
       0,   346,     0,     0,   350,   427,     0,   199,   776,   777,
       0,     0,   511,     0,     0,   543,     0,   511,     0,   507,
       0,    14,    16,     0,     0,     0,     0,     0,     0,     0,
     791,     0,   646,     0,     0,     0,     0,     0,     0,   650,
     654,   324,   322,   323,   316,   317,   318,   310,     0,     0,
     305,     0,   299,   262,     0,     0,   276,   268,     0,   272,
       0,   266,     0,     0,     0,   285,     0,     0,     0,   242,
     288,   291,     0,   684,   675,   681,     0,     0,   754,   755,
     765,   764,   763,     0,     0,     0,     0,   756,   661,   762,
       0,   659,   663,     0,     0,   668,   672,     0,   693,   688,
     691,   687,   599,   594,     0,     0,   609,     0,     0,     0,
       0,   579,     0,   597,     0,   600,     0,     0,     0,   598,
     603,     0,     0,   572,   625,   565,   593,   797,   799,   795,
     574,   741,     0,     0,   739,   746,   747,   743,     0,   738,
       0,   736,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,    68,   284,   559,     0,     0,   336,   340,   334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   555,     0,     0,   511,     0,   538,     0,   511,
     561,   630,   631,   635,   636,     0,   783,   642,   790,   644,
       0,     0,     0,     0,   651,   319,   306,   301,     0,   265,
       0,   274,     0,     0,   270,     0,   273,   286,   294,   295,
     289,   241,   679,   766,     0,     0,   758,     0,   704,   703,
     702,   701,   700,   665,     0,   757,   595,   596,     0,   613,
       0,   610,     0,   622,     0,     0,   602,   601,   608,   616,
       0,   606,     0,   604,   750,   749,   748,     0,   742,   735,
     733,     0,   730,   731,   725,   152,   154,   156,     0,     0,
       0,     0,     0,   208,   355,    74,   331,   337,     0,   351,
     347,   354,     0,     0,     0,   341,     0,     0,   343,     0,
     521,   515,   510,     0,   511,   501,     0,   780,     0,     0,
       0,     0,   304,   302,   269,   267,     0,   275,     0,   760,
     759,     0,     0,     0,     0,   617,     0,     0,   623,   580,
       0,     0,     0,   744,   737,     0,     0,   158,   157,     0,
       0,     0,     0,   153,     0,     0,     0,     0,     0,   529,
     523,     0,   522,   524,   530,   527,   517,     0,   516,   518,
     528,   503,     0,   504,     0,     0,   652,   303,   271,     0,
     761,   673,   614,   615,   618,   611,   612,   624,   607,   605,
     732,   155,   159,     0,     0,     0,     0,     0,     0,   344,
     342,     0,     0,   514,   525,   526,   513,   519,   520,   505,
       0,   293,   160,     0,     0,     0,   352,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   162,     0,     0,   161,
       0,     0,     0,     0,     0,     0,     0,     0,   163
>>>>>>> MERGE-SOURCE
  };

  /* YYPGOTO[NTERM-NUM].  */
  const short int
  jsoniq_parser::yypgoto_[] =
  {
<<<<<<< TREE
     -1494, -1494,  -188,  -192, -1494,  1233,  1234, -1494,  1220,  -454,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
    -901, -1494, -1494, -1494, -1494,  -207,  -511, -1494,   807,   118,
   -1494, -1494, -1494, -1494, -1494,   358,   600, -1494, -1494,     9,
     -96,  1074, -1494,  1065, -1494, -1494,  -589, -1494,   556, -1494,
     321, -1494,  -185,  -233, -1494,  -433, -1494,    12,   155,    86,
    -266,  -168, -1494,  -803, -1494, -1494,  -385, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494,   723, -1494,   -95,
    1341,     0, -1494, -1494, -1494, -1494,   453, -1494, -1494,  -293,
   -1494,     5, -1494, -1494,   905,  -978,  -772,  -768, -1494, -1494,
     791, -1494, -1494,    17,   196, -1494, -1494, -1494,   217, -1493,
   -1494,   480,   221, -1494, -1494,   225, -1226, -1494,  1015,   319,
   -1494, -1494,   318,  -927, -1494, -1494,   317, -1494, -1494, -1174,
   -1152, -1494,   307, -1357, -1494, -1494,   921,   923, -1494,  -503,
     903, -1494, -1494,  -591,   412,  -585,   409,   421, -1494, -1494,
   -1494,   674, -1494, -1494,  1200, -1494, -1494, -1494, -1494, -1494,
    -742,  -315,  -610, -1494, -1494,   254, -1494,  -483, -1494,   883,
   -1494,  -377, -1494, -1494,   888,   894, -1494, -1494, -1494, -1494,
     879, -1494, -1494, -1494, -1494,  -928, -1494,   305, -1494,   788,
    -721, -1494, -1494, -1494, -1494, -1494,  -219,  -210, -1164, -1020,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494,  -689,  -809,  -109,  -771, -1494, -1494, -1494,  -851, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494,   189,   191,  -663,
    -100,  -595, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
   -1494, -1494, -1494,   292, -1494, -1494,   276, -1494,   284,  -997,
   -1494, -1494, -1494,   220,   214,    39,   502, -1494, -1494, -1494,
   -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494, -1494,
     223, -1494, -1494, -1494,    47,   496,   637, -1494, -1494, -1494,
   -1494, -1494,   411, -1494, -1494, -1474, -1494, -1494, -1494,  -492,
   -1494,   177, -1494,     7, -1494, -1494, -1494, -1494, -1271, -1494,
     233, -1494, -1494, -1494, -1494, -1494,  1027, -1494, -1494, -1494,
   -1494, -1494,  -849, -1494, -1494, -1494,  -368,  -102,    46,   830,
   -1494
=======
     -1481, -1481,  -191,  -178, -1481,  1266,  1280, -1481,  1271,  -467,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
    -912, -1481, -1481, -1481, -1481,  -209,  -514, -1481,   845,  -685,
   -1481, -1481, -1481, -1481, -1481,   387,   632, -1481, -1481,     9,
    -164,  1117, -1481,  1095, -1481, -1481,  -561, -1481,   582, -1481,
     349, -1481,  -165,  -216, -1481,  -498, -1481,    20,    28,    34,
    -268,  -166, -1481,  -784, -1481, -1481,   431, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481,   751,    38,  1101,
       0, -1481, -1481, -1481, -1481,   480, -1481, -1481,  -291, -1481,
       5, -1481, -1481,   937,  -960,  -783,  -775, -1481, -1481,   824,
   -1481, -1481,    36,   219, -1481, -1481, -1481,   241, -1480, -1481,
     506,   244, -1481, -1481,   249, -1224, -1481,  1055,   345, -1481,
   -1481,   341,  -933, -1481, -1481,   339, -1481, -1481, -1170, -1174,
   -1481,   335, -1357, -1481, -1481,   950,  -157, -1481, -1481,  -472,
     932, -1481, -1481,  -600,   454,  -562,   450,   453, -1481, -1481,
   -1481,   699, -1481, -1481,  1219, -1481, -1481, -1481, -1481, -1481,
    -731,  -314,  -614, -1481, -1481,   273, -1481,  -142, -1481,   911,
   -1481,  -370, -1481, -1481,   913,   915, -1481, -1481, -1481, -1481,
     917, -1481, -1481, -1481, -1481,  -901, -1481,   326, -1481,   816,
    -662, -1481, -1481, -1481, -1481, -1481,  -211,  -200, -1139,  -945,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481,  -666,  -790,   -85,  -781, -1481, -1481, -1481,  -840, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481,   205,   206,  -664,
     -94,  -585, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
   -1481, -1481, -1481,   302, -1481, -1481,   292, -1481,   294,  -983,
   -1481, -1481, -1481,   235,   227,    54,   522, -1481, -1481, -1481,
   -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481, -1481,
     242, -1481, -1481, -1481,    63,   515,   663, -1481, -1481, -1481,
   -1481, -1481,   432, -1481, -1481, -1467, -1481, -1481, -1481,  -466,
   -1481,   195, -1481,    24, -1481, -1481, -1481, -1481, -1263, -1481,
     250, -1481, -1481, -1481, -1481, -1481,  -114, -1481, -1481, -1481,
   -1481, -1481,  -830, -1481, -1481, -1481,  -356,  -102,   211,   479,
   -1481
>>>>>>> MERGE-SOURCE
  };

  /* YYDEFGOTO[NTERM-NUM].  */
  const short int
  jsoniq_parser::yydefgoto_[] =
  {
<<<<<<< TREE
        -1,   252,   567,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
    1174,   700,   270,   271,   272,   273,   274,   275,   876,   877,
     878,   276,   277,   278,   882,   883,   884,   279,   423,   280,
     281,   645,   282,   425,   426,   427,   433,   690,   691,   283,
    1155,   284,  1663,  1664,   285,   286,   287,   491,   288,   289,
     290,   291,   292,   693,   293,   294,   454,   295,   296,   297,
     298,   299,   300,   578,   301,   302,   771,   772,   303,   304,
     305,   505,   307,   579,   591,  1038,  1039,   308,   580,   309,
     582,   506,   311,   312,   806,   807,  1302,   440,   313,   441,
     442,   813,  1303,  1304,  1305,   583,   584,  1025,  1026,  1460,
     585,  1022,  1023,  1276,  1277,  1278,  1279,   314,   707,   708,
     315,  1190,  1191,  1402,   316,  1193,  1194,   317,   318,  1196,
    1197,  1198,  1199,  1409,   319,   320,   321,   322,   820,   323,
     324,  1312,   325,   326,   327,   328,   329,   330,   331,   332,
     333,  1098,   334,   335,   336,   337,   609,   610,   338,   339,
     340,   341,   342,   343,   344,  1005,  1006,   345,   637,   638,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     853,   356,   357,   358,   359,   360,   361,  1225,   737,   738,
     739,  1690,  1745,  1746,  1739,  1740,  1747,  1741,  1226,  1227,
     362,   363,  1228,   364,   365,   366,   367,   368,   369,   370,
     371,   939,  1410,  1362,  1075,  1522,  1076,  1099,  1077,  1078,
    1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,   713,
    1712,   372,  1088,  1089,  1090,  1091,   373,   374,   375,   376,
     377,   378,   761,   762,   379,  1260,  1261,  1602,  1007,  1046,
    1322,  1323,  1047,  1048,  1049,  1050,  1051,  1332,  1505,  1506,
    1052,  1335,  1053,  1486,  1054,  1055,  1340,  1341,  1511,  1509,
    1324,  1325,  1326,  1327,  1629,   674,   903,   904,   905,   906,
     907,   908,  1140,  1552,  1660,  1141,  1550,  1658,   909,  1375,
    1547,  1543,  1544,  1545,   910,   911,  1328,  1336,  1496,  1329,
    1492,  1313,   380,   381,   382,   383,   494,   384,   385,   386,
     387,   388,  1092,  1093,  1094,  1095,  1175,   495,   389,   390,
     391
=======
        -1,   246,   563,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
    1178,   696,   264,   265,   266,   267,   268,   269,   876,   877,
     878,   270,   271,   272,   882,   883,   884,   273,   417,   274,
     275,   641,   276,   419,   420,   421,   427,   686,   687,   277,
    1159,   278,  1675,  1676,   279,   280,   281,   481,   282,   283,
     284,   285,   286,   689,   287,   288,   448,   289,   290,   291,
     292,   293,   294,   574,   295,   296,   770,   771,   297,   298,
     495,   300,   575,   587,  1043,  1044,   301,   576,   302,   578,
     496,   304,   305,   806,   807,  1308,   434,   306,   435,   436,
     813,  1309,  1310,  1311,   579,   580,  1030,  1031,  1470,   581,
    1027,  1028,  1282,  1283,  1284,  1285,   307,   703,   704,   308,
    1194,  1195,  1410,   309,  1197,  1198,   310,   311,  1200,  1201,
    1202,  1203,  1417,   312,   313,   314,   315,   316,   820,   317,
     318,  1318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,  1103,   328,   329,   330,   331,   605,   606,   332,   333,
     334,   335,   336,   337,   338,  1009,  1010,   339,   633,   634,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     853,   350,   351,   352,   353,   354,   355,  1229,   733,   734,
     735,  1702,  1757,  1758,  1751,  1752,  1759,  1753,  1230,  1231,
     356,   357,  1232,   358,   359,   360,   361,   362,   363,   364,
     365,   939,  1418,  1370,  1080,  1532,  1081,  1104,  1082,  1083,
    1084,  1085,  1086,  1087,  1088,  1089,  1090,  1091,  1092,   709,
    1724,   366,  1093,  1094,  1095,  1096,   367,   368,   369,   370,
     371,   372,   760,   761,   373,  1266,  1267,  1614,  1011,  1051,
    1328,  1329,  1052,  1053,  1054,  1055,  1056,  1338,  1515,  1516,
    1057,  1341,  1058,  1496,  1059,  1060,  1346,  1347,  1521,  1519,
    1330,  1331,  1332,  1333,  1641,   670,   903,   904,   905,   906,
     907,   908,  1146,  1563,  1672,  1147,  1561,  1670,   909,  1383,
    1558,  1554,  1555,  1556,   910,   911,  1334,  1342,  1506,  1335,
    1502,  1319,   374,   375,   376,   377,   484,   378,   379,   380,
     381,   382,  1097,  1098,  1099,  1100,  1179,   485,   383,   384,
     385
>>>>>>> MERGE-SOURCE
  };

  /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule which
     number is the opposite.  If YYTABLE_NINF_, syntax error.  */
<<<<<<< TREE
  const short int jsoniq_parser::yytable_ninf_ = -930;
=======
  const short int jsoniq_parser::yytable_ninf_ = -942;
>>>>>>> MERGE-SOURCE
  const short int
  jsoniq_parser::yytable_[] =
  {
<<<<<<< TREE
       306,   306,   306,   306,   306,   310,   310,   310,   310,   310,
     539,   504,   508,   396,   399,   400,   969,   581,   512,   424,
     947,   841,  1192,   562,   828,   633,   646,   646,  1074,  1097,
     957,   829,   830,   831,   832,  1179,  1031,   649,  1423,   847,
    1032,   751,   555,  1224,  1413,  1308,   757,   790,   792,  1284,
     554,  1455,  1456,   555,  1575,     7,     8,  1579,   546,   547,
    1113,  1431,  1156,  1507,  1157,  1666,  1291,   863,   697,   701,
     557,  1035,   555,   555,  1028,   742,   409,  1661,   438,   555,
       7,     8,  1044,   994,   555,   559,   410,   398,   398,   398,
     402,   816,   555,   817,   818,   555,   819,   555,   821,     9,
    1145,   409,   782,   786,   412,   306,   822,   823,  1117,   413,
     310,   555,  1700,   555,  1688,   555,  1493,  1168,  1149,  1033,
     564,   528,   555,   784,   788,   791,   793,  1029,  1180,   412,
     555,   486,   562,   937,   555,  1029,   562,  1541,  1029,   555,
     518,   414,   415,  1017,   725,   555,  1403,   541,   543,     9,
     566,   496,   970,   937,   509,   634,   397,   397,   397,   401,
    1182,   566,  1215,   892,   658,   893,   513,   680,   516,   622,
     555,  1183,   654,   555,   555,   794,  1667,   428,  1292,   796,
     566,    77,   975,   623,   561,   555,  1030,   566,   655,  1464,
     635,   492,   636,  1143,   563,    87,  1120,   659,  1144,  1145,
    1288,   938,  1542,   565,  1689,   566,   648,  1146,  1755,   894,
     529,   429,   555,   581,  1147,   995,  1148,  1149,  1493,   971,
     101,   726,  -171,   555,  1041,  1150,   562,  1042,  1603,  1216,
     566,    77,  1404,   725,  1036,   555,  1167,   439,   566,   555,
     403,   976,   566,  1513,   743,    87,  1214,   566,   122,  1768,
     306,   306,  1151,   566,   306,   310,   310,   924,  1668,   310,
     397,  1293,  1431,  1289,   556,  1294,  1406,   735,   790,   792,
     101,  1413,  -172,   555,  1037,   558,  1114,  1393,   566,  1659,
    1494,   566,   566,   777,   979,   930,   779,   555,  1224,   306,
     149,   150,   151,   566,   310,   439,  1353,  1224,  1472,   889,
    1044,  1044,  1014,   563,  1016,  1463,  1266,   563,   439,   803,
     949,  1367,  1156,  1485,  1157,   669,   439,  1040,   950,  1732,
     566,   420,   998,   782,   786,   519,   684,  1210,   561,   421,
     439,   566,   935,  1211,  1043,   724,   687,   422,   696,   694,
     149,   150,   151,   566,   555,  1296,   681,   566,   706,   783,
     787,   711,   712,   776,   682,   648,   555,   718,  1212,   733,
     774,  1388,  1696,   988,   895,   778,   780,   405,   406,   773,
     407,   408,   522,  1697,   523,   795,  1776,   896,  1779,   897,
     555,   566,  1494,  1495,  1152,  1403,  1488,   944,   411,  1403,
     898,   899,   900,   688,   901,   566,   902,   563,   306,   944,
    1698,  1576,   306,   310,   555,  1622,  1314,   310,  -171,   858,
    1372,  1273,   980,   981,  1687,   740,   741,   404,   555,  1108,
     555,  1103,   745,   430,   943,   555,  1489,   982,   439,   306,
     306,   525,  1275,   526,   310,   310,  1109,   858,   432,  1725,
     698,   555,   767,   769,  1267,   306,   555,  1045,   977,   306,
     310,   987,   566,   431,   310,   586,   657,   587,  -172,   661,
    1029,   524,   689,   513,   566,   448,   675,   676,   945,  1577,
    1374,  1565,   955,  1383,   513,  1570,  1153,  1154,  1072,  1315,
     959,  1107,  1577,  1623,   702,     7,     8,   699,   566,   859,
     709,   417,   306,   551,   714,  1217,  1218,   310,  1224,   719,
    1770,   306,   562,   790,   792,   790,   310,   978,   434,   552,
    1248,  1610,   566,  1465,   443,   402,   402,   860,  1121,  1122,
     527,  1368,   588,  1125,  1753,  1473,   566,   589,   566,  1018,
     937,   402,   848,   566,   709,   402,  1521,   843,   306,  1314,
     849,   972,   449,   310,  1490,   306,   731,   496,  1380,   566,
     310,  1491,   444,  1165,   566,   418,   306,   306,   306,   306,
     424,   310,   310,   310,   310,   973,  1316,  1317,  1044,  1318,
    1011,   634,   560,   496,   590,   306,  1319,  1044,   956,   763,
     310,  1268,  1269,  1270,   685,   686,  1320,   398,  1044,   974,
     937,  1219,  1461,  1262,   931,  1015,   419,   934,  1321,   780,
     710,  1413,   613,  1000,   715,  1102,   635,   983,   636,   927,
    1483,  1220,  1315,  1221,   450,   451,  1104,   664,  1601,   665,
     614,   569,   530,   962,   768,   570,  1754,   531,   937,   445,
     571,  1759,   808,   964,   965,   966,   808,   769,  1104,   446,
    1217,  1222,   569,   946,  1636,   108,   570,  1217,  1218,   572,
    1263,   571,   666,   664,   569,   665,   397,  1638,   570,  1673,
    1743,   632,   120,   571,  1310,  1045,  1045,  1642,  1742,  1748,
     572,  1189,  1648,   999,  1737,  1263,   435,  1650,  1217,   667,
     513,  1295,   572,  1223,  1400,   122,   436,   453,   122,   928,
     879,   447,   306,  1441,  1217,  1218,  1105,   310,  1611,  1316,
    1317,   144,  1318,  1583,   929,  1655,  1737,   785,  1587,   885,
    1217,   532,  1189,   437,   990,   667,   306,   306,  1106,  1320,
    1742,   310,   310,   915,  1637,  1405,  1748,   919,   920,   633,
    1500,  1321,  1256,   880,   925,   984,   985,  1639,   881,   634,
    1013,   668,   513,  1219,   613,   513,   650,  1643,   573,   940,
     986,   574,  1649,   452,   678,   790,  1220,  1651,  1221,   679,
     651,  1044,   614,  1220,  1679,  1221,   575,  1744,   306,   573,
    1406,   496,   574,   310,   635,  1556,   636,   668,   398,   488,
     616,   573,   967,   510,   574,  1656,  1222,   734,  1411,   511,
    1219,  1110,   576,  1222,  1220,   306,  1221,   108,   424,  1447,
     310,  1412,   402,   402,  1738,  1391,     7,     8,  1111,   617,
    1220,   795,  1221,   576,   120,  1137,  1008,   405,   406,  -849,
     407,   408,   618,   780,  1222,   576,  1220,   409,  1221,  1372,
     937,  1716,  1138,  1717,   517,  1425,  1782,   410,   411,  1264,
    1222,   577,  1458,  -849,   108,  1019,  1373,   397,  1359,  1112,
    1217,  1217,  1218,   144,  -849,   412,  1222,   619,  1034,  1626,
     413,   120,   577,  1691,  1298,   692,  1627,  1694,  1298,  1299,
    1743,   953,   954,  1299,   577,  1139,  1628,   785,  1459,   613,
    1360,   613,  1430,  1096,  1096,  1100,  1100,   620,  1300,  1374,
    1123,  1124,   414,   415,   416,  -929,   621,   614,  1361,   614,
     144,  1137,  1621,  1624,  1625,  1451,  1389,  1029,  1572,  1765,
    1012,  1029,  1681,  1272,  1414,   487,  1685,     9,  1138,  -929,
     615,  1232,  1709,  1233,  1273,  1096,   552,  1415,  1366,  1301,
    -929,  1775,  1573,  1045,  1274,  1796,  1573,  1797,   487,  1130,
    1573,   417,  1045,  1665,   692,  1275,  1307,  1219,   652,  1131,
     487,   306,   487,  1045,  1159,  1573,   310,  1337,  1338,  1573,
    1132,  1573,   653,  1160,  1162,   581,  1220,  1220,  1221,  1221,
     533,  1750,  1096,  1711,  1626,  1714,  1726,  1785,   937,  1411,
    1339,  1627,  1411,  1096,   880,  1719,   520,  1720,  1298,   881,
    1273,  1628,  1582,  1299,  1115,  1788,  1222,  1222,  1257,    77,
    1237,   108,  1238,  1258,   521,   418,  1115,   670,   671,   672,
     534,  1452,  1453,    87,   306,   306,   306,  1133,   120,   310,
     310,   310,   424,   535,  1561,   826,   827,   537,  1134,   833,
     834,  1707,  1708,   538,  1126,  1127,  1128,   402,   101,  1585,
    1129,   536,  1041,   835,   836,  1042,   419,  1378,  1379,  1652,
    1653,   548,   544,   568,   592,   593,   594,   144,   612,   611,
    1665,   624,   625,   626,   595,   596,   122,   597,   627,   631,
    1281,   639,   420,   808,   640,   598,   641,   642,   643,   599,
     421,   600,   644,   648,   660,   662,   601,   539,   422,   663,
    1604,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   673,   677,   602,   692,   695,  1200,   703,   149,   150,
     151,   704,   705,  1096,  1665,   720,   722,   716,  1758,   724,
     717,   727,   736,   732,   728,   744,  1045,   603,   604,   605,
     606,   607,   608,   729,   730,   746,   747,   748,  1567,   759,
     760,   781,   764,   765,   770,   799,   801,   800,   809,   810,
     802,   812,   824,   838,   837,   839,   840,   635,   855,   861,
     864,   862,   886,   890,   887,   912,   306,   891,   913,   914,
     916,   310,   306,   921,   918,   922,   923,   310,  1387,   926,
     932,   803,   933,   936,   306,   948,   989,   951,   991,   310,
     952,   993,   996,  1807,   992,  1808,  1396,   997,  1010,  1013,
    1020,  1024,  1027,   306,  1116,  1816,   881,   937,   310,  1135,
    1136,  1163,  1158,  1164,   688,  1418,  1096,  1170,  1166,  1172,
    1176,  1171,   306,  1173,  1178,  1177,  1184,   310,  1188,   306,
    1185,   709,  1201,  1189,   310,  1195,  1205,  1206,  1213,   656,
     487,  1096,  1202,   487,  1230,  1526,  1208,   487,  1209,  1231,
     487,   487,   398,  1203,  1229,  1249,   666,  1259,   487,  1280,
    1282,  1285,  1257,  1286,  1311,  1290,  1334,  1258,   487,  1429,
     398,  1297,  1330,     9,   487,  1342,  1343,  1344,   487,  1331,
    1345,  1371,  1346,   487,  1370,  1347,  1348,  1349,  1376,   398,
    1381,  1363,  1671,  1382,  1385,   763,  1392,  1350,  1351,  1352,
    1354,  1386,  1355,  1675,  1567,  1008,  1677,  1356,   402,  1008,
    1357,  1358,  1395,  1422,  1686,   402,  1424,  1411,   487,  1427,
    1417,   397,  1439,  1435,  1444,  1443,  1436,  1437,  1445,   808,
     487,  1446,  1466,  1262,  1438,  1273,  1470,  1468,  1433,   397,
    1434,  1474,  1476,  1440,  1482,  1477,  1478,  1480,   768,  1598,
    1599,  1600,  1484,  1487,  1503,  1504,  1508,  1497,   397,  1510,
    1512,  1523,  1540,   487,  1546,  1529,  1533,  1553,  1551,  1534,
    1535,  1560,  1536,  1537,  1538,  1539,  1557,  1428,  1558,  1549,
    1559,  1606,  1563,  1555,  1432,  1564,  1569,  1580,  1594,  1581,
    1518,  1096,  1586,   513,  1527,  1528,  1589,  1532,  1608,  1620,
    1632,  1634,  1613,  1640,   306,  1635,  1641,  1644,  1657,   310,
    1645,  1646,  1647,  1137,  1670,  1676,   487,  1662,  1458,  1677,
     487,  1704,  1706,  1718,  1721,  1722,  1723,  1554,  1693,  1724,
    1749,  1728,  1729,  1633,  1733,  1734,  1735,  1751,  1757,  1752,
    1762,  1773,  1774,  1760,  1761,  1763,   493,  1257,  1669,  1764,
    1766,  1767,  1258,  1781,  1571,  1780,  1784,  1096,  1799,  1793,
    1096,  1812,  1787,  1798,   487,  1806,  1813,  1771,  1777,  1791,
    1809,  1584,  1800,   888,  1803,  1369,  1588,   553,   647,  1805,
    1118,  1815,  1810,  1169,  1384,  1731,  1389,   549,   550,   683,
     865,  1769,  1306,   487,  1009,   811,   942,  1618,  1481,  1462,
    1271,  1457,  1454,   721,  1397,  1416,  1699,   487,  1401,  1794,
    1407,   487,   487,   814,  1101,   825,   815,  1450,   487,   857,
     854,  1426,   845,  1616,  1617,   968,   487,  1786,   846,   487,
    1783,  1794,  1514,   487,  1515,   630,  1449,  1710,  1715,  1498,
    1777,  1442,  1631,  1448,  1502,  1309,  1501,  1630,  1333,  1142,
    1377,  1654,  1548,  1499,   755,     0,     0,     0,  1257,     0,
       0,     0,     0,  1258,     0,     0,   487,     0,     0,  1257,
    1257,     0,   306,     0,  1258,  1258,     0,   310,     0,     0,
    1257,     0,     0,     0,     0,  1258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1096,
    1680,     0,  1682,     0,  1684,     0,     0,     0,     0,   487,
       0,  1692,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   487,   487,   487,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1713,     0,  1713,  1257,  1096,     0,  1096,     0,
    1258,     0,     0,     0,   714,     0,   714,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   487,
       0,     0,  1727,     0,     0,  1730,     0,     0,     0,     0,
       0,     0,  1096,   487,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1736,   306,     0,     0,     0,     0,   310,
       0,     0,     0,     0,     0,     0,     0,     0,   487,     0,
       0,     0,  1257,     0,     0,     0,   487,  1258,     0,     0,
       0,     0,     0,     0,  1096,     0,     0,   487,     0,     0,
       0,     0,     0,     0,  1772,   306,     0,     0,     0,  1096,
     310,  1096,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1257,     0,     0,
       0,     0,  1258,  1789,     0,     0,  1257,     0,     0,     0,
       0,  1258,     0,     0,     0,     0,     0,     0,     0,  1792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1801,
       0,     0,   493,     0,  1802,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   487,     0,  1811,   487,     0,  1814,
       0,     0,     0,   749,   750,     0,   752,   753,   754,   756,
       0,   758,     0,     0,     0,     0,     0,   766,     0,     0,
       0,     0,     0,     0,     0,   775,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   797,   798,     0,
       0,     0,     0,     0,     0,     0,   804,   805,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   852,     0,     0,
       0,   852,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   487,     0,     0,     0,     0,
     917,     0,     0,     0,     0,   487,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   941,     0,     0,     0,     0,
       0,     0,     0,   487,     0,     0,     0,     0,     0,     0,
       0,   958,     0,     0,     0,   960,   961,     0,   963,     0,
       0,     0,     0,     0,     0,   804,     0,     0,     0,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   487,
       0,     0,     0,   487,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   487,     0,     0,   487,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   487,     0,     0,     0,     0,   798,     0,     0,     0,
       0,     0,  1021,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   487,   487,     0,   487,   487,   487,
       0,   487,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   487,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1119,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   487,     0,
       0,   487,     0,     0,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   487,     0,  1161,     0,     0,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1181,
       0,     0,     0,     0,     0,     0,  1186,  1187,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1204,     0,     0,
    1207,     0,     0,     0,     0,     0,     0,   487,   487,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1234,  1235,  1236,     0,  1239,  1240,  1241,  1242,  1243,
    1244,  1245,  1246,  1247,     0,     0,  1250,  1251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1265,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1021,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1287,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   487,   487,     0,   487,     0,   487,     0,
       0,     0,     0,     0,     0,   487,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1365,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   487,     0,   487,     0,
     487,     0,   487,     0,     0,     0,     0,     0,   487,     0,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   487,     0,     0,   487,
       0,     0,     0,     0,     0,     0,   487,     0,     0,     0,
       0,     0,     0,  1390,     0,     0,     0,   487,     0,     0,
       0,     0,     0,  1394,     0,     0,     0,     0,     0,  1398,
    1399,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1419,     0,   487,  1420,
    1421,     0,     0,     0,     0,     0,     0,     0,   487,     0,
       0,     0,     0,   487,     0,   487,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   487,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1021,     0,   487,     0,     0,     0,     0,   487,  1467,
       0,  1469,     0,  1471,     0,     0,  1475,     0,     0,     0,
     487,  1479,     0,   487,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1562,     0,     0,     0,
       0,     0,     0,     0,  1566,  1568,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1390,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1590,  1591,  1592,  1593,
       0,  1595,  1596,     0,  1597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1605,     0,     0,     0,     0,  1607,     0,     0,     0,  1609,
       0,     0,     0,  1612,     0,  1614,     0,  1615,     0,     0,
       0,     0,     0,  1619,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1672,     0,     0,     0,     0,  1674,  1568,     0,     0,     0,
       0,     0,     0,  1678,     0,     0,     0,     0,  1683,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1695,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1701,     0,  1702,
       0,  1703,     0,     0,  1705,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1678,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1756,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1778,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -167,   785,     0,     0,     0,
       0,     0,  1790,     0,     0,     0,  1795,     0,     0,     0,
       0,  1778,     0,     0,     0,     0,     1,     2,     3,     4,
       5,     6,     7,     8,     0,     9,     0,  1795,     0,    10,
     393,  1804,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,     0,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
       0,    68,    69,    70,    71,     0,     0,    72,    73,    74,
       0,     0,    75,    76,     0,     0,     0,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,     0,     0,     0,
       0,    87,     0,    88,    89,    90,    91,     0,    92,     0,
       0,     0,    93,    94,    95,    96,    97,     0,     0,     0,
       0,     0,     0,    98,    99,   100,   101,   102,   103,   104,
     105,   106,     0,   107,   108,   109,   110,   111,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,     0,   121,   122,     0,     0,   123,   124,   125,
       0,     0,     0,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
     144,     0,   395,     0,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,     0,   243,     0,   244,   245,   246,   247,   248,
       0,   249,  -167,   785,     0,     0,     0,     0,     0,     0,
=======
       299,   299,   299,   299,   299,   303,   303,   303,   303,   303,
     533,   828,   577,   841,   515,   558,  1196,   502,   523,   418,
     629,   390,   393,   394,  1183,  1036,  1421,   642,   642,   391,
     391,   391,   395,  1037,   534,   392,   392,   392,   396,   947,
     790,   792,   550,   645,   520,   847,  1431,  1079,  1102,   957,
     829,   830,   831,   832,   784,   788,   791,   793,   551,  1465,
    1466,   553,  1586,   551,  1314,  1590,   542,   543,     7,     8,
    1228,   969,  1290,  1160,   693,   697,   555,  1517,  1040,  1118,
       7,     8,  1149,  1161,  1297,   782,   786,  1150,  1151,   403,
    1439,   863,   551,  1049,     9,  1673,  1152,  1678,  1123,   404,
     738,   403,   551,  1153,   299,  1154,  1155,   508,   551,   303,
     557,  1033,   551,  1503,  1156,   551,   721,   406,   816,   720,
     817,   818,   407,   819,   558,   821,   551,  1411,   558,   406,
     432,   551,   391,   822,   823,   551,  1172,  1712,   482,  1151,
     720,  1157,  1038,   494,   498,  1034,  1700,  1184,   399,   400,
     551,   401,   402,   684,   408,   409,  1022,  1155,   551,   551,
     551,   551,   644,   551,  1187,   975,   562,   676,   551,   405,
     937,   562,  1034,  1186,  1411,   937,    77,  1367,  1143,  1380,
    1583,  1034,   628,  -861,   892,  1638,   893,  1693,   785,   551,
      87,  1120,  1639,   654,   551,  1144,  1298,  1193,   646,   422,
     562,  1320,  1640,  1120,  1584,   577,   121,  -861,  1679,  1368,
    1408,  1584,   647,  1412,   558,   101,   551,   551,  -861,  1126,
     562,  1018,   685,  1035,   976,  1273,   655,  1369,   946,   397,
     894,   551,  1474,  1767,   562,   752,  1701,   551,  1145,  1382,
    1615,  1041,  1503,   562,   299,   299,   753,   694,   299,   303,
     303,  -171,   551,   303,   557,  1299,   987,  1421,   562,  1171,
    1576,  1295,   551,  1300,  1414,   790,   792,   562,  1780,   739,
    1401,   562,   411,  1158,  1321,   551,   562,  1504,   536,   538,
     731,  1042,  1523,   299,   644,   147,   148,   149,   303,   433,
    1680,  1360,   509,   552,   695,  1439,   476,   562,  1671,   554,
     930,  1320,   562,   803,  1119,  1218,   777,   889,   433,   665,
     782,   786,  -172,   551,   949,   486,  1049,  1049,   499,  1228,
     680,   559,   779,   950,   562,   562,   433,  1160,  1228,  1473,
     503,  1744,   506,  1495,   414,  1375,   412,  1161,  1002,   562,
     935,  1360,   415,   783,   787,   562,   677,  1214,  1045,  1019,
     416,  1021,  1272,   433,   678,  1411,  1215,   551,   778,   780,
     562,  1322,  1323,   776,  1324,  1075,  1076,  1077,   795,   486,
     562,  1325,   747,  1302,  1321,   729,   773,   413,   551,   772,
     755,  1326,  1216,   562,  1396,   895,   998,   551,  1788,   551,
    1791,   560,   299,  1327,   551,   551,   299,   303,   896,   721,
     897,   303,  1108,   551,   751,  1708,  1504,  1505,   944,   977,
    1498,   898,   899,   900,  1294,   901,   692,   902,   551,  1709,
    1482,   562,  1316,   299,   299,  1710,   551,  1552,   303,   303,
     559,   944,   815,   442,   559,   429,   858,  -171,  1279,   299,
     616,  1581,   970,   299,   303,   430,   121,   924,   303,   617,
    1499,   681,   682,  1737,  1050,   398,  1697,   396,   396,  1281,
     943,  1322,  1323,   683,  1324,   562,   690,   706,   978,   858,
     721,   711,   431,   396,   561,   702,  1219,   396,   707,   708,
    1584,  1326,   299,  1587,   714,   979,   562,   303,  1112,   945,
    1749,   299,  1553,  1327,  1221,   562,   303,   562,  -172,   558,
    1391,   983,   562,   562,   927,   790,   792,   790,  1475,   971,
     443,   562,   959,     9,  1782,   660,   859,   661,   999,   391,
     559,  1274,  1275,  1276,  1483,   392,   562,  1023,   848,   988,
    1127,  1128,   299,  1228,   562,  1131,  1376,   303,   736,   737,
    1765,   299,   955,  1220,   433,   741,   303,   722,  1388,   860,
     433,  1588,   299,   299,   299,   299,   418,   303,   303,   303,
     303,  1531,   630,   972,   477,  1169,   767,  1137,  1016,   766,
     768,   299,   973,  1117,   974,  1109,   303,   663,  1138,  1004,
    1107,  1109,   444,   445,   928,  1049,   477,  1648,  1493,   688,
     931,  1421,  1020,   934,  1049,    77,   780,   631,   477,   632,
     477,  1650,  1654,  1766,   582,  1049,   583,     7,     8,    87,
    1224,  1771,  1225,   980,   981,   653,   996,  1634,   657,   962,
    1750,  1471,   503,  1749,  1699,   671,   672,  1221,   982,   984,
     985,   524,   937,   503,   101,   630,   525,  1193,  1046,   664,
    1226,  1047,  1268,   698,   986,   423,   609,   565,  1660,   705,
    1413,   566,  1662,   710,  1613,  1110,   567,  1667,   715,  1685,
     424,  1111,   121,  1034,   610,   648,   843,  1649,   609,   849,
     631,   584,   632,  1221,  1222,   568,   585,  1050,  1050,   649,
     425,  1651,  1655,  1221,  1253,  1301,   610,   565,   299,   705,
    1380,   566,  1588,   303,   556,  1635,   567,  1623,   660,  1269,
     661,   727,   486,  1755,   147,   148,   149,  1381,   929,   611,
     618,  1269,   299,   299,  1622,   568,   391,   303,   303,  1221,
     526,   565,   392,   586,   619,   566,   756,  1510,  1661,   486,
     567,  1419,  1663,   662,  1262,   629,   937,  1668,   762,  1755,
     953,   954,   879,  1224,  1420,  1225,   396,   396,  1048,   568,
    1382,   630,   426,  1794,   612,  1754,  1760,  1451,   790,   428,
     663,  1638,   964,   965,   966,   437,   768,   299,  1639,  1223,
    1594,   630,   303,  1226,   569,  1598,  1414,   570,  1640,  1567,
    1343,  1344,  1049,   613,   938,   880,   631,   785,   632,  1224,
     881,  1225,   571,   808,  1691,   299,   614,   808,   418,  1224,
     303,  1225,   438,  1345,  1304,  1003,   631,  1754,   632,  1305,
    1756,   937,   795,  1760,   569,  1787,   609,   570,   572,  1226,
    1017,  1399,   664,   107,   439,   780,  1221,  1222,  1306,  1226,
     440,   615,   730,  1304,   610,  1224,   548,  1225,  1305,  1584,
     119,   503,     7,     8,   547,  1270,  1797,  1034,   569,  1221,
    1222,   570,   441,   399,   400,  1254,   401,   402,   572,   956,
     548,  1227,  1728,   403,  1729,  1226,  1457,   573,   937,  1307,
     885,   650,   674,   404,   405,   447,  1034,   675,  1808,   142,
    1468,  1113,   652,   477,   915,  -941,   477,   651,   919,   920,
     477,   406,   572,   477,   477,   925,   407,   609,  1114,   992,
     446,   477,  1584,   503,  1636,  1637,   503,   573,  1397,  -941,
     940,   477,  1221,  1222,  1115,   610,  1469,   477,  1163,  1143,
    -941,   477,  1223,  1461,   630,   478,   477,  1164,   408,   409,
     410,  1116,   486,  1703,  1809,  1633,  1144,  1706,  1721,  1422,
    1777,   573,  1224,   967,  1225,  1223,  1050,  1374,   500,     9,
    1677,   299,  1423,  1139,   501,  1050,   303,   477,  1584,   631,
    1278,   632,  1419,   688,  1140,  1224,  1050,  1225,   507,   477,
    1419,  1279,  1226,   577,   527,  1593,   107,   411,   937,  1204,
    1012,  1280,  1500,  1800,  1723,   396,  1726,   794,   510,  1501,
    1279,   796,  1281,   119,   511,  1226,  1731,   528,  1732,   107,
    1129,  1130,  1263,  1132,  1133,  1134,   477,  1264,  1223,  1135,
    1024,  1738,   880,  1304,  1433,   529,   119,   881,  1305,   299,
     299,   299,   530,  1039,   303,   303,   303,   418,  1224,   531,
    1225,    77,   142,   532,  1719,  1720,   544,  1438,   666,   667,
     668,   412,  1762,   564,  1572,    87,  1462,  1463,  1101,  1101,
    1105,  1105,  1236,   588,  1237,   142,   589,  1241,  1226,  1242,
     608,   477,   107,   826,   827,   477,   833,   834,  1677,   620,
     101,   835,   836,   607,  1046,  1386,  1387,  1047,   621,   119,
     622,   627,   413,   623,  1313,   635,  1664,  1665,   636,   644,
    1101,   637,   638,   639,   640,   533,   656,   658,   121,   669,
    1596,   659,   673,   688,  1136,   691,   699,   700,   414,   477,
     701,   712,  1616,   716,   718,   713,   415,   720,   142,   723,
     732,  1770,  1677,   724,   416,   725,   726,   728,   740,  1166,
     742,   758,   743,   744,   759,   865,   763,  1101,   477,   764,
     147,   148,   149,  1050,  1578,   781,   769,   799,  1101,   775,
     800,   809,   477,   812,   801,   802,   477,   477,   824,   810,
     837,   838,   839,   477,   840,   631,   855,   861,   864,   862,
     299,   477,   886,   887,   477,   303,   299,   891,   477,   890,
     914,   303,   916,   912,   913,   921,   922,   918,   299,   803,
    1395,   923,   926,   303,   933,   932,   936,   951,   391,   948,
     952,  1819,   991,  1820,   392,   483,  1000,   299,  1404,   994,
     997,   477,   303,  1828,  1001,  1014,   391,  1018,  1025,  1029,
     881,  1032,   392,  1121,   937,  1141,   299,  1426,  1142,  1167,
    1162,   303,  1168,   299,  1170,   391,   684,  1174,   303,  1175,
    1287,   392,  1177,   808,  1176,  1180,  1188,  1181,   477,  1182,
    1189,  1536,  1193,  1210,  1436,  1199,  1192,  1205,  1206,   519,
     396,  1440,  1209,   590,  1207,  1217,  1212,   396,  1263,  1213,
    1233,   591,   592,  1264,   593,  1234,  1235,  1248,   477,  1255,
    1265,   662,   594,  1101,  1286,  1288,   595,  1291,   596,  1292,
    1303,   477,  1336,   597,  1296,  1317,  1340,  1337,  1348,     9,
    1371,  1683,   767,  1379,  1378,  1349,  1384,  1350,  1393,  1389,
     598,  1390,  1687,  1578,  1351,  1689,   477,   477,   477,   477,
    1352,  1353,  1354,  1698,  1355,  1356,  1357,  1394,  1358,  1361,
    1362,  1363,  1364,  1101,   599,   600,   601,   602,   603,   604,
    1365,  1400,  1366,   540,   866,   867,   868,   869,   870,   871,
     872,   873,   874,   875,  1403,  1430,  1419,  1432,   477,  1435,
    1443,  1444,  1445,  1425,  1446,  1447,  1454,  1448,  1453,  1449,
    1441,  1455,   477,  1442,  1456,  1268,  1279,  1478,  1480,  1484,
    1486,  1487,  1492,  1488,  1513,  1101,  1494,  1497,  1507,  1520,
    1522,  1533,  1518,  1514,  1539,  1543,  1544,   477,  1545,  1551,
     705,  1546,  1557,  1547,  1548,   477,  1549,  1550,  1562,  1564,
    1101,  1560,   299,  1568,  1569,  1566,   477,   303,  1570,  1571,
    1574,  1575,  1618,  1620,  1580,  1592,  1591,  1597,  1600,  1689,
    1625,  1652,  1605,  1632,  1644,  1669,  1143,  1646,  1437,  1647,
    1653,  1656,  1657,  1645,  1658,  1659,  1674,  1682,  1468,  1688,
    1716,  1718,  1730,  1681,  1733,  1735,  1734,  1263,  1705,  1736,
    1745,  1740,  1264,  1747,  1761,  1746,   762,  1769,  1774,  1763,
    1792,  1741,  1764,  1772,  1773,  1785,  1012,  1775,  1789,  1793,
    1012,  1776,  1778,  1779,  1818,  1796,  1799,  1811,  1805,  1786,
    1810,  1822,  1610,  1611,  1612,  1824,  1397,  1783,  1803,  1821,
     808,  1812,  1825,  1476,  1815,  1817,  1827,   888,   477,  1173,
    1377,   477,  1124,   679,   545,   643,  1392,  1743,  1490,  1806,
    1781,  1013,   549,   811,  1312,   942,  1630,  1491,   546,  1472,
    1467,  1277,  1464,   717,  1405,  1409,  1415,  1424,   814,  1106,
     825,  1806,  1460,   845,   854,   846,  1434,  1798,   626,   968,
    1789,   477,  1795,   857,  1524,  1525,  1727,  1452,  1459,  1458,
    1508,  1528,  1101,  1512,   503,  1537,  1538,  1643,  1542,  1263,
    1315,  1511,  1339,  1642,  1264,  1148,  1509,  1385,  1559,  1666,
    1263,  1263,     0,   299,     0,  1264,  1264,     0,   303,     0,
       0,  1263,   483,     0,     0,     0,  1264,     0,     0,     0,
    1565,   477,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   745,   746,     0,     0,   748,   749,   750,
       0,     0,   754,     0,     0,   757,     0,  1582,     0,     0,
    1101,   765,     0,  1101,     0,     0,     0,     0,     0,     0,
     774,     0,     0,     0,  1595,     0,     0,     0,     0,  1599,
       0,  1711,     0,   477,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   797,   798,     0,     0,     0,   477,     0,
       0,     0,   804,   805,     0,     0,     0,     0,   477,     0,
       0,     0,  1722,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1263,  1628,  1629,
       0,     0,  1264,     0,     0,     0,   477,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   852,   477,     0,     0,   852,     0,     0,
       0,     0,     0,     0,   477,     0,   299,     0,   477,     0,
       0,   303,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1263,     0,     0,     0,   477,  1264,
       0,   477,     0,     0,     0,     0,   917,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   477,   299,     0,     0,
       0,     0,   303,     0,     0,  1101,  1692,     0,  1694,     0,
    1696,   941,     0,     0,     0,     0,     0,  1704,     0,  1263,
       0,     0,     0,     0,  1264,     0,     0,   958,  1263,     0,
       0,   960,   961,  1264,   963,     0,     0,     0,     0,   477,
     477,   804,   477,   477,   477,     0,   477,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   989,   990,     0,     0,   993,     0,  1725,
       0,  1725,     0,  1101,     0,  1101,     0,     0,   477,     0,
       0,   710,     0,   710,     0,     0,  1015,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1739,
       0,     0,  1742,     0,     0,   477,   798,     0,   477,  1101,
       0,   477,  1026,     0,     0,     0,     0,     0,     0,     0,
    1748,     0,   477,     0,     0,     0,     0,   477,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1101,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1784,     0,     0,     0,     0,  1101,     0,  1101,     0,
       0,     0,     0,     0,     0,     0,   477,   477,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1801,     0,  1125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1804,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1813,  1165,     0,     0,
       0,  1814,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1823,     0,     0,  1826,     0,     0,  1185,
       0,     0,     0,     0,     0,     0,  1190,  1191,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1208,     0,     0,
    1211,     0,     0,   477,   477,     0,   477,     0,   477,     0,
       0,     0,     0,     0,     0,   477,     0,     0,     0,     0,
       0,  1238,  1239,  1240,     0,  1243,  1244,  1245,  1246,  1247,
       0,     0,  1249,  1250,     0,  1251,  1252,     0,     0,     0,
    1256,  1257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1271,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1026,   477,     0,   477,
       0,   477,     0,   477,     0,     0,  1293,     0,     0,   477,
       0,   477,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   477,     0,     0,
     477,     0,     0,     0,     0,     0,     0,   477,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   477,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   477,
    1373,     0,     0,     0,     0,     0,     0,     0,     0,   477,
       0,     0,     0,     0,   477,     0,   477,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   477,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   477,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1398,     0,     0,
       0,     0,     0,     0,   477,     0,     0,  1402,     0,   477,
       0,     0,     0,  1406,  1407,     0,     0,     0,     0,     0,
       0,   477,     0,     0,   477,     0,     0,     0,     0,     0,
    1427,     0,     0,  1428,  1429,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1450,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1026,     0,     0,
       0,     0,     0,     0,     0,  1477,     0,  1479,     0,  1481,
       0,     0,  1485,     0,     0,     0,     0,  1489,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1573,     0,     0,     0,     0,     0,
       0,     0,  1577,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1398,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,  1602,  1603,  1604,     0,  1606,
    1607,     0,  1608,     0,  1609,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1617,     0,     0,     0,     0,  1619,     0,     0,     0,  1621,
       0,     0,     0,  1624,     0,  1626,     0,  1627,     0,     0,
       0,     0,     0,  1631,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1684,     0,     0,     0,     0,  1686,  1579,     0,     0,
       0,     0,     0,     0,  1690,     0,     0,     0,     0,  1695,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1707,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1713,
       0,  1714,     0,  1715,     0,     0,  1717,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1690,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1768,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1790,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -167,   785,     0,
       0,     0,     0,     0,  1802,     0,     0,     0,  1807,     0,
       0,     0,     0,  1790,     0,     0,     0,     0,     1,     2,
       3,     4,     5,     6,     7,     8,     0,     9,     0,  1807,
       0,    10,   387,  1816,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,     0,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,     0,    68,    69,    70,    71,     0,     0,    72,
      73,    74,     0,     0,    75,    76,     0,     0,     0,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,     0,
       0,     0,     0,    87,     0,    88,    89,    90,    91,     0,
      92,     0,     0,     0,    93,    94,    95,    96,    97,     0,
       0,     0,     0,     0,     0,    98,    99,   100,   101,   102,
     103,     0,   104,   105,     0,   106,   107,   108,   109,   110,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,     0,   120,   121,     0,     0,   122,
     123,   124,     0,     0,     0,   125,     0,   126,   127,     0,
       0,     0,     0,     0,     0,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,     0,
     140,   141,   142,     0,   389,     0,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,     0,   241,  -167,   785,   242,   243,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     2,     3,
       4,     5,     6,     7,     8,     0,     9,     0,     0,     0,
     789,   387,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,   388,    26,    27,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
       0,   104,   105,     0,   106,   107,   108,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,   120,   121,     0,     0,   122,   123,
     124,     0,     0,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   389,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   785,   241,     0,     0,   242,   243,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     2,     3,     4,     5,     6,     7,
<<<<<<< TREE
       8,     0,     9,     0,     0,     0,   789,   393,     0,    12,
=======
       8,     0,     9,     0,     0,     0,   386,   387,     0,    12,
>>>>>>> MERGE-SOURCE
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
<<<<<<< TREE
      23,    24,   394,    26,    27,    28,    29,    30,     0,    31,
=======
      23,    24,   388,    26,    27,    28,    29,    30,     0,    31,
>>>>>>> MERGE-SOURCE
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
<<<<<<< TREE
      98,    99,   100,   101,   102,   103,   104,   105,   106,     0,
     107,   108,   109,   110,   111,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,     0,
     121,   122,     0,     0,   123,   124,   125,     0,     0,     0,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,     0,   395,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   785,
     243,     0,   244,   245,   246,   247,   248,     0,   249,     0,
=======
      98,    99,   100,   101,   102,   103,     0,   104,   105,     0,
     106,   107,   108,   109,   110,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,     0,
     120,   121,     0,     0,   122,   123,   124,     0,     0,     0,
     125,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,     0,   140,   141,   142,     0,   389,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   785,
     241,     0,     0,   242,   243,     0,     0,     0,     0,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   386,   387,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,   487,   388,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,   488,   489,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   463,    80,    81,    82,    83,    84,   490,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,     0,   491,   105,     0,   106,   107,   108,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,   120,   121,     0,     0,
     122,   123,   124,     0,     0,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   389,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   469,   470,   471,   173,   174,   472,   493,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,  1005,  1006,   242,
     243,     0,     0,     0,     0,     0,  1007,     0,     0,     0,
       0,     5,     6,     0,     0,     0,     0,     0,     0,     0,
     386,   387,     0,    12,    13,    14,   449,    16,    17,    18,
     450,    20,   451,   452,   453,   454,   388,    26,   455,    28,
      29,    30,     0,    31,    32,    33,    34,   456,    36,    37,
      38,    39,    40,    41,    42,   457,     0,    44,   458,    46,
     459,   460,    49,   461,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,   462,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,     0,    78,
     463,    80,    81,    82,    83,    84,     0,     0,     0,     0,
       0,     0,     0,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,   464,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,     0,   102,   103,
       0,     0,     0,     0,     0,     0,     0,   109,   465,     0,
       0,     0,     0,   111,   112,   113,   114,   466,   116,   117,
     118,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,     0,     0,     0,   125,     0,   126,   127,     0,     0,
       0,     0,  1008,     0,   128,     0,   129,   130,   131,   132,
     467,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,     0,     0,   389,     0,   145,   146,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,     0,   159,
       0,     0,   162,   163,   164,   165,   166,   167,   468,   169,
     469,   470,   471,   173,   174,   472,   473,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   474,
       0,   190,   475,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,     0,     0,     0,     0,     0,     0,   243,     1,
       2,     3,     4,     5,     6,     7,     8,     0,     9,     0,
<<<<<<< TREE
       0,     0,   392,   393,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,   394,    26,
=======
       0,     0,    10,    11,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
>>>>>>> MERGE-SOURCE
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
<<<<<<< TREE
     102,   103,   104,   105,   106,     0,   107,   108,   109,   110,
     111,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,     0,   121,   122,     0,     0,
     123,   124,   125,     0,     0,     0,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,     0,   395,     0,   147,   148,   149,
=======
     102,   103,     0,   104,   105,     0,   106,   107,   108,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,   120,   121,     0,     0,
     122,   123,   124,     0,     0,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,     0,     0,   242,
     243,     0,     0,     0,     0,   244,   245,     1,     2,     3,
       4,     5,     6,     7,     8,     0,     9,     0,     0,     0,
      10,    11,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
       0,   104,   105,     0,   106,   107,   108,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,   120,   121,     0,     0,   122,   123,
     124,     0,     0,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,   149,
>>>>>>> MERGE-SOURCE
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
<<<<<<< TREE
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
=======
       0,   190,   191,   192,     0,   193,   194,   195,   196,   197,
>>>>>>> MERGE-SOURCE
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
<<<<<<< TREE
     238,   239,   240,   241,   242,   785,   243,     0,   244,   245,
     246,   247,   248,     0,   249,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     2,     3,     4,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   392,   393,
=======
     238,   239,   240,     0,   241,     0,     0,   242,   243,     0,
     479,     0,     0,     0,   541,     1,     2,     3,     4,     5,
       6,     7,     8,     0,     9,     0,     0,     0,   386,   387,
>>>>>>> MERGE-SOURCE
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
<<<<<<< TREE
      21,    22,    23,   497,   394,    26,    27,    28,    29,    30,
=======
      21,    22,    23,    24,   388,    26,    27,    28,    29,    30,
>>>>>>> MERGE-SOURCE
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
<<<<<<< TREE
      40,    41,    42,    43,     0,    44,    45,    46,   498,   499,
=======
      40,    41,    42,    43,     0,    44,    45,    46,    47,    48,
>>>>>>> MERGE-SOURCE
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
<<<<<<< TREE
       0,    75,    76,     0,     0,     0,    77,    78,   469,    80,
      81,    82,    83,    84,   500,    86,     0,     0,     0,     0,
=======
       0,    75,    76,     0,     0,     0,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,     0,     0,     0,     0,
>>>>>>> MERGE-SOURCE
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
<<<<<<< TREE
       0,     0,    98,    99,   100,   101,   102,   103,   104,   501,
     106,     0,   107,   108,   109,   110,   111,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,     0,   121,   122,     0,     0,   123,   124,   125,     0,
       0,     0,   126,     0,   127,   128,     0,     0,     0,     0,
       0,     0,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
       0,   395,     0,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   479,   480,
     481,   175,   176,   482,   503,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,   248,     0,
     249,  1001,  1002,     0,     0,     0,     0,     0,     0,     0,
    1003,     0,     0,     0,     0,     5,     6,     0,     0,     0,
       0,     0,     0,     0,   392,   393,     0,    12,    13,    14,
     455,    16,    17,    18,   456,    20,   457,   458,   459,   460,
     394,    26,   461,    28,    29,    30,     0,    31,    32,    33,
      34,   462,    36,    37,    38,    39,    40,    41,    42,   463,
       0,    44,   464,    46,   465,   466,    49,   467,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,   468,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,     0,    78,   469,    80,    81,    82,    83,    84,
       0,     0,     0,     0,     0,     0,     0,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,   470,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,   110,   471,     0,     0,     0,     0,   112,   113,   114,
     115,   472,   117,   118,   119,     0,     0,     0,     0,     0,
       0,     0,   123,   124,   125,     0,     0,     0,   126,     0,
     127,   128,     0,     0,     0,     0,  1004,     0,   130,     0,
     131,   132,   133,   134,   473,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,     0,     0,   395,     0,   147,
     148,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     474,   159,   475,   161,   476,   477,   164,   165,   166,   167,
     168,   169,   478,   171,   479,   480,   481,   175,   176,   482,
     483,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   484,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     244,   485,   246,   247,   248,   489,   249,     0,     0,     0,
       1,     2,     3,     4,     5,     6,     7,     8,     0,     9,
       0,     0,     0,   392,   393,     0,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,   394,
      26,    27,    28,    29,    30,     0,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,     0,    68,    69,    70,    71,     0,
       0,    72,    73,    74,     0,     0,    75,    76,     0,     0,
       0,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,     0,     0,     0,     0,    87,     0,    88,    89,    90,
      91,     0,    92,     0,     0,     0,    93,    94,    95,    96,
      97,     0,     0,     0,     0,     0,     0,    98,    99,   100,
     101,   102,   103,   104,   105,   106,     0,   107,   108,   109,
     110,   111,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,     0,   121,   122,     0,
       0,   123,   124,   125,     0,   490,     0,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,   130,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,     0,   142,   143,   144,     0,   395,     0,   147,   148,
=======
       0,     0,    98,    99,   100,   101,   102,   103,     0,   104,
     105,     0,   106,   107,   108,   109,   110,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,     0,   120,   121,     0,     0,   122,   123,   124,     0,
     480,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,   142,
       0,   389,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,     0,   241,   479,     0,   242,   243,     0,     1,     2,
       3,     4,     5,     6,     7,     8,     0,     9,     0,     0,
       0,   386,   387,     0,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,   388,    26,    27,
      28,    29,    30,     0,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,     0,    68,    69,    70,    71,     0,     0,    72,
      73,    74,     0,     0,    75,    76,     0,     0,     0,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,     0,
       0,     0,     0,    87,     0,    88,    89,    90,    91,     0,
      92,     0,     0,     0,    93,    94,    95,    96,    97,     0,
       0,     0,     0,     0,     0,    98,    99,   100,   101,   102,
     103,     0,   104,   105,     0,   106,   107,   108,   109,   110,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,     0,   120,   121,     0,     0,   122,
     123,   124,     0,     0,     0,   125,     0,   126,   127,     0,
       0,     0,     0,     0,     0,   128,     0,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,     0,
     140,   141,   142,     0,   389,     0,   145,   146,   147,   148,
>>>>>>> MERGE-SOURCE
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
<<<<<<< TREE
     189,   190,   191,     0,   192,   193,   194,     0,   195,   196,
=======
     189,     0,   190,   191,   192,     0,   193,   194,   195,   196,
>>>>>>> MERGE-SOURCE
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
<<<<<<< TREE
     237,   238,   239,   240,   241,   242,     0,   243,     0,   244,
     245,   246,   247,   248,   489,   249,     0,     0,     0,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   392,   393,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,   497,   394,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,   498,   499,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   469,    80,    81,    82,    83,    84,   500,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,   104,   501,   106,     0,   107,   108,   109,   110,
     111,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,     0,   121,   122,     0,     0,
     123,   124,   125,     0,     0,     0,   126,     0,   127,   128,
       0,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,     0,   395,     0,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   479,   480,   481,   175,   176,   482,   503,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,   489,   244,   245,
     246,   247,   248,     0,   249,     0,     5,     6,     0,     0,
       0,     9,     0,     0,     0,   392,   393,     0,    12,    13,
      14,   455,    16,    17,    18,   456,    20,   457,   458,   459,
     460,   394,    26,   461,    28,    29,    30,     0,    31,    32,
      33,    34,   462,    36,    37,    38,    39,    40,    41,    42,
     463,     0,    44,   464,    46,   465,   466,    49,   467,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,     0,    68,    69,    70,
     468,     0,     0,    72,    73,    74,     0,     0,    75,    76,
       0,     0,     0,     0,    78,   469,    80,    81,    82,    83,
      84,   500,     0,     0,     0,     0,     0,     0,     0,    88,
      89,    90,    91,     0,    92,     0,     0,     0,   470,    94,
      95,    96,    97,     0,     0,     0,     0,     0,     0,    98,
      99,   100,     0,   102,   103,   104,     0,     0,     0,   107,
       0,     0,   110,   471,     0,     0,     0,     0,   112,   113,
     114,   115,   472,   117,   118,   119,     0,     0,     0,     0,
       0,     0,     0,   123,   124,   125,     0,     0,     0,   126,
       0,   127,   128,     0,     0,     0,     0,   844,     0,   130,
       0,   131,   132,   133,   134,   473,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,     0,     0,   395,     0,
     147,   148,     0,     0,     0,   152,   153,   154,   155,   156,
     157,   474,   159,   475,   161,   476,   477,   164,   165,   166,
     167,   168,   169,   478,   171,   479,   480,   481,   175,   176,
     482,   483,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   484,     0,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,     0,     0,   489,
       0,   244,   485,   246,   247,   248,     0,   249,     5,     6,
       0,     0,     0,  1524,     0,     0,     0,   392,   393,     0,
      12,    13,    14,   455,    16,    17,    18,   456,    20,   457,
     458,   459,   460,   394,    26,   461,    28,    29,    30,     0,
      31,    32,    33,    34,   462,    36,    37,    38,    39,    40,
      41,    42,   463,     0,    44,   464,    46,   465,   466,    49,
     467,    51,    52,    53,    54,    55,    56,    57,    58,    59,
=======
     237,   238,   239,   240,     0,   241,   479,     0,   242,   243,
       0,     1,     2,     3,     4,     5,     6,     0,     0,     0,
       9,     0,     0,     0,   386,   387,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,   487,
     388,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,   488,   489,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,   463,    80,    81,    82,    83,    84,
     490,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,     0,   491,   105,     0,   106,   107,
     108,   109,   110,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,     0,   120,   121,
       0,     0,   122,   123,   124,     0,     0,     0,   125,     0,
     126,   127,     0,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,     0,   140,   141,   142,     0,   389,     0,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   516,   158,   517,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   469,   470,   471,   173,   174,   472,
     493,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,     0,   241,   479,
     518,   242,   243,     0,     1,     2,     3,     4,     5,     6,
       0,     0,     0,     9,     0,     0,     0,   386,   387,     0,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,   487,   388,    26,    27,    28,    29,    30,     0,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,    44,    45,    46,   488,   489,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
>>>>>>> MERGE-SOURCE
      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
<<<<<<< TREE
      69,    70,   468,     0,     0,    72,    73,    74,     0,     0,
      75,    76,     0,     0,     0,     0,    78,   469,    80,    81,
      82,    83,    84,     0,     0,     0,     0,     0,     0,     0,
=======
      69,    70,    71,     0,     0,    72,    73,    74,     0,     0,
      75,    76,     0,     0,     0,    77,    78,   463,    80,    81,
      82,    83,    84,   490,    86,     0,     0,     0,     0,    87,
>>>>>>> MERGE-SOURCE
       0,    88,    89,    90,    91,     0,    92,     0,     0,     0,
<<<<<<< TREE
     470,    94,    95,    96,    97,     0,     0,     0,     0,     0,
       0,    98,    99,   100,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,   110,   471,     0,     0,     0,     0,
     112,   113,   114,   115,   472,   117,   118,   119,     0,     0,
       0,     0,     0,     0,     0,   123,   124,   125,     0,     0,
       0,   126,  1525,   127,   128,     0,     0,     0,     0,     0,
       0,   130,     0,   131,   132,   133,   134,   473,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,     0,     0,
     395,     0,   147,   148,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   474,   159,   475,   161,   476,   477,   164,
     165,   166,   167,   168,   169,   478,   171,   479,   480,   481,
     175,   176,   482,   483,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   484,     0,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   489,     0,   244,   485,   246,   247,   248,     0,   249,
       5,     6,     0,     0,     0,     0,     0,     0,     0,   392,
     393,     0,    12,    13,    14,   455,    16,    17,    18,   456,
      20,   457,   458,   459,   460,   394,    26,   461,    28,    29,
      30,     0,    31,    32,    33,    34,   462,    36,    37,    38,
      39,    40,    41,    42,   463,     0,    44,   464,    46,   465,
     466,    49,   467,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
       0,    68,    69,    70,   468,     0,     0,    72,    73,    74,
       0,     0,    75,    76,     0,     0,     0,     0,    78,   469,
      80,    81,    82,    83,    84,     0,     0,     0,     0,     0,
       0,     0,     0,    88,    89,    90,    91,     0,    92,     0,
       0,     0,   470,    94,    95,    96,    97,     0,     0,     0,
       0,     0,     0,    98,    99,   100,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,   110,   471,     0,     0,
       0,     0,   112,   113,   114,   115,   472,   117,   118,   119,
       0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
       0,     0,     0,   126,     0,   127,   128,     0,     0,     0,
       0,     0,     0,   130,     0,   131,   132,   133,   134,   473,
     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,
       0,     0,   395,     0,   147,   148,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   474,   159,   475,   161,   476,
     477,   164,   165,   166,   167,   168,   169,   478,   171,   479,
     480,   481,   175,   176,   482,   483,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   484,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
=======
      93,    94,    95,    96,    97,     0,     0,     0,     0,     0,
       0,    98,    99,   100,   101,   102,   103,     0,   491,   105,
       0,   106,   107,   108,   109,   110,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
       0,   120,   121,     0,     0,   122,   123,   124,     0,     0,
       0,   125,     0,   126,   127,     0,     0,     0,     0,     0,
       0,   128,     0,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,     0,     0,   140,   141,   142,     0,
     389,     0,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   469,   470,   471,
     173,   174,   472,   493,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,     0,   193,   194,   195,   196,   197,   198,   199,   200,
>>>>>>> MERGE-SOURCE
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
<<<<<<< TREE
     241,     0,     0,     0,     0,   244,   485,   246,   247,   248,
       0,   249,   514,   515,     0,     0,     0,     0,     0,     5,
       6,     0,     0,     0,     0,     0,     0,     0,   392,   393,
       0,    12,    13,    14,   455,    16,    17,    18,   456,    20,
     457,   458,   459,   460,   394,    26,   461,    28,    29,    30,
       0,    31,    32,    33,    34,   462,    36,    37,    38,    39,
      40,    41,    42,   463,     0,    44,   464,    46,   465,   466,
      49,   467,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,   468,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,     0,    78,   469,    80,
      81,    82,    83,    84,     0,     0,     0,     0,     0,     0,
       0,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   470,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,   110,   471,     0,     0,     0,
       0,   112,   113,   114,   115,   472,   117,   118,   119,     0,
       0,     0,     0,     0,     0,     0,   123,   124,   125,     0,
       0,     0,   126,     0,   127,   128,     0,     0,     0,     0,
       0,     0,   130,     0,   131,   132,   133,   134,   473,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,     0,
       0,   395,     0,   147,   148,     0,     0,     0,   152,   153,
     154,   155,   156,   157,   474,   159,   475,   161,   476,   477,
     164,   165,   166,   167,   168,   169,   478,   171,   479,   480,
     481,   175,   176,   482,   483,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   484,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
=======
     479,   241,     0,     0,   242,   243,     0,     0,     0,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   386,   387,
       0,    12,    13,    14,   449,    16,    17,    18,   450,    20,
     451,   452,   453,   454,   388,    26,   455,    28,    29,    30,
       0,    31,    32,    33,    34,   456,    36,    37,    38,    39,
      40,    41,    42,   457,     0,    44,   458,    46,   459,   460,
      49,   461,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,   462,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,     0,    78,   463,    80,
      81,    82,    83,    84,   490,     0,     0,     0,     0,     0,
       0,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   464,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,     0,   102,   103,     0,     0,
       0,     0,   106,     0,     0,   109,   465,     0,     0,     0,
       0,   111,   112,   113,   114,   466,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
     844,     0,   128,     0,   129,   130,   131,   132,   467,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,     0,
       0,   389,     0,   145,   146,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,     0,   159,     0,     0,
     162,   163,   164,   165,   166,   167,   468,   169,   469,   470,
     471,   173,   174,   472,   473,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   474,     0,   190,
     475,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     479,     0,     0,     0,     0,     0,   243,     0,     0,     5,
       6,     0,     0,     0,  1534,     0,     0,     0,   386,   387,
       0,    12,    13,    14,   449,    16,    17,    18,   450,    20,
     451,   452,   453,   454,   388,    26,   455,    28,    29,    30,
       0,    31,    32,    33,    34,   456,    36,    37,    38,    39,
      40,    41,    42,   457,     0,    44,   458,    46,   459,   460,
      49,   461,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,   462,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,     0,    78,   463,    80,
      81,    82,    83,    84,     0,     0,     0,     0,     0,     0,
       0,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   464,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,     0,   102,   103,     0,     0,
       0,     0,     0,     0,     0,   109,   465,     0,     0,     0,
       0,   111,   112,   113,   114,   466,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,     0,
       0,     0,   125,  1535,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   467,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,     0,
       0,   389,     0,   145,   146,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,     0,   159,     0,     0,
     162,   163,   164,   165,   166,   167,   468,   169,   469,   470,
     471,   173,   174,   472,   473,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   474,     0,   190,
     475,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     479,     0,     0,     0,     0,     0,   243,     0,     0,     5,
       6,     0,     0,     0,     0,     0,     0,     0,   386,   387,
       0,    12,    13,    14,   449,    16,    17,    18,   450,    20,
     451,   452,   453,   454,   388,    26,   455,    28,    29,    30,
       0,    31,    32,    33,    34,   456,    36,    37,    38,    39,
      40,    41,    42,   457,     0,    44,   458,    46,   459,   460,
      49,   461,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,   462,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,     0,    78,   463,    80,
      81,    82,    83,    84,     0,     0,     0,     0,     0,     0,
       0,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   464,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,     0,   102,   103,     0,     0,
       0,     0,     0,     0,     0,   109,   465,     0,     0,     0,
       0,   111,   112,   113,   114,   466,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   467,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,     0,
       0,   389,     0,   145,   146,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,     0,   159,     0,     0,
     162,   163,   164,   165,   166,   167,   468,   169,   469,   470,
     471,   173,   174,   472,   473,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   474,     0,   190,
     475,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     504,   505,     0,     0,     0,     0,   243,     5,     6,     0,
       0,     0,     0,     0,     0,     0,   386,   387,     0,    12,
      13,    14,   449,    16,    17,    18,   450,    20,   451,   452,
     453,   454,   388,    26,   455,    28,    29,    30,     0,    31,
      32,    33,    34,   456,    36,    37,    38,    39,    40,    41,
      42,   457,     0,    44,   458,    46,   459,   460,    49,   461,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,   462,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,     0,    78,   463,    80,    81,    82,
      83,    84,     0,     0,     0,     0,     0,     0,     0,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,   464,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,     0,   102,   103,     0,     0,     0,     0,
       0,     0,     0,   109,   465,     0,     0,     0,     0,   111,
     112,   113,   114,   466,   116,   117,   118,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,     0,     0,     0,
     125,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   467,   134,   135,   136,
     137,   138,   139,     0,     0,   140,   141,     0,     0,   389,
       0,   145,   146,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,   157,     0,   159,     0,     0,   162,   163,
     164,   165,   166,   167,   468,   169,   469,   470,   471,   173,
     174,   472,   473,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   474,     0,   190,   475,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
>>>>>>> MERGE-SOURCE
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
<<<<<<< TREE
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   244,   485,   246,   247,   248,     0,
     249,     1,     2,     3,     4,     5,     6,     7,     8,     0,
       9,     0,     0,     0,    10,    11,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,   104,   105,   106,     0,   107,   108,
     109,   110,   111,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,     0,   121,   122,
       0,     0,   123,   124,   125,     0,     0,     0,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,   130,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,     0,   243,     0,
     244,   245,   246,   247,   248,     0,   249,   250,   251,     1,
=======
     232,   233,   234,   235,   236,   237,   238,   239,     0,     0,
       0,     0,     0,     0,   243,     1,     2,     3,     4,     5,
       6,     7,     8,     0,     9,     0,     0,     0,    10,    11,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,     0,   104,
     105,     0,   106,   107,   108,   109,   110,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,     0,   120,   121,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,     0,   241,     0,     0,   242,   243,     1,     2,     3,
       4,     5,     6,     7,     8,     0,     9,     0,     0,     0,
     386,   387,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,   388,    26,    27,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
       0,   104,   105,     0,   106,   107,   108,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,   120,   121,     0,     0,   122,   123,
     124,     0,   719,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   389,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,     0,   241,     0,     0,   242,   243,     1,
>>>>>>> MERGE-SOURCE
       2,     3,     4,     5,     6,     7,     8,     0,     9,     0,
<<<<<<< TREE
       0,     0,    10,    11,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
=======
       0,     0,   386,   387,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,   388,    26,
>>>>>>> MERGE-SOURCE
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
<<<<<<< TREE
     102,   103,   104,   105,   106,     0,   107,   108,   109,   110,
     111,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,     0,   121,   122,     0,     0,
     123,   124,   125,     0,     0,     0,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,   248,     0,   249,     0,   545,     1,     2,     3,
       4,     5,     6,     7,     8,     0,     9,     0,     0,     0,
      10,    11,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
     104,   105,   106,     0,   107,   108,   109,   110,   111,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,     0,   121,   122,     0,     0,   123,   124,
     125,     0,     0,     0,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,   130,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,     0,   243,     0,   244,   245,   246,   247,
     248,     0,   249,     1,     2,     3,     4,     5,     6,     7,
       8,     0,     9,     0,     0,     0,   392,   393,     0,    12,
=======
     102,   103,     0,   104,   105,     0,   106,   107,   108,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,   120,   121,     0,     0,
     122,   123,   124,     0,   480,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   389,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,     0,     0,   242,
     243,     1,     2,     3,     4,     5,     6,     7,     8,     0,
       9,     0,     0,     0,   386,   387,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,  1258,
     388,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,  1259,  1260,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,     0,   104,   105,     0,   106,   107,
     108,   109,   110,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,     0,   120,   121,
       0,     0,   122,   123,   124,     0,   480,     0,   125,     0,
     126,   127,     0,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,     0,   140,   141,   142,     0,   389,     0,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    1261,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,     0,   241,     0,
       0,   242,   243,     1,     2,     3,     4,     5,     6,     7,
       8,     0,     9,     0,     0,     0,   386,   387,     0,    12,
>>>>>>> MERGE-SOURCE
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
<<<<<<< TREE
      23,    24,   394,    26,    27,    28,    29,    30,     0,    31,
=======
      23,    24,   388,    26,    27,    28,    29,    30,     0,    31,
>>>>>>> MERGE-SOURCE
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
<<<<<<< TREE
      98,    99,   100,   101,   102,   103,   104,   105,   106,     0,
     107,   108,   109,   110,   111,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,     0,
     121,   122,     0,     0,   123,   124,   125,     0,   723,     0,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,     0,   395,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,   245,   246,   247,   248,     0,   249,     1,
       2,     3,     4,     5,     6,     7,     8,     0,     9,     0,
       0,     0,   392,   393,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,   394,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,   104,   105,   106,     0,   107,   108,   109,   110,
     111,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,     0,   121,   122,     0,     0,
     123,   124,   125,     0,     0,     0,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,     0,   395,     0,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,   248,     0,   249,     1,     2,     3,     4,     5,
       6,     7,     8,     0,     9,     0,     0,     0,    10,    11,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,   104,   105,
     106,     0,   107,   108,   109,   110,   111,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,     0,   121,   122,     0,     0,   123,   124,   125,     0,
       0,     0,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
       0,   395,     0,   147,   148,   149,   150,   151,   152,   153,
=======
      98,    99,   100,   101,   102,   103,     0,   104,   105,     0,
     106,   107,   108,   109,   110,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,     0,
     120,   121,     0,     0,   122,   123,   124,     0,     0,     0,
     125,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,     0,   140,   141,   142,     0,   389,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   153,
>>>>>>> MERGE-SOURCE
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
<<<<<<< TREE
     184,   185,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
=======
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
>>>>>>> MERGE-SOURCE
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
<<<<<<< TREE
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,   248,     0,
     249,     1,     2,     3,     4,     5,     6,     7,     8,     0,
       9,     0,     0,     0,    10,   393,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,   104,   105,   106,     0,   107,   108,
     109,   110,   111,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,     0,   121,   122,
       0,     0,   123,   124,   125,     0,     0,     0,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,   130,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,     0,   395,     0,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,     0,   243,     0,
     244,   245,   246,   247,   248,     0,   249,     1,     2,     3,
=======
     232,   233,   234,   235,   236,   237,   238,   239,   240,     0,
     241,     0,     0,   242,   243,     1,     2,     3,     4,     5,
       6,     7,     8,     0,     9,     0,     0,     0,    10,    11,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,     0,   104,
     105,     0,   106,   107,   108,   109,   110,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,     0,   120,   121,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,   142,
       0,   389,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,     0,   241,     0,     0,   242,   243,     1,     2,     3,
>>>>>>> MERGE-SOURCE
       4,     5,     6,     7,     8,     0,     9,     0,     0,     0,
<<<<<<< TREE
     789,   393,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,   394,    26,    27,    28,
=======
      10,   387,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
>>>>>>> MERGE-SOURCE
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
<<<<<<< TREE
     104,   105,   106,     0,   107,   108,   109,   110,   111,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,     0,   121,   122,     0,     0,   123,   124,
     125,     0,     0,     0,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,   130,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,     0,   395,     0,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,     0,   243,     0,   244,   245,   246,   247,
     248,     0,   249,     1,     2,     3,     4,     5,     6,     7,
       8,     0,     9,     0,     0,     0,   392,   393,     0,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,  1252,   394,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,  1253,  1254,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,   101,   102,   103,   104,   105,   106,     0,
     107,   108,   109,   110,   111,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,     0,
     121,   122,     0,     0,   123,   124,   125,     0,     0,     0,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,     0,   395,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,  1255,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,   245,   246,   247,   248,     0,   249,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   392,   393,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,   497,   394,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,   498,   499,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   469,    80,    81,    82,    83,    84,   500,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,   850,     0,    98,    99,   100,   101,
     102,   103,   104,   501,   106,     0,   107,   108,   109,   110,
     111,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,     0,   121,   122,     0,     0,
     123,   124,   125,     0,     0,     0,   126,   851,   127,   128,
       0,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,     0,   395,     0,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   479,   480,   481,   175,   176,   482,   503,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   245,
     246,   247,   248,     0,   249,     1,     2,     3,     4,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   392,   393,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,   497,   394,    26,    27,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,    44,    45,    46,   498,   499,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,   469,    80,
      81,    82,    83,    84,   500,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
     850,     0,    98,    99,   100,   101,   102,   103,   104,   501,
     106,     0,   107,   108,   109,   110,   111,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,     0,   121,   122,     0,     0,   123,   124,   125,     0,
       0,     0,   126,   856,   127,   128,     0,     0,     0,     0,
       0,     0,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
       0,   395,     0,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   479,   480,
     481,   175,   176,   482,   503,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,   248,     0,
     249,     1,     2,     3,     4,     5,     6,     0,     0,     0,
       9,     0,     0,     0,   392,   393,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,   497,
     394,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,   498,   499,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,   469,    80,    81,    82,    83,    84,
     500,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,   104,   501,   106,     0,   107,   108,
     109,   110,   111,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,     0,   121,   122,
       0,     0,   123,   124,   125,     0,     0,   502,   126,     0,
     127,   128,     0,     0,     0,     0,     0,     0,   130,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,     0,   395,     0,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   479,   480,   481,   175,   176,   482,
     503,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,     0,   243,     0,
     244,   245,   246,   247,   248,     0,   249,     1,     2,     3,
       4,     5,     6,     0,     0,     0,     9,     0,     0,     0,
     392,   393,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,   497,   394,    26,    27,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
     498,   499,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
     469,    80,    81,    82,    83,    84,   500,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
     104,   501,   106,     0,   107,   108,   109,   110,   111,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,     0,   121,   122,     0,     0,   123,   124,
     125,     0,     0,     0,   126,   507,   127,   128,     0,     0,
       0,     0,     0,     0,   130,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,     0,   395,     0,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     479,   480,   481,   175,   176,   482,   503,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,     0,   243,     0,   244,   245,   246,   247,
     248,     0,   249,     1,     2,     3,     4,     5,     6,     0,
       0,     0,     9,     0,     0,     0,   392,   393,     0,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,   497,   394,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,   498,   499,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,   469,    80,    81,    82,
      83,    84,   500,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,   101,   102,   103,   104,   501,   106,     0,
     107,   108,   109,   110,   111,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,     0,
     121,   122,     0,     0,   123,   124,   125,     0,     0,     0,
     126,     0,   127,   128,     0,     0,     0,     0,     0,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,     0,   395,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   479,   480,   481,   175,
     176,   482,   503,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   540,
     243,     0,   244,   245,   246,   247,   248,     0,   249,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   392,   393,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,   497,   394,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,   498,   499,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   469,    80,    81,    82,    83,    84,   500,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,   104,   501,   106,     0,   107,   108,   109,   110,
     111,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,     0,   121,   122,     0,     0,
     123,   124,   125,     0,     0,     0,   126,     0,   127,   128,
       0,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,     0,   395,     0,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   479,   480,   481,   175,   176,   482,   503,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,   542,   244,   245,
     246,   247,   248,     0,   249,     1,     2,     3,     4,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   392,   393,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,   497,   394,    26,    27,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,    44,    45,    46,   498,   499,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,   469,    80,
      81,    82,    83,    84,   500,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,   104,   501,
     106,     0,   107,   108,   109,   110,   111,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,     0,   121,   122,     0,     0,   123,   124,   125,     0,
     842,     0,   126,     0,   127,   128,     0,     0,     0,     0,
       0,     0,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
       0,   395,     0,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   479,   480,
     481,   175,   176,   482,   503,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   245,   246,   247,   248,     0,
     249,     1,     2,     3,     4,     5,     6,     0,     0,     0,
       9,     0,     0,     0,   392,   393,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,   497,
     394,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,   498,   499,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,   469,    80,    81,    82,    83,    84,
     500,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,  1364,     0,    98,    99,
     100,   101,   102,   103,   104,   501,   106,     0,   107,   108,
     109,   110,   111,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,     0,   120,     0,   121,   122,
       0,     0,   123,   124,   125,     0,     0,     0,   126,     0,
     127,   128,     0,     0,     0,     0,     0,     0,   130,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,   144,     0,   395,     0,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   479,   480,   481,   175,   176,   482,
     503,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,     0,   243,     0,
     244,   245,   246,   247,   248,     0,   249,     1,     2,     3,
       4,     5,     6,     0,     0,     0,     9,     0,     0,     0,
     392,   393,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,   458,    23,   460,   394,    26,   461,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,   463,     0,    44,    45,    46,
     465,   466,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
     469,    80,    81,    82,    83,    84,   500,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,   470,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
     104,   501,   106,     0,   107,   108,   628,   110,   111,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,     0,   629,   122,     0,     0,   123,   124,
     125,     0,     0,     0,   126,     0,   127,   128,     0,     0,
       0,     0,     0,     0,   130,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     0,   142,
     143,   144,     0,   395,     0,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   474,   159,   475,   161,
     476,   477,   164,   165,   166,   167,   168,   169,   478,   171,
     479,   480,   481,   175,   176,   482,   483,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   484,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,     0,   243,     0,   244,   485,   246,   247,
     248,     0,   249,     1,     2,     3,     4,     5,     6,     0,
       0,     0,     9,     0,     0,     0,   392,   393,     0,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,   497,   394,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,   498,   499,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,   469,    80,    81,    82,
      83,    84,   500,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,   101,   102,   103,   104,   501,   106,     0,
     107,   108,   109,   110,   111,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,     0,
     121,   122,     0,     0,   123,   124,   125,     0,     0,     0,
     126,     0,   127,   128,     0,     0,     0,     0,     0,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     0,   142,   143,   144,     0,   395,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   479,   480,   481,   175,
     176,   482,   503,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,     0,
     243,     0,   244,   245,   246,   247,   248,     0,   249,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   392,   393,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,   458,    23,   460,   394,    26,
     461,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   463,     0,    44,
      45,    46,   465,   466,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   469,    80,    81,    82,    83,    84,   500,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,   470,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,   104,   501,   106,     0,   107,   108,   109,   110,
     111,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,     0,   121,   122,     0,     0,
     123,   124,   125,     0,     0,     0,   126,     0,   127,   128,
       0,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       0,   142,   143,   144,     0,   395,     0,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   474,   159,
     475,   161,   476,   477,   164,   165,   166,   167,   168,   169,
     478,   171,   479,   480,   481,   175,   176,   482,   483,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   484,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,     0,   243,     0,   244,   485,
     246,   247,   248,     0,   249,     1,     2,     3,     4,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   392,   393,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,   458,    23,   460,   394,    26,   461,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,   463,     0,    44,    45,    46,   465,   466,
      49,   467,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,   469,    80,
      81,    82,    83,    84,   500,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   470,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,   104,   501,
     106,     0,   107,   108,     0,   110,   111,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,     0,
     120,     0,     0,     0,     0,     0,   123,   124,   125,     0,
       0,     0,   126,     0,   127,   128,     0,     0,     0,     0,
       0,     0,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,
       0,   395,     0,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   474,   159,   475,   161,   476,   477,
     164,   165,   166,   167,   168,   169,   478,   171,   479,   480,
     481,   175,   176,   482,   483,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   484,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,     0,   243,     0,   244,   485,   246,   247,   248,     0,
     249,     5,     6,     0,     0,     0,     0,     0,     0,     0,
     392,   393,     0,    12,    13,    14,  1056,    16,    17,    18,
     456,  1057,  1058,   458,  1059,   460,   394,    26,   461,    28,
    1060,    30,     0,    31,    32,    33,    34,  1061,    36,  1062,
    1063,    39,    40,    41,    42,   463,     0,    44,  1064,    46,
     465,   466,    49,   467,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,  1065,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,     0,    78,
     469,    80,    81,    82,    83,    84,     0,     0,     0,     0,
       0,     0,     0,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,   470,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,     0,   102,   103,
    1066,     0,     0,     0,  1067,     0,     0,   110,   471,     0,
       0,     0,     0,   112,   113,   114,   115,   472,   117,   118,
     119,     0,     0,     0,     0,     0,     0,     0,   123,   124,
     125,     0,     0,     0,   126,  1519,   127,   128,     0,     0,
       0,     0,  1520,     0,   130,     0,   131,   132,   133,   134,
     473,   136,   137,   138,   139,   140,   141,     0,     0,  1068,
     143,     0,     0,   395,     0,   147,   148,     0,     0,     0,
     152,   153,   154,   155,   156,   157,   474,  1069,   475,   161,
     476,   477,   164,   165,   166,   167,   168,   169,   478,   171,
     479,   480,   481,   175,   176,   482,   483,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   484,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,     0,     0,     5,     6,   244,   485,   246,  1070,
    1071,  1072,  1073,   392,   393,     0,    12,    13,    14,  1056,
      16,    17,    18,   456,  1057,  1058,   458,  1059,   460,   394,
      26,   461,    28,  1060,    30,     0,    31,    32,    33,    34,
    1061,    36,  1062,  1063,    39,    40,    41,    42,   463,     0,
      44,  1064,    46,   465,   466,    49,   467,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,     0,    68,    69,    70,  1065,     0,
       0,    72,    73,    74,     0,     0,    75,    76,     0,     0,
       0,     0,    78,   469,    80,    81,    82,    83,    84,  1408,
       0,     0,     0,     0,     0,     0,     0,    88,    89,    90,
      91,     0,    92,     0,     0,     0,   470,    94,    95,    96,
      97,     0,     0,     0,     0,     0,     0,    98,    99,   100,
       0,   102,   103,  1066,     0,     0,     0,  1067,     0,     0,
     110,   471,     0,     0,     0,     0,   112,   113,   114,   115,
     472,   117,   118,   119,     0,     0,     0,     0,     0,     0,
       0,   123,   124,   125,     0,     0,     0,   126,     0,   127,
     128,     0,     0,     0,     0,     0,     0,   130,     0,   131,
     132,   133,   134,   473,   136,   137,   138,   139,   140,   141,
       0,     0,  1068,   143,     0,     0,   395,     0,   147,   148,
       0,     0,     0,   152,   153,   154,   155,   156,   157,   474,
    1069,   475,   161,   476,   477,   164,   165,   166,   167,   168,
     169,   478,   171,   479,   480,   481,   175,   176,   482,   483,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   484,     0,   192,   193,   194,     0,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,     5,     6,   244,
     485,   246,  1070,  1071,  1072,  1073,   392,   393,     0,    12,
      13,    14,  1056,    16,    17,    18,   456,  1057,  1058,   458,
    1059,   460,   394,    26,   461,    28,  1060,    30,     0,    31,
      32,    33,    34,  1061,    36,  1062,  1063,    39,    40,    41,
      42,   463,     0,    44,  1064,    46,   465,   466,    49,   467,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,  1065,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,     0,    78,   469,    80,    81,    82,
      83,    84,  1574,     0,     0,     0,     0,     0,     0,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,   470,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,     0,   102,   103,  1066,     0,     0,     0,
    1067,     0,     0,   110,   471,     0,     0,     0,     0,   112,
     113,   114,   115,   472,   117,   118,   119,     0,     0,     0,
       0,     0,     0,     0,   123,   124,   125,     0,     0,     0,
     126,     0,   127,   128,     0,     0,     0,     0,     0,     0,
     130,     0,   131,   132,   133,   134,   473,   136,   137,   138,
     139,   140,   141,     0,     0,  1068,   143,     0,     0,   395,
       0,   147,   148,     0,     0,     0,   152,   153,   154,   155,
     156,   157,   474,  1069,   475,   161,   476,   477,   164,   165,
     166,   167,   168,   169,   478,   171,   479,   480,   481,   175,
     176,   482,   483,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   484,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,     0,     0,
       5,     6,   244,   485,   246,  1070,  1071,  1072,  1073,   392,
     393,     0,    12,    13,    14,  1056,    16,    17,    18,   456,
    1057,  1058,   458,  1059,   460,   394,    26,   461,    28,  1060,
      30,     0,    31,    32,    33,    34,  1061,    36,  1062,  1063,
      39,    40,    41,    42,   463,     0,    44,  1064,    46,   465,
     466,    49,   467,    51,    52,    53,    54,    55,    56,    57,
=======
       0,   104,   105,     0,   106,   107,   108,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,   120,   121,     0,     0,   122,   123,
     124,     0,     0,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   389,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,     0,   241,     0,     0,   242,   243,     1,
       2,     3,     4,     5,     6,     7,     8,     0,     9,     0,
       0,     0,   789,   387,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,   388,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,     0,   104,   105,     0,   106,   107,   108,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,   120,   121,     0,     0,
     122,   123,   124,     0,     0,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   389,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,     0,     0,   242,
     243,     1,     2,     3,     4,     5,     6,     0,     0,     0,
       9,     0,     0,     0,   386,   387,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,   487,
     388,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,   488,   489,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,   463,    80,    81,    82,    83,    84,
     490,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,   850,     0,    98,    99,
     100,   101,   102,   103,     0,   491,   105,     0,   106,   107,
     108,   109,   110,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,     0,   120,   121,
       0,     0,   122,   123,   124,     0,     0,     0,   125,   851,
     126,   127,     0,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,     0,   140,   141,   142,     0,   389,     0,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   469,   470,   471,   173,   174,   472,
     493,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,     0,   241,     0,
       0,   242,   243,     1,     2,     3,     4,     5,     6,     0,
       0,     0,     9,     0,     0,     0,   386,   387,     0,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,   487,   388,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,   488,   489,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,   463,    80,    81,    82,
      83,    84,   490,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,   850,     0,
      98,    99,   100,   101,   102,   103,     0,   491,   105,     0,
     106,   107,   108,   109,   110,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,     0,
     120,   121,     0,     0,   122,   123,   124,     0,     0,     0,
     125,   856,   126,   127,     0,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,     0,   140,   141,   142,     0,   389,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   469,   470,   471,   173,
     174,   472,   493,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,     0,
     241,     0,     0,   242,   243,     1,     2,     3,     4,     5,
       6,     7,     8,     0,     9,     0,     0,     0,   386,   387,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,  1258,   388,    26,    27,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,    44,    45,    46,  1259,  1260,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,     0,   104,
     105,     0,   106,   107,   108,   109,   110,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,     0,   120,   121,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,   142,
       0,   389,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,  1261,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,     0,   241,     0,     0,   242,   243,     1,     2,     3,
       4,     5,     6,     0,     0,     0,     9,     0,     0,     0,
     386,   387,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,   487,   388,    26,    27,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
     488,   489,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
     463,    80,    81,    82,    83,    84,   490,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
       0,   491,   105,     0,   106,   107,   108,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,   120,   121,     0,     0,   122,   123,
     124,     0,     0,   492,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   389,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     469,   470,   471,   173,   174,   472,   493,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,     0,   241,     0,     0,   242,   243,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   386,   387,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,   487,   388,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,   488,   489,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   463,    80,    81,    82,    83,    84,   490,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,     0,   491,   105,     0,   106,   107,   108,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,   120,   121,     0,     0,
     122,   123,   124,     0,     0,     0,   125,   497,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   389,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   469,   470,   471,   173,   174,   472,   493,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,     0,     0,   242,
     243,     1,     2,     3,     4,     5,     6,     0,     0,     0,
       9,     0,     0,     0,   386,   387,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,   487,
     388,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,   488,   489,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,   463,    80,    81,    82,    83,    84,
     490,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,     0,   491,   105,     0,   106,   107,
     108,   109,   110,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,     0,   120,   121,
       0,     0,   122,   123,   124,     0,     0,     0,   125,     0,
     126,   127,     0,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,     0,   140,   141,   142,     0,   389,     0,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   469,   470,   471,   173,   174,   472,
     493,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   535,   241,     0,
       0,   242,   243,     1,     2,     3,     4,     5,     6,     0,
       0,     0,     9,     0,     0,     0,   386,   387,     0,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,   487,   388,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,   488,   489,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,   463,    80,    81,    82,
      83,    84,   490,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,   101,   102,   103,     0,   491,   105,     0,
     106,   107,   108,   109,   110,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,     0,
     120,   121,     0,     0,   122,   123,   124,     0,     0,     0,
     125,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,     0,   140,   141,   142,     0,   389,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   469,   470,   471,   173,
     174,   472,   493,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,     0,
     241,   537,     0,   242,   243,     1,     2,     3,     4,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   386,   387,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,   487,   388,    26,    27,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,    44,    45,    46,   488,   489,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,   463,    80,
      81,    82,    83,    84,   490,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,    93,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,     0,   491,
     105,     0,   106,   107,   108,   109,   110,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,     0,   120,   121,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,   142,
       0,   389,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   469,   470,
     471,   173,   174,   472,   493,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   539,   242,   243,     1,     2,     3,
       4,     5,     6,     0,     0,     0,     9,     0,     0,     0,
     386,   387,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,   487,   388,    26,    27,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,    44,    45,    46,
     488,   489,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
     463,    80,    81,    82,    83,    84,   490,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,    93,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
       0,   491,   105,     0,   106,   107,   108,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,   120,   121,     0,     0,   122,   123,
     124,     0,   842,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   389,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     469,   470,   471,   173,   174,   472,   493,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,     0,   241,     0,     0,   242,   243,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   386,   387,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,   487,   388,    26,
      27,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,    44,
      45,    46,   488,   489,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   463,    80,    81,    82,    83,    84,   490,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,    93,    94,    95,    96,    97,
       0,     0,     0,     0,  1372,     0,    98,    99,   100,   101,
     102,   103,     0,   491,   105,     0,   106,   107,   108,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,   120,   121,     0,     0,
     122,   123,   124,     0,     0,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   389,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   469,   470,   471,   173,   174,   472,   493,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,     0,     0,   242,
     243,     1,     2,     3,     4,     5,     6,     0,     0,     0,
       9,     0,     0,     0,   386,   387,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,   487,
     388,    26,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,    44,    45,    46,   488,   489,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,   463,    80,    81,    82,    83,    84,
     490,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,    93,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,     0,   491,   105,     0,   106,   107,
     108,   109,   110,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,     0,   120,   121,
       0,     0,   122,   123,   124,     0,     0,     0,   125,     0,
     126,   127,     0,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,     0,   140,   141,   142,     0,   389,     0,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   469,   470,   471,   173,   174,   472,
     493,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,     0,   241,     0,
       0,   242,   243,     1,     2,     3,     4,     5,     6,     0,
       0,     0,     9,     0,     0,     0,   386,   387,     0,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,   487,   388,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,    44,    45,    46,   488,   489,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,   463,    80,    81,    82,
      83,    84,   490,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,    93,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,   101,   102,   103,     0,   491,   105,     0,
       0,   107,   108,   109,   110,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,     0,
     120,   121,     0,     0,   122,   123,   124,     0,     0,     0,
     125,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,     0,   140,   141,   142,     0,   389,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   469,   470,   471,   173,
     174,   472,   493,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,     0,
     241,     0,     0,   242,   243,     1,     2,     3,     4,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   386,   387,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,   452,    23,   454,   388,    26,   455,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,   457,     0,    44,    45,    46,   459,   460,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,   463,    80,
      81,    82,    83,    84,   490,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   464,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,     0,   491,
     105,     0,   106,   107,   624,   109,   110,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,     0,   625,   121,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,   142,
       0,   389,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   157,     0,   159,     0,     0,
     162,   163,   164,   165,   166,   167,   468,   169,   469,   470,
     471,   173,   174,   472,   473,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   474,     0,   190,
     475,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   243,     1,     2,     3,
       4,     5,     6,     0,     0,     0,     9,     0,     0,     0,
     386,   387,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,   452,    23,   454,   388,    26,   455,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,   457,     0,    44,    45,    46,
     459,   460,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
     463,    80,    81,    82,    83,    84,   490,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,   464,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
       0,   491,   105,     0,   106,   107,   108,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,   120,   121,     0,     0,   122,   123,
     124,     0,     0,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   389,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   157,     0,   159,
       0,     0,   162,   163,   164,   165,   166,   167,   468,   169,
     469,   470,   471,   173,   174,   472,   473,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   474,
       0,   190,   191,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   243,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   386,   387,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,   452,    23,   454,   388,    26,
     455,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   457,     0,    44,
      45,    46,   459,   460,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   463,    80,    81,    82,    83,    84,   490,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,   464,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,     0,   491,   105,     0,   106,   107,   108,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,   120,   121,     0,     0,
     122,   123,   124,     0,     0,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   389,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   157,
       0,   159,     0,     0,   162,   163,   164,   165,   166,   167,
     468,   169,   469,   470,   471,   173,   174,   472,   473,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   474,     0,   190,   475,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     243,     1,     2,     3,     4,     5,     6,     0,     0,     0,
       9,     0,     0,     0,   386,   387,     0,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,   452,    23,   454,
     388,    26,   455,    28,    29,    30,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,   457,
       0,    44,    45,    46,   459,   460,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
       0,     0,    77,    78,   463,    80,    81,    82,    83,    84,
     490,    86,     0,     0,     0,     0,    87,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,   464,    94,    95,
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
     100,   101,   102,   103,     0,   491,   105,     0,     0,   107,
     108,   109,   110,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,     0,   120,   121,
       0,     0,   122,   123,   124,     0,     0,     0,   125,     0,
     126,   127,     0,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,     0,   140,   141,   142,     0,   389,     0,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   157,     0,   159,     0,     0,   162,   163,   164,   165,
     166,   167,   468,   169,   469,   470,   471,   173,   174,   472,
     473,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   474,     0,   190,   191,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   243,     1,     2,     3,     4,     5,     6,     0,
       0,     0,     9,     0,     0,     0,   386,   387,     0,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,   452,
      23,   454,   388,    26,   455,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,   457,     0,    44,    45,    46,   459,   460,    49,   461,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,    71,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,    77,    78,   463,    80,    81,    82,
      83,    84,   490,    86,     0,     0,     0,     0,    87,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,   464,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,   101,   102,   103,     0,   491,   105,     0,
     106,   107,     0,   109,   110,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,     0,
       0,     0,     0,     0,   122,   123,   124,     0,     0,     0,
     125,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,     0,   140,   141,   142,     0,   389,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   512,     0,   513,     0,     0,   162,   163,
     164,   165,   166,   167,   468,   169,   469,   470,   471,   173,
     174,   472,   473,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   474,     0,   190,   475,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   514,     0,   243,     1,     2,     3,     4,     5,
       6,     0,     0,     0,     9,     0,     0,     0,   386,   387,
       0,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,   452,    23,   454,   388,    26,   455,    28,    29,    30,
       0,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,   457,     0,    44,    45,    46,   459,   460,
      49,   461,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,    77,    78,   463,    80,
      81,    82,    83,    84,   490,    86,     0,     0,     0,     0,
      87,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   464,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,   101,   102,   103,     0,   491,
     105,     0,   106,   107,     0,   109,   110,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,     0,     0,     0,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,   142,
       0,   389,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   521,     0,   159,     0,     0,
     162,   163,   164,   165,   166,   167,   468,   169,   469,   470,
     471,   173,   174,   472,   473,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   474,     0,   190,
     475,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   522,     0,   243,     1,     2,     3,
       4,     5,     6,     0,     0,     0,     9,     0,     0,     0,
     386,   387,     0,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,   452,    23,   454,   388,    26,   455,    28,
      29,    30,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,   457,     0,    44,    45,    46,
     459,   460,    49,   461,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    69,    70,    71,     0,     0,    72,    73,
      74,     0,     0,    75,    76,     0,     0,     0,    77,    78,
     463,    80,    81,    82,    83,    84,   490,    86,     0,     0,
       0,     0,    87,     0,    88,    89,    90,    91,     0,    92,
       0,     0,     0,   464,    94,    95,    96,    97,     0,     0,
       0,     0,     0,     0,    98,    99,   100,   101,   102,   103,
       0,   491,   105,     0,   106,   107,     0,   109,   110,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,     0,     0,     0,     0,     0,   122,   123,
     124,     0,     0,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,   142,     0,   389,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   157,     0,   159,
       0,     0,   162,   163,   164,   165,   166,   167,   468,   169,
     469,   470,   471,   173,   174,   472,   473,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   474,
       0,   190,   475,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   243,     1,
       2,     3,     4,     5,     6,     0,     0,     0,     9,     0,
       0,     0,   386,   387,     0,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,   452,    23,   454,   388,    26,
     455,    28,    29,    30,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   457,     0,    44,
      45,    46,   459,   460,    49,   461,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,     0,     0,
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
      77,    78,   463,    80,    81,    82,    83,    84,   490,    86,
       0,     0,     0,     0,    87,     0,    88,    89,    90,    91,
       0,    92,     0,     0,     0,   464,    94,    95,    96,    97,
       0,     0,     0,     0,     0,     0,    98,    99,   100,   101,
     102,   103,     0,   491,   105,     0,   106,   107,     0,   109,
     110,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,     0,     0,     0,     0,     0,
     122,   123,   124,     0,     0,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
       0,   140,   141,   142,     0,   389,     0,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   995,
       0,   159,     0,     0,   162,   163,   164,   165,   166,   167,
     468,   169,   469,   470,   471,   173,   174,   472,   473,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   474,     0,   190,   475,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,     0,   241,     5,     6,     0,
     243,     0,     0,     0,     0,     0,   386,   387,     0,    12,
      13,    14,  1061,    16,    17,    18,   450,  1062,  1063,   452,
    1064,   454,   388,    26,   455,    28,  1065,    30,     0,    31,
      32,    33,    34,  1066,    36,  1067,  1068,    39,    40,    41,
      42,   457,     0,    44,  1069,    46,   459,   460,    49,   461,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
      70,  1070,     0,     0,    72,    73,    74,     0,     0,    75,
      76,     0,     0,     0,     0,    78,   463,    80,    81,    82,
      83,    84,     0,     0,     0,     0,     0,     0,     0,     0,
      88,    89,    90,    91,     0,    92,     0,     0,     0,   464,
      94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
      98,    99,   100,     0,   102,   103,  1071,     0,     0,     0,
    1072,     0,     0,   109,   465,     0,     0,     0,     0,   111,
     112,   113,   114,   466,   116,   117,   118,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,     0,     0,     0,
     125,  1529,   126,   127,     0,     0,     0,     0,  1530,     0,
     128,     0,   129,   130,   131,   132,   467,   134,   135,   136,
     137,   138,   139,     0,     0,  1073,   141,     0,     0,   389,
       0,   145,   146,     0,     0,     0,   150,   151,   152,   153,
     154,   155,     0,  1074,     0,   159,     0,     0,   162,   163,
     164,   165,   166,   167,   468,   169,   469,   470,   471,   173,
     174,   472,   473,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   474,     0,   190,   475,   192,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,     0,     0,
       5,     6,     0,     0,   243,  1075,  1076,  1077,  1078,   386,
     387,     0,    12,    13,    14,  1061,    16,    17,    18,   450,
    1062,  1063,   452,  1064,   454,   388,    26,   455,    28,  1065,
      30,     0,    31,    32,    33,    34,  1066,    36,  1067,  1068,
      39,    40,    41,    42,   457,     0,    44,  1069,    46,   459,
     460,    49,   461,    51,    52,    53,    54,    55,    56,    57,
>>>>>>> MERGE-SOURCE
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
<<<<<<< TREE
       0,    68,    69,    70,  1065,     0,     0,    72,    73,    74,
       0,     0,    75,    76,     0,     0,     0,     0,    78,   469,
      80,    81,    82,    83,    84,  1578,     0,     0,     0,     0,
=======
       0,    68,    69,    70,  1070,     0,     0,    72,    73,    74,
       0,     0,    75,    76,     0,     0,     0,     0,    78,   463,
      80,    81,    82,    83,    84,     0,     0,     0,     0,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,    88,    89,    90,    91,     0,    92,     0,
<<<<<<< TREE
       0,     0,   470,    94,    95,    96,    97,     0,     0,     0,
       0,     0,     0,    98,    99,   100,     0,   102,   103,  1066,
       0,     0,     0,  1067,     0,     0,   110,   471,     0,     0,
       0,     0,   112,   113,   114,   115,   472,   117,   118,   119,
       0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
       0,     0,     0,   126,     0,   127,   128,     0,     0,     0,
       0,     0,     0,   130,     0,   131,   132,   133,   134,   473,
     136,   137,   138,   139,   140,   141,     0,     0,  1068,   143,
       0,     0,   395,     0,   147,   148,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   474,  1069,   475,   161,   476,
     477,   164,   165,   166,   167,   168,   169,   478,   171,   479,
     480,   481,   175,   176,   482,   483,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   484,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     5,     6,   244,   485,   246,  1070,  1071,
    1072,  1073,   392,   393,     0,    12,    13,    14,  1056,    16,
      17,    18,   456,  1057,  1058,   458,  1059,   460,   394,    26,
     461,    28,  1060,    30,     0,    31,    32,    33,    34,  1061,
      36,  1062,  1063,    39,    40,    41,    42,   463,     0,    44,
    1064,    46,   465,   466,    49,   467,    51,    52,    53,    54,
=======
       0,     0,   464,    94,    95,    96,    97,     0,     0,     0,
       0,     0,     0,    98,    99,   100,     0,   102,   103,  1071,
       0,     0,     0,  1122,     0,     0,   109,   465,     0,     0,
       0,     0,   111,   112,   113,   114,   466,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
       0,     0,     0,   125,  1359,   126,   127,     0,     0,     0,
       0,     0,     0,   128,     0,   129,   130,   131,   132,   467,
     134,   135,   136,   137,   138,   139,     0,     0,   140,   141,
       0,     0,   389,     0,   145,   146,     0,     0,     0,   150,
     151,   152,   153,   154,   155,     0,  1074,     0,   159,     0,
       0,   162,   163,   164,   165,   166,   167,   468,   169,   469,
     470,   471,   173,   174,   472,   473,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   474,     0,
     190,   475,   192,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,     0,     0,     5,     6,     0,     0,   243,  1075,  1076,
    1077,  1078,   386,   387,     0,    12,    13,    14,  1061,    16,
      17,    18,   450,  1062,  1063,   452,  1064,   454,   388,    26,
     455,    28,  1065,    30,     0,    31,    32,    33,    34,  1066,
      36,  1067,  1068,    39,    40,    41,    42,   457,     0,    44,
    1069,    46,   459,   460,    49,   461,    51,    52,    53,    54,
>>>>>>> MERGE-SOURCE
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
<<<<<<< TREE
      65,    66,    67,     0,    68,    69,    70,  1065,     0,     0,
=======
      65,    66,    67,     0,    68,    69,    70,  1070,     0,     0,
>>>>>>> MERGE-SOURCE
      72,    73,    74,     0,     0,    75,    76,     0,     0,     0,
<<<<<<< TREE
       0,    78,   469,    80,    81,    82,    83,    84,     0,     0,
=======
       0,    78,   463,    80,    81,    82,    83,    84,  1416,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,     0,     0,    88,    89,    90,    91,
<<<<<<< TREE
       0,    92,     0,     0,     0,   470,    94,    95,    96,    97,
=======
       0,    92,     0,     0,     0,   464,    94,    95,    96,    97,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,     0,     0,    98,    99,   100,     0,
<<<<<<< TREE
     102,   103,  1066,     0,     0,     0,  1067,     0,     0,   110,
     471,     0,     0,     0,     0,   112,   113,   114,   115,   472,
     117,   118,   119,     0,     0,     0,     0,     0,     0,     0,
     123,   124,   125,     0,     0,     0,   126,     0,   127,   128,
       0,     0,     0,     0,     0,     0,   130,     0,   131,   132,
     133,   134,   473,   136,   137,   138,   139,   140,   141,     0,
       0,  1068,   143,     0,     0,   395,     0,   147,   148,     0,
       0,     0,   152,   153,   154,   155,   156,   157,   474,  1069,
     475,   161,   476,   477,   164,   165,   166,   167,   168,   169,
     478,   171,   479,   480,   481,   175,   176,   482,   483,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   484,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,     0,     0,     5,     6,   244,   485,
     246,  1070,  1071,  1072,  1073,   392,   393,     0,    12,    13,
      14,  1056,    16,    17,    18,   456,  1057,  1058,   458,  1059,
     460,   394,    26,   461,    28,  1060,    30,     0,    31,    32,
      33,    34,  1061,    36,  1062,  1063,    39,    40,    41,    42,
     463,     0,    44,  1064,    46,   465,   466,    49,   467,    51,
=======
     102,   103,  1071,     0,     0,     0,  1072,     0,     0,   109,
     465,     0,     0,     0,     0,   111,   112,   113,   114,   466,
     116,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,     0,     0,     0,   125,     0,   126,   127,
       0,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   467,   134,   135,   136,   137,   138,   139,     0,
       0,  1073,   141,     0,     0,   389,     0,   145,   146,     0,
       0,     0,   150,   151,   152,   153,   154,   155,     0,  1074,
       0,   159,     0,     0,   162,   163,   164,   165,   166,   167,
     468,   169,   469,   470,   471,   173,   174,   472,   473,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   474,     0,   190,   475,   192,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,     0,     0,     5,     6,     0,     0,
     243,  1075,  1076,  1077,  1078,   386,   387,     0,    12,    13,
      14,  1061,    16,    17,    18,   450,  1062,  1063,   452,  1064,
     454,   388,    26,   455,    28,  1065,    30,     0,    31,    32,
      33,    34,  1066,    36,  1067,  1068,    39,    40,    41,    42,
     457,     0,    44,  1069,    46,   459,   460,    49,   461,    51,
>>>>>>> MERGE-SOURCE
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,     0,    68,    69,    70,
<<<<<<< TREE
    1065,     0,     0,    72,    73,    74,     0,     0,    75,    76,
       0,     0,     0,     0,    78,   469,    80,    81,    82,    83,
      84,     0,     0,     0,     0,     0,     0,     0,     0,    88,
      89,    90,    91,     0,    92,     0,     0,     0,   470,    94,
=======
    1070,     0,     0,    72,    73,    74,     0,     0,    75,    76,
       0,     0,     0,     0,    78,   463,    80,    81,    82,    83,
      84,  1585,     0,     0,     0,     0,     0,     0,     0,    88,
      89,    90,    91,     0,    92,     0,     0,     0,   464,    94,
>>>>>>> MERGE-SOURCE
      95,    96,    97,     0,     0,     0,     0,     0,     0,    98,
<<<<<<< TREE
      99,   100,     0,   102,   103,  1066,     0,     0,     0,  1067,
       0,     0,   110,   471,     0,     0,     0,     0,   112,   113,
     114,   115,   472,   117,   118,   119,     0,     0,     0,     0,
       0,     0,     0,   123,   124,   125,     0,     0,     0,   126,
       0,   127,   128,     0,     0,     0,     0,     0,     0,   130,
       0,   131,   132,   133,   134,   473,   136,   137,   138,   139,
     140,   141,     0,     0,   142,   143,     0,     0,   395,     0,
     147,   148,     0,     0,     0,   152,   153,   154,   155,   156,
     157,   474,  1069,   475,   161,   476,   477,   164,   165,   166,
     167,   168,   169,   478,   171,   479,   480,   481,   175,   176,
     482,   483,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   484,     0,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,     0,     0,     5,
       6,   244,   485,   246,  1070,  1071,  1072,  1073,   392,   393,
       0,    12,    13,    14,   455,    16,    17,    18,   456,    20,
     457,   458,   459,   460,   394,    26,   461,    28,    29,    30,
       0,    31,    32,    33,    34,   462,    36,    37,    38,    39,
      40,    41,    42,   463,     0,    44,   464,    46,   465,   466,
      49,   467,    51,    52,    53,    54,    55,    56,    57,    58,
=======
      99,   100,     0,   102,   103,  1071,     0,     0,     0,  1072,
       0,     0,   109,   465,     0,     0,     0,     0,   111,   112,
     113,   114,   466,   116,   117,   118,     0,     0,     0,     0,
       0,     0,     0,   122,   123,   124,     0,     0,     0,   125,
       0,   126,   127,     0,     0,     0,     0,     0,     0,   128,
       0,   129,   130,   131,   132,   467,   134,   135,   136,   137,
     138,   139,     0,     0,  1073,   141,     0,     0,   389,     0,
     145,   146,     0,     0,     0,   150,   151,   152,   153,   154,
     155,     0,  1074,     0,   159,     0,     0,   162,   163,   164,
     165,   166,   167,   468,   169,   469,   470,   471,   173,   174,
     472,   473,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   474,     0,   190,   475,   192,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,     0,     0,     5,
       6,     0,     0,   243,  1075,  1076,  1077,  1078,   386,   387,
       0,    12,    13,    14,  1061,    16,    17,    18,   450,  1062,
    1063,   452,  1064,   454,   388,    26,   455,    28,  1065,    30,
       0,    31,    32,    33,    34,  1066,    36,  1067,  1068,    39,
      40,    41,    42,   457,     0,    44,  1069,    46,   459,   460,
      49,   461,    51,    52,    53,    54,    55,    56,    57,    58,
>>>>>>> MERGE-SOURCE
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
<<<<<<< TREE
      68,    69,    70,   468,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,     0,    78,   469,    80,
      81,    82,    83,    84,     0,     0,     0,     0,     0,     0,
=======
      68,    69,    70,  1070,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,     0,    78,   463,    80,
      81,    82,    83,    84,  1589,     0,     0,     0,     0,     0,
>>>>>>> MERGE-SOURCE
       0,     0,    88,    89,    90,    91,     0,    92,     0,     0,
<<<<<<< TREE
       0,   470,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,   110,   471,     0,     0,     0,
       0,   112,   113,   114,   115,   472,   117,   118,   119,     0,
       0,     0,     0,     0,     0,     0,   123,   124,   125,     0,
       0,     0,   126,  1516,   127,   128,     0,     0,     0,     0,
    1517,     0,   130,     0,   131,   132,   133,   134,   473,   136,
     137,   138,   139,   140,   141,     0,     0,   142,   143,     0,
       0,   395,     0,   147,   148,     0,     0,     0,   152,   153,
     154,   155,   156,   157,   474,   159,   475,   161,   476,   477,
     164,   165,   166,   167,   168,   169,   478,   171,   479,   480,
     481,   175,   176,   482,   483,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   484,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
       0,     0,     5,     6,   244,   485,   246,   247,   248,     0,
     249,   392,   393,     0,    12,    13,    14,   455,    16,    17,
      18,   456,    20,   457,   458,   459,   460,   394,    26,   461,
      28,    29,    30,     0,    31,    32,    33,    34,   462,    36,
      37,    38,    39,    40,    41,    42,   463,     0,    44,   464,
      46,   465,   466,    49,   467,    51,    52,    53,    54,    55,
=======
       0,   464,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,     0,   102,   103,  1071,     0,
       0,     0,  1072,     0,     0,   109,   465,     0,     0,     0,
       0,   111,   112,   113,   114,   466,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,     0,
       0,     0,   125,     0,   126,   127,     0,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   467,   134,
     135,   136,   137,   138,   139,     0,     0,  1073,   141,     0,
       0,   389,     0,   145,   146,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,  1074,     0,   159,     0,     0,
     162,   163,   164,   165,   166,   167,   468,   169,   469,   470,
     471,   173,   174,   472,   473,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   474,     0,   190,
     475,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
       0,     0,     5,     6,     0,     0,   243,  1075,  1076,  1077,
    1078,   386,   387,     0,    12,    13,    14,  1061,    16,    17,
      18,   450,  1062,  1063,   452,  1064,   454,   388,    26,   455,
      28,  1065,    30,     0,    31,    32,    33,    34,  1066,    36,
    1067,  1068,    39,    40,    41,    42,   457,     0,    44,  1069,
      46,   459,   460,    49,   461,    51,    52,    53,    54,    55,
>>>>>>> MERGE-SOURCE
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
<<<<<<< TREE
      66,    67,     0,    68,    69,    70,   468,     0,     0,    72,
=======
      66,    67,     0,    68,    69,    70,  1070,     0,     0,    72,
>>>>>>> MERGE-SOURCE
      73,    74,     0,     0,    75,    76,     0,     0,     0,     0,
<<<<<<< TREE
      78,   469,    80,    81,    82,    83,    84,     0,     0,     0,
=======
      78,   463,    80,    81,    82,    83,    84,     0,     0,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,     0,    88,    89,    90,    91,     0,
<<<<<<< TREE
      92,     0,     0,     0,   470,    94,    95,    96,    97,     0,
=======
      92,     0,     0,     0,   464,    94,    95,    96,    97,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,     0,    98,    99,   100,     0,   102,
<<<<<<< TREE
     103,   104,     0,     0,     0,     0,     0,     0,   110,   471,
       0,     0,     0,     0,   112,   113,   114,   115,   472,   117,
     118,   119,     0,     0,     0,     0,     0,     0,     0,   123,
     124,   125,     0,     0,     0,   126,  1530,   127,   128,     0,
       0,     0,     0,  1531,     0,   130,     0,   131,   132,   133,
     134,   473,   136,   137,   138,   139,   140,   141,     0,     0,
     142,   143,     0,     0,   395,     0,   147,   148,     0,     0,
       0,   152,   153,   154,   155,   156,   157,   474,   159,   475,
     161,   476,   477,   164,   165,   166,   167,   168,   169,   478,
     171,   479,   480,   481,   175,   176,   482,   483,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     484,     0,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,     0,     0,     5,     6,   244,   485,   246,
     247,   248,     0,   249,   392,   393,     0,    12,    13,    14,
     455,    16,    17,    18,   456,    20,   457,   458,   459,   460,
     394,    26,   461,    28,    29,    30,     0,    31,    32,    33,
      34,   462,    36,    37,    38,    39,    40,    41,    42,   463,
       0,    44,   464,    46,   465,   466,    49,   467,    51,    52,
=======
     103,  1071,     0,     0,     0,  1072,     0,     0,   109,   465,
       0,     0,     0,     0,   111,   112,   113,   114,   466,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,     0,     0,     0,   125,     0,   126,   127,     0,
       0,     0,     0,     0,     0,   128,     0,   129,   130,   131,
     132,   467,   134,   135,   136,   137,   138,   139,     0,     0,
    1073,   141,     0,     0,   389,     0,   145,   146,     0,     0,
       0,   150,   151,   152,   153,   154,   155,     0,  1074,     0,
     159,     0,     0,   162,   163,   164,   165,   166,   167,   468,
     169,   469,   470,   471,   173,   174,   472,   473,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     474,     0,   190,   475,   192,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,     0,     0,     5,     6,     0,     0,   243,
    1075,  1076,  1077,  1078,   386,   387,     0,    12,    13,    14,
    1061,    16,    17,    18,   450,  1062,  1063,   452,  1064,   454,
     388,    26,   455,    28,  1065,    30,     0,    31,    32,    33,
      34,  1066,    36,  1067,  1068,    39,    40,    41,    42,   457,
       0,    44,  1069,    46,   459,   460,    49,   461,    51,    52,
>>>>>>> MERGE-SOURCE
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
<<<<<<< TREE
      63,    64,    65,    66,    67,     0,    68,    69,    70,   468,
=======
      63,    64,    65,    66,    67,     0,    68,    69,    70,  1070,
>>>>>>> MERGE-SOURCE
       0,     0,    72,    73,    74,     0,     0,    75,    76,     0,
<<<<<<< TREE
       0,     0,     0,    78,   469,    80,    81,    82,    83,    84,
    1283,     0,     0,     0,     0,     0,     0,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,   470,    94,    95,
=======
       0,     0,     0,    78,   463,    80,    81,    82,    83,    84,
       0,     0,     0,     0,     0,     0,     0,     0,    88,    89,
      90,    91,     0,    92,     0,     0,     0,   464,    94,    95,
>>>>>>> MERGE-SOURCE
      96,    97,     0,     0,     0,     0,     0,     0,    98,    99,
<<<<<<< TREE
     100,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,   110,   471,     0,     0,     0,     0,   112,   113,   114,
     115,   472,   117,   118,   119,     0,     0,     0,     0,     0,
       0,     0,   123,   124,   125,     0,     0,     0,   126,     0,
     127,   128,     0,     0,     0,     0,     0,     0,   130,     0,
     131,   132,   133,   134,   473,   136,   137,   138,   139,   140,
     141,     0,     0,   142,   143,     0,     0,   395,     0,   147,
     148,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     474,   159,   475,   161,   476,   477,   164,   165,   166,   167,
     168,   169,   478,   171,   479,   480,   481,   175,   176,   482,
     483,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   484,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,     0,     0,     5,     6,
     244,   485,   246,   247,   248,     0,   249,   392,   393,     0,
      12,    13,    14,   455,    16,    17,    18,   456,    20,   457,
     458,   459,   460,   394,    26,   461,    28,    29,    30,     0,
      31,    32,    33,    34,   462,    36,    37,    38,    39,    40,
      41,    42,   463,     0,    44,   464,    46,   465,   466,    49,
     467,    51,    52,    53,    54,    55,    56,    57,    58,    59,
=======
     100,     0,   102,   103,  1071,     0,     0,     0,  1122,     0,
       0,   109,   465,     0,     0,     0,     0,   111,   112,   113,
     114,   466,   116,   117,   118,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,     0,     0,     0,   125,     0,
     126,   127,     0,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   467,   134,   135,   136,   137,   138,
     139,     0,     0,   140,   141,     0,     0,   389,     0,   145,
     146,     0,     0,     0,   150,   151,   152,   153,   154,   155,
       0,  1074,     0,   159,     0,     0,   162,   163,   164,   165,
     166,   167,   468,   169,   469,   470,   471,   173,   174,   472,
     473,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   474,     0,   190,   475,   192,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,     0,     0,     5,     6,
       0,     0,   243,  1075,  1076,  1077,  1078,   386,   387,     0,
      12,    13,    14,   449,    16,    17,    18,   450,    20,   451,
     452,   453,   454,   388,    26,   455,    28,    29,    30,     0,
      31,    32,    33,    34,   456,    36,    37,    38,    39,    40,
      41,    42,   457,     0,    44,   458,    46,   459,   460,    49,
     461,    51,    52,    53,    54,    55,    56,    57,    58,    59,
>>>>>>> MERGE-SOURCE
      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
<<<<<<< TREE
      69,    70,   468,     0,     0,    72,    73,    74,     0,     0,
      75,    76,     0,     0,     0,     0,    78,   469,    80,    81,
=======
      69,    70,   462,     0,     0,    72,    73,    74,     0,     0,
      75,    76,     0,     0,     0,     0,    78,   463,    80,    81,
>>>>>>> MERGE-SOURCE
      82,    83,    84,     0,     0,     0,     0,     0,     0,     0,
       0,    88,    89,    90,    91,     0,    92,     0,     0,     0,
<<<<<<< TREE
     470,    94,    95,    96,    97,     0,     0,     0,     0,     0,
       0,    98,    99,   100,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,   110,   471,     0,     0,     0,     0,
     112,   113,   114,   115,   472,   117,   118,   119,     0,     0,
       0,     0,     0,     0,     0,   123,   124,   125,     0,     0,
       0,   126,     0,   127,   128,     0,     0,     0,     0,     0,
       0,   130,     0,   131,   132,   133,   134,   473,   136,   137,
     138,   139,   140,   141,     0,     0,   142,   143,     0,     0,
     395,     0,   147,   148,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   474,   159,   475,   161,   476,   477,   164,
     165,   166,   167,   168,   169,   478,   171,   479,   480,   481,
     175,   176,   482,   483,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   484,     0,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,     0,
       0,     5,     6,   244,   485,   246,   247,   248,     0,   249,
     392,   393,     0,    12,    13,    14,     0,    16,    17,    18,
     456,     0,     0,   458,   459,     0,   394,    26,   461,    28,
       0,    30,     0,    31,    32,    33,    34,     0,    36,     0,
       0,    39,    40,    41,    42,   463,     0,    44,     0,    46,
       0,     0,    49,   467,    51,    52,    53,    54,    55,    56,
=======
     464,    94,    95,    96,    97,     0,     0,     0,     0,     0,
       0,    98,    99,   100,     0,   102,   103,     0,     0,     0,
       0,     0,     0,     0,   109,   465,     0,     0,     0,     0,
     111,   112,   113,   114,   466,   116,   117,   118,     0,     0,
       0,     0,     0,     0,     0,   122,   123,   124,     0,     0,
       0,   125,  1526,   126,   127,     0,     0,     0,     0,  1527,
       0,   128,     0,   129,   130,   131,   132,   467,   134,   135,
     136,   137,   138,   139,     0,     0,   140,   141,     0,     0,
     389,     0,   145,   146,     0,     0,     0,   150,   151,   152,
     153,   154,   155,     0,   157,     0,   159,     0,     0,   162,
     163,   164,   165,   166,   167,   468,   169,   469,   470,   471,
     173,   174,   472,   473,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   474,     0,   190,   475,
     192,     0,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,     5,
       6,     0,     0,     0,     0,   243,     0,     0,   386,   387,
       0,    12,    13,    14,   449,    16,    17,    18,   450,    20,
     451,   452,   453,   454,   388,    26,   455,    28,    29,    30,
       0,    31,    32,    33,    34,   456,    36,    37,    38,    39,
      40,    41,    42,   457,     0,    44,   458,    46,   459,   460,
      49,   461,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,   462,     0,     0,    72,    73,    74,     0,
       0,    75,    76,     0,     0,     0,     0,    78,   463,    80,
      81,    82,    83,    84,     0,     0,     0,     0,     0,     0,
       0,     0,    88,    89,    90,    91,     0,    92,     0,     0,
       0,   464,    94,    95,    96,    97,     0,     0,     0,     0,
       0,     0,    98,    99,   100,     0,   102,   103,     0,     0,
       0,     0,     0,     0,     0,   109,   465,     0,     0,     0,
       0,   111,   112,   113,   114,   466,   116,   117,   118,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,     0,
       0,     0,   125,  1540,   126,   127,     0,     0,     0,     0,
    1541,     0,   128,     0,   129,   130,   131,   132,   467,   134,
     135,   136,   137,   138,   139,     0,     0,   140,   141,     0,
       0,   389,     0,   145,   146,     0,     0,     0,   150,   151,
     152,   153,   154,   155,     0,   157,     0,   159,     0,     0,
     162,   163,   164,   165,   166,   167,   468,   169,   469,   470,
     471,   173,   174,   472,   473,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   474,     0,   190,
     475,   192,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
       5,     6,     0,     0,     0,     0,   243,     0,     0,   386,
     387,     0,    12,    13,    14,   449,    16,    17,    18,   450,
      20,   451,   452,   453,   454,   388,    26,   455,    28,    29,
      30,     0,    31,    32,    33,    34,   456,    36,    37,    38,
      39,    40,    41,    42,   457,     0,    44,   458,    46,   459,
     460,    49,   461,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
       0,    68,    69,    70,   462,     0,     0,    72,    73,    74,
       0,     0,    75,    76,     0,     0,     0,     0,    78,   463,
      80,    81,    82,    83,    84,  1289,     0,     0,     0,     0,
       0,     0,     0,    88,    89,    90,    91,     0,    92,     0,
       0,     0,   464,    94,    95,    96,    97,     0,     0,     0,
       0,     0,     0,    98,    99,   100,     0,   102,   103,     0,
       0,     0,     0,     0,     0,     0,   109,   465,     0,     0,
       0,     0,   111,   112,   113,   114,   466,   116,   117,   118,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
       0,     0,     0,   125,     0,   126,   127,     0,     0,     0,
       0,     0,     0,   128,     0,   129,   130,   131,   132,   467,
     134,   135,   136,   137,   138,   139,     0,     0,   140,   141,
       0,     0,   389,     0,   145,   146,     0,     0,     0,   150,
     151,   152,   153,   154,   155,     0,   157,     0,   159,     0,
       0,   162,   163,   164,   165,   166,   167,   468,   169,   469,
     470,   471,   173,   174,   472,   473,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   474,     0,
     190,   475,   192,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,     5,     6,     0,     0,     0,     0,   243,     0,     0,
     386,   387,     0,    12,    13,    14,   449,    16,    17,    18,
     450,    20,   451,   452,   453,   454,   388,    26,   455,    28,
      29,    30,     0,    31,    32,    33,    34,   456,    36,    37,
      38,    39,    40,    41,    42,   457,     0,    44,   458,    46,
     459,   460,    49,   461,    51,    52,    53,    54,    55,    56,
>>>>>>> MERGE-SOURCE
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
<<<<<<< TREE
      67,     0,    68,    69,    70,     0,     0,     0,    72,    73,
=======
      67,     0,    68,    69,    70,   462,     0,     0,    72,    73,
>>>>>>> MERGE-SOURCE
      74,     0,     0,    75,    76,     0,     0,     0,     0,    78,
<<<<<<< TREE
     469,    80,    81,    82,    83,    84,     0,     0,     0,     0,
=======
     463,    80,    81,    82,    83,    84,     0,     0,     0,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,    88,    89,    90,    91,     0,    92,
<<<<<<< TREE
       0,     0,     0,   470,    94,    95,    96,    97,     0,     0,
=======
       0,     0,     0,   464,    94,    95,    96,    97,     0,     0,
>>>>>>> MERGE-SOURCE
       0,     0,     0,     0,    98,    99,   100,     0,   102,   103,
<<<<<<< TREE
       0,     0,     0,     0,     0,     0,     0,   110,   471,     0,
       0,     0,     0,   112,   113,   114,   115,   472,   117,   118,
     119,     0,     0,     0,     0,     0,     0,     0,   123,   124,
     125,     0,     0,     0,   126,     0,   127,   128,     0,     0,
       0,     0,     0,     0,   130,     0,   131,   132,   133,   134,
     473,   136,   137,   138,   139,   140,   141,     0,     0,     0,
     143,     0,     0,   395,     0,   147,   148,     0,     0,     0,
     152,   153,   154,   155,   156,   157,   474,     0,   475,   161,
     476,   477,   164,   165,   166,   167,   168,   169,   478,   171,
     479,   480,   481,   175,   176,     0,   483,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   484,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   244,   485,   246,   247,
     248,     0,   249
=======
       0,     0,     0,     0,     0,     0,     0,   109,   465,     0,
       0,     0,     0,   111,   112,   113,   114,   466,   116,   117,
     118,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,     0,     0,     0,   125,     0,   126,   127,     0,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     467,   134,   135,   136,   137,   138,   139,     0,     0,   140,
     141,     0,     0,   389,     0,   145,   146,     0,     0,     0,
     150,   151,   152,   153,   154,   155,     0,   157,     0,   159,
       0,     0,   162,   163,   164,   165,   166,   167,   468,   169,
     469,   470,   471,   173,   174,   472,   473,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   474,
       0,   190,   475,   192,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,     5,     6,     0,     0,     0,     0,   243,     0,
       0,   386,   387,     0,    12,    13,    14,     0,    16,    17,
      18,   450,     0,     0,   452,   453,     0,   388,    26,   455,
      28,     0,    30,     0,    31,    32,    33,    34,     0,    36,
       0,     0,    39,    40,    41,    42,   457,     0,    44,     0,
      46,     0,     0,    49,   461,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,     0,    68,    69,    70,     0,     0,     0,    72,
      73,    74,     0,     0,    75,    76,     0,     0,     0,     0,
      78,   463,    80,    81,    82,    83,    84,     0,     0,     0,
       0,     0,     0,     0,     0,    88,    89,    90,    91,     0,
      92,     0,     0,     0,   464,    94,    95,    96,    97,     0,
       0,     0,     0,     0,     0,    98,    99,   100,     0,   102,
     103,     0,     0,     0,     0,     0,     0,     0,   109,   465,
       0,     0,     0,     0,   111,   112,   113,   114,   466,   116,
     117,   118,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,     0,     0,     0,   125,     0,   126,   127,     0,
       0,     0,     0,     0,     0,   128,     0,   129,   130,   131,
     132,   467,   134,   135,   136,   137,   138,   139,     0,     0,
       0,   141,     0,     0,   389,     0,   145,   146,     0,     0,
       0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     159,     0,     0,   162,   163,   164,   165,   166,   167,   468,
     169,   469,   470,   471,   173,   174,     0,   473,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     474,     0,   190,   475,   192,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,     0,     0,     0,     0,     0,     0,   243
>>>>>>> MERGE-SOURCE
  };

  /* YYCHECK.  */
  const short int
  jsoniq_parser::yycheck_[] =
  {
         0,     1,     2,     3,     4,     0,     1,     2,     3,     4,
<<<<<<< TREE
     178,   106,   107,     1,     2,     3,   737,   310,   120,    10,
     709,   631,   949,   289,   615,   340,   403,   404,   837,   838,
     719,   616,   617,   618,   619,   936,   808,   405,  1212,   634,
     808,   524,     1,   971,  1196,  1042,   529,   558,   559,  1027,
     257,  1277,  1278,     1,  1411,    27,    28,  1414,   250,   251,
     863,  1225,   913,  1334,   913,   120,    37,   656,   436,   437,
     258,    57,     1,     1,    37,     8,    48,  1551,   120,     1,
      27,    28,   824,   109,     1,   273,    58,     1,     2,     3,
       4,   594,     1,   596,   597,     1,   599,     1,   601,    30,
      46,    48,   556,   557,    76,   105,   609,   610,   879,    81,
     105,     1,  1605,     1,    95,     1,    98,   926,    64,   808,
     109,   231,     1,   556,   557,   558,   559,    98,   937,    76,
       1,    85,   398,    96,     1,    98,   402,   138,    98,     1,
      31,   113,   114,   115,   109,     1,   102,   242,   243,    30,
     109,   105,   132,    96,   108,   121,     1,     2,     3,     4,
     144,   109,   132,    56,   171,    58,   120,   114,   122,   138,
       1,   939,   168,     1,     1,   560,   231,   162,   149,   564,
     109,   112,   133,   152,   280,     1,   149,   109,   184,   149,
     156,   105,   158,    40,   289,   126,   885,   204,    45,    46,
     149,   144,   203,   192,   185,   109,    30,    54,  1701,   102,
     320,   155,     1,   506,    61,   241,    63,    64,    98,   199,
     151,   186,     0,     1,   155,    72,   492,   158,  1454,   199,
     109,   112,   188,   109,   220,     1,   925,   279,   109,     1,
     158,   192,   109,   189,   177,   126,   967,   109,   179,  1723,
     250,   251,    99,   109,   254,   250,   251,   186,   313,   254,
     105,  1033,  1426,  1031,   192,  1033,  1193,   189,   779,   780,
     151,  1423,     0,     1,   260,   192,   865,  1178,   109,  1550,
     262,   109,   109,   192,    96,   189,   192,     1,  1216,   289,
     221,   222,   223,   109,   289,   279,  1067,  1225,   149,   667,
    1042,  1043,   192,   398,   192,  1283,   192,   402,   279,   575,
     189,  1114,  1163,  1310,  1163,   417,   279,   820,   189,  1676,
     109,   293,   189,   777,   778,   216,   428,   189,   424,   301,
     279,   109,   700,   189,   265,   123,   431,   309,   162,   434,
     221,   222,   223,   109,     1,  1034,   293,   109,   443,   556,
     557,   446,   447,   545,   301,    30,     1,   452,   189,   187,
     319,  1170,   189,   239,   257,   553,   554,    38,    39,   317,
      41,    42,   231,   189,   233,   563,  1733,   270,  1735,   272,
       1,   109,   262,   263,   231,   102,   220,   109,    59,   102,
     283,   284,   285,   120,   287,   109,   289,   492,   398,   109,
     189,   120,   402,   398,     1,    53,    98,   402,   186,   109,
      98,   108,   224,   225,   120,   510,   511,   158,     1,   150,
       1,   187,   517,   155,   186,     1,   260,   239,   279,   429,
     430,   231,   129,   233,   429,   430,   167,   109,   158,  1665,
     115,     1,   537,   538,   115,   445,     1,   824,   133,   449,
     445,   239,   109,   155,   449,     1,   410,     3,   186,   413,
      98,   320,   189,   417,   109,    78,   420,   421,   190,   188,
     158,   188,   186,  1162,   428,   188,   323,   324,   325,   171,
     190,   858,   188,   131,   438,    27,    28,   162,   109,   189,
     444,   162,   492,    34,   448,     9,    10,   492,  1426,   453,
    1726,   501,   768,  1014,  1015,  1016,   501,   192,   158,    50,
     993,   149,   109,  1285,   155,   429,   430,   189,   886,   887,
     320,  1116,    68,   891,  1698,  1293,   109,    73,   109,   795,
      96,   445,   634,   109,   488,   449,  1345,   632,   538,    98,
     635,   186,   155,   538,   274,   545,   500,   501,  1158,   109,
     545,   281,   120,   921,   109,   226,   556,   557,   558,   559,
     551,   556,   557,   558,   559,   186,   258,   259,  1310,   261,
     777,   121,   114,   527,   120,   575,   268,  1319,   144,   533,
     575,  1014,  1015,  1016,   429,   430,   278,   501,  1330,   186,
      96,   105,  1281,   155,   696,   783,   267,   699,   290,   787,
     445,  1753,   160,   186,   449,   186,   156,    96,   158,   109,
     186,   125,   171,   127,   227,   228,   109,    46,   155,    48,
     178,    43,   231,   725,   538,    47,   186,   236,    96,   155,
      52,   186,   586,   728,   729,   730,   590,   732,   109,   158,
       9,   155,    43,   149,   109,   159,    47,     9,    10,    71,
     212,    52,    81,    46,    43,    48,   501,   109,    47,  1560,
      29,   155,   176,    52,   155,  1042,  1043,   109,  1688,  1689,
      71,   102,   109,   768,     5,   212,    25,   109,     9,   108,
     634,   149,    71,   197,   115,   179,    35,   120,   179,   189,
      96,   158,   692,   243,     9,    10,   189,   692,  1470,   258,
     259,   215,   261,  1424,   692,   109,     5,     1,  1429,   663,
       9,   320,   102,    62,    96,   108,   716,   717,   189,   278,
    1740,   716,   717,   677,   189,   115,  1746,   681,   682,  1044,
    1321,   290,   998,   139,   688,   224,   225,   189,   144,   121,
      34,   170,   696,   105,   160,   699,   184,   189,   170,   703,
     239,   173,   189,   155,   139,  1266,   125,   189,   127,   144,
     198,  1503,   178,   125,  1573,   127,   188,   136,   768,   170,
    1697,   725,   173,   768,   156,  1385,   158,   170,   692,   120,
     119,   170,   736,   155,   173,   189,   155,   188,   102,   155,
     105,   150,   214,   155,   125,   795,   127,   159,   789,   188,
     795,   115,   716,   717,   135,  1173,    27,    28,   167,   148,
     125,   999,   127,   214,   176,    98,   770,    38,    39,   123,
      41,    42,   161,  1011,   155,   214,   125,    48,   127,    98,
      96,  1640,   115,  1642,   155,   197,   135,    58,    59,  1007,
     155,   263,   108,   147,   159,   799,   115,   692,   146,   139,
       9,     9,    10,   215,   158,    76,   155,   196,   812,   275,
      81,   176,   263,  1584,    55,   155,   282,  1588,    55,    60,
      29,   716,   717,    60,   263,   158,   292,     1,   144,   160,
     178,   160,   197,   837,   838,   839,   840,   203,    79,   158,
     130,   131,   113,   114,   115,   123,   212,   178,   196,   178,
     215,    98,  1487,  1494,  1495,  1273,  1172,    98,   188,  1718,
      34,    98,   188,    97,   102,    85,   188,    30,   115,   147,
     201,   238,   201,   240,   108,   879,    50,   115,   139,   120,
     158,   188,   212,  1310,   118,   188,   212,   188,   108,   893,
     212,   162,  1319,  1553,   155,   129,  1041,   105,   184,   269,
     120,   951,   122,  1330,   305,   212,   951,   253,   254,   212,
     280,   212,   198,   314,   918,  1258,   125,   125,   127,   127,
     120,  1692,   926,  1636,   275,  1638,  1665,   136,    96,   102,
     276,   282,   102,   937,   139,  1648,   219,  1650,    55,   144,
     108,   292,   115,    60,   876,   115,   155,   155,   998,   112,
     238,   159,   240,   998,   219,   226,   888,   227,   228,   229,
     247,   130,   131,   126,  1014,  1015,  1016,   269,   176,  1014,
    1015,  1016,  1013,   247,  1392,   613,   614,   158,   280,   620,
     621,  1622,  1623,   155,   283,   284,   285,   951,   151,   197,
     289,   248,   155,   622,   623,   158,   267,  1156,  1157,  1541,
    1542,     0,   320,   192,   169,    94,   134,   215,   101,   255,
    1670,    51,   202,   103,   142,   143,   179,   145,   104,   195,
    1024,   147,   293,  1027,   158,   153,   186,   186,   186,   157,
     301,   159,   186,    30,    48,   154,   164,  1255,   309,   120,
    1458,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,   252,   310,   181,   155,     1,   951,   120,   221,   222,
     223,   144,   109,  1067,  1724,   144,   186,   155,  1709,   123,
     155,   123,    36,   155,   158,    17,  1503,   205,   206,   207,
     208,   209,   210,   158,   158,   216,    30,    30,  1404,   237,
     236,     3,   192,   192,   251,   120,   172,   170,   290,   290,
     172,   120,    72,    96,   237,    96,    96,   156,   151,   109,
      30,   109,   162,   129,   162,   252,  1166,   134,    96,   305,
     144,  1166,  1172,   134,   120,   186,   186,  1172,  1166,    96,
      98,  1447,    46,    98,  1184,   186,    96,   155,   243,  1184,
     186,   237,   144,  1803,   231,  1805,  1184,   192,   239,    34,
     172,   120,   109,  1203,   134,  1815,   144,    96,  1203,    30,
     292,    96,   233,   305,   120,  1203,  1170,    96,   155,   200,
     162,   186,  1222,   134,    98,   134,   155,  1222,   149,  1229,
     120,  1185,   186,   102,  1229,   102,   144,   192,    36,   409,
     410,  1195,   186,   413,    30,  1347,   123,   417,   123,    30,
     420,   421,  1166,   155,   155,   120,    81,   251,   428,   109,
     109,   129,  1262,   120,   291,   149,   273,  1262,   438,  1223,
    1184,   260,   264,    30,   444,   158,   158,   158,   448,   266,
     158,    30,   158,   453,   292,   158,   158,   158,    30,  1203,
     293,   146,  1558,   312,   233,  1249,   109,   158,   158,   158,
     158,   192,   158,  1569,  1570,  1259,  1572,   158,  1222,  1263,
     158,   158,   144,   200,  1580,  1229,   134,   102,   488,     7,
     186,  1166,    98,   239,   158,   188,   239,   239,   158,  1283,
     500,   158,  1286,   155,   239,   108,   129,   149,   192,  1184,
     192,   149,   149,   243,    79,   120,   120,  1301,  1262,  1444,
    1445,  1446,   189,   256,   149,   288,   292,   256,  1203,    80,
     189,   189,    30,   533,    30,   189,   189,   172,   109,   189,
     189,    98,   189,   189,   189,   189,   186,  1222,   128,   277,
     128,   144,   186,   263,  1229,   188,   188,   188,   322,   186,
    1344,  1345,   186,  1347,  1348,  1349,   186,  1351,   149,   186,
     155,   189,   149,    96,  1404,   189,   189,   189,    30,  1404,
     189,   189,   189,    98,   172,    96,   586,   189,   108,  1685,
     590,   149,    55,    96,    30,   271,   109,  1381,   199,   109,
     199,   120,   231,   286,    96,   188,    96,   199,   120,   200,
     146,   120,   231,   189,   189,   189,   105,  1447,   293,   189,
     189,   189,  1447,    95,  1408,   188,   185,  1411,   299,   120,
    1414,   231,   199,   120,   634,   188,   120,   311,  1734,   311,
     201,  1425,   311,   666,   312,  1117,  1430,   257,   404,   312,
     880,   312,   293,   927,  1163,  1670,  1752,   254,   254,   424,
     660,  1724,  1039,   663,   771,   590,   705,  1480,  1302,  1282,
    1020,  1280,  1277,   488,  1185,  1198,  1601,   677,  1190,  1775,
    1193,   681,   682,   592,   840,   612,   593,  1263,   688,   640,
     637,  1216,   634,  1477,  1478,   737,   696,  1746,   634,   699,
    1740,  1797,  1343,   703,  1343,   335,  1260,  1632,  1638,  1319,
    1806,  1249,  1503,  1259,  1330,  1043,  1323,  1500,  1052,   912,
    1139,  1544,  1375,  1320,   527,    -1,    -1,    -1,  1558,    -1,
      -1,    -1,    -1,  1558,    -1,    -1,   736,    -1,    -1,  1569,
    1570,    -1,  1572,    -1,  1569,  1570,    -1,  1572,    -1,    -1,
    1580,    -1,    -1,    -1,    -1,  1580,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     770,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1573,
    1574,    -1,  1576,    -1,  1578,    -1,    -1,    -1,    -1,   799,
      -1,  1585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   812,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   837,   838,   839,
     840,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1636,    -1,  1638,  1685,  1640,    -1,  1642,    -1,
    1685,    -1,    -1,    -1,  1648,    -1,  1650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   879,
      -1,    -1,  1666,    -1,    -1,  1669,    -1,    -1,    -1,    -1,
      -1,    -1,  1676,   893,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1687,  1734,    -1,    -1,    -1,    -1,  1734,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   918,    -1,
      -1,    -1,  1752,    -1,    -1,    -1,   926,  1752,    -1,    -1,
      -1,    -1,    -1,    -1,  1718,    -1,    -1,   937,    -1,    -1,
      -1,    -1,    -1,    -1,  1728,  1775,    -1,    -1,    -1,  1733,
    1775,  1735,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1797,    -1,    -1,
      -1,    -1,  1797,  1757,    -1,    -1,  1806,    -1,    -1,    -1,
      -1,  1806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1773,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1793,
      -1,    -1,   501,    -1,  1798,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1024,    -1,  1810,  1027,    -1,  1813,
      -1,    -1,    -1,   522,   523,    -1,   525,   526,   527,   528,
      -1,   530,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1067,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   566,   567,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   575,   576,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   636,    -1,    -1,
      -1,   640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1185,    -1,    -1,    -1,    -1,
     679,    -1,    -1,    -1,    -1,  1195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   704,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   720,    -1,    -1,    -1,   724,   725,    -1,   727,    -1,
      -1,    -1,    -1,    -1,    -1,   734,    -1,    -1,    -1,  1249,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1259,
      -1,    -1,    -1,  1263,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1283,    -1,    -1,  1286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1301,    -1,    -1,    -1,    -1,   795,    -1,    -1,    -1,
      -1,    -1,   801,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1344,  1345,    -1,  1347,  1348,  1349,
      -1,  1351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1408,    -1,
      -1,  1411,    -1,    -1,  1414,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1425,    -1,   916,    -1,    -1,
    1430,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   938,
=======
     176,   611,   303,   627,   156,   283,   949,   119,   160,    10,
     334,     1,     2,     3,   936,   808,  1200,   397,   398,     1,
       2,     3,     4,   808,   191,     1,     2,     3,     4,   705,
     554,   555,   251,   399,   158,   630,  1216,   837,   838,   715,
     612,   613,   614,   615,   552,   553,   554,   555,     1,  1283,
    1284,   252,  1419,     1,  1047,  1422,   244,   245,    27,    28,
     971,   733,  1032,   913,   430,   431,   267,  1340,    57,   863,
      27,    28,    40,   913,    37,   552,   553,    45,    46,    48,
    1229,   652,     1,   824,    30,  1562,    54,   120,   879,    58,
       8,    48,     1,    61,   104,    63,    64,    31,     1,   104,
     274,    37,     1,    98,    72,     1,   109,    76,   590,   123,
     592,   593,    81,   595,   392,   597,     1,   102,   396,    76,
     120,     1,   104,   605,   606,     1,   926,  1617,   104,    46,
     123,    99,   808,   105,   106,    98,    95,   937,    38,    39,
       1,    41,    42,   120,   113,   114,   115,    64,     1,     1,
       1,     1,    30,     1,   939,   133,   109,   114,     1,    59,
      96,   109,    98,   144,   102,    96,   112,   146,    98,    98,
     188,    98,   155,   123,    56,   275,    58,   188,     1,     1,
     126,   876,   282,   171,     1,   115,   149,   102,   184,   162,
     109,    98,   292,   888,   212,   496,   179,   147,   231,   178,
     115,   212,   198,   188,   482,   151,     1,     1,   158,   885,
     109,    34,   189,   149,   192,   115,   204,   196,   149,   158,
     102,     1,   149,  1713,   109,   239,   185,     1,   158,   158,
    1464,   220,    98,   109,   244,   245,   239,   115,   248,   244,
     245,     0,     1,   248,   418,  1038,   239,  1431,   109,   925,
     188,  1036,     1,  1038,  1197,   779,   780,   109,  1735,   177,
    1182,   109,   162,   231,   171,     1,   109,   262,   240,   241,
     189,   260,   189,   283,    30,   221,   222,   223,   283,   279,
     313,  1072,   216,   192,   162,  1434,    85,   109,  1561,   192,
     189,    98,   109,   571,   865,   967,   192,   663,   279,   411,
     777,   778,     0,     1,   189,   104,  1047,  1048,   107,  1220,
     422,   283,   192,   189,   109,   109,   279,  1167,  1229,  1289,
     119,  1688,   121,  1316,   293,  1119,   226,  1167,   189,   109,
     696,  1122,   301,   552,   553,   109,   293,   189,   820,   192,
     309,   192,   192,   279,   301,   102,   189,     1,   549,   550,
     109,   258,   259,   541,   261,   323,   324,   325,   559,   158,
     109,   268,   514,  1039,   171,   187,   319,   267,     1,   317,
     522,   278,   189,   109,  1174,   257,   109,     1,  1745,     1,
    1747,   109,   392,   290,     1,     1,   396,   392,   270,   109,
     272,   396,   187,     1,   518,   189,   262,   263,   109,   133,
     220,   283,   284,   285,   149,   287,   162,   289,     1,   189,
     149,   109,   155,   423,   424,   189,     1,   138,   423,   424,
     392,   109,   589,    78,   396,    25,   109,   186,   108,   439,
     203,   188,   132,   443,   439,    35,   179,   186,   443,   212,
     260,   423,   424,  1677,   824,   158,   188,   423,   424,   129,
     186,   258,   259,   425,   261,   109,   428,   439,   192,   109,
     109,   443,    62,   439,   192,   437,   132,   443,   440,   441,
     212,   278,   482,   120,   446,    96,   109,   482,   858,   190,
       5,   491,   203,   290,     9,   109,   491,   109,   186,   767,
    1166,    96,   109,   109,   109,  1019,  1020,  1021,  1291,   199,
     155,   109,   190,    30,  1738,    46,   189,    48,   241,   491,
     482,  1019,  1020,  1021,  1299,   491,   109,   795,   630,   239,
     886,   887,   532,  1434,   109,   891,  1121,   532,   500,   501,
    1710,   541,   186,   199,   279,   507,   541,   186,  1162,   189,
     279,   188,   552,   553,   554,   555,   547,   552,   553,   554,
     555,  1351,   121,   186,    85,   921,   532,   269,   777,   531,
     532,   571,   186,   139,   186,   109,   571,   108,   280,   186,
     186,   109,   227,   228,   189,  1316,   107,   109,   186,   155,
     692,  1765,   783,   695,  1325,   112,   787,   156,   119,   158,
     121,   109,   109,   186,     1,  1336,     3,    27,    28,   126,
     125,   186,   127,   224,   225,   404,   758,    53,   407,   721,
     135,  1287,   411,     5,   120,   414,   415,     9,   239,   224,
     225,   231,    96,   422,   151,   121,   236,   102,   155,   170,
     155,   158,   155,   432,   239,   155,   160,    43,   109,   438,
     115,    47,   109,   442,   155,   189,    52,   109,   447,  1571,
     155,   189,   179,    98,   178,   184,   628,   189,   160,   631,
     156,    68,   158,     9,    10,    71,    73,  1047,  1048,   198,
     155,   189,   189,     9,   243,   149,   178,    43,   688,   478,
      98,    47,   188,   688,   114,   131,    52,  1480,    46,   212,
      48,   490,   491,    29,   221,   222,   223,   115,   688,   201,
     138,   212,   712,   713,   149,    71,   688,   712,   713,     9,
     320,    43,   688,   120,   152,    47,    96,  1327,   189,   518,
      52,   102,   189,    81,  1002,  1049,    96,   189,   527,    29,
     712,   713,    96,   125,   115,   127,   712,   713,   265,    71,
     158,   121,   158,   135,   119,  1700,  1701,   243,  1272,   158,
     108,   275,   724,   725,   726,   155,   728,   767,   282,   105,
    1432,   121,   767,   155,   170,  1437,  1709,   173,   292,  1393,
     253,   254,  1513,   148,   144,   139,   156,     1,   158,   125,
     144,   127,   188,   582,  1584,   795,   161,   586,   789,   125,
     795,   127,   120,   276,    55,   767,   156,  1752,   158,    60,
     136,    96,  1003,  1758,   170,   188,   160,   173,   214,   155,
      34,  1177,   170,   159,   155,  1016,     9,    10,    79,   155,
     158,   196,   188,    55,   178,   125,    50,   127,    60,   212,
     176,   630,    27,    28,    34,  1011,   136,    98,   170,     9,
      10,   173,   158,    38,    39,   997,    41,    42,   214,   144,
      50,   197,  1652,    48,  1654,   155,   188,   263,    96,   120,
     659,   168,   139,    58,    59,   120,    98,   144,   188,   215,
     108,   150,   403,   404,   673,   123,   407,   184,   677,   678,
     411,    76,   214,   414,   415,   684,    81,   160,   167,    96,
     155,   422,   212,   692,  1504,  1505,   695,   263,  1176,   147,
     699,   432,     9,    10,   150,   178,   144,   438,   305,    98,
     158,   442,   105,  1279,   121,   120,   447,   314,   113,   114,
     115,   167,   721,  1595,   188,  1497,   115,  1599,   201,   102,
    1730,   263,   125,   732,   127,   105,  1316,   139,   155,    30,
    1564,   951,   115,   269,   155,  1325,   951,   478,   212,   156,
      97,   158,   102,   155,   280,   125,  1336,   127,   155,   490,
     102,   108,   155,  1264,   120,   115,   159,   162,    96,   951,
     769,   118,   274,   115,  1648,   951,  1650,   556,   219,   281,
     108,   560,   129,   176,   219,   155,  1660,   247,  1662,   159,
     130,   131,  1002,   283,   284,   285,   527,  1002,   105,   289,
     799,  1677,   139,    55,   197,   247,   176,   144,    60,  1019,
    1020,  1021,   248,   812,  1019,  1020,  1021,  1018,   125,   158,
     127,   112,   215,   155,  1634,  1635,     0,   197,   227,   228,
     229,   226,  1704,   192,  1400,   126,   130,   131,   837,   838,
     839,   840,   238,   169,   240,   215,    94,   238,   155,   240,
     101,   582,   159,   609,   610,   586,   616,   617,  1682,    51,
     151,   618,   619,   255,   155,  1160,  1161,   158,   202,   176,
     103,   195,   267,   104,  1046,   147,  1552,  1553,   158,    30,
     879,   186,   186,   186,   186,  1261,    48,   154,   179,   252,
     197,   120,   310,   155,   893,     1,   120,   144,   293,   630,
     109,   155,  1468,   144,   186,   155,   301,   123,   215,   123,
      36,  1721,  1736,   158,   309,   158,   158,   155,    17,   918,
     216,   237,    30,    30,   236,   656,   192,   926,   659,   192,
     221,   222,   223,  1513,  1412,     3,   251,   120,   937,   239,
     170,   290,   673,   120,   172,   172,   677,   678,    72,   290,
     237,    96,    96,   684,    96,   156,   151,   109,    30,   109,
    1170,   692,   162,   162,   695,  1170,  1176,   134,   699,   129,
     305,  1176,   144,   252,    96,   134,   186,   120,  1188,  1457,
    1170,   186,    96,  1188,    46,    98,    98,   155,  1170,   186,
     186,  1815,    96,  1817,  1170,   104,   144,  1207,  1188,   243,
     237,   732,  1207,  1827,   192,   239,  1188,    34,   172,   120,
     144,   109,  1188,   134,    96,    30,  1226,  1207,   292,    96,
     233,  1226,   305,  1233,   155,  1207,   120,    96,  1233,   186,
    1029,  1207,   134,  1032,   200,   162,   155,   134,   769,    98,
     120,  1353,   102,   192,  1226,   102,   149,   186,   186,   158,
    1226,  1233,   144,   134,   155,    36,   123,  1233,  1268,   123,
     155,   142,   143,  1268,   145,    30,    30,    98,   799,   120,
     251,    81,   153,  1072,   109,   109,   157,   129,   159,   120,
     260,   812,   264,   164,   149,   291,   273,   266,   158,    30,
     146,  1569,  1268,    30,   292,   158,    30,   158,   233,   293,
     181,   312,  1580,  1581,   158,  1583,   837,   838,   839,   840,
     158,   158,   158,  1591,   158,   158,   158,   192,   158,   158,
     158,   158,   158,  1122,   205,   206,   207,   208,   209,   210,
     158,   109,   158,   242,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,   144,   200,   102,   134,   879,     7,
     239,   239,   239,   186,   239,    98,   158,   322,   188,   243,
     192,   158,   893,   192,   158,   155,   108,   149,   129,   149,
     149,   120,    79,   120,   149,  1174,   189,   256,   256,    80,
     189,   189,   292,   288,   189,   189,   189,   918,   189,    30,
    1189,   189,    30,   189,   189,   926,   189,   189,   109,   172,
    1199,   277,  1412,   186,   128,   263,   937,  1412,   128,    98,
     186,   188,   144,   149,   188,   186,   188,   186,   186,  1697,
     149,    96,   322,   186,   155,    30,    98,   189,  1227,   189,
     189,   189,   189,   286,   189,   189,   189,   172,   108,    96,
     149,    55,    96,   293,    30,   109,   271,  1457,   199,   109,
      96,   120,  1457,    96,   199,   188,  1255,   120,   146,   199,
     188,   231,   200,   189,   189,   120,  1265,   189,  1746,    95,
    1269,   189,   189,   189,   188,   185,   199,   299,   120,   231,
     120,   293,  1454,  1455,  1456,   231,  1764,   311,   311,   201,
    1289,   311,   120,  1292,   312,   312,   312,   662,  1029,   927,
    1123,  1032,   880,   418,   248,   398,  1167,  1682,  1307,  1787,
    1736,   770,   251,   586,  1044,   701,  1490,  1308,   248,  1288,
    1286,  1025,  1283,   478,  1189,  1194,  1197,  1202,   588,   840,
     608,  1809,  1269,   630,   633,   630,  1220,  1758,   329,   733,
    1818,  1072,  1752,   636,  1349,  1349,  1650,  1255,  1266,  1265,
    1325,  1350,  1351,  1336,  1353,  1354,  1355,  1513,  1357,  1569,
    1048,  1329,  1057,  1510,  1569,   912,  1326,  1145,  1383,  1555,
    1580,  1581,    -1,  1583,    -1,  1580,  1581,    -1,  1583,    -1,
      -1,  1591,   491,    -1,    -1,    -1,  1591,    -1,    -1,    -1,
    1389,  1122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,   516,   517,   518,
      -1,    -1,   521,    -1,    -1,   524,    -1,  1416,    -1,    -1,
    1419,   530,    -1,  1422,    -1,    -1,    -1,    -1,    -1,    -1,
     539,    -1,    -1,    -1,  1433,    -1,    -1,    -1,    -1,  1438,
      -1,  1613,    -1,  1174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   562,   563,    -1,    -1,    -1,  1189,    -1,
      -1,    -1,   571,   572,    -1,    -1,    -1,    -1,  1199,    -1,
      -1,    -1,  1644,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1697,  1487,  1488,
      -1,    -1,  1697,    -1,    -1,    -1,  1227,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   632,  1255,    -1,    -1,   636,    -1,    -1,
      -1,    -1,    -1,    -1,  1265,    -1,  1746,    -1,  1269,    -1,
      -1,  1746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1764,    -1,    -1,    -1,  1289,  1764,
      -1,  1292,    -1,    -1,    -1,    -1,   675,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1307,  1787,    -1,    -1,
      -1,    -1,  1787,    -1,    -1,  1584,  1585,    -1,  1587,    -1,
    1589,   700,    -1,    -1,    -1,    -1,    -1,  1596,    -1,  1809,
      -1,    -1,    -1,    -1,  1809,    -1,    -1,   716,  1818,    -1,
      -1,   720,   721,  1818,   723,    -1,    -1,    -1,    -1,  1350,
    1351,   730,  1353,  1354,  1355,    -1,  1357,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   752,   753,    -1,    -1,   756,    -1,  1648,
      -1,  1650,    -1,  1652,    -1,  1654,    -1,    -1,  1389,    -1,
      -1,  1660,    -1,  1662,    -1,    -1,   775,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1678,
      -1,    -1,  1681,    -1,    -1,  1416,   795,    -1,  1419,  1688,
      -1,  1422,   801,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1699,    -1,  1433,    -1,    -1,    -1,    -1,  1438,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1730,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1740,    -1,    -1,    -1,    -1,  1745,    -1,  1747,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1487,  1488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1769,    -1,   881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1785,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1805,   916,    -1,    -1,
      -1,  1810,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1822,    -1,    -1,  1825,    -1,    -1,   938,
>>>>>>> MERGE-SOURCE
      -1,    -1,    -1,    -1,    -1,    -1,   945,   946,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   956,    -1,    -1,
<<<<<<< TREE
     959,    -1,    -1,    -1,    -1,    -1,    -1,  1477,  1478,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
=======
     959,    -1,    -1,  1584,  1585,    -1,  1587,    -1,  1589,    -1,
      -1,    -1,    -1,    -1,    -1,  1596,    -1,    -1,    -1,    -1,
>>>>>>> MERGE-SOURCE
      -1,   980,   981,   982,    -1,   984,   985,   986,   987,   988,
<<<<<<< TREE
     989,   990,   991,   992,    -1,    -1,   995,   996,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1010,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1020,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1030,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1573,  1574,    -1,  1576,    -1,  1578,    -1,
      -1,    -1,    -1,    -1,    -1,  1585,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1636,    -1,  1638,    -1,
    1640,    -1,  1642,    -1,    -1,    -1,    -1,    -1,  1648,    -1,
    1650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1666,    -1,    -1,  1669,
      -1,    -1,    -1,    -1,    -1,    -1,  1676,    -1,    -1,    -1,
      -1,    -1,    -1,  1172,    -1,    -1,    -1,  1687,    -1,    -1,
      -1,    -1,    -1,  1182,    -1,    -1,    -1,    -1,    -1,  1188,
    1189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1205,    -1,  1718,  1208,
    1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1728,    -1,
      -1,    -1,    -1,  1733,    -1,  1735,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1757,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1773,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1280,    -1,  1793,    -1,    -1,    -1,    -1,  1798,  1288,
      -1,  1290,    -1,  1292,    -1,    -1,  1295,    -1,    -1,    -1,
    1810,  1300,    -1,  1813,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1403,  1404,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1422,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1435,  1436,  1437,  1438,
      -1,  1440,  1441,    -1,  1443,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1459,    -1,    -1,    -1,    -1,  1464,    -1,    -1,    -1,  1468,
      -1,    -1,    -1,  1472,    -1,  1474,    -1,  1476,    -1,    -1,
      -1,    -1,    -1,  1482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1559,    -1,    -1,    -1,    -1,  1564,  1565,    -1,    -1,    -1,
      -1,    -1,    -1,  1572,    -1,    -1,    -1,    -1,  1577,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1594,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1606,    -1,  1608,
      -1,  1610,    -1,    -1,  1613,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1681,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1704,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1734,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     0,     1,    -1,    -1,    -1,
      -1,    -1,  1771,    -1,    -1,    -1,  1775,    -1,    -1,    -1,
      -1,  1780,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,  1796,    -1,    34,
      35,  1800,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
      -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,   133,    -1,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
      -1,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
      -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,   184,
      -1,    -1,    -1,   188,    -1,   190,   191,   192,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,    -1,    -1,   213,   214,
     215,    -1,   217,    -1,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,    -1,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,    -1,   320,   321,   322,   323,   324,
      -1,   326,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
=======
      -1,    -1,   991,   992,    -1,   994,   995,    -1,    -1,    -1,
     999,  1000,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1014,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1025,  1648,    -1,  1650,
      -1,  1652,    -1,  1654,    -1,    -1,  1035,    -1,    -1,  1660,
      -1,  1662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1678,    -1,    -1,
    1681,    -1,    -1,    -1,    -1,    -1,    -1,  1688,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1699,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1730,
    1109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1740,
      -1,    -1,    -1,    -1,  1745,    -1,  1747,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1769,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1785,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1176,    -1,    -1,
      -1,    -1,    -1,    -1,  1805,    -1,    -1,  1186,    -1,  1810,
      -1,    -1,    -1,  1192,  1193,    -1,    -1,    -1,    -1,    -1,
      -1,  1822,    -1,    -1,  1825,    -1,    -1,    -1,    -1,    -1,
    1209,    -1,    -1,  1212,  1213,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1286,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1294,    -1,  1296,    -1,  1298,
      -1,    -1,  1301,    -1,    -1,    -1,    -1,  1306,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1403,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1411,  1412,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1430,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1443,  1444,  1445,  1446,    -1,  1448,
    1449,    -1,  1451,    -1,  1453,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1469,    -1,    -1,    -1,    -1,  1474,    -1,    -1,    -1,  1478,
      -1,    -1,    -1,  1482,    -1,  1484,    -1,  1486,    -1,    -1,
      -1,    -1,    -1,  1492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1570,    -1,    -1,    -1,    -1,  1575,  1576,    -1,    -1,
      -1,    -1,    -1,    -1,  1583,    -1,    -1,    -1,    -1,  1588,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1605,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1618,
      -1,  1620,    -1,  1622,    -1,    -1,  1625,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1693,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1716,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1746,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,
      -1,    -1,    -1,    -1,  1783,    -1,    -1,    -1,  1787,    -1,
      -1,    -1,    -1,  1792,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,  1808,
      -1,    34,    35,  1812,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,
     133,    -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,
     153,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,   172,
     173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,
     183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,
      -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,    -1,    -1,
     213,   214,   215,    -1,   217,    -1,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,    -1,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,     0,     1,   321,   322,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     1,   318,    -1,    -1,   321,   322,    -1,
>>>>>>> MERGE-SOURCE
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
<<<<<<< TREE
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
=======
     148,   149,   150,   151,   152,   153,    -1,   155,   156,    -1,
>>>>>>> MERGE-SOURCE
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
<<<<<<< TREE
     188,    -1,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
=======
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
>>>>>>> MERGE-SOURCE
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     1,
<<<<<<< TREE
     318,    -1,   320,   321,   322,   323,   324,    -1,   326,    -1,
=======
     318,    -1,    -1,   321,   322,    -1,    -1,    -1,    -1,    -1,
>>>>>>> MERGE-SOURCE
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    11,    12,   321,
     322,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,
      -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,    -1,   152,   153,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,   196,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,    -1,    -1,   217,    -1,   219,   220,    -1,    -1,    -1,
     224,   225,   226,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,    -1,    -1,   322,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
     192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
<<<<<<< TREE
     312,   313,   314,   315,   316,     1,   318,    -1,   320,   321,
     322,   323,   324,    -1,   326,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,   320,   321,   322,   323,   324,    -1,
     326,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    -1,    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
=======
     312,   313,   314,   315,   316,    -1,   318,    -1,    -1,   321,
     322,    -1,    -1,    -1,    -1,   327,   328,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,    -1,   321,   322,    -1,
      16,    -1,    -1,    -1,   328,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
     186,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    16,    -1,   321,   322,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,
     133,    -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,
     153,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,   172,
     173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,
     183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,
      -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,    -1,    -1,
     213,   214,   215,    -1,   217,    -1,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,    -1,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,    16,    -1,   321,   322,
      -1,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    16,
     320,   321,   322,    -1,    21,    22,    23,    24,    25,    26,
      -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,
     107,   108,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
      -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,   148,   149,   150,   151,   152,   153,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,
     167,   168,   169,   170,   171,   172,   173,   174,    -1,   176,
      -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,
      -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,
      -1,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,    -1,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      16,   318,    -1,    -1,   321,   322,    -1,    -1,    -1,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,    -1,   152,   153,    -1,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,    -1,
      -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,
     226,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      16,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,    -1,   152,   153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,    -1,
      -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,
     226,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      16,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,    25,
      26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,    -1,   152,   153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,    -1,
      -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,
     226,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      18,    19,    -1,    -1,    -1,    -1,   322,    25,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,    -1,   152,   153,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,    -1,    -1,   217,
      -1,   219,   220,    -1,    -1,    -1,   224,   225,   226,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,    -1,    -1,   322,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,    -1,   321,   322,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,   186,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,    -1,   321,   322,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,   186,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,    -1,   321,
     322,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,   186,    -1,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
      -1,   321,   322,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,    -1,    -1,   321,   322,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,    -1,   321,   322,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,    -1,   321,   322,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,    -1,   321,
     322,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,   146,    -1,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,   189,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
      -1,   321,   322,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,   146,    -1,
     148,   149,   150,   151,   152,   153,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,    -1,    -1,   321,   322,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,    -1,   321,   322,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,    -1,   321,   322,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,   189,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,    -1,   321,
     322,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
>>>>>>> MERGE-SOURCE
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,   196,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
<<<<<<< TREE
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,    16,   326,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    -1,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,
     171,   172,   173,   174,    -1,   176,    -1,   178,   179,    -1,
      -1,   182,   183,   184,    -1,   186,    -1,   188,    -1,   190,
     191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
      -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,    -1,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,    -1,   320,
     321,   322,   323,   324,    16,   326,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    16,   320,   321,
     322,   323,   324,    -1,   326,    -1,    25,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
     129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,
     149,   150,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,    -1,   161,   162,    -1,    -1,    -1,    -1,   167,   168,
     169,   170,   171,   172,   173,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,
      -1,   190,   191,    -1,    -1,    -1,    -1,   196,    -1,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,    -1,    -1,   213,   214,    -1,    -1,   217,    -1,
     219,   220,    -1,    -1,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,    -1,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    16,
      -1,   320,   321,   322,   323,   324,    -1,   326,    25,    26,
      -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,   148,   149,   150,    -1,   152,   153,   154,    -1,    -1,
      -1,    -1,    -1,    -1,   161,   162,    -1,    -1,    -1,    -1,
     167,   168,   169,   170,   171,   172,   173,   174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,    -1,
      -1,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
      -1,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,    -1,    -1,   213,   214,    -1,    -1,
     217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,    -1,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    16,    -1,   320,   321,   322,   323,   324,    -1,   326,
      25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      35,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,   148,   149,   150,    -1,   152,   153,   154,
      -1,    -1,    -1,    -1,    -1,    -1,   161,   162,    -1,    -1,
      -1,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,
      -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,    -1,    -1,   213,   214,
      -1,    -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,    -1,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
      -1,   326,    18,    19,    -1,    -1,    -1,    -1,    -1,    25,
      26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,    -1,   152,   153,   154,    -1,
      -1,    -1,    -1,    -1,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,    -1,
      -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,    -1,
     326,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
     320,   321,   322,   323,   324,    -1,   326,   327,   328,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
     192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,   320,   321,
     322,   323,   324,    -1,   326,    -1,   328,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,   192,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,   320,   321,   322,   323,
     324,    -1,   326,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,   186,    -1,
     188,    -1,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,    -1,   320,   321,   322,   323,   324,    -1,   326,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
     192,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,   320,   321,
     322,   323,   324,    -1,   326,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,   192,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,   320,   321,   322,   323,   324,    -1,
     326,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,   192,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
     320,   321,   322,   323,   324,    -1,   326,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,   192,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,   320,   321,   322,   323,
     324,    -1,   326,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,    -1,   320,   321,   322,   323,   324,    -1,   326,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,   189,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,   320,   321,
     322,   323,   324,    -1,   326,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,   320,   321,   322,   323,   324,    -1,
     326,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
     320,   321,   322,   323,   324,    -1,   326,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,   189,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,   320,   321,   322,   323,
     324,    -1,   326,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,    -1,   326,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,    -1,   326,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
     186,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,   320,   321,   322,   323,   324,    -1,
     326,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
     320,   321,   322,   323,   324,    -1,   326,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,   320,   321,   322,   323,
     324,    -1,   326,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,    -1,   320,   321,   322,   323,   324,    -1,   326,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,   320,   321,
     322,   323,   324,    -1,   326,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,   320,   321,   322,   323,   324,    -1,
     326,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
=======
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,   322,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,    -1,   321,   322,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,   320,   321,   322,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
>>>>>>> MERGE-SOURCE
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
<<<<<<< TREE
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,    -1,   133,
=======
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
>>>>>>> MERGE-SOURCE
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
<<<<<<< TREE
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,   189,   190,   191,    -1,    -1,
      -1,    -1,   196,    -1,   198,    -1,   200,   201,   202,   203,
=======
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,   186,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
>>>>>>> MERGE-SOURCE
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,    -1,   321,   322,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,   146,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,    -1,   321,
     322,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
      -1,   321,   322,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,    -1,   155,   156,    -1,
      -1,   159,   160,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,    -1,    -1,   321,   322,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,    -1,    -1,   322,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,    -1,    -1,   322,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    -1,    -1,    -1,
     322,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,    -1,    -1,   159,
     160,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,   215,    -1,   217,    -1,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,    -1,
      -1,    -1,   322,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,   151,   152,   153,    -1,   155,   156,    -1,
     158,   159,    -1,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
      -1,    -1,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,    -1,   320,    -1,   322,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,    -1,   158,   159,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,   318,    -1,   320,    -1,   322,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,    -1,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,    -1,    -1,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,    -1,    -1,    -1,   322,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,    -1,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,    -1,    -1,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,    25,    26,    -1,
     322,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,    -1,   161,   162,    -1,    -1,    -1,    -1,   167,
     168,   169,   170,   171,   172,   173,   174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,
     188,   189,   190,   191,    -1,    -1,    -1,    -1,   196,    -1,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,    -1,    -1,   213,   214,    -1,    -1,   217,
      -1,   219,   220,    -1,    -1,    -1,   224,   225,   226,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      25,    26,    -1,    -1,   322,   323,   324,   325,   326,    34,
      35,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,   148,   149,   150,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,    -1,   161,   162,    -1,    -1,
      -1,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,
      -1,    -1,    -1,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,    -1,    -1,   213,   214,
      -1,    -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,
     225,   226,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,    -1,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    25,    26,    -1,    -1,   322,   323,   324,
     325,   326,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,
     162,    -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,
     172,   173,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     182,   183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,    -1,
      -1,   213,   214,    -1,    -1,   217,    -1,   219,   220,    -1,
      -1,    -1,   224,   225,   226,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,    -1,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    25,    26,    -1,    -1,
     322,   323,   324,   325,   326,    34,    35,    -1,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
     129,   130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,
     149,   150,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,    -1,   161,   162,    -1,    -1,    -1,    -1,   167,   168,
     169,   170,   171,   172,   173,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,
      -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,    -1,    -1,   213,   214,    -1,    -1,   217,    -1,
     219,   220,    -1,    -1,    -1,   224,   225,   226,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,    -1,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    25,
<<<<<<< TREE
      26,   320,   321,   322,   323,   324,   325,   326,    34,    35,
=======
      26,    -1,    -1,   322,   323,   324,   325,   326,    34,    35,
>>>>>>> MERGE-SOURCE
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,    -1,
      -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,
     226,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    25,    26,    -1,    -1,   322,   323,   324,   325,
     326,    34,    35,    -1,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,   129,   130,   131,    -1,
     133,    -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   148,   149,   150,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,   162,
      -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,   172,
     173,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,
     183,   184,    -1,    -1,    -1,   188,   189,   190,   191,    -1,
      -1,    -1,    -1,   196,    -1,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,    -1,    -1,
     213,   214,    -1,    -1,   217,    -1,   219,   220,    -1,    -1,
      -1,   224,   225,   226,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,    -1,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    25,    26,    -1,    -1,   322,
     323,   324,   325,   326,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
      -1,   161,   162,    -1,    -1,    -1,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   182,   183,   184,    -1,    -1,    -1,   188,    -1,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,    -1,    -1,   213,   214,    -1,    -1,   217,    -1,   219,
     220,    -1,    -1,    -1,   224,   225,   226,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,    -1,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    25,    26,
<<<<<<< TREE
     320,   321,   322,   323,   324,    -1,   326,    34,    35,    -1,
=======
      -1,    -1,   322,   323,   324,   325,   326,    34,    35,    -1,
>>>>>>> MERGE-SOURCE
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,    -1,
     137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,   148,   149,   150,    -1,   152,   153,   154,    -1,    -1,
      -1,    -1,    -1,    -1,   161,   162,    -1,    -1,    -1,    -1,
     167,   168,   169,   170,   171,   172,   173,   174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,    -1,
      -1,   188,   189,   190,   191,    -1,    -1,    -1,    -1,   196,
      -1,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,    -1,    -1,   213,   214,    -1,    -1,
     217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,   226,
<<<<<<< TREE
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
=======
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,   236,
>>>>>>> MERGE-SOURCE
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,    -1,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
<<<<<<< TREE
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    25,    26,   320,   321,   322,   323,   324,    -1,   326,
      34,    35,    -1,    37,    38,    39,    -1,    41,    42,    43,
      44,    -1,    -1,    47,    48,    -1,    50,    51,    52,    53,
      -1,    55,    -1,    57,    58,    59,    60,    -1,    62,    -1,
      -1,    65,    66,    67,    68,    69,    -1,    71,    -1,    73,
      -1,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
=======
     307,   308,   309,   310,   311,   312,   313,   314,   315,    25,
      26,    -1,    -1,    -1,    -1,   322,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,    -1,   152,   153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,    -1,
      -1,    -1,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,    -1,    -1,   213,   214,    -1,
      -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,   225,
     226,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      25,    26,    -1,    -1,    -1,    -1,   322,    -1,    -1,    34,
      35,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,   148,   149,   150,    -1,   152,   153,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   161,   162,    -1,    -1,
      -1,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,   184,
      -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,    -1,    -1,   213,   214,
      -1,    -1,   217,    -1,   219,   220,    -1,    -1,    -1,   224,
     225,   226,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,    -1,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    25,    26,    -1,    -1,    -1,    -1,   322,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
>>>>>>> MERGE-SOURCE
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
<<<<<<< TREE
      94,    -1,    96,    97,    98,    -1,    -1,    -1,   102,   103,
=======
      94,    -1,    96,    97,    98,    99,    -1,    -1,   102,   103,
>>>>>>> MERGE-SOURCE
     104,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,    -1,   152,   153,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,   162,    -1,
      -1,    -1,    -1,   167,   168,   169,   170,   171,   172,   173,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,   183,
     184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,   203,
<<<<<<< TREE
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,    -1,
=======
     204,   205,   206,   207,   208,   209,   210,    -1,    -1,   213,
>>>>>>> MERGE-SOURCE
     214,    -1,    -1,   217,    -1,   219,   220,    -1,    -1,    -1,
<<<<<<< TREE
     224,   225,   226,   227,   228,   229,   230,    -1,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,    -1,   250,   251,   252,   253,
=======
     224,   225,   226,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
>>>>>>> MERGE-SOURCE
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
      -1,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
<<<<<<< TREE
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,    -1,   326
=======
     314,   315,    25,    26,    -1,    -1,    -1,    -1,   322,    -1,
      -1,    34,    35,    -1,    37,    38,    39,    -1,    41,    42,
      43,    44,    -1,    -1,    47,    48,    -1,    50,    51,    52,
      53,    -1,    55,    -1,    57,    58,    59,    60,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    69,    -1,    71,    -1,
      73,    -1,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    -1,    -1,    -1,   102,
     103,   104,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,   129,   130,   131,    -1,
     133,    -1,    -1,    -1,   137,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   148,   149,   150,    -1,   152,
     153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,   162,
      -1,    -1,    -1,    -1,   167,   168,   169,   170,   171,   172,
     173,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,
     183,   184,    -1,    -1,    -1,   188,    -1,   190,   191,    -1,
      -1,    -1,    -1,    -1,    -1,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,    -1,    -1,
      -1,   214,    -1,    -1,   217,    -1,   219,   220,    -1,    -1,
      -1,   224,   225,   226,   227,   228,   229,    -1,    -1,    -1,
     233,    -1,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,    -1,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,    -1,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,    -1,    -1,   322
>>>>>>> MERGE-SOURCE
  };

  /* STOS_[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
  const unsigned short int
  jsoniq_parser::yystos_[] =
  {
         0,    21,    22,    23,    24,    25,    26,    27,    28,    30,
      34,    35,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    96,    97,
      98,    99,   102,   103,   104,   107,   108,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   126,   128,   129,
     130,   131,   133,   137,   138,   139,   140,   141,   148,   149,
<<<<<<< TREE
     150,   151,   152,   153,   154,   155,   156,   158,   159,   160,
     161,   162,   167,   168,   169,   170,   171,   172,   173,   174,
     176,   178,   179,   182,   183,   184,   188,   190,   191,   192,
     198,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   213,   214,   215,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   265,   266,   267,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   318,   320,   321,   322,   323,   324,   326,
     327,   328,   342,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     363,   364,   365,   366,   367,   368,   372,   373,   374,   378,
     380,   381,   383,   390,   392,   395,   396,   397,   399,   400,
     401,   402,   403,   405,   406,   408,   409,   410,   411,   412,
     413,   415,   416,   419,   420,   421,   422,   423,   428,   430,
     432,   433,   434,   439,   458,   461,   465,   468,   469,   475,
     476,   477,   478,   480,   481,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   493,   494,   495,   496,   499,   500,
     501,   502,   503,   504,   505,   508,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   522,   523,   524,   525,
     526,   527,   541,   542,   544,   545,   546,   547,   548,   549,
     550,   551,   572,   577,   578,   579,   580,   581,   582,   585,
     643,   644,   645,   646,   648,   649,   650,   651,   652,   659,
     660,   661,    34,    35,    50,   217,   398,   399,   400,   398,
     398,   399,   400,   158,   158,    38,    39,    41,    42,    48,
      58,    59,    76,    81,   113,   114,   115,   162,   226,   267,
     293,   301,   309,   379,   380,   384,   385,   386,   162,   155,
     155,   155,   158,   387,   158,    25,    35,    62,   120,   279,
     438,   440,   441,   155,   120,   155,   158,   158,    78,   155,
     227,   228,   155,   120,   407,    40,    44,    46,    47,    48,
      49,    52,    61,    69,    72,    74,    75,    77,    99,   114,
     137,   162,   171,   204,   230,   232,   234,   235,   242,   244,
     245,   246,   249,   250,   263,   321,   659,   660,   120,    16,
     186,   398,   400,   421,   647,   658,   659,    49,    74,    75,
     120,   155,   187,   250,   420,   422,   432,   189,   420,   659,
=======
     150,   151,   152,   153,   155,   156,   158,   159,   160,   161,
     162,   167,   168,   169,   170,   171,   172,   173,   174,   176,
     178,   179,   182,   183,   184,   188,   190,   191,   198,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     213,   214,   215,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     265,   266,   267,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   318,   321,   322,   327,   328,   342,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   363,   364,   365,   366,   367,   368,
     372,   373,   374,   378,   380,   381,   383,   390,   392,   395,
     396,   397,   399,   400,   401,   402,   403,   405,   406,   408,
     409,   410,   411,   412,   413,   415,   416,   419,   420,   421,
     422,   427,   429,   431,   432,   433,   438,   457,   460,   464,
     467,   468,   474,   475,   476,   477,   478,   480,   481,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   493,   494,
     495,   496,   499,   500,   501,   502,   503,   504,   505,   508,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     522,   523,   524,   525,   526,   527,   541,   542,   544,   545,
     546,   547,   548,   549,   550,   551,   572,   577,   578,   579,
     580,   581,   582,   585,   643,   644,   645,   646,   648,   649,
     650,   651,   652,   659,   660,   661,    34,    35,    50,   217,
     398,   399,   400,   398,   398,   399,   400,   158,   158,    38,
      39,    41,    42,    48,    58,    59,    76,    81,   113,   114,
     115,   162,   226,   267,   293,   301,   309,   379,   380,   384,
     385,   386,   162,   155,   155,   155,   158,   387,   158,    25,
      35,    62,   120,   279,   437,   439,   440,   155,   120,   155,
     158,   158,    78,   155,   227,   228,   155,   120,   407,    40,
      44,    46,    47,    48,    49,    52,    61,    69,    72,    74,
      75,    77,    99,   114,   137,   162,   171,   204,   242,   244,
     245,   246,   249,   250,   263,   266,   659,   660,   120,    16,
     186,   398,   400,   420,   647,   658,   659,    49,    74,    75,
     120,   155,   187,   250,   419,   421,   431,   189,   419,   659,
>>>>>>> MERGE-SOURCE
     155,   155,   658,   659,    18,    19,   659,   155,    31,   216,
<<<<<<< TREE
     219,   219,   231,   233,   320,   231,   233,   320,   231,   320,
     231,   236,   320,   120,   247,   247,   248,   158,   155,   402,
     317,   420,   319,   420,   320,   328,   344,   344,     0,   346,
     347,    34,    50,   349,   366,     1,   192,   343,   192,   343,
     114,   381,   401,   420,   109,   192,   109,   343,   192,    43,
      47,    52,    71,   170,   173,   188,   214,   263,   414,   424,
     429,   430,   431,   446,   447,   451,     1,     3,    68,    73,
     120,   425,   169,    94,   134,   142,   143,   145,   153,   157,
     159,   164,   181,   205,   206,   207,   208,   209,   210,   497,
     498,   255,   101,   160,   178,   201,   119,   148,   161,   196,
     203,   212,   138,   152,    51,   202,   103,   104,   160,   178,
     495,   195,   155,   502,   121,   156,   158,   509,   510,   147,
     158,   186,   186,   186,   186,   382,   512,   382,    30,   657,
     184,   198,   184,   198,   168,   184,   660,   659,   171,   204,
      48,   659,   154,   120,    46,    48,    81,   108,   170,   658,
     227,   228,   229,   252,   616,   659,   659,   310,   139,   144,
     114,   293,   301,   384,   658,   399,   399,   420,   120,   189,
     388,   389,   155,   404,   420,     1,   162,   657,   115,   162,
     362,   657,   659,   120,   144,   109,   420,   459,   460,   659,
     399,   420,   420,   570,   659,   399,   155,   155,   420,   659,
     144,   459,   186,   186,   123,   109,   186,   123,   158,   158,
     158,   659,   155,   187,   188,   189,    36,   529,   530,   531,
     420,   420,     8,   177,    17,   420,   216,    30,    30,   421,
     421,   508,   421,   421,   421,   647,   421,   508,   421,   237,
     236,   583,   584,   659,   192,   192,   421,   420,   400,   420,
     251,   417,   418,   317,   319,   421,   344,   192,   343,   192,
=======
     219,   219,   231,   233,   320,   508,   231,   233,   320,   420,
     647,   231,   320,   508,   231,   236,   320,   120,   247,   247,
     248,   158,   155,   402,   477,   317,   419,   319,   419,   320,
     420,   328,   344,   344,     0,   346,   347,    34,    50,   349,
     366,     1,   192,   343,   192,   343,   114,   381,   401,   419,
     109,   192,   109,   343,   192,    43,    47,    52,    71,   170,
     173,   188,   214,   263,   414,   423,   428,   429,   430,   445,
     446,   450,     1,     3,    68,    73,   120,   424,   169,    94,
     134,   142,   143,   145,   153,   157,   159,   164,   181,   205,
     206,   207,   208,   209,   210,   497,   498,   255,   101,   160,
     178,   201,   119,   148,   161,   196,   203,   212,   138,   152,
      51,   202,   103,   104,   160,   178,   495,   195,   155,   502,
     121,   156,   158,   509,   510,   147,   158,   186,   186,   186,
     186,   382,   512,   382,    30,   657,   184,   198,   184,   198,
     168,   184,   660,   659,   171,   204,    48,   659,   154,   120,
      46,    48,    81,   108,   170,   658,   227,   228,   229,   252,
     616,   659,   659,   310,   139,   144,   114,   293,   301,   384,
     658,   399,   399,   419,   120,   189,   388,   389,   155,   404,
     419,     1,   162,   657,   115,   162,   362,   657,   659,   120,
     144,   109,   419,   458,   459,   659,   399,   419,   419,   570,
     659,   399,   155,   155,   419,   659,   144,   458,   186,   186,
     123,   109,   186,   123,   158,   158,   158,   659,   155,   187,
     188,   189,    36,   529,   530,   531,   419,   419,     8,   177,
      17,   419,   216,    30,    30,   420,   420,   508,   420,   420,
     420,   647,   239,   239,   420,   508,    96,   420,   237,   236,
     583,   584,   659,   192,   192,   420,   419,   400,   419,   251,
     417,   418,   317,   319,   420,   239,   344,   192,   343,   192,
>>>>>>> MERGE-SOURCE
     343,     3,   350,   366,   396,     1,   350,   366,   396,    34,
<<<<<<< TREE
     367,   396,   367,   396,   407,   343,   407,   421,   421,   120,
     170,   172,   172,   401,   421,   421,   435,   436,   659,   290,
     290,   435,   120,   442,   477,   478,   480,   480,   480,   480,
=======
     367,   396,   367,   396,   407,   343,   407,   420,   420,   120,
     170,   172,   172,   401,   420,   420,   434,   435,   659,   290,
     290,   434,   120,   441,   476,   477,   480,   480,   480,   480,
>>>>>>> MERGE-SOURCE
     479,   480,   480,   480,    72,   481,   485,   485,   484,   486,
     486,   486,   486,   487,   487,   488,   488,   237,    96,    96,
<<<<<<< TREE
      96,   503,   186,   420,   196,   515,   516,   572,   658,   420,
     146,   189,   421,   521,   510,   151,   189,   521,   109,   189,
=======
      96,   503,   186,   419,   196,   515,   516,   572,   658,   419,
     146,   189,   420,   521,   510,   151,   189,   521,   109,   189,
>>>>>>> MERGE-SOURCE
     189,   109,   109,   387,    30,   660,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,   369,   370,   371,    96,
     139,   144,   375,   376,   377,   659,   162,   162,   369,   657,
     129,   134,    56,    58,   102,   257,   270,   272,   283,   284,
     285,   287,   289,   617,   618,   619,   620,   621,   622,   629,
<<<<<<< TREE
     635,   636,   252,    96,   305,   659,   144,   421,   120,   659,
=======
     635,   636,   252,    96,   305,   659,   144,   420,   120,   659,
>>>>>>> MERGE-SOURCE
     659,   134,   186,   186,   186,   659,    96,   109,   189,   398,
     189,   658,    98,    46,   658,   657,    98,    96,   144,   552,
<<<<<<< TREE
     659,   421,   441,   186,   109,   190,   149,   552,   186,   189,
     189,   155,   186,   399,   399,   186,   144,   552,   421,   190,
     421,   421,   658,   421,   420,   420,   420,   659,   530,   531,
=======
     659,   420,   440,   186,   109,   190,   149,   552,   186,   189,
     189,   155,   186,   399,   399,   186,   144,   552,   420,   190,
     420,   420,   658,   420,   419,   419,   419,   659,   530,   531,
>>>>>>> MERGE-SOURCE
     132,   199,   186,   186,   186,   133,   192,   133,   192,    96,
<<<<<<< TREE
     224,   225,   239,    96,   224,   225,   239,   239,   239,    96,
      96,   243,   231,   237,   109,   241,   144,   192,   189,   420,
     186,    11,    12,    20,   196,   506,   507,   589,   659,   418,
     239,   366,    34,    34,   192,   343,   192,   115,   401,   659,
     172,   421,   452,   453,   120,   448,   449,   109,    37,    98,
     149,   437,   438,   552,   659,    57,   220,   260,   426,   427,
     480,   155,   158,   265,   501,   512,   590,   593,   594,   595,
     596,   597,   601,   603,   605,   606,    40,    45,    46,    48,
      54,    61,    63,    64,    72,    99,   154,   158,   213,   231,
     323,   324,   325,   326,   553,   555,   557,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,   569,   573,   574,
     575,   576,   653,   654,   655,   656,   659,   553,   492,   558,
     659,   492,   186,   187,   109,   189,   189,   512,   150,   167,
     150,   167,   139,   404,   387,   370,   134,   555,   377,   421,
     552,   657,   657,   130,   131,   657,   283,   284,   285,   289,
     659,   269,   280,   269,   280,    30,   292,    98,   115,   158,
     623,   626,   617,    40,    45,    46,    54,    61,    63,    64,
      72,    99,   231,   323,   324,   391,   559,   653,   233,   305,
     314,   421,   659,    96,   305,   657,   155,   552,   553,   389,
      96,   186,   200,   134,   361,   657,   162,   134,    98,   361,
     553,   421,   144,   438,   155,   120,   421,   421,   149,   102,
     462,   463,   464,   466,   467,   102,   470,   471,   472,   473,
     399,   186,   186,   155,   421,   144,   192,   421,   123,   123,
     189,   189,   189,    36,   531,   132,   199,     9,    10,   105,
     125,   127,   155,   197,   526,   528,   539,   540,   543,   155,
      30,    30,   238,   240,   421,   421,   421,   238,   240,   421,
     421,   421,   421,   421,   421,   421,   421,   421,   508,   120,
     421,   421,    49,    74,    75,   250,   401,   422,   432,   251,
     586,   587,   155,   212,   402,   421,   192,   115,   396,   396,
     396,   452,    97,   108,   118,   129,   454,   455,   456,   457,
     109,   659,   109,   120,   436,   129,   120,   421,   149,   438,
     149,    37,   149,   437,   438,   149,   552,   260,    55,    60,
      79,   120,   437,   443,   444,   445,   427,   420,   590,   597,
     155,   291,   482,   642,    98,   171,   258,   259,   261,   268,
     278,   290,   591,   592,   611,   612,   613,   614,   637,   640,
     264,   266,   598,   616,   273,   602,   638,   253,   254,   276,
     607,   608,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   158,   158,   555,   158,   158,   158,   158,   158,   146,
     178,   196,   554,   146,   146,   421,   139,   404,   572,   376,
     292,    30,    98,   115,   158,   630,    30,   623,   554,   554,
     503,   293,   312,   552,   391,   233,   192,   398,   553,   401,
     421,   657,   109,   361,   421,   144,   398,   460,   421,   421,
     115,   463,   464,   102,   188,   115,   464,   467,   120,   474,
     553,   102,   115,   471,   102,   115,   473,   186,   398,   421,
     421,   421,   200,   470,   134,   197,   528,     7,   399,   659,
     197,   539,   399,   192,   192,   239,   239,   239,   239,    98,
     243,   243,   584,   188,   158,   158,   158,   188,   589,   587,
     506,   657,   130,   131,   456,   457,   457,   453,   108,   144,
     450,   552,   449,   436,   149,   437,   659,   421,   149,   421,
     129,   421,   149,   438,   149,   421,   149,   120,   120,   421,
     659,   445,    79,   186,   189,   590,   604,   256,   220,   260,
=======
     224,   225,   239,    96,   224,   225,   239,   239,   239,   420,
     420,    96,    96,   420,   243,   231,   508,   237,   109,   241,
     144,   192,   189,   419,   186,    11,    12,    20,   196,   506,
     507,   589,   659,   418,   239,   420,   366,    34,    34,   192,
     343,   192,   115,   401,   659,   172,   420,   451,   452,   120,
     447,   448,   109,    37,    98,   149,   436,   437,   552,   659,
      57,   220,   260,   425,   426,   480,   155,   158,   265,   501,
     512,   590,   593,   594,   595,   596,   597,   601,   603,   605,
     606,    40,    45,    46,    48,    54,    61,    63,    64,    72,
      99,   154,   158,   213,   231,   323,   324,   325,   326,   553,
     555,   557,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   573,   574,   575,   576,   653,   654,   655,
     656,   659,   553,   492,   558,   659,   492,   186,   187,   109,
     189,   189,   512,   150,   167,   150,   167,   139,   404,   387,
     370,   134,   158,   555,   377,   420,   552,   657,   657,   130,
     131,   657,   283,   284,   285,   289,   659,   269,   280,   269,
     280,    30,   292,    98,   115,   158,   623,   626,   617,    40,
      45,    46,    54,    61,    63,    64,    72,    99,   231,   391,
     559,   653,   233,   305,   314,   420,   659,    96,   305,   657,
     155,   552,   553,   389,    96,   186,   200,   134,   361,   657,
     162,   134,    98,   361,   553,   420,   144,   437,   155,   120,
     420,   420,   149,   102,   461,   462,   463,   465,   466,   102,
     469,   470,   471,   472,   399,   186,   186,   155,   420,   144,
     192,   420,   123,   123,   189,   189,   189,    36,   531,   132,
     199,     9,    10,   105,   125,   127,   155,   197,   526,   528,
     539,   540,   543,   155,    30,    30,   238,   240,   420,   420,
     420,   238,   240,   420,   420,   420,   420,   420,    98,   420,
     420,   420,   420,   243,   508,   120,   420,   420,    49,    74,
      75,   250,   401,   421,   431,   251,   586,   587,   155,   212,
     402,   420,   192,   115,   396,   396,   396,   451,    97,   108,
     118,   129,   453,   454,   455,   456,   109,   659,   109,   120,
     435,   129,   120,   420,   149,   437,   149,    37,   149,   436,
     437,   149,   552,   260,    55,    60,    79,   120,   436,   442,
     443,   444,   426,   419,   590,   597,   155,   291,   482,   642,
      98,   171,   258,   259,   261,   268,   278,   290,   591,   592,
     611,   612,   613,   614,   637,   640,   264,   266,   598,   616,
     273,   602,   638,   253,   254,   276,   607,   608,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   189,
     555,   158,   158,   158,   158,   158,   158,   146,   178,   196,
     554,   146,   146,   420,   139,   404,   572,   376,   292,    30,
      98,   115,   158,   630,    30,   623,   554,   554,   503,   293,
     312,   552,   391,   233,   192,   398,   553,   401,   420,   657,
     109,   361,   420,   144,   398,   459,   420,   420,   115,   462,
     463,   102,   188,   115,   463,   466,   120,   473,   553,   102,
     115,   470,   102,   115,   472,   186,   398,   420,   420,   420,
     200,   469,   134,   197,   528,     7,   399,   659,   197,   539,
     399,   192,   192,   239,   239,   239,   239,    98,   322,   243,
     420,   243,   584,   188,   158,   158,   158,   188,   589,   587,
     506,   657,   130,   131,   455,   456,   456,   452,   108,   144,
     449,   552,   448,   435,   149,   436,   659,   420,   149,   420,
     129,   420,   149,   437,   149,   420,   149,   120,   120,   420,
     659,   444,    79,   186,   189,   590,   604,   256,   220,   260,
>>>>>>> MERGE-SOURCE
     274,   281,   641,    98,   262,   263,   639,   256,   594,   641,
     484,   611,   595,   149,   288,   599,   600,   639,   292,   610,
      80,   609,   189,   189,   568,   569,   189,   196,   659,   189,
     196,   553,   556,   189,    30,   189,   658,   659,   659,   189,
     189,   196,   659,   189,   189,   189,   189,   189,   189,   189,
<<<<<<< TREE
      30,   138,   203,   632,   633,   634,    30,   631,   632,   277,
     627,   109,   624,   172,   659,   263,   503,   186,   128,   128,
      98,   657,   421,   186,   188,   188,   421,   401,   421,   188,
     188,   659,   188,   212,   120,   474,   120,   188,   120,   474,
     188,   186,   115,   531,   659,   197,   186,   531,   659,   186,
     421,   421,   421,   421,   322,   421,   421,   421,   420,   420,
     420,   155,   588,   457,   657,   421,   144,   421,   149,   421,
     149,   437,   421,   149,   421,   421,   659,   659,   444,   421,
     186,   486,    53,   131,   484,   484,   275,   282,   292,   615,
     615,   596,   155,   286,   189,   189,   109,   189,   109,   189,
      96,   189,   109,   189,   189,   189,   189,   189,   109,   189,
     109,   189,   630,   630,   634,   109,   189,    30,   628,   639,
     625,   626,   189,   393,   394,   503,   120,   231,   313,   293,
     172,   401,   421,   361,   421,   401,    96,   401,   421,   553,
     659,   188,   659,   421,   659,   188,   401,   120,    95,   185,
     532,   531,   659,   199,   531,   421,   189,   189,   189,   420,
     450,   421,   421,   421,   149,   421,    55,   484,   484,   201,
     420,   570,   571,   659,   570,   571,   553,   553,    96,   570,
     570,    30,   271,   109,   109,   457,   552,   659,   120,   231,
     659,   393,   474,    96,   188,    96,   659,     5,   135,   535,
     536,   538,   540,    29,   136,   533,   534,   537,   540,   199,
     531,   199,   200,   470,   186,   450,   421,   120,   484,   186,
     189,   189,   146,   189,   189,   553,   189,   189,   626,   394,
     457,   311,   659,   120,   231,   188,   474,   401,   421,   474,
     188,    95,   135,   538,   185,   136,   537,   199,   115,   659,
     421,   311,   659,   120,   401,   421,   188,   188,   120,   299,
     311,   659,   659,   312,   421,   312,   188,   503,   503,   201,
     293,   659,   231,   120,   659,   312,   503
=======
     189,    30,   138,   203,   632,   633,   634,    30,   631,   632,
     277,   627,   109,   624,   172,   659,   263,   503,   186,   128,
     128,    98,   657,   420,   186,   188,   188,   420,   401,   420,
     188,   188,   659,   188,   212,   120,   473,   120,   188,   120,
     473,   188,   186,   115,   531,   659,   197,   186,   531,   659,
     186,   420,   420,   420,   420,   322,   420,   420,   420,   420,
     419,   419,   419,   155,   588,   456,   657,   420,   144,   420,
     149,   420,   149,   436,   420,   149,   420,   420,   659,   659,
     443,   420,   186,   486,    53,   131,   484,   484,   275,   282,
     292,   615,   615,   596,   155,   286,   189,   189,   109,   189,
     109,   189,    96,   189,   109,   189,   189,   189,   189,   189,
     109,   189,   109,   189,   630,   630,   634,   109,   189,    30,
     628,   639,   625,   626,   189,   393,   394,   503,   120,   231,
     313,   293,   172,   401,   420,   361,   420,   401,    96,   401,
     420,   553,   659,   188,   659,   420,   659,   188,   401,   120,
      95,   185,   532,   531,   659,   199,   531,   420,   189,   189,
     189,   419,   449,   420,   420,   420,   149,   420,    55,   484,
     484,   201,   419,   570,   571,   659,   570,   571,   553,   553,
      96,   570,   570,    30,   271,   109,   109,   456,   552,   659,
     120,   231,   659,   393,   473,    96,   188,    96,   659,     5,
     135,   535,   536,   538,   540,    29,   136,   533,   534,   537,
     540,   199,   531,   199,   200,   469,   186,   449,   420,   120,
     484,   186,   189,   189,   146,   189,   189,   553,   189,   189,
     626,   394,   456,   311,   659,   120,   231,   188,   473,   401,
     420,   473,   188,    95,   135,   538,   185,   136,   537,   199,
     115,   659,   420,   311,   659,   120,   401,   420,   188,   188,
     120,   299,   311,   659,   659,   312,   420,   312,   188,   503,
     503,   201,   293,   659,   231,   120,   659,   312,   503
>>>>>>> MERGE-SOURCE
  };

#if YYDEBUG
  /* TOKEN_NUMBER_[YYLEX-NUM] -- Internal symbol number corresponding
     to YYLEX-NUM.  */
  const unsigned short int
  jsoniq_parser::yytoken_number_[] =
  {
         0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595
  };
#endif

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
  const unsigned short int
  jsoniq_parser::yyr1_[] =
  {
         0,   341,   342,   342,   342,   342,   343,   343,   343,   344,
     344,   344,   344,   345,   345,   345,   345,   346,   346,   346,
     346,   346,   346,   346,   346,   347,   347,   347,   347,   348,
     349,   349,   349,   350,   350,   350,   350,   350,   351,   351,
     351,   351,   351,   351,   351,   351,   352,   352,   353,   354,
     355,   355,   356,   356,   357,   357,   358,   358,   358,   358,
     359,   359,   359,   360,   360,   360,   360,   361,   361,   362,
     362,   363,   363,   363,   363,   364,   365,   365,   366,   366,
     366,   367,   367,   367,   367,   367,   367,   367,   367,   368,
     368,   369,   369,   370,   371,   371,   371,   371,   371,   371,
     371,   371,   371,   371,   372,   373,   374,   375,   375,   376,
     376,   376,   377,   378,   378,   378,   379,   379,   379,   379,
     380,   380,   381,   381,   381,   381,   382,   382,   383,   383,
     384,   384,   385,   385,   386,   386,   387,   387,   387,   387,
     388,   388,   389,   389,   390,   390,   390,   390,   391,   391,
     391,   391,   392,   392,   393,   393,   394,   394,   394,   394,
     395,   395,   395,   395,   396,   397,   397,   397,   398,   398,
     398,   399,   399,   400,   400,   400,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   402,
     403,   404,   405,   406,   406,   406,   407,   407,   407,   407,
     408,   409,   410,   411,   412,   412,   413,   414,   415,   416,
<<<<<<< TREE
     417,   417,   418,   419,   420,   420,   420,   421,   421,   421,
     421,   421,   421,   422,   422,   422,   422,   422,   422,   422,
     422,   422,   422,   422,   422,   423,   424,   425,   425,   426,
     426,   426,   427,   427,   428,   428,   429,   430,   430,   430,
     431,   431,   431,   431,   431,   432,   432,   433,   433,   433,
     434,   434,   435,   435,   435,   436,   436,   436,   436,   436,
     436,   436,   436,   436,   436,   436,   436,   437,   438,   439,
     440,   440,   441,   441,   441,   441,   442,   442,   443,   443,
     443,   444,   444,   444,   445,   445,   445,   446,   447,   448,
     448,   449,   449,   449,   449,   449,   449,   450,   451,   451,
     452,   452,   453,   453,   454,   454,   454,   454,   454,   454,
     454,   455,   455,   456,   456,   457,   458,   458,   459,   459,
     460,   460,   461,   462,   462,   463,   464,   464,   465,   466,
     466,   467,   468,   468,   469,   469,   470,   470,   471,   471,
     472,   472,   473,   473,   474,   474,   475,   476,   476,   477,
     477,   478,   478,   478,   478,   478,   479,   478,   478,   478,
     478,   480,   480,   481,   481,   482,   482,   483,   483,   484,
     484,   484,   485,   485,   485,   485,   485,   486,   486,   486,
     487,   487,   487,   488,   488,   489,   489,   490,   490,   491,
     491,   492,   492,   493,   493,   494,   494,   494,   494,   495,
     495,   495,   496,   496,   497,   497,   497,   497,   497,   497,
     498,   498,   498,   499,   499,   499,   499,   500,   500,   501,
     501,   502,   502,   502,   503,   504,   505,   506,   506,   507,
     507,   507,   507,   508,   508,   508,   508,   508,   508,   508,
     508,   508,   509,   509,   510,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   512,
     512,   512,   512,   513,   513,   513,   514,   514,   515,   516,
     516,   517,   518,   519,   520,   520,   521,   521,   521,   521,
     522,   522,   523,   524,   525,   525,   526,   526,   526,   527,
     527,   527,   527,   527,   527,   528,   528,   529,   529,   530,
     531,   531,   532,   532,   533,   533,   534,   534,   534,   534,
     535,   535,   536,   536,   536,   536,   537,   537,   538,   538,
     539,   539,   539,   539,   540,   540,   540,   540,   541,   541,
     542,   542,   543,   544,   544,   544,   544,   544,   544,   544,
     545,   546,   546,   547,   547,   548,   549,   550,   550,   551,
     551,   552,   553,   553,   553,   554,   554,   554,   555,   555,
     555,   555,   555,   555,   555,   556,   556,   557,   558,   559,
     559,   559,   559,   559,   559,   559,   559,   559,   559,   560,
     561,   561,   561,   562,   563,   564,   565,   565,   565,   566,
     566,   566,   566,   566,   567,   568,   568,   568,   568,   568,
     568,   568,   569,   570,   571,   572,   573,   573,   574,   575,
     575,   576,   577,   577,   577,   578,   578,   578,   578,   578,
     578,   578,   578,   578,   578,   579,   579,   580,   580,   581,
     582,   583,   583,   584,   585,   586,   586,   587,   588,   589,
     589,   590,   591,   591,   592,   592,   593,   593,   594,   594,
     595,   595,   596,   596,   597,   598,   598,   599,   599,   600,
     601,   601,   601,   602,   602,   603,   604,   604,   605,   606,
     606,   607,   607,   608,   608,   608,   609,   609,   610,   610,
     611,   611,   611,   611,   611,   612,   613,   614,   615,   615,
     615,   616,   616,   617,   617,   617,   617,   617,   617,   617,
     617,   618,   618,   618,   618,   619,   619,   620,   621,   621,
     622,   622,   622,   623,   623,   624,   624,   625,   625,   626,
     627,   627,   628,   628,   629,   629,   629,   630,   630,   631,
     631,   632,   632,   633,   633,   634,   634,   635,   636,   636,
     637,   637,   637,   638,   639,   639,   639,   639,   640,   640,
     641,   641,   642,   643,   643,   644,   644,   645,   645,   646,
     646,   647,   647,   647,   647,   648,   648,   648,   649,   650,
     651,   652,   653,   653,   653,   654,   655,   656,   657,   658,
     658,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   661
=======
     417,   417,   418,   419,   419,   419,   420,   420,   420,   420,
     420,   420,   421,   421,   421,   421,   421,   421,   421,   421,
     421,   421,   421,   421,   422,   423,   424,   424,   425,   425,
     425,   426,   426,   427,   427,   428,   429,   429,   429,   430,
     430,   430,   430,   430,   431,   431,   432,   432,   432,   433,
     433,   434,   434,   434,   435,   435,   435,   435,   435,   435,
     435,   435,   435,   435,   435,   435,   436,   437,   438,   439,
     439,   440,   440,   440,   440,   441,   441,   442,   442,   442,
     443,   443,   443,   444,   444,   444,   445,   446,   447,   447,
     448,   448,   448,   448,   448,   448,   449,   450,   450,   451,
     451,   452,   452,   453,   453,   453,   453,   453,   453,   453,
     454,   454,   455,   455,   456,   457,   457,   458,   458,   459,
     459,   460,   461,   461,   462,   463,   463,   464,   465,   465,
     466,   467,   467,   468,   468,   469,   469,   470,   470,   471,
     471,   472,   472,   473,   473,   474,   475,   475,   476,   476,
     477,   477,   478,   478,   478,   478,   478,   479,   478,   478,
     478,   478,   480,   480,   481,   481,   482,   482,   483,   483,
     484,   484,   484,   485,   485,   485,   485,   485,   486,   486,
     486,   487,   487,   487,   488,   488,   489,   489,   490,   490,
     491,   491,   492,   492,   493,   493,   494,   494,   494,   494,
     495,   495,   495,   496,   496,   497,   497,   497,   497,   497,
     497,   498,   498,   498,   499,   499,   499,   499,   500,   500,
     501,   501,   502,   502,   502,   503,   504,   505,   506,   506,
     507,   507,   507,   507,   508,   508,   508,   508,   508,   508,
     508,   508,   508,   509,   509,   510,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     512,   512,   512,   512,   513,   513,   513,   514,   514,   515,
     516,   516,   517,   518,   519,   520,   520,   521,   521,   521,
     521,   522,   522,   523,   524,   525,   525,   526,   526,   526,
     527,   527,   527,   527,   527,   527,   528,   528,   529,   529,
     530,   531,   531,   532,   532,   533,   533,   534,   534,   534,
     534,   535,   535,   536,   536,   536,   536,   537,   537,   538,
     538,   539,   539,   539,   539,   540,   540,   540,   540,   541,
     541,   542,   542,   543,   544,   544,   544,   544,   544,   544,
     544,   545,   546,   546,   547,   547,   548,   549,   550,   550,
     551,   551,   552,   553,   553,   553,   553,   554,   554,   554,
     555,   555,   555,   555,   555,   555,   555,   555,   555,   556,
     556,   557,   558,   559,   559,   559,   559,   559,   559,   559,
     559,   559,   559,   560,   561,   561,   561,   562,   563,   564,
     565,   565,   565,   566,   566,   566,   566,   566,   567,   568,
     568,   568,   568,   568,   568,   568,   569,   570,   571,   572,
     573,   573,   574,   575,   575,   576,   577,   577,   577,   578,
     578,   578,   578,   578,   578,   578,   578,   578,   578,   579,
     579,   580,   580,   581,   582,   583,   583,   584,   585,   586,
     586,   587,   588,   589,   589,   590,   591,   591,   592,   592,
     593,   593,   594,   594,   595,   595,   596,   596,   597,   598,
     598,   599,   599,   600,   601,   601,   601,   602,   602,   603,
     604,   604,   605,   606,   606,   607,   607,   608,   608,   608,
     609,   609,   610,   610,   611,   611,   611,   611,   611,   612,
     613,   614,   615,   615,   615,   616,   616,   617,   617,   617,
     617,   617,   617,   617,   617,   618,   618,   618,   618,   619,
     619,   620,   621,   621,   622,   622,   622,   623,   623,   624,
     624,   625,   625,   626,   627,   627,   628,   628,   629,   629,
     629,   630,   630,   631,   631,   632,   632,   633,   633,   634,
     634,   635,   636,   636,   637,   637,   637,   638,   639,   639,
     639,   639,   640,   640,   641,   641,   642,   643,   643,   644,
     644,   645,   645,   646,   647,   647,   647,   647,   648,   648,
     648,   648,   648,   648,   649,   649,   650,   650,   651,   651,
     652,   652,   653,   653,   653,   654,   654,   655,   655,   656,
     656,   657,   658,   658,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   661
>>>>>>> MERGE-SOURCE
  };

  /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
  const unsigned char
  jsoniq_parser::yyr2_[] =
  {
         0,     2,     1,     2,     2,     3,     1,     2,     2,     1,
       2,     1,     2,     4,     6,     4,     6,     3,     3,     5,
       1,     3,     3,     5,     5,     1,     3,     3,     5,     6,
       1,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     4,     3,
       3,     3,     3,     3,     5,     5,     5,     5,     5,     5,
       1,     1,     3,     3,     4,     5,     6,     1,     3,     3,
       3,     3,     6,     5,     8,     5,     5,     5,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     4,     3,     1,     1,
       1,     2,     2,     4,     3,     5,     3,     4,     4,     5,
       1,     2,     1,     4,     1,     4,     1,     3,     2,     3,
       1,     1,     4,     4,     5,     5,     2,     3,     4,     5,
       1,     3,     2,     3,     3,     5,     4,     6,     1,     2,
       1,     2,     8,     9,     1,     3,     1,     2,     2,     3,
      11,    14,    13,    22,     1,     1,     1,     0,     1,     1,
       0,     1,     2,     1,     2,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     3,     2,     3,     2,     3,     2,     3,     4,     5,
       5,     2,     4,     5,     3,     3,     2,     2,     8,     3,
<<<<<<< TREE
       1,     2,     3,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     1,
       1,     2,     4,     3,     5,     4,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     3,     2,
       1,     1,     1,     4,     3,     3,     5,     4,     6,     4,
       6,     5,     7,     4,     5,     5,     6,     3,     3,     2,
       1,     3,     4,     5,     3,     6,     4,     5,     1,     2,
       3,     1,     2,     1,     6,     3,     3,     2,     3,     1,
       3,     2,     4,     5,     6,     5,     3,     2,     3,     4,
       1,     3,     1,     2,     1,     1,     1,     2,     2,     2,
       3,     1,     1,     2,     2,     2,     5,     5,     1,     4,
       3,     4,     8,     1,     2,     3,     2,     3,     8,     1,
       2,     3,     8,    10,     8,    10,     1,     2,     4,     7,
       1,     2,     4,     7,     1,     3,     8,     1,     3,     1,
       3,     1,     3,     3,     3,     3,     0,     4,     3,     3,
       3,     1,     5,     1,     3,     0,     1,     1,     3,     1,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     4,     1,     4,     1,     4,     1,
       4,     1,     2,     1,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     5,     5,     6,     3,     4,     1,
       2,     3,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     4,     3,     3,     3,
       3,     3,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     1,     4,     4,     3,     4,     1,     3,     1,     3,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     4,
       8,     5,     9,     9,    10,     1,     2,     1,     2,     6,
       0,     1,     3,     3,     0,     1,     1,     1,     2,     2,
       0,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     2,
       3,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       4,     3,     7,     3,     7,     4,     4,     3,     7,     3,
       7,     2,     1,     2,     3,     1,     1,     1,     1,     1,
       3,     3,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     4,     4,     3,     3,     3,     3,     4,     4,     3,
       4,     6,     4,     6,     4,     3,     4,     6,     6,     4,
       6,     6,     4,     1,     2,     1,     1,     1,     4,     5,
       6,     3,     3,     3,     3,     5,     7,     7,     5,     5,
       5,     7,     7,     5,     5,     3,     3,     5,     7,     5,
       7,     1,     4,     3,     5,     1,     2,     3,     3,     1,
       3,     2,     0,     1,     1,     2,     1,     3,     1,     3,
       1,     4,     1,     2,     3,     0,     1,     0,     1,     4,
       2,     3,     1,     0,     1,     4,     0,     1,     2,     1,
       3,     0,     1,     2,     2,     1,     0,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     2,     2,     3,     1,     2,
       2,     5,     2,     1,     1,     0,     2,     1,     3,     4,
       0,     2,     0,     2,     4,     4,     3,     2,     3,     1,
       3,     0,     1,     1,     2,     2,     2,     2,     1,     2,
       2,     2,     2,     3,     2,     3,     3,     4,     2,     2,
       1,     1,     3,     2,     3,     2,     3,     2,     3,     2,
       3,     3,     3,     5,     5,     5,     5,     8,     5,     3,
       5,     7,     1,     1,     1,     1,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1
=======
       1,     2,     3,     1,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     1,     1,
       2,     4,     3,     5,     4,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     3,     2,     1,
       1,     1,     4,     3,     3,     5,     4,     6,     4,     6,
       5,     7,     4,     5,     5,     6,     3,     3,     2,     1,
       3,     4,     5,     3,     6,     4,     5,     1,     2,     3,
       1,     2,     1,     6,     3,     3,     2,     3,     1,     3,
       2,     4,     5,     6,     5,     3,     2,     3,     4,     1,
       3,     1,     2,     1,     1,     1,     2,     2,     2,     3,
       1,     1,     2,     2,     2,     5,     5,     1,     4,     3,
       4,     8,     1,     2,     3,     2,     3,     8,     1,     2,
       3,     8,    10,     8,    10,     1,     2,     4,     7,     1,
       2,     4,     7,     1,     3,     8,     1,     3,     1,     3,
       1,     2,     1,     3,     3,     3,     3,     0,     4,     3,
       3,     3,     1,     5,     1,     3,     0,     1,     1,     3,
       1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     4,     1,     4,     1,     4,
       1,     4,     1,     2,     1,     2,     1,     1,     2,     2,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     5,     5,     6,     3,     4,
       1,     2,     3,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     4,     3,     3,
       3,     3,     3,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     1,     4,     4,     3,     4,     1,     3,     1,
       3,     1,     1,     3,     3,     1,     1,     1,     1,     1,
       4,     8,     5,     9,     9,    10,     1,     2,     1,     2,
       6,     0,     1,     3,     3,     0,     1,     1,     1,     2,
       2,     0,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       2,     3,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     4,     3,     7,     3,     7,     4,     4,     3,     7,
       3,     7,     2,     1,     2,     3,     2,     1,     1,     1,
       1,     1,     3,     1,     3,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     4,     4,     3,     3,     3,
       3,     4,     4,     3,     4,     6,     4,     6,     4,     3,
       4,     6,     6,     4,     6,     6,     4,     1,     2,     1,
       1,     1,     4,     5,     6,     3,     3,     3,     3,     5,
       7,     7,     5,     5,     5,     7,     7,     5,     5,     3,
       3,     5,     7,     5,     7,     1,     4,     3,     5,     1,
       2,     3,     3,     1,     3,     2,     0,     1,     1,     2,
       1,     3,     1,     3,     1,     4,     1,     2,     3,     0,
       1,     0,     1,     4,     2,     3,     1,     0,     1,     4,
       0,     1,     2,     1,     3,     0,     1,     2,     2,     1,
       0,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     2,
       2,     3,     1,     2,     2,     5,     2,     1,     1,     0,
       2,     1,     3,     4,     0,     2,     0,     2,     4,     4,
       3,     2,     3,     1,     3,     0,     1,     1,     2,     2,
       2,     2,     1,     2,     2,     2,     2,     3,     2,     3,
       3,     4,     2,     2,     1,     1,     3,     2,     3,     2,
       3,     2,     3,     3,     3,     3,     5,     5,     5,     5,
       8,     4,     4,     7,     5,     4,     3,     2,     5,     4,
       7,     6,     1,     1,     1,     3,     1,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
>>>>>>> MERGE-SOURCE
  };

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
  /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
     First, the terminals, then, starting at \a yyntokens_, nonterminals.  */
  const char*
  const jsoniq_parser::yytname_[] =
  {
    "\"'end of file'\"", "error", "$undefined", "\"'unrecognized'\"",
  "\"'error'\"", "\"'apos attribute content'\"", "\"'char literal'\"",
  "\"'char literal]]>'\"", "\"'char literal and pi end'\"",
  "\"'&#charref;'\"", "\"'element content'\"", "\"'pref:*'\"",
  "\"'ns:*'\"", "\"'&entity;'\"", "\"'comment literal'\"",
  "\"'pi <NCName {>'\"", "\"'NCName_sval'\"", "\"'pragma literal'\"",
  "\"'QName #)'\"", "\"'EQName #)'\"", "\"'*:QName'\"",
  "\"'element QName {'\"", "\"'attribute QName {'\"",
  "\"'processing-instruction NCName {'\"", "\"'namespace NCName {'\"",
  "\"'QName'\"", "\"'EQName'\"", "\"'%QName'\"", "\"'%EQName'\"",
  "\"'quote attribute content'\"", "\"'STRING'\"", "\"'XML comment'\"",
  "\"'URI'\"", "\"'NCName'\"", "\"'declare'\"", "\"'module'\"",
  "\"'<blank>'\"", "\"'allowing'\"", "\"'base-uri'\"",
  "\"'boundary-space'\"", "\"'comment'\"", "\"'construction'\"",
  "\"'copy-namespaces'\"", "\"'count'\"", "\"'document'\"",
  "\"'document-node'\"", "\"'element'\"", "\"'for'\"", "\"'function'\"",
  "\"'if'\"", "\"'import'\"", "\"'instance'\"", "\"'let'\"", "\"'most'\"",
  "\"'namespace-node'\"", "\"'next'\"", "\"'no'\"", "\"'only'\"",
  "\"'option'\"", "\"'ordering'\"", "\"'previous'\"",
  "\"'processing-instruction'\"", "\"'schema'\"", "\"'schema-attribute'\"",
  "\"'schema-element'\"", "\"'sequential'\"", "\"'set'\"", "\"'simple'\"",
  "\"'sliding'\"", "\"'some'\"", "\"'space'\"", "\"'stable'\"",
  "\"'text'\"", "\"'tumbling'\"", "\"'switch'\"", "\"'typeswitch'\"",
  "\"'updating'\"", "\"'validate'\"", "\"'type'\"", "\"'when'\"",
  "\"'word'\"", "\"'decimal-format'\"", "\"'decimal-separator'\"",
  "\"'grouping-separator'\"", "\"'infinity'\"", "\"'minus-sign'\"",
  "\"'NaN'\"", "\"'percent'\"", "\"'per-mille'\"", "\"'zero-digit'\"",
  "\"'digit'\"", "\"'pattern-separator'\"", "\"'ancestor'\"",
  "\"'ancestor-or-self'\"", "\"'and'\"", "\"'''\"", "\"'as'\"",
  "\"'ascending'\"", "\"'at'\"", "\"'attribute'\"", "\"'@'\"", "\"'||'\"",
  "\"'case'\"", "\"'castable'\"", "\"'cast'\"", "\"'CDATA[['\"",
  "\"']]'\"", "\"'child'\"", "\"'collation'\"", "\"','\"", "\"'(:'\"",
  "\"':)'\"", "\"'DECIMAL'\"", "\"'context'\"", "\"'variable'\"",
  "\"'default'\"", "\"'descendant'\"", "\"'descendant-or-self'\"",
  "\"'descending'\"", "\"'div'\"", "\"'$'\"", "\"'.'\"", "\"'..'\"",
  "\"':'\"", "\"'::'\"", "\"'{{'\"", "\"'DOUBLE'\"", "\"'<double {>'\"",
  "\"'else'\"", "\"'empty'\"", "\"'greatest'\"", "\"'least'\"", "\"'/>'\"",
  "\"'encoding'\"", "\"'='\"", "\"''''\"", "\"'\\\"\\\"'\"", "\"'every'\"",
  "\"'except'\"", "\"'external'\"", "\"'following'\"",
  "\"'following-sibling'\"", "\"'follows'\"", "\"'>='\"", "\"':='\"",
  "\"'>'\"", "\"'?'\"", "\"'#'\"", "\"'idiv'\"", "\"'in'\"",
  "\"'inherit'\"", "\"'INTEGER'\"", "\"'intersect'\"", "\"'is'\"",
  "\"'item'\"", "\"'{'\"", "\"'['\"", "\"'<='\"", "\"'('\"", "\"'<'\"",
  "\"'-'\"", "\"'mod'\"", "\"'namespace'\"", "\"'nan'\"", "\"'!='\"",
  "\"'nodecomp'\"", "\"'?""?'\"", "\"'<no inherit>'\"",
  "\"'<no preserve>'\"", "\"'or'\"", "\"'order'\"", "\"'ordered'\"",
  "\"'by'\"", "\"'group'\"", "\"'parent'\"", "\"'%'\"", "\"'<?'\"",
  "\"'?>'\"", "\"'+'\"", "\"'(#'\"", "\"'#)'\"", "\"'<<'\"",
  "\"'preceding'\"", "\"'preceding-sibling'\"", "\"'preserve'\"",
  "\"'\\\"'\"", "\"'}'\"", "\"']'\"", "\"'return'\"", "\"')'\"",
  "\"'satisfies'\"", "\"'self'\"", "\"';'\"", "\"'/'\"", "\"'//'\"",
  "\"'!'\"", "\"'*'\"", "\"'</ (start tag end)'\"", "\"'strip'\"",
  "\"'> (tag end)'\"", "\"'then'\"", "\"'to'\"", "\"'treat'\"",
  "\"'union'\"", "\"'unordered'\"", "\"'eq'\"", "\"'ge'\"", "\"'gt'\"",
  "\"'le'\"", "\"'lt'\"", "\"'ne'\"", "\"'VALUECOMP'\"", "\"'|'\"",
  "\"'empty-sequence'\"", "\"'where'\"", "\"'<!--'\"", "\"'-->'\"",
  "\"'xquery'\"", "\"'jsoniq'\"", "\"'version'\"", "\"'start'\"",
  "\"'null'\"", "\"'true'\"", "\"'false'\"", "\"'after'\"", "\"'before'\"",
  "\"'revalidation'\"", "\"'strict'\"", "\"'lax'\"", "\"'skip'\"",
  "\"'delete'\"", "\"'node'\"", "\"'insert'\"", "\"'nodes'\"",
  "\"'rename'\"", "\"'replace'\"", "\"'value'\"", "\"'of'\"",
  "\"'first'\"", "\"'into'\"", "\"'last'\"", "\"'modify'\"", "\"'copy'\"",
  "\"'with'\"", "\"'break'\"", "\"'continue'\"", "\"'exit'\"",
  "\"'loop'\"", "\"'returning'\"", "\"'while'\"", "\"'try'\"",
  "\"'catch'\"", "\"'using'\"", "\"'all'\"", "\"'any'\"", "\"'contains'\"",
  "\"'content'\"", "\"'diacritics'\"", "\"'different'\"", "\"'distance'\"",
  "\"'end'\"", "\"'entire'\"", "\"'exactly'\"", "\"'from'\"",
  "\"'ftand'\"", "\"'ftnot'\"", "\"'not'\"", "\"'ft-option'\"",
  "\"'ftor'\"", "\"'insensitive'\"", "\"'language'\"", "\"'levels'\"",
  "\"'lowercase'\"", "\"'occurs'\"", "\"'paragraph'\"", "\"'paragraphs'\"",
  "\"'phrase'\"", "\"'relationship'\"", "\"'same'\"", "\"'score'\"",
  "\"'sensitive'\"", "\"'sentence'\"", "\"'sentences'\"", "\"'stemming'\"",
  "\"'stop'\"", "\"'thesaurus'\"", "\"'times'\"", "\"'uppercase'\"",
  "\"'weight'\"", "\"'wildcards'\"", "\"'window'\"", "\"'without'\"",
  "\"'words'\"", "\"'collection'\"", "\"'const'\"", "\"'append-only'\"",
  "\"'queue'\"", "\"'mutable'\"", "\"'read-only'\"", "\"'unique'\"",
  "\"'non'\"", "\"'index'\"", "\"'manually'\"", "\"'automatically'\"",
  "\"'maintained'\"", "\"'on'\"", "\"'range'\"", "\"'equality'\"",
  "\"'general'\"", "\"'integrity'\"", "\"'constraint'\"", "\"'check'\"",
  "\"'key'\"", "\"'foreach'\"", "\"'foreign'\"", "\"'keys'\"", "\"'{|'\"",
  "\"'|}'\"", "\"'{['\"", "\"']}'\"", "\"'json'\"", "\"'append'\"",
  "\"'position'\"", "\"'object'\"", "\"'array'\"", "\"'json-item'\"",
  "\"'structured-item'\"", "\"'BOM_UTF8'\"", "\"'#!/shebang\"",
  "RANGE_REDUCE", "SEQUENCE_TYPE_REDUCE", "ADDITIVE_REDUCE",
  "UNION_REDUCE", "INTERSECT_EXCEPT_REDUCE", "QVARINDECLLIST_REDUCE",
  "COMMA_DOLLAR", "UNARY_PREC", "STEP_REDUCE", "SIMPLEMAPEXPR_REDUCE",
  "MULTIPLICATIVE_REDUCE", "JSONLOOKUPEXPR_REDUCE", "$accept", "Module",
  "ERROR", "ModuleWithoutBOM", "VersionDecl", "MainModule",
  "LibraryModule", "ModuleDecl", "SIND_DeclList", "SIND_Decl", "Setter",
  "BoundarySpaceDecl", "DefaultCollationDecl", "BaseURIDecl",
  "ConstructionDecl", "OrderingModeDecl", "EmptyOrderDecl",
  "CopyNamespacesDecl", "Import", "SchemaImport", "URILiteralList",
  "SchemaPrefix", "ModuleImport", "NamespaceDecl", "DefaultNamespaceDecl",
  "VFO_DeclList", "VFO_Decl", "DecimalFormatDecl",
  "DecimalFormatParamList", "DecimalFormatParam", "DecimalFormatParamName",
  "OptionDecl", "FTOptionDecl", "CtxItemDecl", "CtxItemDecl2",
  "CtxItemDecl3", "CtxItemDecl4", "VarDecl", "VarNameAndType",
  "AnnotationList", "Annotation", "AnnotationLiteralList", "FunctionDecl",
  "FunctionDecl2", "FunctionDeclSimple", "FunctionDeclUpdating",
  "FunctionSig", "ParamList", "Param", "CollectionDecl",
  "CollectionTypeDecl", "IndexDecl", "IndexKeyList", "IndexKeySpec",
  "IntegrityConstraintDecl", "QueryBody", "StatementsAndOptionalExprTop",
  "StatementsAndOptionalExpr", "StatementsAndExpr", "Statements",
  "Statement", "BlockStatement", "BlockExpr",
  "EnclosedStatementsAndOptionalExpr", "VarDeclStatement",
  "BlockVarDeclList", "BlockVarDecl", "AssignStatement", "ApplyStatement",
  "ExitStatement", "WhileStatement", "FlowCtlStatement", "FLWORStatement",
  "ReturnStatement", "IfStatement", "TryStatement", "CatchListStatement",
  "CatchStatement", "VoidStatement", "Expr", "ExprSingle", "ExprSimple",
  "FLWORExpr", "ReturnExpr", "WindowType", "FLWORWinCondType",
  "FLWORWinCond", "WindowClause", "CountClause", "ForLetWinClause",
  "FLWORClause", "FLWORClauseList", "ForClause", "ForOrFrom",
  "VarInDeclList", "VarInDecl", "PositionalVar", "FTScoreVar", "LetClause",
  "VarGetsDeclList", "VarGetsDecl", "WindowVarDecl", "WindowVars",
  "WindowVars3", "WindowVars2", "WhereClause", "GroupByClause",
  "GroupSpecList", "GroupSpec", "GroupCollationSpec", "OrderByClause",
  "OrderSpecList", "OrderSpec", "OrderModifier", "OrderDirSpec",
  "OrderEmptySpec", "OrderCollationSpec", "QuantifiedExpr",
  "QVarInDeclList", "QVarInDecl", "SwitchExpr", "SwitchCaseClauseList",
  "SwitchCaseClause", "SwitchCaseOperandList", "SwitchStatement",
  "SwitchCaseStatementList", "SwitchCaseStatement", "TypeswitchExpr",
  "TypeswitchStatement", "CaseClauseList", "CaseClause",
  "CaseStatementList", "CaseStatement", "SequenceTypeList", "IfExpr",
  "OrExpr", "AndExpr", "NotExpr", "ComparisonExpr", "$@1",
  "FTContainsExpr", "StringConcatExpr", "opt_FTIgnoreOption", "RangeExpr",
  "AdditiveExpr", "MultiplicativeExpr", "UnionExpr", "IntersectExceptExpr",
  "InstanceofExpr", "TreatExpr", "CastableExpr", "CastExpr", "SingleType",
  "UnaryExpr", "SignList", "ValueExpr", "SimpleMapExpr", "ValueComp",
  "NodeComp", "ValidateExpr", "ExtensionExpr", "Pragma_list", "Pragma",
  "PathExpr", "RelativePathExpr", "StepExpr", "NameTest", "Wildcard",
  "FilterExpr", "PredicateList", "Predicate", "PrimaryExpr", "Literal",
  "NumericLiteral", "BooleanLiteral", "VarRef", "ParenthesizedExpr",
  "ContextItemExpr", "OrderedExpr", "UnorderedExpr", "FunctionCall",
  "ArgList", "FunctionItemExpr", "LiteralFunctionItem", "InlineFunction",
  "Constructor", "DirectConstructor", "DirElemConstructor",
  "DirElemContentList", "DirAttributeList", "DirAttr", "OptionalBlank",
  "DirAttributeValue", "opt_QuoteAttrContentList", "QuoteAttrContentList",
  "opt_AposAttrContentList", "AposAttrContentList",
  "QuoteAttrValueContent", "AposAttrValueContent", "DirElemContent",
  "CommonContent", "DirCommentConstructor", "DirPIConstructor",
  "CDataSection", "ComputedConstructor", "CompDocConstructor",
  "CompElemConstructor", "CompAttrConstructor", "CompTextConstructor",
  "CompCommentConstructor", "CompPIConstructor",
  "CompNamespaceConstructor", "TypeDeclaration", "SequenceType",
  "OccurrenceIndicator", "ItemType", "TypeList", "GeneralizedAtomicType",
  "SimpleType", "KindTest", "AnyKindTest", "DocumentTest", "NamespaceTest",
  "TextTest", "CommentTest", "PITest", "AttributeTest",
  "SchemaAttributeTest", "ElementTest", "SchemaElementTest", "TypeName",
  "TypeName_WITH_HOOK", "StringLiteral", "FunctionTest", "AnyFunctionTest",
  "TypedFunctionTest", "ParenthesizedItemType", "RevalidationDecl",
  "InsertExpr", "DeleteExpr", "ReplaceExpr", "RenameExpr", "TransformExpr",
  "VarNameList", "VarNameDecl", "TryExpr", "CatchListExpr", "CatchExpr",
  "BracedExpr", "NameTestList", "FTSelection", "opt_FTPosFilter_list",
  "FTPosFilter_list", "FTOr", "FTAnd", "FTMildNot", "FTUnaryNot",
  "FTPrimaryWithOptions", "opt_FTMatchOptions", "opt_FTWeight", "FTWeight",
  "FTPrimary", "opt_FTTimes", "FTExtensionSelection", "opt_FTSelection",
  "FTWords", "FTWordsValue", "opt_FTAnyallOption", "FTAnyallOption",
  "opt_word", "opt_words", "FTPosFilter", "FTOrder", "FTWindow",
  "FTDistance", "FTUnit", "FTMatchOptions", "FTMatchOption",
  "FTCaseOption", "FTDiacriticsOption", "FTExtensionOption",
  "FTStemOption", "FTThesaurusOption", "FTThesaurusID_or_default",
  "opt_FTThesaurus_list", "FTThesaurus_list", "FTThesaurusID",
  "opt_relationship", "opt_levels", "FTStopWordOption", "FTStopWords",
  "STRING_LITERAL_list", "opt_FTStopWordsInclExcl_list",
  "FTStopWordsInclExcl_list", "FTStopWordsInclExcl", "FTLanguageOption",
  "FTWildCardOption", "FTContent", "FTTimes", "FTRange", "FTScope",
  "FTBigUnit", "FTIgnoreOption", "JSONArrayConstructor",
  "JSONSimpleObjectUnion", "JSONAccumulatorObjectUnion",
  "JSONObjectConstructor", "JSONPairList", "JSONInsertExpr",
  "JSONAppendExpr", "JSONDeleteExpr", "JSONRenameExpr", "JSONReplaceExpr",
  "JSONTest", "JSONItemTest", "JSONObjectTest", "JSONArrayTest",
  "URI_LITERAL", "NCNAME", "QNAME", "FUNCTION_NAME", "EQNAME", 0
  };
#endif

#if YYDEBUG
  /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
  const jsoniq_parser::rhs_number_type
  jsoniq_parser::yyrhs_[] =
  {
       342,     0,    -1,   344,    -1,   327,   344,    -1,   328,   344,
      -1,   327,   328,   344,    -1,     1,    -1,     1,     3,    -1,
     343,     1,    -1,   346,    -1,   345,   346,    -1,   347,    -1,
     345,   347,    -1,   217,   219,    30,   192,    -1,   217,   219,
      30,   133,    30,   192,    -1,   218,   219,    30,   192,    -1,
     218,   219,    30,   133,    30,   192,    -1,   349,   192,   396,
      -1,   366,   192,   396,    -1,   349,   192,   366,   192,   396,
      -1,   396,    -1,   349,   343,   396,    -1,   366,   343,   396,
      -1,   349,   192,   366,   343,   396,    -1,   349,   343,   366,
     192,   396,    -1,   348,    -1,   348,   349,   192,    -1,   348,
     366,   192,    -1,   348,   349,   192,   366,   192,    -1,    35,
     162,   658,   134,   657,   192,    -1,   350,    -1,   349,   192,
     350,    -1,   349,   343,   350,    -1,   351,    -1,   359,    -1,
     364,    -1,   365,    -1,   373,    -1,   352,    -1,   353,    -1,
     354,    -1,   355,    -1,   356,    -1,   357,    -1,   358,    -1,
     577,    -1,    34,    39,   184,    -1,    34,    39,   198,    -1,
      34,   115,   108,   657,    -1,    34,    38,   657,    -1,    34,
      41,   184,    -1,    34,    41,   198,    -1,    34,    59,   171,
      -1,    34,    59,   204,    -1,    34,   115,   170,   129,   130,
      -1,    34,   115,   170,   129,   131,    -1,    34,    42,   184,
     109,   150,    -1,    34,    42,   184,   109,   167,    -1,    34,
      42,   168,   109,   150,    -1,    34,    42,   168,   109,   167,
      -1,   360,    -1,   363,    -1,    50,    25,     1,    -1,    50,
      62,   657,    -1,    50,    62,   362,   657,    -1,    50,    62,
     657,    98,   361,    -1,    50,    62,   362,   657,    98,   361,
      -1,   657,    -1,   361,   109,   657,    -1,   162,   658,   134,
      -1,   115,    46,   162,    -1,    50,    35,   657,    -1,    50,
      35,   162,   658,   134,   657,    -1,    50,    35,   657,    98,
     361,    -1,    50,    35,   162,   658,   134,   657,    98,   361,
      -1,    34,   162,   658,   134,   657,    -1,    34,   115,    46,
     162,   657,    -1,    34,   115,    48,   162,   657,    -1,   367,
      -1,   366,   192,   367,    -1,   366,   343,   367,    -1,   368,
      -1,   372,    -1,   374,    -1,   378,    -1,   383,    -1,   390,
      -1,   392,    -1,   395,    -1,    34,   115,    81,   369,    -1,
      34,    81,   659,   369,    -1,   370,    -1,   369,   370,    -1,
     371,   134,   572,    -1,    82,    -1,    90,    -1,    83,    -1,
      84,    -1,    85,    -1,    86,    -1,    91,    -1,    87,    -1,
      88,    -1,    89,    -1,    34,    58,   659,    30,    -1,    34,
     267,   616,    -1,    34,   113,   154,   375,    -1,    96,   555,
     376,    -1,   376,    -1,   377,    -1,   139,    -1,   139,   377,
<<<<<<< TREE
      -1,   144,   421,    -1,    34,   379,   144,   421,    -1,    34,
     379,   139,    -1,    34,   379,   139,   144,   421,    -1,   114,
=======
      -1,   144,   420,    -1,    34,   379,   144,   420,    -1,    34,
     379,   139,    -1,    34,   379,   139,   144,   420,    -1,   114,
>>>>>>> MERGE-SOURCE
     120,   659,    -1,   114,   120,   659,   552,    -1,   380,   114,
     120,   659,    -1,   380,   114,   120,   659,   552,    -1,   381,
      -1,   380,   381,    -1,    27,    -1,    27,   158,   382,   189,
      -1,    28,    -1,    28,   158,   382,   189,    -1,   512,    -1,
     382,   109,   512,    -1,    34,   384,    -1,    34,   380,   384,
      -1,   385,    -1,   386,    -1,    48,   660,   387,   404,    -1,
      48,   660,   387,   139,    -1,    76,    48,   660,   387,   404,
      -1,    76,    48,   660,   387,   139,    -1,   158,   189,    -1,
     158,   388,   189,    -1,   158,   189,    96,   553,    -1,   158,
     388,   189,    96,   553,    -1,   389,    -1,   388,   109,   389,
      -1,   120,   659,    -1,   120,   659,   552,    -1,    34,   293,
     659,    -1,    34,   293,   659,    96,   391,    -1,    34,   380,
     293,   659,    -1,    34,   380,   293,   659,    96,   391,    -1,
     559,    -1,   559,   554,    -1,   653,    -1,   653,   554,    -1,
      34,   301,   659,   305,   233,   503,   172,   393,    -1,    34,
     380,   301,   659,   305,   233,   503,   172,   393,    -1,   394,
      -1,   393,   109,   394,    -1,   503,    -1,   503,   552,    -1,
<<<<<<< TREE
     503,   457,    -1,   503,   552,   457,    -1,    34,   309,   310,
     659,   305,   293,   659,   120,   659,   311,   421,    -1,    34,
=======
     503,   456,    -1,   503,   552,   456,    -1,    34,   309,   310,
     659,   305,   293,   659,   120,   659,   311,   420,    -1,    34,
>>>>>>> MERGE-SOURCE
     309,   310,   659,   305,   293,   659,   231,   120,   659,   311,
     299,   312,   503,    -1,    34,   309,   310,   659,   305,   293,
<<<<<<< TREE
     659,   313,   231,   120,   659,   311,   421,    -1,    34,   309,
=======
     659,   313,   231,   120,   659,   311,   420,    -1,    34,   309,
>>>>>>> MERGE-SOURCE
     310,   659,   314,   312,   263,   293,   659,   231,   120,   659,
     312,   503,   201,   293,   659,   231,   120,   659,   312,   503,
      -1,   397,    -1,   399,    -1,   400,    -1,    -1,   399,    -1,
     400,    -1,    -1,   420,    -1,   400,   420,    -1,   401,    -1,
     400,   401,    -1,   400,   420,   343,   401,    -1,   402,    -1,
     405,    -1,   408,    -1,   409,    -1,   410,    -1,   411,    -1,
<<<<<<< TREE
     412,    -1,   413,    -1,   415,    -1,   469,    -1,   465,    -1,
     416,    -1,   419,    -1,   155,   400,   186,    -1,   155,   398,
     186,    -1,   155,   398,   186,    -1,   406,   192,    -1,   406,
     109,   407,    -1,   114,   407,    -1,   380,   114,   407,    -1,
     120,   659,    -1,   120,   659,   552,    -1,   120,   659,   144,
     421,    -1,   120,   659,   552,   144,   421,    -1,   120,   659,
     144,   421,   192,    -1,   422,   192,    -1,   246,   248,   421,
     192,    -1,   249,   158,   420,   189,   401,    -1,   244,   247,
     192,    -1,   245,   247,   192,    -1,   432,   414,    -1,   188,
     401,    -1,    49,   158,   420,   189,   200,   401,   128,   401,
      -1,   250,   402,   417,    -1,   418,    -1,   417,   418,    -1,
     251,   589,   402,    -1,   192,    -1,   421,    -1,   420,   109,
     421,    -1,   420,   343,   421,    -1,   423,    -1,   461,    -1,
     468,    -1,   475,    -1,   585,    -1,   422,    -1,   476,    -1,
     458,    -1,   578,    -1,   579,    -1,   581,    -1,   580,    -1,
     582,    -1,   650,    -1,   648,    -1,   651,    -1,   652,    -1,
     649,    -1,   432,   424,    -1,   188,   421,    -1,    68,   290,
      -1,    73,   290,    -1,   220,    -1,   260,    -1,    57,   260,
      -1,   426,   443,    79,   421,    -1,   426,    79,   421,    -1,
     434,   425,   442,   427,   427,    -1,   434,   425,   442,   427,
      -1,    43,   120,   659,    -1,   433,    -1,   439,    -1,   428,
      -1,   430,    -1,   446,    -1,   451,    -1,   447,    -1,   429,
      -1,   430,    -1,   432,   431,    -1,   434,   120,   435,    -1,
     434,     1,   435,    -1,   434,     3,    -1,    47,    -1,   263,
      -1,   436,    -1,   435,   109,   120,   436,    -1,   435,   109,
     436,    -1,   659,   149,   421,    -1,   659,    37,   129,   149,
     421,    -1,   659,   552,   149,   421,    -1,   659,   552,    37,
     129,   149,   421,    -1,   659,   437,   149,   421,    -1,   659,
      37,   129,   437,   149,   421,    -1,   659,   552,   437,   149,
     421,    -1,   659,   552,    37,   129,   437,   149,   421,    -1,
     659,   438,   149,   421,    -1,   659,   552,   438,   149,   421,
      -1,   659,   437,   438,   149,   421,    -1,   659,   552,   437,
     438,   149,   421,    -1,    98,   120,   659,    -1,   279,   120,
     659,    -1,    52,   440,    -1,   441,    -1,   440,   109,   441,
      -1,   120,   659,   144,   421,    -1,   120,   659,   552,   144,
     421,    -1,   438,   144,   421,    -1,   120,   659,   552,   438,
     144,   421,    -1,   120,   659,   149,   421,    -1,   120,   659,
     552,   149,   421,    -1,   444,    -1,   120,   659,    -1,   120,
     659,   444,    -1,   437,    -1,   437,   445,    -1,   445,    -1,
      60,   120,   659,    55,   120,   659,    -1,    55,   120,   659,
      -1,    60,   120,   659,    -1,   214,   421,    -1,   173,   172,
     448,    -1,   449,    -1,   448,   109,   449,    -1,   120,   659,
      -1,   120,   659,   144,   421,    -1,   120,   659,   552,   144,
     421,    -1,   120,   659,   552,   144,   421,   450,    -1,   120,
     659,   144,   421,   450,    -1,   120,   659,   450,    -1,   108,
     657,    -1,   170,   172,   452,    -1,    71,   170,   172,   452,
      -1,   453,    -1,   452,   109,   453,    -1,   421,    -1,   421,
     454,    -1,   455,    -1,   456,    -1,   457,    -1,   455,   456,
      -1,   455,   457,    -1,   456,   457,    -1,   455,   456,   457,
      -1,    97,    -1,   118,    -1,   129,   130,    -1,   129,   131,
      -1,   108,   657,    -1,    69,   120,   459,   190,   421,    -1,
     137,   120,   459,   190,   421,    -1,   460,    -1,   459,   109,
     120,   460,    -1,   659,   149,   421,    -1,   659,   552,   149,
     421,    -1,    74,   158,   420,   189,   462,   115,   188,   421,
      -1,   463,    -1,   462,   463,    -1,   464,   188,   421,    -1,
     102,   421,    -1,   464,   102,   421,    -1,    74,   158,   420,
     189,   466,   115,   188,   401,    -1,   467,    -1,   466,   467,
      -1,   464,   188,   401,    -1,    75,   158,   420,   189,   470,
     115,   188,   421,    -1,    75,   158,   420,   189,   470,   115,
     120,   659,   188,   421,    -1,    75,   158,   420,   189,   472,
     115,   188,   401,    -1,    75,   158,   420,   189,   470,   115,
     120,   659,   188,   401,    -1,   471,    -1,   470,   471,    -1,
     102,   474,   188,   421,    -1,   102,   120,   659,    96,   474,
     188,   421,    -1,   473,    -1,   472,   473,    -1,   102,   474,
     188,   401,    -1,   102,   120,   659,    96,   474,   188,   401,
      -1,   553,    -1,   474,   212,   553,    -1,    49,   158,   420,
     189,   200,   421,   128,   421,    -1,   477,    -1,   476,   169,
     477,    -1,   478,    -1,   477,    94,   478,    -1,   480,    -1,
     480,   497,   480,    -1,   480,   498,   480,    -1,   480,   134,
     480,    -1,   480,   164,   480,    -1,    -1,   480,   159,   479,
     480,    -1,   480,   157,   480,    -1,   480,   145,   480,    -1,
     480,   143,   480,    -1,   481,    -1,   481,   255,    72,   590,
     482,    -1,   483,    -1,   483,   101,   481,    -1,    -1,   642,
      -1,   484,    -1,   484,   201,   484,    -1,   485,    -1,   484,
     178,   485,    -1,   484,   160,   485,    -1,   486,    -1,   485,
     196,   486,    -1,   485,   119,   486,    -1,   485,   148,   486,
      -1,   485,   161,   486,    -1,   487,    -1,   486,   203,   487,
      -1,   486,   212,   487,    -1,   488,    -1,   487,   152,   488,
      -1,   487,   138,   488,    -1,   489,    -1,   489,    51,   237,
     553,    -1,   490,    -1,   490,   202,    96,   553,    -1,   491,
      -1,   491,   103,    96,   492,    -1,   493,    -1,   493,   104,
      96,   492,    -1,   558,    -1,   558,   146,    -1,   495,    -1,
     494,   495,    -1,   178,    -1,   160,    -1,   494,   178,    -1,
     494,   160,    -1,   499,    -1,   496,    -1,   500,    -1,   503,
      -1,   496,   195,   503,    -1,   205,    -1,   210,    -1,   209,
      -1,   208,    -1,   207,    -1,   206,    -1,   153,    -1,   181,
      -1,   142,    -1,    77,   155,   399,   186,    -1,    77,   228,
     155,   399,   186,    -1,    77,   227,   155,   399,   186,    -1,
      77,    78,   570,   155,   399,   186,    -1,   501,   155,   186,
      -1,   501,   155,   420,   186,    -1,   502,    -1,   501,   502,
      -1,   179,   659,    17,    -1,   179,    18,    -1,   179,    19,
      -1,   504,    -1,   505,    -1,   508,    -1,   659,    -1,   507,
      -1,   196,    -1,    11,    -1,    12,    -1,    20,    -1,   511,
      -1,   508,   509,    -1,   508,   158,   189,    -1,   508,   158,
     521,   189,    -1,   508,   121,   658,    -1,   508,   121,   516,
      -1,   508,   121,   515,    -1,   508,   121,   572,    -1,   508,
     121,   196,    -1,   510,    -1,   509,   510,    -1,   156,   420,
     187,    -1,   512,    -1,   515,    -1,   516,    -1,   517,    -1,
     520,    -1,   525,    -1,   518,    -1,   519,    -1,   522,    -1,
     403,    -1,   646,    -1,   643,    -1,   644,    -1,   645,    -1,
     513,    -1,   572,    -1,   514,    -1,   221,    -1,   112,    -1,
     151,    -1,   126,    -1,   222,    -1,   223,    -1,   120,   659,
      -1,   158,   189,    -1,   158,   420,   189,    -1,   121,    -1,
     171,   155,   420,   186,    -1,   204,   155,   420,   186,    -1,
     660,   158,   189,    -1,   660,   158,   521,   189,    -1,   146,
      -1,   521,   109,   146,    -1,   421,    -1,   521,   109,   421,
      -1,   523,    -1,   524,    -1,   659,   147,   151,    -1,    48,
     387,   404,    -1,   526,    -1,   544,    -1,   527,    -1,   541,
      -1,   542,    -1,   159,   659,   531,   132,    -1,   159,   659,
     531,   199,   197,   659,   531,   199,    -1,   159,   659,   529,
     531,   132,    -1,   159,   659,   529,   531,   199,   197,   659,
     531,   199,    -1,   159,   659,   531,   199,   528,   197,   659,
     531,   199,    -1,   159,   659,   529,   531,   199,   528,   197,
     659,   531,   199,    -1,   539,    -1,   528,   539,    -1,   530,
      -1,   529,   530,    -1,    36,   659,   531,   134,   531,   532,
      -1,    -1,    36,    -1,   185,   533,   185,    -1,    95,   535,
      95,    -1,    -1,   534,    -1,   136,    -1,   537,    -1,   534,
     136,    -1,   534,   537,    -1,    -1,   536,    -1,   135,    -1,
     538,    -1,   536,   135,    -1,   536,   538,    -1,    29,    -1,
     540,    -1,     5,    -1,   540,    -1,   526,    -1,    10,    -1,
     543,    -1,   540,    -1,     9,    -1,   125,    -1,   127,    -1,
     155,   399,   186,    -1,   215,    31,   216,    -1,   215,   216,
      -1,   176,   658,   177,    -1,   176,   658,     8,    -1,   105,
       7,    -1,   545,    -1,   546,    -1,   547,    -1,   548,    -1,
     549,    -1,   550,    -1,   551,    -1,    44,   155,   399,   186,
      -1,    21,   398,   186,    -1,    46,   155,   420,   186,   155,
     398,   186,    -1,    22,   398,   186,    -1,    99,   155,   420,
     186,   155,   398,   186,    -1,    72,   155,   399,   186,    -1,
      40,   155,   399,   186,    -1,    23,   398,   186,    -1,    61,
     155,   420,   186,   155,   398,   186,    -1,    24,   399,   186,
      -1,   162,   155,   420,   186,   155,   399,   186,    -1,    96,
     553,    -1,   555,    -1,   555,   554,    -1,   213,   158,   189,
      -1,   146,    -1,   196,    -1,   178,    -1,   557,    -1,   559,
      -1,   154,   158,   189,    -1,   326,   158,   189,    -1,   573,
      -1,   576,    -1,   653,    -1,   553,    -1,   556,   109,   553,
      -1,   659,    -1,   659,    -1,   561,    -1,   568,    -1,   566,
      -1,   569,    -1,   567,    -1,   565,    -1,   564,    -1,   563,
      -1,   562,    -1,   560,    -1,   231,   158,   189,    -1,    45,
     158,   189,    -1,    45,   158,   568,   189,    -1,    45,   158,
     569,   189,    -1,    54,   158,   189,    -1,    72,   158,   189,
      -1,    40,   158,   189,    -1,    61,   158,   189,    -1,    61,
     158,   658,   189,    -1,    61,   158,    30,   189,    -1,    99,
     158,   189,    -1,    99,   158,   659,   189,    -1,    99,   158,
     659,   109,   570,   189,    -1,    99,   158,   196,   189,    -1,
      99,   158,   196,   109,   570,   189,    -1,    63,   158,   659,
     189,    -1,    46,   158,   189,    -1,    46,   158,   659,   189,
      -1,    46,   158,   659,   109,   570,   189,    -1,    46,   158,
     659,   109,   571,   189,    -1,    46,   158,   196,   189,    -1,
      46,   158,   196,   109,   570,   189,    -1,    46,   158,   196,
     109,   571,   189,    -1,    64,   158,   659,   189,    -1,   659,
      -1,   659,   146,    -1,    30,    -1,   574,    -1,   575,    -1,
      48,   158,   196,   189,    -1,    48,   158,   189,    96,   553,
      -1,    48,   158,   556,   189,    96,   553,    -1,   158,   555,
     189,    -1,    34,   226,   227,    -1,    34,   226,   228,    -1,
      34,   226,   229,    -1,   232,   231,   421,   239,   421,    -1,
     232,   231,   421,    96,   238,   239,   421,    -1,   232,   231,
     421,    96,   240,   239,   421,    -1,   232,   231,   421,   224,
     421,    -1,   232,   231,   421,   225,   421,    -1,   232,   233,
     421,   239,   421,    -1,   232,   233,   421,    96,   238,   239,
     421,    -1,   232,   233,   421,    96,   240,   239,   421,    -1,
     232,   233,   421,   224,   421,    -1,   232,   233,   421,   225,
     421,    -1,   230,   231,   421,    -1,   230,   233,   421,    -1,
     235,   231,   421,   243,   421,    -1,   235,   236,   237,   231,
     421,   243,   421,    -1,   234,   231,   421,    96,   421,    -1,
     242,   120,   583,   241,   421,   188,   421,    -1,   584,    -1,
     583,   109,   120,   584,    -1,   659,   144,   421,    -1,   250,
     155,   420,   186,   586,    -1,   587,    -1,   586,   587,    -1,
     251,   589,   588,    -1,   155,   420,   186,    -1,   506,    -1,
     589,   212,   506,    -1,   593,   591,    -1,    -1,   592,    -1,
     611,    -1,   592,   611,    -1,   594,    -1,   593,   268,   594,
      -1,   595,    -1,   594,   264,   595,    -1,   596,    -1,   595,
     266,   149,   596,    -1,   597,    -1,   265,   597,    -1,   601,
     598,   599,    -1,    -1,   616,    -1,    -1,   600,    -1,   288,
     155,   420,   186,    -1,   605,   602,    -1,   158,   590,   189,
      -1,   603,    -1,    -1,   638,    -1,   501,   155,   604,   186,
      -1,    -1,   590,    -1,   606,   607,    -1,   512,    -1,   155,
     420,   186,    -1,    -1,   608,    -1,   254,   609,    -1,   253,
     610,    -1,   276,    -1,    -1,    80,    -1,    -1,   292,    -1,
     612,    -1,   613,    -1,   614,    -1,   640,    -1,   637,    -1,
     171,    -1,   290,   484,   615,    -1,   259,   639,   615,    -1,
     292,    -1,   282,    -1,   275,    -1,   252,   617,    -1,   616,
     252,   617,    -1,   618,    -1,   619,    -1,   620,    -1,   635,
      -1,   621,    -1,   629,    -1,   622,    -1,   636,    -1,   102,
     280,    -1,   102,   269,    -1,   272,    -1,   287,    -1,   257,
     280,    -1,   257,   269,    -1,    58,   659,    30,    -1,   283,
      -1,    56,   283,    -1,   285,   623,    -1,   285,   158,   623,
     624,   189,    -1,    56,   285,    -1,   626,    -1,   115,    -1,
      -1,   109,   625,    -1,   626,    -1,   625,   109,   626,    -1,
      98,    30,   627,   628,    -1,    -1,   277,    30,    -1,    -1,
     639,   271,    -1,   284,   292,   630,   632,    -1,   284,   292,
     115,   632,    -1,    56,   284,   292,    -1,    98,    30,    -1,
     158,   631,   189,    -1,    30,    -1,   631,   109,    30,    -1,
      -1,   633,    -1,   634,    -1,   633,   634,    -1,   203,   630,
      -1,   138,   630,    -1,   270,    30,    -1,   289,    -1,    56,
     289,    -1,    98,   220,    -1,    98,   260,    -1,   261,   256,
      -1,   273,   639,   286,    -1,   262,   484,    -1,    98,   131,
     484,    -1,    98,    53,   484,    -1,   263,   484,   201,   484,
      -1,   278,   641,    -1,   258,   641,    -1,   281,    -1,   274,
      -1,   291,   256,   486,    -1,   156,   187,    -1,   156,   420,
     187,    -1,   316,   317,    -1,   316,   420,   317,    -1,   318,
     319,    -1,   318,   420,   319,    -1,   155,   186,    -1,   155,
     647,   186,    -1,   658,   123,   421,    -1,   421,   123,   421,
      -1,   647,   109,   421,   123,   421,    -1,   647,   109,   658,
     123,   421,    -1,   232,   320,   421,   239,   421,    -1,   232,
     320,   647,   239,   421,    -1,   232,   320,   421,   239,   421,
      98,   322,   421,    -1,   321,   320,   421,   239,   421,    -1,
     230,   320,   508,    -1,   234,   320,   508,    96,   421,    -1,
     235,   320,   236,   237,   508,   243,   421,    -1,   654,    -1,
     655,    -1,   656,    -1,   325,    -1,   323,   158,   189,    -1,
     324,   158,   189,    -1,    30,    -1,    16,    -1,   659,    -1,
     660,    -1,    99,    -1,    40,    -1,    45,    -1,    54,    -1,
      46,    -1,   154,    -1,    49,    -1,   231,    -1,    61,    -1,
      63,    -1,    64,    -1,    72,    -1,    75,    -1,    74,    -1,
     213,    -1,   249,    -1,   661,    -1,    25,    -1,   217,    -1,
     129,    -1,    39,    -1,   267,    -1,    38,    -1,   228,    -1,
     227,    -1,   148,    -1,    44,    -1,   265,    -1,   266,    -1,
     280,    -1,   269,    -1,   257,    -1,   291,    -1,   283,    -1,
     285,    -1,   284,    -1,   289,    -1,   261,    -1,   256,    -1,
      80,    -1,   220,    -1,   260,    -1,    53,    -1,   229,    -1,
     242,    -1,   308,    -1,   236,    -1,   205,    -1,   210,    -1,
     209,    -1,   208,    -1,   207,    -1,   206,    -1,    98,    -1,
     113,    -1,   114,    -1,   188,    -1,    47,    -1,    37,    -1,
      68,    -1,    73,    -1,    60,    -1,    55,    -1,    57,    -1,
      79,    -1,    43,    -1,   149,    -1,    52,    -1,   214,    -1,
     172,    -1,   173,    -1,   170,    -1,    71,    -1,    97,    -1,
     118,    -1,   130,    -1,   131,    -1,   108,    -1,    69,    -1,
     137,    -1,   190,    -1,   102,    -1,    96,    -1,   200,    -1,
     128,    -1,   169,    -1,    94,    -1,    51,    -1,   237,    -1,
     103,    -1,   201,    -1,   119,    -1,   161,    -1,   203,    -1,
     152,    -1,   138,    -1,    77,    -1,    78,    -1,   104,    -1,
     202,    -1,   153,    -1,   184,    -1,   198,    -1,   162,    -1,
     139,    -1,   133,    -1,   168,    -1,   150,    -1,   167,    -1,
      34,    -1,    41,    -1,    59,    -1,   115,    -1,    42,    -1,
      58,    -1,   219,    -1,    50,    -1,    62,    -1,    35,    -1,
      48,    -1,   279,    -1,   255,    -1,   288,    -1,   290,    -1,
     259,    -1,   273,    -1,   286,    -1,   278,    -1,   258,    -1,
     272,    -1,   287,    -1,   277,    -1,   271,    -1,   270,    -1,
     254,    -1,   253,    -1,   262,    -1,   263,    -1,   292,    -1,
     282,    -1,   281,    -1,   276,    -1,   274,    -1,   275,    -1,
     235,    -1,   241,    -1,   238,    -1,   232,    -1,   225,    -1,
     224,    -1,   226,    -1,   243,    -1,   233,    -1,   234,    -1,
     240,    -1,   230,    -1,   239,    -1,    67,    -1,    65,    -1,
      76,    -1,   171,    -1,   204,    -1,   248,    -1,   246,    -1,
     247,    -1,   244,    -1,   245,    -1,   250,    -1,   251,    -1,
     252,    -1,    66,    -1,   301,    -1,   299,    -1,   300,    -1,
     305,    -1,   306,    -1,   307,    -1,   302,    -1,   303,    -1,
     304,    -1,    81,    -1,    82,    -1,    83,    -1,    84,    -1,
      85,    -1,    86,    -1,    87,    -1,    88,    -1,    89,    -1,
      90,    -1,    91,    -1,   293,    -1,   294,    -1,   295,    -1,
     296,    -1,   297,    -1,   298,    -1,   309,    -1,   310,    -1,
     311,    -1,   312,    -1,   313,    -1,   314,    -1,   315,    -1,
      92,    -1,   107,    -1,   116,    -1,   174,    -1,   182,    -1,
     191,    -1,   140,    -1,    93,    -1,   117,    -1,   141,    -1,
     183,    -1,   320,    -1,   321,    -1,   322,    -1,   324,    -1,
     323,    -1,   326,    -1,    26,    -1
=======
     412,    -1,   413,    -1,   415,    -1,   468,    -1,   464,    -1,
     416,    -1,   155,   400,   186,    -1,   155,   186,    -1,   155,
     398,   186,    -1,   155,   398,   186,    -1,   406,   192,    -1,
     406,   109,   407,    -1,   114,   407,    -1,   380,   114,   407,
      -1,   120,   659,    -1,   120,   659,   552,    -1,   120,   659,
     144,   420,    -1,   120,   659,   552,   144,   420,    -1,   120,
     659,   144,   420,   192,    -1,   421,   192,    -1,   246,   248,
     420,   192,    -1,   249,   158,   419,   189,   401,    -1,   244,
     247,   192,    -1,   245,   247,   192,    -1,   431,   414,    -1,
     188,   401,    -1,    49,   158,   419,   189,   200,   401,   128,
     401,    -1,   250,   402,   417,    -1,   418,    -1,   417,   418,
      -1,   251,   589,   402,    -1,   420,    -1,   419,   109,   420,
      -1,   419,   343,   420,    -1,   422,    -1,   460,    -1,   467,
      -1,   474,    -1,   585,    -1,   421,    -1,   475,    -1,   457,
      -1,   578,    -1,   579,    -1,   581,    -1,   580,    -1,   582,
      -1,   650,    -1,   648,    -1,   651,    -1,   652,    -1,   649,
      -1,   431,   423,    -1,   188,   420,    -1,    68,   290,    -1,
      73,   290,    -1,   220,    -1,   260,    -1,    57,   260,    -1,
     425,   442,    79,   420,    -1,   425,    79,   420,    -1,   433,
     424,   441,   426,   426,    -1,   433,   424,   441,   426,    -1,
      43,   120,   659,    -1,   432,    -1,   438,    -1,   427,    -1,
     429,    -1,   445,    -1,   450,    -1,   446,    -1,   428,    -1,
     429,    -1,   431,   430,    -1,   433,   120,   434,    -1,   433,
       1,   434,    -1,   433,     3,    -1,    47,    -1,   263,    -1,
     435,    -1,   434,   109,   120,   435,    -1,   434,   109,   435,
      -1,   659,   149,   420,    -1,   659,    37,   129,   149,   420,
      -1,   659,   552,   149,   420,    -1,   659,   552,    37,   129,
     149,   420,    -1,   659,   436,   149,   420,    -1,   659,    37,
     129,   436,   149,   420,    -1,   659,   552,   436,   149,   420,
      -1,   659,   552,    37,   129,   436,   149,   420,    -1,   659,
     437,   149,   420,    -1,   659,   552,   437,   149,   420,    -1,
     659,   436,   437,   149,   420,    -1,   659,   552,   436,   437,
     149,   420,    -1,    98,   120,   659,    -1,   279,   120,   659,
      -1,    52,   439,    -1,   440,    -1,   439,   109,   440,    -1,
     120,   659,   144,   420,    -1,   120,   659,   552,   144,   420,
      -1,   437,   144,   420,    -1,   120,   659,   552,   437,   144,
     420,    -1,   120,   659,   149,   420,    -1,   120,   659,   552,
     149,   420,    -1,   443,    -1,   120,   659,    -1,   120,   659,
     443,    -1,   436,    -1,   436,   444,    -1,   444,    -1,    60,
     120,   659,    55,   120,   659,    -1,    55,   120,   659,    -1,
      60,   120,   659,    -1,   214,   420,    -1,   173,   172,   447,
      -1,   448,    -1,   447,   109,   448,    -1,   120,   659,    -1,
     120,   659,   144,   420,    -1,   120,   659,   552,   144,   420,
      -1,   120,   659,   552,   144,   420,   449,    -1,   120,   659,
     144,   420,   449,    -1,   120,   659,   449,    -1,   108,   657,
      -1,   170,   172,   451,    -1,    71,   170,   172,   451,    -1,
     452,    -1,   451,   109,   452,    -1,   420,    -1,   420,   453,
      -1,   454,    -1,   455,    -1,   456,    -1,   454,   455,    -1,
     454,   456,    -1,   455,   456,    -1,   454,   455,   456,    -1,
      97,    -1,   118,    -1,   129,   130,    -1,   129,   131,    -1,
     108,   657,    -1,    69,   120,   458,   190,   420,    -1,   137,
     120,   458,   190,   420,    -1,   459,    -1,   458,   109,   120,
     459,    -1,   659,   149,   420,    -1,   659,   552,   149,   420,
      -1,    74,   158,   419,   189,   461,   115,   188,   420,    -1,
     462,    -1,   461,   462,    -1,   463,   188,   420,    -1,   102,
     420,    -1,   463,   102,   420,    -1,    74,   158,   419,   189,
     465,   115,   188,   401,    -1,   466,    -1,   465,   466,    -1,
     463,   188,   401,    -1,    75,   158,   419,   189,   469,   115,
     188,   420,    -1,    75,   158,   419,   189,   469,   115,   120,
     659,   188,   420,    -1,    75,   158,   419,   189,   471,   115,
     188,   401,    -1,    75,   158,   419,   189,   469,   115,   120,
     659,   188,   401,    -1,   470,    -1,   469,   470,    -1,   102,
     473,   188,   420,    -1,   102,   120,   659,    96,   473,   188,
     420,    -1,   472,    -1,   471,   472,    -1,   102,   473,   188,
     401,    -1,   102,   120,   659,    96,   473,   188,   401,    -1,
     553,    -1,   473,   212,   553,    -1,    49,   158,   419,   189,
     200,   420,   128,   420,    -1,   476,    -1,   475,   169,   476,
      -1,   477,    -1,   476,    94,   477,    -1,   478,    -1,   266,
     477,    -1,   480,    -1,   480,   497,   480,    -1,   480,   498,
     480,    -1,   480,   134,   480,    -1,   480,   164,   480,    -1,
      -1,   480,   159,   479,   480,    -1,   480,   157,   480,    -1,
     480,   145,   480,    -1,   480,   143,   480,    -1,   481,    -1,
     481,   255,    72,   590,   482,    -1,   483,    -1,   483,   101,
     481,    -1,    -1,   642,    -1,   484,    -1,   484,   201,   484,
      -1,   485,    -1,   484,   178,   485,    -1,   484,   160,   485,
      -1,   486,    -1,   485,   196,   486,    -1,   485,   119,   486,
      -1,   485,   148,   486,    -1,   485,   161,   486,    -1,   487,
      -1,   486,   203,   487,    -1,   486,   212,   487,    -1,   488,
      -1,   487,   152,   488,    -1,   487,   138,   488,    -1,   489,
      -1,   489,    51,   237,   553,    -1,   490,    -1,   490,   202,
      96,   553,    -1,   491,    -1,   491,   103,    96,   492,    -1,
     493,    -1,   493,   104,    96,   492,    -1,   558,    -1,   558,
     146,    -1,   495,    -1,   494,   495,    -1,   178,    -1,   160,
      -1,   494,   178,    -1,   494,   160,    -1,   499,    -1,   496,
      -1,   500,    -1,   503,    -1,   496,   195,   503,    -1,   205,
      -1,   210,    -1,   209,    -1,   208,    -1,   207,    -1,   206,
      -1,   153,    -1,   181,    -1,   142,    -1,    77,   155,   399,
     186,    -1,    77,   228,   155,   399,   186,    -1,    77,   227,
     155,   399,   186,    -1,    77,    78,   570,   155,   399,   186,
      -1,   501,   155,   186,    -1,   501,   155,   419,   186,    -1,
     502,    -1,   501,   502,    -1,   179,   659,    17,    -1,   179,
      18,    -1,   179,    19,    -1,   504,    -1,   505,    -1,   508,
      -1,   659,    -1,   507,    -1,   196,    -1,    11,    -1,    12,
      -1,    20,    -1,   511,    -1,   508,   509,    -1,   508,   158,
     189,    -1,   508,   158,   521,   189,    -1,   508,   121,   658,
      -1,   508,   121,   516,    -1,   508,   121,   515,    -1,   508,
     121,   572,    -1,   508,   121,   196,    -1,   510,    -1,   509,
     510,    -1,   156,   419,   187,    -1,   512,    -1,   515,    -1,
     516,    -1,   517,    -1,   520,    -1,   525,    -1,   518,    -1,
     519,    -1,   522,    -1,   403,    -1,   646,    -1,   643,    -1,
     644,    -1,   645,    -1,   513,    -1,   572,    -1,   514,    -1,
     221,    -1,   112,    -1,   151,    -1,   126,    -1,   222,    -1,
     223,    -1,   120,   659,    -1,   158,   189,    -1,   158,   419,
     189,    -1,   121,    -1,   171,   155,   419,   186,    -1,   204,
     155,   419,   186,    -1,   660,   158,   189,    -1,   660,   158,
     521,   189,    -1,   146,    -1,   521,   109,   146,    -1,   420,
      -1,   521,   109,   420,    -1,   523,    -1,   524,    -1,   659,
     147,   151,    -1,    48,   387,   404,    -1,   526,    -1,   544,
      -1,   527,    -1,   541,    -1,   542,    -1,   159,   659,   531,
     132,    -1,   159,   659,   531,   199,   197,   659,   531,   199,
      -1,   159,   659,   529,   531,   132,    -1,   159,   659,   529,
     531,   199,   197,   659,   531,   199,    -1,   159,   659,   531,
     199,   528,   197,   659,   531,   199,    -1,   159,   659,   529,
     531,   199,   528,   197,   659,   531,   199,    -1,   539,    -1,
     528,   539,    -1,   530,    -1,   529,   530,    -1,    36,   659,
     531,   134,   531,   532,    -1,    -1,    36,    -1,   185,   533,
     185,    -1,    95,   535,    95,    -1,    -1,   534,    -1,   136,
      -1,   537,    -1,   534,   136,    -1,   534,   537,    -1,    -1,
     536,    -1,   135,    -1,   538,    -1,   536,   135,    -1,   536,
     538,    -1,    29,    -1,   540,    -1,     5,    -1,   540,    -1,
     526,    -1,    10,    -1,   543,    -1,   540,    -1,     9,    -1,
     125,    -1,   127,    -1,   155,   399,   186,    -1,   215,    31,
     216,    -1,   215,   216,    -1,   176,   658,   177,    -1,   176,
     658,     8,    -1,   105,     7,    -1,   545,    -1,   546,    -1,
     547,    -1,   548,    -1,   549,    -1,   550,    -1,   551,    -1,
      44,   155,   399,   186,    -1,    21,   398,   186,    -1,    46,
     155,   419,   186,   155,   398,   186,    -1,    22,   398,   186,
      -1,    99,   155,   419,   186,   155,   398,   186,    -1,    72,
     155,   399,   186,    -1,    40,   155,   399,   186,    -1,    23,
     398,   186,    -1,    61,   155,   419,   186,   155,   398,   186,
      -1,    24,   399,   186,    -1,   162,   155,   419,   186,   155,
     399,   186,    -1,    96,   553,    -1,   555,    -1,   555,   554,
      -1,   213,   158,   189,    -1,   158,   189,    -1,   146,    -1,
     196,    -1,   178,    -1,   557,    -1,   559,    -1,   154,   158,
     189,    -1,   154,    -1,   326,   158,   189,    -1,   326,    -1,
     573,    -1,   576,    -1,   653,    -1,   553,    -1,   556,   109,
     553,    -1,   659,    -1,   659,    -1,   561,    -1,   568,    -1,
     566,    -1,   569,    -1,   567,    -1,   565,    -1,   564,    -1,
     563,    -1,   562,    -1,   560,    -1,   231,   158,   189,    -1,
      45,   158,   189,    -1,    45,   158,   568,   189,    -1,    45,
     158,   569,   189,    -1,    54,   158,   189,    -1,    72,   158,
     189,    -1,    40,   158,   189,    -1,    61,   158,   189,    -1,
      61,   158,   658,   189,    -1,    61,   158,    30,   189,    -1,
      99,   158,   189,    -1,    99,   158,   659,   189,    -1,    99,
     158,   659,   109,   570,   189,    -1,    99,   158,   196,   189,
      -1,    99,   158,   196,   109,   570,   189,    -1,    63,   158,
     659,   189,    -1,    46,   158,   189,    -1,    46,   158,   659,
     189,    -1,    46,   158,   659,   109,   570,   189,    -1,    46,
     158,   659,   109,   571,   189,    -1,    46,   158,   196,   189,
      -1,    46,   158,   196,   109,   570,   189,    -1,    46,   158,
     196,   109,   571,   189,    -1,    64,   158,   659,   189,    -1,
     659,    -1,   659,   146,    -1,    30,    -1,   574,    -1,   575,
      -1,    48,   158,   196,   189,    -1,    48,   158,   189,    96,
     553,    -1,    48,   158,   556,   189,    96,   553,    -1,   158,
     555,   189,    -1,    34,   226,   227,    -1,    34,   226,   228,
      -1,    34,   226,   229,    -1,   232,   231,   420,   239,   420,
      -1,   232,   231,   420,    96,   238,   239,   420,    -1,   232,
     231,   420,    96,   240,   239,   420,    -1,   232,   231,   420,
     224,   420,    -1,   232,   231,   420,   225,   420,    -1,   232,
     233,   420,   239,   420,    -1,   232,   233,   420,    96,   238,
     239,   420,    -1,   232,   233,   420,    96,   240,   239,   420,
      -1,   232,   233,   420,   224,   420,    -1,   232,   233,   420,
     225,   420,    -1,   230,   231,   420,    -1,   230,   233,   420,
      -1,   235,   231,   420,   243,   420,    -1,   235,   236,   237,
     231,   420,   243,   420,    -1,   234,   231,   420,    96,   420,
      -1,   242,   120,   583,   241,   420,   188,   420,    -1,   584,
      -1,   583,   109,   120,   584,    -1,   659,   144,   420,    -1,
     250,   155,   419,   186,   586,    -1,   587,    -1,   586,   587,
      -1,   251,   589,   588,    -1,   155,   419,   186,    -1,   506,
      -1,   589,   212,   506,    -1,   593,   591,    -1,    -1,   592,
      -1,   611,    -1,   592,   611,    -1,   594,    -1,   593,   268,
     594,    -1,   595,    -1,   594,   264,   595,    -1,   596,    -1,
     595,   266,   149,   596,    -1,   597,    -1,   265,   597,    -1,
     601,   598,   599,    -1,    -1,   616,    -1,    -1,   600,    -1,
     288,   155,   419,   186,    -1,   605,   602,    -1,   158,   590,
     189,    -1,   603,    -1,    -1,   638,    -1,   501,   155,   604,
     186,    -1,    -1,   590,    -1,   606,   607,    -1,   512,    -1,
     155,   419,   186,    -1,    -1,   608,    -1,   254,   609,    -1,
     253,   610,    -1,   276,    -1,    -1,    80,    -1,    -1,   292,
      -1,   612,    -1,   613,    -1,   614,    -1,   640,    -1,   637,
      -1,   171,    -1,   290,   484,   615,    -1,   259,   639,   615,
      -1,   292,    -1,   282,    -1,   275,    -1,   252,   617,    -1,
     616,   252,   617,    -1,   618,    -1,   619,    -1,   620,    -1,
     635,    -1,   621,    -1,   629,    -1,   622,    -1,   636,    -1,
     102,   280,    -1,   102,   269,    -1,   272,    -1,   287,    -1,
     257,   280,    -1,   257,   269,    -1,    58,   659,    30,    -1,
     283,    -1,    56,   283,    -1,   285,   623,    -1,   285,   158,
     623,   624,   189,    -1,    56,   285,    -1,   626,    -1,   115,
      -1,    -1,   109,   625,    -1,   626,    -1,   625,   109,   626,
      -1,    98,    30,   627,   628,    -1,    -1,   277,    30,    -1,
      -1,   639,   271,    -1,   284,   292,   630,   632,    -1,   284,
     292,   115,   632,    -1,    56,   284,   292,    -1,    98,    30,
      -1,   158,   631,   189,    -1,    30,    -1,   631,   109,    30,
      -1,    -1,   633,    -1,   634,    -1,   633,   634,    -1,   203,
     630,    -1,   138,   630,    -1,   270,    30,    -1,   289,    -1,
      56,   289,    -1,    98,   220,    -1,    98,   260,    -1,   261,
     256,    -1,   273,   639,   286,    -1,   262,   484,    -1,    98,
     131,   484,    -1,    98,    53,   484,    -1,   263,   484,   201,
     484,    -1,   278,   641,    -1,   258,   641,    -1,   281,    -1,
     274,    -1,   291,   256,   486,    -1,   156,   187,    -1,   156,
     419,   187,    -1,   316,   317,    -1,   316,   419,   317,    -1,
     318,   319,    -1,   318,   419,   319,    -1,   155,   647,   186,
      -1,   658,   123,   420,    -1,   420,   123,   420,    -1,   647,
     109,   420,   123,   420,    -1,   647,   109,   658,   123,   420,
      -1,   232,   320,   420,   239,   420,    -1,   232,   320,   647,
     239,   420,    -1,   232,   320,   420,   239,   420,    98,   322,
     420,    -1,   232,   420,   239,   420,    -1,   232,   647,   239,
     420,    -1,   232,   420,   239,   420,    98,   322,   420,    -1,
     321,   320,   420,   239,   420,    -1,   321,   420,   239,   420,
      -1,   230,   320,   508,    -1,   230,   508,    -1,   234,   320,
     508,    96,   420,    -1,   234,   508,    96,   420,    -1,   235,
     320,   236,   237,   508,   243,   420,    -1,   235,   236,   237,
     508,   243,   420,    -1,   654,    -1,   655,    -1,   656,    -1,
     325,   158,   189,    -1,   325,    -1,   323,   158,   189,    -1,
     323,    -1,   324,   158,   189,    -1,   324,    -1,    30,    -1,
      16,    -1,   659,    -1,   660,    -1,    99,    -1,    40,    -1,
      45,    -1,    54,    -1,    46,    -1,    49,    -1,   231,    -1,
      61,    -1,    63,    -1,    64,    -1,    72,    -1,    75,    -1,
      74,    -1,   213,    -1,   249,    -1,   661,    -1,    25,    -1,
     217,    -1,   129,    -1,    39,    -1,   267,    -1,    38,    -1,
     228,    -1,   227,    -1,   148,    -1,    44,    -1,   265,    -1,
     266,    -1,   280,    -1,   269,    -1,   257,    -1,   291,    -1,
     283,    -1,   285,    -1,   284,    -1,   289,    -1,   261,    -1,
     256,    -1,    80,    -1,   220,    -1,   260,    -1,    53,    -1,
     229,    -1,   242,    -1,   308,    -1,   236,    -1,   205,    -1,
     210,    -1,   209,    -1,   208,    -1,   207,    -1,   206,    -1,
      98,    -1,   113,    -1,   114,    -1,   188,    -1,    47,    -1,
      37,    -1,    68,    -1,    73,    -1,    60,    -1,    55,    -1,
      57,    -1,    79,    -1,    43,    -1,   149,    -1,    52,    -1,
     214,    -1,   172,    -1,   173,    -1,   170,    -1,    71,    -1,
      97,    -1,   118,    -1,   130,    -1,   131,    -1,   108,    -1,
      69,    -1,   137,    -1,   190,    -1,   102,    -1,    96,    -1,
     200,    -1,   128,    -1,   169,    -1,    94,    -1,    51,    -1,
     237,    -1,   103,    -1,   201,    -1,   119,    -1,   161,    -1,
     203,    -1,   152,    -1,   138,    -1,    77,    -1,    78,    -1,
     104,    -1,   202,    -1,   153,    -1,   184,    -1,   198,    -1,
     162,    -1,   139,    -1,   133,    -1,   168,    -1,   150,    -1,
     167,    -1,    34,    -1,    41,    -1,    59,    -1,   115,    -1,
      42,    -1,    58,    -1,   219,    -1,    50,    -1,    62,    -1,
      35,    -1,    48,    -1,   279,    -1,   255,    -1,   288,    -1,
     290,    -1,   259,    -1,   273,    -1,   286,    -1,   278,    -1,
     258,    -1,   272,    -1,   287,    -1,   277,    -1,   271,    -1,
     270,    -1,   254,    -1,   253,    -1,   262,    -1,   263,    -1,
     292,    -1,   282,    -1,   281,    -1,   276,    -1,   274,    -1,
     275,    -1,   241,    -1,   238,    -1,   225,    -1,   224,    -1,
     226,    -1,   243,    -1,   233,    -1,   240,    -1,   239,    -1,
      67,    -1,    65,    -1,    76,    -1,   171,    -1,   204,    -1,
     248,    -1,   246,    -1,   247,    -1,   244,    -1,   245,    -1,
     250,    -1,   251,    -1,   252,    -1,    66,    -1,   301,    -1,
     299,    -1,   300,    -1,   305,    -1,   306,    -1,   307,    -1,
     302,    -1,   303,    -1,   304,    -1,    81,    -1,    82,    -1,
      83,    -1,    84,    -1,    85,    -1,    86,    -1,    87,    -1,
      88,    -1,    89,    -1,    90,    -1,    91,    -1,   293,    -1,
     294,    -1,   295,    -1,   296,    -1,   297,    -1,   298,    -1,
     309,    -1,   310,    -1,   311,    -1,   312,    -1,   313,    -1,
     314,    -1,   315,    -1,    92,    -1,   107,    -1,   116,    -1,
     174,    -1,   182,    -1,   191,    -1,   140,    -1,    93,    -1,
     117,    -1,   141,    -1,   183,    -1,   322,    -1,    26,    -1
>>>>>>> MERGE-SOURCE
  };

  /* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
     YYRHS.  */
  const unsigned short int
  jsoniq_parser::yyprhs_[] =
  {
         0,     0,     3,     5,     8,    11,    15,    17,    20,    23,
      25,    28,    30,    33,    38,    45,    50,    57,    61,    65,
      71,    73,    77,    81,    87,    93,    95,    99,   103,   109,
     116,   118,   122,   126,   128,   130,   132,   134,   136,   138,
     140,   142,   144,   146,   148,   150,   152,   156,   160,   165,
     169,   173,   177,   181,   185,   191,   197,   203,   209,   215,
     221,   223,   225,   229,   233,   238,   244,   251,   253,   257,
     261,   265,   269,   276,   282,   291,   297,   303,   309,   311,
     315,   319,   321,   323,   325,   327,   329,   331,   333,   335,
     340,   345,   347,   350,   354,   356,   358,   360,   362,   364,
     366,   368,   370,   372,   374,   379,   383,   388,   392,   394,
     396,   398,   401,   404,   409,   413,   419,   423,   428,   433,
     439,   441,   444,   446,   451,   453,   458,   460,   464,   467,
     471,   473,   475,   480,   485,   491,   497,   500,   504,   509,
     515,   517,   521,   524,   528,   532,   538,   543,   550,   552,
     555,   557,   560,   569,   579,   581,   585,   587,   590,   593,
     597,   609,   624,   638,   661,   663,   665,   667,   668,   670,
     672,   673,   675,   678,   680,   683,   688,   690,   692,   694,
<<<<<<< TREE
     696,   698,   700,   702,   704,   706,   708,   710,   712,   714,
     718,   722,   726,   729,   733,   736,   740,   743,   747,   752,
     758,   764,   767,   772,   778,   782,   786,   789,   792,   801,
     805,   807,   810,   814,   816,   818,   822,   826,   828,   830,
     832,   834,   836,   838,   840,   842,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   865,   868,   871,   874,
     876,   878,   881,   886,   890,   896,   901,   905,   907,   909,
     911,   913,   915,   917,   919,   921,   923,   926,   930,   934,
     937,   939,   941,   943,   948,   952,   956,   962,   967,   974,
     979,   986,   992,  1000,  1005,  1011,  1017,  1024,  1028,  1032,
    1035,  1037,  1041,  1046,  1052,  1056,  1063,  1068,  1074,  1076,
    1079,  1083,  1085,  1088,  1090,  1097,  1101,  1105,  1108,  1112,
    1114,  1118,  1121,  1126,  1132,  1139,  1145,  1149,  1152,  1156,
    1161,  1163,  1167,  1169,  1172,  1174,  1176,  1178,  1181,  1184,
    1187,  1191,  1193,  1195,  1198,  1201,  1204,  1210,  1216,  1218,
    1223,  1227,  1232,  1241,  1243,  1246,  1250,  1253,  1257,  1266,
    1268,  1271,  1275,  1284,  1295,  1304,  1315,  1317,  1320,  1325,
    1333,  1335,  1338,  1343,  1351,  1353,  1357,  1366,  1368,  1372,
    1374,  1378,  1380,  1384,  1388,  1392,  1396,  1397,  1402,  1406,
    1410,  1414,  1416,  1422,  1424,  1428,  1429,  1431,  1433,  1437,
    1439,  1443,  1447,  1449,  1453,  1457,  1461,  1465,  1467,  1471,
    1475,  1477,  1481,  1485,  1487,  1492,  1494,  1499,  1501,  1506,
    1508,  1513,  1515,  1518,  1520,  1523,  1525,  1527,  1530,  1533,
    1535,  1537,  1539,  1541,  1545,  1547,  1549,  1551,  1553,  1555,
    1557,  1559,  1561,  1563,  1568,  1574,  1580,  1587,  1591,  1596,
    1598,  1601,  1605,  1608,  1611,  1613,  1615,  1617,  1619,  1621,
    1623,  1625,  1627,  1629,  1631,  1634,  1638,  1643,  1647,  1651,
    1655,  1659,  1663,  1665,  1668,  1672,  1674,  1676,  1678,  1680,
    1682,  1684,  1686,  1688,  1690,  1692,  1694,  1696,  1698,  1700,
    1702,  1704,  1706,  1708,  1710,  1712,  1714,  1716,  1718,  1721,
    1724,  1728,  1730,  1735,  1740,  1744,  1749,  1751,  1755,  1757,
    1761,  1763,  1765,  1769,  1773,  1775,  1777,  1779,  1781,  1783,
    1788,  1797,  1803,  1813,  1823,  1834,  1836,  1839,  1841,  1844,
    1851,  1852,  1854,  1858,  1862,  1863,  1865,  1867,  1869,  1872,
    1875,  1876,  1878,  1880,  1882,  1885,  1888,  1890,  1892,  1894,
    1896,  1898,  1900,  1902,  1904,  1906,  1908,  1910,  1914,  1918,
    1921,  1925,  1929,  1932,  1934,  1936,  1938,  1940,  1942,  1944,
    1946,  1951,  1955,  1963,  1967,  1975,  1980,  1985,  1989,  1997,
    2001,  2009,  2012,  2014,  2017,  2021,  2023,  2025,  2027,  2029,
    2031,  2035,  2039,  2041,  2043,  2045,  2047,  2051,  2053,  2055,
    2057,  2059,  2061,  2063,  2065,  2067,  2069,  2071,  2073,  2075,
    2079,  2083,  2088,  2093,  2097,  2101,  2105,  2109,  2114,  2119,
    2123,  2128,  2135,  2140,  2147,  2152,  2156,  2161,  2168,  2175,
    2180,  2187,  2194,  2199,  2201,  2204,  2206,  2208,  2210,  2215,
    2221,  2228,  2232,  2236,  2240,  2244,  2250,  2258,  2266,  2272,
    2278,  2284,  2292,  2300,  2306,  2312,  2316,  2320,  2326,  2334,
    2340,  2348,  2350,  2355,  2359,  2365,  2367,  2370,  2374,  2378,
    2380,  2384,  2387,  2388,  2390,  2392,  2395,  2397,  2401,  2403,
    2407,  2409,  2414,  2416,  2419,  2423,  2424,  2426,  2427,  2429,
    2434,  2437,  2441,  2443,  2444,  2446,  2451,  2452,  2454,  2457,
    2459,  2463,  2464,  2466,  2469,  2472,  2474,  2475,  2477,  2478,
    2480,  2482,  2484,  2486,  2488,  2490,  2492,  2496,  2500,  2502,
    2504,  2506,  2509,  2513,  2515,  2517,  2519,  2521,  2523,  2525,
    2527,  2529,  2532,  2535,  2537,  2539,  2542,  2545,  2549,  2551,
    2554,  2557,  2563,  2566,  2568,  2570,  2571,  2574,  2576,  2580,
    2585,  2586,  2589,  2590,  2593,  2598,  2603,  2607,  2610,  2614,
    2616,  2620,  2621,  2623,  2625,  2628,  2631,  2634,  2637,  2639,
    2642,  2645,  2648,  2651,  2655,  2658,  2662,  2666,  2671,  2674,
    2677,  2679,  2681,  2685,  2688,  2692,  2695,  2699,  2702,  2706,
    2709,  2713,  2717,  2721,  2727,  2733,  2739,  2745,  2754,  2760,
    2764,  2770,  2778,  2780,  2782,  2784,  2786,  2790,  2794,  2796,
    2798,  2800,  2802,  2804,  2806,  2808,  2810,  2812,  2814,  2816,
    2818,  2820,  2822,  2824,  2826,  2828,  2830,  2832,  2834,  2836,
    2838,  2840,  2842,  2844,  2846,  2848,  2850,  2852,  2854,  2856,
    2858,  2860,  2862,  2864,  2866,  2868,  2870,  2872,  2874,  2876,
    2878,  2880,  2882,  2884,  2886,  2888,  2890,  2892,  2894,  2896,
    2898,  2900,  2902,  2904,  2906,  2908,  2910,  2912,  2914,  2916,
    2918,  2920,  2922,  2924,  2926,  2928,  2930,  2932,  2934,  2936,
    2938,  2940,  2942,  2944,  2946,  2948,  2950,  2952,  2954,  2956,
    2958,  2960,  2962,  2964,  2966,  2968,  2970,  2972,  2974,  2976,
    2978,  2980,  2982,  2984,  2986,  2988,  2990,  2992,  2994,  2996,
    2998,  3000,  3002,  3004,  3006,  3008,  3010,  3012,  3014,  3016,
    3018,  3020,  3022,  3024,  3026,  3028,  3030,  3032,  3034,  3036,
    3038,  3040,  3042,  3044,  3046,  3048,  3050,  3052,  3054,  3056,
    3058,  3060,  3062,  3064,  3066,  3068,  3070,  3072,  3074,  3076,
    3078,  3080,  3082,  3084,  3086,  3088,  3090,  3092,  3094,  3096,
    3098,  3100,  3102,  3104,  3106,  3108,  3110,  3112,  3114,  3116,
    3118,  3120,  3122,  3124,  3126,  3128,  3130,  3132,  3134,  3136,
    3138,  3140,  3142,  3144,  3146,  3148,  3150,  3152,  3154,  3156,
    3158,  3160,  3162,  3164,  3166,  3168,  3170,  3172,  3174,  3176,
    3178,  3180,  3182,  3184,  3186,  3188,  3190,  3192,  3194,  3196,
    3198,  3200,  3202,  3204,  3206,  3208,  3210,  3212,  3214,  3216,
    3218,  3220,  3222,  3224,  3226,  3228,  3230,  3232,  3234,  3236,
    3238,  3240,  3242,  3244
=======
     696,   698,   700,   702,   704,   706,   708,   710,   712,   716,
     719,   723,   727,   730,   734,   737,   741,   744,   748,   753,
     759,   765,   768,   773,   779,   783,   787,   790,   793,   802,
     806,   808,   811,   815,   817,   821,   825,   827,   829,   831,
     833,   835,   837,   839,   841,   843,   845,   847,   849,   851,
     853,   855,   857,   859,   861,   864,   867,   870,   873,   875,
     877,   880,   885,   889,   895,   900,   904,   906,   908,   910,
     912,   914,   916,   918,   920,   922,   925,   929,   933,   936,
     938,   940,   942,   947,   951,   955,   961,   966,   973,   978,
     985,   991,   999,  1004,  1010,  1016,  1023,  1027,  1031,  1034,
    1036,  1040,  1045,  1051,  1055,  1062,  1067,  1073,  1075,  1078,
    1082,  1084,  1087,  1089,  1096,  1100,  1104,  1107,  1111,  1113,
    1117,  1120,  1125,  1131,  1138,  1144,  1148,  1151,  1155,  1160,
    1162,  1166,  1168,  1171,  1173,  1175,  1177,  1180,  1183,  1186,
    1190,  1192,  1194,  1197,  1200,  1203,  1209,  1215,  1217,  1222,
    1226,  1231,  1240,  1242,  1245,  1249,  1252,  1256,  1265,  1267,
    1270,  1274,  1283,  1294,  1303,  1314,  1316,  1319,  1324,  1332,
    1334,  1337,  1342,  1350,  1352,  1356,  1365,  1367,  1371,  1373,
    1377,  1379,  1382,  1384,  1388,  1392,  1396,  1400,  1401,  1406,
    1410,  1414,  1418,  1420,  1426,  1428,  1432,  1433,  1435,  1437,
    1441,  1443,  1447,  1451,  1453,  1457,  1461,  1465,  1469,  1471,
    1475,  1479,  1481,  1485,  1489,  1491,  1496,  1498,  1503,  1505,
    1510,  1512,  1517,  1519,  1522,  1524,  1527,  1529,  1531,  1534,
    1537,  1539,  1541,  1543,  1545,  1549,  1551,  1553,  1555,  1557,
    1559,  1561,  1563,  1565,  1567,  1572,  1578,  1584,  1591,  1595,
    1600,  1602,  1605,  1609,  1612,  1615,  1617,  1619,  1621,  1623,
    1625,  1627,  1629,  1631,  1633,  1635,  1638,  1642,  1647,  1651,
    1655,  1659,  1663,  1667,  1669,  1672,  1676,  1678,  1680,  1682,
    1684,  1686,  1688,  1690,  1692,  1694,  1696,  1698,  1700,  1702,
    1704,  1706,  1708,  1710,  1712,  1714,  1716,  1718,  1720,  1722,
    1725,  1728,  1732,  1734,  1739,  1744,  1748,  1753,  1755,  1759,
    1761,  1765,  1767,  1769,  1773,  1777,  1779,  1781,  1783,  1785,
    1787,  1792,  1801,  1807,  1817,  1827,  1838,  1840,  1843,  1845,
    1848,  1855,  1856,  1858,  1862,  1866,  1867,  1869,  1871,  1873,
    1876,  1879,  1880,  1882,  1884,  1886,  1889,  1892,  1894,  1896,
    1898,  1900,  1902,  1904,  1906,  1908,  1910,  1912,  1914,  1918,
    1922,  1925,  1929,  1933,  1936,  1938,  1940,  1942,  1944,  1946,
    1948,  1950,  1955,  1959,  1967,  1971,  1979,  1984,  1989,  1993,
    2001,  2005,  2013,  2016,  2018,  2021,  2025,  2028,  2030,  2032,
    2034,  2036,  2038,  2042,  2044,  2048,  2050,  2052,  2054,  2056,
    2058,  2062,  2064,  2066,  2068,  2070,  2072,  2074,  2076,  2078,
    2080,  2082,  2084,  2086,  2090,  2094,  2099,  2104,  2108,  2112,
    2116,  2120,  2125,  2130,  2134,  2139,  2146,  2151,  2158,  2163,
    2167,  2172,  2179,  2186,  2191,  2198,  2205,  2210,  2212,  2215,
    2217,  2219,  2221,  2226,  2232,  2239,  2243,  2247,  2251,  2255,
    2261,  2269,  2277,  2283,  2289,  2295,  2303,  2311,  2317,  2323,
    2327,  2331,  2337,  2345,  2351,  2359,  2361,  2366,  2370,  2376,
    2378,  2381,  2385,  2389,  2391,  2395,  2398,  2399,  2401,  2403,
    2406,  2408,  2412,  2414,  2418,  2420,  2425,  2427,  2430,  2434,
    2435,  2437,  2438,  2440,  2445,  2448,  2452,  2454,  2455,  2457,
    2462,  2463,  2465,  2468,  2470,  2474,  2475,  2477,  2480,  2483,
    2485,  2486,  2488,  2489,  2491,  2493,  2495,  2497,  2499,  2501,
    2503,  2507,  2511,  2513,  2515,  2517,  2520,  2524,  2526,  2528,
    2530,  2532,  2534,  2536,  2538,  2540,  2543,  2546,  2548,  2550,
    2553,  2556,  2560,  2562,  2565,  2568,  2574,  2577,  2579,  2581,
    2582,  2585,  2587,  2591,  2596,  2597,  2600,  2601,  2604,  2609,
    2614,  2618,  2621,  2625,  2627,  2631,  2632,  2634,  2636,  2639,
    2642,  2645,  2648,  2650,  2653,  2656,  2659,  2662,  2666,  2669,
    2673,  2677,  2682,  2685,  2688,  2690,  2692,  2696,  2699,  2703,
    2706,  2710,  2713,  2717,  2721,  2725,  2729,  2735,  2741,  2747,
    2753,  2762,  2767,  2772,  2780,  2786,  2791,  2795,  2798,  2804,
    2809,  2817,  2824,  2826,  2828,  2830,  2834,  2836,  2840,  2842,
    2846,  2848,  2850,  2852,  2854,  2856,  2858,  2860,  2862,  2864,
    2866,  2868,  2870,  2872,  2874,  2876,  2878,  2880,  2882,  2884,
    2886,  2888,  2890,  2892,  2894,  2896,  2898,  2900,  2902,  2904,
    2906,  2908,  2910,  2912,  2914,  2916,  2918,  2920,  2922,  2924,
    2926,  2928,  2930,  2932,  2934,  2936,  2938,  2940,  2942,  2944,
    2946,  2948,  2950,  2952,  2954,  2956,  2958,  2960,  2962,  2964,
    2966,  2968,  2970,  2972,  2974,  2976,  2978,  2980,  2982,  2984,
    2986,  2988,  2990,  2992,  2994,  2996,  2998,  3000,  3002,  3004,
    3006,  3008,  3010,  3012,  3014,  3016,  3018,  3020,  3022,  3024,
    3026,  3028,  3030,  3032,  3034,  3036,  3038,  3040,  3042,  3044,
    3046,  3048,  3050,  3052,  3054,  3056,  3058,  3060,  3062,  3064,
    3066,  3068,  3070,  3072,  3074,  3076,  3078,  3080,  3082,  3084,
    3086,  3088,  3090,  3092,  3094,  3096,  3098,  3100,  3102,  3104,
    3106,  3108,  3110,  3112,  3114,  3116,  3118,  3120,  3122,  3124,
    3126,  3128,  3130,  3132,  3134,  3136,  3138,  3140,  3142,  3144,
    3146,  3148,  3150,  3152,  3154,  3156,  3158,  3160,  3162,  3164,
    3166,  3168,  3170,  3172,  3174,  3176,  3178,  3180,  3182,  3184,
    3186,  3188,  3190,  3192,  3194,  3196,  3198,  3200,  3202,  3204,
    3206,  3208,  3210,  3212,  3214,  3216,  3218,  3220,  3222,  3224,
    3226,  3228,  3230,  3232,  3234,  3236,  3238,  3240,  3242,  3244,
    3246,  3248,  3250,  3252,  3254,  3256,  3258,  3260,  3262,  3264,
    3266,  3268,  3270,  3272,  3274,  3276,  3278
>>>>>>> MERGE-SOURCE
  };

  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
  const unsigned short int
  jsoniq_parser::yyrline_[] =
  {
<<<<<<< TREE
         0,  1069,  1069,  1070,  1074,  1078,  1086,  1092,  1096,  1105,
    1111,  1119,  1125,  1136,  1141,  1145,  1150,  1159,  1166,  1173,
    1182,  1189,  1197,  1205,  1213,  1224,  1229,  1236,  1243,  1255,
    1265,  1272,  1279,  1291,  1292,  1293,  1294,  1295,  1300,  1301,
    1302,  1303,  1304,  1305,  1306,  1309,  1314,  1319,  1327,  1335,
    1343,  1348,  1356,  1361,  1369,  1374,  1382,  1387,  1392,  1397,
    1405,  1407,  1410,  1420,  1425,  1433,  1441,  1452,  1459,  1470,
    1475,  1483,  1490,  1497,  1506,  1519,  1527,  1534,  1544,  1551,
    1558,  1569,  1570,  1571,  1572,  1573,  1574,  1575,  1576,  1581,
    1587,  1596,  1603,  1613,  1623,  1624,  1625,  1626,  1627,  1628,
    1629,  1630,  1631,  1632,  1637,  1645,  1653,  1661,  1668,  1676,
    1683,  1688,  1696,  1704,  1718,  1732,  1749,  1754,  1762,  1770,
    1781,  1786,  1795,  1800,  1807,  1812,  1822,  1827,  1836,  1842,
    1855,  1860,  1868,  1879,  1894,  1906,  1921,  1926,  1931,  1936,
    1944,  1951,  1962,  1967,  1977,  1986,  1995,  2004,  2016,  2020,
    2026,  2030,  2040,  2050,  2063,  2069,  2078,  2083,  2090,  2097,
    2108,  2118,  2128,  2138,  2156,  2176,  2180,  2185,  2192,  2196,
    2201,  2208,  2213,  2225,  2232,  2242,  2257,  2258,  2259,  2260,
    2261,  2262,  2263,  2265,  2266,  2267,  2268,  2269,  2270,  2275,
    2283,  2300,  2308,  2316,  2323,  2330,  2341,  2350,  2359,  2368,
    2381,  2389,  2397,  2405,  2420,  2425,  2433,  2447,  2464,  2489,
    2497,  2504,  2515,  2524,  2531,  2536,  2549,  2566,  2567,  2568,
    2569,  2570,  2571,  2576,  2577,  2580,  2581,  2582,  2583,  2584,
    2587,  2588,  2589,  2590,  2591,  2596,  2610,  2618,  2623,  2631,
    2636,  2641,  2649,  2658,  2670,  2680,  2693,  2701,  2702,  2703,
    2708,  2709,  2710,  2711,  2712,  2717,  2724,  2734,  2740,  2749,
    2758,  2759,  2767,  2774,  2782,  2794,  2804,  2814,  2824,  2834,
    2844,  2854,  2864,  2875,  2884,  2894,  2904,  2920,  2929,  2938,
    2946,  2952,  2964,  2972,  2982,  2990,  3002,  3008,  3019,  3021,
    3025,  3033,  3037,  3042,  3046,  3050,  3054,  3064,  3072,  3079,
    3085,  3095,  3099,  3103,  3111,  3119,  3127,  3139,  3147,  3153,
    3163,  3169,  3179,  3183,  3193,  3199,  3205,  3211,  3220,  3229,
    3238,  3251,  3255,  3263,  3269,  3279,  3287,  3296,  3309,  3316,
    3328,  3332,  3344,  3351,  3357,  3366,  3373,  3379,  3390,  3397,
    3403,  3412,  3421,  3428,  3439,  3446,  3458,  3464,  3476,  3482,
    3493,  3499,  3510,  3516,  3527,  3533,  3544,  3553,  3557,  3566,
    3570,  3578,  3582,  3592,  3599,  3608,  3618,  3617,  3631,  3640,
    3649,  3662,  3666,  3678,  3682,  3690,  3693,  3700,  3704,  3713,
    3717,  3721,  3729,  3733,  3739,  3745,  3751,  3761,  3765,  3769,
    3777,  3781,  3787,  3797,  3801,  3811,  3815,  3825,  3829,  3839,
    3843,  3853,  3857,  3866,  3870,  3878,  3882,  3886,  3890,  3900,
    3904,  3908,  3915,  3920,  3928,  3932,  3936,  3940,  3944,  3948,
    3956,  3960,  3964,  3972,  3976,  3980,  3984,  3995,  4001,  4011,
    4017,  4027,  4031,  4035,  4098,  4120,  4148,  4312,  4316,  4326,
    4330,  4334,  4338,  4347,  4351,  4355,  4359,  4363,  4368,  4372,
    4376,  4380,  4389,  4395,  4405,  4413,  4417,  4421,  4425,  4429,
    4433,  4437,  4441,  4445,  4449,  4454,  4458,  4462,  4466,  4474,
    4478,  4482,  4486,  4494,  4501,  4508,  4518,  4522,  4530,  4538,
    4542,  4550,  4558,  4566,  4620,  4624,  4646,  4652,  4658,  4664,
    4674,  4678,  4686,  4694,  4706,  4710,  4718,  4722,  4726,  4734,
    4742,  4759,  4767,  4784,  4803,  4827,  4833,  4844,  4850,  4861,
    4870,  4872,  4876,  4881,  4891,  4894,  4901,  4907,  4913,  4920,
    4932,  4935,  4942,  4948,  4954,  4961,  4972,  4976,  4984,  4988,
    4996,  5000,  5004,  5009,  5018,  5022,  5026,  5030,  5038,  5043,
    5051,  5056,  5064,  5072,  5077,  5082,  5087,  5092,  5097,  5102,
    5108,  5116,  5120,  5137,  5141,  5149,  5157,  5165,  5169,  5177,
    5181,  5189,  5197,  5201,  5205,  5240,  5246,  5252,  5262,  5266,
    5270,  5274,  5278,  5282,  5286,  5293,  5299,  5309,  5317,  5325,
    5329,  5333,  5337,  5341,  5345,  5349,  5353,  5357,  5361,  5369,
    5377,  5381,  5385,  5393,  5400,  5408,  5416,  5420,  5424,  5432,
    5436,  5442,  5448,  5452,  5462,  5470,  5474,  5480,  5489,  5498,
    5504,  5510,  5520,  5537,  5544,  5559,  5586,  5590,  5598,  5606,
    5610,  5621,  5638,  5644,  5650,  5660,  5664,  5670,  5676,  5680,
    5686,  5690,  5696,  5702,  5709,  5719,  5724,  5732,  5738,  5748,
    5770,  5779,  5785,  5798,  5812,  5819,  5825,  5835,  5844,  5852,
    5858,  5876,  5884,  5888,  5895,  5900,  5908,  5912,  5919,  5923,
    5930,  5934,  5941,  5945,  5954,  5967,  5970,  5978,  5981,  5989,
    5997,  6005,  6009,  6017,  6020,  6028,  6040,  6043,  6051,  6063,
    6069,  6079,  6082,  6090,  6094,  6098,  6106,  6109,  6117,  6120,
    6128,  6132,  6136,  6140,  6144,  6152,  6160,  6172,  6184,  6188,
    6192,  6200,  6206,  6216,  6220,  6224,  6228,  6232,  6236,  6240,
    6244,  6252,  6256,  6260,  6264,  6272,  6278,  6288,  6298,  6302,
    6310,  6320,  6331,  6338,  6342,  6350,  6353,  6360,  6365,  6374,
    6384,  6387,  6394,  6398,  6406,  6415,  6422,  6432,  6436,  6443,
    6449,  6459,  6462,  6469,  6474,  6486,  6494,  6506,  6514,  6518,
    6526,  6530,  6534,  6542,  6550,  6554,  6558,  6562,  6570,  6578,
    6590,  6594,  6602,  6616,  6620,  6627,  6632,  6640,  6645,  6654,
    6658,  6666,  6673,  6679,  6686,  6697,  6703,  6713,  6720,  6727,
    6752,  6780,  6808,  6812,  6816,  6824,  6831,  6838,  6850,  6854,
    6855,  6868,  6869,  6870,  6871,  6872,  6873,  6874,  6875,  6876,
    6877,  6878,  6879,  6880,  6881,  6882,  6883,  6884,  6888,  6889,
    6890,  6891,  6892,  6893,  6894,  6895,  6896,  6897,  6898,  6899,
    6900,  6901,  6902,  6903,  6904,  6905,  6906,  6907,  6908,  6909,
    6910,  6911,  6912,  6913,  6914,  6915,  6916,  6917,  6918,  6919,
    6920,  6921,  6922,  6923,  6924,  6925,  6926,  6927,  6928,  6929,
    6930,  6931,  6932,  6933,  6934,  6935,  6936,  6937,  6938,  6939,
    6940,  6941,  6942,  6943,  6944,  6945,  6946,  6947,  6948,  6949,
    6950,  6951,  6952,  6953,  6954,  6955,  6956,  6957,  6958,  6959,
    6960,  6961,  6962,  6963,  6964,  6965,  6966,  6967,  6968,  6969,
    6970,  6971,  6972,  6973,  6974,  6975,  6976,  6977,  6978,  6979,
    6980,  6981,  6982,  6983,  6984,  6985,  6986,  6987,  6988,  6989,
    6990,  6991,  6992,  6993,  6994,  6995,  6996,  6997,  6998,  6999,
    7000,  7001,  7002,  7003,  7004,  7005,  7006,  7007,  7008,  7009,
    7010,  7011,  7012,  7013,  7014,  7015,  7016,  7017,  7018,  7019,
    7020,  7021,  7022,  7023,  7024,  7025,  7026,  7027,  7028,  7029,
    7030,  7031,  7032,  7033,  7034,  7035,  7036,  7037,  7038,  7039,
    7040,  7041,  7042,  7043,  7044,  7045,  7046,  7047,  7048,  7049,
    7050,  7051,  7052,  7053,  7054,  7055,  7056,  7057,  7058,  7059,
    7060,  7061,  7062,  7063,  7064,  7065,  7066,  7067,  7068,  7069,
    7070,  7071,  7072,  7073,  7074,  7075,  7076,  7077,  7078,  7079,
    7080,  7081,  7082,  7083,  7084,  7085,  7086,  7087,  7088,  7089,
    7091,  7092,  7093,  7098
=======
         0,  1070,  1070,  1071,  1075,  1079,  1087,  1093,  1097,  1106,
    1112,  1120,  1126,  1137,  1142,  1146,  1151,  1160,  1167,  1174,
    1183,  1190,  1198,  1206,  1214,  1225,  1230,  1237,  1244,  1256,
    1266,  1273,  1280,  1292,  1293,  1294,  1295,  1296,  1301,  1302,
    1303,  1304,  1305,  1306,  1307,  1310,  1315,  1320,  1328,  1336,
    1344,  1349,  1357,  1362,  1370,  1375,  1383,  1388,  1393,  1398,
    1406,  1408,  1411,  1421,  1426,  1434,  1442,  1453,  1460,  1471,
    1476,  1484,  1491,  1498,  1507,  1520,  1528,  1535,  1545,  1552,
    1559,  1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,  1582,
    1588,  1597,  1604,  1614,  1624,  1625,  1626,  1627,  1628,  1629,
    1630,  1631,  1632,  1633,  1638,  1646,  1654,  1662,  1669,  1677,
    1684,  1689,  1697,  1705,  1719,  1733,  1750,  1755,  1763,  1771,
    1782,  1787,  1796,  1801,  1808,  1813,  1823,  1828,  1837,  1843,
    1856,  1861,  1869,  1880,  1895,  1907,  1922,  1927,  1932,  1937,
    1945,  1952,  1963,  1968,  1978,  1987,  1996,  2005,  2017,  2021,
    2027,  2031,  2041,  2051,  2064,  2070,  2079,  2084,  2091,  2098,
    2109,  2119,  2129,  2139,  2157,  2177,  2181,  2186,  2193,  2197,
    2202,  2209,  2214,  2226,  2233,  2243,  2258,  2259,  2260,  2261,
    2262,  2263,  2264,  2266,  2267,  2268,  2269,  2270,  2275,  2280,
    2288,  2305,  2313,  2321,  2328,  2335,  2346,  2355,  2364,  2373,
    2386,  2394,  2402,  2410,  2425,  2430,  2438,  2452,  2469,  2494,
    2502,  2509,  2520,  2530,  2535,  2548,  2565,  2566,  2567,  2568,
    2569,  2570,  2575,  2576,  2579,  2580,  2581,  2582,  2583,  2586,
    2587,  2588,  2589,  2590,  2595,  2609,  2617,  2622,  2630,  2635,
    2640,  2648,  2657,  2669,  2679,  2692,  2700,  2701,  2702,  2707,
    2708,  2709,  2710,  2711,  2716,  2723,  2733,  2739,  2748,  2757,
    2758,  2766,  2773,  2781,  2793,  2803,  2813,  2823,  2833,  2843,
    2853,  2863,  2874,  2883,  2893,  2903,  2919,  2928,  2937,  2945,
    2951,  2963,  2971,  2981,  2989,  3001,  3007,  3018,  3020,  3024,
    3032,  3036,  3041,  3045,  3049,  3053,  3063,  3071,  3078,  3084,
    3094,  3098,  3102,  3110,  3118,  3126,  3138,  3146,  3152,  3162,
    3168,  3178,  3182,  3192,  3198,  3204,  3210,  3219,  3228,  3237,
    3250,  3254,  3262,  3268,  3278,  3286,  3295,  3308,  3315,  3327,
    3331,  3343,  3350,  3356,  3365,  3372,  3378,  3389,  3396,  3402,
    3411,  3420,  3427,  3438,  3445,  3457,  3463,  3475,  3481,  3492,
    3498,  3509,  3515,  3526,  3532,  3543,  3552,  3556,  3565,  3569,
    3576,  3580,  3593,  3597,  3607,  3614,  3623,  3633,  3632,  3646,
    3655,  3664,  3677,  3681,  3693,  3697,  3705,  3708,  3715,  3719,
    3728,  3732,  3736,  3744,  3748,  3754,  3760,  3766,  3776,  3780,
    3784,  3792,  3796,  3802,  3812,  3816,  3826,  3830,  3840,  3844,
    3854,  3858,  3868,  3872,  3881,  3885,  3893,  3897,  3901,  3905,
    3915,  3919,  3923,  3930,  3935,  3943,  3947,  3951,  3955,  3959,
    3963,  3971,  3975,  3979,  3987,  3991,  3995,  3999,  4010,  4016,
    4026,  4032,  4042,  4046,  4050,  4113,  4135,  4163,  4327,  4331,
    4341,  4345,  4349,  4353,  4362,  4366,  4370,  4374,  4378,  4383,
    4387,  4391,  4395,  4404,  4410,  4420,  4428,  4432,  4436,  4440,
    4444,  4448,  4452,  4456,  4460,  4464,  4469,  4473,  4477,  4481,
    4489,  4493,  4497,  4501,  4509,  4516,  4523,  4533,  4537,  4545,
    4553,  4557,  4565,  4573,  4581,  4635,  4639,  4661,  4667,  4673,
    4679,  4689,  4693,  4701,  4709,  4721,  4725,  4733,  4737,  4741,
    4749,  4757,  4774,  4782,  4799,  4818,  4842,  4848,  4859,  4865,
    4876,  4885,  4887,  4891,  4896,  4906,  4909,  4916,  4922,  4928,
    4935,  4947,  4950,  4957,  4963,  4969,  4976,  4987,  4991,  4999,
    5003,  5011,  5015,  5019,  5024,  5033,  5037,  5041,  5045,  5053,
    5058,  5066,  5071,  5079,  5087,  5092,  5097,  5102,  5107,  5112,
    5117,  5123,  5131,  5135,  5152,  5156,  5164,  5172,  5180,  5184,
    5192,  5196,  5204,  5212,  5216,  5220,  5225,  5260,  5266,  5272,
    5282,  5286,  5290,  5295,  5299,  5304,  5308,  5312,  5316,  5323,
    5329,  5339,  5347,  5355,  5359,  5363,  5367,  5371,  5375,  5379,
    5383,  5387,  5391,  5399,  5407,  5411,  5415,  5423,  5430,  5438,
    5446,  5450,  5454,  5462,  5466,  5472,  5478,  5482,  5492,  5500,
    5504,  5510,  5519,  5528,  5534,  5540,  5550,  5567,  5574,  5589,
    5616,  5620,  5628,  5636,  5640,  5651,  5668,  5674,  5680,  5690,
    5694,  5700,  5706,  5710,  5716,  5720,  5726,  5732,  5739,  5749,
    5754,  5762,  5768,  5778,  5800,  5809,  5815,  5828,  5842,  5849,
    5855,  5865,  5874,  5882,  5888,  5906,  5914,  5918,  5925,  5930,
    5938,  5942,  5949,  5953,  5960,  5964,  5971,  5975,  5984,  5997,
    6000,  6008,  6011,  6019,  6027,  6035,  6039,  6047,  6050,  6058,
    6070,  6073,  6081,  6093,  6099,  6109,  6112,  6120,  6124,  6128,
    6136,  6139,  6147,  6150,  6158,  6162,  6166,  6170,  6174,  6182,
    6190,  6202,  6214,  6218,  6222,  6230,  6236,  6246,  6250,  6254,
    6258,  6262,  6266,  6270,  6274,  6282,  6286,  6290,  6294,  6302,
    6308,  6318,  6328,  6332,  6340,  6350,  6361,  6368,  6372,  6380,
    6383,  6390,  6395,  6404,  6414,  6417,  6424,  6428,  6436,  6445,
    6452,  6462,  6466,  6473,  6479,  6489,  6492,  6499,  6504,  6516,
    6524,  6536,  6544,  6548,  6556,  6560,  6564,  6572,  6580,  6584,
    6588,  6592,  6600,  6608,  6620,  6624,  6632,  6646,  6650,  6657,
    6662,  6670,  6675,  6684,  6692,  6699,  6705,  6712,  6723,  6729,
    6739,  6744,  6750,  6760,  6767,  6771,  6778,  6800,  6825,  6850,
    6878,  6903,  6931,  6935,  6939,  6946,  6951,  6958,  6963,  6970,
    6975,  6987,  6991,  6992,  7005,  7006,  7007,  7008,  7009,  7010,
    7012,  7013,  7014,  7015,  7016,  7017,  7018,  7019,  7020,  7021,
    7025,  7026,  7027,  7028,  7029,  7030,  7031,  7032,  7033,  7034,
    7035,  7036,  7037,  7038,  7039,  7040,  7041,  7042,  7043,  7044,
    7045,  7046,  7047,  7048,  7049,  7050,  7051,  7052,  7053,  7054,
    7055,  7056,  7057,  7058,  7059,  7060,  7061,  7062,  7063,  7064,
    7065,  7066,  7067,  7068,  7069,  7070,  7071,  7072,  7073,  7074,
    7075,  7076,  7077,  7078,  7079,  7080,  7081,  7082,  7083,  7084,
    7085,  7086,  7087,  7088,  7089,  7090,  7091,  7092,  7093,  7094,
    7095,  7096,  7097,  7098,  7099,  7100,  7101,  7102,  7103,  7104,
    7105,  7106,  7107,  7108,  7109,  7110,  7111,  7112,  7113,  7114,
    7115,  7116,  7117,  7118,  7119,  7120,  7121,  7122,  7123,  7124,
    7125,  7126,  7127,  7128,  7129,  7130,  7131,  7132,  7133,  7134,
    7135,  7136,  7137,  7138,  7139,  7140,  7141,  7142,  7143,  7144,
    7145,  7146,  7147,  7148,  7149,  7150,  7151,  7152,  7154,  7155,
    7157,  7158,  7159,  7160,  7161,  7163,  7165,  7166,  7167,  7168,
    7169,  7170,  7171,  7172,  7173,  7174,  7175,  7176,  7177,  7178,
    7179,  7180,  7181,  7182,  7183,  7184,  7185,  7186,  7187,  7188,
    7189,  7190,  7191,  7192,  7193,  7194,  7195,  7196,  7197,  7198,
    7199,  7200,  7201,  7202,  7203,  7204,  7205,  7206,  7207,  7208,
    7209,  7210,  7211,  7212,  7213,  7214,  7215,  7216,  7217,  7218,
    7219,  7220,  7221,  7222,  7223,  7226,  7235
>>>>>>> MERGE-SOURCE
  };

  // Print the state stack on the debug stream.
  void
  jsoniq_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (state_stack_type::const_iterator i = yystate_stack_.begin ();
	 i != yystate_stack_.end (); ++i)
      *yycdebug_ << ' ' << *i;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  jsoniq_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    /* Print the symbols being reduced, and their result.  */
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
	       << " (line " << yylno << "):" << std::endl;
    /* The symbols being reduced.  */
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
		       yyrhs_[yyprhs_[yyrule] + yyi],
		       &(yysemantic_stack_[(yynrhs) - (yyi + 1)]),
		       &(yylocation_stack_[(yynrhs) - (yyi + 1)]));
  }
#endif // YYDEBUG

  /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
  jsoniq_parser::token_number_type
  jsoniq_parser::yytranslate_ (int t)
  {
    static
    const token_number_type
    translate_table[] =
    {
           0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340
    };
    if ((unsigned int) t <= yyuser_token_number_max_)
      return translate_table[t];
    else
      return yyundef_token_;
  }

  const int jsoniq_parser::yyeof_ = 0;
<<<<<<< TREE
  const int jsoniq_parser::yylast_ = 16202;
=======
  const int jsoniq_parser::yylast_ = 19449;
>>>>>>> MERGE-SOURCE
  const int jsoniq_parser::yynnts_ = 321;
  const int jsoniq_parser::yyempty_ = -2;
<<<<<<< TREE
  const int jsoniq_parser::yyfinal_ = 548;
=======
  const int jsoniq_parser::yyfinal_ = 544;
>>>>>>> MERGE-SOURCE
  const int jsoniq_parser::yyterror_ = 1;
  const int jsoniq_parser::yyerrcode_ = 256;
  const int jsoniq_parser::yyntokens_ = 341;

  const unsigned int jsoniq_parser::yyuser_token_number_max_ = 595;
  const jsoniq_parser::token_number_type jsoniq_parser::yyundef_token_ = 2;


} // zorba

/* Line 1136 of lalr1.cc  */
<<<<<<< TREE
#line 17394 "/home/mbrantner/zorba/build/src/compiler/parser/jsoniq_parser.cpp"
=======
#line 18186 "/home/colea/xquery_bzr/new-jsoniq/build/src/compiler/parser/jsoniq_parser.cpp"
>>>>>>> MERGE-SOURCE


/* Line 1138 of lalr1.cc  */
<<<<<<< TREE
#line 7102 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_parser.y"
=======
#line 7239 "/home/colea/xquery_bzr/new-jsoniq/src/compiler/parser/jsoniq_parser.y"
>>>>>>> MERGE-SOURCE


namespace zorba {

/*
 *  The error member function registers the errors to the driver.
 */
void jsoniq_parser::error(zorba::jsoniq_parser::location_type const& loc, string const& msg)
{
  if (driver.parserError != NULL)
  {
    driver.set_expr(new ParseErrorNode(driver.parserError->loc, driver.parserError->err_code, driver.parserError->msg));
  }
  else
  {
    ParseErrorNode* prevErr = dynamic_cast<ParseErrorNode*>(driver.get_expr());

    if (prevErr != NULL)
    {
      // Error message heuristics: if the current error message has the "(missing comma "," between expressions?)" text,
      // and the old message has a "','" text, then replace the old message with the new one. Unfortunately this 
      // makes the parser error messages harder to internationalize.
      if (msg.find("(missing comma \",\" between expressions?)") != string::npos
          &&
          prevErr->msg.find(zstring("\",\"")) == zstring::npos)
        return;
    }

    // Replace the first occurrence of "unexpected "'QName'"" with "unexpected qualified name %actual_qname%"
    string message = msg;
    int pos;
    std::string unexpected_qname = "unexpected \"'QName'\"";
    if ((pos = message.find(unexpected_qname)) != -1)
      message = message.substr(0, pos) + "unexpected qualified name \"" + driver.symtab.get_last_qname() + "\"" + message.substr(pos+unexpected_qname.length());

    // remove the double quoting "''" from every token description
    while ((pos = message.find("\"'")) != -1 || (pos = message.find("'\"")) != -1)
      message.replace(pos, 2, "\"");
    driver.set_expr(new ParseErrorNode(driver.createQueryLoc(loc), err::XPST0003, message));
  }
}

} // namespace zorba

