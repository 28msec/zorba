#line 2 "jsoniq_scanner.yy.cpp"

#line 4 "jsoniq_scanner.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ZorbaJSONiqFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *ZorbaJSONiqalloc (yy_size_t  );
void *ZorbaJSONiqrealloc (void *,yy_size_t  );
void ZorbaJSONiqfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "compiler/parser/FlexLexer.h"

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 355
#define YY_END_OF_BUFFER 356
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1846] =
    {   0,
      290,  290,    0,    0,  290,  290,    0,    0,    0,    0,
      295,  295,  295,  295,  295,  295,  295,  295,    0,    0,
        0,    0,    0,    0,    0,    0,  330,  330,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  307,  307,
      325,  325,  356,  354,  290,  290,   10,  280,   19,   17,
       22,  280,    3,   12,   13,    7,    5,    6,   15,    8,
      267,   20,    4,  284,  197,  207,   16,   11,  273,  273,
      273,  135,  136,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  288,  224,  289,

      354,  354,  354,    2,    2,    2,  349,  349,  354,  346,
      347,  354,  341,  341,  338,  354,  339,  354,  296,  295,
      295,  295,  296,  291,  293,  296,  296,  296,  292,  296,
      296,  296,  354,  355,  354,  317,  317,  354,  316,  312,
      354,  355,  322,  323,  354,  354,  354,  328,  328,  329,
      329,  329,  330,  330,  354,  301,  301,  354,  354,  354,
      354,  354,  354,  354,  354,  355,  354,  333,  333,  354,
      354,  335,  354,  354,  354,  354,  355,  354,  310,  307,
      307,  307,  304,  305,  310,  306,  303,  309,  310,  310,
      310,  325,  325,  354,  290,  214,  280,  278,  280,   18,

      275,  275,    0,    0,    0,  280,  280,  278,  287,  286,
        0,   14,  268,    9,  268,  267,  270,  270,   21,  195,
        0,  212,  211,  282,  205,  206,  273,    0,    0,    0,
        0,  273,    0,  138,  273,  273,  273,  273,  273,   88,
       86,  273,  273,  273,  273,  273,  216,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  199,  273,  273,  273,
      273,  273,  273,  273,  273,  200,  273,  201,  273,   30,
      273,  153,  210,  273,  273,  273,  273,  202,  273,  203,
      273,  273,  273,  273,  273,  204,  176,  273,  273,  273,
      232,  126,  273,  218,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  222,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  137,
      139,   23,  140,  273,    0,    0,    0,  349,    0,    0,
        0,    0,    0,    0,  348,  352,  353,  341,  340,    0,
        0,    0,    0,    0,    0,  344,  345,  295,  294,  291,
        0,    0,    0,    0,  291,    0,    0,  292,    0,    0,
        0,  292,    0,    0,    0,    0,    0,  317,    0,    0,
        0,    0,    0,    0,    0,  311,  314,  320,  321,  323,
      323,    0,    0,    0,    0,  323,    0,    0,  328,  327,

      326,  330,  331,  332,  331,  301,    0,    0,    0,    0,
        0,    0,  297,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  302,  333,    0,    0,
      334,  335,    0,    0,    0,  335,    0,    0,    0,    0,
      336,  307,  308,  309,    0,    0,    0,    0,  309,    0,
        0,  325,    0,  325,    0,  280,  279,  280,  280,  280,
      280,  280,  280,  275,    0,    0,    0,    0,    0,  275,
        0,    0,  280,  280,  279,  280,  280,  280,  280,  280,
      285,  277,    0,    0,    0,    0,  268,  270,    0,  269,
        0,    0,  271,  273,    0,    0,    0,  273,    0,    0,

      106,    0,    0,    0,  273,  154,  273,  246,  156,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  196,  273,  273,  273,  273,
      273,  158,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,   65,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  131,  273,  273,  241,  273,   66,  273,  273,  273,
      273,  273,  273,  213,  273,  273,  273,  273,  273,  273,
      120,  152,  273,  273,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
       38,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,   89,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,    0,    0,    1,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  291,    0,    0,    0,  291,    0,    0,    0,
      292,    0,    0,    0,  337,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  323,    0,    0,    0,  323,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  299,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  302,
        0,    0,  335,    0,    0,    0,  309,    0,    0,    0,
      309,    0,    0,    0,  325,  324,  280,  280,  280,  280,
      280,  280,  280,  275,    0,    0,    0,  275,    0,    0,
        0,    0,    0,    0,  280,  280,  280,  280,  280,  280,
      280,  277,    0,    0,    0,  277,    0,    0,  269,  281,
        0,  273,    0,    0,    0,  273,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  272,  274,    0,    0,    0,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  162,  252,  273,  273,  273,  273,  273,  273,
      273,  234,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  244,  273,  273,  273,  273,  273,
      273,  273,   32,  273,  273,  273,  273,  273,  172,  273,
      273,  273,  150,  273,  273,  273,  273,  208,  273,  273,
      273,  273,  273,  273,  273,  236,  251,  141,  134,  273,
      257,  273,  273,   35,  273,  273,  273,  273,  273,  273,
      160,  273,  273,   71,  273,  273,   54,  264,  273,  273,
       72,  273,  273,  273,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  182,  273,  273,  273,  273,  100,  273,  273,
      273,  273,  242,  273,   76,  273,  273,  273,  192,  273,
      273,  273,   44,  243,  273,  273,  273,  265,  273,   40,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,   73,  273,  273,  273,  273,   33,  157,  273,  273,
      351,    0,    0,  350,    0,    0,  343,    0,    0,  342,
        0,    0,  291,    0,    0,    0,  291,    0,    0,    0,
        0,  337,    0,  319,    0,    0,  318,    0,    0,  313,
        0,  323,    0,    0,    0,  323,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  309,    0,    0,
        0,  309,    0,    0,    0,  280,  280,  280,  280,  275,
        0,    0,    0,  275,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  276,    0,    0,    0,  280,  280,  280,
      280,  277,    0,    0,    0,    0,  273,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  274,    0,    0,
        0,  274,    0,    0,  237,  273,  273,  273,  146,  273,

      273,  273,  273,  273,  273,   34,  273,  258,  130,   92,
      273,  273,  273,  113,  273,  273,  273,  273,   74,  273,
      273,  273,  273,  273,  273,  273,  110,  273,  273,  273,
      259,  273,  273,  273,   77,  273,  273,  273,  266,  256,
      273,  273,  273,  273,  149,  151,  273,  273,  273,  215,
      273,  118,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  159,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  235,  273,  273,  273,   59,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      115,  124,  273,  273,  273,  273,  273,  273,  273,  273,

      183,  273,  273,  273,  273,  273,  273,  273,  161,  273,
      273,  227,  273,  273,  273,  186,  255,  273,  273,  223,
      273,  273,  273,  273,   75,  273,  231,  273,  273,  273,
      225,   37,  273,  273,  273,  155,  273,  273,    0,    0,
      291,    0,    0,    0,    0,    0,  323,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  298,    0,    0,
        0,    0,    0,    0,    0,  309,    0,    0,    0,  275,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      276,    0,    0,    0,  276,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  274,    0,    0,    0,  273,  273,
      142,  273,  273,  273,  273,  238,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      229,  273,  273,  273,  273,  273,  273,  273,  273,  169,
      273,  273,  198,  273,  273,  273,  273,  273,  273,  273,
      273,  273,   62,  273,  273,  273,  228,  273,  273,  273,
      273,   83,  273,  174,  273,  273,  273,  273,  239,   25,
      273,  273,  273,  273,  147,  177,   85,  273,  273,  273,
       97,  273,  273,  273,  180,  273,  273,  273,  273,  273,

      273,  273,  233,  273,  219,  273,  273,   63,  220,  273,
      273,  273,   47,  273,  217,  273,  240,  273,   41,  273,
      273,  273,  119,  273,  273,  273,  273,  273,  273,  188,
      273,  189,  273,   82,  273,    0,    0,    0,  300,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  276,    0,
        0,    0,    0,    0,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,   45,  273,  273,  273,  170,
       78,  273,  273,  273,   24,   58,  273,  273,  273,  273,
      273,   26,  273,  273,  273,  171,  273,  273,  132,  133,

      273,  273,  127,  273,  273,  273,  247,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  116,  273,  273,
      273,   50,  273,  273,  273,  273,  107,  273,  273,  273,
      273,  273,  273,  273,  230,  273,  273,  273,  273,  273,
      273,  273,   68,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,   84,  273,  190,  273,    0,    0,    0,
        0,    0,   67,   91,  273,  273,  273,  273,   61,  273,
      253,  273,  273,  273,  273,  148,   36,  273,  273,  273,
      273,  273,  273,  168,   43,  273,  263,  125,  245,  273,
      273,   46,  260,  273,  104,  273,  254,  273,  273,  273,

      173,  273,  273,  121,  273,  273,  273,  273,   81,  273,
      273,  273,  143,  273,  226,   70,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  184,  273,  191,  273,  273,
       69,  273,  273,   48,  273,   39,   79,  273,  273,    0,
      283,  273,  273,  261,   27,  273,  273,   60,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  167,  273,  273,
       96,  165,  273,  273,  128,  209,  144,  175,  273,  273,
       29,  273,  273,  178,  273,  108,   99,  273,  117,  273,
       31,  273,  221,  273,  273,  164,  185,  273,  273,  193,
      273,   51,  187,  194,  273,  315,  273,  273,  273,  273,

      112,  129,  273,  273,  273,  273,   94,  262,  166,  273,
      273,  273,  273,  273,  123,  105,  273,  248,  273,  179,
      273,  273,  273,  273,  273,  273,  273,   49,  273,   42,
      109,  273,  114,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  163,  273,  249,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,   57,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  181,   87,  273,  273,  273,  273,  122,  273,  273,
      273,  273,  273,   55,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,   80,  273,  101,  273,  273,

      250,  273,  273,   56,  273,  273,  273,  273,   52,  273,
      273,   64,  273,  273,  273,  273,  273,  273,  273,  273,
      145,   90,  273,  273,  273,  273,  273,  273,  273,   53,
      102,  273,   95,  273,  111,   98,  273,   93,  103,  273,
      273,  273,  273,   28,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   29,
       33,   33,   33,   33,   33,   33,   33,   34,   33,   33,
       35,   33,   33,   36,   33,   33,   33,   33,   33,   33,
       37,   38,   39,   38,   40,   38,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   38,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   74,
       74,   74,   74,   74,   74,   74,   74,   38,   38,   38,
       38,   38,   38,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    2,    3,    4,    5,    6,    4,    4,    7,
        8,    9,    9,   10,    4,    4,   11,   12,    4,   13,
       14,   15,    7,    4,    4,    4,    4,   16,   16,   16,
       16,   16,   17,   17,   17,   17,    4,    4,    4,   17,
       16,   16,   16,   16,   16,   16,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   18,    4,    7,    4,
        4,   19,   19,   19
    } ;

static yyconst flex_int16_t yy_base[1977] =
    {   0,
        0,    0,   72,   73,    0,    0,   80,   84,   95,  105,
      174,    0,    0,    0,  248,    0,    0,    0,  109,  113,
      322,  326,  395,    0,  117,  119,   79,   83, 4237, 4236,
      469,    0,  120,  132,  543,    0,  140,  330,  617,    0,
      153,  334, 4233, 9607,  156,  165, 4208,   83, 9607, 4222,
      289,   67,  321, 9607, 4208, 9607, 9607, 9607,  143, 4209,
      321,  113, 9607,  341, 9607,  101, 9607, 9607,  671,  674,
      682, 9607, 4156,  736,  695,  327,  329,  749,  652,  663,
      745,  699,  690,  664,  771,  720,  792,  804,  793,  786,
      827,  848,  856,  798,  853,  850,  859,   82,   77, 9607,

     4153, 4150, 4149, 9607, 9607, 4213,    0,    0,  893, 4206,
     4140, 4130,    0,    0, 4169,  907, 4106, 4095, 9607,  355,
      377,  696, 4141,  853, 9607, 4090, 4088, 4080,  653, 4079,
     4076, 4075, 4104, 4101,  315,    0,    0,  928,  350, 4070,
     4067, 9607, 9607,  917, 4063, 4062, 4058,    0,    0, 4106,
     9607, 4113,    0,    0,  152,  728,  735,  337,  723,  939,
      949, 4032, 4015, 4011, 4073, 4063,  337,  964,  969, 4048,
     4034,  905, 3985, 3984, 3976, 4020, 4018,  716, 9607,  984,
      990,  993, 9607, 9607, 4018, 9607, 9607,  928, 3967, 3966,
     3952, 4005, 3994, 3992, 1001, 9607,  342, 3993,  977, 9607,

      934,  953, 3927, 3925, 3913,  741, 1003, 3972, 9607, 3911,
      963, 9607,  810, 9607,  841, 1020,    0,  759, 9607, 9607,
      677, 9607, 9607, 9607, 9607, 9607,  994, 1003, 3904, 3898,
     3889,  998,  814, 9607, 1009, 1012, 1030, 1024, 1020, 1058,
     1040, 1066, 1069, 1078, 1084, 1088, 1094, 1104, 1099, 1128,
     1144, 1164, 1148, 1134, 1171, 1188, 1125, 1167, 1208, 1198,
     1221, 1225, 1192, 1235, 1213, 1238, 1270, 1232, 1254, 1248,
     1257, 1075, 1263, 1279, 1293, 1267, 1296, 1315, 1317, 1312,
     1324, 1328, 1350, 1333, 1342, 1355, 1366, 1360, 1371, 1382,
     1378, 1390, 1387, 1397, 1414, 1409, 1427, 1432, 1447, 1444,

     1436, 1470, 1481, 1491, 1491, 1423, 1504, 1507, 1515, 1528,
     1533, 1486, 1540, 1519, 1536, 1550, 1545, 1569, 1578, 1582,
     1595, 1607, 1563, 1599, 1613, 1622, 1573, 1628, 1619, 9607,
     9607, 9607, 9607, 1632, 3888, 3877, 3941,    0,  764,  330,
     3883, 3875, 3870, 3850, 9607, 9607, 9607,    0, 9607,  820,
      724, 3846, 3819, 3836, 3803, 9607, 9607, 1044, 9607, 1636,
     1034, 3774, 3773, 3769, 1639, 3760, 3759, 1285, 3755, 3754,
     3749, 1421, 3745, 3742, 3773,  761,  768,    0,  875,  835,
     3745, 3737, 3754, 3716,  899, 9607, 9607, 9607, 9607, 1494,
     1693, 1441, 3689, 3682, 3678, 1713, 3672, 3664,    0, 9607,

     9607,    0, 9607, 9607,  944, 1716,  367,  854, 1002,  952,
     1681,   81, 1721, 3721, 1737, 1657, 3653, 3652, 3647,  848,
     1743, 3645, 3644, 3706,  689,  892, 9607, 1749, 3686, 3674,
     9607, 1682, 3623, 3621, 3578, 1696, 3573, 3569, 3613,  973,
     9607, 1769, 9607, 1705, 1702, 3561, 3560, 3555, 1716, 3554,
     3544, 3595,    0, 3594, 3580, 3588, 3579, 1678, 1177, 1057,
     1164, 1047, 1153, 1722, 1708, 3501, 3498, 3495, 1078, 1727,
     3486, 3484, 3536, 1772, 3530, 1263,  804, 1031, 1183, 1143,
     9607, 1730, 3453, 3452, 3450, 1646, 1773,    0, 3493, 3492,
     3475, 3460, 9607, 1734, 3417, 3411, 3409, 1770, 3404, 3403,

     1776, 1126, 1805, 1748, 1792, 1798, 1802, 1805, 1808, 1811,
     1814, 1818, 1837, 1846, 1824, 1852, 1840, 1881, 1872, 1878,
     1884, 1887, 1895, 1909, 1912, 1915, 1919, 1927, 1922, 1945,
     1954, 1977, 1957, 1983, 1949, 1986, 1991, 1994, 2003, 2012,
     2015, 2018, 2022, 2032, 2025, 2057, 2048, 2041, 2081, 2060,
     2086, 2089, 2095, 2103, 2115, 2118, 2123, 2107, 2128, 2153,
     2143, 2161, 2131, 2164, 2173, 2190, 2178, 2199, 2203, 2207,
     2211, 2219, 2136, 2222, 2228, 2240, 2232, 2245, 2253, 2265,
     2249, 2268, 2286, 2294, 2276, 2290, 2299, 2309, 2330, 2325,
     2303, 2333, 2336, 2340, 2357, 2363, 2366, 2371, 2379, 2374,

     2406, 2400, 2411, 2433, 2390, 2396, 2440, 2437, 2445, 2450,
     2456, 2429, 2475, 2494, 2472, 2505, 2479, 2510, 2499, 2513,
     2468, 2533, 2536, 2544, 2548, 2522, 2560, 2555, 2570, 2576,
     2579, 2602, 2593, 2605, 2609, 2614, 2620, 2624, 2634, 2637,
     2643, 2659, 2647, 2651, 2664, 2669, 2682, 2693, 2697, 2701,
     2706, 2709, 2714, 2718, 2738, 3398, 3465, 9607,  368,    0,
     3397, 3379, 3411, 3369, 3372, 1107,    0, 3359, 3354, 3386,
     3347, 3350, 1968, 3328, 3327, 3322, 2723, 3317, 3314, 3309,
     2074, 3308, 3296, 3295, 9607,  919, 1458,    0, 3294, 3270,
     3301, 3263, 3265, 3299, 3282, 2758, 3239, 3238, 3236, 2796,

     3234, 3233, 3231, 2140, 1238, 1393, 3241, 3235, 3248, 3226,
     1764, 1514, 3221, 3219, 3226, 3206, 9607, 2799, 3170, 3161,
     3156, 2812, 3152, 3151, 1493, 2782, 2157, 3149, 3212, 3209,
     3190, 1097, 2182, 3135, 3134, 3129, 2195, 3127, 3116, 3115,
     2773, 3109, 3108, 3105, 3157, 9607, 1818, 2881, 1267, 1056,
      149,  700, 1358, 2260, 3081, 3061, 3043, 2783, 3042, 3037,
     1528, 2836, 2317, 3006, 1991, 2917,   86, 1849,  349, 1204,
     1953, 2425, 3004, 3003, 2999, 2488, 2997, 2989, 3039, 9607,
     3022, 2529, 2977, 2972, 2967, 2735, 2954, 2945, 2935, 1990,
     1576, 2945, 2942, 2959, 2931, 9607, 2748, 2913, 2907, 2906,

     2792, 2831, 2823, 2806, 2842, 2846, 2868, 2878, 2881, 2908,
     2900, 2913, 2917, 2935, 2922, 2946, 2954, 2958, 2967, 2950,
     2972, 2983, 2990, 2962, 3008, 2993, 3012, 3016, 3021, 3026,
     3031, 3037, 3048, 3052, 3055, 3066, 3062, 3075, 3071, 3081,
     3091, 3086, 3094, 3098, 3116, 3109, 3120, 3136, 3129, 3141,
     3152, 3157, 3163, 3174, 3170, 3178, 3183, 3186, 3191, 3197,
     3200, 3219, 3224, 3212, 3241, 3245, 3254, 3259, 3262, 3268,
     3273, 3279, 3285, 3282, 3290, 3300, 3303, 3309, 3340, 3317,
     3322, 3328, 3344, 3350, 3357, 3363, 3366, 3371, 3376, 3383,
     3386, 3399, 3389, 3405, 3411, 3421, 3443, 3425, 3430, 3446,

     3455, 3460, 3465, 3480, 3486, 3490, 3470, 3501, 3515, 3505,
     3509, 3519, 3524, 3527, 3549, 3535, 3563, 3544, 3555, 3569,
     3574, 3582, 3589, 3603, 3592, 3599, 3609, 3617, 3612, 3624,
     3636, 3657, 3629, 3632, 3647, 3653, 3672, 3666, 3690, 3678,
     3693, 3696, 3712, 3701, 3720, 3707, 3715, 3727, 3750, 3734,
     3755, 3737, 3769, 3774, 3761, 3777, 3781, 3797, 3794, 3800,
     2959, 2946, 2906, 9607, 2901, 2879, 2926, 2913, 2874, 9607,
     2876, 2870, 2752, 2837, 2835, 2821, 2768, 2820, 2810, 2791,
     2790, 2820, 1392, 2848, 2832, 2794, 9607, 2795, 2789, 9607,
     2817, 3835, 2767, 2766, 2764, 3855, 2757, 2747, 2734, 3044,

     2714, 2713, 2706, 1507,    0, 2720, 2717, 2746, 2705, 2698,
     1737,    0, 2696, 2693, 2724, 2681, 2679, 3858, 2655, 2634,
     2631, 3873, 2628, 2602, 2600, 2015, 1707, 2610, 2603, 2618,
     2598, 3879, 2586, 2576, 2569, 1445, 2566, 2802, 2554, 2553,
     2544, 3436, 2541, 2533, 2528, 3948, 1169, 1290, 1328, 3477,
     2527, 2519, 2504, 3586, 2499, 2492, 2467, 2018, 1774, 2476,
     2475, 2491, 2471, 3812, 2456, 2454, 2433, 3984, 1830, 1918,
     1544, 3815, 2423, 2417, 2411, 2447, 3818, 2396, 2394, 2388,
     1811,    0, 2400, 2400, 2420, 2367, 2370, 3821, 2351, 2348,
     2330, 3824, 2325, 2323, 3842, 3884, 3889, 3892, 3899, 3961,

     3913, 3967, 3946, 3929, 3976, 3979, 3989, 4000, 4003, 4011,
     4021, 4015, 4024, 4033, 4043, 4036, 4047, 4050, 4039, 4058,
     4081, 4093, 4097, 4104, 4107, 4114, 4117, 4120, 4123, 4128,
     4131, 4136, 4139, 4177, 4142, 4185, 4162, 4198, 4202, 4206,
     4210, 4217, 4220, 4225, 4232, 4235, 4247, 4240, 4243, 4274,
     4265, 4256, 4282, 4301, 4290, 4297, 4279, 4314, 4306, 4311,
     4319, 4340, 4322, 4345, 4356, 4361, 4337, 4380, 4377, 4386,
     4394, 4399, 4415, 4402, 4405, 4420, 4411, 4427, 4441, 4424,
     4435, 4444, 4470, 4482, 4485, 4489, 4501, 4506, 4510, 4513,
     4516, 4519, 4526, 4545, 4531, 4580, 4548, 4575, 4585, 4556,

     4539, 4595, 4604, 4588, 4611, 4618, 4625, 4629, 4614, 4622,
     4645, 4635, 4651, 4668, 4654, 4659, 4672, 4685, 4689, 4692,
     4708, 4715, 4699, 4726, 4718, 4729, 4722, 4733, 4753, 4756,
     4746, 4762, 4772, 4776, 4790, 4783, 4793, 4796, 2386, 2373,
     3827, 2303, 2294, 2285, 2346, 2324, 4819, 2274, 2264, 2257,
     2303, 4564, 2237, 2227, 2217, 4769, 2216, 2186, 2220, 2182,
     2165, 2147, 2184, 2127, 2117, 2106, 4869, 2080, 2079, 2072,
     1915,    0, 2086, 2082, 2105, 2066, 2068, 3900, 4829, 2047,
     2046, 2032, 4850, 2009, 2003, 3845, 1990, 1974, 1973, 3849,
     1954, 1935, 1934, 1994,    0, 1921, 1910, 1927, 1883, 1879,

     3852, 1852, 1844, 1835, 3865, 1797, 1763, 1754, 1778, 1727,
     1727, 1677, 1676, 1667, 3868, 1650, 1636, 1632, 4826, 4839,
     4857, 4860, 4816, 4854, 4863, 4866, 4886, 4894, 4876, 4897,
     4924, 4931, 4934, 4940, 4955, 4958, 4944, 4968, 4965, 4961,
     4952, 4978, 4988, 5002, 5015, 5023, 5032, 5035, 5028, 5038,
     5043, 5048, 5051, 5057, 5065, 5070, 5078, 5098, 5105, 5112,
     5115, 5119, 5124, 5134, 5140, 5146, 5137, 5159, 5154, 5178,
     5162, 5169, 5183, 5194, 5203, 5200, 5208, 5219, 5216, 5224,
     5238, 5243, 5249, 5227, 5232, 5258, 5264, 5274, 5281, 5286,
     5292, 5298, 5304, 5307, 5312, 5318, 5340, 5321, 5336, 5328,

     5353, 5348, 5361, 5378, 5367, 5375, 5383, 5394, 5397, 5409,
     5403, 5424, 5415, 5432, 5421, 5438, 5441, 5457, 5451, 5464,
     5478, 5470, 5481, 5487, 5495, 5499, 5505, 5512, 5520, 5525,
     5537, 5541, 5545, 5549, 5554, 1628, 1658, 1619, 9607, 4994,
     1599, 1593, 1568, 1559, 1574, 1516, 1518, 1413, 5578, 1366,
     1365, 1333, 1308, 1276, 1296, 1242, 1199, 1194, 3993, 1164,
     1103, 1082, 1030,  968, 5569, 5562, 5575, 5583, 5586, 5591,
     5604, 5608, 5617, 5611, 5623, 5633, 5649, 5658, 5640, 5646,
     5653, 5665, 5671, 5683, 5687, 5690, 5725, 5719, 5713, 5707,
     5728, 5732, 5737, 5748, 5751, 5754, 5762, 5775, 5768, 5782,

     5791, 5796, 5786, 5811, 5830, 5816, 5822, 5840, 5846, 5851,
     5836, 5854, 5861, 5857, 5884, 5871, 5900, 5880, 5894, 5911,
     5918, 5921, 5929, 5925, 5934, 5944, 5938, 5950, 5959, 5984,
     5966, 5979, 5993, 5988, 5998, 6005, 6009, 6023, 6028, 6013,
     6043, 6055, 6020, 6033, 6063, 6069, 6077, 6087, 6093, 6097,
     6104, 6101, 6110, 6113, 6118, 6124, 6132, 1000,  866,  810,
      754,  750, 6127, 6135, 6159, 6147, 6143, 6168, 6151, 6193,
     6172, 6181, 6197, 6205, 6201, 6208, 6213, 6217, 6237, 6230,
     6243, 6251, 6247, 6226, 6271, 6255, 6274, 6280, 6284, 6287,
     6297, 6292, 6301, 6309, 6312, 6318, 6315, 6328, 6334, 6342,

     6347, 6351, 6358, 6355, 6388, 6377, 6384, 6396, 6391, 6405,
     6413, 6421, 6416, 6424, 6427, 6431, 6438, 6452, 6455, 6434,
     6459, 6462, 6470, 6488, 6492, 6495, 6517, 6499, 6502, 6520,
     6524, 6527, 6534, 6530, 6538, 6542, 6556, 6559, 6564,  746,
     9607, 6567, 6574, 6584, 6588, 6602, 6596, 6599, 6613, 6606,
     6628, 6623, 6633, 6638, 6643, 6671, 6660, 6663, 6668, 6677,
     6687, 6692, 6699, 6705, 6702, 6708, 6718, 6725, 6741, 6732,
     6735, 6762, 6766, 6772, 6775, 6779, 6795, 6782, 6789, 6802,
     6798, 6809, 6805, 6820, 6812, 6816, 6838, 6843, 6852, 6866,
     6870, 6876, 6879, 6882, 6885, 9607, 6888, 6898, 6912, 6909,

     6901, 6906, 6945, 6920, 6948, 6956, 6915, 6969, 6974, 6977,
     6980, 6986, 6989, 6992, 6983, 6995, 7017, 7002, 7049, 7005,
     7052, 7023, 7014, 7060, 7063, 7071, 7077, 7080, 7083, 7086,
     7089, 7094, 7098, 7117, 7106, 7110, 7144, 7120, 7154, 7160,
     7165, 7175, 7125, 7179, 7182, 7185, 7189, 7200, 7193, 7215,
     7204, 7225, 7222, 7247, 7254, 7210, 7259, 7264, 7269, 7272,
     7281, 7289, 7292, 7284, 7296, 7309, 7319, 7304, 7313, 7331,
     7346, 7338, 7351, 7354, 7359, 7369, 7363, 7373, 7376, 7385,
     7380, 7393, 7434, 7388, 7418, 7423, 7443, 7448, 7453, 7457,
     7460, 7463, 7468, 7478, 7491, 7481, 7497, 7517, 7523, 7526,

     7536, 7539, 7545, 7551, 7554, 7557, 7560, 7580, 7563, 7586,
     7595, 7571, 7583, 7601, 7626, 7621, 7629, 7642, 7649, 7645,
     7655, 7658, 7662, 7685, 7666, 7670, 7688, 7703, 7691, 7712,
     7720, 7724, 7727, 7730, 7733, 7745, 7748, 7751, 7757, 7766,
     7760, 7787, 7774, 7790, 9607, 7864, 7883, 7902, 7921, 7940,
     7959, 7978, 7997, 8016, 8035, 8054, 8073, 8077, 8096, 8104,
     8111, 8129, 8147, 8156, 8165, 8183, 8201, 8219, 8238, 8257,
     8276, 8295, 8314, 8332, 8350, 8359, 8377, 8386, 8404, 8422,
     8441, 8460, 8469, 8488, 8507, 8511, 8519, 8524, 8531, 8541,
     8560, 8579, 8597, 8615, 8624, 8628, 8637, 8655, 8673, 8691,

     8695, 8714, 8733, 8752, 8771, 8790, 8808, 8812, 8831, 8849,
     8867, 8886, 8895, 8913, 8922, 8926, 8944, 8962, 8980, 8999,
     9008, 9012, 9031, 9050, 9059, 9066, 9073, 9082, 9101, 9111,
     9130, 1838, 1887, 9139, 9148, 9157, 9175, 1915, 9193, 9211,
     9215, 9233, 9251, 9270, 9274, 9292, 9311, 9320, 9329, 9338,
     9356, 9375, 9384, 9393, 9412, 9416, 9435, 9444, 9453, 9462,
     9471, 9478, 9482, 9488, 9506, 9513, 9528, 9542, 1925, 2021,
     9560, 9578, 9587, 2095, 2096, 2122
    } ;

static yyconst flex_int16_t yy_def[1977] =
    {   0,
     1845,    1, 1846, 1846,    1,    1, 1847, 1847, 1848, 1848,
     1845,   11,   11,   11, 1845,   15,   15,   15, 1849, 1849,
     1850, 1850, 1845,   23, 1851, 1851, 1852, 1852, 1853, 1853,
     1845,   31, 1854, 1854, 1845,   35, 1855, 1855, 1845,   39,
     1856, 1856, 1845, 1845, 1845, 1845, 1845, 1857, 1845, 1845,
     1858, 1859, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1860, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1861, 1861,
     1861, 1845, 1845, 1861, 1861,   75,   75, 1861,   75,   75,
     1861, 1861, 1861,   75,   75,   75,   75,   75, 1861,   75,
       75,   75, 1861,   75,   75, 1861, 1861, 1845, 1845, 1845,

     1845, 1845, 1845, 1845, 1845, 1845, 1862, 1862, 1845, 1845,
     1845, 1845, 1863, 1863, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1864, 1845, 1845, 1845, 1845, 1865, 1845,
     1845, 1845, 1866, 1866, 1866, 1867, 1867, 1845, 1845, 1845,
     1845, 1845, 1845, 1868, 1845, 1845, 1845, 1869, 1869, 1845,
     1845, 1845, 1870, 1870, 1871, 1845, 1845, 1872, 1873, 1874,
     1874, 1845, 1845, 1845, 1875, 1875, 1875, 1845, 1845, 1845,
     1845, 1876, 1845, 1845, 1845, 1877, 1877, 1877, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1878, 1845, 1845,
     1845, 1879, 1879, 1880, 1845, 1845, 1881, 1845, 1882, 1845,

     1883, 1883, 1845, 1845, 1845, 1884, 1885, 1845, 1845, 1845,
     1886, 1845, 1845, 1845, 1845, 1887, 1888, 1888, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1889, 1890, 1845, 1845,
     1845, 1889, 1891, 1845, 1889, 1889, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1889,  252, 1889, 1889, 1889, 1889, 1889,  252, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,

     1889,  250,  250, 1889,  250,  250, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889,  250, 1889, 1889, 1889, 1845,
     1845, 1845, 1845, 1889, 1845, 1845, 1892, 1893, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1894, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1895,
     1896, 1845, 1845, 1845, 1895, 1845, 1845, 1897, 1845, 1845,
     1845, 1897, 1845, 1845, 1898, 1898, 1898, 1899, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1900, 1901, 1845, 1845, 1845, 1900, 1845, 1845, 1902, 1845,

     1845, 1903, 1845, 1845, 1904, 1845, 1905, 1845, 1845, 1906,
     1845, 1845, 1845, 1845, 1907, 1908, 1845, 1845, 1845, 1909,
     1907, 1845, 1845, 1910, 1910, 1911, 1845, 1845, 1845, 1912,
     1845, 1913, 1845, 1845, 1845, 1913, 1845, 1845, 1914, 1914,
     1845, 1845, 1845, 1915, 1916, 1845, 1845, 1845, 1915, 1845,
     1845, 1917, 1918, 1919, 1845, 1920, 1845, 1920, 1920, 1920,
     1920, 1920, 1920, 1921, 1922, 1845, 1845, 1845, 1923, 1921,
     1845, 1845, 1924, 1924, 1845, 1924, 1924, 1924, 1924, 1924,
     1845, 1925, 1845, 1845, 1845, 1845, 1845, 1926, 1845, 1926,
     1845, 1845, 1845, 1927, 1845, 1845, 1845, 1928, 1845, 1845,

     1928, 1929, 1845, 1930, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,

     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
     1928, 1928, 1928, 1928, 1928, 1845, 1931, 1845, 1845, 1932,
     1845, 1845, 1845, 1845, 1845, 1845, 1933, 1845, 1845, 1845,
     1845, 1845, 1934, 1845, 1845, 1845, 1935, 1845, 1845, 1845,
     1936, 1845, 1845, 1845, 1845, 1937, 1845, 1938, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1939, 1845, 1845, 1845, 1940,

     1845, 1845, 1845, 1941, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1942, 1845, 1845,
     1845, 1943, 1845, 1845, 1944, 1845, 1945, 1845, 1946, 1946,
     1947, 1947, 1948, 1845, 1845, 1845, 1949, 1845, 1845, 1845,
     1950, 1845, 1845, 1845, 1951, 1845, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1953, 1845, 1845, 1845, 1954, 1845, 1845,
     1955, 1845, 1956, 1845, 1957, 1957, 1957, 1957, 1957, 1957,
     1957, 1958, 1845, 1845, 1845, 1958, 1845, 1845, 1845, 1845,
     1845, 1959, 1845, 1845, 1845, 1959, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1960, 1845, 1845, 1845,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1845, 1962, 1845, 1845, 1845, 1845, 1845, 1963, 1845, 1845,
     1845, 1845, 1964, 1845, 1845, 1845, 1964, 1845, 1845, 1845,
     1845, 1965, 1965, 1845, 1966, 1845, 1845, 1845, 1845, 1845,
     1845, 1967, 1845, 1845, 1845, 1967, 1845, 1845, 1845, 1968,

     1845, 1845, 1845, 1845, 1969, 1845, 1845, 1845, 1845, 1845,
     1845, 1970, 1845, 1845, 1845, 1845, 1845, 1971, 1845, 1845,
     1845, 1971, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1972, 1845, 1845, 1845, 1947, 1845, 1949, 1845, 1845,
     1845, 1949, 1845, 1845, 1845, 1952, 1952, 1952, 1952, 1953,
     1845, 1845, 1845, 1953, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1973, 1845, 1845, 1845, 1957, 1957, 1957,
     1957, 1958, 1845, 1845, 1845, 1845, 1959, 1845, 1845, 1845,
     1845, 1974, 1845, 1845, 1845, 1845, 1845, 1960, 1845, 1845,
     1845, 1960, 1845, 1845, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1845, 1845,
     1964, 1845, 1845, 1845, 1845, 1845, 1967, 1845, 1845, 1845,
     1845, 1968, 1845, 1845, 1845, 1968, 1845, 1845, 1969, 1845,
     1845, 1845, 1970, 1845, 1845, 1845, 1971, 1845, 1845, 1845,
     1845, 1975, 1845, 1845, 1845, 1845, 1845, 1845, 1972, 1845,
     1845, 1845, 1972, 1845, 1845, 1949, 1845, 1845, 1845, 1953,
     1845, 1845, 1845, 1845, 1976, 1845, 1845, 1845, 1845, 1845,

     1973, 1845, 1845, 1845, 1973, 1845, 1845, 1845, 1845, 1845,
     1974, 1845, 1845, 1845, 1960, 1845, 1845, 1845, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1845, 1845, 1845, 1845, 1968,
     1845, 1845, 1845, 1845, 1975, 1845, 1845, 1845, 1972, 1845,
     1845, 1845, 1845, 1845, 1976, 1845, 1845, 1845, 1973, 1845,
     1845, 1845, 1845, 1845, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1845, 1845, 1845,
     1845, 1845, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1845,
     1845, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1845, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1961, 1961, 1961, 1961,    0, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,

     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845
    } ;

static yyconst flex_int16_t yy_nxt[9682] =
    {   0,
       44,   45,   46,   45,   47,   48,   49,   50,   51,   44,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   69,   69,
       69,   69,   69,   70,   71,   69,   72,   44,   73,   69,
       74,   75,   76,   77,   78,   79,   80,   69,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   69,   97,   98,   99,  100,   44,
       44,  101,  102,  103,  105,  105,  207,  208,  106,  106,
       44,  154,  108,   44,   44,  154,  108,   44,  198,  109,
      110,  410,  199,  109,  110,   44,  475,  114,   44,  155,

      115,  704,   44,  155,  116,   44,   44,  114,   44,   44,
      115,  134,   44,   44,  116,  134,   44,   44,  330,  149,
       44,  149,  166,   44,  225,  226,  167,   44,  150,  151,
      150,  151,   44,  219,  166,   44,  220,  152,  167,  152,
       44,  769,  177,   44,  332,  333,  111,  135,  112,  331,
      111,  135,  112,   44,  457,  193,   44,  195,  195,  195,
      212,  117,  213,  118,  404,  178,  195,  195,  195,  194,
      197,  117,  405,  118,  119,  120,  121,  122,  119,  119,
      119,  119,  119,  119,  119,  123,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      119,  119,  119,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      125,  119,  119,  119,  119,  126,  127,  128,  119,  120,
      121,  122,  119,  119,  119,  119,  119,  119,  119,  123,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  119,  119,  119,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  125,  119,  119,  119,  119,  130,
      131,  132,   44,  202,  137,   44,   44,  209,  137,   44,
       44,  138,  177,   44,   44,  138,  193,   44,  215, 1845,
      216,  210,  408,  426,  139,  221,  409,  198,  139,  427,
      194,  199,  218,  377,  385,  178,  358,  358,  358,  475,
      203,  204,  205,  222,  223,  218,  224,  248,  386,  227,
      206,  227,  408,  251,  249,  387,  409,  252,  358,  358,
      358,  250,  661,  253,  227,  662,  227,  659,  140,  961,
      141,  227,  140,  227,  141,   44,   44,  142,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,  143,
       44,   44,  144,  144,  144,  144,  144,  144,  144,  144,
      144,   44,   44,   44,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,   44,   44,   44,   44,   44,  145,  146,  147,   44,
      156,  157,  156,   44,  158,   44,   44,   44,   44,  159,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  160,  160,  160,  160,

      160,  160,  160,  161,  160,   44,   44,   44,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,   44,   44,   44,   44,   44,
      162,  163,  164,   44,  168,  169,  168,   44,   44,   44,
       44,   44,   44,   44,  170,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,  171,   44,
      172,  172,  172,  172,  172,  172,  172,  172,  172,   44,
       44,   44,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,   44,
       44,   44,   44,   44,  173,  174,  175,  179,  180,  181,
      182,  179,  183,  179,  179,  179,  179,  184,  179,  179,
      179,  179,  179,  179,  179,  185,  179,  179,  179,  179,
      186,  187,  179,  179,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  179,  179,  179,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  179,  179,  179,  179,  179,  189,  190,
      191,  228,  260,  491,  228,  426,  227,  358,  358,  358,

      261,  427,  228,  227,  277,  457,  262,  266,  278,  263,
      228,  264,  265,  492,  232,  228,  227,  227,  279,  228,
      267,  227,  268,  280,  369,  370,  371,  227,  227,  406,
      406,  406,  411,  412,  276,  243,  406,  406,  406,  244,
      441,  440,  229,  230,  231,  229,  230,  231,  233,  245,
      207,  208,  246,  229,  230,  231,  228,  275, 1048,  247,
      285,  229,  230,  231,  286,  228,  229,  230,  231,  228,
      229,  230,  231,  489,  287,  489,  668,  227,  490,  669,
      288,  235, 1696,  659,  227, 1845, 1641,  236,  269,  237,
      270,  238,  685,  239,  240,  241,  242,  271,  272,  377,

      254,  255,  256,  273,  274,  257,  686,  229,  230,  231,
      258,  281,  259,  228,  475,  227,  229,  230,  231,  282,
      229,  230,  231,  503, 1459,  283,  301,  660,  227,  213,
      302,  284,  227,  289,  290,  227,  227,  291,  322,  666,
      227,  486,  323,  227,  295,  292,  227,  293,  296,  294,
      227,  297,  227,  300,  486,  227,  227,  726,  298,  407,
      487,  299,  227,  769,  229,  230,  231,  303,  227,  304,
      228,  305,  486,  361,  704,  306,  228,  307,  308,  228,
     1449,  309,  504,  667,  227,  486,  310,  689,  227,  311,
      690,  227,  312,  227,  687,  313,  314,  324,  426,  339,

      325,  326,  315,  329,  730,  316,  328,  327,  317,  319,
      227,  320,  318,  350,  321,  694,  727,  227,  390,  390,
      390,  229,  230,  231,  362,  363,  364,  229,  230,  231,
      229,  230,  231,  340,  379,  695, 1440,  392,  688,  341,
      413,  413,  413,  982,  342,  414,  343,  351,  445,  344,
      413,  413,  413,  352,  465,  414,  404,  983,  353,  416,
      354,  411,  412,  355,  405,  428,  428,  428,  380,  416,
      428,  428,  428,  465,  381,  429,  433,  434,  435,  382,
      429,  383,  457,  458,  384,  442,  442,  442,  393,  394,
      395,  442,  442,  442,  442,  442,  442,  441,  440,  446,

      447,  448,  195,  195,  195,  466,  467,  468,  705,  474,
      417,  418,  419,  475,  228,  420,  493,  459,  228,  469,
      417,  418,  419,  460,  466,  467,  468, 1640,  461,  228,
      462,  501,  228,  463,  483,  484,  485,  215, 1315,  216,
      228,  475,  706,  476,  228,  358,  358,  358,  707,  477,
      228,  218,  457,  708,  478,  709,  479, 1562,  710,  480,
      228,  457,  457,  506,  218,  229,  230,  231,  505,  229,
      230,  231,  507,  508,  495,  496,  497,  511,  228,  510,
      229,  230,  231,  229,  230,  231,  228,  762,  752,  228,
      769,  229,  230,  231,  509,  229,  230,  231,  228,  513,

      512,  229,  230,  231,  228,  674,  675,  676,  228,  428,
     1047,  229,  230,  231,  228,  227,  751, 1036,  565,  228,
      566,  227,  567,  516,  228,  514,  666,  515,  967,  229,
      230,  231,  518,  568,  569,  503,  227,  229,  230,  231,
      229,  230,  231,  521,  517,  228,  763,  522,  228,  229,
      230,  231, 1305,  475,  228,  229,  230,  231,  457,  229,
      230,  231,  519,  520,  228,  229,  230,  231,  228,  457,
      229,  230,  231, 1561,  457,  229,  230,  231,  538,  523,
      524,  525,  457,  526,  228,  544,  528,  228,  527,  529,
      537,  228,  539,  475,  504,  530,  229,  230,  231,  229,

      230,  231,  531,  771,  532,  229,  230,  231,  228,  533,
      534,  545,  228,  753,  475,  229,  230,  231,  228,  229,
      230,  231,  535,  751,  770,  536,  540,  751,  228,  749,
      541,  542,  750,  228, 1459,  229,  230,  231,  229,  230,
      231,  228,  229,  230,  231,  228,  554,  543,  546,  550,
      547,  555,  228, 1298, 1298,  228,  548, 1004,  228,  229,
      230,  231, 1070,  229,  230,  231,  559,  549,  228,  229,
      230,  231,  457,  475,  228,  556,  552,  228,  551,  229,
      230,  231,  553,  228,  229,  230,  231,  228,  557,  558,
      228,  560,  229,  230,  231,  457,  229,  230,  231,  228,

     1298, 1005,  563,  229,  230,  231,  229,  230,  231,  229,
      230,  231,  564,  228,  561,  767,  228,  761,  768,  229,
      230,  231,  751,  570,  562,  229,  230,  231,  229,  230,
      231,  572,  228,  457,  229,  230,  231,  228,  229,  230,
      231,  229,  230,  231,  228,  751, 1290,  571,  228,  573,
      229,  230,  231,  228,  574,  576,  369,  370,  371,  575,
      227,  227,  228,  457,  229,  230,  231,  229,  230,  231,
      228,  579,  581,  227,  577,  228,  578,  582, 1286,  580,
      228,  583,  589,  229,  230,  231,  228,  751,  229,  230,
      231,  228,  586,  584,  587,  229,  230,  231,  228,  229,

      230,  231,  228, 1283,  229,  230,  231,  228,  585,  590,
      228,  593, 1049,  229,  230,  231,  685,  228,  588,  591,
      594,  229,  230,  231,  595,  592,  229,  230,  231,  228,
      377,  229,  230,  231,  228, 1560, 1449,  229,  230,  231,
      598,  596,  229,  230,  231, 1006,  597,  228, 1007,  229,
      230,  231,  228,  229,  230,  231,  228, 1845,  229,  230,
      231,  229,  230,  231,  228, 1036,  601,  228,  229,  230,
      231,  599, 1275,  600,  227,  622,  227,  687,  227,  984,
      229,  230,  231,  227,  602,  229,  230,  231,  606,  607,
      603,  604,  369,  370,  371,  390,  390,  390,  229,  230,

      231,  605,  726,  229,  230,  231,  228,  229,  230,  231,
      608,  228,  697,  698,  699,  229,  230,  231,  229,  230,
      231,  609,  227,  610,  228,  611, 1004,  228,  407,  612,
      227,  613,  227,  614,  227,  228,  227,  762,  616,  228,
      615,  227,  618,  227,  619,  617,  227,  620,  228,  631,
      621,  227,  623,  228,  475,  624,  228,  229,  230,  231,
      228,  727,  229,  230,  231,  228, 1013,  625,  626, 1014,
      228,  633,  627, 1275, 1275,  229,  230,  231,  229,  230,
      231,  630,  628,  228,  632,  629,  229,  230,  231,  228,
      229,  230,  231,  228,  634,  725,  763,  637,  228,  229,

      230,  231,  228,  769,  229,  230,  231,  229,  230,  231,
      635,  229,  230,  231,  636,  228,  229,  230,  231,  228,
      646,  229,  230,  231,  638,  641,  639,  228, 1083, 1267,
      653, 1084,  640,  228,  229,  230,  231,  642, 1256,  228,
      229,  230,  231,  643,  229,  230,  231,  647,  228,  229,
      230,  231,  228,  229,  230,  231,  361,  648,  644,  361,
      489,  649,  489, 1559,  645,  779,  229,  230,  231, 1440,
      229,  230,  231,  650,  227,  651,  655,  227,  229,  230,
      231,  652,  227,  457,  229,  230,  231,  711,  654, 1247,
      229,  230,  231, 1558,  390,  390,  390,  747, 1241,  229,

      230,  231, 1092,  229,  230,  231, 1464,  362,  363,  364,
      362,  363,  364,  392,  390,  390,  390,  406,  406,  406,
     1315,  712,  413,  413,  413,  445, 1085,  713,  719,  720,
      721, 1085,  714,  392,  715, 1085,  445,  716,  413,  413,
      413,  748,  465,  414,  413,  413,  413,  465,  502,  414,
      428,  428,  428,  433,  434,  435, 1011,  416,  410, 1273,
      429,  796, 1274,  416,  393,  394,  395,  433,  434,  435,
      442,  442,  442,  738,  739,  740,  446,  447,  448,  755,
      756,  757,  475, 1011,  393,  394,  395,  446,  447,  448,
      228,  765,  487,  466,  467,  468,  228, 1077,  466,  467,

      468,  773,  774,  775,  486,  783,  784,  785,  417,  418,
      419,  790,  228, 1463,  417,  418,  419,  486,  228,  798,
      799,  800,  228,  457, 1072,  228, 1296, 1012,  228, 1297,
     1081,  228,  502, 1462,  228,  766,  801,  747,  228,  197,
      475,  229,  230,  231,  228,  791,  803,  229,  230,  231,
      962,  792,  802,  962,  805,  804,  793,  228,  794,  475,
      228,  795,  806,  229,  230,  231,  228, 1305,  809,  229,
      230,  231,  228,  229,  230,  231,  229,  230,  231,  229,
      230,  231,  229,  230,  231,  229,  230,  231,  769,  229,
      230,  231,  228,  811,  807,  229,  230,  231,  228,  968,

      808,  228,  968, 1069,  228, 1461,  810,  228,  229,  230,
      231,  229,  230,  231, 1460,  228,  813,  229,  230,  231,
      815,  812, 1459,  229,  230,  231,  816,  985,  475,  228,
      985,  814,  228, 1458, 1271,  228,  725, 1259,  817,  228,
     1259, 1457,  228,  229,  230,  231,  818,  228,  761,  229,
      230,  231,  229,  230,  231,  229,  230,  231,  229,  230,
      231,  819,  826,  475, 1456,  228,  229,  230,  231,  228,
      820,  821,  823,  769,  228,  824, 1298,  228,  825,  822,
      229,  230,  231,  229,  230,  231,  229,  230,  231,  827,
      229,  230,  231,  229,  230,  231,  828,  228,  229,  230,

      231,  475,  830,  228, 1054, 1454,  228, 1071,  832, 1081,
      765,  228,  206, 1294,  228,  761,  229,  230,  231,  829,
      229,  230,  231,  228, 1290,  229,  230,  231,  229,  230,
      231,  831,  228, 1263, 1271,  228, 1263, 1294,  228,  974,
      975,  976,  228, 1042, 1453,  228,  834,  835,  229,  230,
      231,  833,  228, 1082,  229,  230,  231,  229,  230,  231,
     1286,  228,  229,  230,  231,  229,  230,  231,  228,  837,
      838,  836,  839, 1452,  229,  230,  231,  228, 1272, 1283,
      228, 1295,  840,  229,  230,  231,  229,  230,  231,  229,
      230,  231,  842,  229,  230,  231,  229,  230,  231,  841,

      843,  228, 1451,  229,  230,  231,  228, 1311, 1445,  228,
     1311, 1445,  229,  230,  231,  228, 1450, 1449,  845,  229,
      230,  231, 1448,  228, 1447,  844,  725,  228,  229,  230,
      231,  229,  230,  231, 1455,  228, 1446, 1455,  228,  848,
      847, 1275, 1022,  228,  846,  369,  370,  371,  228, 1444,
     1267,  228,  229,  230,  231,  849,  228,  229,  230,  231,
      229,  230,  231,  228,  853, 1015,  229,  230,  231,  850,
      854,  851, 1015,  228,  229,  230,  231,  852,  229,  230,
      231,  228,  870,  856,  228, 1015,  229,  230,  231,  229,
      230,  231,  858,  228,  229,  230,  231,  855,  228,  229,

      230,  231,  229,  230,  231,  410, 1008,  229,  230,  231,
      228, 1001, 1002, 1003,  229,  230,  231,  860,  859,  228,
     1008,  857,  862,  228,  229,  230,  231,  228, 1033, 1034,
     1035,  228,  229,  230,  231,  229,  230,  231,  861,  228,
     1008,  407,  228,  863,  229,  230,  231,  865,  228,  229,
      230,  231,  228,  433,  434,  435, 1443,  866,  864,  867,
      228,  229,  230,  231,  868,  228, 1039, 1040, 1041,  228,
      229,  230,  231,  228,  229,  230,  231,  869,  229,  230,
      231,  871,  229,  230,  231,  228, 1256, 1442,  228,  873,
      229,  230,  231,  229,  230,  231,  228, 1441,  872,  229,

      230,  231,  876,  229,  230,  231,  228, 1440,  874,  875,
      228,  229,  230,  231,  228, 1439,  229,  230,  231,  228,
      229,  230,  231,  228,  229,  230,  231,  996,  877,  228,
      882, 1051, 1052, 1053, 1438,  881,  229,  230,  231,  229,
      230,  231,  879,  883, 1247,  228,  878,  229,  230,  231,
      228, 1437,  379,  228,  880,  977,  228,  229,  230,  231,
      228,  229,  230,  231, 1436,  229,  230,  231,  884,  887,
      229,  230,  231, 1241,  229,  230,  231,  228,  885,  350,
      229,  230,  231,  228,  889,  886,  228,  888, 1065, 1066,
     1067,  228,  339, 1318,  228, 1092,  229,  230,  231,  228,

     1317,  229,  230,  231,  229,  230,  231,  229,  230,  231,
      228,  229,  230,  231,  892,  893,  228,  890, 1316,  894,
      228, 1315,  897,  895, 1314, 1313,  228,  891,  229,  230,
      231,  228,  904,  896,  229,  230,  231,  229,  230,  231,
      899,  502,  229,  230,  231,  229,  230,  231,  898,  228,
      229,  230,  231,  228, 1312, 1085,  905,  228,  786,  900,
      228,  229,  230,  231, 1310,  228, 1077,  229,  230,  231,
      228,  229,  230,  231, 1309,  901,  228,  229,  230,  231,
      907,  776,  229,  230,  231,  908,  906, 1308,  228,  911,
      909,  902,  228, 1072,  903,  228,  773,  774,  775,  228,

      229,  230,  231, 1307,  229,  230,  231,  910,  229,  230,
      231,  229,  230,  231,  228,  912,  229,  230,  231,  228,
      914,  229,  230,  231, 1306,  228, 1305,  229,  230,  231,
      228, 1300, 1299,  228, 1298, 1298,  916,  758,  913,  229,
      230,  231,  228,  229,  230,  231,  229,  230,  231,  915,
      229,  230,  231,  228,  917,  918,  228,  919,  920,  773,
      774,  775, 1293,  926,  228,  229,  230,  231,  228, 1054,
      229,  230,  231,  921, 1292,  228,  229,  230,  231,  927,
      228,  229,  230,  231,  229,  230,  231,  924,  922, 1291,
      228,  923,  925,  229,  230,  231,  228, 1290,  741,  228,

      783,  784,  785, 1289,  229,  230,  231,  229,  230,  231,
      929, 1042,  928,  228, 1288,  229,  230,  231,  930,  229,
      230,  231,  228, 1287, 1286,  228,  229,  230,  231,  228,
      931,  229,  230,  231,  228,  932,  733,  936,  933, 1285,
      228,  229,  230,  231,  228,  937, 1284,  229,  230,  231,
      229,  230,  231,  938,  228,  934, 1283,  228, 1277, 1276,
      935,  939, 1275,  228,  229,  230,  231,  228,  940, 1275,
      722,  228, 1270,  229,  230,  231,  229,  230,  231,  228,
      229,  230,  231,  944,  228,  229,  230,  231,  941,  228,
      942,  229,  230,  231,  943,  229,  230,  231, 1022,  947,

      946, 1269,  228,  945, 1268,  229,  230,  231,  229,  230,
      231,  948,  949,  228,  229,  230,  231,  228,  229,  230,
      231,  228,  229,  230,  231, 1267,  228,  950,  951,  228,
      229,  230,  231, 1266,  228,  229,  230,  231,  228, 1265,
      229,  230,  231,  361,  955,  410,  952, 1264,  954,  956,
      953, 1015, 1262,  229,  230,  231,  957,  958,  228,  390,
      390,  390,  959, 1261,  229,  230,  231,  407,  229,  230,
      231, 1260,  229,  230,  231, 1008, 1258,  229,  230,  231,
      229,  230,  231, 1257, 1256,  229,  230,  231, 1026,  229,
      230,  231,  960,  445,  362,  363,  364,  390,  390,  390,

      413,  413,  413,  465,  700,  414,  783,  784,  785,  229,
      230,  231,  228,  413,  413,  413,  392, 1250,  414, 1089,
     1090, 1091, 1027,  974,  975,  976,  228,  996, 1028,  993,
      994,  995,  416, 1029, 1249, 1030, 1248, 1247, 1031,  974,
      975,  976, 1058,  228,  446,  447,  448, 1246,  691, 1095,
      691,  228,  691,  984,  466,  467,  468, 1245,  376, 1098,
      681,  677,  228,  229,  230,  231,  228,  393,  394,  395,
     1019, 1020, 1021, 1039, 1040, 1041, 1059,  229,  230,  231,
     1244, 1097, 1060,  417,  418,  419,  457, 1061,  228, 1062,
      977, 1243, 1063, 1096,  229,  230,  231, 1103,  228, 1100,

     1046,  228,  229,  230,  231, 1242, 1099, 1241, 1046, 1046,
     1046, 1046, 1046,  229,  230,  231, 1101,  229,  230,  231,
      228, 1046, 1046, 1046, 1046, 1046, 1046,  475,  228,  670,
     1102,  670,  670,  228,  967, 1240, 1068,  228,  663,  229,
      230,  231,  228, 1105, 1068, 1068, 1068, 1068, 1068,  229,
      230,  231,  229,  230,  231,  228,  663, 1068, 1068, 1068,
     1068, 1068, 1068, 1106,  663, 1104,  228,  961, 1239, 1108,
      228,  229,  230,  231,  228, 1107, 1094, 1093,  228,  229,
      230,  231,  228, 1092,  229,  230,  231,  228,  229,  230,
      231, 1087,  228,  229,  230,  231, 1109, 1110, 1111, 1118,

     1086, 1085, 1112,  228, 1085,  498,  229,  230,  231, 1114,
      228, 1113, 1115,  228, 1120, 1080, 1116,  229,  230,  231,
     1117,  229,  230,  231,  786,  229,  230,  231,  228,  229,
      230,  231,  228,  229,  230,  231,  228, 1079,  229,  230,
      231,  228, 1078,  229,  230,  231,  228, 1077, 1121, 1119,
     1251,  228, 1076, 1122,  229,  230,  231,  228,  779, 1075,
     1124,  229,  230,  231,  229,  230,  231,  776,  228, 1074,
     1126, 1123,  228, 1073, 1072,  228,  470, 1128, 1125,  229,
      230,  231,  228,  229,  230,  231,  228,  229,  230,  231,
     1127,  228,  229,  230,  231,  228, 1130,  229,  230,  231,

     1129,  228,  229,  230,  231, 1132,  228, 1057,  229,  230,
      231,  228,  758, 1056,  228, 1253, 1254, 1255,  228,  229,
      230,  231, 1134,  229,  230,  231,  229,  230,  231,  228,
     1131, 1055, 1133,  229,  230,  231,  228,  229,  230,  231,
      228, 1137,  229,  230,  231, 1135,  229,  230,  231,  228,
     1136, 1054,  229,  230,  231, 1138,  228,  229,  230,  231,
     1139,  228,  229,  230,  231,  229,  230,  231, 1140,  229,
      230,  231,  228,  453, 1141,  449, 1142,  228, 1045,  741,
      229,  230,  231,  228, 1143, 1044, 1043,  229,  230,  231,
      228,  229,  230,  231,  228, 1145, 1144, 1042,  228,  436,

      229,  230,  231,  228, 1037,  733,  228,  229,  230,  231,
      732,  228,  229,  230,  231,  425, 1146,  228,  425,  421,
      228, 1025,  722,  229,  230,  231, 1024, 1148,  229,  230,
      231, 1023,  228, 1147,  229,  230,  231, 1149, 1150,  228,
     1022,  229,  230,  231,  228,  229,  230,  231, 1151,  229,
      230,  231, 1157, 1153,  229,  230,  231,  229,  230,  231,
     1152,  228,  229,  230,  231,  228, 1017, 1016,  229,  230,
      231,  229,  230,  231,  228, 1160, 1154, 1155, 1015,  228,
     1015, 1156,  228,  229,  230,  231, 1010, 1158,  228, 1009,
      229,  230,  231,  228, 1008,  229,  230,  231, 1159,  228,

     1008,  396,  228,  999,  700,  228,  998, 1161,  997,  996,
      228,  991,  229,  230,  231,  990,  229,  230,  231,  989,
      228,  988,  987,  228,  986,  229,  230,  231, 1162,  228,
      229,  230,  231,  229,  230,  231, 1164,  228, 1163,  229,
      230,  231,  228, 1167,  229,  230,  231, 1165,  228,  691,
      229,  230,  231,  229,  230,  231,  229,  230,  231, 1166,
      228,  229,  230,  231,  228,  372,  981, 1168, 1170, 1171,
      228,  229,  230,  231,  229,  230,  231,  228,  681,  365,
      229,  230,  231,  228,  980, 1169,  228,  677,  229,  230,
      231,  228,  979,  229,  230,  231,  228,  978,  977,  229,

      230,  231, 1172,  228,  972,  971,  228,  970,  969,  228,
     1173,  229,  230,  231,  670,  229,  230,  231, 1176,  228,
     1174,  229,  230,  231, 1175,  228,  966,  965,  229,  230,
      231,  228,  964,  963,  229,  230,  231,  229,  230,  231,
     1177,  228,  229,  230,  231,  228, 1179,  229,  230,  231,
      228, 1180,  663, 1178,  229,  230,  231,  229,  230,  231,
      229,  230,  231,  228, 1181, 1182,  228,  658,  334, 1184,
      229,  230,  231,  789,  498,  228,  229,  230,  231,  788,
      228,  787,  229,  230,  231,  228, 1193,  786, 1185,  781,
      228,  780,  229,  230,  231, 1183,  229,  230,  231, 1187,

      228,  229,  230,  231, 1188, 1186,  228, 1039, 1040, 1041,
      228,  490,  779, 1189,  229,  230,  231,  229,  230,  231,
      778,  228,  777,  776, 1190,  228,  229,  230,  231,  228,
     1191,  229,  230,  231, 1192,  228,  229,  230,  231,  228,
      473,  229,  230,  231,  228, 1196,  475,  228, 1051, 1052,
     1053,  229,  230,  231,  764,  228,  470,  229,  230,  231,
     1194,  229,  230,  231,  228,  760, 1197, 1195,  759,  228,
     1198,  758,  229,  230,  231,  228,  229,  230,  231, 1201,
      229,  230,  231,  228,  456, 1199,  229,  230,  231,  228,
      229,  230,  231,  457,  228,  229,  230,  231,  229,  230,

      231, 1200,  228, 1203,  746, 1202,  229,  230,  231,  228,
      453,  453,  228, 1204,  744,  229,  230,  231, 1205,  228,
      229,  230,  231,  228,  449,  743,  229,  230,  231,  228,
      742,  741,  228, 1206,  229,  230,  231,  228,  440,  736,
      229,  230,  231,  436,  228,  229,  230,  231,  735,  228,
     1208, 1207,  228,  229,  230,  231,  228, 1051, 1052, 1053,
      229,  230,  231,  229,  230,  231, 1211,  228, 1209, 1210,
      229,  230,  231,  228,  229,  230,  231,  228, 1213, 1212,
      229,  230,  231,  229,  230,  231,  228, 1215,  229,  230,
      231,  734,  228,  733,  732,  229,  230,  231,  228, 1214,

      229,  230,  231,  229,  230,  231,  430,  229,  230,  231,
      228, 1216,  425,  228,  728,  421,  228,  724,  229,  230,
      231,  228,  723,  722,  229,  230,  231,  228,  229,  230,
      231, 1217,  228,  717,  703,  228, 1219,  229,  230,  231,
      228, 1218,  396,  229,  230,  231, 1220,  228,  702,  229,
      230,  231,  701, 1225,  228, 1222, 1221,  228, 1226,  700,
     1223,  229,  230,  231,  229,  230,  231,  229,  230,  231,
      228, 1227,  229,  230,  231,  228,  693, 1224,  229,  230,
      231,  228, 1229,  229,  230,  231,  229,  230,  231,  228,
     1228,  229,  230,  231,  228,  692,  691,  228,  229,  230,

      231,  228, 1230, 1233,  691,  229,  230,  231,  229,  230,
      231,  376,  684, 1231,  228,  372, 1238,  228, 1232,  683,
      228,  229,  230,  231,  682,  681,  229,  230,  231,  680,
      365, 1234,  229,  230,  231, 1235,  390,  390,  390,  679,
      229,  230,  231,  678,  677,  229,  230,  231,  229,  230,
      231, 1237,  229,  230,  231, 1236,  390,  390,  390,  413,
      413,  413,  228,  672,  414,  229,  230,  231,  229,  230,
      231,  229,  230,  231,  413,  413,  413,  671,  670,  414,
     1278, 1278, 1278, 1302, 1303, 1304,  773,  774,  775,  783,
      784,  785, 1089, 1090, 1091, 1089, 1090, 1091,  974,  975,

      976, 1278, 1278, 1278,  228,  670,  993,  994,  995,  228,
      665,  664,  228,  229,  230,  231, 1039, 1040, 1041,  228,
     1051, 1052, 1053, 1302, 1303, 1304,  993,  994,  995, 1019,
     1020, 1021, 1319,  228,  663, 1321, 1302, 1303, 1304, 1089,
     1090, 1091,  663,  658, 1019, 1020, 1021,  656, 1320,  228,
     1280, 1281, 1282,  457, 1323,  229,  230,  231,  334,  500,
      229,  230,  231,  229,  230,  231,  228, 1046,  499,  197,
      229,  230,  231, 1326,  498, 1046, 1046, 1046, 1046, 1046,
      481,  228,  206,  472,  229,  230,  231,  228, 1046, 1046,
     1046, 1046, 1046, 1046,  475,  471,  228,  470,  197,  228,

      229,  230,  231, 1068, 1322,  206, 1325, 1324,  455,  228,
      453, 1068, 1068, 1068, 1068, 1068, 1327,  229,  230,  231,
      228,  453,  451,  228, 1068, 1068, 1068, 1068, 1068, 1068,
     1328,  228,  229,  230,  231,  228,  450,  449,  229,  230,
      231,  228,  443,  440,  228,  440,  438,  229,  230,  231,
      229,  230,  231,  228,  437,  436,  228, 1330,  431,  228,
      229,  230,  231,  228, 1302, 1303, 1304,  228,  430,  425,
      228,  229,  230,  231,  229,  230,  231, 1331,  228,  425,
     1329,  423,  229,  230,  231,  422,  229,  230,  231, 1334,
     1332, 1333,  229,  230,  231,  229,  230,  231, 1338, 1335,

     1336,  228,  421, 1337,  229,  230,  231,  229,  230,  231,
      229,  230,  231,  228,  229,  230,  231,  228,  229,  230,
      231,  229,  230,  231,  228,  401,  400,  228,  398,  229,
      230,  231,  397,  396,  228,  389,  388,  228, 1339,  376,
      228, 1341,  376,  228, 1340,  374,  373, 1348,  228,  372,
      367,  228,  229,  230,  231, 1343,  228, 1342,  366,  228,
      365,  359,  228,  357,  229,  230,  231, 1346,  229,  230,
      231, 1344,  356, 1345,  349,  229,  230,  231,  229,  230,
      231, 1347,  228, 1350, 1349,  229,  230,  231,  229,  230,
      231,  229,  230,  231,  229,  230,  231,  228,  347,  229,

      230,  231,  229,  230,  231,  228,  346,  229,  230,  231,
      229,  230,  231,  229,  230,  231,  345,  337,  228,  336,
      335, 1353,  228,  334,  234, 1351,  228,  214,  211,  200,
      228,  196, 1845,  229,  230,  231, 1352,  228,  142,  142,
      228, 1845, 1845, 1845, 1845,  228, 1845, 1845,  229,  230,
      231, 1354,  228, 1845, 1845,  228,  229,  230,  231, 1356,
      228, 1845, 1845,  228, 1845, 1845, 1357,  228, 1845,  229,
      230,  231, 1355,  229,  230,  231,  228,  229,  230,  231,
     1360,  229,  230,  231, 1358,  228, 1845, 1361,  229,  230,
      231,  229,  230,  231,  228, 1359,  229,  230,  231,  228,

     1845, 1845,  228,  229,  230,  231,  229,  230,  231, 1845,
      228,  229,  230,  231,  229,  230,  231,  228,  229,  230,
      231,  228, 1362, 1845, 1363, 1845,  228,  229,  230,  231,
     1364,  228, 1368, 1845,  228, 1845,  229,  230,  231,  228,
     1845, 1845,  228, 1845, 1845,  229,  230,  231, 1366, 1365,
      229,  230,  231,  229,  230,  231, 1367,  228, 1845, 1371,
      228,  229,  230,  231, 1370,  228, 1845, 1845,  229,  230,
      231, 1369,  229,  230,  231, 1372,  228,  229,  230,  231,
     1373,  228,  229,  230,  231,  229,  230,  231, 1377, 1845,
      229,  230,  231,  229,  230,  231, 1378,  228, 1375, 1845,

      228, 1376, 1845, 1374, 1845, 1845,  228, 1845,  229,  230,
      231,  229,  230,  231,  228, 1845,  229,  230,  231,  228,
     1845, 1845,  228, 1845, 1845,  228, 1845,  229,  230,  231,
     1380,  228,  229,  230,  231,  228, 1845, 1845, 1845, 1845,
      228, 1379, 1845, 1845,  228, 1381, 1384,  228,  229,  230,
      231,  229,  230,  231, 1382,  228, 1845,  229,  230,  231,
     1845,  228, 1383, 1845,  228,  229,  230,  231, 1845, 1386,
      229,  230,  231,  229,  230,  231,  229,  230,  231, 1385,
     1387, 1390,  229,  230,  231, 1388,  229,  230,  231, 1389,
      228,  229,  230,  231, 1391,  229,  230,  231,  229,  230,

      231, 1392,  228, 1845, 1845,  228,  229,  230,  231,  228,
     1845, 1845,  229,  230,  231,  229,  230,  231, 1393, 1845,
     1845,  228, 1845, 1845, 1845, 1845,  228, 1845, 1845, 1395,
      228, 1845, 1845,  228, 1845, 1394,  228, 1396, 1845,  228,
     1845,  229,  230,  231, 1397, 1845,  228, 1845, 1845, 1845,
     1845,  228, 1845,  229,  230,  231,  229,  230,  231,  228,
      229,  230,  231, 1398, 1399,  228, 1845, 1845,  228, 1845,
     1251, 1400,  229,  230,  231, 1403,  228,  229,  230,  231,
     1401,  229,  230,  231,  229,  230,  231,  229,  230,  231,
      229,  230,  231, 1402, 1845,  228, 1408,  229,  230,  231,

      228, 1405,  229,  230,  231,  228, 1845, 1845,  228, 1845,
      229,  230,  231, 1845, 1845,  228,  229,  230,  231,  229,
      230,  231, 1404, 1406,  228, 1845, 1845,  229,  230,  231,
     1407,  228, 1845, 1845,  228, 1253, 1254, 1255,  228, 1845,
     1845, 1411,  228, 1845, 1845,  228,  229,  230,  231,  228,
     1845,  229,  230,  231, 1409,  228,  229,  230,  231,  229,
      230,  231, 1413, 1410, 1412,  228,  229,  230,  231, 1845,
     1416,  228, 1845, 1415,  228,  229,  230,  231, 1414,  228,
     1845, 1845,  229,  230,  231,  229,  230,  231,  228,  229,
      230,  231,  228,  229,  230,  231,  229,  230,  231, 1845,

      229,  230,  231, 1845, 1417,  228,  229,  230,  231,  228,
     1418, 1845,  228, 1845, 1420, 1419,  229,  230,  231,  228,
     1845, 1845,  229,  230,  231,  229,  230,  231,  228, 1845,
      229,  230,  231, 1421, 1845,  228, 1845, 1845,  228,  229,
      230,  231,  228,  229,  230,  231,  228, 1425, 1845,  228,
     1845, 1422, 1423,  228, 1845, 1845,  229,  230,  231, 1424,
      229,  230,  231,  229,  230,  231,  228, 1845, 1426, 1427,
      229,  230,  231,  228, 1428, 1251,  228, 1845, 1845,  229,
      230,  231,  228, 1845, 1845, 1845,  229,  230,  231,  229,
      230,  231,  228,  229,  230,  231,  228,  229,  230,  231,

      229,  230,  231,  228,  229,  230,  231, 1429, 1845, 1845,
      228, 1845, 1431,  228, 1845, 1430,  228,  229,  230,  231,
      390,  390,  390, 1845,  229,  230,  231,  229,  230,  231,
     1278, 1278, 1278,  229,  230,  231,  228, 1845, 1432, 1435,
     1253, 1254, 1255,  229,  230,  231,  228,  229,  230,  231,
     1433, 1278, 1278, 1278,  229,  230,  231, 1434, 1845,  228,
     1845,  229,  230,  231,  229,  230,  231,  229,  230,  231,
      413,  413,  413, 1467,  228,  414, 1469,  228, 1845, 1465,
      228, 1845, 1845,  228, 1845, 1845,  228,  229,  230,  231,
      993,  994,  995, 1466, 1845, 1845,  228,  229,  230,  231,

     1280, 1281, 1282, 1845, 1845, 1845,  228, 1845, 1468, 1845,
      229,  230,  231, 1470,  228, 1845, 1845,  228, 1845, 1845,
     1471, 1280, 1281, 1282, 1474,  229,  230,  231,  229,  230,
      231,  229,  230,  231,  229,  230,  231,  229,  230,  231,
     1019, 1020, 1021, 1472,  228, 1473, 1845,  229,  230,  231,
     1845,  228, 1845, 1845,  228, 1845, 1475,  229,  230,  231,
      228, 1845, 1845, 1845,  228,  229,  230,  231,  229,  230,
      231, 1477,  228, 1845, 1845,  228, 1845, 1845,  228, 1845,
     1845,  228, 1845, 1476, 1483,  228, 1845, 1479,  228, 1845,
     1845, 1478, 1845, 1845, 1845,  229,  230,  231,  228, 1480,

     1251, 1845,  229,  230,  231,  229,  230,  231,  228, 1485,
     1845,  229,  230,  231, 1481,  229,  230,  231, 1482, 1484,
     1486, 1487,  228,  229,  230,  231,  229,  230,  231,  229,
      230,  231,  229,  230,  231,  228,  229,  230,  231,  229,
      230,  231, 1845,  228, 1845, 1845, 1489, 1488,  228,  229,
      230,  231,  228, 1845, 1845,  228, 1845, 1490,  228,  229,
      230,  231, 1845,  228, 1845, 1253, 1254, 1255,  228, 1845,
     1845,  228, 1845,  229,  230,  231, 1491,  228, 1845, 1845,
     1845, 1494, 1845, 1845, 1845,  228,  229,  230,  231, 1845,
      228, 1492, 1845, 1493,  229,  230,  231, 1497,  228,  229,

      230,  231, 1495,  229,  230,  231,  229,  230,  231,  229,
      230,  231, 1496, 1498,  229,  230,  231, 1499,  228,  229,
      230,  231,  229,  230,  231,  228, 1845, 1845,  229,  230,
      231, 1500,  228, 1845, 1845,  228,  229,  230,  231,  228,
     1845,  229,  230,  231,  228, 1845, 1501, 1845, 1845,  229,
      230,  231, 1845, 1845,  228, 1845, 1845,  228, 1845, 1502,
      228, 1845, 1845, 1503, 1845, 1845,  228, 1845, 1845,  229,
      230,  231, 1505, 1504,  228, 1845,  229,  230,  231,  228,
     1845, 1845,  228,  229,  230,  231,  229,  230,  231,  228,
      229,  230,  231, 1506, 1508,  229,  230,  231,  228, 1507,

     1845, 1509, 1510,  228, 1845,  229,  230,  231,  229,  230,
      231,  229,  230,  231,  228, 1845, 1845,  229,  230,  231,
      228, 1512, 1511,  228, 1845,  229,  230,  231,  228, 1513,
      229,  230,  231,  229,  230,  231,  228, 1845, 1845,  228,
      229,  230,  231, 1514,  228, 1845, 1845,  228, 1515,  229,
      230,  231,  228, 1845,  229,  230,  231, 1845,  228, 1516,
     1845, 1845, 1845,  228, 1845,  229,  230,  231, 1845,  228,
     1845,  229,  230,  231,  229,  230,  231, 1517,  228,  229,
      230,  231, 1518, 1519,  228, 1521, 1845,  229,  230,  231,
      229,  230,  231, 1520,  228,  229,  230,  231,  229,  230,

      231,  228, 1845,  229,  230,  231,  228, 1845, 1845,  229,
      230,  231,  228, 1845,  229,  230,  231, 1522,  228, 1845,
      229,  230,  231, 1845,  228, 1845, 1524,  228, 1845,  229,
      230,  231,  228, 1845, 1523,  229,  230,  231,  228, 1845,
     1845,  228, 1845, 1845, 1845,  229,  230,  231,  228, 1845,
     1845, 1525,  229,  230,  231, 1526,  228,  229,  230,  231,
      228, 1845, 1845,  229,  230,  231, 1527, 1845,  228,  229,
      230,  231, 1528,  228, 1845,  229,  230,  231,  229,  230,
      231,  228, 1530,  229,  230,  231, 1532,  228, 1529,  229,
      230,  231,  229,  230,  231,  228, 1531, 1845,  228,  229,

      230,  231, 1534,  228, 1845, 1845, 1533,  229,  230,  231,
     1539,  229,  230,  231,  228, 1536, 1845,  228, 1537,  229,
      230,  231, 1535,  228,  229,  230,  231, 1845, 1845,  228,
     1845, 1538,  229,  230,  231,  228, 1845, 1845,  229,  230,
      231,  228, 1845, 1845,  228, 1541,  229,  230,  231,  229,
      230,  231,  228, 1845,  229,  230,  231, 1540,  228, 1845,
     1845,  228, 1845, 1845, 1845,  229,  230,  231,  229,  230,
      231,  228, 1845, 1845,  229,  230,  231,  228, 1543, 1845,
      229,  230,  231, 1542,  228, 1845,  229,  230,  231, 1845,
      228, 1544,  229,  230,  231,  229,  230,  231,  228, 1845,

     1845,  228, 1845,  229,  230,  231, 1845,  228, 1845,  229,
      230,  231,  229,  230,  231,  228, 1845, 1545, 1548,  228,
     1845, 1546,  229,  230,  231,  228, 1845, 1845,  229,  230,
      231, 1547,  228, 1845, 1845,  229,  230,  231, 1845, 1551,
      228,  229,  230,  231, 1549,  228, 1845, 1845, 1550,  229,
      230,  231,  229,  230,  231, 1845, 1845,  228,  229,  230,
      231,  228, 1845, 1553, 1552,  228,  229,  230,  231,  228,
      229,  230,  231, 1554,  228, 1845,  229,  230,  231, 1278,
     1278, 1278,  228,  229,  230,  231, 1845, 1845, 1845,  228,
     1845,  229,  230,  231, 1555,  228,  229,  230,  231, 1845,

     1845, 1845, 1557,  228, 1556, 1845,  228, 1845,  229,  230,
      231,  228,  229,  230,  231, 1563,  229,  230,  231, 1564,
      229,  230,  231, 1845,  228,  229,  230,  231,  228, 1565,
     1845,  228, 1845,  229,  230,  231, 1566,  228, 1845, 1568,
      229,  230,  231,  228, 1845, 1567,  229,  230,  231, 1280,
     1281, 1282, 1569,  228,  229,  230,  231,  229,  230,  231,
      228, 1571,  229,  230,  231, 1572,  228, 1845, 1845,  228,
     1845, 1573, 1570,  228, 1845,  229,  230,  231,  228,  229,
      230,  231,  229,  230,  231,  228, 1845, 1845,  229,  230,
      231,  228, 1845, 1845,  229,  230,  231, 1574, 1576, 1579,

     1575, 1845, 1845,  228,  229,  230,  231,  228, 1845, 1577,
      228,  229,  230,  231, 1845, 1845, 1845,  229,  230,  231,
      229,  230,  231, 1578,  229,  230,  231,  228, 1845,  229,
      230,  231, 1845,  228, 1845, 1845,  229,  230,  231,  228,
     1845, 1845,  229,  230,  231,  228, 1845, 1845,  228, 1845,
     1845, 1584,  228, 1845,  229,  230,  231,  228,  229,  230,
      231,  229,  230,  231, 1845, 1580, 1583, 1582,  228, 1845,
     1845,  228, 1845, 1581,  228, 1845, 1845, 1845,  229,  230,
      231, 1586,  228, 1845,  229,  230,  231, 1585,  228, 1845,
      229,  230,  231, 1845, 1587,  228,  229,  230,  231,  229,

      230,  231,  228,  229,  230,  231,  228, 1845,  229,  230,
      231,  228, 1845, 1589, 1845, 1588,  228, 1845, 1845,  229,
      230,  231,  229,  230,  231,  229,  230,  231, 1590, 1845,
     1845,  228, 1845,  229,  230,  231,  228, 1845, 1845,  229,
      230,  231,  228, 1845, 1845, 1591,  229,  230,  231, 1592,
      228, 1845, 1845,  229,  230,  231,  228,  229,  230,  231,
      228, 1845,  229,  230,  231, 1845,  228,  229,  230,  231,
     1593,  228, 1845, 1845,  228, 1845, 1594,  228, 1599, 1845,
     1595,  228,  229,  230,  231, 1845, 1845,  229,  230,  231,
     1597,  228, 1845,  229,  230,  231, 1845, 1845, 1600, 1596,

      228,  229,  230,  231,  228, 1601, 1845,  229,  230,  231,
     1598,  229,  230,  231,  228, 1602, 1845,  229,  230,  231,
      228, 1845,  229,  230,  231,  229,  230,  231,  229,  230,
      231,  228,  229,  230,  231, 1604, 1606, 1603,  228, 1845,
     1845,  228,  229,  230,  231,  228, 1845, 1845, 1605,  228,
     1611,  229,  230,  231,  228,  229,  230,  231,  228, 1845,
     1845, 1845, 1608, 1845,  228,  229,  230,  231, 1607, 1845,
      228,  229,  230,  231, 1845, 1609, 1845, 1845, 1845,  228,
     1610, 1845,  229,  230,  231, 1845,  228, 1845, 1845,  229,
      230,  231,  229,  230,  231, 1612,  229,  230,  231,  228,

      229,  230,  231, 1613,  228,  229,  230,  231,  228,  229,
      230,  231, 1614,  228, 1845,  229,  230,  231,  228, 1845,
     1845,  229,  230,  231, 1616,  228, 1845, 1617, 1615,  228,
      229,  230,  231,  228, 1845, 1845, 1845,  229,  230,  231,
      228, 1619, 1845,  228, 1618, 1845, 1845, 1845,  228, 1621,
      229,  230,  231,  228, 1845,  229,  230,  231, 1620,  229,
      230,  231, 1845,  228,  229,  230,  231, 1622, 1623,  229,
      230,  231, 1624, 1845, 1625,  228,  229,  230,  231, 1628,
      229,  230,  231,  228,  229,  230,  231, 1626, 1845,  228,
     1845,  229,  230,  231,  229,  230,  231,  228, 1845,  229,

      230,  231, 1845, 1627,  229,  230,  231,  228, 1845, 1845,
     1845, 1845, 1845,  228,  229,  230,  231,  228, 1845, 1845,
     1629,  228, 1845, 1631,  228, 1845,  229,  230,  231, 1630,
      228, 1845, 1845,  228,  229,  230,  231, 1633,  228, 1845,
      229,  230,  231, 1634,  228, 1636, 1632,  228,  229,  230,
      231, 1642,  228, 1845, 1637,  228, 1845, 1845,  229,  230,
      231, 1638, 1635,  228,  229,  230,  231,  228,  229,  230,
      231,  228,  229,  230,  231,  229,  230,  231, 1639,  228,
     1845,  229,  230,  231,  229,  230,  231, 1645,  228,  229,
      230,  231,  228, 1644, 1845,  229,  230,  231,  229,  230,

      231,  228, 1845,  229,  230,  231,  229,  230,  231, 1647,
     1646, 1845, 1643,  228,  229,  230,  231,  228,  229,  230,
      231,  228,  229,  230,  231,  228, 1845, 1845,  228, 1845,
      229,  230,  231,  228, 1648, 1845, 1845,  228, 1845,  229,
      230,  231, 1845,  229,  230,  231,  228, 1845, 1845, 1845,
      228, 1649,  229,  230,  231, 1845, 1845,  228, 1650, 1845,
     1651, 1652, 1845,  228,  229,  230,  231,  228,  229,  230,
      231,  228,  229,  230,  231,  228,  229,  230,  231,  229,
      230,  231, 1653, 1655,  229,  230,  231, 1659,  229,  230,
      231,  228, 1845, 1657,  228, 1654, 1656,  229,  230,  231,

      228,  229,  230,  231,  228, 1845, 1658,  228,  229,  230,
      231, 1660,  228, 1845,  229,  230,  231,  228,  229,  230,
      231,  228,  229,  230,  231, 1663,  229,  230,  231,  228,
     1845, 1845,  228, 1661, 1845,  228, 1845, 1845,  228, 1845,
     1845, 1845,  229,  230,  231,  229,  230,  231,  228, 1845,
     1662,  229,  230,  231,  228,  229,  230,  231,  229,  230,
      231, 1845,  228,  229,  230,  231, 1664,  228,  229,  230,
      231,  228,  229,  230,  231,  228, 1845, 1845,  228, 1845,
      229,  230,  231,  229,  230,  231,  229,  230,  231,  229,
      230,  231, 1665, 1666, 1667, 1668, 1845,  228, 1845,  229,

      230,  231, 1669, 1845,  228,  229,  230,  231,  228, 1845,
     1845,  228, 1845,  229,  230,  231,  228, 1845,  229,  230,
      231, 1671,  229,  230,  231,  228,  229,  230,  231,  229,
      230,  231, 1672,  228, 1670, 1845,  228, 1845, 1845, 1845,
     1845,  228, 1845, 1845,  228, 1845, 1845,  228,  229,  230,
      231,  228, 1674, 1673,  228,  229,  230,  231,  228,  229,
      230,  231,  229,  230,  231, 1676, 1845,  229,  230,  231,
     1677, 1675,  228, 1845, 1845,  228,  229,  230,  231,  228,
     1681, 1845,  228, 1845,  229,  230,  231,  229,  230,  231,
      228, 1678,  229,  230,  231,  229,  230,  231,  229,  230,

      231, 1845,  229,  230,  231,  229,  230,  231,  228,  229,
      230,  231,  228, 1680, 1845,  228, 1679, 1845, 1682,  228,
     1683, 1845,  228,  229,  230,  231,  229,  230,  231, 1684,
      229,  230,  231,  229,  230,  231, 1686,  228, 1845, 1685,
      228,  229,  230,  231,  228, 1845, 1689,  228, 1845, 1845,
      228, 1845, 1845, 1687,  228, 1845, 1845, 1688,  228,  229,
      230,  231,  228,  229,  230,  231,  229,  230,  231, 1691,
      229,  230,  231,  229,  230,  231,  228, 1692, 1690,  228,
     1845, 1845, 1693, 1845,  228, 1845, 1845,  228,  229,  230,
      231,  229,  230,  231,  228,  229,  230,  231,  229,  230,

      231,  229,  230,  231,  228,  229,  230,  231,  228,  229,
      230,  231, 1695,  229,  230,  231,  228, 1694, 1845,  228,
     1845, 1697,  228, 1845, 1845, 1698,  228,  229,  230,  231,
      229,  230,  231,  228, 1845,  229,  230,  231,  229,  230,
      231, 1845, 1699,  228, 1845,  229,  230,  231,  228, 1845,
     1845, 1845, 1845,  228, 1700,  229,  230,  231,  228,  229,
      230,  231, 1845,  228, 1845, 1702, 1701,  229,  230,  231,
      229,  230,  231,  229,  230,  231, 1703,  229,  230,  231,
      228, 1704, 1706,  228,  229,  230,  231, 1705,  228, 1845,
     1845,  228, 1845, 1845,  229,  230,  231,  228, 1845,  229,

      230,  231, 1707, 1712,  229,  230,  231,  228, 1845,  229,
      230,  231,  228, 1845,  229,  230,  231, 1708, 1709,  228,
     1845, 1710,  228, 1845, 1845,  228, 1845, 1845,  228, 1845,
     1845,  229,  230,  231,  229,  230,  231, 1711,  228,  229,
      230,  231,  229,  230,  231,  228, 1845, 1845,  229,  230,
      231, 1717,  228, 1845, 1845,  228, 1845, 1713,  229,  230,
      231,  228, 1845,  229,  230,  231, 1714, 1845, 1845, 1845,
      229,  230,  231,  229,  230,  231,  229,  230,  231,  229,
      230,  231,  228, 1845, 1715, 1716,  228, 1845, 1845,  229,
      230,  231,  228, 1845, 1845,  228,  229,  230,  231,  228,

     1845, 1845,  228,  229,  230,  231,  229,  230,  231,  228,
     1845, 1722,  229,  230,  231,  228, 1845, 1845,  228, 1721,
     1845, 1718,  228, 1845, 1845,  228, 1845, 1719, 1723,  228,
     1720, 1845,  228,  229,  230,  231,  228,  229,  230,  231,
      228, 1845, 1845,  229,  230,  231,  229,  230,  231, 1724,
      229,  230,  231,  229,  230,  231, 1727, 1725,  228, 1845,
      229,  230,  231,  228, 1845, 1845,  229,  230,  231,  229,
      230,  231,  228,  229,  230,  231,  229,  230,  231, 1726,
      229,  230,  231,  229,  230,  231,  228,  229,  230,  231,
      228,  229,  230,  231, 1728, 1729,  228, 1845, 1845,  228,

     1845, 1845,  228, 1845, 1845,  228, 1845, 1845,  228,  229,
      230,  231, 1845, 1845,  229,  230,  231, 1730,  228, 1845,
     1845,  228, 1845,  229,  230,  231,  228, 1845, 1845,  228,
     1845, 1740,  228, 1845, 1845,  228, 1845,  229,  230,  231,
      228,  229,  230,  231, 1731, 1732, 1845,  229,  230,  231,
      229,  230,  231,  229,  230,  231,  229,  230,  231,  229,
      230,  231, 1733, 1734, 1735,  228, 1845, 1845,  228,  229,
      230,  231,  229,  230,  231, 1737,  228,  229,  230,  231,
      229,  230,  231,  229,  230,  231,  229,  230,  231,  228,
     1845,  229,  230,  231,  228, 1845, 1845,  228, 1845, 1736,

      228, 1845, 1845,  228, 1845, 1738,  228, 1845, 1845,  228,
     1845, 1739,  228, 1845, 1845,  228,  229,  230,  231,  229,
      230,  231,  228, 1845, 1742,  228, 1845,  229,  230,  231,
     1750, 1741, 1845, 1744,  228, 1845, 1745,  228, 1845, 1845,
      229,  230,  231,  228, 1743,  229,  230,  231,  229,  230,
      231,  229,  230,  231,  229,  230,  231,  229,  230,  231,
      229,  230,  231,  229,  230,  231,  229,  230,  231,  228,
     1746, 1845,  228,  229,  230,  231,  229,  230,  231, 1845,
      228, 1749, 1845,  228, 1845,  229,  230,  231,  229,  230,
      231,  228, 1845, 1747,  229,  230,  231,  228, 1845, 1755,

      228, 1845, 1845,  228, 1845, 1845,  228, 1748, 1751,  228,
     1756, 1845, 1845, 1845,  228, 1845, 1845, 1752,  228, 1845,
      229,  230,  231,  229,  230,  231,  228, 1845, 1753, 1754,
      228,  229,  230,  231,  229,  230,  231,  228, 1845, 1845,
      228, 1845,  229,  230,  231,  228, 1758, 1845,  229,  230,
      231,  229,  230,  231,  229,  230,  231,  229,  230,  231,
      229,  230,  231, 1759,  228,  229,  230,  231, 1757,  229,
      230,  231, 1761, 1766,  228, 1845, 1845,  229,  230,  231,
      228,  229,  230,  231, 1760,  228, 1845, 1845,  229,  230,
      231,  229,  230,  231, 1762,  228,  229,  230,  231,  228,

     1845, 1845,  228, 1845, 1845,  228, 1845, 1845, 1764,  228,
     1845, 1845, 1845,  228, 1763,  229,  230,  231, 1845, 1845,
      228, 1845, 1845, 1845,  228,  229,  230,  231, 1765, 1845,
      228,  229,  230,  231, 1767,  228,  229,  230,  231, 1768,
     1769, 1770,  228, 1845, 1845,  228,  229,  230,  231, 1845,
      229,  230,  231,  229,  230,  231,  229,  230,  231, 1772,
      229,  230,  231, 1771,  229,  230,  231,  228, 1777, 1845,
     1774,  229,  230,  231,  228,  229,  230,  231, 1773,  228,
     1845,  229,  230,  231,  228, 1845,  229,  230,  231,  228,
     1845, 1775,  228,  229,  230,  231,  229,  230,  231, 1845,

     1845,  228, 1776, 1845,  228, 1845, 1779, 1845, 1845,  228,
     1845, 1845,  228, 1845, 1780, 1845,  228, 1845,  229,  230,
      231, 1781, 1845, 1778,  228,  229,  230,  231, 1784,  228,
      229,  230,  231,  228, 1845,  229,  230,  231, 1785,  228,
      229,  230,  231,  229,  230,  231, 1782, 1788, 1845, 1783,
     1786,  228,  229,  230,  231,  229,  230,  231,  228, 1787,
      229,  230,  231,  229,  230,  231,  228,  229,  230,  231,
     1789,  228, 1790, 1845,  228,  229,  230,  231, 1845,  228,
      229,  230,  231,  228,  229,  230,  231, 1845, 1845,  228,
      229,  230,  231,  228, 1845, 1792,  228, 1845, 1845, 1791,

      228, 1845,  229,  230,  231,  228, 1845, 1795,  228,  229,
      230,  231, 1793,  228, 1845, 1845, 1845,  229,  230,  231,
     1796, 1845,  229,  230,  231,  229,  230,  231, 1794, 1797,
      229,  230,  231, 1799,  229,  230,  231, 1845,  228, 1798,
      229,  230,  231,  228,  229,  230,  231,  229,  230,  231,
     1800,  229,  230,  231,  228, 1845,  229,  230,  231,  229,
      230,  231, 1801,  228,  229,  230,  231, 1845,  228, 1845,
     1845, 1845, 1845,  228, 1802, 1845, 1845,  228, 1845, 1845,
      228, 1845, 1845,  228, 1845, 1845, 1845, 1845,  228,  229,
      230,  231, 1804, 1805,  229,  230,  231, 1845,  228, 1845,

     1803,  228, 1845, 1845, 1845,  229,  230,  231, 1806, 1845,
     1845,  228, 1845, 1845,  229,  230,  231,  228, 1807,  229,
      230,  231, 1810, 1808,  229,  230,  231, 1809,  229,  230,
      231,  229,  230,  231,  229,  230,  231,  228, 1845,  229,
      230,  231, 1811,  228, 1845, 1845,  228, 1845, 1845,  229,
      230,  231,  229,  230,  231, 1812,  228, 1845, 1845,  228,
     1845, 1845,  229,  230,  231,  228, 1845, 1845,  229,  230,
      231,  228, 1845, 1845,  228, 1845, 1845,  228, 1845, 1845,
      228, 1845, 1813,  228, 1814, 1816, 1845, 1815,  229,  230,
      231,  228, 1845, 1845,  229,  230,  231,  229,  230,  231,

      228, 1845, 1845,  228, 1845, 1818,  228,  229,  230,  231,
      229,  230,  231, 1817, 1845,  228,  229,  230,  231, 1819,
     1845,  228,  229,  230,  231,  229,  230,  231,  229,  230,
      231,  229,  230,  231,  229,  230,  231, 1823, 1821, 1820,
     1822,  228,  229,  230,  231, 1824,  228, 1845, 1845,  228,
     1845,  229,  230,  231,  229,  230,  231,  229,  230,  231,
     1845, 1845,  228, 1845, 1845,  228,  229,  230,  231,  228,
     1845, 1845,  229,  230,  231,  228, 1845, 1845,  228, 1825,
     1826, 1845,  228, 1827, 1845, 1845,  228, 1845, 1845, 1830,
      228, 1845,  229,  230,  231, 1828, 1845,  229,  230,  231,

      229,  230,  231, 1845, 1845,  228, 1829, 1845,  228, 1845,
     1845,  228, 1833,  229,  230,  231,  229,  230,  231, 1831,
      229,  230,  231,  228, 1834, 1845,  229,  230,  231,  229,
      230,  231,  228,  229,  230,  231, 1832,  229,  230,  231,
      228,  229,  230,  231,  228, 1835, 1845,  228, 1845, 1836,
      228, 1837, 1845,  228, 1845, 1845,  229,  230,  231,  229,
      230,  231,  229,  230,  231,  228, 1845, 1845,  228, 1838,
     1845,  228, 1845, 1845,  229,  230,  231,  228, 1845, 1845,
      228, 1845, 1845,  229,  230,  231,  228, 1839, 1845, 1845,
     1840,  229,  230,  231,  228,  229,  230,  231,  229,  230,

      231,  229,  230,  231,  229,  230,  231,  228, 1842, 1845,
      228, 1845, 1845, 1845, 1845, 1845,  229,  230,  231,  229,
      230,  231,  229,  230,  231, 1841, 1845, 1844,  229,  230,
      231,  229,  230,  231, 1845, 1845, 1845,  229,  230,  231,
     1845, 1843, 1845, 1845, 1845,  229,  230,  231, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,  229,  230,
      231,  229,  230,  231,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  201,  201, 1845,  201,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  217,  217, 1845, 1845,  217,
      217,  227, 1845,  227,  227, 1845,  227,  227, 1845,  227,
      338, 1845,  338,  338,  338, 1845, 1845,  338,  338,  338,
      338,  338,  338,  338,  338,  338, 1845,  338,  348, 1845,
      348, 1845,  348, 1845,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348, 1845,  348,  360, 1845,  360,  360,
     1845,  360,  360, 1845,  360,  368, 1845,  368, 1845, 1845,
      368,  368, 1845,  368,  375, 1845,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  378, 1845,  378,  378,  378, 1845,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378, 1845,  378,
      391,  391, 1845, 1845, 1845, 1845, 1845, 1845, 1845,  391,
     1845,  391,  391, 1845,  391,  391, 1845,  391,  399,  399,
      399,  399,  399,  399,  399,  399, 1845,  399,  399,  399,
      399, 1845,  399,  399,  399,  399,  399,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
     1845,  402,  402,  402,  402,  402,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  415,  415, 1845, 1845,  415, 1845, 1845,
     1845, 1845,  415, 1845,  415,  415, 1845,  415,  415, 1845,
      415,  424, 1845,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  432,
     1845,  432, 1845, 1845,  432,  432, 1845,  432,  439, 1845,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  444, 1845,  444,  444,

     1845,  444,  444, 1845,  444,  452, 1845,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  454, 1845,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  464,
     1845,  464,  464, 1845,  464,  464, 1845,  464,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  482,  482, 1845,  482,
      217,  217, 1845, 1845,  217,  217,  488, 1845, 1845,  488,
      488,  227, 1845,  227,  227, 1845,  227,  227, 1845,  227,
      494, 1845, 1845, 1845, 1845, 1845,  494,  494, 1845,  494,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502, 1845,  502,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  338, 1845,

      338,  338,  338, 1845, 1845,  338,  338,  338,  338,  338,
      338,  338,  338,  338, 1845,  338,  348, 1845,  348, 1845,
      348, 1845,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348, 1845,  348,  360, 1845,  360,  360, 1845,  360,
      360, 1845,  360,  673,  673, 1845,  673,  368, 1845,  368,
     1845, 1845,  368,  368, 1845,  368,  375, 1845,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  378, 1845,  378,  378,  378, 1845,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
     1845,  378,  391,  391, 1845, 1845, 1845, 1845, 1845, 1845,

     1845,  391, 1845,  391,  391, 1845,  391,  391, 1845,  391,
      696,  696, 1845,  696,  399,  399,  399,  399,  399,  399,
      399,  399, 1845,  399,  399,  399,  399, 1845,  399,  399,
      399,  399,  399,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402, 1845,  402,  402,  402,
      402,  402,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  415,
      415, 1845, 1845,  415, 1845, 1845, 1845, 1845,  415, 1845,
      415,  415, 1845,  415,  415, 1845,  415,  718,  718, 1845,
      718,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725, 1845,  725,
      424, 1845,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  729, 1845,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  432, 1845,  432, 1845, 1845,
      432,  432, 1845,  432,  439, 1845,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  444, 1845,  444,  444, 1845,  444,  444, 1845,
      444,  737,  737, 1845,  737,  452, 1845,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  454, 1845,  454,  454,  454,  454,  454,
      454,  454, 1845,  454,  454,  454,  454,  454,  454,  454,
      454,  745, 1845,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  464, 1845,
      464,  464, 1845,  464,  464, 1845,  464,  754,  754, 1845,
      754,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761, 1845,  761,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  772,
     1845,  772, 1845, 1845,  772,  772, 1845,  772,  488, 1845,
     1845,  488,  488,  782, 1845,  782, 1845, 1845,  782,  782,
     1845,  782,  227, 1845,  227,  227, 1845,  227,  227, 1845,

      227,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502, 1845,  502,
      797, 1845, 1845, 1845, 1845, 1845,  797,  797, 1845,  797,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  973,
     1845,  973, 1845, 1845,  973,  973, 1845,  973,  360, 1845,
      360,  360, 1845,  360,  360, 1845,  360,  368, 1845,  368,
     1845, 1845,  368,  368, 1845,  368,  375, 1845,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  992,  992, 1845, 1845, 1845, 1845,

     1845, 1845, 1845,  992, 1845,  992, 1845, 1845,  992,  992,
     1845,  992,  391,  391, 1845, 1845, 1845, 1845, 1845, 1845,
     1845,  391, 1845,  391,  391, 1845,  391,  391, 1845,  391,
     1000, 1000, 1845, 1000, 1018, 1018, 1845, 1845, 1018, 1845,
     1845, 1845, 1845, 1018, 1845, 1018, 1845, 1845, 1018, 1018,
     1845, 1018,  415,  415, 1845, 1845,  415, 1845, 1845, 1845,
     1845,  415, 1845,  415,  415, 1845,  415,  415, 1845,  415,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725, 1845,  725, 1032,
     1032, 1845, 1032,  424, 1845,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      432, 1845,  432, 1845, 1845,  432,  432, 1845,  432, 1038,
     1845, 1038, 1845, 1845, 1038, 1038, 1845, 1038,  444, 1845,
      444,  444, 1845,  444,  444, 1845,  444,  745, 1845,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456, 1050, 1845, 1050, 1845, 1845, 1050,

     1050, 1845, 1050,  464, 1845,  464,  464, 1845,  464,  464,
     1845,  464,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761, 1845,
      761, 1064, 1064, 1845, 1064,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  772, 1845,  772, 1845, 1845,  772,
      772, 1845,  772,  782, 1845,  782, 1845, 1845,  782,  782,
     1845,  782, 1088, 1845, 1088, 1845, 1845, 1088, 1088, 1845,
     1088,  227, 1845,  227,  227, 1845,  227,  227, 1845,  227,
      962, 1845,  962,  962,  968, 1845,  968,  968,  973, 1845,

      973, 1845, 1845,  973,  973, 1845,  973,  375, 1845,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  985, 1845,  985,  985,  992,
      992, 1845, 1845, 1845, 1845, 1845, 1845, 1845,  992, 1845,
      992, 1845, 1845,  992,  992, 1845,  992, 1252, 1845, 1845,
     1845, 1845, 1252, 1845, 1252, 1845, 1845, 1252, 1252, 1845,
     1252, 1018, 1018, 1845, 1845, 1018, 1845, 1845, 1845, 1845,
     1018, 1845, 1018, 1845, 1845, 1018, 1018, 1845, 1018, 1279,
     1279, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1279, 1845,
     1279, 1845, 1845, 1279, 1279, 1845, 1279, 1301, 1845, 1301,

     1845, 1845, 1301, 1301, 1845, 1301,   43, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845
    } ;

static yyconst flex_int16_t yy_chk[9682] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   52,   52,    3,    4,
        7,   27,    7,    7,    8,   28,    8,    8,   48,    7,
        7,  412,   48,    8,    8,    9,  767,    9,    9,   27,

        9,  412,    7,   28,    9,   10,    8,   10,   10,   19,
       10,   19,   19,   20,   10,   20,   20,    9,   98,   25,
       33,   26,   33,   33,   66,   66,   33,   10,   25,   25,
       26,   26,   34,   62,   34,   34,   62,   25,   34,   26,
       37,  767,   37,   37,   99,   99,    7,   19,    7,   98,
        8,   20,    8,   41,  751,   41,   41,   45,   45,   45,
       59,    9,   59,    9,  155,   37,   46,   46,   46,   41,
      751,   10,  155,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   21,   51,   21,   21,   22,   53,   22,   22,
       38,   21,   38,   38,   42,   22,   42,   42,   61,  135,
       61,   53,  158,  167,   21,   64,  158,  197,   22,  167,
       42,  197,   61,  135,  139,   38,  120,  120,  120,  769,
       51,   51,   51,   64,   64,   61,   64,   76,  139,   77,
      769,   76,  407,   77,   76,  139,  407,   77,  121,  121,
      121,   76,  340,   77,   76,  340,   77,  659,   21,  659,
       21,   76,   22,   77,   22,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   69,   79,  221,   70,  425,   79,  122,  122,  122,

       79,  425,   71,   80,   84,  752,   79,   80,   84,   79,
       83,   79,   79,  221,   70,   75,   79,   80,   84,   82,
       80,   84,   80,   84,  129,  129,  129,   80,   84,  156,
      156,  156,  159,  159,   83,   75,  157,  157,  157,   75,
      178,  178,   69,   69,   69,   70,   70,   70,   71,   75,
      206,  206,   75,   71,   71,   71,   74,   82,  752,   75,
       86,   83,   83,   83,   86,   81,   75,   75,   75,   78,
       82,   82,   82,  218,   86,  218,  351,   86,  218,  351,
       86,   74, 1640,  339,   86,  376, 1562,   74,   81,   74,
       81,   74,  377,   74,   74,   74,   74,   81,   81,  376,

       78,   78,   78,   81,   81,   78,  377,   74,   74,   74,
       78,   85,   78,   89,  477,   85,   81,   81,   81,   85,
       78,   78,   78,  233, 1561,   85,   90,  339,   85,  213,
       90,   85,   87,   87,   87,   85,   87,   87,   94,  350,
       90,  213,   94,   90,   88,   87,   87,   87,   88,   87,
       90,   88,   94,   89,  213,   94,   87,  420,   88,  408,
      215,   88,   94,  477,   89,   89,   89,   91,   88,   91,
       96,   91,  215,  124,  408,   91,   93,   91,   91,   97,
     1560,   91,  233,  350,   91,  215,   91,  380,   92,   91,
      380,   91,   92,   95,  379,   92,   92,   95,  426,  109,

       95,   95,   92,   97,  426,   92,   96,   95,   92,   93,
       95,   93,   92,  116,   93,  385,  420,   95,  144,  144,
      144,   96,   96,   96,  124,  124,  124,   93,   93,   93,
       97,   97,   97,  109,  138,  385, 1559,  144,  379,  109,
      160,  160,  160,  686,  109,  160,  109,  116,  188,  109,
      161,  161,  161,  116,  201,  161,  405,  686,  116,  160,
      116,  410,  410,  116,  405,  168,  168,  168,  138,  161,
      169,  169,  169,  202,  138,  168,  172,  172,  172,  138,
      169,  138,  199,  199,  138,  180,  180,  180,  144,  144,
      144,  181,  181,  181,  182,  182,  182,  440,  440,  188,

      188,  188,  195,  195,  195,  201,  201,  201,  409,  207,
      160,  160,  160,  207,  227,  161,  228,  199,  232,  202,
      161,  161,  161,  199,  202,  202,  202, 1558,  199,  235,
      199,  232,  236,  199,  211,  211,  211,  216, 1464,  216,
      239,  478,  409,  207,  238,  358,  358,  358,  409,  207,
      237,  216,  462,  409,  207,  409,  207, 1463,  409,  207,
      241,  750,  460,  236,  216,  227,  227,  227,  235,  232,
      232,  232,  237,  237,  228,  228,  228,  239,  240,  238,
      235,  235,  235,  236,  236,  236,  242,  469,  462,  243,
      478,  239,  239,  239,  237,  238,  238,  238,  244,  241,

      240,  237,  237,  237,  245,  361,  361,  361,  246,  732,
      750,  241,  241,  241,  247,  272,  460,  732,  272,  249,
      272,  272,  272,  244,  248,  242,  666,  243,  666,  240,
      240,  240,  246,  272,  272,  502,  272,  242,  242,  242,
      243,  243,  243,  249,  245,  257,  469,  249,  250,  244,
      244,  244, 1462,  480,  254,  245,  245,  245,  463,  246,
      246,  246,  248,  248,  251,  247,  247,  247,  253,  461,
      249,  249,  249, 1461, 1047,  248,  248,  248,  254,  250,
      250,  250,  459,  250,  252,  257,  251,  258,  250,  251,
      253,  255,  254,  479,  502,  251,  257,  257,  257,  250,

      250,  250,  251,  480,  252,  254,  254,  254,  256,  252,
      252,  258,  263,  463,  770,  251,  251,  251,  260,  253,
      253,  253,  252,  461,  479,  252,  255, 1047,  259,  459,
      256,  256,  459,  265, 1460,  252,  252,  252,  258,  258,
      258,  261,  255,  255,  255,  262,  263,  256,  259,  260,
      259,  264,  268, 1458, 1457,  264,  259,  705,  266,  256,
      256,  256,  770,  263,  263,  263,  265,  259,  270,  260,
      260,  260,  749,  476,  269,  264,  262,  271,  261,  259,
      259,  259,  262,  273,  265,  265,  265,  276,  264,  264,
      267,  266,  261,  261,  261, 1048,  262,  262,  262,  274,

     1456,  705,  269,  268,  268,  268,  264,  264,  264,  266,
      266,  266,  271,  275,  267,  476,  277, 1455,  476,  270,
      270,  270,  749,  274,  267,  269,  269,  269,  271,  271,
      271,  276,  280, 1049,  273,  273,  273,  279,  276,  276,
      276,  267,  267,  267,  281, 1048, 1454,  275,  282,  277,
      274,  274,  274,  284,  277,  278,  368,  368,  368,  277,
      278,  278,  285,  753,  275,  275,  275,  277,  277,  277,
      283,  279,  281,  278,  278,  286,  278,  281, 1453,  279,
      288,  282,  287,  280,  280,  280,  287, 1049,  279,  279,
      279,  289,  284,  283,  285,  281,  281,  281,  291,  282,

      282,  282,  290, 1452,  284,  284,  284,  293,  283,  287,
      292,  288,  753,  285,  285,  285,  983,  294,  286,  287,
      289,  283,  283,  283,  290,  287,  286,  286,  286,  296,
      983,  288,  288,  288,  295, 1451, 1450,  287,  287,  287,
      294,  292,  289,  289,  289,  706,  293,  297,  706,  291,
      291,  291,  298,  290,  290,  290,  301, 1036,  293,  293,
      293,  292,  292,  292,  300, 1036,  296,  299,  294,  294,
      294,  295, 1448,  295,  306,  306,  306,  687,  306,  687,
      296,  296,  296,  306,  297,  295,  295,  295,  300,  301,
      298,  299,  372,  372,  372,  390,  390,  390,  297,  297,

      297,  299,  725,  298,  298,  298,  312,  301,  301,  301,
      302,  304,  392,  392,  392,  300,  300,  300,  299,  299,
      299,  302,  302,  302,  307,  302, 1004,  308, 1004,  302,
      302,  302,  303,  303,  303,  309,  303,  761,  304,  314,
      303,  303,  305,  305,  305,  304,  305,  305,  310,  312,
      305,  305,  307,  311, 1071,  308,  315,  312,  312,  312,
      313,  725,  304,  304,  304,  317,  712,  309,  310,  712,
      316,  314,  310, 1447, 1446,  307,  307,  307,  308,  308,
      308,  311,  310,  323,  313,  310,  309,  309,  309,  318,
      314,  314,  314,  327,  316, 1445,  761,  317,  319,  310,

      310,  310,  320, 1071,  311,  311,  311,  315,  315,  315,
      316,  313,  313,  313,  316,  321,  317,  317,  317,  324,
      323,  316,  316,  316,  318,  320,  319,  322,  791, 1444,
      327,  791,  319,  325,  323,  323,  323,  320, 1443,  329,
      318,  318,  318,  321,  327,  327,  327,  324,  328,  319,
      319,  319,  334,  320,  320,  320,  360,  325,  322,  365,
      486,  325,  486, 1442,  322,  486,  321,  321,  321, 1441,
      324,  324,  324,  326,  326,  326,  329,  326,  322,  322,
      322,  326,  326,  458,  325,  325,  325,  411,  328, 1438,
      329,  329,  329, 1437,  391,  391,  391,  458, 1436,  328,

      328,  328, 1318,  334,  334,  334, 1317,  360,  360,  360,
      365,  365,  365,  391,  396,  396,  396,  406,  406,  406,
     1316,  411,  413,  413,  413,  444, 1314,  411,  416,  416,
      416, 1313,  411,  396,  411, 1312,  449,  411,  415,  415,
      415,  458,  464,  415,  421,  421,  421,  470, 1311,  421,
      428,  428,  428,  432,  432,  432, 1011,  415, 1011, 1027,
      428,  504, 1027,  421,  391,  391,  391,  436,  436,  436,
      442,  442,  442,  445,  445,  445,  444,  444,  444,  465,
      465,  465,  474,  711,  396,  396,  396,  449,  449,  449,
      498,  474,  487,  464,  464,  464,  501, 1310,  470,  470,

      470,  482,  482,  482,  487,  494,  494,  494,  415,  415,
      415,  503,  505, 1309,  421,  421,  421,  487,  506,  504,
      504,  504,  507,  747, 1308,  508, 1059,  711,  509, 1059,
     1081,  510, 1081, 1307,  511,  474,  505,  747,  512,  747,
     1069,  498,  498,  498,  515,  503,  507,  501,  501,  501,
     1932,  503,  506, 1932,  511,  510,  503,  513,  503,  768,
      517,  503,  512,  505,  505,  505,  514, 1306,  515,  506,
      506,  506,  516,  507,  507,  507,  508,  508,  508,  509,
      509,  509,  510,  510,  510,  511,  511,  511, 1069,  512,
      512,  512,  519,  517,  513,  515,  515,  515,  520, 1933,

      514,  518, 1933,  768,  521, 1304,  516,  522,  513,  513,
      513,  517,  517,  517, 1303,  523,  519,  514,  514,  514,
      520,  518, 1302,  516,  516,  516,  521, 1938, 1070,  524,
     1938,  519,  525, 1300, 1271,  526, 1271, 1969,  522,  527,
     1969, 1299,  529,  519,  519,  519,  523,  528, 1298,  520,
      520,  520,  518,  518,  518,  521,  521,  521,  522,  522,
      522,  524,  529,  771, 1297,  530,  523,  523,  523,  535,
      525,  525,  527, 1070,  531,  528, 1296,  533,  528,  526,
      524,  524,  524,  525,  525,  525,  526,  526,  526,  530,
      527,  527,  527,  529,  529,  529,  531,  532,  528,  528,

      528,  765,  533,  534, 1293, 1292,  536,  771,  535,  790,
      765,  537,  765, 1294,  538, 1294,  530,  530,  530,  532,
      535,  535,  535,  539, 1291,  531,  531,  531,  533,  533,
      533,  534,  540, 1970, 1026,  541, 1970, 1058,  542,  673,
      673,  673,  543, 1289, 1288,  545,  538,  539,  532,  532,
      532,  537,  544,  790,  534,  534,  534,  536,  536,  536,
     1287,  548,  537,  537,  537,  538,  538,  538,  547,  541,
      543,  540,  544, 1285,  539,  539,  539,  546, 1026, 1284,
      550, 1058,  545,  540,  540,  540,  541,  541,  541,  542,
      542,  542,  547,  543,  543,  543,  545,  545,  545,  546,

      548,  549, 1282,  544,  544,  544,  551, 1974, 1975,  552,
     1974, 1975,  548,  548,  548,  553, 1281, 1280,  550,  547,
      547,  547, 1277,  554, 1276,  549, 1275,  558,  546,  546,
      546,  550,  550,  550, 1976,  555, 1274, 1976,  556,  553,
      552, 1273, 1270,  557,  551,  681,  681,  681,  559, 1269,
     1268,  563,  549,  549,  549,  554,  573,  551,  551,  551,
      552,  552,  552,  561,  558, 1266,  553,  553,  553,  555,
      559,  556, 1265,  560,  554,  554,  554,  557,  558,  558,
      558,  562,  573,  561,  564, 1264,  555,  555,  555,  556,
      556,  556,  563,  565,  557,  557,  557,  560,  567,  559,

      559,  559,  563,  563,  563, 1263, 1262,  573,  573,  573,
      566,  704,  704,  704,  561,  561,  561,  565,  564,  568,
     1261,  562,  567,  569,  560,  560,  560,  570,  727,  727,
      727,  571,  562,  562,  562,  564,  564,  564,  566,  572,
     1260, 1259,  574,  568,  565,  565,  565,  569,  575,  567,
      567,  567,  577,  733,  733,  733, 1258,  569,  568,  570,
      576,  566,  566,  566,  571,  578,  737,  737,  737,  581,
      568,  568,  568,  579,  569,  569,  569,  572,  570,  570,
      570,  574,  571,  571,  571,  580, 1257, 1255,  582,  578,
      572,  572,  572,  574,  574,  574,  585, 1254,  576,  575,

      575,  575,  581,  577,  577,  577,  583, 1253,  579,  580,
      586,  576,  576,  576,  584, 1251,  578,  578,  578,  587,
      581,  581,  581,  591,  579,  579,  579, 1250,  582,  588,
      586,  754,  754,  754, 1249,  585,  580,  580,  580,  582,
      582,  582,  584,  587, 1248,  590,  583,  585,  585,  585,
      589, 1246, 1245,  592,  584, 1244,  593,  583,  583,  583,
      594,  586,  586,  586, 1243,  584,  584,  584,  588,  590,
      587,  587,  587, 1242,  591,  591,  591,  595,  589, 1240,
      588,  588,  588,  596,  594,  589,  597,  593,  763,  763,
      763,  598, 1239, 1094,  600, 1093,  590,  590,  590,  599,

     1091,  589,  589,  589,  592,  592,  592,  593,  593,  593,
      605,  594,  594,  594,  597,  598,  606,  595, 1090,  599,
      602, 1089,  601,  599, 1087, 1086,  601,  596,  595,  595,
      595,  603,  605,  600,  596,  596,  596,  597,  597,  597,
      602, 1085,  598,  598,  598,  600,  600,  600,  601,  612,
      599,  599,  599,  604, 1084, 1083,  606,  608, 1080,  603,
      607,  605,  605,  605, 1079,  609, 1078,  606,  606,  606,
      610,  602,  602,  602, 1076,  604,  611,  601,  601,  601,
      608, 1075,  603,  603,  603,  609,  607, 1074,  621,  612,
      610,  604,  615, 1073,  604,  613,  772,  772,  772,  617,

      612,  612,  612, 1067,  604,  604,  604,  611,  608,  608,
      608,  607,  607,  607,  614,  613,  609,  609,  609,  619,
      615,  610,  610,  610, 1066,  616, 1065,  611,  611,  611,
      618, 1063, 1062,  620, 1061, 1060,  617, 1057,  614,  621,
      621,  621,  626,  615,  615,  615,  613,  613,  613,  616,
      617,  617,  617,  622,  618,  618,  623,  619,  619,  776,
      776,  776, 1056,  626,  624,  614,  614,  614,  625, 1055,
      619,  619,  619,  620, 1053,  628,  616,  616,  616,  626,
      627,  618,  618,  618,  620,  620,  620,  624,  622, 1052,
      629,  623,  625,  626,  626,  626,  630, 1051, 1045,  631,

      782,  782,  782, 1044,  622,  622,  622,  623,  623,  623,
      628, 1043,  627,  633, 1041,  624,  624,  624,  629,  625,
      625,  625,  632, 1040, 1039,  634,  628,  628,  628,  635,
      629,  627,  627,  627,  636,  630, 1037,  633,  631, 1035,
      637,  629,  629,  629,  638,  634, 1034,  630,  630,  630,
      631,  631,  631,  635,  639,  632, 1033,  640, 1031, 1030,
      632,  637, 1029,  641,  633,  633,  633,  643,  638, 1028,
     1025,  644, 1024,  632,  632,  632,  634,  634,  634,  642,
      635,  635,  635,  641,  645,  636,  636,  636,  639,  646,
      639,  637,  637,  637,  640,  638,  638,  638, 1023,  644,

      643, 1021,  647,  642, 1020,  639,  639,  639,  640,  640,
      640,  644,  645,  648,  641,  641,  641,  649,  643,  643,
      643,  650,  644,  644,  644, 1019,  651,  646,  647,  652,
      642,  642,  642, 1017,  653,  645,  645,  645,  654, 1016,
      646,  646,  646,  677,  650, 1015,  648, 1014,  649,  651,
      648, 1013, 1010,  647,  647,  647,  652,  653,  655,  696,
      696,  696,  654, 1009,  648,  648,  648, 1008,  649,  649,
      649, 1007,  650,  650,  650, 1006, 1003,  651,  651,  651,
      652,  652,  652, 1002, 1001,  653,  653,  653,  726,  654,
      654,  654,  655,  741,  677,  677,  677,  700,  700,  700,

      718,  718,  718,  758,  999,  718,  786,  786,  786,  655,
      655,  655,  801,  722,  722,  722,  700,  998,  722,  797,
      797,  797,  726,  973,  973,  973,  804,  997,  726,  696,
      696,  696,  722,  726,  995,  726,  994,  993,  726,  977,
      977,  977,  762,  803,  741,  741,  741,  991,  989,  801,
      988,  802,  986,  985,  758,  758,  758,  984,  982,  804,
      981,  980,  805,  801,  801,  801,  806,  700,  700,  700,
      718,  718,  718, 1038, 1038, 1038,  762,  804,  804,  804,
      979,  803,  762,  722,  722,  722,  748,  762,  807,  762,
      978,  976,  762,  802,  803,  803,  803,  809,  808,  806,

      748,  809,  802,  802,  802,  975,  805,  974,  748,  748,
      748,  748,  748,  805,  805,  805,  807,  806,  806,  806,
      811,  748,  748,  748,  748,  748,  748,  766,  810,  972,
      808,  971,  969,  812,  968,  967,  766,  813,  966,  807,
      807,  807,  815,  811,  766,  766,  766,  766,  766,  808,
      808,  808,  809,  809,  809,  814,  965,  766,  766,  766,
      766,  766,  766,  812,  963,  810,  816,  962,  961,  815,
      820,  811,  811,  811,  817,  814,  800,  799,  818,  810,
      810,  810,  824,  798,  812,  812,  812,  819,  813,  813,
      813,  795,  821,  815,  815,  815,  816,  817,  818,  822,

      794,  793,  818,  822,  792,  789,  814,  814,  814,  820,
      823,  819,  821,  826,  824,  788,  821,  816,  816,  816,
      821,  820,  820,  820,  787,  817,  817,  817,  825,  818,
      818,  818,  827,  824,  824,  824,  828,  785,  819,  819,
      819,  829,  784,  821,  821,  821,  830,  783,  825,  823,
     1000,  831,  781,  826,  822,  822,  822,  832,  779,  778,
      828,  823,  823,  823,  826,  826,  826,  777,  833,  775,
      830,  827,  834,  774,  773,  835,  764,  832,  829,  825,
      825,  825,  837,  827,  827,  827,  836,  828,  828,  828,
      831,  839,  829,  829,  829,  838,  834,  830,  830,  830,

      833,  840,  831,  831,  831,  837,  842,  760,  832,  832,
      832,  841,  759,  757,  843, 1000, 1000, 1000,  844,  833,
      833,  833,  839,  834,  834,  834,  835,  835,  835,  846,
      836,  756,  838,  837,  837,  837,  845,  836,  836,  836,
      847,  842,  839,  839,  839,  840,  838,  838,  838,  849,
      841,  755,  840,  840,  840,  844,  848,  842,  842,  842,
      845,  850,  841,  841,  841,  843,  843,  843,  846,  844,
      844,  844,  851,  745,  847,  744,  848,  852,  743,  742,
      846,  846,  846,  853,  848,  740,  739,  845,  845,  845,
      855,  847,  847,  847,  854,  851,  850,  738,  856,  736,

      849,  849,  849,  857,  735,  734,  858,  848,  848,  848,
      731,  859,  850,  850,  850,  730,  852,  860,  729,  728,
      861,  724,  723,  851,  851,  851,  721,  855,  852,  852,
      852,  720,  864,  854,  853,  853,  853,  856,  857,  862,
      719,  855,  855,  855,  863,  854,  854,  854,  859,  856,
      856,  856,  864,  861,  857,  857,  857,  858,  858,  858,
      860,  865,  859,  859,  859,  866,  716,  715,  860,  860,
      860,  861,  861,  861,  867,  868,  862,  863,  714,  868,
      713,  863,  869,  864,  864,  864,  710,  865,  870,  709,
      862,  862,  862,  871,  708,  863,  863,  863,  865,  872,

      707,  703,  874,  702,  701,  873,  699,  868,  698,  697,
      875,  695,  865,  865,  865,  694,  866,  866,  866,  693,
      876,  692,  691,  877,  690,  867,  867,  867,  870,  878,
      868,  868,  868,  869,  869,  869,  873,  880,  872,  870,
      870,  870,  881,  877,  871,  871,  871,  875,  882,  689,
      872,  872,  872,  874,  874,  874,  873,  873,  873,  876,
      879,  875,  875,  875,  883,  684,  683,  878,  880,  882,
      884,  876,  876,  876,  877,  877,  877,  885,  682,  680,
      878,  878,  878,  886,  679,  879,  887,  678,  880,  880,
      880,  888,  676,  881,  881,  881,  889,  675,  674,  882,

      882,  882,  883,  890,  672,  671,  891,  670,  669,  893,
      885,  879,  879,  879,  668,  883,  883,  883,  889,  892,
      886,  884,  884,  884,  887,  894,  665,  664,  885,  885,
      885,  895,  663,  662,  886,  886,  886,  887,  887,  887,
      890,  896,  888,  888,  888,  898,  893,  889,  889,  889,
      899,  894,  661,  892,  890,  890,  890,  891,  891,  891,
      893,  893,  893,  897,  895,  896,  900,  657,  656,  898,
      892,  892,  892,  500,  499,  901,  894,  894,  894,  497,
      902,  496,  895,  895,  895,  903,  907,  495,  899,  492,
      907,  491,  896,  896,  896,  897,  898,  898,  898,  901,

      904,  899,  899,  899,  902,  900,  905, 1042, 1042, 1042,
      906,  490,  489,  903,  897,  897,  897,  900,  900,  900,
      485,  908,  484,  483,  904,  910,  901,  901,  901,  911,
      905,  902,  902,  902,  906,  909,  903,  903,  903,  912,
      475,  907,  907,  907,  913,  910,  473,  914, 1050, 1050,
     1050,  904,  904,  904,  472,  916,  471,  905,  905,  905,
      908,  906,  906,  906,  918,  468,  911,  909,  467,  915,
      912,  466,  908,  908,  908,  919,  910,  910,  910,  916,
      911,  911,  911,  917,  457,  914,  909,  909,  909,  920,
      912,  912,  912,  456,  921,  913,  913,  913,  914,  914,

      914,  915,  922,  919,  455,  917,  916,  916,  916,  923,
      454,  452,  925,  920,  451,  918,  918,  918,  921,  926,
      915,  915,  915,  924,  450,  448,  919,  919,  919,  927,
      447,  446,  929,  922,  917,  917,  917,  928,  439,  438,
      920,  920,  920,  437,  930,  921,  921,  921,  435,  933,
      926,  924,  934,  922,  922,  922,  931, 1054, 1054, 1054,
      923,  923,  923,  925,  925,  925,  930,  935,  927,  928,
      926,  926,  926,  936,  924,  924,  924,  932,  931,  930,
      927,  927,  927,  929,  929,  929,  938,  935,  928,  928,
      928,  434,  937,  433,  430,  930,  930,  930,  940,  932,

      933,  933,  933,  934,  934,  934,  429,  931,  931,  931,
      939,  936,  424,  941,  423,  422,  942,  419,  935,  935,
      935,  944,  418,  417,  936,  936,  936,  946,  932,  932,
      932,  937,  943,  414,  398,  947,  940,  938,  938,  938,
      945,  939,  397,  937,  937,  937,  941,  948,  395,  940,
      940,  940,  394,  946,  950,  943,  942,  952,  947,  393,
      944,  939,  939,  939,  941,  941,  941,  942,  942,  942,
      949,  948,  944,  944,  944,  951,  384,  945,  946,  946,
      946,  955,  950,  943,  943,  943,  947,  947,  947,  953,
      949,  945,  945,  945,  954,  383,  382,  956,  948,  948,

      948,  957,  951,  955,  381,  950,  950,  950,  952,  952,
      952,  375,  374,  953,  959,  373,  960,  958,  954,  371,
      960,  949,  949,  949,  370,  369,  951,  951,  951,  367,
      366,  956,  955,  955,  955,  957,  992,  992,  992,  364,
      953,  953,  953,  363,  362,  954,  954,  954,  956,  956,
      956,  959,  957,  957,  957,  958,  996,  996,  996, 1018,
     1018, 1018, 1095,  355, 1018,  959,  959,  959,  958,  958,
      958,  960,  960,  960, 1022, 1022, 1022,  354,  353, 1022,
     1032, 1032, 1032, 1064, 1064, 1064, 1072, 1072, 1072, 1077,
     1077, 1077, 1088, 1088, 1088, 1092, 1092, 1092, 1241, 1241,

     1241, 1278, 1278, 1278, 1096,  352,  992,  992,  992, 1097,
      344,  343, 1098, 1095, 1095, 1095, 1286, 1286, 1286, 1099,
     1290, 1290, 1290, 1301, 1301, 1301,  996,  996,  996, 1018,
     1018, 1018, 1096, 1101,  342, 1098, 1305, 1305, 1305, 1315,
     1315, 1315,  341,  337, 1022, 1022, 1022,  336, 1097, 1104,
     1032, 1032, 1032, 1046, 1101, 1096, 1096, 1096,  335,  231,
     1097, 1097, 1097, 1098, 1098, 1098, 1103, 1046,  230, 1046,
     1099, 1099, 1099, 1104,  229, 1046, 1046, 1046, 1046, 1046,
      210, 1100,  208,  205, 1101, 1101, 1101, 1102, 1046, 1046,
     1046, 1046, 1046, 1046, 1068,  204, 1105,  203,  198, 1106,

     1104, 1104, 1104, 1068, 1100, 1068, 1103, 1102,  194, 1107,
      193, 1068, 1068, 1068, 1068, 1068, 1105, 1103, 1103, 1103,
     1108,  192,  191, 1109, 1068, 1068, 1068, 1068, 1068, 1068,
     1107, 1110, 1100, 1100, 1100, 1112,  190,  189, 1102, 1102,
     1102, 1111,  185,  177, 1113,  176,  175, 1105, 1105, 1105,
     1106, 1106, 1106, 1114,  174,  173, 1116, 1112,  171, 1119,
     1107, 1107, 1107, 1115, 1459, 1459, 1459, 1117,  170,  166,
     1118, 1108, 1108, 1108, 1109, 1109, 1109, 1113, 1120,  165,
     1111,  164, 1110, 1110, 1110,  163, 1112, 1112, 1112, 1116,
     1114, 1115, 1111, 1111, 1111, 1113, 1113, 1113, 1120, 1116,

     1117, 1121,  162, 1118, 1114, 1114, 1114, 1116, 1116, 1116,
     1119, 1119, 1119, 1122, 1115, 1115, 1115, 1123, 1117, 1117,
     1117, 1118, 1118, 1118, 1124,  152,  150, 1125,  147, 1120,
     1120, 1120,  146,  145, 1126,  141,  140, 1127, 1121,  134,
     1128, 1123,  133, 1129, 1122,  132,  131, 1131, 1130,  130,
      128, 1131, 1121, 1121, 1121, 1125, 1132, 1124,  127, 1133,
      126,  123, 1135,  118, 1122, 1122, 1122, 1129, 1123, 1123,
     1123, 1126,  117, 1128,  115, 1124, 1124, 1124, 1125, 1125,
     1125, 1130, 1137, 1133, 1132, 1126, 1126, 1126, 1127, 1127,
     1127, 1128, 1128, 1128, 1129, 1129, 1129, 1134,  112, 1130,

     1130, 1130, 1131, 1131, 1131, 1136,  111, 1132, 1132, 1132,
     1133, 1133, 1133, 1135, 1135, 1135,  110,  106, 1138,  103,
      102, 1137, 1139,  101,   73, 1134, 1140,   60,   55,   50,
     1141,   47,   43, 1137, 1137, 1137, 1136, 1142,   30,   29,
     1143,    0,    0,    0,    0, 1144,    0,    0, 1134, 1134,
     1134, 1138, 1145,    0,    0, 1146, 1136, 1136, 1136, 1142,
     1148,    0,    0, 1149,    0,    0, 1143, 1147,    0, 1138,
     1138, 1138, 1141, 1139, 1139, 1139, 1152, 1140, 1140, 1140,
     1148, 1141, 1141, 1141, 1144, 1151,    0, 1149, 1142, 1142,
     1142, 1143, 1143, 1143, 1150, 1147, 1144, 1144, 1144, 1157,

        0,    0, 1153, 1145, 1145, 1145, 1146, 1146, 1146,    0,
     1155, 1148, 1148, 1148, 1149, 1149, 1149, 1156, 1147, 1147,
     1147, 1154, 1150,    0, 1151,    0, 1159, 1152, 1152, 1152,
     1153, 1160, 1157,    0, 1158,    0, 1151, 1151, 1151, 1161,
        0,    0, 1163,    0,    0, 1150, 1150, 1150, 1155, 1154,
     1157, 1157, 1157, 1153, 1153, 1153, 1156, 1167,    0, 1160,
     1162, 1155, 1155, 1155, 1159, 1164,    0,    0, 1156, 1156,
     1156, 1158, 1154, 1154, 1154, 1161, 1165, 1159, 1159, 1159,
     1162, 1166, 1160, 1160, 1160, 1158, 1158, 1158, 1167,    0,
     1161, 1161, 1161, 1163, 1163, 1163, 1168, 1169, 1165,    0,

     1168, 1166,    0, 1164,    0,    0, 1170,    0, 1167, 1167,
     1167, 1162, 1162, 1162, 1171,    0, 1164, 1164, 1164, 1172,
        0,    0, 1174,    0,    0, 1175,    0, 1165, 1165, 1165,
     1170, 1177, 1166, 1166, 1166, 1173,    0,    0,    0,    0,
     1176, 1169,    0,    0, 1180, 1171, 1174, 1178, 1169, 1169,
     1169, 1168, 1168, 1168, 1172, 1181,    0, 1170, 1170, 1170,
        0, 1179, 1173,    0, 1182, 1171, 1171, 1171,    0, 1177,
     1172, 1172, 1172, 1174, 1174, 1174, 1175, 1175, 1175, 1176,
     1178, 1180, 1177, 1177, 1177, 1179, 1173, 1173, 1173, 1179,
     1183, 1176, 1176, 1176, 1181, 1180, 1180, 1180, 1178, 1178,

     1178, 1182, 1184,    0,    0, 1185, 1181, 1181, 1181, 1186,
        0,    0, 1179, 1179, 1179, 1182, 1182, 1182, 1183,    0,
        0, 1187,    0,    0,    0,    0, 1188,    0,    0, 1185,
     1189,    0,    0, 1190,    0, 1184, 1191, 1186,    0, 1192,
        0, 1183, 1183, 1183, 1187,    0, 1193,    0,    0,    0,
        0, 1195,    0, 1184, 1184, 1184, 1185, 1185, 1185, 1201,
     1186, 1186, 1186, 1188, 1189, 1194,    0,    0, 1197,    0,
     1252, 1190, 1187, 1187, 1187, 1195, 1200, 1188, 1188, 1188,
     1193, 1189, 1189, 1189, 1190, 1190, 1190, 1191, 1191, 1191,
     1192, 1192, 1192, 1194,    0, 1198, 1200, 1193, 1193, 1193,

     1196, 1197, 1195, 1195, 1195, 1199,    0,    0, 1204,    0,
     1201, 1201, 1201,    0,    0, 1202, 1194, 1194, 1194, 1197,
     1197, 1197, 1196, 1198, 1203,    0,    0, 1200, 1200, 1200,
     1199, 1205,    0,    0, 1209, 1252, 1252, 1252, 1206,    0,
        0, 1204, 1210,    0,    0, 1207, 1198, 1198, 1198, 1208,
        0, 1196, 1196, 1196, 1202, 1212, 1199, 1199, 1199, 1204,
     1204, 1204, 1206, 1203, 1205, 1211, 1202, 1202, 1202,    0,
     1210, 1213,    0, 1208, 1215, 1203, 1203, 1203, 1207, 1216,
        0,    0, 1205, 1205, 1205, 1209, 1209, 1209, 1214, 1206,
     1206, 1206, 1217, 1210, 1210, 1210, 1207, 1207, 1207,    0,

     1208, 1208, 1208,    0, 1211, 1218, 1212, 1212, 1212, 1219,
     1213,    0, 1220,    0, 1215, 1214, 1211, 1211, 1211, 1223,
        0,    0, 1213, 1213, 1213, 1215, 1215, 1215, 1221,    0,
     1216, 1216, 1216, 1218,    0, 1222,    0,    0, 1225, 1214,
     1214, 1214, 1227, 1217, 1217, 1217, 1224, 1223,    0, 1226,
        0, 1219, 1221, 1228,    0,    0, 1218, 1218, 1218, 1222,
     1219, 1219, 1219, 1220, 1220, 1220, 1231,    0, 1224, 1226,
     1223, 1223, 1223, 1229, 1228, 1256, 1230,    0,    0, 1221,
     1221, 1221, 1232,    0,    0,    0, 1222, 1222, 1222, 1225,
     1225, 1225, 1233, 1227, 1227, 1227, 1234, 1224, 1224, 1224,

     1226, 1226, 1226, 1236, 1228, 1228, 1228, 1229,    0,    0,
     1235,    0, 1233, 1237,    0, 1230, 1238, 1231, 1231, 1231,
     1247, 1247, 1247,    0, 1229, 1229, 1229, 1230, 1230, 1230,
     1279, 1279, 1279, 1232, 1232, 1232, 1323,    0, 1234, 1238,
     1256, 1256, 1256, 1233, 1233, 1233, 1319, 1234, 1234, 1234,
     1235, 1283, 1283, 1283, 1236, 1236, 1236, 1237,    0, 1320,
        0, 1235, 1235, 1235, 1237, 1237, 1237, 1238, 1238, 1238,
     1267, 1267, 1267, 1321, 1324, 1267, 1323, 1321,    0, 1319,
     1322,    0,    0, 1325,    0,    0, 1326, 1323, 1323, 1323,
     1247, 1247, 1247, 1320,    0,    0, 1329, 1319, 1319, 1319,

     1279, 1279, 1279,    0,    0,    0, 1327,    0, 1322,    0,
     1320, 1320, 1320, 1324, 1328,    0,    0, 1330,    0,    0,
     1325, 1283, 1283, 1283, 1329, 1324, 1324, 1324, 1321, 1321,
     1321, 1322, 1322, 1322, 1325, 1325, 1325, 1326, 1326, 1326,
     1267, 1267, 1267, 1327, 1331, 1328,    0, 1329, 1329, 1329,
        0, 1332,    0,    0, 1333,    0, 1330, 1327, 1327, 1327,
     1334,    0,    0,    0, 1337, 1328, 1328, 1328, 1330, 1330,
     1330, 1332, 1341,    0,    0, 1335,    0,    0, 1336,    0,
        0, 1340,    0, 1331, 1337, 1339,    0, 1333, 1338,    0,
        0, 1332,    0,    0,    0, 1331, 1331, 1331, 1342, 1334,

     1440,    0, 1332, 1332, 1332, 1333, 1333, 1333, 1343, 1339,
        0, 1334, 1334, 1334, 1335, 1337, 1337, 1337, 1336, 1338,
     1340, 1342, 1344, 1341, 1341, 1341, 1335, 1335, 1335, 1336,
     1336, 1336, 1340, 1340, 1340, 1345, 1339, 1339, 1339, 1338,
     1338, 1338,    0, 1346,    0,    0, 1344, 1343, 1349, 1342,
     1342, 1342, 1347,    0,    0, 1348,    0, 1345, 1350, 1343,
     1343, 1343,    0, 1351,    0, 1440, 1440, 1440, 1352,    0,
        0, 1353,    0, 1344, 1344, 1344, 1346, 1354,    0,    0,
        0, 1349,    0,    0,    0, 1355, 1345, 1345, 1345,    0,
     1356, 1347,    0, 1348, 1346, 1346, 1346, 1354, 1357, 1349,

     1349, 1349, 1351, 1347, 1347, 1347, 1348, 1348, 1348, 1350,
     1350, 1350, 1352, 1355, 1351, 1351, 1351, 1356, 1358, 1352,
     1352, 1352, 1353, 1353, 1353, 1359,    0,    0, 1354, 1354,
     1354, 1357, 1360,    0,    0, 1361, 1355, 1355, 1355, 1362,
        0, 1356, 1356, 1356, 1363,    0, 1358,    0,    0, 1357,
     1357, 1357,    0,    0, 1364,    0,    0, 1367,    0, 1359,
     1365,    0,    0, 1360,    0,    0, 1366,    0,    0, 1358,
     1358, 1358, 1362, 1361, 1369,    0, 1359, 1359, 1359, 1368,
        0,    0, 1371, 1360, 1360, 1360, 1361, 1361, 1361, 1372,
     1362, 1362, 1362, 1364, 1366, 1363, 1363, 1363, 1370, 1365,

        0, 1368, 1369, 1373,    0, 1364, 1364, 1364, 1367, 1367,
     1367, 1365, 1365, 1365, 1374,    0,    0, 1366, 1366, 1366,
     1376, 1371, 1370, 1375,    0, 1369, 1369, 1369, 1377, 1373,
     1368, 1368, 1368, 1371, 1371, 1371, 1379,    0,    0, 1378,
     1372, 1372, 1372, 1375, 1380,    0,    0, 1384, 1376, 1370,
     1370, 1370, 1385,    0, 1373, 1373, 1373,    0, 1381, 1377,
        0,    0,    0, 1382,    0, 1374, 1374, 1374,    0, 1383,
        0, 1376, 1376, 1376, 1375, 1375, 1375, 1378, 1386, 1377,
     1377, 1377, 1381, 1382, 1387, 1384,    0, 1379, 1379, 1379,
     1378, 1378, 1378, 1383, 1388, 1380, 1380, 1380, 1384, 1384,

     1384, 1389,    0, 1385, 1385, 1385, 1390,    0,    0, 1381,
     1381, 1381, 1391,    0, 1382, 1382, 1382, 1388, 1392,    0,
     1383, 1383, 1383,    0, 1393,    0, 1390, 1394,    0, 1386,
     1386, 1386, 1395,    0, 1389, 1387, 1387, 1387, 1396,    0,
        0, 1398,    0,    0,    0, 1388, 1388, 1388, 1400,    0,
        0, 1392, 1389, 1389, 1389, 1393, 1399, 1390, 1390, 1390,
     1397,    0,    0, 1391, 1391, 1391, 1394,    0, 1402, 1392,
     1392, 1392, 1396, 1401,    0, 1393, 1393, 1393, 1394, 1394,
     1394, 1403, 1398, 1395, 1395, 1395, 1400, 1405, 1397, 1396,
     1396, 1396, 1398, 1398, 1398, 1406, 1399,    0, 1404, 1400,

     1400, 1400, 1402, 1407,    0,    0, 1401, 1399, 1399, 1399,
     1408, 1397, 1397, 1397, 1408, 1405,    0, 1409, 1406, 1402,
     1402, 1402, 1404, 1411, 1401, 1401, 1401,    0,    0, 1410,
        0, 1407, 1403, 1403, 1403, 1413,    0,    0, 1405, 1405,
     1405, 1415,    0,    0, 1412, 1411, 1406, 1406, 1406, 1404,
     1404, 1404, 1414,    0, 1407, 1407, 1407, 1410, 1416,    0,
        0, 1417,    0,    0,    0, 1408, 1408, 1408, 1409, 1409,
     1409, 1419,    0,    0, 1411, 1411, 1411, 1418, 1414,    0,
     1410, 1410, 1410, 1412, 1420,    0, 1413, 1413, 1413,    0,
     1422, 1416, 1415, 1415, 1415, 1412, 1412, 1412, 1421,    0,

        0, 1423,    0, 1414, 1414, 1414,    0, 1424,    0, 1416,
     1416, 1416, 1417, 1417, 1417, 1425,    0, 1418, 1422, 1426,
        0, 1420, 1419, 1419, 1419, 1427,    0,    0, 1418, 1418,
     1418, 1421, 1428,    0,    0, 1420, 1420, 1420,    0, 1426,
     1429, 1422, 1422, 1422, 1424, 1430,    0,    0, 1425, 1421,
     1421, 1421, 1423, 1423, 1423,    0,    0, 1431, 1424, 1424,
     1424, 1432,    0, 1428, 1427, 1433, 1425, 1425, 1425, 1434,
     1426, 1426, 1426, 1429, 1435,    0, 1427, 1427, 1427, 1449,
     1449, 1449, 1466, 1428, 1428, 1428,    0,    0,    0, 1465,
        0, 1429, 1429, 1429, 1431, 1467, 1430, 1430, 1430,    0,

        0,    0, 1435, 1468, 1433,    0, 1469,    0, 1431, 1431,
     1431, 1470, 1432, 1432, 1432, 1465, 1433, 1433, 1433, 1466,
     1434, 1434, 1434,    0, 1471, 1435, 1435, 1435, 1472, 1467,
        0, 1474,    0, 1466, 1466, 1466, 1468, 1473,    0, 1470,
     1465, 1465, 1465, 1475,    0, 1469, 1467, 1467, 1467, 1449,
     1449, 1449, 1471, 1476, 1468, 1468, 1468, 1469, 1469, 1469,
     1479, 1473, 1470, 1470, 1470, 1474, 1480,    0,    0, 1477,
        0, 1475, 1472, 1481,    0, 1471, 1471, 1471, 1478, 1472,
     1472, 1472, 1474, 1474, 1474, 1482,    0,    0, 1473, 1473,
     1473, 1483,    0,    0, 1475, 1475, 1475, 1477, 1479, 1484,

     1478,    0,    0, 1484, 1476, 1476, 1476, 1485,    0, 1482,
     1486, 1479, 1479, 1479,    0,    0,    0, 1480, 1480, 1480,
     1477, 1477, 1477, 1483, 1481, 1481, 1481, 1490,    0, 1478,
     1478, 1478,    0, 1489,    0,    0, 1482, 1482, 1482, 1488,
        0,    0, 1483, 1483, 1483, 1487,    0,    0, 1491,    0,
        0, 1490, 1492,    0, 1484, 1484, 1484, 1493, 1485, 1485,
     1485, 1486, 1486, 1486,    0, 1487, 1489, 1488, 1494,    0,
        0, 1495,    0, 1487, 1496,    0,    0,    0, 1490, 1490,
     1490, 1493, 1497,    0, 1489, 1489, 1489, 1491, 1499,    0,
     1488, 1488, 1488,    0, 1494, 1498, 1487, 1487, 1487, 1491,

     1491, 1491, 1500, 1492, 1492, 1492, 1503,    0, 1493, 1493,
     1493, 1501,    0, 1497,    0, 1495, 1502,    0,    0, 1494,
     1494, 1494, 1495, 1495, 1495, 1496, 1496, 1496, 1498,    0,
        0, 1504,    0, 1497, 1497, 1497, 1506,    0,    0, 1499,
     1499, 1499, 1507,    0,    0, 1501, 1498, 1498, 1498, 1502,
     1505,    0,    0, 1500, 1500, 1500, 1511, 1503, 1503, 1503,
     1508,    0, 1501, 1501, 1501,    0, 1509, 1502, 1502, 1502,
     1504, 1510,    0,    0, 1512,    0, 1505, 1514, 1511,    0,
     1506, 1513, 1504, 1504, 1504,    0,    0, 1506, 1506, 1506,
     1509, 1516,    0, 1507, 1507, 1507,    0,    0, 1512, 1508,

     1518, 1505, 1505, 1505, 1515, 1513,    0, 1511, 1511, 1511,
     1510, 1508, 1508, 1508, 1519, 1514,    0, 1509, 1509, 1509,
     1517,    0, 1510, 1510, 1510, 1512, 1512, 1512, 1514, 1514,
     1514, 1520, 1513, 1513, 1513, 1516, 1519, 1515, 1521,    0,
        0, 1522, 1516, 1516, 1516, 1524,    0,    0, 1517, 1523,
     1525, 1518, 1518, 1518, 1525, 1515, 1515, 1515, 1527,    0,
        0,    0, 1521,    0, 1526, 1519, 1519, 1519, 1520,    0,
     1528, 1517, 1517, 1517,    0, 1523,    0,    0,    0, 1529,
     1524,    0, 1520, 1520, 1520,    0, 1531,    0,    0, 1521,
     1521, 1521, 1522, 1522, 1522, 1526, 1524, 1524, 1524, 1532,

     1523, 1523, 1523, 1528, 1530, 1525, 1525, 1525, 1534, 1527,
     1527, 1527, 1529, 1533,    0, 1526, 1526, 1526, 1535,    0,
        0, 1528, 1528, 1528, 1531, 1536,    0, 1532, 1530, 1537,
     1529, 1529, 1529, 1540,    0,    0,    0, 1531, 1531, 1531,
     1543, 1534,    0, 1538, 1533,    0,    0,    0, 1539, 1537,
     1532, 1532, 1532, 1544,    0, 1530, 1530, 1530, 1536, 1534,
     1534, 1534,    0, 1541, 1533, 1533, 1533, 1538, 1539, 1535,
     1535, 1535, 1539,    0, 1540, 1542, 1536, 1536, 1536, 1544,
     1537, 1537, 1537, 1545, 1540, 1540, 1540, 1541,    0, 1546,
        0, 1543, 1543, 1543, 1538, 1538, 1538, 1547,    0, 1539,

     1539, 1539,    0, 1542, 1544, 1544, 1544, 1548,    0,    0,
        0,    0,    0, 1549, 1541, 1541, 1541, 1550,    0,    0,
     1545, 1552,    0, 1547, 1551,    0, 1542, 1542, 1542, 1546,
     1553,    0,    0, 1554, 1545, 1545, 1545, 1549, 1555,    0,
     1546, 1546, 1546, 1550, 1556, 1552, 1548, 1563, 1547, 1547,
     1547, 1564, 1557,    0, 1553, 1564,    0,    0, 1548, 1548,
     1548, 1555, 1551, 1567, 1549, 1549, 1549, 1566, 1550, 1550,
     1550, 1569, 1552, 1552, 1552, 1551, 1551, 1551, 1557, 1565,
        0, 1553, 1553, 1553, 1554, 1554, 1554, 1567, 1568, 1555,
     1555, 1555, 1571, 1566,    0, 1556, 1556, 1556, 1563, 1563,

     1563, 1572,    0, 1557, 1557, 1557, 1564, 1564, 1564, 1570,
     1568,    0, 1565, 1570, 1567, 1567, 1567, 1573, 1566, 1566,
     1566, 1575, 1569, 1569, 1569, 1574,    0,    0, 1576,    0,
     1565, 1565, 1565, 1577, 1572,    0,    0, 1578,    0, 1568,
     1568, 1568,    0, 1571, 1571, 1571, 1584,    0,    0,    0,
     1580, 1573, 1572, 1572, 1572,    0,    0, 1579, 1574,    0,
     1575, 1578,    0, 1581, 1570, 1570, 1570, 1583, 1573, 1573,
     1573, 1582, 1575, 1575, 1575, 1586, 1574, 1574, 1574, 1576,
     1576, 1576, 1579, 1580, 1577, 1577, 1577, 1585, 1578, 1578,
     1578, 1585,    0, 1582, 1587, 1579, 1581, 1584, 1584, 1584,

     1588, 1580, 1580, 1580, 1589,    0, 1583, 1590, 1579, 1579,
     1579, 1586, 1592,    0, 1581, 1581, 1581, 1591, 1583, 1583,
     1583, 1593, 1582, 1582, 1582, 1594, 1586, 1586, 1586, 1594,
        0,    0, 1595, 1590,    0, 1597,    0,    0, 1596,    0,
        0,    0, 1585, 1585, 1585, 1587, 1587, 1587, 1598,    0,
     1591, 1588, 1588, 1588, 1599, 1589, 1589, 1589, 1590, 1590,
     1590,    0, 1600, 1592, 1592, 1592, 1596, 1601, 1591, 1591,
     1591, 1602, 1593, 1593, 1593, 1604,    0,    0, 1603,    0,
     1594, 1594, 1594, 1595, 1595, 1595, 1597, 1597, 1597, 1596,
     1596, 1596, 1598, 1599, 1600, 1602,    0, 1606,    0, 1598,

     1598, 1598, 1603,    0, 1607, 1599, 1599, 1599, 1605,    0,
        0, 1609,    0, 1600, 1600, 1600, 1608,    0, 1601, 1601,
     1601, 1606, 1602, 1602, 1602, 1610, 1604, 1604, 1604, 1603,
     1603, 1603, 1607, 1611, 1605,    0, 1613,    0,    0,    0,
        0, 1612,    0,    0, 1614,    0,    0, 1615, 1606, 1606,
     1606, 1616, 1610, 1608, 1620, 1607, 1607, 1607, 1617, 1605,
     1605, 1605, 1609, 1609, 1609, 1612,    0, 1608, 1608, 1608,
     1614, 1611, 1618,    0,    0, 1619, 1610, 1610, 1610, 1621,
     1620,    0, 1622,    0, 1611, 1611, 1611, 1613, 1613, 1613,
     1623, 1617, 1612, 1612, 1612, 1614, 1614, 1614, 1615, 1615,

     1615,    0, 1616, 1616, 1616, 1620, 1620, 1620, 1624, 1617,
     1617, 1617, 1625, 1619,    0, 1626, 1618,    0, 1621, 1628,
     1622,    0, 1629, 1618, 1618, 1618, 1619, 1619, 1619, 1623,
     1621, 1621, 1621, 1622, 1622, 1622, 1625, 1627,    0, 1624,
     1630, 1623, 1623, 1623, 1631,    0, 1629, 1632,    0,    0,
     1634,    0,    0, 1626, 1633,    0,    0, 1627, 1635, 1624,
     1624, 1624, 1636, 1625, 1625, 1625, 1626, 1626, 1626, 1632,
     1628, 1628, 1628, 1629, 1629, 1629, 1637, 1633, 1630, 1638,
        0,    0, 1635,    0, 1639,    0,    0, 1642, 1627, 1627,
     1627, 1630, 1630, 1630, 1643, 1631, 1631, 1631, 1632, 1632,

     1632, 1634, 1634, 1634, 1644, 1633, 1633, 1633, 1645, 1635,
     1635, 1635, 1639, 1636, 1636, 1636, 1647, 1638,    0, 1648,
        0, 1642, 1646,    0,    0, 1643, 1650, 1637, 1637, 1637,
     1638, 1638, 1638, 1649,    0, 1639, 1639, 1639, 1642, 1642,
     1642,    0, 1646, 1652,    0, 1643, 1643, 1643, 1651,    0,
        0,    0,    0, 1653, 1647, 1644, 1644, 1644, 1654, 1645,
     1645, 1645,    0, 1655,    0, 1650, 1649, 1647, 1647, 1647,
     1648, 1648, 1648, 1646, 1646, 1646, 1651, 1650, 1650, 1650,
     1657, 1652, 1654, 1658, 1649, 1649, 1649, 1653, 1659,    0,
        0, 1656,    0,    0, 1652, 1652, 1652, 1660,    0, 1651,

     1651, 1651, 1655, 1661, 1653, 1653, 1653, 1661,    0, 1654,
     1654, 1654, 1662,    0, 1655, 1655, 1655, 1656, 1657, 1663,
        0, 1659, 1665,    0,    0, 1664,    0,    0, 1666,    0,
        0, 1657, 1657, 1657, 1658, 1658, 1658, 1660, 1667, 1659,
     1659, 1659, 1656, 1656, 1656, 1668,    0,    0, 1660, 1660,
     1660, 1671, 1670,    0,    0, 1671,    0, 1663, 1661, 1661,
     1661, 1669,    0, 1662, 1662, 1662, 1664,    0,    0,    0,
     1663, 1663, 1663, 1665, 1665, 1665, 1664, 1664, 1664, 1666,
     1666, 1666, 1672,    0, 1669, 1670, 1673,    0,    0, 1667,
     1667, 1667, 1674,    0,    0, 1675, 1668, 1668, 1668, 1676,

        0,    0, 1678, 1670, 1670, 1670, 1671, 1671, 1671, 1679,
        0, 1677, 1669, 1669, 1669, 1677,    0,    0, 1681, 1675,
        0, 1672, 1680,    0,    0, 1683,    0, 1673, 1678, 1682,
     1674,    0, 1685, 1672, 1672, 1672, 1686, 1673, 1673, 1673,
     1684,    0,    0, 1674, 1674, 1674, 1675, 1675, 1675, 1680,
     1676, 1676, 1676, 1678, 1678, 1678, 1685, 1682, 1687,    0,
     1679, 1679, 1679, 1688,    0,    0, 1677, 1677, 1677, 1681,
     1681, 1681, 1689, 1680, 1680, 1680, 1683, 1683, 1683, 1684,
     1682, 1682, 1682, 1685, 1685, 1685, 1690, 1686, 1686, 1686,
     1691, 1684, 1684, 1684, 1688, 1689, 1692,    0,    0, 1693,

        0,    0, 1694,    0,    0, 1695,    0,    0, 1697, 1687,
     1687, 1687,    0,    0, 1688, 1688, 1688, 1691, 1698,    0,
        0, 1701,    0, 1689, 1689, 1689, 1702,    0,    0, 1700,
        0, 1707, 1699,    0,    0, 1707,    0, 1690, 1690, 1690,
     1704, 1691, 1691, 1691, 1695, 1697,    0, 1692, 1692, 1692,
     1693, 1693, 1693, 1694, 1694, 1694, 1695, 1695, 1695, 1697,
     1697, 1697, 1698, 1699, 1700, 1703,    0,    0, 1705, 1698,
     1698, 1698, 1701, 1701, 1701, 1704, 1706, 1702, 1702, 1702,
     1700, 1700, 1700, 1699, 1699, 1699, 1707, 1707, 1707, 1708,
        0, 1704, 1704, 1704, 1709,    0,    0, 1710,    0, 1703,

     1711,    0,    0, 1715,    0, 1705, 1712,    0,    0, 1713,
        0, 1706, 1714,    0,    0, 1716, 1703, 1703, 1703, 1705,
     1705, 1705, 1718,    0, 1711, 1720,    0, 1706, 1706, 1706,
     1723, 1710,    0, 1713, 1723,    0, 1714, 1717,    0,    0,
     1708, 1708, 1708, 1722, 1712, 1709, 1709, 1709, 1710, 1710,
     1710, 1711, 1711, 1711, 1715, 1715, 1715, 1712, 1712, 1712,
     1713, 1713, 1713, 1714, 1714, 1714, 1716, 1716, 1716, 1719,
     1717,    0, 1721, 1718, 1718, 1718, 1720, 1720, 1720,    0,
     1724, 1722,    0, 1725,    0, 1723, 1723, 1723, 1717, 1717,
     1717, 1726,    0, 1719, 1722, 1722, 1722, 1727,    0, 1729,

     1728,    0,    0, 1729,    0,    0, 1730, 1721, 1724, 1731,
     1732,    0,    0,    0, 1732,    0,    0, 1725, 1733,    0,
     1719, 1719, 1719, 1721, 1721, 1721, 1735,    0, 1726, 1727,
     1736, 1724, 1724, 1724, 1725, 1725, 1725, 1734,    0,    0,
     1738,    0, 1726, 1726, 1726, 1743, 1735,    0, 1727, 1727,
     1727, 1728, 1728, 1728, 1729, 1729, 1729, 1730, 1730, 1730,
     1731, 1731, 1731, 1736, 1737, 1732, 1732, 1732, 1734, 1733,
     1733, 1733, 1738, 1743, 1739,    0,    0, 1735, 1735, 1735,
     1740, 1736, 1736, 1736, 1737, 1741,    0,    0, 1734, 1734,
     1734, 1738, 1738, 1738, 1739, 1742, 1743, 1743, 1743, 1744,

        0,    0, 1745,    0,    0, 1746,    0,    0, 1741, 1747,
        0,    0,    0, 1749, 1740, 1737, 1737, 1737,    0,    0,
     1748,    0,    0,    0, 1751, 1739, 1739, 1739, 1742,    0,
     1756, 1740, 1740, 1740, 1744, 1750, 1741, 1741, 1741, 1746,
     1748, 1749, 1753,    0,    0, 1752, 1742, 1742, 1742,    0,
     1744, 1744, 1744, 1745, 1745, 1745, 1746, 1746, 1746, 1751,
     1747, 1747, 1747, 1750, 1749, 1749, 1749, 1754, 1756,    0,
     1753, 1748, 1748, 1748, 1755, 1751, 1751, 1751, 1752, 1757,
        0, 1756, 1756, 1756, 1758,    0, 1750, 1750, 1750, 1759,
        0, 1754, 1760, 1753, 1753, 1753, 1752, 1752, 1752,    0,

        0, 1761, 1755,    0, 1764,    0, 1758,    0,    0, 1762,
        0,    0, 1763,    0, 1760,    0, 1765,    0, 1754, 1754,
     1754, 1761,    0, 1757, 1768, 1755, 1755, 1755, 1764, 1766,
     1757, 1757, 1757, 1769,    0, 1758, 1758, 1758, 1765, 1767,
     1759, 1759, 1759, 1760, 1760, 1760, 1762, 1768,    0, 1763,
     1766, 1770, 1761, 1761, 1761, 1764, 1764, 1764, 1772, 1767,
     1762, 1762, 1762, 1763, 1763, 1763, 1771, 1765, 1765, 1765,
     1769, 1773, 1770,    0, 1774, 1768, 1768, 1768,    0, 1775,
     1766, 1766, 1766, 1777, 1769, 1769, 1769,    0,    0, 1776,
     1767, 1767, 1767, 1778,    0, 1774, 1779,    0,    0, 1771,

     1781,    0, 1770, 1770, 1770, 1780,    0, 1777, 1784, 1772,
     1772, 1772, 1775, 1782,    0,    0,    0, 1771, 1771, 1771,
     1779,    0, 1773, 1773, 1773, 1774, 1774, 1774, 1776, 1780,
     1775, 1775, 1775, 1782, 1777, 1777, 1777,    0, 1785, 1781,
     1776, 1776, 1776, 1786, 1778, 1778, 1778, 1779, 1779, 1779,
     1783, 1781, 1781, 1781, 1783,    0, 1780, 1780, 1780, 1784,
     1784, 1784, 1785, 1787, 1782, 1782, 1782,    0, 1788,    0,
        0,    0,    0, 1789, 1786,    0,    0, 1790,    0,    0,
     1791,    0,    0, 1792,    0,    0,    0,    0, 1793, 1785,
     1785, 1785, 1788, 1789, 1786, 1786, 1786,    0, 1794,    0,

     1787, 1796,    0,    0,    0, 1783, 1783, 1783, 1790,    0,
        0, 1795,    0,    0, 1787, 1787, 1787, 1797, 1791, 1788,
     1788, 1788, 1794, 1792, 1789, 1789, 1789, 1793, 1790, 1790,
     1790, 1791, 1791, 1791, 1792, 1792, 1792, 1798,    0, 1793,
     1793, 1793, 1795, 1799,    0,    0, 1800,    0,    0, 1794,
     1794, 1794, 1796, 1796, 1796, 1797, 1801,    0,    0, 1802,
        0,    0, 1795, 1795, 1795, 1803,    0,    0, 1797, 1797,
     1797, 1804,    0,    0, 1805,    0,    0, 1806,    0,    0,
     1807,    0, 1799, 1809, 1800, 1803,    0, 1802, 1798, 1798,
     1798, 1812,    0,    0, 1799, 1799, 1799, 1800, 1800, 1800,

     1808,    0,    0, 1813,    0, 1806, 1810, 1801, 1801, 1801,
     1802, 1802, 1802, 1805,    0, 1811, 1803, 1803, 1803, 1807,
        0, 1814, 1804, 1804, 1804, 1805, 1805, 1805, 1806, 1806,
     1806, 1807, 1807, 1807, 1809, 1809, 1809, 1813, 1810, 1808,
     1811, 1816, 1812, 1812, 1812, 1814, 1815,    0,    0, 1817,
        0, 1808, 1808, 1808, 1813, 1813, 1813, 1810, 1810, 1810,
        0,    0, 1818,    0,    0, 1820, 1811, 1811, 1811, 1819,
        0,    0, 1814, 1814, 1814, 1821,    0,    0, 1822, 1815,
     1816,    0, 1823, 1817,    0,    0, 1825,    0,    0, 1820,
     1826,    0, 1816, 1816, 1816, 1818,    0, 1815, 1815, 1815,

     1817, 1817, 1817,    0,    0, 1824, 1819,    0, 1827,    0,
        0, 1829, 1825, 1818, 1818, 1818, 1820, 1820, 1820, 1823,
     1819, 1819, 1819, 1828, 1826,    0, 1821, 1821, 1821, 1822,
     1822, 1822, 1830, 1823, 1823, 1823, 1824, 1825, 1825, 1825,
     1831, 1826, 1826, 1826, 1832, 1827,    0, 1833,    0, 1828,
     1834, 1829,    0, 1835,    0,    0, 1824, 1824, 1824, 1827,
     1827, 1827, 1829, 1829, 1829, 1836,    0,    0, 1837, 1832,
        0, 1838,    0,    0, 1828, 1828, 1828, 1839,    0,    0,
     1841,    0,    0, 1830, 1830, 1830, 1840, 1834,    0,    0,
     1837, 1831, 1831, 1831, 1843, 1832, 1832, 1832, 1833, 1833,

     1833, 1834, 1834, 1834, 1835, 1835, 1835, 1842, 1841,    0,
     1844,    0,    0,    0,    0,    0, 1836, 1836, 1836, 1837,
     1837, 1837, 1838, 1838, 1838, 1840,    0, 1843, 1839, 1839,
     1839, 1841, 1841, 1841,    0,    0,    0, 1840, 1840, 1840,
        0, 1842,    0,    0,    0, 1843, 1843, 1843,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1842, 1842,
     1842, 1844, 1844, 1844, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1847, 1847, 1847, 1847, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847,

     1847, 1847, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1851,
     1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851,
     1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1852, 1852,
     1852, 1852, 1852, 1852, 1852, 1852, 1852, 1852, 1852, 1852,
     1852, 1852, 1852, 1852, 1852, 1852, 1852, 1853, 1853, 1853,

     1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853,
     1853, 1853, 1853, 1853, 1853, 1853, 1854, 1854, 1854, 1854,
     1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
     1854, 1854, 1854, 1854, 1854, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1856, 1856, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857,
     1857, 1857, 1858, 1858,    0, 1858, 1859, 1859, 1859, 1859,

     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,
     1859, 1859, 1859, 1859, 1859, 1860, 1860,    0,    0, 1860,
     1860, 1861,    0, 1861, 1861,    0, 1861, 1861,    0, 1861,
     1862,    0, 1862, 1862, 1862,    0,    0, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862,    0, 1862, 1863,    0,
     1863,    0, 1863,    0, 1863, 1863, 1863, 1863, 1863, 1863,
     1863, 1863, 1863, 1863,    0, 1863, 1864,    0, 1864, 1864,
        0, 1864, 1864,    0, 1864, 1865,    0, 1865,    0,    0,
     1865, 1865,    0, 1865, 1866,    0, 1866, 1866, 1866, 1866,
     1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866,

     1866, 1866, 1867,    0, 1867, 1867, 1867,    0, 1867, 1867,
     1867, 1867, 1867, 1867, 1867, 1867, 1867, 1867,    0, 1867,
     1868, 1868,    0,    0,    0,    0,    0,    0,    0, 1868,
        0, 1868, 1868,    0, 1868, 1868,    0, 1868, 1869, 1869,
     1869, 1869, 1869, 1869, 1869, 1869,    0, 1869, 1869, 1869,
     1869,    0, 1869, 1869, 1869, 1869, 1869, 1870, 1870, 1870,
     1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870,
        0, 1870, 1870, 1870, 1870, 1870, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1874, 1874,    0,    0, 1874,    0,    0,
        0,    0, 1874,    0, 1874, 1874,    0, 1874, 1874,    0,
     1874, 1875,    0, 1875, 1875, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1876,
        0, 1876,    0,    0, 1876, 1876,    0, 1876, 1877,    0,
     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,
     1877, 1877, 1877, 1877, 1877, 1877, 1878,    0, 1878, 1878,

        0, 1878, 1878,    0, 1878, 1879,    0, 1879, 1879, 1879,
     1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879,
     1879, 1879, 1879, 1880,    0, 1880, 1880, 1880, 1880, 1880,
     1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880,
     1880, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881,
     1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1883,
        0, 1883, 1883,    0, 1883, 1883,    0, 1883, 1884, 1884,
     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,

     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1885, 1885, 1885,
     1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885,
     1885, 1885, 1885, 1885, 1885, 1885, 1886, 1886,    0, 1886,
     1887, 1887,    0,    0, 1887, 1887, 1888,    0,    0, 1888,
     1888, 1889,    0, 1889, 1889,    0, 1889, 1889,    0, 1889,
     1890,    0,    0,    0,    0,    0, 1890, 1890,    0, 1890,
     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1891, 1891, 1891, 1891, 1891, 1891, 1891,    0, 1891, 1892,
     1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892,
     1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1893,    0,

     1893, 1893, 1893,    0,    0, 1893, 1893, 1893, 1893, 1893,
     1893, 1893, 1893, 1893,    0, 1893, 1894,    0, 1894,    0,
     1894,    0, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
     1894, 1894,    0, 1894, 1895,    0, 1895, 1895,    0, 1895,
     1895,    0, 1895, 1896, 1896,    0, 1896, 1897,    0, 1897,
        0,    0, 1897, 1897,    0, 1897, 1898,    0, 1898, 1898,
     1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898,
     1898, 1898, 1898, 1898, 1899,    0, 1899, 1899, 1899,    0,
     1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899,
        0, 1899, 1900, 1900,    0,    0,    0,    0,    0,    0,

        0, 1900,    0, 1900, 1900,    0, 1900, 1900,    0, 1900,
     1901, 1901,    0, 1901, 1902, 1902, 1902, 1902, 1902, 1902,
     1902, 1902,    0, 1902, 1902, 1902, 1902,    0, 1902, 1902,
     1902, 1902, 1902, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
     1903, 1903, 1903, 1903, 1903, 1903,    0, 1903, 1903, 1903,
     1903, 1903, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,
     1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,
     1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906,

     1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1907,
     1907,    0,    0, 1907,    0,    0,    0,    0, 1907,    0,
     1907, 1907,    0, 1907, 1907,    0, 1907, 1908, 1908,    0,
     1908, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909,
     1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909,    0, 1909,
     1910,    0, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
     1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1911,    0,
     1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1912, 1912, 1912, 1912,
     1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912,

     1912, 1912, 1912, 1912, 1912, 1913,    0, 1913,    0,    0,
     1913, 1913,    0, 1913, 1914,    0, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1915,    0, 1915, 1915,    0, 1915, 1915,    0,
     1915, 1916, 1916,    0, 1916, 1917,    0, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1918,    0, 1918, 1918, 1918, 1918, 1918,
     1918, 1918,    0, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
     1918, 1919,    0, 1919, 1919, 1919, 1919, 1919, 1919, 1919,
     1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1921,    0,
     1921, 1921,    0, 1921, 1921,    0, 1921, 1922, 1922,    0,
     1922, 1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
     1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,    0, 1923,
     1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924,
     1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1925,
        0, 1925,    0,    0, 1925, 1925,    0, 1925, 1926,    0,
        0, 1926, 1926, 1927,    0, 1927,    0,    0, 1927, 1927,
        0, 1927, 1928,    0, 1928, 1928,    0, 1928, 1928,    0,

     1928, 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929,
     1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929,    0, 1929,
     1930,    0,    0,    0,    0,    0, 1930, 1930,    0, 1930,
     1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931,
     1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1934,
        0, 1934,    0,    0, 1934, 1934,    0, 1934, 1935,    0,
     1935, 1935,    0, 1935, 1935,    0, 1935, 1936,    0, 1936,
        0,    0, 1936, 1936,    0, 1936, 1937,    0, 1937, 1937,
     1937, 1937, 1937, 1937, 1937, 1937, 1937, 1937, 1937, 1937,
     1937, 1937, 1937, 1937, 1939, 1939,    0,    0,    0,    0,

        0,    0,    0, 1939,    0, 1939,    0,    0, 1939, 1939,
        0, 1939, 1940, 1940,    0,    0,    0,    0,    0,    0,
        0, 1940,    0, 1940, 1940,    0, 1940, 1940,    0, 1940,
     1941, 1941,    0, 1941, 1942, 1942,    0,    0, 1942,    0,
        0,    0,    0, 1942,    0, 1942,    0,    0, 1942, 1942,
        0, 1942, 1943, 1943,    0,    0, 1943,    0,    0,    0,
        0, 1943,    0, 1943, 1943,    0, 1943, 1943,    0, 1943,
     1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944,
     1944, 1944, 1944, 1944, 1944, 1944, 1944,    0, 1944, 1945,
     1945,    0, 1945, 1946,    0, 1946, 1946, 1946, 1946, 1946,

     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1946, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1948,    0, 1948,    0,    0, 1948, 1948,    0, 1948, 1949,
        0, 1949,    0,    0, 1949, 1949,    0, 1949, 1950,    0,
     1950, 1950,    0, 1950, 1950,    0, 1950, 1951,    0, 1951,
     1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1951, 1951, 1951, 1951, 1951, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1953,    0, 1953,    0,    0, 1953,

     1953,    0, 1953, 1954,    0, 1954, 1954,    0, 1954, 1954,
        0, 1954, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955,    0,
     1955, 1956, 1956,    0, 1956, 1957, 1957, 1957, 1957, 1957,
     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,
     1957, 1957, 1957, 1957, 1958,    0, 1958,    0,    0, 1958,
     1958,    0, 1958, 1959,    0, 1959,    0,    0, 1959, 1959,
        0, 1959, 1960,    0, 1960,    0,    0, 1960, 1960,    0,
     1960, 1961,    0, 1961, 1961,    0, 1961, 1961,    0, 1961,
     1962,    0, 1962, 1962, 1963,    0, 1963, 1963, 1964,    0,

     1964,    0,    0, 1964, 1964,    0, 1964, 1965,    0, 1965,
     1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1965, 1966,    0, 1966, 1966, 1967,
     1967,    0,    0,    0,    0,    0,    0,    0, 1967,    0,
     1967,    0,    0, 1967, 1967,    0, 1967, 1968,    0,    0,
        0,    0, 1968,    0, 1968,    0,    0, 1968, 1968,    0,
     1968, 1971, 1971,    0,    0, 1971,    0,    0,    0,    0,
     1971,    0, 1971,    0,    0, 1971, 1971,    0, 1971, 1972,
     1972,    0,    0,    0,    0,    0,    0,    0, 1972,    0,
     1972,    0,    0, 1972, 1972,    0, 1972, 1973,    0, 1973,

        0,    0, 1973, 1973,    0, 1973, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845
    } ;

static yyconst flex_int16_t yy_rule_linenum[355] =
    {   0,
      422,  423,  437,  438,  439,  440,  441,  442,  443,  444,
      445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
      455,  456,  457,  459,  466,  474,  475,  476,  477,  480,
      481,  483,  484,  485,  486,  487,  488,  489,  490,  491,
      492,  493,  494,  495,  496,  497,  498,  499,  500,  501,
      502,  503,  504,  505,  506,  507,  508,  509,  510,  511,
      512,  513,  514,  515,  516,  517,  518,  519,  520,  521,
      522,  523,  524,  525,  526,  527,  528,  529,  530,  531,
      532,  533,  534,  535,  536,  537,  538,  539,  540,  543,
      544,  545,  546,  547,  548,  549,  550,  551,  552,  553,

      556,  557,  558,  559,  560,  561,  562,  563,  564,  565,
      566,  573,  574,  575,  576,  577,  578,  580,  581,  582,
      583,  584,  585,  586,  587,  588,  589,  591,  592,  593,
      594,  595,  596,  597,  607,  608,  610,  611,  627,  628,
      629,  630,  631,  632,  633,  634,  635,  643,  644,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  655,
      656,  657,  658,  659,  660,  661,  662,  663,  664,  665,
      666,  667,  668,  669,  670,  671,  672,  673,  674,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  689,  690,  691,  692,  693,  694,  695,

      696,  697,  698,  699,  700,  701,  702,  703,  704,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  730,  731,  732,
      733,  734,  735,  736,  737,  738,  739,  740,  741,  743,
      744,  745,  746,  747,  748,  749,  751,  752,  753,  754,
      755,  756,  757,  758,  759,  760,  761,  762,  763,  764,
      765,  766,  767,  769,  770,  771,  778,  789,  794,  806,
      812,  814,  816,  818,  820,  822,  824,  826,  829,  830,
      839,  844,  849,  854,  859,  864,  869,  874,  879,  882,
      896,  902,  908,  927,  928,  930,  942,  943,  944,  945,

      946,  957,  971,  972,  973,  974,  975,  976,  977,  978,
      996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005,
     1006, 1018, 1019, 1031, 1032, 1044, 1045, 1046, 1047, 1060,
     1061, 1062, 1074, 1075, 1076, 1087, 1101, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1137, 1138, 1139, 1140, 1141,
     1142, 1143, 1144, 1153
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
/*
 * Copyright 2006-2008 The FLWOR Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#line 17 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"


#if defined (WIN32)
#pragma warning(disable: 4786)
#endif

#include <zorba/diagnostic_list.h>

#include "zorbatypes/schema_types.h"
#include "common/common.h"

#include <cstdlib>
#include <errno.h>
#include <limits.h>
#include <iostream>
#include <string>

#include "compiler/parser/jsoniq_driver.h"
#include "util/xml_util.h"

#ifdef __GNUC__
  // disable a warning in location.hh which comes with bison
  // position.hh:141: warning: suggest parentheses around && within ||
#  pragma GCC diagnostic ignored "-Wparentheses"
#endif

#include "compiler/parser/jsoniq_parser.hpp"

#ifdef __GNUC__
#  pragma GCC diagnostic warning "-Wparentheses"
#endif

#include "compiler/parser/jsoniq_scanner.h"


typedef zorba::jsoniq_parser::token token;
typedef zorba::jsoniq_parser::token_type token_type;

  /*______________________________________________________________________
   |
   |  Scanner states management
   |______________________________________________________________________*/

#define PUSH_STATE(state) \
  do { \
    yy_push_state(state); \
  } while(0)

#define POP_STATE() \
  do { \
    if (yy_get_start_stack_ptr() > 0) \
      yy_pop_state(); \
  } while(0)

#define PUSH_AND_BEGIN( pushed, new ) \
  do { \
    BEGIN new; \
    PUSH_STATE(pushed); \
  } while(0)


  /*______________________________________________________________________
   |
   |  String literals processing
   |______________________________________________________________________*/

#define TRY_TOKEN_INTERNAL(ttype, put, yytext, err_func)                \
  do {                                                                  \
    off_t res = getDriver()->symtab.put;                                \
    if (res < 0) {                                                      \
      yylval->err = getDriver()->err_func(yytext, *yylloc);             \
      return token::UNRECOGNIZED;                                       \
    } else {                                                            \
      yylval->sval = res;                                               \
      return token::ttype;                                              \
    }                                                                   \
  } while (0)

#define TRY_SVAL_TOKEN(ttype, put, yytext) \
    TRY_TOKEN_INTERNAL(ttype, put, yytext, unrecognizedToken)

#define TRY_CHARREF_LITERAL(ttype, put, yytext, yyleng) \
  TRY_TOKEN_INTERNAL(ttype, put (yytext, yyleng), yytext, unrecognizedToken)

#define TRY_STRING_LITERAL(ttype, yytext, yyleng) \
  TRY_TOKEN_INTERNAL(ttype, put_stringlit(yytext, yyleng), yytext, invalidCharRef)

#define TRY_URI_LITERAL(ttype, yytext, yyleng ) \
  TRY_TOKEN_INTERNAL(ttype, put_uri(yytext, yyleng), yytext, unrecognizedToken)

  // Returns 0 on success, non-zero on error
int checkXmlRefs(zorba::ZorbaParserError** err, char* yytext, int yyleng, zorba::jsoniq_scanner* scanner, zorba::jsoniq_parser::location_type* yylloc)
{
  std::string entity;
  const char* temp;
  char* pos = yytext;

  while (pos < yytext+yyleng)
  {
    if (*pos == '&')
    {
      pos += zorba::xml::parse_entity((const char*)pos, &entity);
      temp = entity.c_str();
      zorba::unicode::code_point cp = zorba::utf8::next_char(temp);
      if (!zorba::xml::is_valid(cp))
      {
        *err = scanner->getDriver()->parserErr(std::string("Invalid XML v1.0 codepoint in the string literal \"") + yytext + "\"", *yylloc, zorba::err::XQST0090);
        return 1;
      }
    }
    else
      pos++;
  }

  return 0;
}


#define COMP_CONSTR_ROLLBACK(invoke_yy_less)                            \
  do {                                                                  \
    int _STATE = YY_START;                                              \
    POP_STATE();                                                        \
    if (invoke_yy_less) {                                               \
      yylloc->columns(-1 * yyleng);                                     \
      yyless(0);                                                        \
    }                                                                   \
    if (yy_comp_constr_qname != "") {                                   \
      unput(' ');                                                       \
      for (int i=yy_comp_constr_qname.size()-1; i>=0; i--)              \
        unput(yy_comp_constr_qname[i]);                                 \
      yylloc->columns(-1 * (yy_comp_constr_qname.size()+1));            \
      yy_comp_constr_qname = "";                                        \
    }                                                                   \
    if (_STATE == MODE_ELEM_COMP_CONSTR)                                \
      return token::ELEMENT;                                            \
    else if (_STATE == MODE_ATTR_COMP_CONSTR)                           \
      return token::ATTRIBUTE;                                          \
    else if (_STATE == MODE_PI_COMP_CONSTR)                             \
      return token::PROCESSING_INSTRUCTION;                             \
    else                                                                \
      return token::NAMESPACE;                                          \
  } while (0)

/*
  Work around an incompatibility in flex (at least versions
  2.5.31 through 2.5.33): it generates code that does
  not conform to C89.  See Debian bug 333231
  <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
*/
#undef yywrap
#define yywrap() 1

/*
  By default yylex returns int, we use token_type.
  Unfortunately yyterminate by default returns 0, which is
  not of token_type.
*/
#define yyterminate() return token::_EOF


std::string start_jsoniq_state(int);   /* forward declaration, used by YY_USER_ACTION */

/*
  The macro YY_USER_ACTION can be defined to provide an action which is
  always executed prior to the matched rule's action.

  The following paragraph suffices to track locations accurately. Each
  time yylex is invoked, the begin position is moved onto the end
  position. Then when a pattern is matched, the end position is advanced
  of its width. In case it matched ends of lines, the end cursor is
  adjusted, and each time blanks are matched, the begin cursor is moved
  onto the end cursor to effectively ignore the blanks preceding tokens.
  Comments would be treated equally.
*/
#ifdef YY_USER_ACTION
#undef YY_USER_ACTION
#endif

#define YY_USER_ACTION \
{ \
  if (yy_flex_debug) { \
    std::cerr << "<" << start_jsoniq_state(YY_START) << ">" << "\""<<yytext<<"\"" << std::endl; \
  } \
  \
  int last_endl = 0;\
  for (int i=0; i<yyleng; i++) \
    if (yytext[i] == '\n')  \
    { \
      yylloc->lines(1);\
      last_endl = i+1;\
    }\
  \
  yylloc->step();\
  yylloc->columns(yyleng - last_endl);\
}


/*______________________________________________________________________
*                                                                      *
*  Scanner options                                                     *
*______________________________________________________________________*/
#define YY_NO_UNISTD_H 1
/*_____________________________________________________________________
|
|  UTF-8 characters definitions
|______________________________________________________________________*/
/* UTF8_1Byte    [\x00-\x7F] -- not used anywhere */
/*_____________________________________________________________________
|
|  Whitespace definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Basic character classes
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  XQuery allows '' to escape ', and "" to escape ".
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  NCName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  QName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Entity definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  EQName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Annotation QName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Numeric literal definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  String literal definitions
|______________________________________________________________________*/
/* Invalid strings */
/*_____________________________________________________________________
|
|  Content character definitions
|______________________________________________________________________*/
/* Char ranges and definitions used for parsing CDATA contents */
/*______________________________________________________________________
|
|  Exclusive start states
|______________________________________________________________________*/




















#line 395 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
  typedef zorba::jsoniq_parser::token token;
/*______________________________________________________________________
|
|  Override Flex's starting state here.
|______________________________________________________________________*/
#line 404 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
#define YY_USER_INIT      \
{                         \
  BEGIN MODE_SHEBANG;     \
}
#line 3594 "jsoniq_scanner.yy.cpp"

#define INITIAL 0
#define MODE_SHEBANG 1
#define INITIAL_ACCUMULATOR 2
#define MODE_APOS_ATTRIBUTE_CONTENT 3
#define MODE_QUOTE_ATTRIBUTE_CONTENT 4
#define MODE_ELEM_COMP_CONSTR 5
#define MODE_ATTR_COMP_CONSTR 6
#define MODE_PI_COMP_CONSTR 7
#define MODE_NS_COMP_CONSTR 8
#define MODE_CDATA_SECTION 9
#define MODE_ELEMENT_CONTENT 10
#define MODE_END_TAG 11
#define MODE_EXPR_COMMENT 12
#define MODE_EXPR_DOC_COMMENT 13
#define MODE_OCCURRENCE_INDICATOR 14
#define MODE_PRAGMA 15
#define MODE_PRAGMACONTENTS 16
#define MODE_PROCESSING_INSTRUCTION 17
#define MODE_PROCESSING_INSTRUCTION_CONTENT 18
#define MODE_START_TAG 19
#define MODE_XML_COMMENT 20

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 411 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"



  /*______________________________________________________________________
   |
   |  MODE_SHEBANG state
   |
   |  Accepts the "#!/path/interpreter" unix script shebang string
   |______________________________________________________________________*/

#line 3782 "jsoniq_scanner.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1846 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1845 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 355 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 355 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 356 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 422 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SHEBANG; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 423 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN INITIAL; yyless(0); }
	YY_BREAK

/*______________________________________________________________________
   |
   |  INITIAL State
   |
   |  This state is for patterns that occur at the beginning  of an
   |  expression or subexpression.
   |______________________________________________________________________*/

case 3:
YY_RULE_SETUP
#line 437 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LPAR; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 438 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SEMI; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 439 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COMMA; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 440 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MINUS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 441 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PLUS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 442 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SLASH; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 443 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SLASH_SLASH; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 444 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::BANG; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 445 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::AT_SIGN; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 446 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::RPAR; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 447 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::STAR; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 448 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOT_DOT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 449 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 450 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::HOOK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 451 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOLLAR; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 452 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOLLAR_DOLLAR; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 453 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::HASH; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 454 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COLON; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 455 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOUBLE_COLON; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 456 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PERCENTAGE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 457 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONCAT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 459 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  std::string lDocComment = theDriver->theDocComment.str();
  yylval->sval = getDriver()->symtab.put_commentcontent(lDocComment.c_str(), lDocComment.length());
  theDriver->theDocComment.str("");
  return token::DECLARE;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 466 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  std::string lDocComment = theDriver->theDocComment.str();
  yylval->sval = getDriver()->symtab.put_commentcontent(lDocComment.c_str(), lDocComment.length());
  theDriver->theDocComment.str("");
  return token::MODULE;
}
	YY_BREAK
/* Tokens with state transitions */
case 26:
YY_RULE_SETUP
#line 474 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{  PUSH_STATE(MODE_ELEM_COMP_CONSTR); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 475 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_ATTR_COMP_CONSTR); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 476 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_PI_COMP_CONSTR); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 477 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_NS_COMP_CONSTR); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 480 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::IF; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 481 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::RETURNING; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 483 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EXIT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 484 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WITH; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 485 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::BREAK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 486 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LOOP; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 487 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONTINUE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 488 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WHILE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 489 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SET; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 490 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VALIDATE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 491 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TYPE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 492 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SWITCH; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 493 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TYPESWITCH; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 494 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOCUMENT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 495 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TEXT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 496 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COMMENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 497 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FUNCTION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 498 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SIMPLE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 499 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::UPDATING; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 500 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SEQUENTIAL; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 501 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ORDERED;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 502 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::UNORDERED; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 503 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SCHEMA_ELEMENT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 504 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SCHEMA_ATTRIBUTE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 505 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NODE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 506 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOCUMENT_NODE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 507 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NS_NODE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 508 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONSTRUCTION; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 509 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DEFAULT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 510 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ORDER; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 511 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COLLATION; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 512 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::BASE_URI; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 513 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::IMPORT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 514 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SCHEMA; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 515 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COPY_NAMESPACES; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 516 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FOR; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 517 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LET; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 518 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ALLOWING; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 519 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SLIDING; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 520 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TUMBLING; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 521 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PREVIOUS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 522 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NEXT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 523 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ONLY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 524 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WHEN; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 525 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COUNT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 526 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::USING; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 527 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SOME; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 528 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EVERY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 529 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONTEXT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 530 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VARIABLE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 531 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::BOUNDARY_SPACE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 532 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ORDERING; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 533 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::XQUERY; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 534 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::JSONIQ; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 535 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VERSION; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 536 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::OPTION; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 537 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::AT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 538 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::REVALIDATION; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 539 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::AS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 540 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TRY; }
	YY_BREAK
/* Axes */
case 90:
YY_RULE_SETUP
#line 543 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ANCESTOR_OR_SELF; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 544 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ANCESTOR; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 545 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CHILD; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 546 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DESCENDANT_OR_SELF; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 547 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DESCENDANT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 548 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FOLLOWING_SIBLING; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 549 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FOLLOWING; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 550 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PARENT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 551 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PRECEDING_SIBLING; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 552 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PRECEDING; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 553 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SELF;}
	YY_BREAK
/* Decimal format */
case 101:
YY_RULE_SETUP
#line 556 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DECIMAL_FORMAT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 557 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DECIMAL_SEPARATOR; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 558 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::GROUPING_SEPARATOR; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 559 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INFINITY_VALUE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 560 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MINUS_SIGN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 561 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NaN; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 562 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PERCENT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 563 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PER_MILLE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 564 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ZERO_DIGIT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 565 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DIGIT; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 566 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PATTERN_SEPARATOR; }
	YY_BREAK
/*______________________________________________________________________
   |
   |  Data Definition Facility tokens
   |______________________________________________________________________*/
case 112:
YY_RULE_SETUP
#line 573 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COLLECTION; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 574 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONSTOPT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 575 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::APPEND_ONLY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 576 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::QUEUE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 577 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MUTABLE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 578 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::READ_ONLY; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 580 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INDEX; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 581 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::UNIQUE; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 582 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NON; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 583 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MANUALLY; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 584 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::AUTOMATICALLY; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 585 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MAINTAINED; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 586 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::RANGE; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 587 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EQUALITY; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 588 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ON; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 589 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::GENERAL; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 591 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INTEGRITY; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 592 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONSTRAINT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 593 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CHECK; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 594 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::KEY; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 595 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FOREACH; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 596 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FOREIGN; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 597 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::KEYS; }
	YY_BREAK
/*______________________________________________________________________
   |
   |  JSONIQ tokens
   |______________________________________________________________________*/
/* "[" and "]" are not JSONiq tokens, but they have been moved here because
     of the "{[ ]}" grammar construct */
case 135:
YY_RULE_SETUP
#line 607 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACK; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 608 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); return token::RBRACK; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 610 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(INITIAL_ACCUMULATOR); return token::L_ACCUMULATOR_OBJ_UNION; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 611 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
        // This if() disambiguates between the "{[ ]}" grammar construct and the
        // plain "[ ]" predicate
        if (YY_START == INITIAL_ACCUMULATOR)
        {
          POP_STATE();
          return token::R_ACCUMULATOR_OBJ_UNION;
        }
        else
        {
          POP_STATE();
          yyless(1);
          return token::RBRACK;
        }
      }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 627 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::L_SIMPLE_OBJ_UNION; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 628 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::R_SIMPLE_OBJ_UNION; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 629 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::JSON; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 630 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::APPEND; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 631 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::POSITION; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 632 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::JSON_ITEM; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 633 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::STRUCTURED_ITEM; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 634 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{  return token::ARRAY; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 635 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{  return token::OBJECT; }
	YY_BREAK
/*______________________________________________________________________
     |
     | FT tokens
     |______________________________________________________________________*/
case 148:
YY_RULE_SETUP
#line 643 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONTAINS; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 644 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FTAND; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 645 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FTOR; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 646 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FTNOT; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 647 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NOT; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 648 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::_IN; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 649 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ALL; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 650 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WORDS; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 651 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ANY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 652 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WORD; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 653 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::END; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 654 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LEAST; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 655 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MOST; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 656 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::START; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 657 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CASE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 658 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INSENSITIVE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 659 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SENSITIVE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 660 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FT_OPTION; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 661 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DIACRITICS; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 662 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DIFFERENT; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 663 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DISTANCE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 664 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ENTIRE; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 665 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CONTENT; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 666 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EXACTLY; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 667 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FROM; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 668 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LANGUAGE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 669 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LEVELS; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 670 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LOWERCASE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 671 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NO; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 672 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::OCCURS; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 673 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PARAGRAPH; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 674 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PARAGRAPHS; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 675 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PHRASE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 676 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::RELATIONSHIP; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 677 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SAME; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 678 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SCORE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 679 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SENTENCE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 680 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SENTENCES; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 681 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TIMES; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 682 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::UPPERCASE; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 683 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WEIGHT; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 684 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WINDOW; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 685 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WITHOUT; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 686 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::STEMMING; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 687 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::STOP; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 688 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::THESAURUS; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 689 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WILDCARDS; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 690 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::GETS; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 691 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DIV; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 692 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EQUALS; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 693 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EXCEPT; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 694 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VAL_EQ; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 695 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VAL_GE; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 696 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VAL_GT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 697 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VAL_LE; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 698 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VAL_LT; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 699 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VAL_NE; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 700 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::GE; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 701 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FOLLOWS; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 702 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::GT; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 703 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::IDIV; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 704 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INTERSECT; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 705 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::IS; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 706 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 707 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PRECEDES; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 708 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MOD; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 709 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 710 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::GROUP; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 711 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::BY; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 712 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::STABLE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 713 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::OR; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 714 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::RETURN; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 715 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::RETURN; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 716 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SATISFIES; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 717 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TO; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 718 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::UNION; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 719 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VBAR; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 720 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::WHERE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 721 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::PRESERVE; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 722 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::STRIP; }
	YY_BREAK
/*______________________________________________________________________
   |
   | Update rules
   |______________________________________________________________________*/
case 228:
YY_RULE_SETUP
#line 730 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INSERT; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 731 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::_DELETE; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 732 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::REPLACE; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 733 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::VALUE; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 734 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::OF; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 735 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::RENAME; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 736 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::COPY; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 737 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NODES; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 738 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INTO; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 739 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::AFTER; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 740 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::BEFORE; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 741 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::MODIFY; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 743 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::_STRICT; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 744 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LAX; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 745 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::SKIP; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 746 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::THEN; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 747 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ELSE; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 748 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EXTERNAL; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 749 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::AND; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 751 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INHERIT; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 752 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NO_INHERIT; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 753 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NO_PRESERVE; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 754 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EMPTY_SEQUENCE; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 755 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ITEM; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 756 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CAST; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 757 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CASTABLE; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 758 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::INSTANCE;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 759 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TREAT; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 760 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FIRST; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 761 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::LAST; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 762 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::CATCH; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 763 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::_EMPTY; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 764 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::GREATEST; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 765 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ASCENDING; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 766 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DESCENDING; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 767 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ENCODING; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 769 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::NULL_TOKEN; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 770 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::TRUE_TOKEN; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 771 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::FALSE_TOKEN; }
	YY_BREAK
/*______________________________________________________________________
   |
   | Tokens with values
   |______________________________________________________________________*/
case 267:
YY_RULE_SETUP
#line 778 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  yylval->ival = getDriver()->symtab.integerval(yytext, yyleng);
  if (yylval->ival == NULL)
  {
    yylval->err = getDriver()->parserErr(yytext, *yylloc, err::FOAR0002);
    return token::UNRECOGNIZED;
  }
  else
    return token::INTEGER_LITERAL;
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 789 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  yylval->decval = getDriver()->symtab.decimalval(yytext, yyleng);
  return token::DECIMAL_LITERAL;
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 794 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  yylval->dval = getDriver()->symtab.doubleval(yytext, yyleng);
  if (yylval->dval == NULL)
  {
    // TODO: pjl: needs correct error code
    yylval->err = getDriver()->parserErr(yytext, *yylloc, err::FOAR0002);
    return token::UNRECOGNIZED;
  }
  else
    return token::DOUBLE_LITERAL;
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 806 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  /* invalid integer literal */
  yylval->err = getDriver()->parserErr(std::string("syntax error, unexpected \"") + yytext + "\", separator needed after numeric literal", *yylloc);
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 812 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(ELEM_WILDCARD, put_ncname(yytext, yyleng-2), yytext); }
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 814 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(ELEM_EQNAME_WILDCARD, put_ncname(yytext+2, yyleng-4), yytext+2); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 816 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(QNAME_SVAL, put_qname(yytext, yyleng), yytext); }
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 818 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(EQNAME_SVAL, put_qname(yytext, yyleng, false, false, true), yytext); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 820 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(ANNOTATION_QNAME_SVAL, put_qname(yytext+1, yyleng-1), yytext+1); /* skip the % sign */ }
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 822 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(ANNOTATION_EQNAME_SVAL, put_qname(yytext+1, yyleng-1, false, false, true), yytext+1); /* skip the % sign */ }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 824 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN (PREFIX_WILDCARD, put_ncname(yytext+2, yyleng-2), yytext); }
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 826 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ if (checkXmlRefs(&yylval->err, yytext, yyleng, this, yylloc)) return token::UNRECOGNIZED; TRY_STRING_LITERAL(STRING_LITERAL, yytext, yyleng); }
	YY_BREAK
/* Invalid string literals */
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 829 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->invalidCharRef(yytext, *yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 830 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->parserErr(std::string("syntax error, unterminated string literal \"") + yytext + "\"", *yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
/*______________________________________________________________________
   |
   | State transitions
   |______________________________________________________________________*/
/* transition to MODE_XML_COMMENT */
/* ------------------------------ */
case 281:
YY_RULE_SETUP
#line 839 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_XML_COMMENT); return token::XML_COMMENT_BEGIN; }
	YY_BREAK
/* transition to PROCESSING_INSTRUCTION */
/* ------------------------------------ */
case 282:
YY_RULE_SETUP
#line 844 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_PROCESSING_INSTRUCTION);return token::PI_BEGIN; }
	YY_BREAK
/* transition to CDATA_SECTION */
/* --------------------------- */
case 283:
YY_RULE_SETUP
#line 849 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ /* PUSH_AND_BEGIN (MODE_CDATA_SECTION, MODE_OPERATOR); */ return token::CDATA_BEGIN; }
	YY_BREAK
/* transition to MODE_START_TAG */
/* ---------------------------- */
case 284:
YY_RULE_SETUP
#line 854 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_START_TAG); return token::LT_OR_START_TAG; }
	YY_BREAK
/* transition to MODE_EXPR_DOC_COMMENT */
/* ----------------------------------- */
case 285:
YY_RULE_SETUP
#line 859 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_EXPR_DOC_COMMENT); }
	YY_BREAK
/* transition to MODE_EXPR_COMMENT */
/* ------------------------------- */
case 286:
YY_RULE_SETUP
#line 864 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_EXPR_COMMENT); }
	YY_BREAK
/* transition to PRAGMA */
/* -------------------- */
case 287:
YY_RULE_SETUP
#line 869 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_PRAGMA; return token::PRAGMA_BEGIN;}
	YY_BREAK
/* push initial state */
/* ------------------ */
case 288:
YY_RULE_SETUP
#line 874 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACE; }
	YY_BREAK
/* pop previous state */
/* ------------------ */
case 289:
YY_RULE_SETUP
#line 879 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); return token::RBRACE; }
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 882 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* END <MODE INITIAL,INITIAL_ACCUMULATOR> */
/*______________________________________________________________________
    |
    | MODE_ELEM_COMP_CONSTR, MODE_ATTR_COMP_CONSTR, MODE_PI_COMP_CONSTR
    | MODE_NS_COMP_CONSTR states
    |
    |______________________________________________________________________*/
case 291:
YY_RULE_SETUP
#line 896 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  if (yy_comp_constr_qname == "")
    yy_comp_constr_qname = yytext;
  else
    COMP_CONSTR_ROLLBACK(true);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 902 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  if (yy_comp_constr_qname == "")
    yy_comp_constr_qname = yytext;
  else
    COMP_CONSTR_ROLLBACK(true);
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 908 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  if ( yy_comp_constr_qname == "")
    COMP_CONSTR_ROLLBACK(true);
  else
  {
    int _STATE = YY_START;
    BEGIN INITIAL;
    std::string temp = yy_comp_constr_qname;
    yy_comp_constr_qname = "";
    if (_STATE == MODE_ELEM_COMP_CONSTR)
      TRY_SVAL_TOKEN(COMP_ELEMENT_QNAME_LBRACE, put_qname(temp.c_str(), temp.size()), temp.c_str());
    else if (_STATE == MODE_ATTR_COMP_CONSTR)
      TRY_SVAL_TOKEN(COMP_ATTRIBUTE_QNAME_LBRACE, put_qname(temp.c_str(), temp.size()), temp.c_str());
    else if (_STATE == MODE_PI_COMP_CONSTR)
      TRY_SVAL_TOKEN(COMP_PI_NCNAME_LBRACE, put_ncname(temp.c_str(), temp.size()), temp.c_str());
    else 
      TRY_SVAL_TOKEN(COMP_NS_NCNAME_LBRACE, put_ncname(temp.c_str(), temp.size()), temp.c_str());
  }
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 927 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_EXPR_COMMENT); }
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 928 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ /* continue lexing */ }
	YY_BREAK
case YY_STATE_EOF(MODE_ELEM_COMP_CONSTR):
case YY_STATE_EOF(MODE_ATTR_COMP_CONSTR):
case YY_STATE_EOF(MODE_PI_COMP_CONSTR):
case YY_STATE_EOF(MODE_NS_COMP_CONSTR):
#line 929 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ COMP_CONSTR_ROLLBACK(false); }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 930 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ COMP_CONSTR_ROLLBACK(true); }
	YY_BREAK
/*______________________________________________________________________
   |
   | PRAGMA State
   |
   | This state is entered in a a pragma expression, and recognizes
   | a QName that transits to a PRAGMACONTENTS state rather than an
   | OPERATOR state.
   |______________________________________________________________________*/
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 942 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_PRAGMACONTENTS; TRY_SVAL_TOKEN(QNAME_SVAL,  put_qname(yytext, yyleng, true, true), yytext); }
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 943 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_PRAGMACONTENTS; TRY_SVAL_TOKEN(EQNAME_SVAL, put_qname(yytext, yyleng, true, true), yytext); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 944 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN INITIAL; TRY_SVAL_TOKEN(QNAME_SVAL_AND_END_PRAGMA,  put_qname(yytext, yyleng-2), yytext); }
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 945 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN INITIAL; TRY_SVAL_TOKEN(EQNAME_SVAL_AND_END_PRAGMA, put_qname(yytext, yyleng-2), yytext); }
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 946 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ /* continue lexing */ }
	YY_BREAK
/*______________________________________________________________________
   |
   | PRAGMACONTENTS State
   |
   | This state recognizes characters in pragma content and transitions
   | out of this state when a '#)' pattern is recognized.
   |______________________________________________________________________*/
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 957 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN INITIAL; TRY_SVAL_TOKEN(PRAGMA_LITERAL_AND_END_PRAGMA, put(yytext, yyleng-2), yytext); }
	YY_BREAK
/*______________________________________________________________________
   |
   | START_TAG State
   |
   | This state allows attributes in the native XML syntax, and marks the
   | beginning of an element construction. Element constructors also push
   | the current state, popping it at the conclusion of an end tag. In
   | the START_TAG state, the string ">" is recognized as a token which
   | is associated with the transition to the original state.
   |______________________________________________________________________*/
case 303:
YY_RULE_SETUP
#line 971 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_ELEMENT_CONTENT; return token::TAG_END; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 972 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_QUOTE_ATTRIBUTE_CONTENT; return token::QUOTE; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 973 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_APOS_ATTRIBUTE_CONTENT; return token::APOS; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 974 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::EQUALS; }
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 975 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::BLANK; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 976 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); return token::EMPTY_TAG_END; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 977 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN (QNAME_SVAL, put_qname(yytext, yyleng), yytext); }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 978 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->unrecognizedCharErr(yytext, *yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case YY_STATE_EOF(MODE_START_TAG):
#line 979 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->unterminatedElementConstructor(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
/*______________________________________________________________________
   |
   | ELEMENT_CONTENT State
   |
   | This state allows XML-like content, without these characters being
   | misinterpreted as expressions. The character "{" marks a transition
   | to the INITIAL state, i.e. the start of an embedded expression, and
   | the "}" character pops back to the ELEMENT_CONTENT state. To allow
   | curly braces to be used as character content, a double left or right
   | curly brace is interpreted as a single curly brace character. The
   | string "</" is interpreted as the beginning of an end tag, which is
   | associated with a transition to the END_TAG state.
   |______________________________________________________________________*/
case 311:
YY_RULE_SETUP
#line 996 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_END_TAG; return token::START_TAG_END; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 997 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACE; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 998 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_XML_COMMENT); return token::XML_COMMENT_BEGIN; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 999 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_PROCESSING_INSTRUCTION); return token::PI_BEGIN; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1000 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_CDATA_SECTION); return token::CDATA_BEGIN; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 1001 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_START_TAG); return token::LT_OR_START_TAG; }
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 1002 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(ELEMENT_CONTENT, put(yytext, yyleng, 1), yytext); }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 1003 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(ELEMENT_CONTENT, put_entityref(yytext, yyleng), yytext); }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1004 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_CHARREF_LITERAL(CHAR_REF_LITERAL, put_charref, yytext, yyleng); }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 1005 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOUBLE_LBRACE; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 1006 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOUBLE_RBRACE; }
	YY_BREAK
case YY_STATE_EOF(MODE_ELEMENT_CONTENT):
#line 1007 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->noClosingTagForElementConstructor(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
/*______________________________________________________________________
   |
   | END_TAG State
   |
   | When the end tag is terminated, the state is popped to the state
   | that was pushed at the start of the corresponding start tag.
   |______________________________________________________________________*/
case 322:
YY_RULE_SETUP
#line 1018 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); return token::TAG_END; }
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 1019 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN (QNAME_SVAL, put_qname(yytext, yyleng, false, true), yytext); }
	YY_BREAK
case YY_STATE_EOF(MODE_END_TAG):
#line 1020 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->noClosingTagForElementConstructor(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
/*______________________________________________________________________
   |
   | XML_COMMENT State
   | The "<--" token marks the beginning of an XML Comment, and the "-->"
   | token marks the end. This allows no special interpretation of other
   | characters in this state.
   |______________________________________________________________________*/
case 324:
YY_RULE_SETUP
#line 1031 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); return token::XML_COMMENT_END; }
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 1032 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN (XML_COMMENT_LITERAL, put(yytext, yyleng, 1), yytext); }
	YY_BREAK
/*______________________________________________________________________
   |
   | EXPR_COMMENT State
   |
   | The "(:" token marks the beginning of an expression Comment, and
   | the ":)" token marks the end. This allows no special interpretation
   | of other characters in this state.
   |______________________________________________________________________*/
case 326:
YY_RULE_SETUP
#line 1044 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 1045 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(MODE_EXPR_COMMENT); }
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 1046 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ /* do nothing */ }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 1047 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ /* do nothing */ }
	YY_BREAK
case YY_STATE_EOF(MODE_EXPR_COMMENT):
#line 1048 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->unterminatedCommentErr(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
/*______________________________________________________________________
   |
   | EXPR_DOC_COMMENT State
   |
   | The "(:~" token marks the beginning of a doc Comment, and
   | the ":)" token marks the end. This allows no special interpretation
   | of other characters in this state.
   |______________________________________________________________________*/
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 1060 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ getDriver()->theDocComment << yytext; }
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 1061 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ getDriver()->theDocComment << yytext; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 1062 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); }
	YY_BREAK
case YY_STATE_EOF(MODE_EXPR_DOC_COMMENT):
#line 1063 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ yylval->err = getDriver()->unterminatedCommentErr(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
/*______________________________________________________________________
   |
   | PROCESSING_INSTRUCTION State
   |
   | In this state, only patterns that are legal in a processing
   | instruction name are recognized.
   |______________________________________________________________________*/
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 1074 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_PROCESSING_INSTRUCTION_CONTENT; /* continue lexing */ }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 1075 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); return token::PI_END; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 1076 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
/* PITarget */    { TRY_SVAL_TOKEN (NCNAME_SVAL, put(yytext, yyleng), yytext); }
	YY_BREAK
/*______________________________________________________________________
   |
   | PROCESSING_INSTRUCTION_CONTENT State
   |
   | In this state, only characters are that are legal in processing
   | instruction content are recognized.
   |______________________________________________________________________*/
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 1087 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
  POP_STATE();
  TRY_SVAL_TOKEN (CHAR_LITERAL_AND_PI_END, put(yytext, yyleng-2), yytext);
}
	YY_BREAK
/*______________________________________________________________________
   |
   | CDATA_SECTION State
   |
   | In this state, only lexemes that are legal in a CDATA section are
   | recognized.
   |______________________________________________________________________*/
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 1101 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ POP_STATE(); TRY_SVAL_TOKEN (CHAR_LITERAL_AND_CDATA_END, put(yytext, yyleng-3, 1), yytext); }
	YY_BREAK
/*______________________________________________________________________
   |
   | QUOTE_ATTRIBUTE_CONTENT State
   |
   | This state allows content legal for attributes. The character "{"
   | marks a transition to the INITIAL state, i.e. the start of an
   | embedded expression, and the "}" character pops back to the original
   | state.  To allow curly braces to be used as character content, a
   | double left or right curly brace is interpreted as a single curly
   | brace character. This state is the same as APOS_ATTRIBUTE_CONTENT,
   | except that apostrophes are allowed without escaping, and an
   | unescaped quote marks the end of the state.
   |______________________________________________________________________*/
case 338:
YY_RULE_SETUP
#line 1118 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_START_TAG; return token::QUOTE; }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 1119 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACE; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 1120 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ESCAPE_QUOTE; }
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 1121 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(QUOTE_ATTR_CONTENT, put(yytext, yyleng, 2), yytext); }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 1122 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(QUOTE_ATTR_CONTENT, put_entityref(yytext, yyleng), yytext); }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 1123 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_CHARREF_LITERAL(CHAR_REF_LITERAL, put_charref, yytext, yyleng); }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 1124 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOUBLE_LBRACE; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 1125 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOUBLE_RBRACE; }
	YY_BREAK
/*______________________________________________________________________
   |
   | APOS_ATTRIBUTE_CONTENT State
   |
   | This state is the same as QUOT_ATTRIBUTE_CONTENT, except that
   | quotes are allowed, and an unescaped apostrophe marks the end of
   | the state.
   |______________________________________________________________________*/
case 346:
YY_RULE_SETUP
#line 1137 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ BEGIN MODE_START_TAG; return token::APOS; }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 1138 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ PUSH_AND_BEGIN (INITIAL, MODE_APOS_ATTRIBUTE_CONTENT); return token::LBRACE; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 1139 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::ESCAPE_APOS; }
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 1140 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(APOS_ATTR_CONTENT, put(yytext, yyleng, 2), yytext); }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1141 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_SVAL_TOKEN(APOS_ATTR_CONTENT, put_entityref(yytext, yyleng), yytext); }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1142 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ TRY_CHARREF_LITERAL(CHAR_REF_LITERAL, put_charref, yytext, yyleng); }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 1143 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOUBLE_LBRACE; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 1144 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{ return token::DOUBLE_RBRACE; }
	YY_BREAK
/*______________________________________________________________________
   |
   | Catch-all rule
   |______________________________________________________________________*/
case 354:
YY_RULE_SETUP
#line 1153 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
{
    yylval->err = getDriver()->unrecognizedCharErr(yytext, *yylloc);
    return token::UNRECOGNIZED;
}
	YY_BREAK
/* END OF FLEX RULES */
case 355:
YY_RULE_SETUP
#line 1162 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"
ECHO;
	YY_BREAK
#line 5985 "jsoniq_scanner.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MODE_SHEBANG):
case YY_STATE_EOF(INITIAL_ACCUMULATOR):
case YY_STATE_EOF(MODE_APOS_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_QUOTE_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_CDATA_SECTION):
case YY_STATE_EOF(MODE_OCCURRENCE_INDICATOR):
case YY_STATE_EOF(MODE_PRAGMA):
case YY_STATE_EOF(MODE_PRAGMACONTENTS):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION_CONTENT):
case YY_STATE_EOF(MODE_XML_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	ZorbaJSONiqfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ZorbaJSONiqrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1846 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1846 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1845);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ZorbaJSONiqalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ZorbaJSONiqalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ZorbaJSONiqfree((void *) b->yy_ch_buf  );

	ZorbaJSONiqfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)ZorbaJSONiqalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)ZorbaJSONiqrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) ZorbaJSONiqalloc(new_size  );

		else
			(yy_start_stack) = (int *) ZorbaJSONiqrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ZorbaJSONiqalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *ZorbaJSONiqrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ZorbaJSONiqfree (void * ptr )
{
	free( (char *) ptr );	/* see ZorbaJSONiqrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 1162 "/home/mbrantner/zorba/sandbox/src/compiler/parser/jsoniq_scanner.l"



std::string start_jsoniq_state(int state)
{
  switch (state)
  {
    case INITIAL: return "INITIAL";
    case MODE_SHEBANG: return "MODE_SHEBANG";
    case INITIAL_ACCUMULATOR: return "INITIAL_ACCUMULATOR";
    case MODE_APOS_ATTRIBUTE_CONTENT: return "MODE_APOS_ATTRIBUTE_CONTENT";
    case MODE_ELEM_COMP_CONSTR: return "MODE_ELEM_COMP_CONSTR";
    case MODE_ATTR_COMP_CONSTR: return "MODE_ATTR_COMP_CONSTR";
    case MODE_PI_COMP_CONSTR: return "MODE_PI_COMP_CONSTR";
    case MODE_NS_COMP_CONSTR: return "MODE_NS_COMP_CONSTR";
    case MODE_CDATA_SECTION: return "MODE_CDATA_SECTION";
    case MODE_ELEMENT_CONTENT: return "MODE_ELEMENT_CONTENT";
    case MODE_END_TAG: return "MODE_END_TAG";
    case MODE_EXPR_DOC_COMMENT: return "MODE_EXPR_DOC_COMMENT";
    case MODE_EXPR_COMMENT: return "MODE_EXPR_COMMENT";
    case MODE_OCCURRENCE_INDICATOR: return "MODE_OCCURRENCE_INDICATOR";
    case MODE_PRAGMA: return "MODE_PRAGMA";
    case MODE_PRAGMACONTENTS: return "MODE_PRAGMACONTENTS";
    case MODE_PROCESSING_INSTRUCTION: return "MODE_PROCESSING_INSTRUCTION";
    case MODE_PROCESSING_INSTRUCTION_CONTENT: return "MODE_PROCESSING_INSTRUCTION_CONTENT";
    case MODE_QUOTE_ATTRIBUTE_CONTENT: return "MODE_QUOTE_ATTRIBUTE_CONTENT";
    case MODE_START_TAG: return "MODE_START_TAG";
    case MODE_XML_COMMENT: return "MODE_XML_COMMENT";
    default: return "[zorba] Unrecognized start state. If a new state has been created, translation should be added to start_jsoniq_state() in jsoniq_scanner.l \n";
  }
}


namespace zorba {

jsoniq_scanner::jsoniq_scanner(
  jsoniq_driver* aDriver,
  std::istream* i,
  std::ostream* o)
  :
  ZorbaJSONiqFlexLexer(i, o), theDriver(aDriver), cond_stk_depth(0), yy_comp_constr_qname("")
{
}

jsoniq_scanner::~jsoniq_scanner()
{
}

void jsoniq_scanner::set_yy_flex_debug(bool aBool)
{
  yy_flex_debug = aBool;
}

int jsoniq_scanner::interpretAsLessThan()
{
  BEGIN INITIAL;
  POP_STATE();
  return 0;
}

int jsoniq_scanner::yy_get_start_stack_ptr() const
{
  return yy_start_stack_ptr;
}

} /* namespace zorba */

#ifdef yylex
#undef yylex
#endif

int ZorbaJSONiqFlexLexer::yylex()
{
  return 0;
}

