#line 2 "xquery_scanner.yy.cpp"

#line 4 "xquery_scanner.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ZorbaFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Zorbaalloc (yy_size_t  );
void *Zorbarealloc (void *,yy_size_t  );
void Zorbafree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "compiler/parser/FlexLexer.h"

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 499
#define YY_END_OF_BUFFER 500
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3630] =
    {   0,
      169,  169,    0,    0,    0,    0,  427,  427,    0,    0,
        0,    0,    0,    0,    0,    0,  405,  405,  414,  414,
      420,  420,  318,  318,  330,  330,  433,  433,  305,  305,
      436,  436,  439,  439,    0,    0,  173,  173,    0,    0,
        0,    0,    0,    0,  339,  339,  452,  452,    0,    0,
      446,  446,  335,  335,  471,  471,    0,    0,    0,    0,
        0,    0,  500,  170,    1,    2,  169,  169,  120,  170,
       75,  170,  170,   21,   58,   60,   33,   20,   32,   65,
       34,   51,   19,   86,   49,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   16,  170,   94,  498,  493,
      493,  498,  490,  491,  498,  481,  481,  481,  426,  427,
      427,  426,  426,  421,  422,  425,  423,  499,  498,  498,
      466,  461,  461,  461,  466,  460,  456,  466,  469,  467,
      468,  475,  475,  475,  404,  405,  405,  404,  404,  340,
      380,  404,  362,  384,  404,  354,  383,  364,  374,  403,
      379,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  394,  413,  414,
      414,  413,  413,  410,  407,  408,  408,  408,  406,  419,
      420,  420,  419,  419,  419,  419,  415,  417,  317,  318,

      318,  317,  317,  317,  317,  313,  311,  315,  316,  316,
      329,  330,  330,  329,  329,  329,  329,  328,  329,  329,
      329,  329,  432,  433,  433,  432,  432,  429,  430,  428,
      304,  305,  305,  304,  254,  304,  236,  304,  304,  180,
      243,  212,  217,  189,  210,  220,  304,  181,  209,  191,
      201,  244,  206,  250,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  179,  225,  242,  435,  436,  436,  435,  434,
      440,  439,  439,  439,  440,  442,  498,  499,  442,  442,
      441,  173,  173,  172,  171,  476,  476,  498,  478,  498,

      498,  499,  498,  485,  485,  482,  498,  483,  498,  338,
      339,  339,  338,  338,  336,  454,  452,  452,  452,  448,
      449,  454,  450,  447,  453,  498,  499,  498,  498,  445,
      446,  446,  445,  445,  443,  334,  335,  335,  334,  334,
      334,  334,  472,  471,  471,  471,  472,  309,  309,  498,
      498,  498,  306,  498,  498,  498,  114,  116,  115,    1,
      169,    2,    0,   61,    0,  119,    0,    0,   61,   91,
       88,    0,    0,    0,   64,   53,   35,   36,   53,   51,
       50,   50,   85,    0,    0,   83,   57,    0,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  121,  493,    0,    0,
        0,    0,    0,    0,  492,  496,  497,    0,  427,  424,
        0,    0,  461,    0,    0,    0,    0,    0,    0,    0,
      455,  458,  464,  465,  468,  468,    0,  474,  473,  405,
      386,  353,  342,    0,    0,  361,  382,  381,  372,  373,
      403,    0,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  414,  409,  408,    0,
      408,  408,  420,    0,  418,    0,    0,    0,  418,  416,
      417,  318,    0,  312,    0,    0,    0,  312,  310,  316,
      316,  330,    0,  320,    0,    0,    0,  320,  324,    0,
        0,    0,    0,    0,  433,  431,  305,  213,    0,  251,
        0,  253,    0,    0,  251,  303,  240,    0,    0,  221,
      222,  188,  208,  207,  199,  200,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  255,  436,  434,
        0,  439,  437,    0,    0,    0,    0,    0,  441,    0,
      441,  173,  172,  476,    0,    0,  478,  477,    0,    0,
      479,  485,  484,    0,    0,    0,    0,    0,    0,  488,
      489,  339,  337,  336,    0,  452,  451,  453,    0,    0,
        0,    0,    0,  319,    0,    0,    0,  319,  446,  444,
      443,    0,  335,  333,    0,    0,  471,    0,  471,    0,
      309,    0,    0,  307,    0,    0,    0,  307,    0,    0,

        0,    0,    0,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   59,
       52,   52,   53,    0,   55,    0,    0,    0,   56,   57,
       57,   57,   57,   57,  111,   57,  111,    0,    0,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
        0,   22,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

        0,    0,    0,    0,    0,    0,    0,  480,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  468,
        0,  403,  403,  401,  401,  401,  360,  360,  360,  360,
      360,  403,  403,  403,  403,  403,  403,  403,  403,  366,
      366,  366,  403,  403,  367,  367,  367,  368,  368,  368,
      403,  377,  377,  377,  403,  403,  378,  378,  378,  403,
      369,  369,  369,  370,  370,  370,  403,  371,  371,  371,
      403,  389,  389,  389,  403,  403,  403,  403,  403,  403,
      403,  403,  392,  392,  392,  403,  403,  403,  408,  408,
      408,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  314,  314,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  234,    0,  186,  186,  186,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  193,    0,    0,    0,    0,    0,    0,    0,
      194,  195,    0,  204,    0,    0,  205,    0,    0,  196,
        0,    0,    0,  197,    0,  198,    0,    0,  216,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  223,    0,    0,    0,    0,
        0,    0,    0,    0,  434,  438,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  336,  453,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  443,    0,    0,  471,  470,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  118,  117,  115,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   81,   59,   54,   82,    0,    0,    0,   57,   57,

      123,  123,  123,   57,  123,   57,  125,  125,  125,   57,
      125,    0,    0,    0,    0,    0,    0,    0,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,    0,    0,   57,
        0,   57,   57,   57,   57,   57,    0,    0,   57,   57,
       57,   57,   57,    0,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  112,   57,  112,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  495,    0,    0,  494,    0,    0,
        0,    0,  463,    0,    0,  462,    0,    0,  457,    0,

      468,  402,  403,  359,  359,  359,    0,    0,    0,    0,
        0,  403,  403,  403,  403,  363,  363,  363,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  385,  385,
      385,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  408,  408,  408,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  235,    0,
        0,  264,  264,  264,  185,  266,  266,  266,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  190,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  211,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      434,    0,    0,  487,    0,    0,  486,    0,    0,  336,

      453,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  443,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  177,    0,    0,  118,  115,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
        0,    0,    0,    0,   57,    0,    0,    0,    0,    0,
       93,    0,    0,    0,   93,    0,    0,    0,    0,    0,
        0,   57,   57,    0,    0,   57,   57,    0,    0,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   76,    0,  140,   57,  140,    0,    0,   57,

       57,  104,   57,  104,   57,    0,    0,   77,    0,   57,
       57,   57,   57,    0,   29,    0,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  148,   57,  148,   57,
       57,    0,   57,    0,    0,    0,   28,   11,   57,   57,
       57,   57,   57,   57,   57,  109,  109,  109,   57,  109,
       57,   57,   57,    0,    0,    0,    0,    0,    0,  357,
        0,    0,    0,  357,    0,    0,  403,  400,  400,  400,
        0,    0,  403,  403,  403,  403,  356,  356,  356,  403,
      403,  403,  375,  375,  375,  403,  403,    0,    0,    0,
      349,  403,  403,  403,  403,  403,  403,    0,  348,  355,

      355,  355,  403,  403,  403,  408,  408,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  233,  233,  233,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  183,    0,
        0,    0,    0,    0,    0,  237,    0,  261,    0,  202,
        0,    0,    0,    0,  238,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      283,    0,    0,    0,    0,    0,  182,    0,    0,    0,
        0,    0,    0,    0,  109,  109,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  178,    0,
        0,  107,   57,  107,    0,    0,    0,   57,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   57,   57,
        0,    0,    0,    0,   57,  103,    0,   57,   57,   57,
       57,   57,   57,   57,   57,   57,    0,    0,   57,    0,

        0,   57,    0,    0,    0,   57,   57,   57,    0,    0,
        0,    0,   57,   57,   57,   57,    0,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  149,   57,
      149,   48,   57,   78,    0,  152,   57,  152,   57,   57,
       57,   57,   57,   57,    0,    0,    0,    0,    0,    0,
        0,   57,  168,   57,  168,   57,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  403,    0,    0,  403,  403,  403,  403,  403,
      403,  403,  403,  403,    0,    0,  352,    0,    0,  403,
      403,  403,  403,  403,    0,    0,  393,  393,  393,  395,

      395,  395,  408,  408,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  113,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  187,    0,    0,  228,  287,    0,
        0,  224,    0,    0,  226,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  302,    0,  332,    0,    0,    0,

        0,    0,   57,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
        0,    0,    0,   57,  108,   57,  108,    0,    0,    0,
        0,   40,   57,    0,    0,   57,    0,    0,   57,   57,
       57,   57,   57,   57,    0,    0,   79,    0,   57,    0,
        0,   57,    0,    0,    0,    0,    0,   57,    0,    0,
        0,    0,  142,   57,  142,   57,  110,   57,  110,    0,
        0,    0,  144,   57,  144,   57,   57,    0,  146,   57,
      146,   57,   57,   57,    0,    0,   57,   57,   57,    0,
        0,   57,   57,   57,   57,  154,   57,  154,  155,   57,

      155,    0,    0,    0,    0,    0,    0,    0,   57,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  403,    0,
        0,    0,  403,  403,  403,  403,  403,  365,  365,  365,
      403,  403,  403,    0,    0,    0,  403,  390,  390,  390,
      403,  403,    0,    0,    0,    0,  408,  408,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      268,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  192,    0,    0,    0,    0,

        0,    0,    0,    0,  278,    0,    0,  262,    0,    0,
        0,  281,    0,    0,    0,  218,    0,    0,    0,    0,
        0,    0,    0,  289,  263,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  176,    0,    0,   57,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
        0,   57,    0,    0,    0,    0,   27,   13,    0,    0,
        0,    0,    0,   57,   57,   57,   57,   57,    0,   23,
        6,    0,    0,    0,    0,  139,   57,  139,    0,    0,
        0,   57,    0,    0,    0,    0,    0,   57,    0,    0,
       57,    0,    0,    0,    0,   17,   57,   45,   57,   57,

       57,    0,    0,    0,    0,   57,   57,   57,    0,   57,
       57,   57,   57,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  174,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  403,  397,    0,  403,    0,
      347,  403,    0,  343,  403,  403,  403,  403,    0,    0,
        0,    0,    0,  403,  403,  403,  403,    0,    0,    0,
        0,    0,    0,  411,  408,    0,    0,  322,    0,    0,
        0,    0,    0,    0,    0,    0,  258,    0,    0,    0,
        0,  230,    0,    0,    0,    0,    0,  249,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  260,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   84,    0,   57,    0,  126,  128,  130,   57,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,   57,   57,  137,   57,
      137,    0,   57,   10,    0,    0,    0,    0,    0,    0,
        0,    0,   57,    0,    0,    0,    0,    0,    0,    0,
      141,   57,  141,    0,   57,    0,    0,    0,    0,   57,
       57,   57,   57,    0,    0,    0,    0,    0,    0,   57,

       57,  150,   57,  150,   57,   57,   57,   57,    0,    0,
        3,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  459,  403,    0,
        0,  403,  403,  358,  358,  358,    0,    0,  403,    0,
      387,    0,  403,  403,  403,  403,    0,    0,    0,  399,
        0,  408,    0,    0,    0,    0,    0,  326,    0,  267,
        0,  257,  269,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  259,    0,    0,    0,    0,    0,    0,
      184,    0,    0,    0,    0,  277,    0,    0,    0,  214,
        0,    0,  227,    0,    0,  285,    0,    0,    0,    0,

      232,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  331,  308,  124,   57,   38,
        0,   24,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,    0,    0,   57,  136,   57,  136,   57,
        0,    0,    0,    9,    0,    0,    0,    0,    0,   57,
        0,    0,    0,    0,    0,    0,  106,  143,   57,  143,
        0,    0,  122,  145,   57,  145,   57,    0,   57,   57,
        0,    0,    0,    0,    0,    0,   57,   57,  151,   57,
      151,   57,    0,   18,  153,   57,  153,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  175,    0,  344,    0,
        0,  403,  403,    0,    0,  376,  376,  376,  403,  391,
      391,  391,  403,  403,    0,    0,  408,    0,    0,    0,
      321,    0,    0,  265,  247,    0,    0,    0,    0,  241,
        0,    0,    0,    0,    0,  275,    0,    0,    0,    0,
        0,    0,    0,  203,    0,    0,  279,  256,  280,    0,
      219,  286,    0,    0,  288,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
        0,    0,   39,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       57,    0,    0,    0,    0,    0,   57,    0,    0,    0,
        0,  105,   57,   44,    0,    0,    0,    0,   57,   47,
       57,   57,    0,    0,    0,    0,   57,   57,    0,    5,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  403,  403,    0,    0,    0,  403,  403,
      403,    0,  408,    0,    0,  323,    0,    0,    0,    0,
        0,    0,    0,    0,  248,    0,    0,    0,    0,    0,
      252,    0,    0,    0,  239,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,    0,    0,    0,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,    0,   57,   42,    0,    0,
        0,    0,    0,   57,    0,    0,    0,   57,    0,    0,
       96,    0,    0,   57,   57,   57,  102,    0,    0,   57,
       57,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  396,    0,  403,  403,  398,    0,  403,  403,  403,
        0,  408,    0,  327,    0,    0,  229,    0,    0,    0,

        0,    0,    0,  246,    0,  231,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   99,   57,    0,    0,    0,    0,
        0,   57,    0,   57,    0,    0,   97,    0,   57,   57,
      147,   57,  147,  100,    0,   57,   57,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  403,  403,  403,  403,  403,    0,
        0,  408,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  282,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   57,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
        0,    0,    0,    0,   30,    0,   57,   73,   72,    0,
       57,   57,    0,    0,   57,   57,    0,    0,    0,    0,
      164,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  350,  403,  403,  403,  403,    0,    0,
      408,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  298,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   57,    0,  132,    0,
        0,    0,    0,    0,    0,    0,    0,   92,    0,    0,
        0,    0,    0,   57,    0,    0,  138,   57,    0,   57,
       57,    0,    0,   57,    0,   25,    0,    0,    0,    0,
        0,  166,  167,    0,    0,    0,    0,    0,    0,    0,
        0,   90,    0,    0,  403,  403,    0,  345,    0,    0,
        0,    0,  412,    0,    0,  271,    0,    0,    0,  245,
      276,    0,    0,    0,    0,    0,    0,    0,    0,  300,
      301,    0,    0,    0,    0,    0,    0,    0,    0,   57,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   57,    0,    0,   57,    0,
       57,   57,    0,    0,    0,   57,    0,    0,  163,  165,
      156,    0,    0,    0,    0,    0,    0,    0,    0,  341,
      403,  403,  388,    0,  325,    0,    0,    0,    0,  215,
        0,    0,    0,  297,  299,  290,    0,    0,    0,    0,
        0,    0,    0,  131,   69,    0,    0,    0,    0,    0,
        0,    0,    0,  133,   14,    0,    0,    0,    0,   89,
        0,    0,    0,    0,    0,    0,   57,    0,    0,   57,
       68,   57,   57,    0,    0,    0,    0,   26,    0,    0,
      158,    0,    0,    0,    0,  403,    0,  346,  270,  272,

        0,    0,    0,    0,  292,    0,    0,    0,   37,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   67,
        0,    0,    0,    0,    0,    0,   80,    0,   57,    0,
        0,    0,    0,   57,    0,    0,    0,    0,    0,    0,
      160,  161,    0,    0,  403,    0,    0,    0,    0,    0,
        0,  294,  295,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   43,   46,   57,    0,    0,
        0,    0,    0,  157,  159,    0,  403,    0,    0,    0,
        0,  291,  293,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   41,  135,
        0,   57,    0,    0,    0,    0,    0,  403,    0,    0,
        0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
        0,    0,   95,    0,    0,    0,   57,    0,    0,    0,
      403,    0,  274,    0,    0,    0,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,   12,  101,    0,  403,
        0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  134,    0,   31,    0,    0,  351,
      273,    0,    0,    0,   74,    0,    0,   70,    0,    0,
        0,    0,    0,    0,  162,  296,    0,    0,    0,    0,

        0,   71,    0,    0,    0,    0,    0,    0,   66,    0,
        0,    0,    0,   15,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   31,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   36,
       35,   35,   37,   38,   35,   35,   35,   35,   35,   35,
       39,   40,   41,   40,   42,   40,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   35,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   35,   67,   68,   69,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   70,   70
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    2,    2,    3,    2,    2,    4,    5,    6,    4,
        4,    7,    8,    9,   10,   11,    4,    4,   12,   13,
        4,   14,   15,   16,    7,    4,    4,    4,    4,   17,
       17,   17,   17,   17,   18,   18,   18,   18,   19,   19,
       19,   18,   17,   17,   20,   21,   17,   17,   18,   18,
       22,   18,   18,   18,   18,   23,   18,   18,   18,   24,
       25,   18,   26,   18,   18,   18,   27,   19,   28,   29
    } ;

static yyconst flex_int16_t yy_base[4219] =
    {   0,
        0,    0,   70,   74,   87,   93,   98,  103,   73,   76,
      170,  240,  310,    0,  119,  122,  380,    0,  450,    0,
      520,    0,  590,    0,  659,  715,  150,  182,  772,    0,
      842,    0,  912,    0,  188,  203,  982,    0, 1052, 1081,
      210,  219,  223,  667, 1110,    0, 1180,    0,  251,  264,
     1250,    0,  681,  694, 1320, 1326, 1338, 1351,  108,  176,
     1398,    0,12644,22942,  144,  279,  292,  297,22942,   72,
    22942,12631,   80,  101, 1331,12619,22942,22942,22942,  138,
      109,  229,22942,  741,22942,12617,  704,  104,  178,  655,
     1315,  653,  708, 1326,   58,  146,  680,  699,  136, 1446,

     1325,  251,  157, 1447,   62,22942,12571,22942,22942,    0,
        0, 1462,12616,12559,12556,22942,22942,12577,22942, 1470,
     1475, 1480,12594,22942,22942,22942,22942,22942,12557,12559,
    22942,    0,    0,    0, 1478,  673,12546,12543,22942,22942,
     1520,22942,12587,12594,22942, 1504, 1535, 1542,12580,22942,
      207, 1547,22942,22942,12578,22942,  207,22942,  234,12566,
    22942, 1474,  248,  684, 1505, 1469, 1519, 1531,  194,  668,
      667,  709,  239, 1532, 1538,  658,  255,22942,22942, 1596,
     1601, 1606,12565,22942,22942,12564,   66,  643,22942,22942,
     1611, 1616, 1621,  169,  275,12563,22942,    0,22942, 1626,

     1631, 1636,  207, 1348,12562,22942,22942,22942,    0,12523,
    22942, 1641, 1646, 1651,  267, 1354,12560,22942,12534,12525,
      626,12518,22942, 1656, 1661, 1666,12552,22942,22942,22942,
    22942, 1671, 1676, 1681,12534,  681,22942,12547, 1374,  744,
     1686,22942,22942,22942,22942, 1371,12532,22942, 1363,22942,
     1367,22942,22942,22942, 1645,12510, 1307, 1332, 1518, 1530,
     1334, 1444, 1652,12500, 1510, 1455, 1651,12508, 1664, 1664,
     1505, 1671,22942,12486,22942,22942, 1728, 1733, 1738,12529,
    22942, 1743, 1748, 1753, 1758,22942, 1486, 1503, 1504, 1687,
     1688, 1766, 1771,    0,22942, 1780, 1785,12528,    0,12521,

    12518,12503, 1540,    0,    0,12522, 1757,12462,12459,22942,
     1799, 1814, 1819,12504,12503,22942, 1824, 1829, 1834,22942,
    22942,12498,22942,22942,12500, 1839, 1851, 1704, 1583,22942,
     1863, 1868, 1873,12499,12496,22942, 1878, 1883, 1888,12494,
    12443,12440,22942,12481,12480,12479,12478, 1893, 1898, 1716,
     1766,12473,22942,12439,12450, 1665,22942,12467,12465, 1911,
     1916, 1921, 1784,12465, 1896,22942, 1785, 1897,12459,22942,
    22942, 1926,12411,    0,22942, 1913,22942,22942, 1914, 1936,
    22942, 1565, 1960,  711,12447,22942,12446,12452, 1785, 1742,
     1914, 1983, 2011,   75, 1509, 1887, 1757, 1982, 1995, 1888,

     1324, 1790, 1920, 1930, 1885, 1918, 1886, 2026, 1911, 1959,
     2003, 1998, 1784, 1956, 2010, 2021, 2014, 2016, 2018, 2022,
     2031, 2013, 2023, 2034, 2039, 2025, 2041, 2042, 2024, 2045,
     2047, 2053, 2051, 2057, 2060, 1335,22942,    0, 2060, 1804,
    12406,12404,12420,12399,22942,22942,22942,12432, 2094,22942,
    12398,12387,    0, 2063, 1806,12381,12380,12396,12377, 2072,
    22942,22942,22942,22942, 2111, 2118,    0,22942,22942, 2127,
    22942,22942,22942, 2132,12378,22942,22942,22942,22942,22942,
    12413,    0, 2080, 2175, 2245, 2082, 2086, 1786, 2104, 2147,
     2087, 2315, 2174, 2385, 2455, 2116, 2525, 2595, 1934, 2665,

     2735, 2120, 2805, 2122, 2875, 2149, 2148, 2150, 2124, 2183,
     2199, 2185, 2945, 2187, 2189, 2190, 2148,22942,12412,    0,
     2194, 2244, 2153, 1964,12424, 2967, 2148, 2968,12417,22942,
        0, 2225, 2157,12407, 2981, 2150, 2988,12401,22942,    0,
     3046, 2273, 2212,12405, 3035, 2226, 3068,12399,22942,12363,
    12360,12355,12388,12359, 2285,22942, 2293,22942, 2213,12395,
     3082,22942, 2268, 3089,12388,22942,22942, 2305,12293,22942,
    22942,22942,22942,22942,22942,22942,12289,12285, 2236,12290,
     2347,12286, 2232, 2247, 2312, 2315,12176,12169,12162,    0,
     2103,12152,12149,12151,12151,    0,    0,12142, 2285,    0,

     2163, 2031,12128,    0,12142,    0,12126,12141,12139,12125,
    12124,12135, 2309, 2313,12125,12121, 2361,12128,12118,    0,
    12121,12116,12107,11988,11989, 2316,11976,22942, 2413,12011,
        0, 2425, 2430,12018, 2483,    0, 2364, 2428, 2429, 2430,
    22942, 2444,    0, 2495,12009,12000,    0,22942,11992, 2341,
    22942,    0,22942, 2315, 1921,11947,11944,11960,11902,22942,
    22942, 2508,22942,11938,    0, 2513,22942,11937,    0, 2624,
     2293, 2409, 2495,11941, 3090, 2428, 3103,11933, 2636,22942,
    11922,    0, 2641,22942,11887,11872,11911,    0,11904,11895,
     2646,11898, 2496,11912, 3110, 2478, 3111,11906,11895,11872,

    11850,11863,11852,    0,11886,11827, 2455, 2179,11773,11770,
    11786,11757, 2592, 2448,11755,11754,11760,11739,    0,    0,
    22942, 2636, 2662,11778,11720,11714,11698,11706,22942,    0,
     2664, 3169, 2672, 3239,22942,11702,11708, 3308,11700, 2602,
     2674, 2675, 2676, 2280, 2636, 2678, 2677, 2336, 2680, 2608,
     2693, 2695, 2353, 2400, 2742, 2743, 2594, 2744, 2766, 2770,
     2780,11699, 2804, 2812, 2813, 2750, 2777, 2847, 2816, 2817,
     2843, 2818, 2685, 2775, 2820, 2883, 2684, 2874, 2884, 2819,
     2825, 2885, 2824, 2886, 2905, 2887, 2914, 2889, 2917, 2894,
     3368, 2944, 2959, 2956, 2470, 2890, 2888, 2957, 2958, 2972,

     2690,    0,11664,11663,11694,11648,11649,22942,11657,11638,
     2691,    0,11639,11639,11670,11632,11635,11670,11656, 2852,
        0,    0, 3438,22942,11662,    0,22942, 3198,11660,11645,
        0, 2969, 3042, 2973, 3508, 2970, 2975, 2986, 2977,22942,
    11644,    0, 3045, 3053,22942,11643,    0,22942,11642,    0,
     2979,22942,11641,    0, 3022, 3057,22942,11640,    0, 3056,
    22942,11639,    0,22942,11637,    0, 3578,22942,11636,    0,
     3058,22942,11633,    0, 3059, 2960, 2978, 3071, 3104, 2964,
     3073, 2419,22942,11631,    0, 3085, 3074, 2976,    0, 3095,
     3144, 3085, 2663,11578,11577,11593,11574, 3140, 2669,11574,

    11573,11589,11569, 3166, 2724,11569,11566,11581,11548, 3193,
     2733,11548,11547,11563,11544,22942,    0, 3196, 2738,11541,
    11535,11537,11518, 3204, 2866,11518,11517,11533,11511,11524,
    11501,11498, 2867,11484, 3205, 2868,11472,11469,11474,11453,
     3206, 3159,11453,11442,11449,11428, 3218,11431, 3270,    0,
     3283,22942,11428,22942, 3288,11451,11411, 2730,11421,11412,
    11398,11410,11416,11406,11389,11386,11382,11363,    0,11376,
    11360,11369,22942,11364,11359,11358,11344, 3322,11349,11346,
    22942,22942,11330,22942, 3048, 3178,22942,11341,11317,22942,
     3396,11328,11327,22942,11283,22942,11306,11268,22942,11274,

    11275,11274,11248,11262,11261,11244,11234,11248,11243,11234,
    11228,11239,11213,11206,11213,22942,11216,11202,11210,11199,
    11186,11187,11068,11054,    0,22942, 3328, 2979,11068, 1473,
     3133,    0,11007,10999,11021,10982,10916,    0,    0, 3255,
     3160,10901,10898,10903,10875, 3273, 3176,10873,10849,10864,
    10844,    0,10819,10813,10804,22942, 3274, 3244,10759,10758,
    10746,10701, 3278, 3261,10693,10683,10697,10672,10710, 1541,
    10674,    0,10662,10658,    0,22942,    0, 3259,    0,10649,
    10642,10673,10636,10639, 3281,    0,10637,10634,10660,10609,
    10612,22942,    0,22942,22942,10632,10638, 3184,    0, 3281,

    22942, 3536,10634,10632,10624, 3259,22942, 3549,10616,10615,
    10621, 2919, 3089,10581,10585,10570,10550,10587, 3294, 3300,
     3409, 3306, 3340, 3606, 3321, 3342, 3343, 3507, 3381, 3324,
     3504, 3382, 3538, 3548, 3592, 3593, 3599, 3416,10586, 3655,
    10585, 3615, 3618, 3725, 3626, 3621, 3687,10584, 3520, 3627,
     3383, 3521, 3628,10566, 3662, 3685, 3523, 3664, 3687, 3522,
     3605, 3694, 3733, 3675, 3795, 3734, 3735,10574, 3736, 3766,
     3823, 3754,22942,10557,10563, 3794, 3738, 3807, 3739, 3740,
     3815, 3890, 3808, 3810,10566,10550,10508,22942,10496,10491,
    10492,10504,10537,10521,10479,22942,10467,10460,22942,10487,

     3700,22942,    0,22942,10493,    0, 3837, 3338, 3341,10487,
    10472, 3809, 3960, 3988, 3744,22942,10471,    0, 3821, 3825,
     4031, 3854, 3824, 3826, 4101, 3677, 3829, 3853,22942,10470,
        0, 3919, 3830, 3889, 3850, 3922, 3925, 3903, 4001, 4171,
     3989, 3998, 3904,    0, 3905, 3972, 3327,    0,10435,10435,
    10463,10421,10410, 3334,    0,10408,10408,10439,10402,10402,
     3403,    0,10395,10381,10412,10375,10378, 3535,    0,10376,
    10373,10399,10348,10351, 3538,    0,10349,10349,10380,10340,
    10338, 3543,    0,10322,10320,10351,10310,10311,10303,10171,
    10167,10171,10098,10107, 3546,    0,10096,10028,10050,10011,

    10003, 3615,    0, 9992, 9990,10010, 9964, 9965, 3935, 9991,
     9954,22942, 4059, 9988,22942,22942, 4072, 9987, 9932, 4199,
     9960, 9908, 9915, 9902, 9888, 9923, 9886, 4077, 4147, 9894,
     9900, 4129, 9899, 9871, 9869, 9871, 9856, 9867, 9861,22942,
        0, 9835, 9841, 9830, 9766, 9761, 9671, 4152, 9682,    0,
     9641,    0, 9634, 9580, 9561,    0, 9546, 4212, 4217, 9582,
     9528, 9520,22942, 9529, 9513, 9476, 9464, 9471, 9459, 9443,
     9420, 9424, 9428, 9411,    0, 9407, 9409, 9406, 9272, 9265,
        0, 9261, 9191, 9194, 9189, 9129, 9129, 9108, 4230, 9101,
        0, 4014, 9126, 9134, 9115, 9078,22942, 9079, 9074,    0,

        0, 3685,    0, 9055, 9052, 9064, 9027, 9027, 3689,    0,
     9017, 9015, 9035, 8996, 8999,    0, 8540, 8529, 3690,    0,
     8505, 8505, 8536, 8499, 8484, 3751,    0, 8482, 8482, 8512,
       12,  106,  202,  628,22942,    0,  715,    0,    0,  747,
     1015, 1047, 1643, 1695, 1733, 1793, 1801, 2077, 2260, 4286,
     4355, 2324, 2577, 2698, 4184, 4360, 2705, 2723, 2773, 3628,
     2924, 4215, 3404, 4358, 2976, 2960, 3081, 3069, 3093, 3118,
     3541, 3737, 3975, 4374, 3196, 3206, 4065, 4379, 3212, 4170,
     4043, 4202, 3974, 4183, 4205, 4045, 4207, 4046, 4392, 4044,
     4424, 3932,22942, 3276,22942, 3334, 3344, 3401, 3763, 4186,

     4214,22942, 3410, 3418, 3911, 4437, 3598,22942, 3620, 4220,
     3838, 4071, 4116, 4450,22942, 3663, 4225, 4227, 4345, 4347,
     4231, 4121, 4349, 4228, 4352, 4115,22942, 3692, 3700, 4122,
     4488, 3863, 4226, 4455, 3751, 4468,22942,22942, 4558, 4348,
     4363, 4238, 4233, 4414, 4350,22942, 4586, 3753, 3756, 3854,
     4369, 4650, 4367, 3865, 3831, 3833, 3873, 3854, 3935, 3879,
     4586, 3996, 4587, 3919, 3912, 4072, 4240,22942, 3921,    0,
     4534, 3927, 4377, 4368, 4397, 4380,22942, 3930,    0, 3991,
     4422, 4394,22942, 3990,    0, 4395, 4425, 4516, 4539, 4599,
    22942, 4678, 4463, 4413, 4439, 4379, 4484, 4604,22942,22942,

     4061,    0, 4691, 4720, 4790, 4423, 4503, 4061, 4029, 4039,
     4085, 4123, 4088, 4102, 4103, 4184, 4195, 4208, 4205, 4243,
     4209, 4214, 4211, 4258, 4327, 4348, 4371, 4439, 4406, 4410,
     4415, 4424, 4428, 4423, 4431, 4437, 4451, 4500, 4465, 4475,
     4472, 4510, 4487, 4492, 4489, 4528,    0, 4748, 4529, 4524,
     4570, 4761, 4571, 4555, 4589, 4568, 4569, 4573, 4557, 4576,
     4597, 4608, 4574,22942, 4818, 4599, 4766, 4601, 4589, 4831,
     4573, 4578, 4585, 4596, 4593, 4598, 4610, 4617,22942, 4836,
     4638, 4633, 4626, 4633, 4849,22942, 4675,22942, 4638,22942,
     4639, 4647, 4643, 4661,22942, 4661, 4684, 4648, 4664, 4644,

     4675, 4652, 4862, 4654, 4668, 4657, 4688, 4695, 4710, 4701,
    22942, 4709,    0, 4703, 4726,    0,22942,    0, 4868,    0,
     4729, 4715,    0, 4713, 4881, 4755, 4717,    0, 4772, 4758,
     4723, 4727, 4724, 4762, 4766, 4770, 4767, 4784,    0, 4820,
     4786, 4790, 4787, 4825, 4796, 4804, 4801, 4824,22942, 4816,
     4841,22942, 4857, 4865, 4829, 4866, 4875, 4868, 4833, 4870,
     4879, 4874, 4843, 4838, 4840, 4859, 4842, 4883, 4852, 4846,
     4847, 4866, 4849,    0, 4852, 4852, 4855, 4892, 4893, 4955,
     4862, 4871, 4896, 4905, 4913,22942, 4897, 4899, 4929, 4903,
     4924, 4906, 4954, 4931, 4927, 4987, 5001, 4900, 4921, 5014,

     4902, 4975, 4907, 4985, 4914, 5027, 5032, 4990, 4883, 4917,
     4928, 5025, 5065, 5004, 5135, 5093, 4970, 5205, 4998, 5019,
     4979, 5275, 5033, 4989, 5031, 5106, 5077, 5034,22942, 4986,
     4998,22942, 5078,22942, 5020,22942, 5022, 5035, 5079, 5095,
     5134, 5104, 5345, 5415, 5178, 5029, 5012, 4997, 5010, 5010,
     5041, 5105,22942, 5080, 5097, 5165, 5068, 5056, 5079, 5171,
     5065, 5060, 5064, 5082, 5069, 5172, 5132, 5111, 5112, 5134,
     5123, 5164, 5173, 5130, 5168, 5174, 5233, 5242, 5244, 5246,
     5485, 5217, 5218, 5224, 5247, 5172,22942, 5320, 5175, 5247,
     5555, 5285, 5235, 5307, 5391, 5176,22942, 5177,    0,22942,

     5178,    0, 5306, 5236, 5182, 5187, 5214, 5217, 5206, 5205,
     5294, 5304, 5259, 5297, 5316, 5269, 5309, 5318, 5284,    0,
     5277, 5277, 5281, 5352,    0, 5386, 5353, 5322, 5331, 5356,
     5320, 5358, 5329, 5445,22942, 5332, 5340, 5337, 5458, 5353,
     5340, 5355, 5358, 5536, 5381, 5463, 5340,    0, 5364, 5385,
     5430, 5366, 5513, 5365, 5364, 5403, 5401, 5435, 5455,    0,
     5428,    0, 5446,    0, 5530, 5451, 5432,    0, 5413, 5423,
     5595, 5433,    0, 5430,22942, 5459, 5600,22942,22942, 5613,
     5484,22942, 5477,    0,22942,    0, 5626, 5498, 5496, 5461,
     5473, 5477, 5506, 5469,22942, 5468,22942, 5482,    0, 5515,

     5500, 5525, 5528, 5503, 5554, 5564,    0, 5533, 5535, 5568,
     5533, 5551, 5586,    0, 5554, 5556, 5589, 5560, 5565,22942,
     5565,    0, 5572, 5612,22942, 5611, 5620, 5577, 5583, 5616,
     5626,22942, 5640, 5624, 5635, 5662, 5675, 5625, 5628, 5632,
     5629, 5646, 5630, 5692, 5697, 5634,22942, 5636, 5759, 5605,
     5638, 5659, 5639, 5735, 5647, 5741, 5651, 5665, 5614, 5669,
     5690, 5681,22942, 5685, 5693, 5693,22942, 5687, 5701, 5788,
     5695, 5668,22942, 5697, 5705, 5801, 5699, 5708,22942, 5700,
     5709, 5703, 5706, 5755, 5809, 5704, 5816, 5705, 5778, 5709,
     5793, 5774, 5786, 5794, 5808,22942, 5710, 5718,22942, 5712,

     5720, 5702, 5708, 5785, 5707, 5728, 5811, 5821, 5843, 5856,
     5814,    0, 5791, 5810, 5828,    0, 5785, 5795, 5829, 5796,
     5807, 5843,    0, 5812, 5815, 5848, 5813, 5818, 5852,    0,
     5853, 5862, 5855, 5877, 5861, 5884, 5869,22942, 5870,    0,
     5871, 5873, 5872, 5874, 5833, 5878, 5880,22942, 5881,    0,
     5882, 5883, 5930, 5885, 5849, 5887, 5935, 5948, 5961,    0,
     5866, 5853, 5867, 5868, 5895, 5875, 5900, 5879, 5904, 5873,
    22942, 5881,    0, 5882, 5885, 5891, 5924, 5933,    0, 5932,
     5945, 5910, 5903, 5974,    0, 5910, 5918, 5915, 5925, 5914,
     5927, 5958, 5987, 5959,    0,22942, 5930, 5961, 5934, 5940,

     5949, 5949, 5938, 5975,22942, 5939, 5949,22942, 5936, 5980,
     5947,22942, 5958, 5951, 6005,22942, 5965, 5966, 6012, 5997,
     5961, 5999, 5963,22942,22942, 5976, 5982, 5980, 5981, 5976,
     6007, 6016, 6038, 5986, 5985,22942, 5996, 5977, 6026,    0,
     6014, 5986, 5990, 5987, 6026, 5991, 5996, 5993,    0,22942,
        0, 6032, 6009, 5997, 6035, 6057,22942,22942, 6041, 6123,
     6042, 6010, 6044, 6046, 6047, 6049, 6186, 6071, 6079, 6055,
    22942, 6024, 6063, 6064, 6073,22942, 6066, 6075, 6034, 6074,
     6083, 6081, 6043, 6055, 6079, 6047, 6082, 6256, 6051, 6085,
     6086, 6068, 6089, 6058, 6113,22942, 6091,22942, 6098, 6097,

     6099, 6067, 6108, 6231, 6109, 6111, 6112, 6326, 6113, 6116,
     6117, 6119, 6226, 6100, 6099, 6091, 6091, 6089, 6104, 6128,
     6395, 6130, 6107, 6132,22942, 6110, 6118, 6134, 6100, 6105,
     6103, 6146, 6113, 6117, 6114, 6158,22942, 6153, 6285, 6298,
    22942, 6197, 6354,22942, 6160, 6459, 6367, 6161, 6154, 6223,
        0, 6185, 6224, 6196, 6218, 6252, 6269, 6158, 6198,    0,
     6200, 6227, 6373,22942, 6292, 6400, 6201,22942, 6196, 6193,
     6189,    0, 6192,    0, 6249,    0,22942,    0, 6258, 6246,
     6284,22942, 6286, 6413, 6255, 6430, 6288,22942, 6259, 6271,
     6256,    0, 6271, 6276, 6297, 6359, 6265, 6325,22942,    0,

     6306, 6487, 6301,    0, 6316, 6317, 6325,    0, 6360, 6369,
     6335,    0, 6328, 6329, 6331, 6348, 6385,    0, 6387, 6397,
     6364, 6370, 6376, 6368, 6366, 6364, 6379, 6403, 6528, 6405,
        0,    0,22942,    0, 6425, 6414,22942,22942,22942, 6500,
     6374, 6380, 6395, 6383, 6395, 6384, 6400, 6393, 6402, 6396,
     6411, 6434, 6412, 6471, 6492, 6474, 6534, 6594,22942, 6472,
     6493, 6515, 6488,22942, 6549, 6473, 6453, 6487, 6526, 6489,
     6457, 6499, 6527, 6478, 6475, 6521, 6541, 6499, 6524, 6543,
    22942, 6536, 6545,    0, 6664, 6506, 6539, 6548,    0, 6734,
     6546, 6564, 6601, 6524, 6552, 6561, 6521, 6535, 6556, 6567,

     6602,22942, 6557, 6570, 6804, 6603, 6634, 6874, 6642, 6558,
    22942, 6521, 6526, 6537, 6694, 6584, 6584, 6574, 6580, 6571,
     6591, 6591, 6620, 6591, 6629, 6671,    0,22942, 6762, 6710,
     6631, 6902, 6655,22942, 6600,    0, 6716, 6635, 6957, 6636,
    22942, 6637, 6674, 7027, 6716, 6723, 6637, 6683, 6764,22942,
     6684, 6733, 6658, 6702,    0, 6665, 6664,22942,    0,22942,
        0,22942,22942, 6673, 6718, 6850, 6758,    0, 6721, 6760,
     6735, 6726,    0,22942, 6745, 6729, 6767, 6736, 6769, 6811,
    22942, 6733, 6855, 6771,    0,22942, 6833,    0,    0,22942,
     6772,    0,22942, 6746,    0,22942,    0, 6751, 6775, 6825,

    22942, 6776,    0, 6738, 6764, 6787, 6915, 6799, 6801, 6793,
     6799, 6790, 6812, 6812, 6842,22942,22942,22942, 6873,22942,
     6932, 6843, 6907,22942, 6807, 6807, 6810, 6847, 6855, 6874,
     6868, 6871, 6873, 6867, 6885, 6870, 6893, 6881, 6922, 6932,
     6901, 6926, 6931, 6986, 6928, 6999,22942, 6929, 6971, 6953,
     7012, 7055,    0,22942, 6930, 6996, 6895, 6956,    0, 6989,
     7046, 6931, 6948, 6983, 6960, 6985,22942,22942, 6987, 7047,
     6973, 6998,22942,22942, 7000, 7048, 7042, 7057, 7053, 7052,
     7027, 7054, 7035, 7029, 7060, 7069, 7062, 7063,22942, 7064,
     7075, 7102, 7107,22942,22942, 7065, 7077, 7046, 7038, 7078,

     7061, 7064, 7067, 7124, 7096, 7058, 7080, 7069, 7088, 7085,
     7086, 7081, 7112, 7121, 7077, 7116,22942, 7143,22942, 7080,
     7119, 7120, 7128, 7102, 7129,22942, 7130,    0, 7135,22942,
     7132,    0, 7133, 7136, 7113, 7138, 7139, 7116, 7141, 7150,
    22942,    0, 7119,22942,22942, 7107, 7107, 7109, 7147,22942,
     7115, 7149, 7162,    0, 7177,22942, 7117, 7123, 7125, 7164,
        0, 7141, 7171,22942, 7193, 7177,22942,22942,22942, 7150,
    22942,22942, 7155, 7181,22942, 7152, 7155, 7157, 7207, 7191,
     7153, 7173, 7162, 7175, 7172, 7173, 7169, 7200, 7209, 7206,
     7231, 7203,22942, 7176, 7179, 7184, 7183, 7179, 7174, 7198,

     7185, 7198, 7197, 7194, 7199, 7204, 7205, 7198, 7227, 7191,
     7229, 7237, 7208, 7233, 7259, 7234, 7235, 7264, 7272, 7236,
     7225,22942, 7256,22942, 7227, 7228, 7223, 7224, 7264,22942,
     7265, 7266,    0, 7243, 7229, 7269, 7270, 7271, 7297,22942,
     7230, 7245, 7238, 7281, 7290, 7245, 7247, 7254, 7256, 7291,
     7258, 7260, 7259, 7277, 7270, 7268, 7266, 7281, 7305, 7278,
        0, 7307, 7317, 7310, 7311,    0, 7312, 7321, 7314, 7316,
     7315, 7282, 7322, 7288, 7320,22942,    0, 7295, 7296,    0,
     7325, 7334, 7293, 7328,22942, 7368, 7329, 7306,    0, 7307,
    22942,    0, 7332, 7345,22942, 7335, 7302, 7302, 7302, 7303,

     7320, 7320, 7354, 7319, 7320, 7319, 7336, 7329, 7327, 7325,
     7340, 7364, 7365, 7387, 7392,    0,22942, 7376, 7385, 7340,
     7339, 7384, 7358, 7344, 7387, 7345, 7348, 7349, 7351, 7356,
     7354, 7361, 7355, 7374,22942,    0, 7397,22942, 7363, 7398,
     7407, 7368, 7401, 7403, 7429, 7404, 7374, 7413, 7390, 7395,
    22942,    0, 7382, 7417, 7418, 7496,22942,    0, 7395, 7420,
     7421,22942, 7388, 7395, 7478, 7424, 7463, 7397, 7400, 7392,
     7429, 7440, 7391, 7412, 7413, 7403, 7416, 7537, 7428, 7427,
     7418,22942, 7452, 7468, 7503,22942, 7463, 7472, 7505, 7495,
     7553, 7506, 7432,22942, 7424, 7424,22942, 7529, 7427, 7434,

     7443, 7470, 7434,22942, 7475,22942, 7530, 7509, 7531,    0,
     7566, 7571, 7482, 7485, 7488, 7537, 7563, 7500, 7533, 7534,
     7523, 7529, 7585, 7541, 7547, 7570, 7592, 7598, 7590, 7555,
     7560, 7546, 7566, 7551, 7556, 7561, 7564, 7565, 7561, 7564,
     7569, 7570, 7571, 7579,22942, 7605, 7565, 7611, 7567, 7606,
     7615, 7637, 7570, 7609,    0,    0,22942, 7590, 7612, 7613,
    22942, 7614, 7628,22942, 7643, 7627, 7629, 7608, 7664, 7631,
     7610,    0, 7610, 7648, 7598, 7601, 7609, 7621, 7623, 7677,
     7652, 7614, 7634, 7629, 7690, 7662, 7663, 7664, 7674, 7696,
     7665, 7682, 7648, 7655, 7660, 7657, 7651, 7657, 7691, 7702,

     7654, 7655, 7704,22942, 7728, 7695, 7742, 7697, 7676,    0,
     7676, 7713, 7669, 7677, 7683, 7688, 7698, 7748, 7732, 7695,
     7715, 7736, 7761, 7737, 7698,    0, 7709, 7710, 7708, 7728,
     7712, 7718, 7719, 7733, 7776, 7722, 7737, 7729, 7732, 7763,
     7736, 7741, 7776, 7790,22942,    0, 7774,22942,22942, 7753,
     7778, 7777, 7803, 7780, 7787, 7816, 7750, 7752, 7791, 7755,
    22942, 7756,    0,    0, 7763, 7765, 7772, 7775, 7809, 7774,
     7775,    0, 7838,22942, 7851, 7812, 7814, 7858, 7770, 7822,
     7864, 7785, 7784,    0, 7793, 7803, 7791, 7856,    0,    0,
     7792, 7853, 7816, 7857, 7822,22942, 7823,    0,    0, 7823,

     7824, 7831, 7832, 7866, 7831, 7832, 7869, 7846,22942, 7843,
     7829, 7851, 7843, 7896, 7848, 7849, 7860, 7909, 7883, 7858,
     7865, 7860, 7869, 7895, 7858, 7865,22942, 7898, 7875, 7901,
     7902, 7878, 7904, 7905, 7927,22942, 7878, 7912, 7921,    0,
        0,22942,22942,    0, 7886, 7889, 7880, 7917, 7928, 7883,
     7900,22942, 7960, 7965, 7924, 7925, 7982,22942,    0, 7926,
     7935, 7987,22942,    0, 7907,22942, 7900, 7902, 7908,22942,
    22942,    0, 7937, 7958, 7919, 7953, 7979,    0,    0,22942,
    22942,    0, 7926, 7929, 7923, 7972, 7982, 7936, 7953, 7977,
        0,    0, 7984, 7943, 7959, 8005, 7989,    0, 8011, 7971,

     7997, 8024, 7960, 8029, 8042, 8001, 7971, 7963, 8013,    0,
     8014, 8016, 8062, 8017, 8026, 8067, 7985, 8036,22942,22942,
    22942, 8010,    0, 8011, 8059, 7998, 8000, 8081, 8052,22942,
     8054, 8095,22942, 8065,22942,    0,    0, 8019, 8028,22942,
     8079, 8034, 8088,22942,22942,22942, 8047,    0, 8047, 8089,
     8045, 8046, 8091,22942,22942, 8048, 8059, 8053, 8059, 8064,
     8057, 8061, 8098,22942, 8120, 8104, 8126, 8110, 8120, 8142,
     8113, 8086, 8147, 8115, 8160, 8116, 8119, 8078, 8103, 8132,
    22942, 8134, 8135, 8173, 8136, 8145, 8179,22942, 8186, 8109,
    22942, 8111,    0,    0, 8149, 8163, 8199,22942,22942,22942,

     8122, 8143, 8212, 8136,22942, 8137,    0,    0,22942, 8141,
     8143, 8149, 8154, 8162, 8155, 8165, 8189, 8204, 8197, 8219,
     8206, 8215, 8208, 8176, 8172, 8212,22942, 8213, 8214, 8192,
     8179, 8225, 8226, 8220, 8188, 8222, 8248, 8223,    0,    0,
    22942,22942, 8224, 8240, 8233, 8196, 8195, 8262, 8236,    0,
        0,22942,22942, 8217, 8206, 8226, 8217, 8217, 8227, 8226,
     8259, 8252, 8262, 8255, 8256, 8265, 8228, 8229, 8263, 8272,
     8266, 8275, 8276,    0, 8240,22942,22942, 8270, 8250, 8274,
     8285, 8245, 8279,22942,22942, 8288, 8281, 8254, 8259, 8251,
     8286,22942,22942, 8265, 8311, 8273, 8276, 8273, 8261, 8264,

     8312, 8301, 8313, 8314, 8336, 8285, 8328, 8329,22942,22942,
     8268, 8310, 8287, 8330, 8287, 8324, 8333, 8326, 8291,    0,
     8296, 8334, 8344, 8311, 8358, 8342, 8321, 8308, 8315, 8320,
     8371, 8363, 8385, 8356, 8319, 8334, 8360,    0, 8338, 8377,
     8370, 8347,22942, 8349, 8381, 8403, 8374, 8338, 8350, 8341,
     8347, 8408, 8393, 8395, 8368,    0, 8424,22942, 8360, 8429,
        0, 8361, 8451, 8400, 8401, 8421, 8456, 8381, 8469, 8384,
     8417, 8418, 8427, 8389,22942, 8474,22942,    0, 8487,22942,
    22942,    0, 8423, 8471, 8493, 8425, 8394, 8500, 8428, 8506,
     8440, 8498, 8500, 8409,22942,22942, 8443, 8501, 8444, 8523,

     8445, 8528, 8446, 8520, 8542, 8526, 8458, 8535, 8549, 8459,
     8461, 8542, 8462, 8564, 8464, 8549, 8477, 8556, 8494, 8558,
     8495, 8496, 8559, 8560, 8499, 8561, 8562, 8565,22942, 8588,
     8617, 8646, 8675, 8704, 8733, 8762, 8791, 8820, 8849, 8878,
     8907, 8936, 8965, 8994, 9023, 9040, 9055, 9080, 9105, 9130,
     9145, 9160, 9186, 9215, 9233, 9259, 9288, 9306, 9332, 9361,
     9390, 9419, 9437, 9462, 9487, 9504, 9519, 9547, 9574, 9589,
     9604, 9630, 9659, 9677, 9702, 9729, 9757, 9786, 9804, 9830,
     9859, 9872, 9885, 9899, 9914, 9930, 9955, 9980,10005,10015,
    10030,10040,10055,10065,10091,10120,10138,10164,10193,10211,

    10237,10266,10295,10324,10353,10382,10411,10440,10469,10498,
    10527,10556,10585,10614,10643,10672,10690,10700,10725,10735,
    10760,10787,10804,10830,10848,10876,10903,10918,10928,10943,
    10953,10979,11008,11026,11036,11061,11088,11115,11143,11172,
    11201,11214,11229,11245,11271,11289,11302,11315,11341,11359,
    11374,11390, 9120, 9452,11415,11441,11459,11474,11484,11499,
    11514,11529,11555,11584,11613,11642,11671,11689,11714,11739,
    11767, 9995,11785,11800,11815,11840,11868,11897,11915,11930,
    10357,10382,11945,11971,11989,12004,12020,12046,12075,12104,
    12133,12149,12157,12177,12192,12207,12217,12243,12272,12301,

    12319,12334,10411,10440,10469,10498,10527,10556,10585,10614,
    12360,12389,12418,12447,12476,12505,12534,12563,12592,12610,
    12635,12661,12677,12687,12702,10646,10672,12717,10715,11271,
    12743,12772,12790,12805,12818,12826,12847,12876,12894,12920,
    12949,12978,13007,13036,13055,13081,13110,13139,13168,13197,
    13215,13225,13240,13253,13261,13269,13277,13285,13293,13301,
    13309,13330,13359,13388,13417,13446,13475,13504,13533,13562,
    13591,13620,13649,13678,13694,13702,13723,13739,13747,13757,
    13773,13799,13828,13857,13886,13915,13944,13973,14002,14031,
    14060,14089,14118,14147,14165,14191,14204,14219,14245,14274,

    14303,14332,14361,14390,14419,14448,14477,14506,14535,14564,
    14593,14622,14651,14680,14709,14738,14767,14796,14825,14843,
    14869,11405,11441,14898,14917,14943,14972,15001,15030,15059,
    15088,15117,15146,15175,15204,11555,11584,15222,15248,15277,
    15290,15316,15345,15374,15402,15428,15457,15486,15515,15544,
    15573,15602,15631,15660,15689,15718,15747,15776,15805,15834,
    15863,15881,15907,15923,15931,15952,15981,16010,16039,16068,
    16096,16123,16152,16171,16197,16226,16255,16284,16313,16342,
    16371,16400,16429,16445,16453,16463,16489,16518,16547,16576,
    16605,16634,16663,16681,16707,16736,16765,16794,16823,16852,

    16881,16910,16939,16968,16997,17026,17055,17084,17113,17142,
    17171,17200,17229,17258,17287,17316,17334,17350,17376,17405,
    17433,17460,17489,17518,17547,17576,17605,17634,17663,17692,
    17721,17750,17779,17808,17837,17865,17875,17901,17930,17959,
    17988,18006,18032,18061,18090,18119,18148,18177,18206,18235,
    18264,18293,18322,18351,18380,18409,18438,18467,18496,18525,
    18554,18583,18601,18626,18643,18669,18698,18726,18737,18763,
    18792,18821,18850,18879,18908,18937,18966,18995,19024,19053,
    19082,19100,19126,19139,19165,19183,19209,19238,19267,19296,
    19325,19354,19383,19412,19441,19470,19498,19525,19554,19583,

    19612,19640,19666,19692,19721,19750,19779,19808,19837,19866,
    19895,19924,19942,19968,19997,20015,20041,20070,20099,20128,
    20157,20186,20215,20244,20273,20302,20331,20359,20370,20396,
    20425,20454,20483,20511,20538,20567,20596,20625,20654,20683,
    20712,20740,20766,20792,20821,20840,20866,20895,20924,20953,
    20982,21011,21040,21069,21098,21127,21156,21185,21214,21243,
    21272,21301,21330,21359,21388,21417,21446,21475,21504,21533,
    21562,21591,21620,21649,21678,21707,21736,21765,21794,21823,
    21852,21881,21910,21929,21955,21984,22013,22042,22071,22100,
    22129,22158,22187,22216,22245,22274,22303,22332,22361,22390,

    22419,22448,22477,22506,22535,22564,22593,22622,22651,22680,
    22709,22738,22767,22796,22825,22854,22883,22912
    } ;

static yyconst flex_int16_t yy_def[4219] =
    {   0,
     3629,    1, 3630, 3630, 3631, 3631, 3632, 3632, 3633, 3633,
     3634, 3634, 3629,   13, 3635, 3635, 3629,   17, 3629,   19,
     3629,   21, 3629,   23, 3636, 3636, 3637, 3637, 3629,   29,
     3629,   31, 3629,   33, 3638, 3638, 3629,   37, 3639, 3639,
     3640, 3640, 3641, 3641, 3629,   45, 3629,   47, 3633, 3633,
     3629,   51, 3642, 3642, 3643, 3643, 3633, 3633, 3633, 3633,
     3629,   61, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3644,
     3629, 3629, 3645, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3646, 3629, 3629, 3629, 3647, 3647, 3647, 3647, 3647,
     3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647,

     3647, 3647, 3647, 3647, 3647, 3629, 3629, 3629, 3629, 3648,
     3648, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3649, 3649, 3649, 3629, 3629, 3629, 3629, 3629, 3629,
     3650, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3651,
     3629, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651,
     3651, 3651, 3651, 3651, 3651, 3651, 3651, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3652, 3652, 3652, 3629, 3629,
     3629, 3629, 3629, 3653, 3654, 3629, 3629, 3655, 3629, 3629,

     3629, 3629, 3656, 3657, 3629, 3629, 3629, 3629, 3658, 3658,
     3629, 3629, 3629, 3629, 3659, 3660, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3661, 3629, 3629, 3662, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3663,
     3629, 3629, 3629, 3629, 3664, 3629, 3665, 3665, 3665, 3665,
     3665, 3629, 3629, 3666, 3629, 3629, 3629, 3629, 3667, 3629,

     3668, 3668, 3668, 3669, 3669, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3670, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3671, 3629, 3629, 3672, 3673, 3629,
     3629, 3629, 3629, 3629, 3674, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3675, 3675, 3675, 3676, 3629, 3629, 3677,
     3678, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3679, 3629,
     3629, 3629, 3680, 3629, 3629, 3629, 3681, 3629, 3629, 3629,
     3629, 3629, 3629, 3682, 3629, 3683, 3629, 3629, 3683, 3684,
     3629, 3629, 3629, 3629, 3629, 3629, 3685, 3686, 3685, 3685,
     3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685,

     3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685,
     3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685,
     3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685, 3685,
     3685, 3685, 3685, 3685, 3685, 3685, 3629, 3687, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3688, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3689, 3690, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3691, 3692, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691,
     3691, 3691, 3691, 3691, 3691, 3691, 3629, 3691, 3691, 3691,

     3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691,
     3691, 3691, 3691, 3691, 3691, 3691, 3629, 3629, 3693, 3694,
     3693, 3693, 3629, 3695, 3629, 3629, 3696, 3629, 3629, 3629,
     3697, 3629, 3698, 3629, 3629, 3699, 3629, 3629, 3629, 3700,
     3700, 3629, 3701, 3629, 3629, 3702, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3703, 3629,
     3629, 3629, 3704, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3705,
     3706, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3707,
     3629, 3629, 3629, 3629, 3629, 3708, 3709, 3629, 3710, 3711,

     3629, 3712, 3629, 3713, 3629, 3714, 3629, 3629, 3715, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3716,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3717,
     3718, 3629, 3629, 3629, 3719, 3720, 3721, 3721, 3721, 3722,
     3629, 3629, 3723, 3629, 3629, 3724, 3725, 3629, 3726, 3726,
     3629, 3727, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3728, 3729, 3629, 3629, 3730, 3731, 3629,
     3732, 3733, 3732, 3629, 3629, 3733, 3629, 3629, 3629, 3629,
     3734, 3735, 3629, 3629, 3629, 3629, 3736, 3737, 3738, 3629,
     3629, 3629, 3739, 3629, 3629, 3740, 3629, 3629, 3741, 3629,

     3629, 3629, 3629, 3742, 3743, 3744, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3745, 3746,
     3629, 3629, 3747, 3629, 3748, 3629, 3629, 3749, 3629, 3750,
     3751, 3751, 3751, 3751, 3629, 3751, 3752, 3629, 3629, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3629, 3629, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,

     3629, 3753, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3754, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3755,
     3756, 3757, 3629, 3629, 3758, 3759, 3629, 3629, 3629, 3758,
     3759, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3629,
     3758, 3759, 3758, 3758, 3629, 3758, 3759, 3629, 3758, 3759,
     3758, 3629, 3758, 3759, 3758, 3758, 3629, 3758, 3759, 3758,
     3629, 3758, 3759, 3629, 3758, 3759, 3758, 3629, 3758, 3759,
     3758, 3629, 3758, 3759, 3758, 3758, 3758, 3758, 3758, 3758,
     3758, 3758, 3629, 3758, 3759, 3758, 3758, 3758, 3760, 3761,
     3761, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3762, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3763, 3764,
     3765, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3766, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3767, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3768, 3629, 3769, 3770, 3771, 3771,
     3629, 3772, 3629, 3629, 3629, 3629, 3629, 3773, 3774, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3775, 3629, 3629, 3776, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3777, 3777,
     3629, 3778, 3629, 3629, 3779, 3629, 3780, 3629, 3781, 3629,
     3629, 3629, 3629, 3629, 3629, 3782, 3629, 3629, 3629, 3629,
     3629, 3629, 3783, 3629, 3629, 3629, 3784, 3784, 3785, 3786,

     3629, 3629, 3629, 3786, 3787, 3786, 3629, 3629, 3629, 3786,
     3787, 3788, 3789, 3629, 3629, 3629, 3629, 3790, 3786, 3786,
     3786, 3786, 3786, 3786, 3786, 3786, 3786, 3786, 3786, 3786,
     3786, 3786, 3786, 3786, 3786, 3786, 3786, 3629, 3629, 3786,
     3791, 3786, 3786, 3786, 3786, 3786, 3629, 3629, 3786, 3786,
     3786, 3786, 3786, 3629, 3786, 3786, 3786, 3786, 3786, 3786,
     3786, 3786, 3786, 3786, 3786, 3786, 3786, 3786, 3786, 3786,
     3786, 3786, 3629, 3786, 3787, 3786, 3786, 3786, 3786, 3786,
     3786, 3786, 3786, 3786, 3629, 3792, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3793, 3629, 3629, 3629, 3629, 3629, 3629,

     3794, 3629, 3795, 3629, 3796, 3797, 3629, 3798, 3799, 3629,
     3800, 3796, 3796, 3796, 3796, 3629, 3796, 3797, 3796, 3796,
     3796, 3796, 3796, 3796, 3796, 3796, 3796, 3796, 3629, 3796,
     3797, 3796, 3796, 3796, 3796, 3796, 3796, 3796, 3796, 3796,
     3796, 3796, 3796, 3801, 3802, 3802, 3629, 3803, 3629, 3629,
     3629, 3629, 3629, 3629, 3804, 3629, 3629, 3629, 3629, 3629,
     3629, 3805, 3629, 3629, 3629, 3629, 3629, 3629, 3806, 3629,
     3629, 3629, 3629, 3629, 3629, 3807, 3629, 3629, 3629, 3629,
     3629, 3629, 3808, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3809, 3629, 3629, 3629, 3629,

     3629, 3629, 3810, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3811, 3629, 3812, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3813, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3814,
     3629, 3815, 3629, 3629, 3629, 3816, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3817, 3629, 3629, 3629, 3629, 3629,
     3818, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3819, 3629,
     3820, 3821, 3822, 3629, 3823, 3629, 3629, 3629, 3629, 3824,

     3825, 3629, 3826, 3629, 3629, 3629, 3629, 3629, 3629, 3827,
     3629, 3629, 3629, 3629, 3629, 3828, 3629, 3629, 3629, 3829,
     3629, 3629, 3629, 3629, 3629, 3629, 3830, 3629, 3629, 3629,
     3629, 3629, 3831, 3629, 3629, 3832, 3629, 3833, 3834, 3835,
     3629, 3629, 3629, 3836, 3629, 3629, 3629, 3629, 3837, 3629,
     3629, 3629, 3629, 3838, 3839, 3629, 3629, 3629, 3840, 3841,
     3629, 3629, 3842, 3629, 3629, 3629, 3629, 3629, 3629, 3843,
     3843, 3839, 3839, 3629, 3629, 3839, 3839, 3629, 3629, 3839,
     3839, 3839, 3839, 3839, 3839, 3839, 3839, 3839, 3839, 3839,
     3839, 3839, 3629, 3844, 3629, 3839, 3845, 3846, 3846, 3839,

     3839, 3629, 3839, 3845, 3839, 3629, 3629, 3629, 3847, 3839,
     3839, 3839, 3839, 3629, 3629, 3629, 3839, 3839, 3839, 3839,
     3839, 3839, 3839, 3839, 3839, 3839, 3629, 3839, 3845, 3839,
     3839, 3845, 3839, 3629, 3629, 3629, 3629, 3629, 3839, 3839,
     3839, 3839, 3839, 3839, 3839, 3629, 3629, 3629, 3839, 3845,
     3839, 3839, 3839, 3629, 3629, 3629, 3629, 3629, 3848, 3629,
     3629, 3849, 3629, 3629, 3850, 3850, 3851, 3629, 3851, 3852,
     3629, 3629, 3851, 3851, 3851, 3851, 3629, 3851, 3852, 3851,
     3851, 3851, 3629, 3851, 3852, 3851, 3851, 3629, 3629, 3629,
     3629, 3851, 3851, 3851, 3851, 3851, 3851, 3629, 3629, 3629,

     3851, 3852, 3851, 3851, 3851, 3853, 3853, 3854, 3629, 3629,
     3629, 3855, 3629, 3629, 3629, 3856, 3629, 3629, 3629, 3857,
     3629, 3629, 3629, 3858, 3629, 3629, 3629, 3859, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3860, 3629, 3629,
     3629, 3861, 3629, 3629, 3629, 3862, 3863, 3629, 3629, 3629,
     3864, 3629, 3629, 3629, 3865, 3629, 3629, 3629, 3629, 3629,
     3866, 3866, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3867, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3868, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3869, 3629, 3629, 3870, 3629, 3871, 3629, 3872,
     3629, 3629, 3873, 3629, 3629, 3629, 3629, 3874, 3629, 3875,
     3629, 3629, 3629, 3876, 3629, 3629, 3629, 3629, 3877, 3878,
     3629, 3629, 3629, 3879, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3880, 3881, 3629, 3882, 3882, 3880, 3629, 3883,
     3883, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3884, 3629, 3629, 3629, 3885, 3880, 3880,
     3629, 3629, 3886, 3881, 3880, 3629, 3887, 3880, 3880, 3880,
     3880, 3880, 3880, 3880, 3880, 3880, 3629, 3629, 3880, 3629,

     3629, 3880, 3888, 3888, 3889, 3880, 3880, 3880, 3629, 3890,
     3891, 3891, 3880, 3880, 3880, 3880, 3629, 3880, 3880, 3880,
     3880, 3880, 3880, 3880, 3880, 3880, 3880, 3880, 3629, 3880,
     3881, 3629, 3880, 3629, 3892, 3629, 3880, 3881, 3880, 3880,
     3880, 3880, 3880, 3880, 3629, 3629, 3629, 3629, 3629, 3629,
     3893, 3880, 3629, 3880, 3881, 3880, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3894, 3895, 3629, 3896, 3895, 3895, 3895, 3895, 3895,
     3895, 3895, 3895, 3895, 3629, 3629, 3629, 3629, 3629, 3895,
     3895, 3895, 3895, 3895, 3629, 3629, 3629, 3895, 3897, 3629,

     3895, 3897, 3898, 3898, 3629, 3629, 3629, 3629, 3629, 3629,
     3899, 3899, 3629, 3900, 3900, 3629, 3901, 3901, 3629, 3902,
     3629, 3629, 3629, 3903, 3904, 3629, 3629, 3629, 3629, 3905,
     3629, 3906, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3907, 3629, 3908,
     3908, 3629, 3629, 3629, 3629, 3629, 3629, 3909, 3909, 3910,
     3629, 3911, 3629, 3912, 3629, 3629, 3629, 3913, 3629, 3629,
     3629, 3629, 3914, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3915, 3629, 3916, 3629, 3629, 3629, 3629,
     3629, 3629, 3917, 3629, 3629, 3629, 3629, 3629, 3918, 3629,

     3629, 3919, 3920, 3629, 3921, 3629, 3922, 3629, 3629, 3629,
     3629, 3629, 3629, 3923, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3924, 3629, 3920, 3629, 3920, 3925, 3629, 3629, 3926,
     3926, 3629, 3920, 3927, 3927, 3920, 3629, 3629, 3920, 3920,
     3920, 3920, 3920, 3920, 3629, 3629, 3629, 3928, 3920, 3629,
     3929, 3920, 3930, 3629, 3629, 3629, 3629, 3920, 3629, 3931,
     3931, 3932, 3629, 3920, 3925, 3920, 3629, 3920, 3925, 3629,
     3629, 3629, 3629, 3920, 3925, 3920, 3920, 3925, 3629, 3920,
     3925, 3920, 3920, 3920, 3629, 3629, 3920, 3920, 3920, 3933,
     3933, 3920, 3920, 3920, 3920, 3629, 3920, 3925, 3629, 3920,

     3925, 3629, 3629, 3629, 3629, 3629, 3934, 3934, 3920, 3629,
     3629, 3935, 3629, 3629, 3629, 3936, 3629, 3629, 3629, 3629,
     3629, 3629, 3937, 3629, 3629, 3629, 3629, 3629, 3938, 3939,
     3940, 3940, 3938, 3938, 3938, 3938, 3938, 3629, 3938, 3941,
     3938, 3938, 3938, 3942, 3629, 3943, 3938, 3629, 3938, 3941,
     3938, 3938, 3629, 3629, 3629, 3944, 3945, 3945, 3629, 3946,
     3629, 3629, 3629, 3629, 3947, 3629, 3948, 3629, 3949, 3629,
     3629, 3629, 3950, 3629, 3629, 3629, 3951, 3951, 3952, 3953,
     3953, 3629, 3629, 3629, 3954, 3629, 3629, 3629, 3629, 3629,
     3629, 3955, 3629, 3629, 3956, 3629, 3629, 3957, 3629, 3629,

     3629, 3629, 3629, 3958, 3629, 3629, 3629, 3629, 3629, 3959,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3960, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3961, 3961, 3629, 3629, 3629, 3629, 3629, 3629, 3962, 3963,
     3964, 3629, 3629, 3629, 3965, 3629, 3629, 3629, 3966, 3629,
     3967, 3962, 3629, 3629, 3968, 3629, 3629, 3629, 3969, 3629,
     3629, 3629, 3970, 3962, 3962, 3962, 3962, 3962, 3971, 3629,
     3629, 3629, 3972, 3973, 3973, 3629, 3962, 3974, 3629, 3975,
     3975, 3962, 3629, 3629, 3976, 3629, 3977, 3962, 3629, 3978,
     3962, 3629, 3979, 3629, 3629, 3629, 3962, 3629, 3962, 3962,

     3962, 3629, 3980, 3629, 3629, 3962, 3962, 3962, 3981, 3962,
     3962, 3962, 3962, 3629, 3629, 3629, 3629, 3629, 3629, 3982,
     3629, 3629, 3629, 3983, 3629, 3629, 3629, 3984, 3629, 3629,
     3629, 3985, 3629, 3629, 3629, 3986, 3629, 3987, 3986, 3629,
     3629, 3986, 3629, 3629, 3986, 3986, 3986, 3986, 3988, 3988,
     3989, 3990, 3990, 3986, 3986, 3986, 3986, 3629, 3991, 3992,
     3993, 3993, 3629, 3629, 3994, 3629, 3629, 3629, 3629, 3629,
     3629, 3995, 3629, 3996, 3629, 3997, 3629, 3998, 3629, 3629,
     3999, 3629, 4000, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 4001, 3629, 3629, 4002, 4002, 3629, 4003, 3629, 4004,

     3629, 3629, 3629, 4005, 3629, 3629, 3629, 4006, 4007, 4007,
     3629, 4008, 3629, 3629, 4009, 3629, 4010, 4011, 4012, 4012,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 4013, 3629, 3629,
     4014, 4015, 3629, 4016, 4017, 4018, 3629, 3629, 3629, 4017,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 4019, 3629, 4020, 4020, 4017, 4017, 4017, 3629, 4017,
     4018, 3629, 4017, 3629, 4021, 4022, 3629, 4023, 4023, 4024,
     3629, 4025, 4017, 3629, 3629, 4026, 4026, 3629, 4027, 4027,
     3629, 4017, 4018, 4028, 4017, 3629, 4029, 4029, 4030, 4017,
     4017, 4017, 4017, 3629, 4031, 4031, 3629, 3629, 4032, 4017,

     4017, 3629, 4017, 4018, 4017, 4017, 4017, 4017, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 4033, 3629, 4034, 4034, 4035, 3629, 4036, 3629,
     3629, 4036, 2532, 3629, 2532, 4037, 3629, 3629, 4036, 4038,
     3629, 4039, 2532, 4036, 2532, 2532, 3629, 4040, 4040, 3629,
     4041, 4042, 3629, 4043, 4044, 3629, 3629, 3629, 4045, 3629,
     4046, 3629, 3629, 3629, 3629, 3629, 3629, 4047, 3629, 4048,
     3629, 3629, 4049, 3629, 3629, 3629, 4050, 3629, 4051, 4051,
     3629, 3629, 3629, 3629, 4052, 3629, 3629, 4053, 4054, 3629,
     4055, 4056, 3629, 3629, 4057, 3629, 4058, 3629, 4059, 4059,

     3629, 4060, 4061, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 4062, 3629, 3629, 3629, 4063, 3629,
     4064, 3629, 4065, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 4066, 4066,
     3629, 4067, 4063, 3629, 3629, 4063, 3629, 4063, 4065, 4063,
     3629, 4068, 4069, 3629, 4070, 4070, 3629, 4071, 4072, 4063,
     4065, 3629, 3629, 4073, 3629, 4074, 3629, 3629, 4063, 4065,
     3629, 4075, 3629, 3629, 4063, 4065, 4063, 4065, 4063, 4063,
     3629, 4076, 3629, 3629, 4077, 4077, 4063, 4063, 3629, 4063,
     4065, 4063, 3629, 3629, 3629, 4063, 4065, 3629, 3629, 4078,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 4079, 4079, 3629, 4080, 3629, 3629, 3629, 3629,
     4081, 4082, 4082, 3629, 4083, 3629, 4082, 4084, 4082, 3629,
     4082, 4084, 4082, 4082, 3629, 4085, 4086, 3629, 4087, 4087,
     3629, 4088, 3629, 3629, 3629, 3629, 3629, 3629, 4089, 3629,
     3629, 4090, 4090, 4091, 3629, 3629, 3629, 3629, 3629, 4092,
     4093, 3629, 4094, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 4095, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 4096, 4096, 4063,
     4097, 4098, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 4099, 4100,
     4063, 4065, 3629, 4101, 3629, 3629, 4063, 4102, 4103, 4104,
     3629, 3629, 4063, 3629, 3629, 3629, 4105, 3629, 4063, 3629,
     4063, 4063, 4106, 3629, 3629, 4107, 4063, 4063, 3629, 3629,
     3629, 3629, 3629, 4108, 4108, 3629, 3629, 3629, 3629, 4109,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 4110, 3629,
     4111, 4112, 4112, 4113, 4113, 4114, 4115, 4115, 4113, 4113,
     4113, 3629, 4116, 3629, 4117, 3629, 4118, 3629, 3629, 4119,
     4120, 4120, 3629, 4121, 3629, 3629, 3629, 3629, 4122, 3629,
     3629, 4123, 4124, 4124, 3629, 4125, 3629, 3629, 3629, 3629,

     3629, 3629, 4126, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 4127, 4063, 3629, 4128, 4129, 3629, 4130, 4130, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 4131, 4063, 3629, 3629, 4132,
     4132, 3629, 4133, 4063, 4134, 3629, 3629, 4063, 3629, 3629,
     3629, 4135, 3629, 4063, 4063, 4063, 3629, 4136, 3629, 4063,
     4063, 3629, 3629, 3629, 3629, 4137, 3629, 3629, 3629, 3629,
     4138, 4138, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 4139, 4113, 4113, 3629, 4115, 4113, 4113, 4113,
     3629, 4116, 3629, 3629, 3629, 3629, 3629, 4120, 3629, 3629,

     3629, 4140, 3629, 3629, 3629, 3629, 4124, 4125, 4125, 4141,
     3629, 3629, 3629, 3629, 3629, 4126, 4126, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 4063, 4142, 4143, 4130, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 4063, 3629, 4132, 3629, 4133,
     4133, 4063, 3629, 4063, 4144, 4145, 3629, 3629, 4063, 4063,
     3629, 4063, 4146, 3629, 3629, 4063, 4063, 3629, 3629, 3629,
     3629, 4147, 3629, 4138, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 4113, 4113, 4113, 4113, 4113, 3629,
     3629, 4116, 3629, 3629, 3629, 3629, 3629, 3629, 4140, 4140,

     3629, 3629, 4125, 3629, 3629, 3629, 3629, 3629, 3629, 4148,
     3629, 4126, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 4063, 4142, 3629, 3629, 4149, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 4063,
     3629, 3629, 4133, 3629, 3629, 4150, 4063, 3629, 3629, 3629,
     4063, 4063, 3629, 3629, 4063, 4063, 3629, 3629, 4151, 3629,
     3629, 3629, 4152, 4153, 3629, 3629, 3629, 3629, 4154, 3629,
     3629, 4155, 3629, 3629, 4113, 4113, 4113, 4113, 3629, 4156,
     4116, 3629, 3629, 4157, 3629, 3629, 3629, 4140, 4158, 4159,
     3629, 4160, 3629, 4161, 3629, 3629, 3629, 4162, 4163, 3629,

     3629, 3629, 3629, 4164, 3629, 3629, 4063, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 4063, 3629, 3629, 3629, 4063, 3629, 4063,
     4063, 3629, 4165, 4063, 3629, 3629, 3629, 4151, 4151, 4166,
     4167, 3629, 3629, 4168, 3629, 3629, 3629, 4154, 4154, 3629,
     3629, 3629, 3629, 3629, 4113, 4113, 3629, 3629, 4169, 4156,
     4156, 3629, 3629, 4170, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 4171, 4160, 4160, 3629, 4161, 4161, 4172, 4173, 3629,
     3629, 4174, 3629, 3629, 3629, 4164, 4164, 3629, 3629, 4063,
     4175, 4176, 3629, 3629, 3629, 3629, 3629, 4177, 3629, 3629,

     4178, 3629, 3629, 3629, 3629, 4063, 3629, 3629, 4063, 4179,
     4063, 4063, 3629, 4165, 4165, 4063, 3629, 4151, 3629, 3629,
     3629, 3629, 4180, 3629, 4154, 3629, 3629, 3629, 3629, 3629,
     4113, 4113, 3629, 4156, 3629, 4181, 4182, 3629, 3629, 3629,
     4160, 3629, 4161, 3629, 3629, 3629, 3629, 4183, 3629, 4164,
     3629, 3629, 4184, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 4185, 3629, 3629, 3629, 3629, 4178, 4178, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 4063, 3629, 3629, 4063,
     3629, 4063, 4063, 3629, 3629, 4165, 3629, 3629, 3629, 3629,
     3629, 3629, 4186, 4187, 4188, 4113, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 4189, 4190, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 4185, 4185, 4191, 3629,
     3629, 4178, 4192, 3629, 3629, 4193, 3629, 4194, 4063, 3629,
     3629, 4184, 4184, 4063, 3629, 4195, 3629, 3629, 4196, 4197,
     3629, 3629, 4188, 4188, 4113, 3629, 3629, 3629, 3629, 4198,
     4199, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     4185, 4191, 4191, 4200, 4192, 4192, 3629, 3629, 4193, 4193,
     4194, 4194, 4184, 4201, 3629, 3629, 3629, 4063, 3629, 4195,
     4195, 3629, 4202, 3629, 3629, 4188, 4113, 3629, 3629, 3629,
     4203, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     4191, 4200, 4200, 4192, 3629, 3629, 4193, 4194, 3629, 3629,
     3629, 4063, 3629, 4195, 3629, 4202, 4202, 4113, 3629, 4204,
     3629, 4203, 4203, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 4200, 3629, 3629, 3629, 3629, 4063, 4205, 3629, 4202,
     4113, 3629, 3629, 3629, 4203, 3629, 4206, 3629, 3629, 3629,
     3629, 3629, 3629, 4207, 3629, 4208, 4063, 3629, 3629, 4113,
     4209, 3629, 3629, 3629, 4206, 4206, 3629, 3629, 3629, 3629,
     4210, 4207, 4207, 3629, 3629, 3629, 3629, 4211, 3629, 3629,
     3629, 4212, 4213, 4206, 3629, 3629, 3629, 3629, 3629, 3629,
     4210, 4210, 4207, 3629, 3629, 3629, 4213, 4213, 4214, 3629,

     4215, 3629, 3629, 4210, 3629, 4213, 4214, 4214, 3629, 3629,
     4215, 4215, 4216, 3629, 3629, 4214, 4217, 4215, 4216, 4216,
     4218, 4217, 4217, 4216, 4218, 4218, 4217, 4218,    0, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629
    } ;

static yyconst flex_int16_t yy_nxt[23013] =
    {   0,
       64,   65,   66,   67,   68,   65,   69,   70,   64,   71,
       64,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   64,   83,   84,   64,   64,   64,   85,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   64,   64,
       64,   86,   87,   88,   89,   90,   91,   92,   86,   86,
       93,   86,   94,   95,   96,   97,   98,   86,   99,  100,
      101,  102,  103,  104,  105,   86,  106,  107,  108,   64,
      109, 1746,  111,  109,  109,  128,  111,  109,  128,  364,
      388,  112,  113,  365,  388,  112,  113,  109,  520,  117,
      109,  368,  369,  109,  109,  117,  109,  388,  109,  120,

      121,  122,  120,  120,  120,  121,  122,  120,  120,  370,
      128,  123,  124,  414,  377,  125,  123,  124,  521,  436,
      125,  128,  741,  371,  128,  126,  388,  118,  129,  378,
      126,  129,  143,  118,  130,  143,  114,  130,  115,  109,
      114,  144,  115,  109,  144,  360,  361,  361,  361,  360,
      394,  224,  225,  226,  224,  224,  109,  375,  388,  376,
      355, 1747,  109,  227,  127,  228,  229,  356,  388,  127,
      131,  132,  133,  131,  132,  132,  525,  230,  128,  388,
      526,  135,  421,  224,  225,  226,  224,  224,  286,  287,
      288,  286,  287,  287,  136,  227,  290,  228,  229,  432,

      388,  415,  291,  286,  287,  288,  286,  287,  287,  230,
      109,  290,  302,  109,  534,  472,  482,  291,  535,  109,
      395,  302,  109,  109, 1433,  305,  109,  396,  355,  473,
      306,  477,  478,  397,  307,  356,  137,  303,  138,  131,
      131,  132,  133,  131,  132,  132,  303,  109,  379,  502,
      380,  135,  326,  327,  326,  326,  326,  286,  328,  479,
      480,  482,  382,  329,  136,  326,  327,  326,  326,  326,
      482,  328,  286,  388,  544,  382,  329,  482,  545,  109,
      361,  362,  361,  361,  361,  507,  528,  529,  109,  308,
      486,  309,  109,  361,  361,  361,  361,  361,  361,  361,

      361,  361,  361,  487,  516,  430,  137,  431,  138,  131,
      139,  109,  128,  139,  109,  109,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  140,  139,  139,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  139,  139,
      139,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  139,  139,  139,  139,
      145,  146,  147,  148,  146,  146,  149,  145,  145,  150,
      145,  145,  145,  151,  152,  145,  145,  153,  154,  145,

      145,  145,  155,  156,  157,  158,  159,  145,  145,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  161,  145,
      145,  160,  162,  160,  163,  164,  165,  160,  166,  160,
      167,  160,  168,  169,  170,  171,  172,  160,  173,  174,
      175,  176,  160,  177,  160,  160,  145,  178,  145,  145,
      179,  180,  181,  182,  180,  180,  179,  179,  179,  179,
      179,  179,  179,  183,  184,  185,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  179,  179,
      179,  186,  186,  186,  186,  186,  187,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186,  186,  186,  188,
      186,  186,  186,  186,  186,  186,  189,  179,  179,  179,
      190,  191,  192,  193,  191,  191,  190,  194,  190,  190,
      190,  190,  195,  196,  197,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  190,  190,
      190,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  190,  190,  190,  190,
      199,  200,  201,  202,  200,  200,  199,  203,  199,  199,

      199,  199,  204,  205,  199,  199,  199,  206,  199,  199,
      199,  199,  199,  207,  199,  208,  199,  199,  199,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  199,  199,
      199,  209,  210,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  199,  199,  199,  199,
      212,  213,  214,  212,  212,  520,  215,  109,  552,  305,
      109,  216,  217, 1748,  306,  388,  218,  388,  307,  460,
      482,  553,  337,  338,  339,  337,  337,  522,  560,  482,
      482,  109,  561,  461,  340,  337,  338,  339,  337,  337,

      462,  398,  388,  405,  219,  399,  482,  340,  406,  220,
      400,  407,  515,  221,  503,  222,  212,  213,  214,  212,
      212,  388,  215,  504,  416,  505,  388,  216,  217,  726,
      388,  482,  218,  308,  488,  309,  109,  341,  417,  489,
      342,  418,  383,  383,  383,  383,  383,  384,  419,  727,
      341,  389,  566,  342,  385,  408,  390,  420,  391, 1750,
      219,  409,  410,  392,  393,  220,  567,  506,  386,  221,
      363,  222,  231,  232,  233,  234,  232,  232,  235,  236,
      231,  237,  231,  238,  239,  240,  241,  242,  243,  244,
      245,  231,  246,  231,  247,  248,  249,  250,  251,  252,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      253,  231,  254,  231,  255,  256,  257,  258,  259,  260,
      261,  231,  262,  231,  263,  264,  265,  266,  267,  231,
      268,  269,  270,  271,  231,  272,  231,  231,  273,  274,
      275,  231,  276,  277,  278,  279,  277,  277,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      276,  276,  276,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  276,  276,
      276,  276,  281,  282,  283,  284,  282,  282,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      281,  281,  281,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  281,  281,
      281,  281,  109,  292,  293,  292,  292,  292,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      109,  109,  109,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  295,  109,
      109,  109,  109,  296,  297,  296,  296,  296,  109,  109,
      109,  109,  109,  109,  109,  298,  109,  109,  109,  109,
      109,  109,  109,  109, 1082,  109,  109,  109,  109,  300,
      109,  109,  296,  297,  296,  296,  296,  109,  109,  109,
      109,  109,  109,  109,  298,  109,  109,  109,  109,  109,

      109,  109,  109, 1082,  109,  109,  109,  109,  300,  109,
      310,  311,  312,  313,  311,  311,  310,  310,  310,  310,
      310,  310,  310,  314,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  310,  310,
      310,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  310,  310,  310,  310,
      316,  317,  318,  319,  317,  317,  316,  320,  316,  316,
      316,  316,  321,  316,  316,  316,  316,  316,  316,  316,

      322,  316,  316,  316,  316,  323,  324,  316,  316,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  316,  316,
      316,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  316,  316,  316,  316,
      330,  331,  332,  333,  331,  331,  330,  330,  330,  330,
      330,  330,  330,  334,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  330,  330,
      330,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  330,  330,  330,  330,
      343,  344,  345,  343,  344,  344,  343,  344,  345,  343,
      344,  344,  372,  372,  372,  372,  372,  388,  347,  348,
      349,  348,  348,  348,  347,  350,  388,  388,  388,  583,
      351,  352,  348,  349,  348,  348,  348,  388,  350,  537,
      538,  353,  584,  351,  352,  547,  548,  401,  411,  402,
      753,  426,  412,  373,  353,  427,  570,  403,  585,  404,
      596,  413,  586,  428,  354,  564,  565,  573,  574,  343,
      429,  571,  575,  576,  597,  343,  800,  354,  109,  109,

      128,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  357,  358,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  109,  109,  109,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  109,  109,  109,  109,  388,  388,
      439,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  454,  644,  422,  598,
      423,  482,  424,  433,  638, 1393,  482,  434,  599,  608,

      639,  425,  435,  600,  440,  470,  470,  470,  470,  470,
      441,  638,  638,  609,  442,  494,  443,  639,  639,  444,
      455,  465,  465,  465,  465,  465,  456,  482,  483,  495,
      457,  388,  458,  484,  485,  459,  470,  470,  470,  470,
      470,  482,  467,  470,  470,  470,  470,  470,  474,  474,
      474,  474,  474,  482,  482,  691,  606,  490,  491,  622,
      482,  623,  492, 1433,  496,  607,  651,  650,  742,  493,
      587,  588,  589,  497,  508,  590,  509,  500,  498,  499,
      592,  724,  591,  724,  511,  593,  725,  512,  594,  475,
      595,  501,  510,  513,  677,  678,  514,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  568,  568,  568,
      568,  568,  577,  610,  601,  640,  638,  578,  602,  579,

      611,  641,  639, 1082,  580,  581,  614,  603,  615,  612,
      616,  674,  604,  618,  619,  675,  702,  624,  367,  620,
      625,  626,  621,  694,  617,  703,  627,  695,  569,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  633,
      633,  633,  633,  633,  388,  654,  634,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  697,  698,  388,
      636,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  364, 1089,  645,  732,  365,  368,  369,  645,  655,

      662,  662,  662,  662,  662,  656,  388,  388,  482,  657,
      744,  658,  388,  745,  659,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      670,  670,  670,  670,  670,  731,  671,  770,  835, 1089,
      754,  672,  670,  670,  670,  670,  670,  803,  671,  813,
      804, 1089,  814,  672,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  707,  713,  692,  388,  388,  388,
      388,  692,  360,  361,  361,  361,  360,  361,  361,  361,
      361,  361,  361,  362,  361,  361,  361,  372,  372,  372,
      372,  372,  752,  388,  376,  723,  388,  743,  708,  714,
      388,  760,  388,  757,  709,  715,  722,  722,  710,  716,
      711,  717,  388,  712,  718,  379,  482,  380,  733,  722,
      722,  383,  383,  383,  383,  383,  755,  763,  373,  382,
      758,  525,  756,  385, 1033,  526,  759, 1034,  388,  734,
      860,  388,  382,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  771,  736,  735,  388,  737,  735,  735,  735,  735,
      735,  735,  738,  738,  738,  738,  738,  388,  764,  765,
      388,  735,  735,  735,  739,  388,  746,  761,  761,  761,
      761,  761,  388,  388,  747,  388,  388,  749,  388,  762,
      388,  748,  750,  388,  388,  388,  388,  388,  388,  735,
      735,  735,  735,  388,  751,  772,  388,  766,  768,  775,
      769,  388,  767,  388,  388,  774,  783,  388,  778,  388,
      773,  740,  784,  388,  776,  388,  777,  779,  785,  388,
      792,  801,  388,  780,  811,  781,  786,  782,  787,  789,
      818,  991,  788,  992,  790,  449,  449,  449,  449,  449,

      793,  796,  482,  794,  482,  795, 1751,  791,  482,  482,
      819,  797,  465,  465,  465,  465,  465,  798,  799,  465,
      465,  465,  465,  465,  802,  823,  482,  812,  470,  470,
      470,  470,  470,  474,  474,  474,  474,  474,  482,  834,
      467,  833,  482,  839,  482,  974,  482,  975,  836,  517,
      517,  517,  517,  517,  523,  523,  523,  523,  523,  528,
      529,  537,  538,  976,  534,  867,  851,  871,  535,  482,
      482,  482,  482,  879,  475,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  837,  825,  824,  482,  826,  824,  824,

      824,  824,  824,  824,  876,  482,  838,  482,  877,  482,
      878,  482,  482,  824,  824,  824,  520,  988,  843,  544,
      560,  482,  989,  545,  561,  880,  532,  532,  532,  532,
      532,  882, 1080,  886,  844, 1081,  888,  547,  548,  887,
      890,  824,  824,  824,  824,  827,  828,  828,  828,  828,
      828,  827,  827,  827,  827,  827,  827,  827,  829,  827,
      827,  827,  827,  881,  830,  827,  520,  831,  827,  827,
      827,  827,  827,  827,  542,  542,  542,  542,  542,  564,
      565,  950, 1449,  827,  827,  827,  555,  555,  555,  555,
      555,  958,  959,  891,  557,  557,  557,  557,  557,  960,

      674,  951,  388,  961,  675,  832,  568,  568,  568,  568,
      568,  827,  827,  827,  827,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840, 1123,  841,  840, 1031,  842,  840,  840,
      840,  840,  840,  840,  985,  986, 1454,  569,  955,  955,
      955,  955,  955,  840,  840,  840,  962,  966,  388,  963,
      956, 1004,  967, 1005,  964, 1006, 1008,  651,  650, 1007,
     1022,  965,  638, 1009,  968,  388, 1023,  969,  639, 1032,
     1127,  840,  840,  840,  840,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845, 1012,  846,  845, 1132,  847,  845,  845,
      845,  845,  845,  845,  629,  629,  629,  629,  629, 1013,
      677,  678,  388,  845,  845,  845,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  640,  638,  640,  677,
      678,  482,  641,  639,  639,  642,  642,  642,  642,  642,
     1133,  845,  845,  845,  845,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848, 1240,  849,  848, 1078,  850,  848,  848,
      848,  848,  848,  848,  633,  633,  633,  633,  633,  697,
      698,  634,  388,  848,  848,  848,  644,  644,  644,  644,

      644, 1087,  674,  694, 1088,  636,  675,  695,  645,  662,
      662,  662,  662,  662,  666,  666,  666,  666,  666, 1079,
     1179,  848,  848,  848,  848,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  481,  853,  852,  481,  854,  852,  852,
      852,  852,  852,  852,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  852,  852,  852,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  855,  856,  481,  481,  481,  481,
      481,  852,  852,  852,  852,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857, 1085,  858,  857,  388,  859,  857,  857,
      857,  857,  857,  857,  388,  670,  670,  670,  670,  670,
      388,  671, 1755,  857,  857,  857,  672,  679,  679,  679,
      679,  679,  683,  683,  683,  683,  683,  691,  691,  691,
      691,  691,  724, 1136,  724, 1129, 1086,  725,  388,  692,
     1119,  857,  857,  857,  857,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  723,  862,  861,  388,  863,  861,  861,
      861,  861,  861,  861,  388,  722,  388,  388,  388,  388,

      388, 1124,  388,  861,  861,  861,  388,  388,  722, 1154,
     1100,  801,  811, 1185, 1193,  388, 1249,  388, 1106, 1250,
     1757, 1121, 1256, 1126, 1128, 1257, 1159, 1459, 1122, 1120,
     1125,  861,  861,  861,  861,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864, 1130,  865,  864, 1131,  866,  864,  864,
      864,  864,  864,  864,  388,  388,  388, 1138, 1138, 1138,
     1138, 1138,  388,  864,  864,  864, 1328, 1263, 1759, 1139,
     1264,  761,  761,  761,  761,  761, 1270, 1135,  388, 1271,
     1329, 1277,  388,  762, 1278, 1761, 1137,  388, 1145,  388,

     1134,  864,  864,  864,  864,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868, 1140,  869,  868,  388,  870,  868,  868,
      868,  868,  868,  868,  388,  388, 1155, 1146,  388,  388,
      388,  388,  388,  868,  868,  868,  388,  388, 1147, 1147,
     1147, 1147, 1147,  465,  465,  465,  465,  465, 1143, 1142,
     1148, 1162, 1149, 1150, 1153,  388, 1156, 1163, 1144,  388,
     1165,  868,  868,  868,  868,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872, 1151,  873,  872,  388,  874,  872,  872,

      872,  872,  872,  872, 1152,  388,  388,  388,  388,  388,
      388,  388,  388,  872,  872,  872,  388, 1292, 1160, 1284,
      875, 1297, 1285, 1293, 1298, 1157, 1461,  388, 1161, 1158,
     1462, 1460, 1166, 1181, 1168, 1170,  388, 1164, 1180,  388,
     1172,  872,  872,  872,  872,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883, 1167,  884,  883,  388,  885,  883,  883,
      883,  883,  883,  883, 1169,  892,  898, 1171,  388,  388,
      388,  388,  482,  883,  883,  883,  482,  638, 1463,  904,
     1176,  482,  482,  639,  388,  482,  910,  482,  482,  482,

      482,  482, 1178, 1183, 1234, 1774, 1182, 1238,  482,  893,
      899,  883,  883,  883,  883,  894,  900, 1177, 1184,  895,
      901,  896,  902,  905,  897,  903, 1215, 1212, 1220,  906,
      911, 1219, 1221,  907, 1243,  908,  912, 1222,  909, 1235,
      913, 1225,  914,  918,  482,  915,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  482,  917,  916,  482,  916,  916,
      916,  916,  916,  916,  916,  482,  924,  919,  482,  482,
      482,  482, 1226,  920,  916,  916,  916,  921, 1213,  922,
      935, 1223,  923,  482, 1353,  482,  482,  941, 1040, 1224,

     1464, 1465, 1214, 1227, 1232, 1233, 1247,  482, 1354, 1228,
      925, 1046,  916,  916,  916,  916,  926,  520, 1057, 1063,
      927, 1236,  928, 1775,  936,  929,  482, 1241, 1776, 1242,
      937,  942, 1041, 1239,  938, 1777,  939,  943, 1042,  940,
     1471,  944, 1043,  945, 1044, 1047,  946, 1045, 1245, 1248,
     1237, 1048, 1058, 1064, 1031, 1049, 1394, 1050, 1059, 1065,
     1051, 1254, 1060, 1066, 1061, 1067,  520, 1062, 1068, 1101,
     1102, 1102, 1102, 1102, 1102, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1103, 1101, 1101, 1101, 1101, 1261, 1104, 1101,
     1246, 1105, 1101, 1101, 1101, 1101, 1101, 1101,  383, 1207,

     1207, 1207, 1207, 1207, 1255, 1208, 1449, 1101, 1101, 1101,
     1209, 1210, 1304, 1404, 1268, 1305, 1405, 1275, 1783, 1309,
     1309, 1309, 1309, 1309, 1355, 1282, 1295, 1302, 1784, 1411,
     1262, 1310, 1412, 1356, 1787, 1101, 1101, 1101, 1101, 1107,
     1108, 1108, 1108, 1108, 1108, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1109, 1107, 1107, 1107, 1107, 1269, 1110, 1107,
     1276, 1111, 1107, 1107, 1107, 1107, 1107, 1107, 1283, 1296,
     1303, 1313, 1313, 1313, 1313, 1313, 1402, 1107, 1107, 1107,
     1078,  388,  363, 1314, 1317, 1317, 1317, 1317, 1317, 1320,
     1320, 1320, 1320, 1320, 1409, 1419, 1318, 1421, 1804, 1426,

     1422, 1321, 1085,  388,  367, 1107, 1107, 1107, 1107,  738,
      738,  738,  738,  738, 1428, 1112,  388, 1429, 1455, 1403,
     1113,  739,  388, 1348, 1348, 1348, 1348, 1348,  388,  633,
      633,  633,  633,  633, 1322, 1349,  634, 1410, 1420, 1450,
     1323, 1324, 1427,  388, 1472, 1560,  388, 1325, 1247, 1561,
      524, 1476, 1563, 1564, 1114, 1254,  388,  527, 1473,  729,
     1115, 1116,  388, 1480,  388,  388, 1485, 1117, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1477, 1174, 1173, 1482,
     1175, 1173, 1173, 1173, 1173, 1173, 1173, 1359, 1359, 1359,

     1359, 1359, 1481,  388,  388,  388, 1173, 1173, 1173, 1360,
     1474, 1474, 1474, 1474, 1474, 1464, 1465, 1138, 1138, 1138,
     1138, 1138, 1475, 1499, 1261, 1493,  533, 1484, 1487, 1139,
     1512,  388,  388,  729, 1173, 1173, 1173, 1173, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204,  481, 1205, 1204,  481,
     1206, 1204, 1204, 1204, 1204, 1204, 1204,  481,  481,  481,
      481,  481,  481,  481,  481,  481, 1204, 1204, 1204,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481, 1204, 1204, 1204, 1204, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216,  388, 1217, 1216,  388,
     1218, 1216, 1216, 1216, 1216, 1216, 1216, 1451, 1451, 1451,
     1451, 1451,  388,  388,  388,  388, 1216, 1216, 1216, 1452,
     1456, 1456, 1456, 1456, 1456,  738, 1268, 1486,  536, 1275,
      388,  543, 1457, 1778, 1282, 1483,  546, 1295, 1522,  559,
      388, 1519, 1510, 1513, 1216, 1216, 1216, 1216, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1488, 1230, 1229, 1453,

     1231, 1229, 1229, 1229, 1229, 1229, 1229, 1478, 1478, 1478,
     1478, 1478, 1458, 1489,  388,  388, 1229, 1229, 1229, 1479,
     1810,  388, 1506, 1506, 1506, 1506, 1506,  388,  388, 1514,
     1514, 1514, 1514, 1514, 1507, 1461, 1302,  388,  563, 1462,
      388, 1515, 1812,  388, 1229, 1229, 1229, 1229,  388,  388,
      388, 1523, 1490, 1491, 1492, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1500, 1496, 1495, 1501, 1497, 1495, 1495,
     1495, 1495, 1495, 1495,  388, 1511,  388, 1505, 1147, 1147,
     1147, 1147, 1147, 1495, 1495, 1495, 1508,  388, 1817,  482,

     1148,  465,  465,  465,  465,  465, 1402,  388,  673,  388,
     1409, 1419,  676,  693,  388,  729,  388, 1526, 1520, 1586,
     1517, 1495, 1495, 1495, 1495, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1518, 1503, 1502, 1521, 1504, 1502, 1502,
     1502, 1502, 1502, 1502, 1524,  388,  388,  388,  388,  388,
      388,  388,  388, 1502, 1502, 1502,  482, 1534, 1534, 1534,
     1534, 1534, 1426, 1835,  696, 1851,  388,  761,  388, 1535,
     1779, 1531, 1533, 1541, 1543, 1805, 1525, 1530,  388, 1544,
     1574, 1502, 1502, 1502, 1502, 1527, 1527, 1527, 1527, 1527,

     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1539, 1528, 1527,  388, 1529, 1527, 1527,
     1527, 1527, 1527, 1527, 1536, 1536, 1536, 1536, 1536,  388,
      388,  482,  388, 1527, 1527, 1527, 1537,  388, 1207, 1207,
     1207, 1207, 1207,  482, 1208,  388,  482,  482,  482, 1209,
     1210,  482,  482, 1540, 1588, 1588, 1588, 1588, 1588, 1567,
      388, 1527, 1527, 1527, 1527, 1542, 1589, 1552, 1553,  729,
     1545, 1576,  482,  439, 1575,  482,  482, 1857,  729, 1858,
     1581,  454, 1814, 1859, 1582, 1832, 1559, 1587, 1592, 1538,
     1546, 1547, 1547, 1547, 1547, 1547, 1546, 1546, 1546, 1546,

     1546, 1546, 1546, 1548, 1546, 1546, 1546, 1546, 1594, 1549,
     1546,  482, 1550, 1546, 1546, 1546, 1546, 1546, 1546, 1580,
     1590, 1590, 1590, 1590, 1590,  482,  482,  520, 1546, 1546,
     1546, 1562, 1591,  388, 1566, 1593, 1309, 1309, 1309, 1309,
     1309,  482, 1560,  482,  482, 1551, 1561,  482, 1310, 1875,
     1605, 1606,  482, 1808,  388, 1597, 1546, 1546, 1546, 1546,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1596, 1569,
     1568, 1595, 1570, 1568, 1568, 1568, 1568, 1568, 1568, 1571,
     1571, 1571, 1571, 1571,  520, 1802,  388,  388, 1568, 1568,

     1568, 1572, 1598, 1598, 1598, 1598, 1598, 1563, 1564, 1880,
      482,  482,  482,  482, 1599,  633,  633,  633,  633,  633,
      482, 1780,  634,  482, 1791, 1607, 1568, 1568, 1568, 1568,
     1573, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1603,
     1578, 1577, 1604, 1579, 1577, 1577, 1577, 1577, 1577, 1577,
     1648, 1648, 1648, 1648, 1648,  388,  388,  388,  388, 1577,
     1577, 1577, 1649, 1652, 1652, 1652, 1652, 1652, 1665, 1665,
     1665, 1665, 1665,  482,  524, 1653, 1207,  388, 1251, 1789,
     1666, 1794, 1796,  388, 1872, 1251, 1799, 1577, 1577, 1577,

     1577, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1785,
     1584, 1583, 1650, 1585, 1583, 1583, 1583, 1583, 1583, 1583,
     1478, 1478, 1478, 1478, 1478, 1654, 1815,  388,  388, 1583,
     1583, 1583, 1479,  388,  388, 1251,  527, 1258, 1667, 1667,
     1667, 1667, 1667, 1348, 1348, 1348, 1348, 1348, 1258, 1827,
     1668, 1686, 1816, 1258, 1828, 1349, 1823, 1583, 1583, 1583,
     1583, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1669,
     1601, 1600,  388, 1602, 1600, 1600, 1600, 1600, 1600, 1600,

     1320, 1320, 1320, 1320, 1320,  388,  388,  533,  388, 1600,
     1600, 1600, 1321, 1506, 1506, 1506, 1506, 1506, 1359, 1359,
     1359, 1359, 1359, 1762,  388, 1507, 1695,  388, 1788,  388,
     1360, 1725, 1725, 1725, 1725, 1725,  388, 1600, 1600, 1600,
     1600, 1792,  388, 1726, 1758, 1322, 1806,  388,  388,  388,
      388, 1323, 1324,  388, 1265,  388, 1790, 1763, 1325, 1793,
      388, 1795,  482, 1764, 1265, 1265,  536, 1765, 1272, 1766,
     1272, 1272, 1767, 1819, 1807, 1842, 1696, 1822, 1825, 1813,
     1833,  543, 1841, 1873, 1818, 1727, 1752, 1752, 1752, 1752,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,

     1752, 1752, 1752, 1752,  387, 1753, 1752,  387, 1754, 1752,
     1752, 1752, 1752, 1752, 1752,  387,  387,  387,  387,  387,
      387,  387,  387,  387, 1752, 1752, 1752,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387, 1752, 1752, 1752, 1752, 1451, 1451, 1451, 1451,
     1451, 1456, 1456, 1456, 1456, 1456, 1768,  388, 1452,  388,
      388,  388,  388, 1457,  388, 1474, 1474, 1474, 1474, 1474,
     1478, 1478, 1478, 1478, 1478,  388, 1279, 1475, 1786,  388,
      482,  388, 1479, 1797, 1797, 1797, 1797, 1797, 1826,  482,

     1769,  482,  482, 1820, 1279, 1798, 1770, 1821, 1824, 1840,
     1771, 1839, 1772, 1844,  388, 1773,  482,  482, 1453,  482,
     1876, 1893, 1877, 1458, 1781, 1800, 1800, 1800, 1800, 1800,
     1852, 1279, 1856, 1782, 1879,  482,  388, 1801, 1506, 1506,
     1506, 1506, 1506, 1878,  482,  520,  388,  482, 1882, 1883,
     1507, 1514, 1514, 1514, 1514, 1514, 1534, 1534, 1534, 1534,
     1534,  482,  546, 1515, 1834, 1286, 1286, 1891, 1535, 1536,
     1536, 1536, 1536, 1536, 1843, 1286, 1905, 1903, 1906, 1907,
     1908, 1537, 1881, 1909, 1884,  482, 1892, 1809, 1829, 1829,
     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,

     1829, 1829, 1829, 1829, 1829, 1829,  482, 1830, 1829, 1910,
     1831, 1829, 1829, 1829, 1829, 1829, 1829, 1588, 1588, 1588,
     1588, 1588, 1890,  559, 1299,  520, 1829, 1829, 1829, 1589,
     1894, 1299, 1299,  563, 1538, 1571, 1571, 1571, 1571, 1571,
     1885, 1885, 1885, 1885, 1885, 1904, 1306, 1572, 1306, 1306,
     1912, 1651, 1886, 1887, 1829, 1829, 1829, 1829, 1836, 1836,
     1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836,
     1836, 1836, 1836, 1836, 1836, 1836, 1874, 1837, 1836, 1913,
     1838, 1836, 1836, 1836, 1836, 1836, 1836, 1845, 1845, 1845,
     1845, 1845, 1915, 1655, 1860, 1866, 1836, 1836, 1836, 1846,

     1590, 1590, 1590, 1590, 1590, 1598, 1598, 1598, 1598, 1598,
     1916, 1918, 1591, 1919, 1920, 1921, 1922, 1599, 1923, 1662,
     1925, 1930, 1320, 1932, 1836, 1836, 1836, 1836, 1861, 1867,
     1924, 1847, 1933, 1936, 1862, 1868, 1937, 1938, 1863, 1869,
     1864, 1870, 1939, 1865, 1871, 1848, 1849, 1940, 1941, 1850,
     1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853,
     1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853, 1942, 1854,
     1853, 1943, 1855, 1853, 1853, 1853, 1853, 1853, 1853, 1888,
     1888, 1888, 1888, 1888, 1946, 1947, 1948, 1949, 1853, 1853,
     1853, 1889, 1895, 1895, 1895, 1895, 1895, 1951, 1952, 1953,

      482, 1954, 1955, 1956, 1896, 1957, 1959, 1960, 1961, 1962,
     1963, 1964, 1967,  482, 1968, 1969, 1853, 1853, 1853, 1853,
     1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897,
     1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1970, 1898,
     1897, 1971, 1899, 1897, 1897, 1897, 1897, 1897, 1897, 1648,
     1648, 1648, 1648, 1648, 1972, 1973, 1974, 1976, 1897, 1897,
     1897, 1649, 1652, 1652, 1652, 1652, 1652, 1667, 1667, 1667,
     1667, 1667, 1977, 1983, 1653, 1984, 1986, 1993, 1994, 1668,
      654,  673, 1406, 1406, 1406,  676, 1897, 1897, 1897, 1897,
     1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900,

     1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1931, 1901,
     1900, 1650, 1902, 1900, 1900, 1900, 1900, 1900, 1900, 1926,
     1926, 1926, 1926, 1926, 1654, 1413, 1413, 1413, 1900, 1900,
     1900, 1927, 1934, 1934, 1934, 1934, 1934, 1944, 1944, 1944,
     1944, 1944, 1996,  693, 1935, 1423, 1423, 1423,  696, 1945,
     1800, 1800, 1800, 1800, 1800, 1430, 1900, 1900, 1900, 1900,
     1430, 1430, 1801, 1965, 1965, 1965, 1965, 1965, 1928, 1980,
     1980, 1980, 1980, 1980, 1998, 1966, 1999, 1929, 2000,  388,
      729, 1981, 1987, 1987, 1987, 1987, 1987, 2001, 1757, 1451,
      388, 2004, 1761, 1456, 1988, 2006, 2008, 2002, 2010, 2009,

     2010, 2005, 2011, 2012, 2013, 2015, 2017, 2017, 2016, 2018,
     2019, 2021, 2022, 2023, 1778,  388, 2028, 2029, 2031, 2035,
      729,  388, 2048, 2003, 2051,  388, 1989, 2032,  388, 1804,
     2037, 2037, 2037, 2037, 2037,  388, 1805, 2059, 2007, 2061,
     1990, 1991, 2038,  388, 1992, 2036,  388, 2014, 2039,  388,
     1812,  388, 2041,  388, 2024, 2025, 2025, 2025, 2025, 2025,
     2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025,
     2025, 2025, 2025, 2033, 2026, 2025,  388, 2027, 2025, 2025,
     2025, 2025, 2025, 2025, 2040, 2043, 2049, 2044, 2045, 2045,
     2045, 2045, 2045, 2025, 2025, 2025, 2072,  388, 2042, 1138,

     2046, 2078, 1797, 1797, 1797, 1797, 1797, 2053,  388,  388,
     2047,  388,  388,  729, 1798, 1800, 1800, 1800, 1800, 1800,
      388, 2025, 2025, 2025, 2025, 2052,  388, 1801, 2054, 2054,
     2054, 2054, 2054, 2056, 2056, 2056, 2056, 2056, 2058, 1147,
     2055,  388, 2091, 2076,  388, 2057, 2066, 2062, 2083,  388,
      729, 1851, 2088,  388,  388,  388,  388, 2104, 2102, 2105,
     2106, 2077, 2103, 2108, 2050, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 2063, 2082, 2064, 2063, 2084, 2065, 2063, 2063,
     2063, 2063, 2063, 2063, 2070, 2070, 2070, 2070, 2070,  388,

      388,  388,  388, 2063, 2063, 2063, 2071, 2085, 2085, 2085,
     2085, 2085,  729, 2112, 2113,  388, 2114,  388, 2117, 2086,
     2119, 2118, 2089, 2087, 2119, 2120,  388,  388,  388, 2092,
     2121, 2063, 2063, 2063, 2063, 2067, 2067, 2067, 2067, 2067,
     2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067,
     2067, 2067, 2067, 2093, 2068, 2067,  388, 2069, 2067, 2067,
     2067, 2067, 2067, 2067, 2095, 2109, 2110, 2110, 2110, 2110,
     2110, 2126, 2126, 2067, 2067, 2067, 2094, 2127, 2111, 1845,
     1845, 1845, 1845, 1845, 2128, 2124, 1872,  388, 2125, 2130,
     2132, 1846, 2115, 2122, 2144,  482,  482, 2146, 2156,  482,

      482, 2067, 2067, 2067, 2067, 2073, 2073, 2073, 2073, 2073,
     2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073,
     2073, 2073, 2073, 1847, 2074, 2073, 2133, 2075, 2073, 2073,
     2073, 2073, 2073, 2073, 2129, 2116, 2123, 1848, 1849,  482,
      482, 1850, 2159, 2073, 2073, 2073,  482, 2160, 1885, 1885,
     1885, 1885, 1885, 2152, 2158,  482, 2161,  482,  520, 2141,
     1886, 1887, 2142, 2162,  482, 2163,  482, 2164,  482,  482,
     2143, 2073, 2073, 2073, 2073, 2079, 2079, 2079, 2079, 2079,
     2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
     2079, 2079, 2079, 2134, 2080, 2079, 2135, 2081, 2079, 2079,

     2079, 2079, 2079, 2079, 2136, 2137, 2147,  482, 2153, 2153,
     2153, 2153, 2153, 2079, 2079, 2079, 1912, 2166, 1309, 1915,
     2154, 1888, 1888, 1888, 1888, 1888, 2165, 2168,  520,  482,
     1648, 1918, 1652, 1889, 2170, 2151, 2172, 2173, 2167, 2174,
     2169, 2079, 2079, 2079, 2079, 2096, 2096, 2096, 2096, 2096,
     2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096,
     2096, 2096, 2096, 2145, 2097, 2096, 2157, 2098, 2096, 2096,
     2096, 2096, 2096, 2096, 1924, 1930, 2175, 2176, 2178, 2179,
     2181, 2182, 2183, 2096, 2096, 2096, 2184, 1926, 1926, 1926,
     1926, 1926, 1895, 1895, 1895, 1895, 1895, 2185, 2186, 1927,

     2187, 2188, 2189, 2192, 1896, 2195, 2197, 1951, 2199, 2200,
     2201, 2096, 2096, 2096, 2096, 2099, 2099, 2099, 2099, 2099,
     2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099,
     2099, 2099, 2099, 2155, 2100, 2099, 1928, 2101, 2099, 2099,
     2099, 2099, 2099, 2099, 1348, 1929, 1934, 1934, 1934, 1934,
     1934, 2202, 2198, 2099, 2099, 2099, 2203, 1959, 1935, 2037,
     2037, 2037, 2037, 2037, 2193, 2193, 2193, 2193, 2193, 1359,
     2206, 2038, 2207, 2210, 2211, 2213, 2194, 2204, 2214, 2215,
     2217, 2099, 2099, 2099, 2099, 2138, 2138, 2138, 2138, 2138,
     2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,

     2138, 2138, 2138, 2218, 2139, 2138, 2222, 2140, 2138, 2138,
     2138, 2138, 2138, 2138, 2056, 2056, 2056, 2056, 2056, 2223,
     1993, 2228, 2229, 2138, 2138, 2138, 2057, 2230, 2232, 2233,
     2234, 1965, 1965, 1965, 1965, 1965, 2235, 1944, 1944, 1944,
     1944, 1944, 2226, 1966, 2237, 2238, 2227, 2002, 2240, 1945,
      388, 2138, 2138, 2138, 2138, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148, 2148,
     2148, 2148, 2148, 2209, 2149, 2148, 2005, 2150, 2148, 2148,
     2148, 2148, 2148, 2148, 2190, 2006, 2239, 1460, 2191, 2010,
     2242, 1460, 2243, 2148, 2148, 2148, 2085, 2085, 2085, 2085,

     2085, 2219, 2219, 2219, 2219, 2219, 2244, 2013, 2086, 1463,
     2017, 2246, 1463, 2220, 1980, 1980, 1980, 1980, 1980, 2247,
     2248, 2148, 2148, 2148, 2148, 2249, 1981, 1987, 1987, 1987,
     1987, 1987, 2251,  388,  388,  729, 2253, 2254, 2031, 1988,
     1474, 2256, 2256, 2256, 2256, 2256, 2035, 2263, 2255, 1478,
      388,  388,  388, 2257,  388, 2221, 2273, 2259, 2275, 2279,
     2281, 2053,  388, 2260, 2260, 2260, 2260, 2260,  388, 2285,
     2264, 1989, 2252, 2287, 2289, 2261, 2037, 2037, 2037, 2037,
     2037,  388, 2265, 2266,  388, 1990, 1991,  388, 2038, 1992,
     2268, 2061, 2267, 2269, 2269, 2269, 2269, 2269, 2045, 2045,

     2045, 2045, 2045, 2062, 1506, 2270, 2258,  388,  729,  388,
     2046, 2288, 2290, 2282,  388,  388,  729, 2293, 2294,  388,
      729,  388,  388,  729,  729,  388, 2303,  388,  388, 2262,
     2298, 2091,  388,  729,  388,  729, 2054, 2054, 2054, 2054,
     2054, 2272, 2056, 2056, 2056, 2056, 2056, 2306, 2055, 2314,
     2315, 2307, 2291, 2318, 2057, 2297, 2300, 2299, 2271, 2276,
     2276, 2276, 2276, 2276, 2276, 2276, 2276, 2276, 2276, 2276,
     2276, 2276, 2276, 2276, 2276, 2276, 2276,  388, 2277, 2276,
     2319, 2278, 2276, 2276, 2276, 2276, 2276, 2276, 2283, 2070,
     2070, 2070, 2070, 2070, 2284, 2286,  388, 2276, 2276, 2276,

      388, 2071, 2295, 2295, 2295, 2295, 2295, 1534,  388, 2301,
     2085, 2085, 2085, 2085, 2085, 2309,  388, 2304, 2304, 2304,
     2304, 2304, 2086,  388, 2308, 2276, 2276, 2276, 2276, 2305,
      388, 2316, 2311, 2108, 2310, 1845, 2324, 2326,  388, 2327,
     2317, 2119, 2292, 2320, 2321, 2321, 2321, 2321, 2321, 2115,
     2329, 1559, 1559, 2312, 2313, 2330, 2322, 2110, 2110, 2110,
     2110, 2110, 2331, 2302, 2122,  388, 1562, 2296, 2126, 2111,
     2333, 1562, 2334, 2335,  482, 2132, 1571,  482, 2340, 2340,
     2340, 2340, 2340,  482, 2338, 2343, 2343, 2343, 2343, 2343,
     2341,  482,  482,  482,  482,  482, 2350, 2344, 2351,  482,

     2353, 2339,  482,  482,  482,  482,  482, 2359, 2360, 2362,
     2369, 2370, 2336, 2371, 2372, 2345, 2348, 2165, 2323, 2347,
     2373, 2342, 2167, 2346, 2374, 2356, 2169, 2375, 2355, 2357,
     2354, 2153, 2153, 2153, 2153, 2153, 2363, 2363, 2363, 2363,
     2363, 2376, 2378, 2154, 2379, 2380, 2178, 1926, 2364, 3629,
     3629, 3629, 3629, 3629, 2181, 2381, 2384,  520, 2385, 1667,
     2389, 3629, 2366, 2366, 2366, 2366, 2366, 2383, 2390, 2391,
      520, 2392, 2393, 2394, 2367, 2386, 2386, 2386, 2386, 2386,
     2396, 2398, 2400, 2198, 2401, 2358, 2402, 2387, 2193, 2193,
     2193, 2193, 2193, 2403, 2365, 2404, 2405, 2204, 2406, 2407,

     2194, 2408, 2410, 2411, 2412, 2413, 2304, 2304, 2304, 2304,
     2304, 2414, 2415, 2219, 2219, 2219, 2219, 2219, 2305, 2417,
     2418, 2420, 2421, 2422, 2423, 2220, 2424, 2426, 2427, 2232,
     1987, 2397, 2431, 2432, 2433, 2425, 2434, 1460, 2428, 2429,
     2429, 2429, 2429, 2429, 2435, 2010, 2010, 2010, 2436, 1463,
     2017, 2430, 2017, 2017,  388, 2441, 2442, 2255, 2256, 2256,
     2256, 2256, 2256, 2259, 2452, 2453, 2455, 2416,  388,  388,
     2257,  388, 2462, 2462, 2462, 2462, 2462, 2466, 2440, 2467,
     2269, 2269, 2269, 2269, 2269, 2469, 2275, 1797,  388, 2463,
      729, 2457, 2270,  388, 2471, 2470, 2281, 1800, 2474, 2475,

     2456, 2477, 2478,  388, 2480, 2472, 2484, 2290,  388, 2458,
     2486, 2488, 2489,  388, 2295, 2295, 2295, 2295, 2295,  388,
      388,  388, 2494, 2258, 2260, 2260, 2260, 2260, 2260, 2473,
     2496, 2499, 2485,  388,  388, 2309, 2261, 2464,  388,  388,
     2490,  388, 2512, 2513, 2514, 2271, 2491, 2515, 2516, 2517,
     2320, 2492, 2523, 2524, 2526, 2527, 2528, 1559, 2493, 2119,
     2506, 2119, 2507, 2119, 2501, 2508, 2443, 2444, 2445, 1562,
     2446, 2500, 2126, 2126, 2126, 2338, 2350, 2447, 2448, 2296,
      482, 2449,  482,  482, 2450, 2451, 2459, 2459, 2459, 2459,
     2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,

     2459, 2459, 2459, 2459, 2529, 2460, 2459, 2353, 2461, 2459,
     2459, 2459, 2459, 2459, 2459, 2532, 2547, 2533,  482,  482,
     2549, 2539, 2362, 2554, 2459, 2459, 2459, 2509, 2509, 2509,
     2509, 2509, 2304, 2304, 2304, 2304, 2304, 1885, 1888, 2510,
      482, 1895, 2555, 2556, 2305, 2540, 2542, 2557,  388, 2551,
     2543, 2559, 2459, 2459, 2459, 2459, 2481, 2481, 2481, 2481,
     2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481,
     2481, 2481, 2481, 2481,  482, 2482, 2481, 2544, 2483, 2481,
     2481, 2481, 2481, 2481, 2481, 2497, 2530, 2530, 2530, 2530,
     2530,  482, 2511, 2498, 2481, 2481, 2481, 2561, 2531, 2340,

     2340, 2340, 2340, 2340, 2564, 2565, 2381,  482, 2383, 2568,
     2570, 2341, 2545, 2571,  520, 2572, 2573, 2575, 2576, 2396,
     2578, 2546, 2481, 2481, 2481, 2481, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2552, 2503, 2502, 2580, 2504, 2502,
     2502, 2502, 2502, 2502, 2502, 2343, 2343, 2343, 2343, 2343,
     2582, 2585, 2587, 2588, 2502, 2502, 2502, 2344, 2537, 2537,
     2537, 2537, 2537, 1944, 2363, 2363, 2363, 2363, 2363, 2589,
     2538, 2577, 2410, 1965, 2592, 2505, 2364, 2594, 2595,  482,
     2597, 2591, 2502, 2502, 2502, 2502, 2321, 2321, 2321, 2321,

     2321, 2366, 2366, 2366, 2366, 2366, 2598, 2600, 2322, 2420,
     2603, 1980, 2604, 2367, 2566, 2566, 2566, 2566, 2566, 2602,
     2605, 2606, 2607, 2608, 2609, 2428, 2567, 2615, 2625,  729,
     2626, 2386, 2386, 2386, 2386, 2386, 2620, 2627, 2629, 2518,
     2519, 2630, 2633, 2387, 2631, 2632, 2553,  388, 2636, 2634,
     2628, 2635, 2637, 2638, 2520, 2521, 2640, 2641, 2522, 2534,
     2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534,
     2534, 2534, 2534, 2534, 2534, 2534, 2534, 2569, 2535, 2534,
     2619, 2536, 2534, 2534, 2534, 2534, 2534, 2534, 2583, 2583,
     2583, 2583, 2583, 2455,  388, 2656,  388, 2534, 2534, 2534,

     2584, 2621, 2621, 2621, 2621, 2621, 2037, 2657,  729, 2469,
      388, 2470, 2659, 2622, 2642, 3629, 2462, 2462, 2462, 2462,
     2462, 2472, 2623, 2662, 2663, 2534, 2534, 2534, 2534, 2429,
     2429, 2429, 2429, 2429, 2643, 2644, 2644, 2644, 2644, 2644,
     2045, 2430, 2650, 2477, 2665, 2660, 2480, 2645, 2658, 2661,
     2651, 2651, 2651, 2651, 2651, 2054,  388, 2056,  388, 2671,
      729, 2488, 2070, 2664, 2677, 2666, 2624, 3629, 2678, 2681,
     2672, 2653, 2610, 2611, 2496, 2085, 2683, 2684, 2686,  388,
     2700, 2464, 2701, 2682, 2702,  729,  388, 2612, 2613,  388,
     2703, 2614, 3629, 2646, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2679, 2648, 2647, 2654, 2649, 2647, 2647, 2647,
     2647, 2647, 2647,  388,  388,  388, 2706, 2687, 2707, 2708,
     2709, 2710, 2647, 2647, 2647, 2693, 2693, 2693, 2693, 2693,
     2711, 2712, 2714, 2509, 2509, 2509, 2509, 2509, 2688, 2715,
     2680, 2526, 2692, 2721,  481, 2510,  388, 2725, 2540, 2542,
     2647, 2647, 2647, 2647, 2668, 2668, 2668, 2668, 2668, 2668,
     2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668,
     2668, 2668, 2735, 2669, 2668, 2110, 2670, 2668, 2668, 2668,
     2668, 2668, 2668, 2716, 2698, 2704, 2704, 2704, 2704, 2704,

     2694, 2699, 2668, 2668, 2668, 2549, 2551, 2705, 2511,  481,
     2738, 2530, 2530, 2530, 2530, 2530, 2723, 2537, 2537, 2537,
     2537, 2537, 2729, 2531, 2740, 2742, 2743, 2746,  481, 2538,
     2668, 2668, 2668, 2668, 2674, 2674, 2674, 2674, 2674, 2674,
     2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674,
     2674, 2674, 2720, 2675, 2674,  520, 2676, 2674, 2674, 2674,
     2674, 2674, 2674, 2718, 2718, 2718, 2718, 2718, 2747, 2734,
      481, 2724, 2674, 2674, 2674, 2719, 2733,  481, 2153, 2737,
     2749, 2751, 2753, 2754,  482, 2755, 2736, 2757, 2758, 2577,
     2759, 2580, 2761, 2763, 2591, 2770, 2773, 2600, 2602, 2776,

     2674, 2674, 2674, 2674, 2689, 2689, 2689, 2689, 2689, 2689,
     2689, 2689, 2689, 2689, 2689, 2689, 2689, 2689, 2689, 2689,
     2689, 2689, 2777, 2690, 2689, 2193, 2691, 2689, 2689, 2689,
     2689, 2689, 2689, 2760, 2765, 2765, 2765, 2765, 2765, 2219,
     2778, 2781, 2689, 2689, 2689, 2782, 2766, 2774, 2783, 2784,
     2785, 2566, 2566, 2566, 2566, 2566, 2583, 2583, 2583, 2583,
     2583, 2786, 2787, 2567, 2789, 2792, 2794, 2795, 2584, 2796,
     2689, 2689, 2689, 2689, 2695, 2695, 2695, 2695, 2695, 2695,
     2695, 2695, 2695, 2695, 2695, 2695, 2695, 2695, 2695, 2695,
     2695, 2695, 2748, 2696, 2695,  388, 2697, 2695, 2695, 2695,

     2695, 2695, 2695, 3629, 3629, 3629, 3629, 3629, 2797, 2798,
     2762, 2799, 2695, 2695, 2695, 3629, 2779, 2779, 2779, 2779,
     2779, 2800,  729, 2801,  482, 2802, 2803, 2804, 2780, 2793,
     2805, 2790, 2806, 2621, 2621, 2621, 2621, 2621, 2807, 2808,
     2695, 2695, 2695, 2695, 2640, 2622, 2260, 2810, 2642, 2811,
     2814,  388, 2656, 2812, 2809, 2821, 2722, 2726, 2726, 2726,
     2726, 2726, 2726, 2726, 2726, 2726, 2726, 2726, 2726, 2726,
     2726, 2726, 2726, 2726, 2726,  388, 2727, 2726, 2658, 2728,
     2726, 2726, 2726, 2726, 2726, 2726,  729, 2644, 2644, 2644,
     2644, 2644, 2825, 3629, 2826, 2726, 2726, 2726, 2624, 2645,

     2815, 2815, 2815, 2815, 2815, 2664, 2827, 2666, 2817,  388,
     2819,  388, 2816, 2651, 2651, 2651, 2651, 2651, 2820, 2828,
     2672,  388,  388, 2726, 2726, 2726, 2726, 2730, 2730, 2730,
     2730, 2730, 2730, 2730, 2730, 2730, 2730, 2730, 2730, 2730,
     2730, 2730, 2730, 2730, 2730, 2813, 2731, 2730, 2823, 2732,
     2730, 2730, 2730, 2730, 2730, 2730, 2651, 2651, 2651, 2651,
     2651,  729,  729,  729,  388, 2730, 2730, 2730, 2824, 3629,
     3629, 2831,  729, 2833,  388,  388, 2682, 2653, 2654, 2830,
     2834, 2835, 2686, 2304,  388,  388,  388,  388, 2841, 2842,
      729, 2836,  729, 2730, 2730, 2730, 2730, 3629, 2843, 3629,

     2845, 2829, 2832, 2839, 2839, 2839, 2839, 2839, 2693, 2693,
     2693, 2693, 2693, 2846, 2847, 2840, 2838, 2848, 2850, 2851,
     2837, 2654, 2852, 2853,  388, 2704, 2704, 2704, 2704, 2704,
     2854, 2855, 2857, 2858, 2714, 2321, 2860, 2705, 2716, 2861,
     2856, 2863,  482, 2859, 2718, 2718, 2718, 2718, 2718, 2866,
      482, 2868,  482, 2869,  482,  482, 2719,  482,  482, 2872,
     2736,  520, 2874, 2740, 2366, 2877, 2878, 2879, 2880, 2882,
     2883, 2753, 2875, 2694, 2865, 2864, 2386, 2888, 2886, 2886,
     2886, 2886, 2886, 2889, 2884, 2890, 2760, 2849, 2892, 2871,
     2887, 2870, 2873, 2894, 2765, 2765, 2765, 2765, 2765, 2896,

     2897, 2898, 2895, 2774, 2899, 2900, 2766, 2901, 2779, 2779,
     2779, 2779, 2779, 2903, 2904, 2905, 2906, 2907, 2908, 2910,
     2780, 2911, 2789, 2429, 2913, 2919, 2920, 2909,  388, 2921,
     2922, 2912, 2914, 2914, 2914, 2914, 2914, 2923, 2924, 2925,
     2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2809,
     2936,  388,  729, 2916, 2939, 2941, 2943,  388, 2820, 2938,
     2815, 2815, 2815, 2815, 2815, 2651, 2651, 2651, 2651, 2651,
     2902, 2947, 2816, 2819, 2819, 2819, 2819, 2819,  388, 2949,
     2944, 2950, 2952, 2953, 2937, 2946,  388,  388,  388, 2958,
     2959, 2836,  388,  388, 2962, 2963, 2964, 2917, 2839, 2839,

     2839, 2839, 2839, 2845, 2965, 2967, 2948, 2968, 2969, 2942,
     2840, 2970, 2966, 2972, 2954, 2955, 2973, 2961, 2974, 2975,
     2960, 2976, 2956, 2977, 2978, 2979, 2980, 2859, 2981, 2863,
     2654, 2530,  482,  482, 2868, 2537,  482,  482,  482, 2983,
     2991, 2993, 2875, 2987,  520, 2995, 2996, 2882, 2566, 2999,
     2884, 3002, 3003, 3005, 2894, 2984, 2998, 3009, 3010, 2583,
     3011, 2990, 3012, 3013, 2988, 2985, 2989, 3007, 2992, 2886,
     2886, 2886, 2886, 2886, 3014, 3015, 3017, 3018, 3019, 3020,
     3021, 2887, 3022, 3023, 3024, 3025, 2912,  388, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2919, 3028,

     3030, 3031, 3032, 3033, 3034, 3035, 3036, 3029, 3037, 3038,
     3039, 3040, 3041, 3042, 2916, 3043, 3044, 3047, 3000,  388,
     2941, 2644, 3049, 3051, 3026,  388, 2466, 3001, 3053, 3048,
     2651, 2651, 2651, 2651, 2651,  388, 3055, 3056, 3058,  388,
      388, 3065,  388,  388, 2962, 3068, 2966, 3071, 3072, 3052,
     3073, 2972, 3075, 2917, 2704, 3046, 3054, 3076, 2917, 3077,
     3059, 3078, 3074, 3066, 3069, 3069, 3069, 3069, 3069, 3079,
     3082, 3083, 3060, 3084, 2983, 3067, 3070, 3629, 3093, 2965,
     2965, 2965, 2965, 2965, 3094, 2987, 3095, 3096, 3097, 3098,
      482, 2510, 3100, 3101,  482, 2654, 3061, 3061, 3061, 3061,

     3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061,
     3061, 3061, 3061, 3061, 3085, 3062, 3061,  482, 3063, 3061,
     3061, 3061, 3061, 3061, 3061,  482, 3087,  482,  520, 3102,
     2698, 3009, 3109, 3110, 3061, 3061, 3061, 2699, 3080, 3080,
     3080, 3080, 3080, 3629, 3629, 2765, 3111, 3086, 3088, 3089,
     3081, 2998, 3007, 3103, 3090, 3090, 3090, 3090, 3090, 3017,
     3092, 3113, 3061, 3061, 3061, 3061, 3091, 3105, 3105, 3105,
     3105, 3105, 3107, 3107, 3107, 3107, 3107, 2779, 3114, 3106,
     3115, 3116, 3117, 3120, 3108, 3112, 3118, 3118, 3118, 3118,
     3118, 3121,  388, 2914, 2914, 2914, 2914, 2914, 3119, 3028,

     3028, 3028, 3028, 3028, 3629, 3125, 3126, 3127, 3128, 3129,
     3130, 3124, 3029, 3131, 3132, 3133, 3122, 3134, 3135, 3136,
     3137, 3138, 3139, 3140, 3141, 3629, 3142,  388, 3051, 2815,
     3146,  388, 3150, 3048,  388,  388,  388, 3143, 3144, 3144,
     3144, 3144, 3144,  729, 3153, 3153, 3153, 3153, 3153,  388,
     3145,  388, 3157, 3159, 3160, 3162, 3154, 3163, 2917,  388,
     3164, 3147, 3629, 3165, 3151, 3069, 3069, 3069, 3069, 3069,
     3074, 3166, 3152, 3167, 3169, 3170, 3171, 3070, 3080, 3080,
     3080, 3080, 3080, 3172,  482,  482,  482, 3180, 3155, 3156,
     3081, 3173, 3173, 3173, 3173, 3173,  482, 3090, 3090, 3090,

     3090, 3090, 3182, 3174,  520, 3183, 3184, 3185, 3175, 3091,
     3186, 3187,  482, 3100, 3189, 3190, 2886, 3192, 3629, 3194,
     3195, 3197, 3176, 3158, 3188, 3177, 3103, 3629, 3198, 3105,
     3105, 3105, 3105, 3105, 3178, 3112, 3199, 3200, 3201, 3179,
     3168, 3106, 3181, 3107, 3107, 3107, 3107, 3107, 3202, 3118,
     3118, 3118, 3118, 3118, 3204, 3108, 3205, 3206,  388, 2792,
     3208, 3119, 2914, 2914, 2914, 2914, 2914, 3210, 3211, 3212,
     3213, 3191, 3214, 3215, 3216, 3217, 3220, 3218, 3218, 3218,
     3218, 3218, 3221, 3222, 3223,  388, 3225, 3226, 3207, 3219,
     3629, 3144, 3144, 3144, 3144, 3144,  388, 3229, 3143,  388,

      388, 3193, 3233, 3145, 3153, 3153, 3153, 3153, 3153,  388,
     2962, 3203, 3237, 3239, 3240, 3241, 3154, 3235, 3235, 3235,
     3235, 3235, 3224, 3244, 3228, 3245, 3246, 2917, 3230, 3236,
     3247, 3249, 3250, 3251,  482, 3259,  482, 3231,  388, 3173,
     3173, 3173, 3173, 3173, 3261, 3264, 3265, 3234, 3267, 3268,
     3269, 3174, 3253, 3253, 3253, 3253, 3253, 3272, 3232, 3257,
     3257, 3257, 3257, 3257, 3254, 3262, 3262, 3262, 3262, 3262,
     3629, 3258, 3255,  482, 3256, 3274, 3275, 3263, 3188, 3277,
      482, 3278, 3279, 3282, 3283, 3284,  520, 3285, 3287, 3288,
     3289,  388, 3291, 3292, 3293, 3294, 3295, 3296, 3296, 3296,

     3296, 3296, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3297,
     3218, 3218, 3218, 3218, 3218, 3305, 3290,  388, 3307, 3308,
      388, 3310, 3219,  388,  388, 3313, 3315,  388, 3235, 3235,
     3235, 3235, 3235, 3317, 3239, 3069, 3322, 3323, 3324, 3249,
     3236, 3306, 3080, 3318, 3326, 3327,  482,  482, 3261, 3090,
     3325, 3316, 3309, 3336, 3337, 3311, 3338, 3334, 3339, 3274,
     3312, 3253, 3253, 3253, 3253, 3253, 3328, 3328, 3328, 3328,
     3328, 3332, 3105, 3254, 3342, 3277, 3347, 3348, 3329, 3330,
     3341, 3349, 3331, 3257, 3257, 3257, 3257, 3257, 3262, 3262,
     3262, 3262, 3262, 3107, 3287, 3258, 3118, 3351, 3352, 3353,

     3263, 3343, 3356, 3357, 3350, 3358, 3296, 3296, 3296, 3296,
     3296, 3363, 3365, 3365, 3365, 3365, 3365, 3367, 3297, 3369,
     3372, 3378, 3379,  388, 3366, 3370, 3370, 3370, 3370, 3370,
     3373, 3373, 3373, 3373, 3373,  388,  388, 3371,  388, 3315,
     3153, 3389, 3374, 3375, 3375, 3375, 3375, 3375, 3386, 3359,
     3629, 3360, 3361, 3377, 3390, 3376, 3392, 3393, 3318, 3394,
     3362, 3380, 3382, 3384, 3384, 3384, 3384, 3384, 3387, 3387,
     3387, 3387, 3387, 3629, 3395, 3385,  482, 3383, 3401, 3629,
     3388, 3325, 3328, 3328, 3328, 3328, 3328, 3334, 3402,  388,
     3403, 3404, 3406, 3629, 3329, 3330, 3397, 3397, 3397, 3397,

     3397, 3341, 3629, 3629, 3407, 3408,  729, 3410, 3398, 3411,
     3343, 3350, 3412, 3409, 3413, 3396, 3414,  482, 3415, 3416,
     3418, 3365, 3365, 3365, 3365, 3365, 3419, 3420, 3420, 3420,
     3420, 3420, 3369, 3366, 3218, 3423, 3424, 3426, 3428, 3421,
     3430,  388, 3422, 3370, 3370, 3370, 3370, 3370, 3373, 3373,
     3373, 3373, 3373, 3431, 3432, 3371, 3433,  388, 3436, 3629,
     3374, 3375, 3375, 3375, 3375, 3375, 3429, 3386, 3439, 3427,
     3440, 3444, 3446, 3376, 3384, 3384, 3384, 3384, 3384, 3434,
     3387, 3387, 3387, 3387, 3387,  482, 3385, 3437, 3437, 3437,
     3437, 3437, 3388, 3447, 3425, 3450, 3451, 3454, 3455, 3438,

     3397, 3397, 3397, 3397, 3397, 3456, 3457, 3445, 3458, 3459,
     3460, 3418, 3398, 3448, 3448, 3448, 3448, 3448, 3296, 3463,
     3420, 3420, 3420, 3420, 3420, 3449, 3461, 3435, 3464, 3629,
     3466, 3467, 3421, 3468, 3470, 3472, 3473, 3422, 3474, 3475,
      729,  729,  388, 3479, 3481, 3483, 3444, 3476, 3477, 3437,
     3437, 3437, 3437, 3437, 3328,  482, 3488, 3489, 3491, 3494,
     3495, 3438, 3486, 3448, 3448, 3448, 3448, 3448, 3496, 3497,
     3498, 3499, 3500, 3629, 3463, 3449, 3365, 3503, 3466, 3370,
     3478, 3461, 3505, 3506, 3501, 3470, 3373, 3504, 3472, 3375,
     3511,  729,  388, 3487, 3507, 3513, 3481, 3508, 3509, 3384,

     3515, 3517, 3629,  482, 3519, 3520, 3521, 3514, 3523, 3524,
     3486, 3482, 3525, 3525, 3525, 3525, 3525, 3527, 3528, 3529,
     3512, 3530, 3531, 3503, 3526, 3490, 3629, 3420, 3629, 3535,
     3536, 3518,  388, 3538, 3501, 3532, 3504, 3533, 3533, 3533,
     3533, 3533, 3629, 3629, 3629, 3539, 3517, 3437,  482, 3534,
     3507, 3508, 3514, 3542, 3544, 3540, 3523, 3546, 3448, 3525,
     3525, 3525, 3525, 3525, 3547, 3537, 3545, 3548, 3549, 3550,
     3551, 3526, 3552, 3552, 3552, 3552, 3552, 3629, 3554, 3555,
     3556, 3541,  388, 3559, 3553, 3532, 3533, 3533, 3533, 3533,
     3533, 3629,  482, 3561, 3562, 3629, 3566, 3567, 3534, 3540,

     3568, 3569, 3570, 3545, 3563, 3563, 3563, 3563, 3563, 3552,
     3552, 3552, 3552, 3552, 3557, 3571, 3564, 3573, 3574, 3578,
     3582, 3553, 3583, 3566, 3560, 3576, 3576, 3576, 3576, 3576,
     3579, 3579, 3579, 3579, 3579, 3525, 3587, 3577, 3590, 3592,
     3573, 3533, 3580, 3584, 3594, 3598,  388, 3599, 3600, 3593,
     3601,  482, 3563, 3563, 3563, 3563, 3563, 3585, 3585, 3585,
     3585, 3585, 3592, 3605, 3564, 3598, 3608, 3612, 3613, 3586,
     3588, 3588, 3588, 3588, 3588, 3576, 3576, 3576, 3576, 3576,
     3608, 3617, 3589, 3612, 3620, 3629, 3621, 3577, 3579, 3579,
     3579, 3579, 3579, 3584, 3585, 3585, 3585, 3585, 3585, 3623,

     3580, 3588, 3588, 3588, 3588, 3588, 3586, 3602, 3602, 3602,
     3602, 3602, 3552, 3589, 3629, 3563, 3620, 3626, 3623, 3603,
     3604, 3626, 3593, 3606, 3609, 3609, 3609, 3609, 3609, 3602,
     3602, 3602, 3602, 3602, 3629,  696, 3610, 1745, 1430, 1743,
     3629, 3603, 3604, 3614, 3614, 3614, 3614, 3614, 3606, 3585,
     3609, 3609, 3609, 3609, 3609, 3615, 3588, 3616, 1742,  693,
     1741, 1423, 3610, 3629, 3618, 3614, 3614, 3614, 3614, 3614,
     3629, 3616, 3602, 3609, 3629, 3614, 3629, 3615, 3618, 3629,
     3624, 3627, 3624, 3628, 3627, 1739, 1738, 3628,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  301,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  381,  381, 1737, 1736,  381,  381,  676,  381,
      381,  381,  381,  381,  381,  381,  387,  387,  387,  387,
     1735,  387,  387, 1413,  387,  387,  387,  387,  387,  387,
      387,  438, 1733,  438,  438,  438, 1732,  673,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  453, 1731,  453,  453,
      453, 1406,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  466,  466, 1186, 1035, 1035, 1186, 1035, 1394, 1186,
     1186,  466,  466,  466,  466, 1729,  466,  466, 1393,  466,
      466,  466,  466,  466,  466,  466,  481,  481,  481,  481,
     1728,  481,  481, 1724,  481,  481,  481,  481,  481,  481,
      481,  519,  519,  519,  519, 1723,  519,  519, 1722,  519,
      519,  519,  519,  519,  519,  519,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,

      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  531,  531,  531, 1721, 1720,  531,
      531, 1719,  531,  531,  531,  531,  531,  531,  531,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  540,  540,  540,
     1718, 1716,  540,  540, 1715,  540,  540,  540,  540,  540,
      540,  540,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  630,  630,
      630,  630, 1714,  630,  630, 1713,  630,  630,  630,  630,
      630,  630,  630,  635,  635, 1194, 1712,  635, 1194, 1710,
     1709, 1194, 1194,  635,  635,  635,  635, 1708,  635,  635,
     1707,  635,  635,  635,  635,  635,  635,  635,  637, 1706,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  643,  643,  643, 1705, 1704,
      643,  643, 1703,  643,  643,  643,  643,  643,  643,  643,
      647,  647,  647,  647, 1702,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  649, 1701,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  652, 1700,  652, 1699,  652,
     1698,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      664,  664,  664,  664, 1697,  664,  664, 1694,  664,  664,
      664,  664,  664,  664,  664,  668,  668,  668,  668, 1693,
      668,  668, 1692,  668,  668,  668,  668,  668,  668,  668,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  681,  681,
      681,  681, 1691,  681,  681, 1689,  681,  681,  681,  681,

      681,  681,  681,  687, 1687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      689, 1685,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  705,  705,  705,  705, 1684,
      705,  705, 1683,  705,  705,  705,  705,  705,  705,  705,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  720,  720,
     1682,  720,  720,  720,  720,  720,  720,  720,  721, 1681,

     1680,  721,  721, 1678,  721,  721,  721,  721,  721,  721,
      721,  381,  381, 1677, 1676,  381,  381, 1675,  381,  381,
      381,  381,  381,  381,  381,  387,  387,  387,  387, 1674,
      387,  387, 1673,  387,  387,  387,  387,  387,  387,  387,
      730, 1672, 1671, 1670, 1663, 1662,  730,  730, 1660,  730,
      730,  730,  730,  730,  730,  730,  438, 1659,  438,  438,
      438, 1658, 1657,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  453, 1326,  453,  453,  453, 1656,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  466,  466, 1395, 1655,
     1651, 1395, 1647, 1646, 1395, 1395,  466,  466,  466,  466,
     1645,  466,  466, 1644,  466,  466,  466,  466,  466,  466,
      466,  820,  820,  563,  820,  820,  820,  820,  820,  820,
      820,  481,  481,  481,  481, 1643,  481,  481, 1306,  481,
      481,  481,  481,  481,  481,  481,  822,  822, 1641,  822,
      822,  822,  822,  822,  822,  822,  519,  519,  519,  519,
     1640,  519,  519,  559,  519,  519,  519,  519,  519,  519,
      519,  889,  889, 1639,  889,  889,  889,  889,  889,  889,
      889,  524,  524,  524,  524,  524,  524,  524,  524,  524,

      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  531,
      531,  531, 1299, 1637,  531,  531, 1636,  531,  531,  531,
      531,  531,  531,  531,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  540,  540,  540, 1635, 1634,  540,  540, 1633,
      540,  540,  540,  540,  540,  540,  540,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952, 1632,  952, 1631,  952,  952, 1630,
     1440,  952,  952, 1440,  546, 1629, 1440, 1440, 1286,  952,
      952,  952,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954, 1627,  954, 1444,  954,  954, 1444, 1626,

      954, 1444, 1444,  543, 1625, 1279, 1623, 1622,  954,  954,
      954,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  536,  973, 1608,  973,  973, 1608, 1621,  973,
     1608, 1608, 1272, 1619, 1618,  533, 1617,  973,  973,  973,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981, 1265,  981, 1612,  981,  981, 1612, 1615,  981, 1612,
     1612, 1614,  527, 1613, 1258, 1611,  981,  981,  981,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
     1610,  982, 1616,  982,  982, 1616,  524,  982, 1616, 1616,
     1609, 1251,  482,  482, 1566,  982,  982,  982,  984,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984, 1211,
      984, 1620,  984,  984, 1620,  482,  984, 1620, 1620, 1558,
      815,  984,  984,  815,  984,  984,  984,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  815,  987,
     1624,  987,  987, 1624, 1193,  987, 1624, 1624, 1557, 1556,
     1555,  805,  805,  987,  987,  987,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  805,  990, 1628,
      990,  990, 1628, 1185,  990, 1628, 1628, 1554,  729,  388,
      990,  990,  990,  990,  990,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994, 1532,  994, 1638,  994,

      994, 1638, 1516,  994, 1638, 1638, 1509, 1499, 1494, 1471,
     1469,  994,  994,  994,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996, 1468,  996, 1642,  996,  996,
     1642, 1467,  996, 1642, 1642, 1466,  729,  388, 1459,  729,
      996,  996,  996,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  388,  999, 1454,  999,  999, 1730,
     1098,  999, 1730,  999, 1448, 1730, 1730, 1447, 1446,  999,
      999,  999, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016,  367, 1016, 1734, 1016, 1016, 1734, 1445,
     1016, 1734, 1734, 1089, 1443, 1442,  363, 1441, 1016, 1016,

     1016,  630,  630,  630,  630, 1082,  630,  630, 1437,  630,
      630,  630,  630,  630,  630,  630, 1025, 1025, 1436, 1025,
     1025, 1025, 1025, 1025, 1025, 1025,  635,  635, 1740, 1434,
      635, 1740, 1070, 1432, 1740, 1740,  635,  635,  635,  635,
     1431,  635,  635, 1430,  635,  635,  635,  635,  635,  635,
      635, 1027, 1027, 1430, 1027, 1027, 1027, 1027, 1027, 1027,
     1027,  637, 1425,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637, 1028, 1424,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,

     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028,  643,  643,  643, 1423, 1423,
      643,  643,  688,  643,  643,  643,  643,  643,  643,  643,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,  647,
      647,  647,  647, 1418,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  649, 1417,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  652, 1415,  652, 1414,  652, 1413,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  664,
      664,  664,  664, 1413,  664,  664, 1408,  664,  664,  664,
      664,  664,  664,  664, 1038, 1038, 1407, 1038, 1038, 1038,
     1038, 1038, 1038, 1038,  668,  668,  668,  668, 1406,  668,
      668, 1406,  668,  668,  668,  668,  668,  668,  668, 1039,
     1039, 1399, 1039, 1039, 1039, 1039, 1039, 1039, 1039,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  681,  681,  681,
      681, 1398,  681,  681, 1397,  681,  681,  681,  681,  681,
      681,  681, 1052, 1052, 1396, 1052, 1052, 1052, 1052, 1052,
     1052, 1052,  687, 1035,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  689,
     1030,  689,  689,  689,  689,  689,  689,  689,  689, 1390,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689, 1055, 1389, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1075, 1075, 1388, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
      705,  705,  705,  705, 1387,  705,  705, 1386,  705,  705,
      705,  705,  705,  705,  705, 1077, 1385, 1384, 1383, 1382,
     1381, 1077, 1077, 1380, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1379, 1092, 1744, 1092, 1092, 1744, 1378, 1092,
     1744, 1744, 1377, 1376, 1375, 1374, 1373, 1092, 1092, 1092,

     1093, 1093, 1093, 1372, 1371, 1093, 1093, 1370, 1093, 1093,
     1093, 1093, 1093, 1093, 1093,  721, 1369, 1368,  721,  721,
     1367,  721,  721,  721,  721,  721,  721,  721, 1094, 1366,
     1365, 1094, 1094, 1364, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1099, 1099, 1099, 1362, 1361, 1099, 1099, 1358, 1099, 1099,
     1099, 1099, 1099, 1099, 1099,  387,  387,  387,  387, 1357,
      387,  387, 1352,  387,  387,  387,  387,  387,  387,  387,

      730, 1351, 1350, 1347, 1346, 1345,  730,  730, 1344,  730,
      730,  730,  730,  730,  730,  730, 1201, 1201, 2241, 1343,
     1342, 2241, 1341, 1339, 2241, 2241, 1201, 1201, 1201, 1338,
     1337, 1201, 1201, 1336, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1335, 1202, 2245, 1202, 1202, 2245, 1334, 1202,
     2245, 2245, 1333, 1332, 1331, 1330, 1327, 1202, 1202, 1202,
     1203, 1203, 1203, 1326, 1319, 1203, 1203, 1311, 1203, 1203,
     1203, 1203, 1203, 1203, 1203,  481,  481,  481,  481, 1308,
      481,  481, 1307,  481,  481,  481,  481,  481,  481,  481,

      822,  822, 1306,  822,  822,  822,  822,  822,  822,  822,
     1244, 1244, 1244, 1306, 1301, 1244, 1244, 1300, 1244, 1244,
     1244, 1244, 1244, 1244, 1244,  519,  519,  519,  519, 1299,
      519,  519, 1299,  519,  519,  519,  519,  519,  519,  519,
      540,  540,  540, 1294, 1291,  540,  540, 1290,  540,  540,
      540,  540,  540,  540,  540, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1289, 1312, 2328, 1312,
     1312, 2328, 1288, 1312, 2328, 2328, 1287, 1286, 1286, 1281,
     1280, 1312, 1312, 1312, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1279, 1315, 2332, 1315, 1315,

     2332, 1279, 1315, 2332, 2332, 1274, 1273, 1272, 1272, 1267,
     1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1266, 1316, 1265, 1316, 1316, 1265,
     1260, 1316, 1259, 1258, 1258, 1253, 1252, 1251, 1251, 1316,
     1316, 1316, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340,  482, 1340,  482, 1340, 1340,  482,  482,
     1340,  482,  482,  482,  482,  482,  482,  482, 1340, 1340,
     1340, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1211, 1363,  482, 1363, 1363, 1200, 1199, 1363,
     1198, 1197, 1363, 1196, 1195,  815, 1192, 1363, 1363, 1363,

     1391, 1391, 1391, 1191, 1190, 1391, 1391, 1189, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1392, 1392, 1188, 1187, 1392,
      805, 1141, 1118,  729,  388, 1392, 1392, 1392, 1098, 1096,
     1392, 1392, 1095, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
      637,  725,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1400, 1400, 1400,  725,

     1091, 1400, 1400, 1090, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1401, 1401, 1401, 1089, 1089, 1401, 1401, 1084, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1416, 1416, 1416, 1083,
     1082, 1416, 1416, 1082, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1055, 1076, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1435, 1435, 1435,

     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,  706, 1435,
     1074, 1435, 1435, 1073, 1072, 1435, 1071, 1070,  696,  693,
      699, 1056,  688, 1435, 1435, 1435, 1438, 1438, 1438,  688,
     1054, 1438, 1438, 1053, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1439, 1439, 1439,  682,  676, 1439, 1439,  673, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1093, 1093, 1093,  669,
      665, 1093, 1093, 1037, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,

     1099, 1099, 1099, 1036, 1035, 1099, 1099, 1035, 1099, 1099,
     1099, 1099, 1099, 1099, 1099,  387,  387,  387,  387,  650,
      387,  387, 1030,  387,  387,  387,  387,  387,  387,  387,
      730,  646, 1026,  631, 1024, 1021,  730,  730, 1020,  730,
      730,  730,  730,  730,  730,  730, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1186, 1019, 1186, 1186, 1018, 1017, 1186, 1186,
     1194, 1015, 1194, 1194, 1014, 1011, 1194, 1194, 1201, 1201,
     1010, 1003, 1002, 1001, 1000,  998,  997,  995, 1201, 1201,
     1201,  993,  983, 1201, 1201,  980, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1203, 1203, 1203,  979,  978, 1203, 1203,
      977, 1203, 1203, 1203, 1203, 1203, 1203, 1203,  481,  481,
      481,  481,  972,  481,  481,  971,  481,  481,  481,  481,
      481,  481,  481,  822,  822,  970,  822,  822,  822,  822,
      822,  822,  822, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,

     1562, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1244, 1244, 1244,  957,  953, 1244, 1244,  949, 1244, 1244,
     1244, 1244, 1244, 1244, 1244,  519,  519,  519,  519,  948,
      519,  519,  947,  519,  519,  519,  519,  519,  519,  519,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

      563, 1664,  559, 1664, 1664,  934,  933, 1664,  932,  931,
      930,  546,  543,  536,  533, 1664, 1664, 1664, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,  527,
     1679,  524, 1679, 1679,  520,  482, 1679,  821,  817,  816,
      815,  815,  810,  809, 1679, 1679, 1679, 1688, 1688, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,  808, 1688,
      807, 1688, 1688,  806,  805, 1688,  805,  729,  388,  728,
      719,  367,  363, 1688, 1688, 1688, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690,  706, 1690,  704,
     1690, 1690,  701,  700, 1690,  699,  690,  688,  688,  688,

      686,  685, 1690, 1690, 1690, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502,  684, 1502,  682, 1502,
     1502,  680,  669, 1502,  667,  665,  663,  661,  660,  653,
      650, 1502, 1502, 1502, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1711, 1711,  650, 1711,  648, 1711, 1711,
      646,  631, 1711,  628,  613,  605,  582,  572,  562,  558,
     1711, 1711, 1711, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717,  556, 1717,  554, 1717, 1717,  551,
      550, 1717,  549,  541,  539,  530,  520,  518,  482, 1717,
     1717, 1717, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,

     1546, 1546, 1546,  476, 1546,  471, 1546, 1546,  469,  468,
     1546,  464,  463,  452, 1546,  451,  450,  448, 1546, 1546,
     1546, 1391, 1391, 1391,  447,  446, 1391, 1391,  445, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1392, 1392,  437,  388,
     1392,  374,  366, 3629, 3629, 3629, 1392, 1392, 1392, 3629,
     3629, 1392, 1392, 3629, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     3629, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1395, 3629, 1395, 1395, 3629, 3629, 1395, 1395, 1400, 1400,

     1400, 3629, 3629, 1400, 1400, 3629, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1401, 1401, 1401, 3629, 3629, 1401, 1401,
     3629, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1416, 1416,
     1416, 3629, 3629, 1416, 1416, 3629, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 3629, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 3629, 1749, 3629, 1749, 1749, 3629, 3629,
     1749, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 1749, 1749,

     1749, 1438, 1438, 1438, 3629, 3629, 1438, 1438, 3629, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439, 3629,
     3629, 1439, 1439, 3629, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1440, 3629, 1440, 1440, 3629, 3629, 1440, 1440, 1444,
     3629, 1444, 1444, 3629, 3629, 1444, 1444, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 3629, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,

     1756, 1756, 1756, 1756, 1756,  387,  387,  387,  387, 3629,
      387,  387, 3629,  387,  387,  387,  387,  387,  387,  387,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803,  730, 3629, 3629, 3629, 3629,
     3629,  730,  730, 3629,  730,  730,  730,  730,  730,  730,
      730, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,

     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1565, 1565, 1565,

     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565,  481,  481,  481,  481,
     3629,  481,  481, 3629,  481,  481,  481,  481,  481,  481,
      481,  822,  822, 3629,  822,  822,  822,  822,  822,  822,
      822,  519,  519,  519,  519, 3629,  519,  519, 3629,  519,
      519,  519,  519,  519,  519,  519, 1608, 3629, 1608, 1608,
     3629, 3629, 1608, 1608, 1612, 3629, 1612, 1612, 3629, 3629,
     1612, 1612, 1616, 3629, 1616, 1616, 3629, 3629, 1616, 1616,
     1620, 3629, 1620, 1620, 3629, 3629, 1620, 1620, 1624, 3629,

     1624, 1624, 3629, 3629, 1624, 1624, 1628, 3629, 1628, 1628,
     3629, 3629, 1628, 1628, 1638, 3629, 1638, 1638, 3629, 3629,
     1638, 1638, 1642, 3629, 1642, 1642, 3629, 3629, 1642, 1642,
     1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1752,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     3629, 1752, 3629, 1752, 1752, 3629, 3629, 1752, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 1752, 1752, 1752, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,

     1950, 1950, 1950, 1950, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1975, 1975, 1975, 1975, 1975, 1975, 1975,
     1975, 1975, 1975, 1975, 3629, 1975, 3629, 1975, 1975, 3629,
     3629, 1975, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 1975,
     1975, 1975, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978,
     1978, 1978, 1978, 3629, 1978, 3629, 1978, 1978, 3629, 3629,
     1978, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 1978, 1978,
     1978, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979,

     1979, 1979, 3629, 1979, 3629, 1979, 1979, 3629, 3629, 1979,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 1979, 1979, 1979,
     1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982,
     1982, 3629, 1982, 3629, 1982, 1982, 3629, 3629, 1982, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 1982, 1982, 1982, 1985,
     1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985,
     3629, 1985, 3629, 1985, 1985, 3629, 3629, 1985, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 1985, 1985, 1985, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 3629,
     1995, 3629, 1995, 1995, 3629, 3629, 1995, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 1995, 1995, 1995, 1730, 3629, 1730,
     1730, 3629, 3629, 1730, 1730, 1734, 3629, 1734, 1734, 3629,
     3629, 1734, 1734, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 3629, 1997, 3629, 1997, 1997, 3629,
     3629, 1997, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 1997,
     1997, 1997, 1740, 3629, 1740, 1740, 3629, 3629, 1740, 1740,
     1744, 3629, 1744, 1744, 3629, 3629, 1744, 1744,  387,  387,
      387,  387, 3629,  387,  387, 3629,  387,  387,  387,  387,
      387,  387,  387,  730, 3629, 3629, 3629, 3629, 3629,  730,
      730, 3629,  730,  730,  730,  730,  730,  730,  730, 1756,

     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 3629, 2020,
     3629, 2020, 2020, 3629, 3629, 2020, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2020, 2020, 2020, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 3629, 1470, 1470, 1470, 1470,

     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2034, 2034, 2034, 2034, 2034, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
     2034, 2034, 2034, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,

     1803, 1803, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 3629, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
     2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
     2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 2090,
     2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,

     2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,
     2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 3629, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565,  481,  481,  481,  481,
     3629,  481,  481, 3629,  481,  481,  481,  481,  481,  481,
      481, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131,

     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131,
      822,  822, 3629,  822,  822,  822,  822,  822,  822,  822,
      519,  519,  519,  519, 3629,  519,  519, 3629,  519,  519,
      519,  519,  519,  519,  519, 1911, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 2171, 2171, 2171, 2171, 2171, 2171, 2171, 2171,
     2171, 2171, 2171, 3629, 2171, 3629, 2171, 2171, 3629, 3629,
     2171, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2171, 2171,
     2171, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     3629, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025,

     2025, 3629, 2025, 3629, 2025, 2025, 3629, 3629, 2025, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 2025, 2025, 2025, 2177,
     2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
     2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
     2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2180, 2180,
     2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 2180, 2180, 2180, 2180, 2180, 2180, 2196, 2196, 2196,
     2196, 2196, 2196, 2196, 2196, 2196, 2196, 2196, 3629, 2196,
     3629, 2196, 2196, 3629, 3629, 2196, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 2196, 2196, 2196, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 2205, 2205, 2205, 2205, 2205, 2205,
     2205, 2205, 2205, 2205, 2205, 3629, 2205, 3629, 2205, 2205,
     3629, 3629, 2205, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2205, 2205, 2205, 2067, 2067, 2067, 2067, 2067, 2067, 2067,

     2067, 2067, 2067, 2067, 3629, 2067, 3629, 2067, 2067, 3629,
     3629, 2067, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2067,
     2067, 2067, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
     2208, 2208, 2208, 3629, 2208, 3629, 2208, 2208, 3629, 3629,
     2208, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2208, 2208,
     2208, 2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
     2212, 2212, 3629, 2212, 3629, 2212, 2212, 3629, 3629, 2212,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2212, 2212, 2212,
     2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
     2216, 3629, 2216, 3629, 2216, 2216, 3629, 3629, 2216, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 2216, 2216, 2216, 2224,
     2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224,
     3629, 2224, 3629, 2224, 2224, 3629, 3629, 2224, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 2224, 2224, 2224, 2225, 2225,
     2225, 2225, 2225, 2225, 2225, 2225, 2225, 2225, 2225, 3629,
     2225, 3629, 2225, 2225, 3629, 3629, 2225, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2225, 2225, 2225, 2231, 2231, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2236, 2236, 2236, 2236,

     2236, 2236, 2236, 2236, 2236, 2236, 2236, 3629, 2236, 3629,
     2236, 2236, 3629, 3629, 2236, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2236, 2236, 2236, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 3629, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756,  387,  387,  387,  387, 3629,  387,
      387, 3629,  387,  387,  387,  387,  387,  387,  387, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 3629, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 2250, 2250,

     2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 3629,
     2250, 3629, 2250, 2250, 3629, 3629, 2250, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2250, 2250, 2250,  730, 3629, 3629,
     3629, 3629, 3629,  730,  730, 3629,  730,  730,  730,  730,
      730,  730,  730, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,

     2034, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 3629, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 2060, 2060,
     2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,

     2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
     2060, 2060, 2060, 2060, 2060, 2060, 2060, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 3629, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 2090, 2090, 2090, 2090,
     2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,
     2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,
     2090, 2090, 2090, 2090, 2090, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2107, 2107, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 3629, 2325, 3629, 2325, 2325,
     3629, 3629, 2325, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2325, 2325, 2325,  481,  481,  481,  481, 3629,  481,  481,
     3629,  481,  481,  481,  481,  481,  481,  481, 2337, 2337,
     2337, 2337, 2337, 2337, 2337, 2337, 2337, 2337, 2337, 3629,
     2337, 3629, 2337, 2337, 3629, 3629, 2337, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2337, 2337, 2337, 2131, 2131, 2131,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131,

     2131, 2131, 2131, 2131, 2131, 2131,  822,  822, 3629,  822,
      822,  822,  822,  822,  822,  822, 2349, 2349, 2349, 2349,
     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
     2349, 2349, 2349, 2349, 2349, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361,  519,  519, 3629, 3629, 3629, 3629, 3629,
      519, 3629, 3629,  519,  519,  519,  519, 3629,  519,  519,
     3629,  519,  519,  519,  519,  519,  519,  519, 2368, 2368,
     2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 3629,
     2368, 3629, 2368, 2368, 3629, 3629, 2368, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2368, 2368, 2368, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 3629, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 3629, 1914, 1914, 1914, 1914,

     1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 3629, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 2377, 2377, 2377, 2377, 2377, 2377,
     2377, 2377, 2377, 2377, 2377, 3629, 2377, 3629, 2377, 2377,
     3629, 3629, 2377, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2377, 2377, 2377, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
     2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
     2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177,

     2177, 2177, 2382, 2382, 2382, 2382, 2382, 2382, 2382, 2382,
     2382, 2382, 2382, 3629, 2382, 3629, 2382, 2382, 3629, 3629,
     2382, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2382, 2382,
     2382, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 3629, 2388, 3629, 2388, 2388, 3629, 3629, 2388, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 2388, 2388, 2388, 2395,
     2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,

     2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
     2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2399, 2399,
     2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 3629,
     2399, 3629, 2399, 2399, 3629, 3629, 2399, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2399, 2399, 2399, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 3629, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 3629, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,

     1958, 1958, 1958, 1958, 1958, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2419, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2231, 2231, 2231, 2231, 2231, 2231, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231,
     2231, 2231,  387,  387,  387,  387, 3629,  387,  387, 3629,

      387,  387,  387,  387,  387,  387,  387, 2437, 2437, 2437,
     2437, 2437, 2437, 2437, 2437, 2437, 2437, 2437, 3629, 2437,
     3629, 2437, 2437, 3629, 3629, 2437, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2437, 2437, 2437, 2241, 3629, 2241, 2241,
     3629, 3629, 2241, 2241, 2245, 3629, 2245, 2245, 3629, 3629,
     2245, 2245, 2438, 2438, 2438, 2438, 2438, 2438, 2438, 2438,
     2438, 2438, 2438, 3629, 2438, 3629, 2438, 2438, 3629, 3629,
     2438, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2438, 2438,
     2438, 2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439,
     2439, 2439, 3629, 2439, 3629, 2439, 2439, 3629, 3629, 2439,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2439, 2439, 2439,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 3629,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 3629, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034,
     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2454, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2465, 2465, 3629,

     3629, 3629, 3629, 3629, 2465, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2465, 2465, 3629, 2465, 2465, 2465, 2465, 2465,
     2465, 2465, 2465, 2468, 2468, 2468, 2468, 2468, 2468, 2468,
     2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,
     2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,
     2468, 2468, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274,  730, 3629, 3629, 3629, 3629, 3629,  730,  730, 3629,
      730,  730,  730,  730,  730,  730,  730, 2280, 2280, 2280,

     2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 2476, 2476, 2476, 2476,
     2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
     2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
     2476, 2476, 2476, 2476, 2476, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2060, 2060, 2060, 2060, 2060, 2060,
     2060, 2060, 2060, 3629, 2060, 2060, 2060, 2060, 2060, 2060,

     2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
     2060, 2060, 2060, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2495, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,
     3629, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,
     2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,

     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 3629,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2328, 3629,
     2328, 2328, 3629, 3629, 2328, 2328, 2332, 3629, 2332, 2332,
     3629, 3629, 2332, 2332,  481,  481,  481,  481, 3629,  481,
      481, 3629,  481,  481,  481,  481,  481,  481,  481, 2131,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 3629, 2131,

     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2349, 2349,
     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 3629, 2541,
     3629, 2541, 2541, 3629, 3629, 2541, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2541, 2541, 2541, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,

     2352, 2352, 2352, 2352, 2352, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 2550, 2550, 2550, 2550, 2550, 2550,
     2550, 2550, 2550, 2550, 2550, 3629, 2550, 3629, 2550, 2550,
     3629, 3629, 2550, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2550, 2550, 2550, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361,  519,  519,  519,  519, 3629,  519,  519, 3629,

      519,  519,  519,  519,  519,  519,  519, 2558, 2558, 2558,
     2558, 2558, 2558, 2558, 2558, 2558, 2558, 2558, 3629, 2558,
     3629, 2558, 2558, 3629, 3629, 2558, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2558, 2558, 2558, 2560, 2560, 2560, 2560,
     2560, 2560, 2560, 2560, 2560, 2560, 2560, 3629, 2560, 3629,
     2560, 2560, 3629, 3629, 2560, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2560, 2560, 2560, 2562, 2562, 2562, 2562, 2562,
     2562, 2562, 2562, 2562, 2562, 2562, 3629, 2562, 3629, 2562,
     2562, 3629, 3629, 2562, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 2562, 2562, 2562, 2563, 2563, 2563, 2563, 2563, 2563,

     2563, 2563, 2563, 2563, 2563, 3629, 2563, 3629, 2563, 2563,
     3629, 3629, 2563, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2563, 2563, 2563, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
     2177, 2177, 3629, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
     2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
     2177, 2177, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 3629, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574,
     2574, 2574, 3629, 2574, 3629, 2574, 2574, 3629, 3629, 2574,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2574, 2574, 2574,
     2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
     2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
     2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2579,
     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2581, 2581,
     2581, 2581, 2581, 2581, 2581, 2581, 2581, 2581, 2581, 3629,
     2581, 3629, 2581, 2581, 3629, 3629, 2581, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2581, 2581, 2581, 2586, 2586, 2586,

     2586, 2586, 2586, 2586, 2586, 2586, 2586, 2586, 3629, 2586,
     3629, 2586, 2586, 3629, 3629, 2586, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2586, 2586, 2586, 2590, 2590, 2590, 2590,
     2590, 2590, 2590, 2590, 2590, 2590, 2590, 3629, 2590, 3629,
     2590, 2590, 3629, 3629, 2590, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2590, 2590, 2590, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
     2409, 2409, 2409, 2409, 2593, 2593, 2593, 2593, 2593, 2593,
     2593, 2593, 2593, 2593, 2593, 3629, 2593, 3629, 2593, 2593,

     3629, 3629, 2593, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2593, 2593, 2593, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 3629, 2596, 3629, 2596, 2596, 3629,
     3629, 2596, 3629, 3629, 3629, 3629, 2596, 3629, 3629, 2596,
     2596, 2596, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601,
     2601, 2601, 3629, 2601, 3629, 2601, 2601, 3629, 3629, 2601,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2601, 2601, 2601,

     2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 3629, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231,
     2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2616, 2616,
     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 3629,
     2616, 3629, 2616, 2616, 3629, 3629, 2616, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2616, 2616, 2616, 2617, 2617, 2617,
     2617, 2617, 2617, 2617, 2617, 2617, 2617, 2617, 3629, 2617,

     3629, 2617, 2617, 3629, 3629, 2617, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2617, 2617, 2617, 2618, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2618, 2618, 2618, 3629, 2618, 3629,
     2618, 2618, 3629, 3629, 2618, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2618, 2618, 2618,  387,  387,  387,  387, 3629,
      387,  387, 3629,  387,  387,  387,  387,  387,  387,  387,
      730, 3629, 3629, 3629,  730, 3629,  730,  730, 3629,  730,
      730,  730,  730,  730,  730,  730, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639,

     2639, 2639, 2639, 2639, 2639, 2454, 2454, 2454, 2454, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454,
     2454, 2454, 2454, 2454, 2652, 2652, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2652, 2652, 2652, 2652, 3629, 2652,
     2652, 3629, 2652, 2652, 2652, 2652, 2652, 2652, 2652, 2652,
     2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2468,
     2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,

     2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,
     2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 3629, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 3629, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280,
     2280, 2280, 2280, 2280, 2280, 2280, 2476, 2476, 2476, 2476,
     2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
     2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,

     2476, 2476, 2476, 2476, 2476, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2667, 2667, 2667, 2667, 2667, 2667,
     2667, 2667, 2667, 2667, 2667, 3629, 2667, 3629, 2667, 2667,
     3629, 3629, 2667, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2667, 2667, 2667, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2673, 2673, 2673, 2673, 2673, 2673, 2673, 2673,

     2673, 2673, 2673, 3629, 2673, 3629, 2673, 2673, 3629, 3629,
     2673, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2673, 2673,
     2673, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685,
     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685,
     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2713,
     2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713,

     2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2717, 2717, 2717,
     2717, 2717, 2717, 2717, 2717, 2717, 2717, 2717, 3629, 2717,
     3629, 2717, 2717, 3629, 3629, 2717, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2717, 2717, 2717,  481,  481, 3629, 3629,
     3629, 3629, 3629,  481, 3629, 3629,  481,  481,  481,  481,
     3629,  481,  481, 3629,  481,  481,  481,  481,  481,  481,
      481,  822,  822, 3629,  822,  822,  822,  822,  822,  822,

      822, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
     3629, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 3629,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2548,
     2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 3629, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361,  519,  519,  519,
      519, 3629,  519,  519, 3629,  519,  519,  519,  519,  519,
      519,  519, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     2739, 2741, 2741, 2741, 2741, 2741, 2741, 2741, 2741, 2741,
     2741, 2741, 3629, 2741, 3629, 2741, 2741, 3629, 3629, 2741,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2741, 2741, 2741,
     2744, 2744, 2744, 2744, 2744, 2744, 2744, 2744, 2744, 2744,

     2744, 3629, 2744, 3629, 2744, 2744, 3629, 3629, 2744, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 2744, 2744, 2744, 2745,
     2745, 2745, 2745, 2745, 2745, 2745, 2745, 2745, 2745, 2745,
     3629, 2745, 3629, 2745, 2745, 3629, 3629, 2745, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 2745, 2745, 2745, 2750, 2750,
     2750, 2750, 2750, 2750, 2750, 2750, 2750, 2750, 2750, 3629,
     2750, 3629, 2750, 2750, 3629, 3629, 2750, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2750, 2750, 2750, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,

     2752, 2752, 2752, 2752, 2752, 2752, 2756, 2756, 2756, 2756,
     2756, 2756, 2756, 2756, 2756, 2756, 2756, 3629, 2756, 3629,
     2756, 2756, 3629, 3629, 2756, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2756, 2756, 2756, 2395, 2395, 2395, 2395, 2395,
     2395, 2395, 2395, 2395, 3629, 2395, 2395, 2395, 2395, 2395,
     2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
     2395, 2395, 2395, 2395, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2764, 2764, 2764, 2764, 2764, 2764, 2764,

     2764, 2764, 2764, 2764, 3629, 2764, 3629, 2764, 2764, 3629,
     3629, 2764, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2764,
     2764, 2764, 2767, 2767, 2767, 2767, 2767, 2767, 2767, 2767,
     2767, 2767, 2767, 3629, 2767, 3629, 2767, 2767, 3629, 3629,
     2767, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2767, 2767,
     2767, 2768, 2768, 2768, 2768, 2768, 2768, 2768, 2768, 2768,
     2768, 2768, 3629, 2768, 3629, 2768, 2768, 3629, 3629, 2768,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2768, 2768, 2768,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 3629,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,

     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     3629, 2769, 3629, 2769, 2769, 3629, 3629, 2769, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 2769, 2769, 2769, 2771, 2771,
     2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 3629,
     2771, 3629, 2771, 2771, 3629, 3629, 2771, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2771, 2771, 2771, 2772, 2772, 2772,
     2772, 2772, 2772, 2772, 2772, 2772, 2772, 2772, 3629, 2772,
     3629, 2772, 2772, 3629, 3629, 2772, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 2772, 2772, 2772, 2599, 2599, 2599, 2599,

     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2419, 3629, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419,
     2419, 2419, 2419, 2419, 2775, 2775, 2775, 2775, 2775, 2775,
     2775, 2775, 2775, 2775, 2775, 3629, 2775, 3629, 2775, 2775,
     3629, 3629, 2775, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2775, 2775, 2775, 2788, 2788, 2788, 2788, 2788, 2788, 2788,
     2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788,

     2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788,
     2788, 2788,  387,  387,  387,  387, 3629,  387,  387, 3629,
      387,  387,  387,  387,  387,  387,  387, 2791, 2791, 3629,
     3629, 3629, 3629, 3629, 2791, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2791, 2791, 3629, 2791, 2791, 2791, 2791, 2791,
     2791, 2791, 2791,  730, 3629, 3629, 3629,  730, 3629,  730,
      730, 3629,  730,  730,  730,  730,  730,  730,  730, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2454, 2454,

     2454, 2454, 2454, 2454, 2454, 2454, 2454, 3629, 2454, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2652, 2652, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2652, 2652, 2652,
     2652, 3629, 2652, 2652, 3629, 2652, 2652, 2652, 2652, 2652,
     2652, 2652, 2652, 2818, 2818, 3629, 2818, 2818, 2818, 2818,
     2818, 2818, 2818, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2655, 2655, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,

     2468, 3629, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,
     2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468, 2468,
     2468, 2822, 2822, 2822, 2822, 2822, 2822, 2822, 2822, 2822,
     2822, 2822, 3629, 2822, 3629, 2822, 2822, 3629, 3629, 2822,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 2822, 2822, 2822,
     2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 3629,
     2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
     2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 3629, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479,

     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 3629, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2495, 2495, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 3629, 2495, 2495, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 2685, 2685, 2685, 2685,
     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685,
     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685,
     2685, 2685, 2685, 2685, 2685, 2844, 2844, 2844, 2844, 2844,

     2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844,
     2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844,
     2844, 2844, 2844, 2844, 2713, 2713, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 3629, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862,
     2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862,

     2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862,
     2862,  481,  481,  481,  481, 3629,  481,  481, 3629,  481,
      481,  481,  481,  481,  481,  481, 2867, 2867, 2867, 2867,
     2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867,
     2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867,
     2867, 2867, 2867, 2867, 2867,  822,  822, 3629,  822,  822,
      822,  822,  822,  822,  822, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 3629, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548, 2548,
     2548, 2548, 2548, 2548,  519,  519,  519,  519, 3629,  519,

      519, 3629,  519,  519,  519,  519,  519,  519,  519, 2739,
     2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2876, 2876,
     2876, 2876, 2876, 2876, 2876, 2876, 2876, 2876, 2876, 3629,
     2876, 3629, 2876, 2876, 3629, 3629, 2876, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2876, 2876, 2876, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2752, 2752, 2752, 2752,

     2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 3629, 2885, 3629, 2885,
     2885, 3629, 3629, 2885, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 2885, 2885, 2885, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 3629, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579,
     2579, 2579, 2579, 2891, 2891, 2891, 2891, 2891, 2891, 2891,
     2891, 2891, 2891, 2891, 3629, 2891, 3629, 2891, 2891, 3629,

     3629, 2891, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2891,
     2891, 2891, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     3629, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788,
     2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788,
     2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2915,

     2915, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 2915,
     2915, 2915, 2915, 3629, 2915, 2915, 3629, 2915, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 3629, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2935, 2935, 2935, 2935, 2935, 2935, 2935,
     2935, 2935, 2935, 2935, 3629, 2935, 3629, 2935, 2935, 3629,

     3629, 2935, 3629, 3629, 3629, 3629, 2935, 3629, 3629, 2935,
     2935, 2935, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2945, 2945, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 2945, 2945, 2945, 3629, 3629, 2945, 2945, 3629, 2945,
     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2465, 2465, 3629,
     3629, 3629, 3629, 3629, 2465, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2465, 2465, 3629, 2465, 2465, 2465, 2465, 2465,
     2465, 2465, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,

     2655, 3629, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2655, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951,
     2951, 2951, 3629, 2951, 3629, 2951, 2951, 3629, 3629, 2951,
     3629, 3629, 3629, 3629, 2951, 3629, 3629, 2951, 2951, 2951,
     2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957,
     2957, 3629, 2957, 3629, 2957, 2957, 3629, 3629, 2957, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 2957, 2957, 2957, 2685,
     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 3629, 2685,
     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685,

     2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2844, 2844,
     2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844,
     2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844,
     2844, 2844, 2844, 2844, 2844, 2844, 2844, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 3629, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 2982, 2982, 2982, 2982, 2982,

     2982, 2982, 2982, 2982, 2982, 2982, 3629, 2982, 3629, 2982,
     2982, 3629, 3629, 2982, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 2982, 2982, 2982, 2862, 2862, 2862, 2862, 2862, 2862,
     2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862,
     2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862,
     2862, 2862, 2862,  481,  481,  481,  481, 3629,  481,  481,
     3629,  481,  481,  481,  481,  481,  481,  481, 2986, 2986,
     2986, 2986, 2986, 2986, 2986, 2986, 2986, 2986, 2986, 3629,
     2986, 3629, 2986, 2986, 3629, 3629, 2986, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 2986, 2986, 2986, 2867, 2867, 2867,

     2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867,
     2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867, 2867,
     2867, 2867, 2867, 2867, 2867, 2867,  519,  519,  519,  519,
     3629,  519,  519, 3629,  519,  519,  519,  519,  519,  519,
      519, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     3629, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739,
     2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994,
     2994, 3629, 2994, 3629, 2994, 2994, 3629, 3629, 2994, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 2994, 2994, 2994, 2997,

     2997, 2997, 2997, 2997, 2997, 2997, 2997, 2997, 2997, 2997,
     3629, 2997, 3629, 2997, 2997, 3629, 3629, 2997, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 2997, 2997, 2997, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752, 3629, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752, 3004, 3004, 3004, 3004,
     3004, 3004, 3004, 3004, 3004, 3004, 3004, 3629, 3004, 3629,

     3004, 3004, 3629, 3629, 3004, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3004, 3004, 3004, 3006, 3006, 3006, 3006, 3006,
     3006, 3006, 3006, 3006, 3006, 3006, 3629, 3006, 3629, 3006,
     3006, 3629, 3629, 3006, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3006, 3006, 3006, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2893, 2893, 3008, 3008, 3008, 3008, 3008, 3008, 3008,
     3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008,
     3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008,

     3008, 3008, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016,
     3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016,
     3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016,
     3016, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788,
     3629, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788,
     2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788,
     2915, 2915, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     2915, 2915, 2915, 2915, 3629, 2915, 2915, 3629, 2915, 2915,
     2915, 2915, 2915, 2915, 2915, 2915, 3027, 3027, 3629, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 2918, 2918, 2918, 2918,

     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 3045, 3045, 3045, 3045, 3045,
     3045, 3045, 3045, 3045, 3045, 3045, 3629, 3045, 3629, 3045,
     3045, 3629, 3629, 3045, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3045, 3045, 3045, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
     3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,

     3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
     3050, 3050, 2945, 2945, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2945, 2945, 2945, 3629, 3629, 2945, 2945, 3629,
     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 3057, 3057,
     3057, 3057, 3057, 3057, 3057, 3057, 3057, 3057, 3057, 3629,
     3057, 3629, 3057, 3057, 3629, 3629, 3057, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3057, 3057, 3057, 3064, 3064, 3064,
     3064, 3064, 3064, 3064, 3064, 3064, 3064, 3064, 3629, 3064,
     3629, 3064, 3064, 3629, 3629, 3064, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3064, 3064, 3064, 2844, 2844, 2844, 2844,

     2844, 2844, 2844, 2844, 2844, 3629, 2844, 2844, 2844, 2844,
     2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844, 2844,
     2844, 2844, 2844, 2844, 2844, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2862, 2862, 2862, 2862, 2862, 2862,
     2862, 2862, 2862, 3629, 2862, 2862, 2862, 2862, 2862, 2862,
     2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862,
     2862, 2862, 2862, 3099, 3099, 3099, 3099, 3099, 3099, 3099,
     3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,

     3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,
     3099, 3099, 3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104,
     3104, 3104, 3104, 3629, 3104, 3629, 3104, 3104, 3629, 3629,
     3104, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3104, 3104,
     3104, 3123, 3123, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3123, 3123, 3123, 3629, 3629, 3123, 3123, 3629, 3123,
     3123, 3123, 3123, 3123, 3123, 3123, 3123, 2791, 2791, 3629,
     3629, 3629, 3629, 3629, 2791, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 2791, 2791, 3629, 2791, 2791, 2791, 2791, 2791,
     2791, 2791, 3148, 3148, 3148, 3148, 3148, 3148, 3148, 3148,

     3148, 3148, 3148, 3629, 3148, 3629, 3148, 3148, 3629, 3629,
     3148, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3148, 3148,
     3148, 3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149,
     3149, 3149, 3629, 3149, 3629, 3149, 3149, 3629, 3629, 3149,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3149, 3149, 3149,
      730, 3629, 3629, 3629, 3629, 3629,  730,  730, 3629,  730,
      730,  730,  730,  730,  730,  730, 3161, 3161, 3161, 3161,
     3161, 3161, 3161, 3161, 3161, 3161, 3161, 3629, 3161, 3629,
     3161, 3161, 3629, 3629, 3161, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3161, 3161, 3161, 3196, 3196, 3196, 3196, 3196,

     3196, 3196, 3196, 3196, 3196, 3196, 3629, 3196, 3629, 3196,
     3196, 3629, 3629, 3196, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3196, 3196, 3196, 3209, 3209, 3209, 3209, 3209, 3209,
     3209, 3209, 3209, 3209, 3209, 3629, 3209, 3629, 3209, 3209,
     3629, 3629, 3209, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3209, 3209, 3209, 3227, 3227, 3227, 3227, 3227, 3227, 3227,
     3227, 3227, 3227, 3227, 3629, 3227, 3629, 3227, 3227, 3629,
     3629, 3227, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3227,
     3227, 3227, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238,
     3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238,

     3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238,
     3238, 3242, 3242, 3242, 3242, 3242, 3242, 3242, 3242, 3242,
     3242, 3242, 3629, 3242, 3629, 3242, 3242, 3629, 3629, 3242,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3242, 3242, 3242,
     3243, 3243, 3243, 3243, 3243, 3243, 3243, 3243, 3243, 3243,
     3243, 3629, 3243, 3629, 3243, 3243, 3629, 3629, 3243, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3243, 3243, 3243, 3248,
     3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248,
     3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248,
     3248, 3248, 3248, 3248, 3248, 3248, 3248, 3248, 3252, 3252,

     3252, 3252, 3252, 3252, 3252, 3252, 3252, 3252, 3252, 3629,
     3252, 3629, 3252, 3252, 3629, 3629, 3252, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3252, 3252, 3252, 3260, 3260, 3260,
     3260, 3260, 3260, 3260, 3260, 3260, 3260, 3260, 3260, 3260,
     3260, 3260, 3260, 3260, 3260, 3260, 3260, 3260, 3260, 3260,
     3260, 3260, 3260, 3260, 3260, 3260, 3266, 3266, 3266, 3266,
     3266, 3266, 3266, 3266, 3266, 3266, 3266, 3629, 3266, 3629,
     3266, 3266, 3629, 3629, 3266, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3266, 3266, 3266, 3270, 3270, 3270, 3270, 3270,
     3270, 3270, 3270, 3270, 3270, 3270, 3629, 3270, 3629, 3270,

     3270, 3629, 3629, 3270, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3270, 3270, 3270, 3271, 3271, 3271, 3271, 3271, 3271,
     3271, 3271, 3271, 3271, 3271, 3629, 3271, 3629, 3271, 3271,
     3629, 3629, 3271, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3271, 3271, 3271, 3273, 3273, 3273, 3273, 3273, 3273, 3273,
     3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273,
     3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273,
     3273, 3273, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276,
     3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276,
     3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276,

     3276, 3280, 3280, 3280, 3280, 3280, 3280, 3280, 3280, 3280,
     3280, 3280, 3629, 3280, 3629, 3280, 3280, 3629, 3629, 3280,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3280, 3280, 3280,
     3281, 3281, 3281, 3281, 3281, 3281, 3281, 3281, 3281, 3281,
     3281, 3629, 3281, 3629, 3281, 3281, 3629, 3629, 3281, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3281, 3281, 3281, 3286,
     3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286,
     3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286,
     3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3314, 3314,
     3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314,

     3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314,
     3314, 3314, 3314, 3314, 3314, 3314, 3314, 3319, 3319, 3319,
     3319, 3319, 3319, 3319, 3319, 3319, 3319, 3319, 3629, 3319,
     3629, 3319, 3319, 3629, 3629, 3319, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3319, 3319, 3319, 3320, 3320, 3320, 3320,
     3320, 3320, 3320, 3320, 3320, 3320, 3320, 3629, 3320, 3629,
     3320, 3320, 3629, 3629, 3320, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3320, 3320, 3320, 3321, 3321, 3321, 3321, 3321,
     3321, 3321, 3321, 3321, 3321, 3321, 3629, 3321, 3629, 3321,
     3321, 3629, 3629, 3321, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3321, 3321, 3321, 3333, 3333, 3333, 3333, 3333, 3333,
     3333, 3333, 3333, 3333, 3333, 3629, 3333, 3629, 3333, 3333,
     3629, 3629, 3333, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3333, 3333, 3333, 3335, 3335, 3335, 3335, 3335, 3335, 3335,
     3335, 3335, 3335, 3335, 3629, 3335, 3629, 3335, 3335, 3629,
     3629, 3335, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3335,
     3335, 3335, 3340, 3340, 3340, 3340, 3340, 3340, 3340, 3340,
     3340, 3340, 3340, 3629, 3340, 3629, 3340, 3340, 3629, 3629,
     3340, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3340, 3340,
     3340, 3344, 3344, 3344, 3344, 3344, 3344, 3344, 3344, 3344,

     3344, 3344, 3629, 3344, 3629, 3344, 3344, 3629, 3629, 3344,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3344, 3344, 3344,
     3345, 3345, 3345, 3345, 3345, 3345, 3345, 3345, 3345, 3345,
     3345, 3629, 3345, 3629, 3345, 3345, 3629, 3629, 3345, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3345, 3345, 3345, 3346,
     3346, 3346, 3346, 3346, 3346, 3346, 3346, 3346, 3346, 3346,
     3629, 3346, 3629, 3346, 3346, 3629, 3629, 3346, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3346, 3346, 3346, 3354, 3354,
     3354, 3354, 3354, 3354, 3354, 3354, 3354, 3354, 3354, 3629,
     3354, 3629, 3354, 3354, 3629, 3629, 3354, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3354, 3354, 3354, 3355, 3355, 3355,
     3355, 3355, 3355, 3355, 3355, 3355, 3355, 3355, 3629, 3355,
     3629, 3355, 3355, 3629, 3629, 3355, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3355, 3355, 3355, 3364, 3364, 3364, 3364,
     3364, 3364, 3364, 3364, 3364, 3364, 3364, 3629, 3364, 3629,
     3364, 3364, 3629, 3629, 3364, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3364, 3364, 3364, 3368, 3368, 3368, 3368, 3368,
     3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368,
     3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368,
     3368, 3368, 3368, 3368, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3629, 3381, 3629, 3381, 3381,
     3629, 3629, 3381, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3381, 3381, 3381, 3391, 3391, 3391, 3391, 3391, 3391, 3391,
     3391, 3391, 3391, 3391, 3629, 3391, 3629, 3391, 3391, 3629,
     3629, 3391, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3391,
     3391, 3391, 3399, 3399, 3399, 3399, 3399, 3399, 3399, 3399,
     3399, 3399, 3399, 3629, 3399, 3629, 3399, 3399, 3629, 3629,
     3399, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3399, 3399,
     3399, 3400, 3400, 3400, 3400, 3400, 3400, 3400, 3400, 3400,
     3400, 3400, 3629, 3400, 3629, 3400, 3400, 3629, 3629, 3400,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3400, 3400, 3400,
     3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405,
     3405, 3629, 3405, 3629, 3405, 3405, 3629, 3629, 3405, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3405, 3405, 3405,  730,
     3629, 3629, 3629,  730, 3629,  730,  730, 3629,  730,  730,
      730,  730,  730,  730,  730, 3417, 3417, 3417, 3417, 3417,
     3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417,
     3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417,
     3417, 3417, 3417, 3417, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3629, 3441, 3629, 3441, 3441,

     3629, 3629, 3441, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3441, 3441, 3441, 3442, 3442, 3442, 3442, 3442, 3442, 3442,
     3442, 3442, 3442, 3442, 3629, 3442, 3629, 3442, 3442, 3629,
     3629, 3442, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3442,
     3442, 3442, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3452, 3452, 3452, 3452, 3452, 3452, 3452, 3452, 3452,
     3452, 3452, 3629, 3452, 3629, 3452, 3452, 3629, 3629, 3452,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3452, 3452, 3452,

     3453, 3453, 3453, 3453, 3453, 3453, 3453, 3453, 3453, 3453,
     3453, 3629, 3453, 3629, 3453, 3453, 3629, 3629, 3453, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3453, 3453, 3453, 3462,
     3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462,
     3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462,
     3462, 3462, 3462, 3462, 3462, 3462, 3462, 3462, 3465, 3465,
     3465, 3465, 3465, 3465, 3465, 3465, 3465, 3465, 3465, 3465,
     3465, 3465, 3465, 3465, 3465, 3465, 3465, 3465, 3465, 3465,
     3465, 3465, 3465, 3465, 3465, 3465, 3465, 3469, 3469, 3469,
     3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469,

     3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469,
     3469, 3469, 3469, 3469, 3469, 3469, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3480, 3480, 3480, 3480, 3480,
     3480, 3480, 3480, 3480, 3480, 3480, 3480, 3480, 3480, 3480,
     3480, 3480, 3480, 3480, 3480, 3480, 3480, 3480, 3480, 3480,
     3480, 3480, 3480, 3480, 3484, 3484, 3484, 3484, 3484, 3484,
     3484, 3484, 3484, 3484, 3484, 3629, 3484, 3629, 3484, 3484,
     3629, 3629, 3484, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3484, 3484, 3484, 3485, 3485, 3485, 3485, 3485, 3485, 3485,
     3485, 3485, 3485, 3485, 3629, 3485, 3629, 3485, 3485, 3629,
     3629, 3485, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3485,
     3485, 3485, 3492, 3492, 3492, 3492, 3492, 3492, 3492, 3492,
     3492, 3492, 3492, 3629, 3492, 3629, 3492, 3492, 3629, 3629,
     3492, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3492, 3492,
     3492, 3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493,
     3493, 3493, 3629, 3493, 3629, 3493, 3493, 3629, 3629, 3493,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3493, 3493, 3493,
     3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502,

     3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502,
     3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502, 3502, 3510,
     3510, 3510, 3510, 3510, 3510, 3510, 3510, 3510, 3510, 3510,
     3629, 3510, 3629, 3510, 3510, 3629, 3629, 3510, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3510, 3510, 3510, 3516, 3516,
     3516, 3516, 3516, 3516, 3516, 3516, 3516, 3516, 3516, 3516,
     3516, 3516, 3516, 3516, 3516, 3516, 3516, 3516, 3516, 3516,
     3516, 3516, 3516, 3516, 3516, 3516, 3516, 3522, 3522, 3522,
     3522, 3522, 3522, 3522, 3522, 3522, 3522, 3522, 3522, 3522,
     3522, 3522, 3522, 3522, 3522, 3522, 3522, 3522, 3522, 3522,

     3522, 3522, 3522, 3522, 3522, 3522, 3543, 3543, 3543, 3543,
     3543, 3543, 3543, 3543, 3543, 3543, 3543, 3629, 3543, 3629,
     3543, 3543, 3629, 3629, 3543, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3543, 3543, 3543, 3558, 3558, 3558, 3558, 3558,
     3558, 3558, 3558, 3558, 3558, 3558, 3629, 3558, 3629, 3558,
     3558, 3629, 3629, 3558, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3558, 3558, 3558, 3565, 3565, 3565, 3565, 3565, 3565,
     3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565,
     3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3565,
     3565, 3565, 3565, 3572, 3572, 3572, 3572, 3572, 3572, 3572,

     3572, 3572, 3572, 3572, 3572, 3572, 3572, 3572, 3572, 3572,
     3572, 3572, 3572, 3572, 3572, 3572, 3572, 3572, 3572, 3572,
     3572, 3572, 3575, 3575, 3575, 3575, 3575, 3575, 3575, 3575,
     3575, 3575, 3575, 3629, 3575, 3629, 3575, 3575, 3629, 3629,
     3575, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3575, 3575,
     3575, 3581, 3581, 3581, 3581, 3581, 3581, 3581, 3581, 3581,
     3581, 3581, 3629, 3581, 3629, 3581, 3581, 3629, 3629, 3581,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3581, 3581, 3581,
     3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591,
     3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591,

     3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3595,
     3595, 3595, 3595, 3595, 3595, 3595, 3595, 3595, 3595, 3595,
     3629, 3595, 3629, 3595, 3595, 3629, 3629, 3595, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3595, 3595, 3595, 3596, 3596,
     3596, 3596, 3596, 3596, 3596, 3596, 3596, 3596, 3596, 3629,
     3596, 3629, 3596, 3596, 3629, 3629, 3596, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3596, 3596, 3596, 3597, 3597, 3597,
     3597, 3597, 3597, 3597, 3597, 3597, 3597, 3597, 3597, 3597,
     3597, 3597, 3597, 3597, 3597, 3597, 3597, 3597, 3597, 3597,
     3597, 3597, 3597, 3597, 3597, 3597, 3607, 3607, 3607, 3607,

     3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607,
     3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607,
     3607, 3607, 3607, 3607, 3607, 3611, 3611, 3611, 3611, 3611,
     3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611,
     3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611,
     3611, 3611, 3611, 3611, 3619, 3619, 3619, 3619, 3619, 3619,
     3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619,
     3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619,
     3619, 3619, 3619, 3622, 3622, 3622, 3622, 3622, 3622, 3622,
     3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622,

     3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622,
     3622, 3622, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625,
     3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625,
     3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625,
     3625,   63, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629
    } ;

static yyconst flex_int16_t yy_chk[23013] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3, 1431,    3,    3,    4,    9,    4,    4,   10,   70,
       95,    3,    3,   70,  105,    4,    4,    5,  187,    5,
        5,   73,   73,    6,    3,    6,    6,  394,    4,    7,

        7,    7,    7,    7,    8,    8,    8,    8,    8,   74,
       59,    7,    7,   95,   81,    7,    8,    8,  187,  105,
        8,   15,  394,   74,   16,    7,   88,    5,    9,   81,
        8,   10,   15,    6,    9,   16,    3,   10,    3,    3,
        4,   15,    4,    4,   16,   65,   65,   65,   65,   65,
       88,   27,   27,   27,   27,   27,    5,   80,   99,   80,
       59, 1432,    6,   27,    7,   27,   27,   59,   96,    8,
       11,   11,   11,   11,   11,   11,  194,   27,   60,  103,
      194,   11,   99,   28,   28,   28,   28,   28,   35,   35,
       35,   35,   35,   35,   11,   28,   35,   28,   28,  103,

       89,   96,   35,   36,   36,   36,   36,   36,   36,   28,
       41,   36,   41,   41,  203,  151,  169,   36,  203,   42,
       89,   42,   42,   43, 1433,   43,   43,   89,   60,  151,
       43,  157,  157,   89,   43,   60,   11,   41,   11,   11,
       12,   12,   12,   12,   12,   12,   42,   43,   82,  169,
       82,   12,   49,   49,   49,   49,   49,   35,   49,  159,
      159,  173,   82,   49,   12,   50,   50,   50,   50,   50,
      163,   50,   36,  102,  215,   82,   50,  177,  215,   41,
       66,   66,   66,   66,   66,  173,  195,  195,   42,   43,
      163,   43,   43,   67,   67,   67,   67,   67,   68,   68,

       68,   68,   68,  163,  177,  102,   12,  102,   12,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       25,   25,   25,   25,   25,  188,   25,   44,  221,   44,
       44,   25,   25, 1434,   44,   92,   25,   90,   44,  136,
      176,  221,   53,   53,   53,   53,   53,  188,  236,  171,
      170,   44,  236,  136,   53,   54,   54,   54,   54,   54,

      136,   90,   97,   92,   25,   90,  164,   54,   92,   25,
       90,   92,  176,   25,  170,   25,   26,   26,   26,   26,
       26,   98,   26,  170,   97,  171,   87,   26,   26,  384,
       93,  172,   26,   44,  164,   44,   44,   53,   97,  164,
       53,   98,   84,   84,   84,   84,   84,   84,   98,  384,
       54,   87,  240,   54,   84,   93,   87,   98,   87, 1437,
       26,   93,   93,   87,   87,   26,  240,  172,   84,   26,
     1440,   26,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39, 1441,   39,   39,   39,   39,   39,
       39,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40, 1442,   40,   40,   40,   40,   40,   40,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       55,   55,   55,   55,   55,   55,   56,   56,   56,   56,
       56,   56,   75,   75,   75,   75,   75,   91,   55,   57,
       57,   57,   57,   57,   56,   57,  401,  101,   94,  257,
       57,   57,   58,   58,   58,   58,   58,  436,   58,  204,
      204,   57,  257,   58,   58,  216,  216,   91,   94,   91,
      401,  101,   94,   75,   58,  101,  246,   91,  258,   91,
      261,   94,  258,  101,   57,  239,  239,  249,  249,   55,
      101,  246,  251,  251,  261,   56,  436,   58,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  100,  104,
      112,  120,  120,  120,  120,  120,  121,  121,  121,  121,
      121,  122,  122,  122,  122,  122,  135, 1030,  100,  262,
      100,  166,  100,  104,  287, 1030,  162,  104,  262,  266,

      287,  100,  104,  262,  112,  146,  146,  146,  146,  146,
      112,  288,  289,  266,  112,  166,  112,  288,  289,  112,
      135,  141,  141,  141,  141,  141,  135,  165,  162,  166,
      135,  395,  135,  162,  162,  135,  147,  147,  147,  147,
      147,  167,  141,  148,  148,  148,  148,  148,  152,  152,
      152,  152,  152,  168,  174, 1070,  265,  165,  165,  271,
      175,  271,  165, 1070,  167,  265,  303,  303,  395,  165,
      259,  259,  259,  167,  174,  259,  174,  168,  167,  167,
      260,  382,  259,  382,  175,  260,  382,  175,  260,  152,
      260,  168,  174,  175,  329,  329,  175,  180,  180,  180,

      180,  180,  181,  181,  181,  181,  181,  182,  182,  182,
      182,  182,  191,  191,  191,  191,  191,  192,  192,  192,
      192,  192,  193,  193,  193,  193,  193,  200,  200,  200,
      200,  200,  201,  201,  201,  201,  201,  202,  202,  202,
      202,  202,  212,  212,  212,  212,  212,  213,  213,  213,
      213,  213,  214,  214,  214,  214,  214,  224,  224,  224,
      224,  224,  225,  225,  225,  225,  225,  226,  226,  226,
      226,  226,  232,  232,  232,  232,  232,  233,  233,  233,
      233,  233,  234,  234,  234,  234,  234,  241,  241,  241,
      241,  241,  255,  267,  263,  290,  291,  255,  263,  255,

      267,  290,  291, 1443,  255,  255,  269,  263,  269,  267,
      269,  328,  263,  270,  270,  328,  356,  272, 1444,  270,
      272,  272,  270,  350,  269,  356,  272,  350,  241,  277,
      277,  277,  277,  277,  278,  278,  278,  278,  278,  279,
      279,  279,  279,  279,  282,  282,  282,  282,  282,  283,
      283,  283,  283,  283,  284,  284,  284,  284,  284,  285,
      285,  285,  285,  285,  390,  307,  285,  292,  292,  292,
      292,  292,  293,  293,  293,  293,  293,  351,  351,  397,
      285,  296,  296,  296,  296,  296,  297,  297,  297,  297,
      297,  363, 1445,  296,  390,  363,  367,  367,  297,  307,

      311,  311,  311,  311,  311,  307,  413,  389,  488,  307,
      397,  307,  402,  397,  307,  312,  312,  312,  312,  312,
      313,  313,  313,  313,  313,  317,  317,  317,  317,  317,
      318,  318,  318,  318,  318,  319,  319,  319,  319,  319,
      326,  326,  326,  326,  326,  389,  326,  413,  488, 1446,
      402,  326,  327,  327,  327,  327,  327,  440,  327,  455,
      440, 1447,  455,  327,  331,  331,  331,  331,  331,  332,
      332,  332,  332,  332,  333,  333,  333,  333,  333,  337,
      337,  337,  337,  337,  338,  338,  338,  338,  338,  339,
      339,  339,  339,  339,  348,  348,  348,  348,  348,  349,

      349,  349,  349,  349,  365,  368,  348,  405,  407,  396,
      400,  349,  360,  360,  360,  360,  360,  361,  361,  361,
      361,  361,  362,  362,  362,  362,  362,  372,  372,  372,
      372,  372,  400,  409,  376,  379,  391,  396,  365,  368,
      406,  407,  403,  405,  365,  368,  376,  379,  365,  368,
      365,  368,  404,  365,  368,  380,  499,  380,  391,  376,
      379,  383,  383,  383,  383,  383,  403,  409,  372,  380,
      406,  524,  404,  383,  655,  524,  406,  655,  414,  391,
      499,  410,  380,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  414,  392,  392,  398,  392,  392,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  399,  410,  410,
      412,  392,  392,  392,  393,  411,  398,  408,  408,  408,
      408,  408,  415,  393,  398,  422,  417,  399,  418,  408,
      419,  398,  399,  416,  420,  423,  429,  426,  408,  392,
      392,  392,  392,  421,  399,  415,  424,  411,  412,  417,
      412,  425,  411,  427,  428,  416,  422,  430,  420,  431,
      415,  393,  423,  433,  418,  432,  419,  420,  423,  434,
      429,  439,  435,  421,  454,  421,  424,  421,  424,  426,
      460,  602,  425,  602,  427,  449,  449,  449,  449,  449,

      430,  433,  483,  431,  486,  432, 1448,  428,  487,  491,
      460,  434,  465,  465,  465,  465,  465,  434,  435,  466,
      466,  466,  466,  466,  439,  483,  489,  454,  470,  470,
      470,  470,  470,  474,  474,  474,  474,  474,  496,  487,
      466,  486,  502,  491,  504,  591,  509,  591,  489,  517,
      517,  517,  517,  517,  523,  523,  523,  523,  523,  527,
      527,  536,  536,  591,  533,  502,  496,  504,  533,  490,
      507,  506,  508,  509,  474,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  490,  484,  484,  493,  484,  484,  484,

      484,  484,  484,  484,  506,  510,  490,  512,  507,  514,
      508,  515,  516,  484,  484,  484,  521,  601,  493,  543,
      559,  511,  601,  543,  559,  510,  532,  532,  532,  532,
      532,  512,  708,  514,  493,  708,  516,  546,  546,  515,
      521,  484,  484,  484,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  511,  485,  485,  522,  485,  485,  485,
      485,  485,  485,  485,  542,  542,  542,  542,  542,  563,
      563,  579, 1449,  485,  485,  485,  555,  555,  555,  555,
      555,  583,  583,  522,  557,  557,  557,  557,  557,  584,

      671,  579,  744,  584,  671,  485,  568,  568,  568,  568,
      568,  485,  485,  485,  485,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  744,  492,  492,  654,  492,  492,  492,
      492,  492,  492,  492,  599,  599, 1452,  568,  581,  581,
      581,  581,  581,  492,  492,  492,  585,  586,  748,  585,
      581,  613,  586,  613,  585,  613,  614,  650,  650,  613,
      626,  585,  637,  614,  586,  753,  626,  586,  637,  654,
      748,  492,  492,  492,  492,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  617,  494,  494,  753,  494,  494,  494,
      494,  494,  494,  494,  629,  629,  629,  629,  629,  617,
      672,  672,  754,  494,  494,  494,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  638,  639,  640,  676,
      676,  882,  638,  639,  640,  642,  642,  642,  642,  642,
      754,  494,  494,  494,  494,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  882,  495,  495,  707,  495,  495,  495,
      495,  495,  495,  495,  635,  635,  635,  635,  635,  696,
      696,  635,  795,  495,  495,  495,  644,  644,  644,  644,

      644,  714,  673,  693,  714,  635,  673,  693,  644,  662,
      662,  662,  662,  662,  666,  666,  666,  666,  666,  707,
      795,  495,  495,  495,  495,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  713,  498,  498,  757,  498,  498,  498,
      498,  498,  498,  498,  740,  670,  670,  670,  670,  670,
      750,  670, 1453,  498,  498,  498,  670,  679,  679,  679,
      679,  679,  683,  683,  683,  683,  683,  691,  691,  691,
      691,  691,  722,  757,  722,  750,  713,  722,  745,  691,
      740,  498,  498,  498,  498,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  723,  500,  500,  731,  500,  500,  500,
      500,  500,  500,  500,  733,  723,  741,  742,  743,  747,

      746,  745,  749,  500,  500,  500,  777,  773,  723,  773,
      731,  801,  811,  801,  811,  751,  893,  752,  733,  893,
     1454,  742,  899,  747,  749,  899,  777, 1457,  743,  741,
      746,  500,  500,  500,  500,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  751,  501,  501,  752,  501,  501,  501,
      501,  501,  501,  501,  755,  756,  758,  759,  759,  759,
      759,  759,  766,  501,  501,  501,  958,  905, 1458,  759,
      905,  761,  761,  761,  761,  761,  911,  756,  759,  911,
      958,  919,  760,  761,  919, 1459,  758,  774,  766,  767,

      755,  501,  501,  501,  501,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  760,  503,  503,  763,  503,  503,  503,
      503,  503,  503,  503,  764,  765,  774,  767,  769,  770,
      772,  780,  775,  503,  503,  503,  783,  781,  768,  768,
      768,  768,  768,  820,  820,  820,  820,  820,  764,  763,
      768,  780,  769,  770,  772,  771,  775,  781,  765,  768,
      783,  503,  503,  503,  503,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  771,  505,  505,  778,  505,  505,  505,

      505,  505,  505,  505,  771,  776,  779,  782,  784,  786,
      797,  788,  796,  505,  505,  505,  790,  933,  778,  925,
      505,  936,  925,  933,  936,  776, 1112,  785,  779,  776,
     1112, 1461,  784,  797,  786,  788,  787,  782,  796,  789,
      790,  505,  505,  505,  505,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  785,  513,  513,  792,  513,  513,  513,
      513,  513,  513,  513,  787,  526,  528,  789,  794,  798,
      799,  793,  876,  513,  513,  513,  880, 1028, 1465,  535,
      792,  832,  836, 1028,  800,  834,  537,  837,  888,  839,

      877,  851,  794,  799,  876, 1466,  798,  880,  838,  526,
      528,  513,  513,  513,  513,  526,  528,  793,  800,  526,
      528,  526,  528,  535,  526,  528,  834,  832,  837,  535,
      537,  836,  838,  535,  888,  535,  537,  839,  535,  877,
      537,  851,  537,  545,  855,  537,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  833,  541,  541,  843,  541,  541,
      541,  541,  541,  541,  541,  844,  547,  545,  860,  856,
      871,  875,  855,  545,  541,  541,  541,  545,  833,  545,
      561,  843,  545,  878,  985,  881,  887,  564,  675,  844,

     1113, 1113,  833,  856,  871,  875,  892,  886,  985,  860,
      547,  677,  541,  541,  541,  541,  547,  890,  695,  697,
      547,  878,  547, 1467,  561,  547,  879,  886, 1468,  887,
      561,  564,  675,  881,  561, 1469,  561,  564,  675,  561,
     1470,  564,  675,  564,  675,  677,  564,  675,  890,  892,
      879,  677,  695,  697, 1031,  677, 1031,  677,  695,  697,
      677,  898,  695,  697,  695,  697,  891,  695,  697,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  904,  732,  732,
      891,  732,  732,  732,  732,  732,  732,  732, 1098,  828,

      828,  828,  828,  828,  898,  828, 1098,  732,  732,  732,
      828,  828,  942, 1041,  910,  942, 1041,  918, 1475,  947,
      947,  947,  947,  947,  986,  924,  935,  941, 1476, 1047,
      904,  947, 1047,  986, 1479,  732,  732,  732,  732,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  910,  734,  734,
      918,  734,  734,  734,  734,  734,  734,  734,  924,  935,
      941,  949,  949,  949,  949,  949, 1040,  734,  734,  734,
     1078, 1106, 1078,  949,  951,  951,  951,  951,  951,  955,
      955,  955,  955,  955, 1046, 1057,  951, 1058, 1494, 1063,

     1058,  955, 1085, 1100, 1085,  734,  734,  734,  734,  738,
      738,  738,  738,  738, 1064,  738, 1119, 1064, 1106, 1040,
      738,  738, 1120,  978,  978,  978,  978,  978, 1122, 1027,
     1027, 1027, 1027, 1027,  955,  978, 1027, 1046, 1057, 1100,
      955,  955, 1063, 1125, 1119, 1208, 1130,  955, 1247, 1208,
     1247, 1122, 1209, 1209,  738, 1254, 1496, 1254, 1120, 1497,
      738,  738, 1123, 1125, 1126, 1127, 1130,  738,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791, 1123,  791,  791, 1127,
      791,  791,  791,  791,  791,  791,  791,  991,  991,  991,

      991,  991, 1126, 1129, 1132, 1151,  791,  791,  791,  991,
     1121, 1121, 1121, 1121, 1121, 1463, 1463, 1138, 1138, 1138,
     1138, 1138, 1121, 1498, 1261, 1138, 1261, 1129, 1132, 1138,
     1151, 1121, 1503, 1504,  791,  791,  791,  791,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835, 1131,  835,  835, 1128,
      835,  835,  835,  835,  835,  835,  835, 1102, 1102, 1102,
     1102, 1102, 1149, 1152, 1160, 1157,  835,  835,  835, 1102,
     1108, 1108, 1108, 1108, 1108, 1471, 1268, 1131, 1268, 1275,
     1133, 1275, 1108, 1471, 1282, 1128, 1282, 1295, 1160, 1295,
     1134, 1157, 1149, 1152,  835,  835,  835,  835,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867, 1133,  867,  867, 1102,

      867,  867,  867,  867,  867,  867,  867, 1124, 1124, 1124,
     1124, 1124, 1108, 1134, 1135, 1136,  867,  867,  867, 1124,
     1507, 1137, 1146, 1146, 1146, 1146, 1146, 1161, 1124, 1153,
     1153, 1153, 1153, 1153, 1146, 1460, 1302, 1142, 1302, 1460,
     1143, 1153, 1509, 1146,  867,  867,  867,  867, 1145, 1150,
     1153, 1161, 1135, 1136, 1137, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1142, 1140, 1140, 1143, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1155, 1150, 1158, 1145, 1147, 1147,
     1147, 1147, 1147, 1140, 1140, 1140, 1147, 1164, 1516, 1226,

     1147, 1201, 1201, 1201, 1201, 1201, 1402, 1156, 1402, 1159,
     1409, 1419, 1409, 1419, 1528, 1529, 1162, 1164, 1158, 1226,
     1155, 1140, 1140, 1140, 1140, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1156, 1144, 1144, 1159, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1162, 1163, 1166, 1167, 1169, 1472,
     1177, 1179, 1180, 1144, 1144, 1144, 1215, 1170, 1170, 1170,
     1170, 1170, 1426, 1535, 1426, 1548, 1172, 1499, 1549, 1170,
     1472, 1167, 1169, 1177, 1179, 1499, 1163, 1166, 1170, 1180,
     1215, 1144, 1144, 1144, 1144, 1165, 1165, 1165, 1165, 1165,

     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1172, 1165, 1165, 1176, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1171, 1171, 1171, 1171, 1171, 1178,
     1183, 1212, 1184, 1165, 1165, 1165, 1171, 1181, 1207, 1207,
     1207, 1207, 1207, 1219, 1207, 1171, 1223, 1220, 1224, 1207,
     1207, 1227, 1233, 1176, 1228, 1228, 1228, 1228, 1228, 1212,
     1511, 1165, 1165, 1165, 1165, 1178, 1228, 1183, 1184, 1550,
     1181, 1220, 1235, 1554, 1219, 1228, 1222, 1555, 1532, 1556,
     1223, 1557, 1511, 1558, 1224, 1532, 1560, 1227, 1233, 1171,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,

     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1235, 1182,
     1182, 1234, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1222,
     1232, 1232, 1232, 1232, 1232, 1238, 1243, 1245, 1182, 1182,
     1182, 1564, 1232, 1505, 1565, 1234, 1309, 1309, 1309, 1309,
     1309, 1232, 1559, 1569, 1236, 1182, 1559, 1237, 1309, 1572,
     1243, 1245, 1578, 1505, 1492, 1238, 1182, 1182, 1182, 1182,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1237, 1213,
     1213, 1236, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
     1214, 1214, 1214, 1214, 1246, 1492, 1483, 1473, 1213, 1213,

     1213, 1214, 1239, 1239, 1239, 1239, 1239, 1562, 1562, 1580,
     1214, 1241, 1584, 1580, 1239, 1392, 1392, 1392, 1392, 1392,
     1242, 1473, 1392, 1239, 1483, 1246, 1213, 1213, 1213, 1213,
     1214, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1241,
     1221, 1221, 1242, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1313, 1313, 1313, 1313, 1313, 1481, 1490, 1486, 1488, 1221,
     1221, 1221, 1313, 1317, 1317, 1317, 1317, 1317, 1328, 1328,
     1328, 1328, 1328, 1601, 1608, 1317, 1566, 1477, 1609, 1481,
     1328, 1486, 1488, 1512, 1566, 1610, 1490, 1221, 1221, 1221,

     1221, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1477,
     1225, 1225, 1313, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1332, 1332, 1332, 1332, 1332, 1317, 1512, 1526, 1513, 1225,
     1225, 1225, 1332, 1522, 1530, 1611, 1612, 1613, 1329, 1329,
     1329, 1329, 1329, 1348, 1348, 1348, 1348, 1348, 1614, 1526,
     1329, 1348, 1513, 1615, 1530, 1348, 1522, 1225, 1225, 1225,
     1225, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1329,
     1240, 1240, 1480, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1320, 1320, 1320, 1320, 1320, 1484, 1455, 1616, 1500, 1240,
     1240, 1240, 1320, 1358, 1358, 1358, 1358, 1358, 1359, 1359,
     1359, 1359, 1359, 1462, 1482, 1358, 1359, 1485, 1480, 1487,
     1359, 1389, 1389, 1389, 1389, 1389, 1501, 1240, 1240, 1240,
     1240, 1484, 1510, 1389, 1455, 1320, 1500, 1517, 1533, 1518,
     1524, 1320, 1320, 1521, 1617, 1543, 1482, 1462, 1320, 1485,
     1542, 1487, 1567, 1462, 1618, 1619, 1620, 1462, 1621, 1462,
     1622, 1623, 1462, 1518, 1501, 1543, 1359, 1521, 1524, 1510,
     1533, 1624, 1542, 1567, 1517, 1389, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451,
     1451, 1456, 1456, 1456, 1456, 1456, 1464, 1519, 1451, 1520,
     1540, 1523, 1545, 1456, 1525, 1474, 1474, 1474, 1474, 1474,
     1478, 1478, 1478, 1478, 1478, 1541, 1625, 1474, 1478, 1553,
     1574, 1551, 1478, 1489, 1489, 1489, 1489, 1489, 1525, 1573,

     1464, 1596, 1576, 1519, 1626, 1489, 1464, 1520, 1523, 1541,
     1464, 1540, 1464, 1545, 1489, 1464, 1582, 1586, 1451, 1575,
     1573, 1596, 1574, 1456, 1474, 1491, 1491, 1491, 1491, 1491,
     1551, 1627, 1553, 1474, 1576, 1594, 1544, 1491, 1506, 1506,
     1506, 1506, 1506, 1575, 1581, 1606, 1491, 1587, 1582, 1586,
     1506, 1514, 1514, 1514, 1514, 1514, 1534, 1534, 1534, 1534,
     1534, 1595, 1628, 1514, 1534, 1629, 1630, 1594, 1534, 1536,
     1536, 1536, 1536, 1536, 1544, 1631, 1632, 1606, 1633, 1634,
     1635, 1536, 1581, 1636, 1587, 1593, 1595, 1506, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,

     1531, 1531, 1531, 1531, 1531, 1531, 1597, 1531, 1531, 1637,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1588, 1588, 1588,
     1588, 1588, 1593, 1638, 1639, 1607, 1531, 1531, 1531, 1588,
     1597, 1640, 1641, 1642, 1536, 1571, 1571, 1571, 1571, 1571,
     1589, 1589, 1589, 1589, 1589, 1607, 1643, 1571, 1644, 1645,
     1646, 1649, 1589, 1589, 1531, 1531, 1531, 1531, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1571, 1539, 1539, 1650,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1547, 1547, 1547,
     1547, 1547, 1651, 1653, 1561, 1563, 1539, 1539, 1539, 1547,

     1590, 1590, 1590, 1590, 1590, 1598, 1598, 1598, 1598, 1598,
     1654, 1655, 1590, 1656, 1657, 1658, 1659, 1598, 1660, 1661,
     1663, 1666, 1662, 1668, 1539, 1539, 1539, 1539, 1561, 1563,
     1662, 1547, 1669, 1671, 1561, 1563, 1672, 1673, 1561, 1563,
     1561, 1563, 1674, 1561, 1563, 1547, 1547, 1675, 1676, 1547,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1677, 1552,
     1552, 1678, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1592,
     1592, 1592, 1592, 1592, 1681, 1682, 1683, 1684, 1552, 1552,
     1552, 1592, 1603, 1603, 1603, 1603, 1603, 1687, 1689, 1691,

     1592, 1692, 1693, 1694, 1603, 1696, 1697, 1698, 1699, 1700,
     1701, 1702, 1704, 1603, 1705, 1706, 1552, 1552, 1552, 1552,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1707, 1604,
     1604, 1708, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1648,
     1648, 1648, 1648, 1648, 1709, 1710, 1712, 1714, 1604, 1604,
     1604, 1648, 1652, 1652, 1652, 1652, 1652, 1667, 1667, 1667,
     1667, 1667, 1715, 1721, 1652, 1722, 1724, 1726, 1727, 1667,
     1729, 1730, 1731, 1732, 1733, 1734, 1604, 1604, 1604, 1604,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,

     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1667, 1605,
     1605, 1648, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1665,
     1665, 1665, 1665, 1665, 1652, 1735, 1736, 1737, 1605, 1605,
     1605, 1665, 1670, 1670, 1670, 1670, 1670, 1680, 1680, 1680,
     1680, 1680, 1738, 1740, 1670, 1741, 1742, 1743, 1744, 1680,
     1685, 1685, 1685, 1685, 1685, 1745, 1605, 1605, 1605, 1605,
     1746, 1747, 1685, 1703, 1703, 1703, 1703, 1703, 1665, 1719,
     1719, 1719, 1719, 1719, 1748, 1703, 1750, 1665, 1751, 1753,
     1754, 1719, 1725, 1725, 1725, 1725, 1725, 1755, 1756, 1757,
     1758, 1759, 1760, 1761, 1725, 1762, 1763, 1757, 1764, 1763,

     1765, 1761, 1766, 1767, 1768, 1769, 1770, 1771, 1769, 1772,
     1773, 1775, 1776, 1777, 1778, 1779, 1781, 1782, 1783, 1787,
     1784, 1788, 1798, 1758, 1801, 1790, 1725, 1784, 1792, 1803,
     1789, 1789, 1789, 1789, 1789, 1785, 1805, 1809, 1762, 1810,
     1725, 1725, 1789, 1799, 1725, 1788, 1791, 1768, 1790, 1795,
     1811, 1789, 1792, 1794, 1779, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1785, 1780, 1780, 1793, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1791, 1794, 1799, 1795, 1796, 1796,
     1796, 1796, 1796, 1780, 1780, 1780, 1817, 1802, 1793, 1804,

     1796, 1821, 1797, 1797, 1797, 1797, 1797, 1804, 1830, 1796,
     1797, 1824, 1808, 1831, 1797, 1800, 1800, 1800, 1800, 1800,
     1819, 1780, 1780, 1780, 1780, 1802, 1814, 1800, 1806, 1806,
     1806, 1806, 1806, 1807, 1807, 1807, 1807, 1807, 1808, 1812,
     1806, 1820, 1835, 1819, 1837, 1807, 1814, 1812, 1824, 1806,
     1838, 1846, 1828, 1825, 1807, 1823, 1828, 1848, 1847, 1849,
     1850, 1820, 1847, 1851, 1800, 1813, 1813, 1813, 1813, 1813,
     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,
     1813, 1813, 1813, 1823, 1813, 1813, 1825, 1813, 1813, 1813,
     1813, 1813, 1813, 1813, 1816, 1816, 1816, 1816, 1816, 1827,

     1833, 1839, 1854, 1813, 1813, 1813, 1816, 1826, 1826, 1826,
     1826, 1826, 1855, 1857, 1858, 1816, 1859, 1840, 1861, 1826,
     1862, 1861, 1833, 1827, 1863, 1864, 1842, 1852, 1826, 1839,
     1865, 1813, 1813, 1813, 1813, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1840, 1815, 1815, 1841, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1842, 1852, 1856, 1856, 1856, 1856,
     1856, 1868, 1869, 1815, 1815, 1815, 1841, 1870, 1856, 1845,
     1845, 1845, 1845, 1845, 1871, 1867, 1872, 1856, 1867, 1874,
     1875, 1845, 1860, 1866, 1886, 1873, 1876, 1889, 1896, 1898,

     1901, 1815, 1815, 1815, 1815, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1845, 1818, 1818, 1876, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1873, 1860, 1866, 1845, 1845, 1882,
     1883, 1845, 1905, 1818, 1818, 1818, 1884, 1906, 1885, 1885,
     1885, 1885, 1885, 1893, 1904, 1877, 1907, 1893, 1904, 1882,
     1885, 1885, 1883, 1908, 1878, 1909, 1879, 1910, 1880, 1890,
     1884, 1818, 1818, 1818, 1818, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1877, 1822, 1822, 1878, 1822, 1822, 1822,

     1822, 1822, 1822, 1822, 1879, 1880, 1890, 1892, 1894, 1894,
     1894, 1894, 1894, 1822, 1822, 1822, 1911, 1913, 1912, 1914,
     1894, 1888, 1888, 1888, 1888, 1888, 1912, 1916, 1903, 1894,
     1915, 1917, 1918, 1888, 1919, 1892, 1921, 1922, 1915, 1923,
     1918, 1822, 1822, 1822, 1822, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1888, 1843, 1843, 1903, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1924, 1927, 1928, 1929, 1930, 1931,
     1932, 1933, 1936, 1843, 1843, 1843, 1937, 1926, 1926, 1926,
     1926, 1926, 1895, 1895, 1895, 1895, 1895, 1938, 1940, 1926,

     1941, 1942, 1943, 1945, 1895, 1947, 1949, 1950, 1952, 1954,
     1955, 1843, 1843, 1843, 1843, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 1895, 1844, 1844, 1926, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1951, 1926, 1934, 1934, 1934, 1934,
     1934, 1956, 1951, 1844, 1844, 1844, 1957, 1958, 1934, 1939,
     1939, 1939, 1939, 1939, 1946, 1946, 1946, 1946, 1946, 1959,
     1961, 1939, 1963, 1966, 1967, 1969, 1946, 1959, 1970, 1972,
     1974, 1844, 1844, 1844, 1844, 1881, 1881, 1881, 1881, 1881,
     1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881,

     1881, 1881, 1881, 1976, 1881, 1881, 1981, 1881, 1881, 1881,
     1881, 1881, 1881, 1881, 1953, 1953, 1953, 1953, 1953, 1983,
     1988, 1990, 1991, 1881, 1881, 1881, 1953, 1992, 1993, 1994,
     1996, 1965, 1965, 1965, 1965, 1965, 1998, 1944, 1944, 1944,
     1944, 1944, 1989, 1965, 2000, 2001, 1989, 2002, 2004, 1944,
     2003, 1881, 1881, 1881, 1881, 1891, 1891, 1891, 1891, 1891,
     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1891, 1891, 1891, 1965, 1891, 1891, 2005, 1891, 1891, 1891,
     1891, 1891, 1891, 1891, 1944, 2006, 2003, 2006, 1944, 2008,
     2009, 2010, 2011, 1891, 1891, 1891, 1971, 1971, 1971, 1971,

     1971, 1977, 1977, 1977, 1977, 1977, 2012, 2013, 1971, 2013,
     2015, 2016, 2017, 1977, 1980, 1980, 1980, 1980, 1980, 2018,
     2019, 1891, 1891, 1891, 1891, 2021, 1980, 1987, 1987, 1987,
     1987, 1987, 2023, 2026, 2024, 2027, 2028, 2029, 2030, 1987,
     2031, 2033, 2033, 2033, 2033, 2033, 2034, 2038, 2031, 2035,
     2039, 2041, 2043, 2033, 2040, 1980, 2046, 2035, 2048, 2050,
     2051, 2053, 2033, 2036, 2036, 2036, 2036, 2036, 2042, 2055,
     2039, 1987, 2024, 2057, 2059, 2036, 2037, 2037, 2037, 2037,
     2037, 2052, 2040, 2041, 2036, 1987, 1987, 2058, 2037, 1987,
     2043, 2060, 2042, 2044, 2044, 2044, 2044, 2044, 2045, 2045,

     2045, 2045, 2045, 2062, 2061, 2044, 2033, 2064, 2065, 2068,
     2045, 2058, 2061, 2052, 2044, 2066, 2069, 2071, 2072, 2074,
     2075, 2077, 2080, 2078, 2081, 2082, 2086, 2088, 2083, 2037,
     2078, 2090, 2097, 2098, 2100, 2101, 2054, 2054, 2054, 2054,
     2054, 2045, 2056, 2056, 2056, 2056, 2056, 2088, 2054, 2102,
     2103, 2088, 2066, 2105, 2056, 2077, 2083, 2082, 2044, 2049,
     2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049,
     2049, 2049, 2049, 2049, 2049, 2049, 2049, 2084, 2049, 2049,
     2106, 2049, 2049, 2049, 2049, 2049, 2049, 2049, 2054, 2070,
     2070, 2070, 2070, 2070, 2054, 2056, 2092, 2049, 2049, 2049,

     2089, 2070, 2076, 2076, 2076, 2076, 2076, 2091, 2093, 2084,
     2085, 2085, 2085, 2085, 2085, 2091, 2094, 2087, 2087, 2087,
     2087, 2087, 2085, 2076, 2089, 2049, 2049, 2049, 2049, 2087,
     2095, 2104, 2093, 2107, 2092, 2108, 2111, 2113, 2087, 2114,
     2104, 2117, 2070, 2108, 2109, 2109, 2109, 2109, 2109, 2115,
     2118, 2115, 2119, 2094, 2095, 2120, 2109, 2110, 2110, 2110,
     2110, 2110, 2121, 2085, 2122, 2109, 2122, 2076, 2124, 2110,
     2125, 2126, 2127, 2128, 2129, 2131, 2132, 2133, 2134, 2134,
     2134, 2134, 2134, 2135, 2132, 2136, 2136, 2136, 2136, 2136,
     2134, 2137, 2139, 2141, 2143, 2142, 2144, 2136, 2145, 2134,

     2146, 2133, 2147, 2149, 2151, 2152, 2136, 2154, 2155, 2156,
     2161, 2162, 2129, 2163, 2164, 2137, 2143, 2165, 2110, 2142,
     2166, 2135, 2167, 2141, 2168, 2152, 2169, 2170, 2151, 2152,
     2147, 2153, 2153, 2153, 2153, 2153, 2157, 2157, 2157, 2157,
     2157, 2172, 2174, 2153, 2175, 2176, 2177, 2178, 2157, 2158,
     2158, 2158, 2158, 2158, 2180, 2178, 2182, 2157, 2183, 2181,
     2186, 2158, 2159, 2159, 2159, 2159, 2159, 2181, 2187, 2188,
     2158, 2189, 2190, 2191, 2159, 2184, 2184, 2184, 2184, 2184,
     2192, 2194, 2197, 2198, 2199, 2153, 2200, 2184, 2193, 2193,
     2193, 2193, 2193, 2201, 2158, 2202, 2203, 2204, 2206, 2207,

     2193, 2209, 2210, 2211, 2213, 2214, 2215, 2215, 2215, 2215,
     2215, 2217, 2218, 2219, 2219, 2219, 2219, 2219, 2215, 2220,
     2221, 2222, 2223, 2226, 2227, 2219, 2228, 2229, 2230, 2231,
     2232, 2193, 2234, 2235, 2237, 2228, 2238, 2241, 2232, 2233,
     2233, 2233, 2233, 2233, 2239, 2242, 2243, 2244, 2239, 2245,
     2246, 2233, 2247, 2248, 2252, 2253, 2254, 2255, 2256, 2256,
     2256, 2256, 2256, 2259, 2261, 2262, 2263, 2219, 2264, 2265,
     2256, 2266, 2268, 2268, 2268, 2268, 2268, 2270, 2252, 2272,
     2269, 2269, 2269, 2269, 2269, 2273, 2274, 2275, 2277, 2268,
     2278, 2265, 2269, 2268, 2279, 2275, 2280, 2281, 2283, 2284,

     2264, 2285, 2286, 2282, 2287, 2281, 2289, 2290, 2291, 2266,
     2292, 2293, 2294, 2297, 2295, 2295, 2295, 2295, 2295, 2300,
     2299, 2301, 2302, 2256, 2260, 2260, 2260, 2260, 2260, 2282,
     2303, 2305, 2291, 2306, 2307, 2309, 2260, 2268, 2310, 2311,
     2297, 2312, 2314, 2315, 2316, 2269, 2299, 2317, 2318, 2319,
     2320, 2300, 2322, 2323, 2324, 2326, 2327, 2328, 2301, 2329,
     2310, 2330, 2311, 2331, 2307, 2312, 2260, 2260, 2260, 2332,
     2260, 2306, 2333, 2334, 2335, 2338, 2349, 2260, 2260, 2295,
     2336, 2260, 2345, 2348, 2260, 2260, 2267, 2267, 2267, 2267,
     2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,

     2267, 2267, 2267, 2267, 2336, 2267, 2267, 2352, 2267, 2267,
     2267, 2267, 2267, 2267, 2267, 2342, 2358, 2345, 2354, 2342,
     2359, 2348, 2361, 2367, 2267, 2267, 2267, 2313, 2313, 2313,
     2313, 2313, 2304, 2304, 2304, 2304, 2304, 2350, 2353, 2313,
     2355, 2362, 2369, 2370, 2304, 2350, 2353, 2371, 2313, 2362,
     2354, 2373, 2267, 2267, 2267, 2267, 2288, 2288, 2288, 2288,
     2288, 2288, 2288, 2288, 2288, 2288, 2288, 2288, 2288, 2288,
     2288, 2288, 2288, 2288, 2356, 2288, 2288, 2355, 2288, 2288,
     2288, 2288, 2288, 2288, 2288, 2304, 2339, 2339, 2339, 2339,
     2339, 2357, 2313, 2304, 2288, 2288, 2288, 2375, 2339, 2340,

     2340, 2340, 2340, 2340, 2379, 2380, 2381, 2339, 2383, 2385,
     2387, 2340, 2356, 2389, 2365, 2390, 2391, 2393, 2394, 2395,
     2397, 2357, 2288, 2288, 2288, 2288, 2308, 2308, 2308, 2308,
     2308, 2308, 2308, 2308, 2308, 2308, 2308, 2308, 2308, 2308,
     2308, 2308, 2308, 2308, 2365, 2308, 2308, 2398, 2308, 2308,
     2308, 2308, 2308, 2308, 2308, 2343, 2343, 2343, 2343, 2343,
     2401, 2403, 2405, 2406, 2308, 2308, 2308, 2343, 2347, 2347,
     2347, 2347, 2347, 2396, 2363, 2363, 2363, 2363, 2363, 2407,
     2347, 2396, 2409, 2410, 2411, 2308, 2363, 2413, 2414, 2347,
     2415, 2410, 2308, 2308, 2308, 2308, 2321, 2321, 2321, 2321,

     2321, 2366, 2366, 2366, 2366, 2366, 2416, 2417, 2321, 2419,
     2421, 2420, 2422, 2366, 2384, 2384, 2384, 2384, 2384, 2420,
     2423, 2424, 2425, 2426, 2427, 2428, 2384, 2430, 2441, 2436,
     2442, 2386, 2386, 2386, 2386, 2386, 2436, 2443, 2444, 2321,
     2321, 2445, 2447, 2386, 2446, 2446, 2366, 2435, 2449, 2448,
     2443, 2448, 2450, 2451, 2321, 2321, 2452, 2453, 2321, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2386, 2346, 2346,
     2435, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2402, 2402,
     2402, 2402, 2402, 2454, 2460, 2466, 2456, 2346, 2346, 2346,

     2402, 2440, 2440, 2440, 2440, 2440, 2455, 2467, 2461, 2468,
     2463, 2470, 2471, 2440, 2455, 2461, 2462, 2462, 2462, 2462,
     2462, 2472, 2440, 2474, 2475, 2346, 2346, 2346, 2346, 2429,
     2429, 2429, 2429, 2429, 2456, 2457, 2457, 2457, 2457, 2457,
     2469, 2429, 2463, 2476, 2478, 2473, 2479, 2457, 2469, 2473,
     2465, 2465, 2465, 2465, 2465, 2477, 2457, 2480, 2482, 2486,
     2483, 2487, 2488, 2477, 2491, 2480, 2440, 2483, 2491, 2494,
     2488, 2465, 2429, 2429, 2495, 2496, 2497, 2498, 2499, 2503,
     2510, 2462, 2512, 2496, 2513, 2504, 2492, 2429, 2429, 2500,
     2514, 2429, 2504, 2457, 2458, 2458, 2458, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458,
     2458, 2458, 2492, 2458, 2458, 2465, 2458, 2458, 2458, 2458,
     2458, 2458, 2458, 2493, 2501, 2506, 2516, 2500, 2517, 2518,
     2519, 2520, 2458, 2458, 2458, 2507, 2507, 2507, 2507, 2507,
     2521, 2522, 2523, 2509, 2509, 2509, 2509, 2509, 2501, 2524,
     2493, 2525, 2506, 2531, 2535, 2509, 2507, 2538, 2540, 2542,
     2458, 2458, 2458, 2458, 2485, 2485, 2485, 2485, 2485, 2485,
     2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485,
     2485, 2485, 2547, 2485, 2485, 2526, 2485, 2485, 2485, 2485,
     2485, 2485, 2485, 2526, 2509, 2515, 2515, 2515, 2515, 2515,

     2507, 2509, 2485, 2485, 2485, 2548, 2551, 2515, 2509, 2533,
     2553, 2530, 2530, 2530, 2530, 2530, 2533, 2537, 2537, 2537,
     2537, 2537, 2543, 2530, 2554, 2556, 2557, 2564, 2543, 2537,
     2485, 2485, 2485, 2485, 2490, 2490, 2490, 2490, 2490, 2490,
     2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
     2490, 2490, 2530, 2490, 2490, 2552, 2490, 2490, 2490, 2490,
     2490, 2490, 2490, 2529, 2529, 2529, 2529, 2529, 2565, 2546,
     2545, 2537, 2490, 2490, 2490, 2529, 2545, 2546, 2549, 2552,
     2567, 2569, 2570, 2571, 2529, 2572, 2549, 2575, 2576, 2577,
     2578, 2579, 2582, 2584, 2591, 2594, 2598, 2599, 2602, 2604,

     2490, 2490, 2490, 2490, 2505, 2505, 2505, 2505, 2505, 2505,
     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
     2505, 2505, 2605, 2505, 2505, 2580, 2505, 2505, 2505, 2505,
     2505, 2505, 2505, 2580, 2587, 2587, 2587, 2587, 2587, 2600,
     2606, 2608, 2505, 2505, 2505, 2609, 2587, 2600, 2610, 2611,
     2612, 2566, 2566, 2566, 2566, 2566, 2583, 2583, 2583, 2583,
     2583, 2613, 2614, 2566, 2615, 2622, 2625, 2626, 2583, 2627,
     2505, 2505, 2505, 2505, 2508, 2508, 2508, 2508, 2508, 2508,
     2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508,
     2508, 2508, 2566, 2508, 2508, 2619, 2508, 2508, 2508, 2508,

     2508, 2508, 2508, 2532, 2532, 2532, 2532, 2532, 2628, 2629,
     2583, 2629, 2508, 2508, 2508, 2532, 2607, 2607, 2607, 2607,
     2607, 2630, 2623, 2631, 2532, 2632, 2633, 2634, 2607, 2623,
     2635, 2619, 2636, 2621, 2621, 2621, 2621, 2621, 2637, 2638,
     2508, 2508, 2508, 2508, 2639, 2621, 2640, 2641, 2642, 2643,
     2645, 2648, 2655, 2643, 2640, 2657, 2532, 2539, 2539, 2539,
     2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539,
     2539, 2539, 2539, 2539, 2539, 2650, 2539, 2539, 2658, 2539,
     2539, 2539, 2539, 2539, 2539, 2539, 2649, 2644, 2644, 2644,
     2644, 2644, 2662, 2649, 2663, 2539, 2539, 2539, 2621, 2644,

     2646, 2646, 2646, 2646, 2646, 2664, 2665, 2666, 2650, 2669,
     2656, 2660, 2646, 2651, 2651, 2651, 2651, 2651, 2656, 2671,
     2672, 2646, 2675, 2539, 2539, 2539, 2539, 2544, 2544, 2544,
     2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544,
     2544, 2544, 2544, 2544, 2544, 2644, 2544, 2544, 2660, 2544,
     2544, 2544, 2544, 2544, 2544, 2544, 2652, 2652, 2652, 2652,
     2652, 2661, 2670, 2676, 2677, 2544, 2544, 2544, 2661, 2670,
     2676, 2679, 2678, 2681, 2680, 2679, 2682, 2652, 2651, 2678,
     2683, 2684, 2685, 2686, 2687, 2688, 2690, 2696, 2698, 2699,
     2691, 2686, 2697, 2544, 2544, 2544, 2544, 2691, 2699, 2697,

     2700, 2677, 2680, 2692, 2692, 2692, 2692, 2692, 2693, 2693,
     2693, 2693, 2693, 2701, 2702, 2692, 2688, 2703, 2705, 2706,
     2687, 2652, 2707, 2708, 2692, 2704, 2704, 2704, 2704, 2704,
     2709, 2710, 2711, 2712, 2713, 2714, 2715, 2704, 2716, 2720,
     2710, 2721, 2722, 2714, 2718, 2718, 2718, 2718, 2718, 2724,
     2723, 2725, 2727, 2729, 2731, 2733, 2718, 2729, 2734, 2735,
     2736, 2737, 2738, 2739, 2740, 2743, 2746, 2747, 2748, 2749,
     2751, 2752, 2740, 2693, 2723, 2722, 2753, 2757, 2755, 2755,
     2755, 2755, 2755, 2758, 2753, 2759, 2760, 2704, 2762, 2734,
     2755, 2733, 2737, 2763, 2765, 2765, 2765, 2765, 2765, 2766,

     2770, 2773, 2765, 2774, 2776, 2777, 2765, 2778, 2779, 2779,
     2779, 2779, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786,
     2779, 2787, 2788, 2789, 2790, 2792, 2794, 2785, 2790, 2795,
     2796, 2789, 2791, 2791, 2791, 2791, 2791, 2797, 2798, 2799,
     2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2812, 2791, 2813, 2814, 2816, 2817, 2820, 2812,
     2815, 2815, 2815, 2815, 2815, 2818, 2818, 2818, 2818, 2818,
     2779, 2821, 2815, 2819, 2819, 2819, 2819, 2819, 2823, 2825,
     2817, 2826, 2827, 2828, 2811, 2819, 2829, 2831, 2832, 2834,
     2835, 2836, 2837, 2838, 2841, 2842, 2843, 2791, 2839, 2839,

     2839, 2839, 2839, 2844, 2845, 2846, 2823, 2847, 2848, 2815,
     2839, 2849, 2845, 2850, 2829, 2831, 2851, 2838, 2852, 2853,
     2837, 2854, 2832, 2855, 2856, 2857, 2858, 2859, 2860, 2862,
     2818, 2863, 2864, 2865, 2867, 2868, 2869, 2871, 2870, 2863,
     2872, 2874, 2875, 2868, 2873, 2878, 2879, 2881, 2882, 2883,
     2884, 2887, 2888, 2890, 2893, 2864, 2882, 2896, 2897, 2894,
     2898, 2871, 2899, 2900, 2869, 2865, 2870, 2894, 2873, 2886,
     2886, 2886, 2886, 2886, 2901, 2902, 2903, 2904, 2905, 2906,
     2907, 2886, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2914,
     2914, 2914, 2914, 2915, 2915, 2915, 2915, 2915, 2918, 2919,

     2920, 2921, 2922, 2923, 2924, 2925, 2926, 2919, 2927, 2928,
     2929, 2930, 2931, 2932, 2915, 2933, 2934, 2939, 2886, 2937,
     2940, 2941, 2942, 2943, 2913, 2944, 2946, 2886, 2947, 2941,
     2945, 2945, 2945, 2945, 2945, 2948, 2949, 2950, 2953, 2954,
     2955, 2959, 2960, 2961, 2963, 2964, 2966, 2968, 2969, 2944,
     2970, 2971, 2973, 2914, 2972, 2937, 2948, 2974, 2915, 2975,
     2954, 2976, 2972, 2960, 2967, 2967, 2967, 2967, 2967, 2977,
     2979, 2980, 2955, 2981, 2983, 2961, 2967, 2987, 2993, 2965,
     2965, 2965, 2965, 2965, 2995, 2987, 2996, 2999, 3000, 3001,
     2984, 2965, 3002, 3003, 2988, 2945, 2956, 2956, 2956, 2956,

     2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956, 2956,
     2956, 2956, 2956, 2956, 2984, 2956, 2956, 2990, 2956, 2956,
     2956, 2956, 2956, 2956, 2956, 2985, 2988, 2989, 2992, 3005,
     2965, 3008, 3013, 3014, 2956, 2956, 2956, 2965, 2978, 2978,
     2978, 2978, 2978, 2998, 3007, 3009, 3015, 2985, 2989, 2990,
     2978, 2998, 3007, 3009, 2991, 2991, 2991, 2991, 2991, 3016,
     2992, 3018, 2956, 2956, 2956, 2956, 2991, 3011, 3011, 3011,
     3011, 3011, 3012, 3012, 3012, 3012, 3012, 3017, 3019, 3011,
     3020, 3021, 3022, 3024, 3012, 3017, 3023, 3023, 3023, 3023,
     3023, 3025, 3026, 3027, 3027, 3027, 3027, 3027, 3023, 3028,

     3028, 3028, 3028, 3028, 3029, 3030, 3031, 3032, 3033, 3034,
     3035, 3028, 3029, 3036, 3037, 3038, 3026, 3039, 3040, 3041,
     3042, 3043, 3044, 3046, 3047, 3048, 3049, 3046, 3050, 3051,
     3053, 3054, 3058, 3048, 3059, 3060, 3062, 3051, 3052, 3052,
     3052, 3052, 3052, 3063, 3065, 3065, 3065, 3065, 3065, 3066,
     3052, 3067, 3068, 3070, 3071, 3073, 3065, 3075, 3027, 3052,
     3076, 3054, 3074, 3077, 3059, 3069, 3069, 3069, 3069, 3069,
     3074, 3078, 3060, 3079, 3081, 3082, 3083, 3069, 3080, 3080,
     3080, 3080, 3080, 3084, 3086, 3087, 3088, 3091, 3066, 3067,
     3080, 3085, 3085, 3085, 3085, 3085, 3089, 3090, 3090, 3090,

     3090, 3090, 3093, 3085, 3092, 3094, 3095, 3096, 3086, 3090,
     3097, 3098, 3085, 3099, 3101, 3102, 3100, 3106, 3103, 3108,
     3109, 3111, 3087, 3069, 3100, 3088, 3103, 3112, 3113, 3105,
     3105, 3105, 3105, 3105, 3089, 3112, 3114, 3115, 3116, 3090,
     3080, 3105, 3092, 3107, 3107, 3107, 3107, 3107, 3117, 3118,
     3118, 3118, 3118, 3118, 3119, 3107, 3120, 3121, 3122, 3124,
     3125, 3118, 3123, 3123, 3123, 3123, 3123, 3127, 3128, 3129,
     3130, 3105, 3131, 3132, 3133, 3134, 3136, 3135, 3135, 3135,
     3135, 3135, 3137, 3138, 3139, 3140, 3141, 3142, 3122, 3135,
     3143, 3144, 3144, 3144, 3144, 3144, 3147, 3150, 3143, 3152,

     3151, 3107, 3154, 3144, 3153, 3153, 3153, 3153, 3153, 3155,
     3157, 3118, 3158, 3159, 3160, 3162, 3153, 3156, 3156, 3156,
     3156, 3156, 3140, 3165, 3147, 3166, 3167, 3123, 3151, 3156,
     3168, 3169, 3170, 3171, 3176, 3179, 3177, 3152, 3156, 3173,
     3173, 3173, 3173, 3173, 3180, 3182, 3183, 3155, 3185, 3186,
     3187, 3173, 3175, 3175, 3175, 3175, 3175, 3191, 3153, 3178,
     3178, 3178, 3178, 3178, 3175, 3181, 3181, 3181, 3181, 3181,
     3188, 3178, 3176, 3175, 3177, 3192, 3193, 3181, 3188, 3194,
     3178, 3195, 3197, 3200, 3201, 3202, 3181, 3203, 3204, 3205,
     3206, 3207, 3208, 3210, 3211, 3212, 3213, 3214, 3214, 3214,

     3214, 3214, 3215, 3216, 3217, 3219, 3220, 3221, 3222, 3214,
     3218, 3218, 3218, 3218, 3218, 3223, 3207, 3224, 3225, 3226,
     3228, 3229, 3218, 3230, 3231, 3232, 3233, 3234, 3235, 3235,
     3235, 3235, 3235, 3237, 3238, 3239, 3245, 3246, 3247, 3248,
     3235, 3224, 3249, 3239, 3250, 3251, 3255, 3256, 3260, 3261,
     3249, 3234, 3228, 3265, 3267, 3230, 3268, 3261, 3269, 3273,
     3231, 3253, 3253, 3253, 3253, 3253, 3254, 3254, 3254, 3254,
     3254, 3256, 3274, 3253, 3275, 3276, 3283, 3284, 3254, 3254,
     3274, 3285, 3255, 3257, 3257, 3257, 3257, 3257, 3262, 3262,
     3262, 3262, 3262, 3277, 3286, 3257, 3287, 3288, 3289, 3290,

     3262, 3277, 3293, 3294, 3287, 3295, 3296, 3296, 3296, 3296,
     3296, 3297, 3299, 3299, 3299, 3299, 3299, 3300, 3296, 3301,
     3303, 3307, 3308, 3306, 3299, 3302, 3302, 3302, 3302, 3302,
     3304, 3304, 3304, 3304, 3304, 3309, 3311, 3302, 3312, 3314,
     3315, 3317, 3304, 3305, 3305, 3305, 3305, 3305, 3315, 3296,
     3318, 3296, 3296, 3306, 3322, 3305, 3324, 3326, 3318, 3327,
     3296, 3309, 3311, 3313, 3313, 3313, 3313, 3313, 3316, 3316,
     3316, 3316, 3316, 3325, 3329, 3313, 3331, 3312, 3338, 3334,
     3316, 3325, 3328, 3328, 3328, 3328, 3328, 3334, 3339, 3316,
     3342, 3347, 3349, 3341, 3328, 3328, 3332, 3332, 3332, 3332,

     3332, 3341, 3343, 3350, 3351, 3352, 3353, 3356, 3332, 3357,
     3343, 3350, 3358, 3353, 3359, 3331, 3360, 3332, 3361, 3362,
     3363, 3365, 3365, 3365, 3365, 3365, 3366, 3367, 3367, 3367,
     3367, 3367, 3368, 3365, 3369, 3371, 3372, 3374, 3376, 3367,
     3378, 3377, 3369, 3370, 3370, 3370, 3370, 3370, 3373, 3373,
     3373, 3373, 3373, 3379, 3380, 3370, 3382, 3383, 3385, 3386,
     3373, 3375, 3375, 3375, 3375, 3375, 3377, 3386, 3390, 3375,
     3392, 3395, 3401, 3375, 3384, 3384, 3384, 3384, 3384, 3383,
     3387, 3387, 3387, 3387, 3387, 3396, 3384, 3389, 3389, 3389,
     3389, 3389, 3387, 3402, 3373, 3404, 3406, 3410, 3411, 3389,

     3397, 3397, 3397, 3397, 3397, 3412, 3413, 3396, 3414, 3415,
     3416, 3417, 3397, 3403, 3403, 3403, 3403, 3403, 3418, 3419,
     3420, 3420, 3420, 3420, 3420, 3403, 3418, 3384, 3421, 3422,
     3423, 3424, 3420, 3425, 3426, 3428, 3429, 3422, 3430, 3431,
     3432, 3433, 3434, 3435, 3436, 3438, 3443, 3432, 3433, 3437,
     3437, 3437, 3437, 3437, 3444, 3445, 3446, 3447, 3449, 3454,
     3455, 3437, 3444, 3448, 3448, 3448, 3448, 3448, 3456, 3457,
     3458, 3459, 3460, 3461, 3462, 3448, 3463, 3464, 3465, 3466,
     3434, 3461, 3467, 3468, 3463, 3469, 3470, 3466, 3471, 3472,
     3475, 3473, 3478, 3445, 3470, 3479, 3480, 3472, 3473, 3481,

     3482, 3483, 3486, 3487, 3488, 3489, 3490, 3481, 3491, 3494,
     3486, 3437, 3495, 3495, 3495, 3495, 3495, 3496, 3497, 3498,
     3478, 3499, 3500, 3502, 3495, 3448, 3501, 3503, 3504, 3506,
     3511, 3487, 3512, 3513, 3501, 3503, 3504, 3505, 3505, 3505,
     3505, 3505, 3507, 3508, 3514, 3515, 3516, 3517, 3518, 3505,
     3507, 3508, 3514, 3519, 3521, 3517, 3522, 3524, 3523, 3525,
     3525, 3525, 3525, 3525, 3526, 3512, 3523, 3527, 3528, 3529,
     3530, 3525, 3531, 3531, 3531, 3531, 3531, 3532, 3534, 3535,
     3536, 3518, 3537, 3539, 3531, 3532, 3533, 3533, 3533, 3533,
     3533, 3540, 3541, 3542, 3544, 3545, 3547, 3548, 3533, 3540,

     3549, 3550, 3551, 3545, 3546, 3546, 3546, 3546, 3546, 3552,
     3552, 3552, 3552, 3552, 3537, 3553, 3546, 3554, 3555, 3559,
     3562, 3552, 3564, 3565, 3541, 3557, 3557, 3557, 3557, 3557,
     3560, 3560, 3560, 3560, 3560, 3566, 3568, 3557, 3570, 3571,
     3572, 3573, 3560, 3566, 3574, 3583, 3557, 3586, 3587, 3573,
     3589, 3560, 3563, 3563, 3563, 3563, 3563, 3567, 3567, 3567,
     3567, 3567, 3591, 3594, 3563, 3597, 3599, 3601, 3603, 3567,
     3569, 3569, 3569, 3569, 3569, 3576, 3576, 3576, 3576, 3576,
     3607, 3610, 3569, 3611, 3613, 3584, 3615, 3576, 3579, 3579,
     3579, 3579, 3579, 3584, 3585, 3585, 3585, 3585, 3585, 3617,

     3579, 3588, 3588, 3588, 3588, 3588, 3585, 3590, 3590, 3590,
     3590, 3590, 3592, 3588, 3593, 3598, 3619, 3621, 3622, 3590,
     3592, 3625, 3593, 3598, 3600, 3600, 3600, 3600, 3600, 3602,
     3602, 3602, 3602, 3602, 3604, 1430, 3600, 1429, 1428, 1425,
     3606, 3602, 3604, 3605, 3605, 3605, 3605, 3605, 3606, 3608,
     3609, 3609, 3609, 3609, 3609, 3605, 3612, 3608, 1424, 1423,
     1422, 1421, 3609, 3616, 3612, 3614, 3614, 3614, 3614, 3614,
     3618, 3616, 3620, 3623, 3624, 3626, 3627, 3614, 3618, 3628,
     3620, 3623, 3624, 3626, 3627, 1418, 1417, 3628, 3630, 3630,
     3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630,

     3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630,
     3630, 3630, 3630, 3630, 3630, 3630, 3630, 3631, 3631, 3631,
     3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631,
     3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631,
     3631, 3631, 3631, 3631, 3631, 3631, 3632, 3632, 3632, 3632,
     3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632,
     3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632,
     3632, 3632, 3632, 3632, 3632, 3633, 3633, 3633, 3633, 3633,
     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,

     3633, 3633, 3633, 3633, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3634, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636,
     3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636,
     3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636,
     3636, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,

     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638,
     3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638,
     3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3639,
     3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639,
     3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639,
     3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3640, 3640,
     3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640,
     3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640,

     3640, 3640, 3640, 3640, 3640, 3640, 3640, 3641, 3641, 3641,
     3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641,
     3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641,
     3641, 3641, 3641, 3641, 3641, 3641, 3642, 3642, 3642, 3642,
     3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642,
     3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642,
     3642, 3642, 3642, 3642, 3642, 3643, 3643, 3643, 3643, 3643,
     3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643,
     3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643,
     3643, 3643, 3643, 3643, 3644, 3644, 3644, 3644, 3644, 3644,

     3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644,
     3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644,
     3644, 3644, 3644, 3645, 3645, 3645, 3645, 3645, 3645, 3645,
     3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645,
     3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645,
     3645, 3645, 3646, 3646, 1415, 1414, 3646, 3646, 1413, 3646,
     3646, 3646, 3646, 3646, 3646, 3646, 3647, 3647, 3647, 3647,
     1412, 3647, 3647, 1411, 3647, 3647, 3647, 3647, 3647, 3647,
     3647, 3648, 1408, 3648, 3648, 3648, 1407, 1406, 3648, 3648,
     3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648,

     3648, 3648, 3648, 3648, 3648, 3648, 3649, 1405, 3649, 3649,
     3649, 1404, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649,
     3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649,
     3649, 3650, 3650, 3753, 1399, 1398, 3753, 1396, 1395, 3753,
     3753, 3650, 3650, 3650, 3650, 1394, 3650, 3650, 1393, 3650,
     3650, 3650, 3650, 3650, 3650, 3650, 3651, 3651, 3651, 3651,
     1390, 3651, 3651, 1388, 3651, 3651, 3651, 3651, 3651, 3651,
     3651, 3652, 3652, 3652, 3652, 1387, 3652, 3652, 1386, 3652,
     3652, 3652, 3652, 3652, 3652, 3652, 3653, 3653, 3653, 3653,
     3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653,

     3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653,
     3653, 3653, 3653, 3653, 3653, 3654, 3654, 3654, 3654, 3654,
     3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654,
     3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654,
     3654, 3654, 3654, 3654, 3655, 3655, 3655, 1385, 1384, 3655,
     3655, 1383, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 3656,
     3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656,
     3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656,
     3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3657, 3657,
     3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657,

     3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657,
     3657, 3657, 3657, 3657, 3657, 3657, 3657, 3658, 3658, 3658,
     1382, 1380, 3658, 3658, 1379, 3658, 3658, 3658, 3658, 3658,
     3658, 3658, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3663, 3663,
     3663, 3663, 1378, 3663, 3663, 1377, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3664, 3664, 3754, 1376, 3664, 3754, 1374,
     1373, 3754, 3754, 3664, 3664, 3664, 3664, 1372, 3664, 3664,
     1371, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3665, 1370,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,

     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3666, 3666, 3666, 1369, 1368,
     3666, 3666, 1367, 3666, 3666, 3666, 3666, 3666, 3666, 3666,
     3667, 3667, 3667, 3667, 1366, 3667, 3667, 3667, 3667, 3667,
     3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3668, 1365,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3668, 3668, 3669, 1364, 3669, 1362, 3669,
     1361, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,

     3670, 3670, 3670, 3670, 1360, 3670, 3670, 1357, 3670, 3670,
     3670, 3670, 3670, 3670, 3670, 3671, 3671, 3671, 3671, 1355,
     3671, 3671, 1354, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672,
     3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672,
     3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673,
     3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3674, 3674,
     3674, 3674, 1353, 3674, 3674, 1351, 3674, 3674, 3674, 3674,

     3674, 3674, 3674, 3675, 1349, 3675, 3675, 3675, 3675, 3675,
     3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675,
     3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675,
     3676, 1347, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676,
     3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676,
     3676, 3676, 3676, 3676, 3676, 3676, 3676, 3677, 3677, 3677,
     3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677,
     3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677,
     3677, 3677, 3677, 3677, 3677, 3677, 3678, 3678, 3678, 3678,
     3678, 3678, 3678, 3678, 3678, 3678, 3678, 3678, 3678, 3678,

     3678, 3678, 3678, 3678, 3678, 3678, 3678, 3678, 3678, 3678,
     3678, 3678, 3678, 3678, 3678, 3679, 3679, 3679, 3679, 1346,
     3679, 3679, 1345, 3679, 3679, 3679, 3679, 3679, 3679, 3679,
     3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680,
     3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680,
     3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3681,
     3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681,
     3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681,
     3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 3682, 3682,
     1344, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3683, 1343,

     1342, 3683, 3683, 1339, 3683, 3683, 3683, 3683, 3683, 3683,
     3683, 3684, 3684, 1338, 1337, 3684, 3684, 1336, 3684, 3684,
     3684, 3684, 3684, 3684, 3684, 3685, 3685, 3685, 3685, 1335,
     3685, 3685, 1334, 3685, 3685, 3685, 3685, 3685, 3685, 3685,
     3686, 1333, 1331, 1330, 1327, 1326, 3686, 3686, 1325, 3686,
     3686, 3686, 3686, 3686, 3686, 3686, 3687, 1324, 3687, 3687,
     3687, 1323, 1322, 3687, 3687, 3687, 3687, 3687, 3687, 3687,
     3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687,
     3687, 3688, 1321, 3688, 3688, 3688, 1319, 3688, 3688, 3688,
     3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688,

     3688, 3688, 3688, 3688, 3688, 3688, 3689, 3689, 3772, 1318,
     1314, 3772, 1311, 1310, 3772, 3772, 3689, 3689, 3689, 3689,
     1308, 3689, 3689, 1307, 3689, 3689, 3689, 3689, 3689, 3689,
     3689, 3690, 3690, 1306, 3690, 3690, 3690, 3690, 3690, 3690,
     3690, 3691, 3691, 3691, 3691, 1305, 3691, 3691, 1304, 3691,
     3691, 3691, 3691, 3691, 3691, 3691, 3692, 3692, 1301, 3692,
     3692, 3692, 3692, 3692, 3692, 3692, 3693, 3693, 3693, 3693,
     1300, 3693, 3693, 1299, 3693, 3693, 3693, 3693, 3693, 3693,
     3693, 3694, 3694, 1298, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,

     3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,
     3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,
     3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696,
     3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696,
     3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3697,
     3697, 3697, 1297, 1294, 3697, 3697, 1293, 3697, 3697, 3697,
     3697, 3697, 3697, 3697, 3698, 3698, 3698, 3698, 3698, 3698,
     3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698,
     3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698,
     3698, 3698, 3698, 3699, 3699, 3699, 3699, 3699, 3699, 3699,

     3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699,
     3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699,
     3699, 3699, 3700, 3700, 3700, 1292, 1291, 3700, 3700, 1290,
     3700, 3700, 3700, 3700, 3700, 3700, 3700, 3701, 3701, 3701,
     3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701,
     3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701,
     3701, 3701, 3701, 3701, 3701, 3701, 3702, 3702, 3702, 3702,
     3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702,
     3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702,
     3702, 3702, 3702, 3702, 3702, 3703, 3703, 3703, 3703, 3703,

     3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703,
     3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703,
     3703, 3703, 3703, 3703, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1289, 3705, 1288, 3705, 3705, 1287,
     3781, 3705, 3705, 3781, 1286, 1285, 3781, 3781, 1284, 3705,
     3705, 3705, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,
     3706, 3706, 3706, 1281, 3706, 3782, 3706, 3706, 3782, 1280,

     3706, 3782, 3782, 1279, 1278, 1277, 1274, 1273, 3706, 3706,
     3706, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707,
     3707, 3707, 1272, 3707, 3803, 3707, 3707, 3803, 1271, 3707,
     3803, 3803, 1270, 1267, 1266, 1265, 1264, 3707, 3707, 3707,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 1263, 3708, 3804, 3708, 3708, 3804, 1260, 3708, 3804,
     3804, 1259, 1258, 1257, 1256, 1253, 3708, 3708, 3708, 3709,
     3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709,
     1252, 3709, 3805, 3709, 3709, 3805, 1251, 3709, 3805, 3805,
     1250, 1249, 1230, 1217, 1211, 3709, 3709, 3709, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 1210,
     3710, 3806, 3710, 3710, 3806, 1205, 3710, 3806, 3806, 1200,
     1198, 3710, 3710, 1197, 3710, 3710, 3710, 3711, 3711, 3711,
     3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 1195, 3711,
     3807, 3711, 3711, 3807, 1194, 3711, 3807, 3807, 1193, 1192,
     1191, 1190, 1189, 3711, 3711, 3711, 3712, 3712, 3712, 3712,
     3712, 3712, 3712, 3712, 3712, 3712, 3712, 1187, 3712, 3808,
     3712, 3712, 3808, 1186, 3712, 3808, 3808, 1185, 1175, 1174,
     3712, 3712, 3712, 3712, 3712, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 1168, 3713, 3809, 3713,

     3713, 3809, 1154, 3713, 3809, 3809, 1148, 1141, 1139, 1118,
     1117, 3713, 3713, 3713, 3714, 3714, 3714, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 1116, 3714, 3810, 3714, 3714,
     3810, 1115, 3714, 3810, 3810, 1114, 1111, 1110, 1109, 1105,
     3714, 3714, 3714, 3715, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 1104, 3715, 1103, 3715, 3715, 3826,
     1097, 3715, 3826, 3715, 1096, 3826, 3826, 1091, 1090, 3715,
     3715, 3715, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716,
     3716, 3716, 3716, 1089, 3716, 3827, 3716, 3716, 3827, 1088,
     3716, 3827, 3827, 1087, 1084, 1083, 1082, 1081, 3716, 3716,

     3716, 3717, 3717, 3717, 3717, 1080, 3717, 3717, 1074, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3718, 3718, 1073, 3718,
     3718, 3718, 3718, 3718, 3718, 3718, 3719, 3719, 3829, 1071,
     3719, 3829, 1069, 1068, 3829, 3829, 3719, 3719, 3719, 3719,
     1067, 3719, 3719, 1066, 3719, 3719, 3719, 3719, 3719, 3719,
     3719, 3720, 3720, 1065, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3721, 1062, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3722, 1061,
     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,

     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3722, 3722, 3722, 3723, 3723, 3723, 1060, 1059,
     3723, 3723, 1055, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724,
     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724,
     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3725,
     3725, 3725, 3725, 1054, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3726, 1053, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726,

     3726, 3726, 3726, 3726, 3727, 1051, 3727, 1050, 3727, 1049,
     3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727,
     3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3728,
     3728, 3728, 3728, 1048, 3728, 3728, 1045, 3728, 3728, 3728,
     3728, 3728, 3728, 3728, 3729, 3729, 1044, 3729, 3729, 3729,
     3729, 3729, 3729, 3729, 3730, 3730, 3730, 3730, 1043, 3730,
     3730, 1042, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3731,
     3731, 1037, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3732,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,

     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3734, 3734, 3734,
     3734, 1036, 3734, 3734, 1035, 3734, 3734, 3734, 3734, 3734,
     3734, 3734, 3735, 3735, 1034, 3735, 3735, 3735, 3735, 3735,
     3735, 3735, 3736, 1033, 3736, 3736, 3736, 3736, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3737,
     1029, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 1024,

     3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737,
     3737, 3737, 3737, 3737, 3737, 3737, 3738, 1023, 3738, 3738,
     3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3738, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740,

     3740, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3742, 3742, 1022, 3742, 3742, 3742, 3742, 3742, 3742, 3742,
     3743, 3743, 3743, 3743, 1021, 3743, 3743, 1020, 3743, 3743,
     3743, 3743, 3743, 3743, 3743, 3744, 1019, 1018, 1017, 1015,
     1014, 3744, 3744, 1013, 3744, 3744, 3744, 3744, 3744, 3744,
     3744, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 1012, 3745, 3830, 3745, 3745, 3830, 1011, 3745,
     3830, 3830, 1010, 1009, 1008, 1007, 1006, 3745, 3745, 3745,

     3746, 3746, 3746, 1005, 1004, 3746, 3746, 1003, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 3747, 1002, 1001, 3747, 3747,
     1000, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3748,  998,
      997, 3748, 3748,  995, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3750, 3750, 3750,  993,  992, 3750, 3750,  989, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3751, 3751, 3751, 3751,  988,
     3751, 3751,  983, 3751, 3751, 3751, 3751, 3751, 3751, 3751,

     3752,  980,  979,  977,  976,  975, 3752, 3752,  974, 3752,
     3752, 3752, 3752, 3752, 3752, 3752, 3755, 3755, 3922,  972,
      971, 3922,  970,  968, 3922, 3922, 3755, 3755, 3755,  967,
      966, 3755, 3755,  965, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,
     3756, 3756,  964, 3756, 3923, 3756, 3756, 3923,  963, 3756,
     3923, 3923,  962,  961,  960,  959,  957, 3756, 3756, 3756,
     3757, 3757, 3757,  956,  953, 3757, 3757,  948, 3757, 3757,
     3757, 3757, 3757, 3757, 3757, 3758, 3758, 3758, 3758,  946,
     3758, 3758,  945, 3758, 3758, 3758, 3758, 3758, 3758, 3758,

     3759, 3759,  944, 3759, 3759, 3759, 3759, 3759, 3759, 3759,
     3760, 3760, 3760,  943,  940, 3760, 3760,  939, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3761, 3761, 3761, 3761,  938,
     3761, 3761,  937, 3761, 3761, 3761, 3761, 3761, 3761, 3761,
     3762, 3762, 3762,  934,  932, 3762, 3762,  931, 3762, 3762,
     3762, 3762, 3762, 3762, 3762, 3763, 3763, 3763, 3763, 3763,
     3763, 3763, 3763, 3763, 3763, 3763,  930, 3763, 3936, 3763,
     3763, 3936,  929, 3763, 3936, 3936,  928,  927,  926,  923,
      922, 3763, 3763, 3763, 3764, 3764, 3764, 3764, 3764, 3764,
     3764, 3764, 3764, 3764, 3764,  921, 3764, 3937, 3764, 3764,

     3937,  920, 3764, 3937, 3937,  915,  914,  913,  912,  909,
     3764, 3764, 3764, 3765, 3765, 3765, 3765, 3765, 3765, 3765,
     3765, 3765, 3765, 3765,  908, 3765,  907, 3765, 3765,  906,
      903, 3765,  902,  901,  900,  897,  896,  895,  894, 3765,
     3765, 3765, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3766, 3766,  884, 3766,  873, 3766, 3766,  869,  865,
     3766,  862,  858,  853,  849,  846,  841,  830, 3766, 3766,
     3766, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
     3767, 3767,  829, 3767,  825, 3767, 3767,  819,  818, 3767,
      817,  816, 3767,  815,  814,  813,  810, 3767, 3767, 3767,

     3768, 3768, 3768,  809,  807, 3768, 3768,  806, 3768, 3768,
     3768, 3768, 3768, 3768, 3768, 3769, 3769,  805,  804, 3769,
      803,  762,  739,  737,  736, 3769, 3769, 3769,  728,  727,
     3769, 3769,  726, 3769, 3769, 3769, 3769, 3769, 3769, 3769,
     3770,  725, 3770, 3770, 3770, 3770, 3770, 3770, 3770, 3770,
     3770, 3770, 3770, 3770, 3770, 3770, 3770, 3770, 3770, 3770,
     3770, 3770, 3770, 3770, 3770, 3770, 3770, 3771, 3771, 3771,
     3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771,
     3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771,
     3771, 3771, 3771, 3771, 3771, 3771, 3773, 3773, 3773,  724,

      718, 3773, 3773,  717, 3773, 3773, 3773, 3773, 3773, 3773,
     3773, 3774, 3774, 3774,  716,  715, 3774, 3774,  712, 3774,
     3774, 3774, 3774, 3774, 3774, 3774, 3775, 3775, 3775,  711,
      710, 3775, 3775,  709, 3775, 3775, 3775, 3775, 3775, 3775,
     3775, 3776,  706, 3776, 3776, 3776, 3776, 3776, 3776, 3776,
     3776, 3776, 3776, 3776, 3776, 3776, 3776, 3776, 3776, 3776,
     3776, 3776, 3776, 3776, 3776, 3776, 3776, 3776, 3777, 3777,
     3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777,
     3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777,
     3777, 3777, 3777, 3777, 3777, 3777, 3777, 3778, 3778, 3778,

     3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778,  705, 3778,
      703, 3778, 3778,  702,  701, 3778,  700,  699,  698,  694,
      692,  690,  689, 3778, 3778, 3778, 3779, 3779, 3779,  687,
      686, 3779, 3779,  685, 3779, 3779, 3779, 3779, 3779, 3779,
     3779, 3780, 3780, 3780,  681,  678, 3780, 3780,  674, 3780,
     3780, 3780, 3780, 3780, 3780, 3780, 3783, 3783, 3783,  668,
      664, 3783, 3783,  659, 3783, 3783, 3783, 3783, 3783, 3783,
     3783, 3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784,
     3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784,
     3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784, 3784,

     3785, 3785, 3785,  658,  657, 3785, 3785,  656, 3785, 3785,
     3785, 3785, 3785, 3785, 3785, 3786, 3786, 3786, 3786,  649,
     3786, 3786,  646, 3786, 3786, 3786, 3786, 3786, 3786, 3786,
     3787,  645,  634,  630,  627,  625, 3787, 3787,  624, 3787,
     3787, 3787, 3787, 3787, 3787, 3787, 3788, 3788, 3788, 3788,
     3788, 3788, 3788, 3788, 3788, 3788, 3788, 3788, 3788, 3788,
     3788, 3788, 3788, 3788, 3788, 3788, 3788, 3788, 3788, 3788,
     3788, 3788, 3788, 3788, 3788, 3789, 3789, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,

     3789, 3789, 3789, 3789, 3790, 3790, 3790, 3790, 3790, 3790,
     3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790,
     3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790,
     3790, 3790, 3790, 3791, 3791, 3791, 3791, 3791, 3791, 3791,
     3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791,
     3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791,
     3791, 3791, 3792,  623, 3792, 3792,  622,  621, 3792, 3792,
     3793,  619, 3793, 3793,  618,  616, 3793, 3793, 3794, 3794,
      615,  612,  611,  610,  609,  608,  607,  605, 3794, 3794,
     3794,  603,  598, 3794, 3794,  595, 3794, 3794, 3794, 3794,

     3794, 3794, 3794, 3795, 3795, 3795,  594,  593, 3795, 3795,
      592, 3795, 3795, 3795, 3795, 3795, 3795, 3795, 3796, 3796,
     3796, 3796,  589, 3796, 3796,  588, 3796, 3796, 3796, 3796,
     3796, 3796, 3796, 3797, 3797,  587, 3797, 3797, 3797, 3797,
     3797, 3797, 3797, 3798, 3798, 3798, 3798, 3798, 3798, 3798,
     3798, 3798, 3798, 3798, 3798, 3798, 3798, 3798, 3798, 3798,
     3798, 3798, 3798, 3798, 3798, 3798, 3798, 3798, 3798, 3798,
     3798, 3798, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799,
     3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799,
     3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799, 3799,

     3799, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3801, 3801, 3801,  582,  580, 3801, 3801,  578, 3801, 3801,
     3801, 3801, 3801, 3801, 3801, 3802, 3802, 3802, 3802,  577,
     3802, 3802,  569, 3802, 3802, 3802, 3802, 3802, 3802, 3802,
     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811,
     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811,
     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3812,
     3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812,

      565, 3812,  560, 3812, 3812,  554,  553, 3812,  552,  551,
      550,  548,  544,  538,  534, 3812, 3812, 3812, 3813, 3813,
     3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813,  529,
     3813,  525, 3813, 3813,  519,  481, 3813,  475,  459,  458,
      457,  456,  452,  451, 3813, 3813, 3813, 3814, 3814, 3814,
     3814, 3814, 3814, 3814, 3814, 3814, 3814, 3814,  448, 3814,
      444, 3814, 3814,  443,  442, 3814,  441,  388,  387,  385,
      373,  369,  364, 3814, 3814, 3814, 3815, 3815, 3815, 3815,
     3815, 3815, 3815, 3815, 3815, 3815, 3815,  359, 3815,  358,
     3815, 3815,  355,  354, 3815,  352,  347,  346,  345,  344,

      342,  341, 3815, 3815, 3815, 3816, 3816, 3816, 3816, 3816,
     3816, 3816, 3816, 3816, 3816, 3816,  340, 3816,  335, 3816,
     3816,  334,  325, 3816,  322,  315,  314,  309,  308,  306,
      302, 3816, 3816, 3816, 3817, 3817, 3817, 3817, 3817, 3817,
     3817, 3817, 3817, 3817, 3817,  301, 3817,  300, 3817, 3817,
      298,  280, 3817,  274,  268,  264,  256,  247,  238,  235,
     3817, 3817, 3817, 3818, 3818, 3818, 3818, 3818, 3818, 3818,
     3818, 3818, 3818, 3818,  227, 3818,  222, 3818, 3818,  220,
      219, 3818,  217,  210,  205,  196,  186,  183,  160, 3818,
     3818, 3818, 3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819,

     3819, 3819, 3819,  155, 3819,  149, 3819, 3819,  144,  143,
     3819,  138,  137,  130, 3819,  129,  123,  118, 3819, 3819,
     3819, 3820, 3820, 3820,  115,  114, 3820, 3820,  113, 3820,
     3820, 3820, 3820, 3820, 3820, 3820, 3821, 3821,  107,   86,
     3821,   76,   72,   63,    0,    0, 3821, 3821, 3821,    0,
        0, 3821, 3821,    0, 3821, 3821, 3821, 3821, 3821, 3821,
     3821, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822,
        0, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822,
     3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822,
     3823,    0, 3823, 3823,    0,    0, 3823, 3823, 3824, 3824,

     3824,    0,    0, 3824, 3824,    0, 3824, 3824, 3824, 3824,
     3824, 3824, 3824, 3825, 3825, 3825,    0,    0, 3825, 3825,
        0, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3828, 3828,
     3828,    0,    0, 3828, 3828,    0, 3828, 3828, 3828, 3828,
     3828, 3828, 3828, 3831, 3831, 3831, 3831, 3831, 3831, 3831,
     3831, 3831,    0, 3831, 3831, 3831, 3831, 3831, 3831, 3831,
     3831, 3831, 3831, 3831, 3831, 3831, 3831, 3831, 3831, 3831,
     3831, 3831, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832,
     3832, 3832, 3832,    0, 3832,    0, 3832, 3832,    0,    0,
     3832,    0,    0,    0,    0,    0,    0,    0, 3832, 3832,

     3832, 3833, 3833, 3833,    0,    0, 3833, 3833,    0, 3833,
     3833, 3833, 3833, 3833, 3833, 3833, 3834, 3834, 3834,    0,
        0, 3834, 3834,    0, 3834, 3834, 3834, 3834, 3834, 3834,
     3834, 3835,    0, 3835, 3835,    0,    0, 3835, 3835, 3836,
        0, 3836, 3836,    0,    0, 3836, 3836, 3837, 3837, 3837,
     3837, 3837, 3837, 3837, 3837, 3837,    0, 3837, 3837, 3837,
     3837, 3837, 3837, 3837, 3837, 3837, 3837, 3837, 3837, 3837,
     3837, 3837, 3837, 3837, 3837, 3837, 3838, 3838, 3838, 3838,
     3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838,
     3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838,

     3838, 3838, 3838, 3838, 3838, 3839, 3839, 3839, 3839,    0,
     3839, 3839,    0, 3839, 3839, 3839, 3839, 3839, 3839, 3839,
     3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840,
     3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840,
     3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3842, 3842,
     3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842,
     3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842,

     3842, 3842, 3842, 3842, 3842, 3842, 3842, 3843, 3843, 3843,
     3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843,
     3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843,
     3843, 3843, 3843, 3843, 3843, 3843, 3844, 3844, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3845,    0,    0,    0,    0,
        0, 3845, 3845,    0, 3845, 3845, 3845, 3845, 3845, 3845,
     3845, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846,
     3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846,

     3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846, 3846,
     3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847,
     3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847,
     3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3848,
     3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848,
     3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848,
     3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3849, 3849,
     3849, 3849, 3849, 3849, 3849, 3849, 3849, 3849, 3849, 3849,
     3849, 3849, 3849, 3849, 3849, 3849, 3849, 3849, 3849, 3849,
     3849, 3849, 3849, 3849, 3849, 3849, 3849, 3850, 3850, 3850,

     3850, 3850, 3850, 3850, 3850, 3850, 3850, 3850, 3850, 3850,
     3850, 3850, 3850, 3850, 3850, 3850, 3850, 3850, 3850, 3850,
     3850, 3850, 3850, 3850, 3850, 3850, 3851, 3851, 3851, 3851,
        0, 3851, 3851,    0, 3851, 3851, 3851, 3851, 3851, 3851,
     3851, 3852, 3852,    0, 3852, 3852, 3852, 3852, 3852, 3852,
     3852, 3853, 3853, 3853, 3853,    0, 3853, 3853,    0, 3853,
     3853, 3853, 3853, 3853, 3853, 3853, 3854,    0, 3854, 3854,
        0,    0, 3854, 3854, 3855,    0, 3855, 3855,    0,    0,
     3855, 3855, 3856,    0, 3856, 3856,    0,    0, 3856, 3856,
     3857,    0, 3857, 3857,    0,    0, 3857, 3857, 3858,    0,

     3858, 3858,    0,    0, 3858, 3858, 3859,    0, 3859, 3859,
        0,    0, 3859, 3859, 3860,    0, 3860, 3860,    0,    0,
     3860, 3860, 3861,    0, 3861, 3861,    0,    0, 3861, 3861,
     3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862,
     3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862,
     3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3863,
     3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863,
        0, 3863,    0, 3863, 3863,    0,    0, 3863,    0,    0,
        0,    0,    0,    0,    0, 3863, 3863, 3863, 3864, 3864,
     3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864,

     3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864,
     3864, 3864, 3864, 3864, 3864, 3864, 3864, 3865, 3865, 3865,
     3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865,
     3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865,
     3865, 3865, 3865, 3865, 3865, 3865, 3866, 3866, 3866, 3866,
     3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866,
     3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866,
     3866, 3866, 3866, 3866, 3866, 3867, 3867, 3867, 3867, 3867,
     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867,
     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867,

     3867, 3867, 3867, 3867, 3868, 3868, 3868, 3868, 3868, 3868,
     3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868,
     3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868,
     3868, 3868, 3868, 3869, 3869, 3869, 3869, 3869, 3869, 3869,
     3869, 3869, 3869, 3869,    0, 3869,    0, 3869, 3869,    0,
        0, 3869,    0,    0,    0,    0,    0,    0,    0, 3869,
     3869, 3869, 3870, 3870, 3870, 3870, 3870, 3870, 3870, 3870,
     3870, 3870, 3870,    0, 3870,    0, 3870, 3870,    0,    0,
     3870,    0,    0,    0,    0,    0,    0,    0, 3870, 3870,
     3870, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871,

     3871, 3871,    0, 3871,    0, 3871, 3871,    0,    0, 3871,
        0,    0,    0,    0,    0,    0,    0, 3871, 3871, 3871,
     3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872,
     3872,    0, 3872,    0, 3872, 3872,    0,    0, 3872,    0,
        0,    0,    0,    0,    0,    0, 3872, 3872, 3872, 3873,
     3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873,
        0, 3873,    0, 3873, 3873,    0,    0, 3873,    0,    0,
        0,    0,    0,    0,    0, 3873, 3873, 3873, 3874, 3874,
     3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874,    0,
     3874,    0, 3874, 3874,    0,    0, 3874,    0,    0,    0,

        0,    0,    0,    0, 3874, 3874, 3874, 3875,    0, 3875,
     3875,    0,    0, 3875, 3875, 3876,    0, 3876, 3876,    0,
        0, 3876, 3876, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877, 3877,    0, 3877,    0, 3877, 3877,    0,
        0, 3877,    0,    0,    0,    0,    0,    0,    0, 3877,
     3877, 3877, 3878,    0, 3878, 3878,    0,    0, 3878, 3878,
     3879,    0, 3879, 3879,    0,    0, 3879, 3879, 3880, 3880,
     3880, 3880,    0, 3880, 3880,    0, 3880, 3880, 3880, 3880,
     3880, 3880, 3880, 3881,    0,    0,    0,    0,    0, 3881,
     3881,    0, 3881, 3881, 3881, 3881, 3881, 3881, 3881, 3882,

     3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882,
     3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882,
     3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3883, 3883,
     3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883,
     3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883,
     3883, 3883, 3883, 3883, 3883, 3883, 3883, 3884, 3884, 3884,
     3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884,    0, 3884,
        0, 3884, 3884,    0,    0, 3884,    0,    0,    0,    0,
        0,    0,    0, 3884, 3884, 3884, 3885, 3885, 3885, 3885,
     3885, 3885, 3885, 3885, 3885,    0, 3885, 3885, 3885, 3885,

     3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885,
     3885, 3885, 3885, 3885, 3885, 3886, 3886, 3886, 3886, 3886,
     3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886,
     3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886,
     3886, 3886, 3886, 3886, 3887, 3887, 3887, 3887, 3887, 3887,
     3887, 3887, 3887, 3887, 3887, 3887, 3887, 3887, 3887, 3887,
     3887, 3887, 3887, 3887, 3887, 3887, 3887, 3887, 3887, 3887,
     3887, 3887, 3887, 3888, 3888, 3888, 3888, 3888, 3888, 3888,
     3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888,
     3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888,

     3888, 3888, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889,    0, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3892,
     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892,

     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892,
     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3893, 3893,
     3893, 3893, 3893, 3893, 3893, 3893, 3893, 3893, 3893, 3893,
     3893, 3893, 3893, 3893, 3893, 3893, 3893, 3893, 3893, 3893,
     3893, 3893, 3893, 3893, 3893, 3893, 3893, 3894, 3894, 3894,
     3894, 3894, 3894, 3894, 3894, 3894,    0, 3894, 3894, 3894,
     3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
     3894, 3894, 3894, 3894, 3894, 3894, 3895, 3895, 3895, 3895,
        0, 3895, 3895,    0, 3895, 3895, 3895, 3895, 3895, 3895,
     3895, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896,

     3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896,
     3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896,
     3897, 3897,    0, 3897, 3897, 3897, 3897, 3897, 3897, 3897,
     3898, 3898, 3898, 3898,    0, 3898, 3898,    0, 3898, 3898,
     3898, 3898, 3898, 3898, 3898, 3899, 3899, 3899, 3899, 3899,
     3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899,
     3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899,
     3899, 3899, 3899, 3899, 3900, 3900, 3900, 3900, 3900, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,

     3900, 3900, 3900, 3901, 3901, 3901, 3901, 3901, 3901, 3901,
     3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901,
     3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901,
     3901, 3901, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
     3902, 3902, 3902,    0, 3902,    0, 3902, 3902,    0,    0,
     3902,    0,    0,    0,    0,    0,    0,    0, 3902, 3902,
     3902, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903,
        0, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903,
     3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904,

     3904,    0, 3904,    0, 3904, 3904,    0,    0, 3904,    0,
        0,    0,    0,    0,    0,    0, 3904, 3904, 3904, 3905,
     3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905,
     3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905,
     3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3906, 3906,
     3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906,
     3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906,
     3906, 3906, 3906, 3906, 3906, 3906, 3906, 3907, 3907, 3907,
     3907, 3907, 3907, 3907, 3907, 3907, 3907, 3907,    0, 3907,
        0, 3907, 3907,    0,    0, 3907,    0,    0,    0,    0,

        0,    0,    0, 3907, 3907, 3907, 3908, 3908, 3908, 3908,
     3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908,
     3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908,
     3908, 3908, 3908, 3908, 3908, 3909, 3909, 3909, 3909, 3909,
     3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909,
     3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909,
     3909, 3909, 3909, 3909, 3910, 3910, 3910, 3910, 3910, 3910,
     3910, 3910, 3910, 3910, 3910,    0, 3910,    0, 3910, 3910,
        0,    0, 3910,    0,    0,    0,    0,    0,    0,    0,
     3910, 3910, 3910, 3911, 3911, 3911, 3911, 3911, 3911, 3911,

     3911, 3911, 3911, 3911,    0, 3911,    0, 3911, 3911,    0,
        0, 3911,    0,    0,    0,    0,    0,    0,    0, 3911,
     3911, 3911, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912,
     3912, 3912, 3912,    0, 3912,    0, 3912, 3912,    0,    0,
     3912,    0,    0,    0,    0,    0,    0,    0, 3912, 3912,
     3912, 3913, 3913, 3913, 3913, 3913, 3913, 3913, 3913, 3913,
     3913, 3913,    0, 3913,    0, 3913, 3913,    0,    0, 3913,
        0,    0,    0,    0,    0,    0,    0, 3913, 3913, 3913,
     3914, 3914, 3914, 3914, 3914, 3914, 3914, 3914, 3914, 3914,
     3914,    0, 3914,    0, 3914, 3914,    0,    0, 3914,    0,

        0,    0,    0,    0,    0,    0, 3914, 3914, 3914, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
        0, 3915,    0, 3915, 3915,    0,    0, 3915,    0,    0,
        0,    0,    0,    0,    0, 3915, 3915, 3915, 3916, 3916,
     3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916,    0,
     3916,    0, 3916, 3916,    0,    0, 3916,    0,    0,    0,
        0,    0,    0,    0, 3916, 3916, 3916, 3917, 3917, 3917,
     3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917,
     3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917,
     3917, 3917, 3917, 3917, 3917, 3917, 3918, 3918, 3918, 3918,

     3918, 3918, 3918, 3918, 3918, 3918, 3918,    0, 3918,    0,
     3918, 3918,    0,    0, 3918,    0,    0,    0,    0,    0,
        0,    0, 3918, 3918, 3918, 3919, 3919, 3919, 3919, 3919,
     3919, 3919, 3919, 3919,    0, 3919, 3919, 3919, 3919, 3919,
     3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919,
     3919, 3919, 3919, 3919, 3920, 3920, 3920, 3920,    0, 3920,
     3920,    0, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 3921,
     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921,    0, 3921,
     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921,
     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3924, 3924,

     3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924,    0,
     3924,    0, 3924, 3924,    0,    0, 3924,    0,    0,    0,
        0,    0,    0,    0, 3924, 3924, 3924, 3925,    0,    0,
        0,    0,    0, 3925, 3925,    0, 3925, 3925, 3925, 3925,
     3925, 3925, 3925, 3926, 3926, 3926, 3926, 3926, 3926, 3926,
     3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926,
     3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926,
     3926, 3926, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,

     3927, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928,
     3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928,
     3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930,    0, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3931, 3931,
     3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931,

     3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931,
     3931, 3931, 3931, 3931, 3931, 3931, 3931, 3932, 3932, 3932,
     3932, 3932, 3932, 3932, 3932, 3932,    0, 3932, 3932, 3932,
     3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932,
     3932, 3932, 3932, 3932, 3932, 3932, 3933, 3933, 3933, 3933,
     3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
     3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
     3933, 3933, 3933, 3933, 3933, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934,

     3934, 3934, 3934, 3934, 3935, 3935, 3935, 3935, 3935, 3935,
     3935, 3935, 3935, 3935, 3935,    0, 3935,    0, 3935, 3935,
        0,    0, 3935,    0,    0,    0,    0,    0,    0,    0,
     3935, 3935, 3935, 3938, 3938, 3938, 3938,    0, 3938, 3938,
        0, 3938, 3938, 3938, 3938, 3938, 3938, 3938, 3939, 3939,
     3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939,    0,
     3939,    0, 3939, 3939,    0,    0, 3939,    0,    0,    0,
        0,    0,    0,    0, 3939, 3939, 3939, 3940, 3940, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940,

     3940, 3940, 3940, 3940, 3940, 3940, 3941, 3941,    0, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3944, 3944, 3944, 3944, 3944, 3944,
     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944,
     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944,

     3944, 3944, 3944, 3945, 3945,    0,    0,    0,    0,    0,
     3945,    0,    0, 3945, 3945, 3945, 3945,    0, 3945, 3945,
        0, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3946, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,    0,
     3946,    0, 3946, 3946,    0,    0, 3946,    0,    0,    0,
        0,    0,    0,    0, 3946, 3946, 3946, 3947, 3947, 3947,
     3947, 3947, 3947, 3947, 3947, 3947,    0, 3947, 3947, 3947,
     3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,
     3947, 3947, 3947, 3947, 3947, 3947, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948,    0, 3948, 3948, 3948, 3948,

     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949,    0, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3950, 3950, 3950, 3950, 3950, 3950,
     3950, 3950, 3950, 3950, 3950,    0, 3950,    0, 3950, 3950,
        0,    0, 3950,    0,    0,    0,    0,    0,    0,    0,
     3950, 3950, 3950, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,

     3951, 3951, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952,    0, 3952,    0, 3952, 3952,    0,    0,
     3952,    0,    0,    0,    0,    0,    0,    0, 3952, 3952,
     3952, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953,
     3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953,
     3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953,
     3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954,
     3954,    0, 3954,    0, 3954, 3954,    0,    0, 3954,    0,
        0,    0,    0,    0,    0,    0, 3954, 3954, 3954, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955,

     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,    0,
     3956,    0, 3956, 3956,    0,    0, 3956,    0,    0,    0,
        0,    0,    0,    0, 3956, 3956, 3956, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957,    0, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958,    0, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,

     3958, 3958, 3958, 3958, 3958, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3962, 3962, 3962, 3962,    0, 3962, 3962,    0,

     3962, 3962, 3962, 3962, 3962, 3962, 3962, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,    0, 3963,
        0, 3963, 3963,    0,    0, 3963,    0,    0,    0,    0,
        0,    0,    0, 3963, 3963, 3963, 3964,    0, 3964, 3964,
        0,    0, 3964, 3964, 3965,    0, 3965, 3965,    0,    0,
     3965, 3965, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,
     3966, 3966, 3966,    0, 3966,    0, 3966, 3966,    0,    0,
     3966,    0,    0,    0,    0,    0,    0,    0, 3966, 3966,
     3966, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967,    0, 3967,    0, 3967, 3967,    0,    0, 3967,

        0,    0,    0,    0,    0,    0,    0, 3967, 3967, 3967,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,    0,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,    0, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3971, 3971,    0,

        0,    0,    0,    0, 3971,    0,    0,    0,    0,    0,
        0,    0, 3971, 3971,    0, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3974,    0,    0,    0,    0,    0, 3974, 3974,    0,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3975, 3975, 3975,

     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3977, 3978, 3978, 3978, 3978, 3978, 3978,
     3978, 3978, 3978,    0, 3978, 3978, 3978, 3978, 3978, 3978,

     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,
     3978, 3978, 3978, 3979, 3979, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980,
     3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980,
     3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980,
     3980, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981,
        0, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981,
     3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981,

     3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,    0,
     3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,
     3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3983,
     3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983,
     3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983,
     3983, 3983, 3983, 3983, 3983, 3983, 3983, 3983, 3984,    0,
     3984, 3984,    0,    0, 3984, 3984, 3985,    0, 3985, 3985,
        0,    0, 3985, 3985, 3986, 3986, 3986, 3986,    0, 3986,
     3986,    0, 3986, 3986, 3986, 3986, 3986, 3986, 3986, 3987,
     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,    0, 3987,

     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3988, 3988,
     3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988,
     3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988,
     3988, 3988, 3988, 3988, 3988, 3988, 3988, 3989, 3989, 3989,
     3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989,    0, 3989,
        0, 3989, 3989,    0,    0, 3989,    0,    0,    0,    0,
        0,    0,    0, 3989, 3989, 3989, 3990, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990,

     3990, 3990, 3990, 3990, 3990, 3991, 3991, 3991, 3991, 3991,
     3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991,
     3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991,
     3991, 3991, 3991, 3991, 3992, 3992, 3992, 3992, 3992, 3992,
     3992, 3992, 3992, 3992, 3992,    0, 3992,    0, 3992, 3992,
        0,    0, 3992,    0,    0,    0,    0,    0,    0,    0,
     3992, 3992, 3992, 3993, 3993, 3993, 3993, 3993, 3993, 3993,
     3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993,
     3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993, 3993,
     3993, 3993, 3994, 3994, 3994, 3994,    0, 3994, 3994,    0,

     3994, 3994, 3994, 3994, 3994, 3994, 3994, 3995, 3995, 3995,
     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995,    0, 3995,
        0, 3995, 3995,    0,    0, 3995,    0,    0,    0,    0,
        0,    0,    0, 3995, 3995, 3995, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996,    0, 3996,    0,
     3996, 3996,    0,    0, 3996,    0,    0,    0,    0,    0,
        0,    0, 3996, 3996, 3996, 3997, 3997, 3997, 3997, 3997,
     3997, 3997, 3997, 3997, 3997, 3997,    0, 3997,    0, 3997,
     3997,    0,    0, 3997,    0,    0,    0,    0,    0,    0,
        0, 3997, 3997, 3997, 3998, 3998, 3998, 3998, 3998, 3998,

     3998, 3998, 3998, 3998, 3998,    0, 3998,    0, 3998, 3998,
        0,    0, 3998,    0,    0,    0,    0,    0,    0,    0,
     3998, 3998, 3998, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999,    0, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,
     4000,    0, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,
     4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,
     4000, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,
     4001, 4001,    0, 4001,    0, 4001, 4001,    0,    0, 4001,

        0,    0,    0,    0,    0,    0,    0, 4001, 4001, 4001,
     4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004,    0,
     4004,    0, 4004, 4004,    0,    0, 4004,    0,    0,    0,
        0,    0,    0,    0, 4004, 4004, 4004, 4005, 4005, 4005,

     4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005,    0, 4005,
        0, 4005, 4005,    0,    0, 4005,    0,    0,    0,    0,
        0,    0,    0, 4005, 4005, 4005, 4006, 4006, 4006, 4006,
     4006, 4006, 4006, 4006, 4006, 4006, 4006,    0, 4006,    0,
     4006, 4006,    0,    0, 4006,    0,    0,    0,    0,    0,
        0,    0, 4006, 4006, 4006, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4008, 4008, 4008, 4008, 4008, 4008,
     4008, 4008, 4008, 4008, 4008,    0, 4008,    0, 4008, 4008,

        0,    0, 4008,    0,    0,    0,    0,    0,    0,    0,
     4008, 4008, 4008, 4009, 4009, 4009, 4009, 4009, 4009, 4009,
     4009, 4009, 4009, 4009,    0, 4009,    0, 4009, 4009,    0,
        0, 4009,    0,    0,    0,    0, 4009,    0,    0, 4009,
     4009, 4009, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,
     4010, 4011, 4011, 4011, 4011, 4011, 4011, 4011, 4011, 4011,
     4011, 4011,    0, 4011,    0, 4011, 4011,    0,    0, 4011,
        0,    0,    0,    0,    0,    0,    0, 4011, 4011, 4011,

     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,    0, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4014, 4014,
     4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014,    0,
     4014,    0, 4014, 4014,    0,    0, 4014,    0,    0,    0,
        0,    0,    0,    0, 4014, 4014, 4014, 4015, 4015, 4015,
     4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015,    0, 4015,

        0, 4015, 4015,    0,    0, 4015,    0,    0,    0,    0,
        0,    0,    0, 4015, 4015, 4015, 4016, 4016, 4016, 4016,
     4016, 4016, 4016, 4016, 4016, 4016, 4016,    0, 4016,    0,
     4016, 4016,    0,    0, 4016,    0,    0,    0,    0,    0,
        0,    0, 4016, 4016, 4016, 4017, 4017, 4017, 4017,    0,
     4017, 4017,    0, 4017, 4017, 4017, 4017, 4017, 4017, 4017,
     4018,    0,    0,    0, 4018,    0, 4018, 4018,    0, 4018,
     4018, 4018, 4018, 4018, 4018, 4018, 4019, 4019, 4019, 4019,
     4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019,
     4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019,

     4019, 4019, 4019, 4019, 4019, 4020, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4021, 4021,    0,    0,    0,    0,
        0,    0,    0,    0, 4021, 4021, 4021, 4021,    0, 4021,
     4021,    0, 4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021,
     4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022,
     4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022,
     4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,

     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4024, 4024,
     4024, 4024, 4024, 4024, 4024, 4024, 4024,    0, 4024, 4024,
     4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024,
     4024, 4024, 4024, 4024, 4024, 4024, 4024, 4025, 4025, 4025,
     4025, 4025, 4025, 4025, 4025, 4025,    0, 4025, 4025, 4025,
     4025, 4025, 4025, 4025, 4025, 4025, 4025, 4025, 4025, 4025,
     4025, 4025, 4025, 4025, 4025, 4025, 4026, 4026, 4026, 4026,
     4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026,
     4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026,

     4026, 4026, 4026, 4026, 4026, 4027, 4027, 4027, 4027, 4027,
     4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027,
     4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027,
     4027, 4027, 4027, 4027, 4028, 4028, 4028, 4028, 4028, 4028,
     4028, 4028, 4028, 4028, 4028,    0, 4028,    0, 4028, 4028,
        0,    0, 4028,    0,    0,    0,    0,    0,    0,    0,
     4028, 4028, 4028, 4029, 4029, 4029, 4029, 4029, 4029, 4029,
     4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029,
     4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029,
     4029, 4029, 4030, 4030, 4030, 4030, 4030, 4030, 4030, 4030,

     4030, 4030, 4030,    0, 4030,    0, 4030, 4030,    0,    0,
     4030,    0,    0,    0,    0,    0,    0,    0, 4030, 4030,
     4030, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031,
     4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031,
     4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031,
     4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032,
     4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032,
     4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4033,
     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033,

     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4035, 4035, 4035,
     4035, 4035, 4035, 4035, 4035, 4035, 4035, 4035,    0, 4035,
        0, 4035, 4035,    0,    0, 4035,    0,    0,    0,    0,
        0,    0,    0, 4035, 4035, 4035, 4036, 4036,    0,    0,
        0,    0,    0, 4036,    0,    0, 4036, 4036, 4036, 4036,
        0, 4036, 4036,    0, 4036, 4036, 4036, 4036, 4036, 4036,
     4036, 4037, 4037,    0, 4037, 4037, 4037, 4037, 4037, 4037,

     4037, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038,
        0, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038,
     4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038,
     4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039,    0,
     4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4040,
     4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,
     4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,
     4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4041, 4041,
     4041, 4041, 4041, 4041, 4041, 4041, 4041,    0, 4041, 4041,

     4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041,
     4041, 4041, 4041, 4041, 4041, 4041, 4041, 4042, 4042, 4042,
     4042,    0, 4042, 4042,    0, 4042, 4042, 4042, 4042, 4042,
     4042, 4042, 4043, 4043, 4043, 4043, 4043, 4043, 4043, 4043,
     4043, 4043, 4043, 4043, 4043, 4043, 4043, 4043, 4043, 4043,
     4043, 4043, 4043, 4043, 4043, 4043, 4043, 4043, 4043, 4043,
     4043, 4044, 4044, 4044, 4044, 4044, 4044, 4044, 4044, 4044,
     4044, 4044,    0, 4044,    0, 4044, 4044,    0,    0, 4044,
        0,    0,    0,    0,    0,    0,    0, 4044, 4044, 4044,
     4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045,

     4045,    0, 4045,    0, 4045, 4045,    0,    0, 4045,    0,
        0,    0,    0,    0,    0,    0, 4045, 4045, 4045, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
        0, 4046,    0, 4046, 4046,    0,    0, 4046,    0,    0,
        0,    0,    0,    0,    0, 4046, 4046, 4046, 4047, 4047,
     4047, 4047, 4047, 4047, 4047, 4047, 4047, 4047, 4047,    0,
     4047,    0, 4047, 4047,    0,    0, 4047,    0,    0,    0,
        0,    0,    0,    0, 4047, 4047, 4047, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4049, 4049, 4049, 4049,
     4049, 4049, 4049, 4049, 4049, 4049, 4049,    0, 4049,    0,
     4049, 4049,    0,    0, 4049,    0,    0,    0,    0,    0,
        0,    0, 4049, 4049, 4049, 4050, 4050, 4050, 4050, 4050,
     4050, 4050, 4050, 4050,    0, 4050, 4050, 4050, 4050, 4050,
     4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050, 4050,
     4050, 4050, 4050, 4050, 4051, 4051, 4051, 4051, 4051, 4051,
     4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051,
     4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051,
     4051, 4051, 4051, 4052, 4052, 4052, 4052, 4052, 4052, 4052,

     4052, 4052, 4052, 4052,    0, 4052,    0, 4052, 4052,    0,
        0, 4052,    0,    0,    0,    0,    0,    0,    0, 4052,
     4052, 4052, 4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053,
     4053, 4053, 4053,    0, 4053,    0, 4053, 4053,    0,    0,
     4053,    0,    0,    0,    0,    0,    0,    0, 4053, 4053,
     4053, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054,
     4054, 4054,    0, 4054,    0, 4054, 4054,    0,    0, 4054,
        0,    0,    0,    0,    0,    0,    0, 4054, 4054, 4054,
     4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055,    0,
     4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055,

     4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4056,
     4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
        0, 4056,    0, 4056, 4056,    0,    0, 4056,    0,    0,
        0,    0,    0,    0,    0, 4056, 4056, 4056, 4057, 4057,
     4057, 4057, 4057, 4057, 4057, 4057, 4057, 4057, 4057,    0,
     4057,    0, 4057, 4057,    0,    0, 4057,    0,    0,    0,
        0,    0,    0,    0, 4057, 4057, 4057, 4058, 4058, 4058,
     4058, 4058, 4058, 4058, 4058, 4058, 4058, 4058,    0, 4058,
        0, 4058, 4058,    0,    0, 4058,    0,    0,    0,    0,
        0,    0,    0, 4058, 4058, 4058, 4059, 4059, 4059, 4059,

     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4060, 4060, 4060, 4060, 4060,
     4060, 4060, 4060, 4060,    0, 4060, 4060, 4060, 4060, 4060,
     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060,
     4060, 4060, 4060, 4060, 4061, 4061, 4061, 4061, 4061, 4061,
     4061, 4061, 4061, 4061, 4061,    0, 4061,    0, 4061, 4061,
        0,    0, 4061,    0,    0,    0,    0,    0,    0,    0,
     4061, 4061, 4061, 4062, 4062, 4062, 4062, 4062, 4062, 4062,
     4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062,

     4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062,
     4062, 4062, 4063, 4063, 4063, 4063,    0, 4063, 4063,    0,
     4063, 4063, 4063, 4063, 4063, 4063, 4063, 4064, 4064,    0,
        0,    0,    0,    0, 4064,    0,    0,    0,    0,    0,
        0,    0, 4064, 4064,    0, 4064, 4064, 4064, 4064, 4064,
     4064, 4064, 4064, 4065,    0,    0,    0, 4065,    0, 4065,
     4065,    0, 4065, 4065, 4065, 4065, 4065, 4065, 4065, 4066,
     4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
     4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
     4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4067, 4067,

     4067, 4067, 4067, 4067, 4067, 4067, 4067,    0, 4067, 4067,
     4067, 4067, 4067, 4067, 4067, 4067, 4067, 4067, 4067, 4067,
     4067, 4067, 4067, 4067, 4067, 4067, 4067, 4068, 4068,    0,
        0,    0,    0,    0,    0,    0,    0, 4068, 4068, 4068,
     4068,    0, 4068, 4068,    0, 4068, 4068, 4068, 4068, 4068,
     4068, 4068, 4068, 4069, 4069,    0, 4069, 4069, 4069, 4069,
     4069, 4069, 4069, 4070, 4070, 4070, 4070, 4070, 4070, 4070,
     4070, 4070, 4070, 4070, 4070, 4070, 4070, 4070, 4070, 4070,
     4070, 4070, 4070, 4070, 4070, 4070, 4070, 4070, 4070, 4070,
     4070, 4070, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071,

     4071,    0, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071,
     4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071, 4071,
     4071, 4072, 4072, 4072, 4072, 4072, 4072, 4072, 4072, 4072,
     4072, 4072,    0, 4072,    0, 4072, 4072,    0,    0, 4072,
        0,    0,    0,    0,    0,    0,    0, 4072, 4072, 4072,
     4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073,    0,
     4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073,
     4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4074,
     4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074,    0, 4074,
     4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074,

     4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4075, 4075,
     4075, 4075, 4075, 4075, 4075, 4075, 4075,    0, 4075, 4075,
     4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075, 4075,
     4075, 4075, 4075, 4075, 4075, 4075, 4075, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076,    0, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4078, 4078, 4078, 4078, 4078,

     4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078,
     4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078,
     4078, 4078, 4078, 4078, 4079, 4079, 4079, 4079, 4079, 4079,
     4079, 4079, 4079, 4079, 4079, 4079, 4079, 4079, 4079, 4079,
     4079, 4079, 4079, 4079, 4079, 4079, 4079, 4079, 4079, 4079,
     4079, 4079, 4079, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080,    0, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
     4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081,

     4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
     4081, 4082, 4082, 4082, 4082,    0, 4082, 4082,    0, 4082,
     4082, 4082, 4082, 4082, 4082, 4082, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4084, 4084,    0, 4084, 4084,
     4084, 4084, 4084, 4084, 4084, 4085, 4085, 4085, 4085, 4085,
     4085, 4085, 4085, 4085,    0, 4085, 4085, 4085, 4085, 4085,
     4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085,
     4085, 4085, 4085, 4085, 4086, 4086, 4086, 4086,    0, 4086,

     4086,    0, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4087,
     4087, 4087, 4087, 4087, 4087, 4087, 4087, 4087, 4087, 4087,
     4087, 4087, 4087, 4087, 4087, 4087, 4087, 4087, 4087, 4087,
     4087, 4087, 4087, 4087, 4087, 4087, 4087, 4087, 4088, 4088,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,    0,
     4088,    0, 4088, 4088,    0,    0, 4088,    0,    0,    0,
        0,    0,    0,    0, 4088, 4088, 4088, 4089, 4089, 4089,
     4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089,
     4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089,
     4089, 4089, 4089, 4089, 4089, 4089, 4090, 4090, 4090, 4090,

     4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090,
     4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090,
     4090, 4090, 4090, 4090, 4090, 4091, 4091, 4091, 4091, 4091,
     4091, 4091, 4091, 4091, 4091, 4091,    0, 4091,    0, 4091,
     4091,    0,    0, 4091,    0,    0,    0,    0,    0,    0,
        0, 4091, 4091, 4091, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4092,    0, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4092, 4093, 4093, 4093, 4093, 4093, 4093, 4093,
     4093, 4093, 4093, 4093,    0, 4093,    0, 4093, 4093,    0,

        0, 4093,    0,    0,    0,    0,    0,    0,    0, 4093,
     4093, 4093, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,
     4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,
     4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,
     4094, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
        0, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
     4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
     4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4097,

     4097,    0,    0,    0,    0,    0,    0,    0,    0, 4097,
     4097, 4097, 4097,    0, 4097, 4097,    0, 4097, 4097, 4097,
     4097, 4097, 4097, 4097, 4097, 4098, 4098, 4098, 4098, 4098,
     4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098,
     4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098,
     4098, 4098, 4098, 4098, 4099, 4099, 4099, 4099, 4099, 4099,
     4099, 4099, 4099,    0, 4099, 4099, 4099, 4099, 4099, 4099,
     4099, 4099, 4099, 4099, 4099, 4099, 4099, 4099, 4099, 4099,
     4099, 4099, 4099, 4100, 4100, 4100, 4100, 4100, 4100, 4100,
     4100, 4100, 4100, 4100,    0, 4100,    0, 4100, 4100,    0,

        0, 4100,    0,    0,    0,    0, 4100,    0,    0, 4100,
     4100, 4100, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101,
     4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101,
     4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101,
     4101, 4102, 4102,    0,    0,    0,    0,    0,    0,    0,
        0, 4102, 4102, 4102,    0,    0, 4102, 4102,    0, 4102,
     4102, 4102, 4102, 4102, 4102, 4102, 4102, 4103, 4103,    0,
        0,    0,    0,    0, 4103,    0,    0,    0,    0,    0,
        0,    0, 4103, 4103,    0, 4103, 4103, 4103, 4103, 4103,
     4103, 4103, 4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104,

     4104,    0, 4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104,
     4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104, 4104,
     4104, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105, 4105,
     4105, 4105,    0, 4105,    0, 4105, 4105,    0,    0, 4105,
        0,    0,    0,    0, 4105,    0,    0, 4105, 4105, 4105,
     4106, 4106, 4106, 4106, 4106, 4106, 4106, 4106, 4106, 4106,
     4106,    0, 4106,    0, 4106, 4106,    0,    0, 4106,    0,
        0,    0,    0,    0,    0,    0, 4106, 4106, 4106, 4107,
     4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,    0, 4107,
     4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,

     4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4108, 4108,
     4108, 4108, 4108, 4108, 4108, 4108, 4108, 4108, 4108, 4108,
     4108, 4108, 4108, 4108, 4108, 4108, 4108, 4108, 4108, 4108,
     4108, 4108, 4108, 4108, 4108, 4108, 4108, 4109, 4109, 4109,
     4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109,
     4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109,
     4109, 4109, 4109, 4109, 4109, 4109, 4110, 4110, 4110, 4110,
     4110, 4110, 4110, 4110, 4110,    0, 4110, 4110, 4110, 4110,
     4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110,
     4110, 4110, 4110, 4110, 4110, 4111, 4111, 4111, 4111, 4111,

     4111, 4111, 4111, 4111, 4111, 4111,    0, 4111,    0, 4111,
     4111,    0,    0, 4111,    0,    0,    0,    0,    0,    0,
        0, 4111, 4111, 4111, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4113, 4113, 4113, 4113,    0, 4113, 4113,
        0, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4114, 4114,
     4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114,    0,
     4114,    0, 4114, 4114,    0,    0, 4114,    0,    0,    0,
        0,    0,    0,    0, 4114, 4114, 4114, 4115, 4115, 4115,

     4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115,
     4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115,
     4115, 4115, 4115, 4115, 4115, 4115, 4116, 4116, 4116, 4116,
        0, 4116, 4116,    0, 4116, 4116, 4116, 4116, 4116, 4116,
     4116, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117,
        0, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117,
     4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117, 4117,
     4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118,
     4118,    0, 4118,    0, 4118, 4118,    0,    0, 4118,    0,
        0,    0,    0,    0,    0,    0, 4118, 4118, 4118, 4119,

     4119, 4119, 4119, 4119, 4119, 4119, 4119, 4119, 4119, 4119,
        0, 4119,    0, 4119, 4119,    0,    0, 4119,    0,    0,
        0,    0,    0,    0,    0, 4119, 4119, 4119, 4120, 4120,
     4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120,
     4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120,
     4120, 4120, 4120, 4120, 4120, 4120, 4120, 4121, 4121, 4121,
     4121, 4121, 4121, 4121, 4121, 4121,    0, 4121, 4121, 4121,
     4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121,
     4121, 4121, 4121, 4121, 4121, 4121, 4122, 4122, 4122, 4122,
     4122, 4122, 4122, 4122, 4122, 4122, 4122,    0, 4122,    0,

     4122, 4122,    0,    0, 4122,    0,    0,    0,    0,    0,
        0,    0, 4122, 4122, 4122, 4123, 4123, 4123, 4123, 4123,
     4123, 4123, 4123, 4123, 4123, 4123,    0, 4123,    0, 4123,
     4123,    0,    0, 4123,    0,    0,    0,    0,    0,    0,
        0, 4123, 4123, 4123, 4124, 4124, 4124, 4124, 4124, 4124,
     4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
     4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
     4124, 4124, 4124, 4125, 4125, 4125, 4125, 4125, 4125, 4125,
     4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125,
     4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125,

     4125, 4125, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126,
     4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126,
     4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126,
     4126, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127,
        0, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127,
     4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4127,
     4128, 4128,    0,    0,    0,    0,    0,    0,    0,    0,
     4128, 4128, 4128, 4128,    0, 4128, 4128,    0, 4128, 4128,
     4128, 4128, 4128, 4128, 4128, 4128, 4129, 4129,    0, 4129,
     4129, 4129, 4129, 4129, 4129, 4129, 4130, 4130, 4130, 4130,

     4130, 4130, 4130, 4130, 4130, 4130, 4130, 4130, 4130, 4130,
     4130, 4130, 4130, 4130, 4130, 4130, 4130, 4130, 4130, 4130,
     4130, 4130, 4130, 4130, 4130, 4131, 4131, 4131, 4131, 4131,
     4131, 4131, 4131, 4131, 4131, 4131,    0, 4131,    0, 4131,
     4131,    0,    0, 4131,    0,    0,    0,    0,    0,    0,
        0, 4131, 4131, 4131, 4132, 4132, 4132, 4132, 4132, 4132,
     4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132,
     4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132, 4132,
     4132, 4132, 4132, 4133, 4133, 4133, 4133, 4133, 4133, 4133,
     4133, 4133, 4133, 4133, 4133, 4133, 4133, 4133, 4133, 4133,

     4133, 4133, 4133, 4133, 4133, 4133, 4133, 4133, 4133, 4133,
     4133, 4133, 4134, 4134,    0,    0,    0,    0,    0,    0,
        0,    0, 4134, 4134, 4134,    0,    0, 4134, 4134,    0,
     4134, 4134, 4134, 4134, 4134, 4134, 4134, 4134, 4135, 4135,
     4135, 4135, 4135, 4135, 4135, 4135, 4135, 4135, 4135,    0,
     4135,    0, 4135, 4135,    0,    0, 4135,    0,    0,    0,
        0,    0,    0,    0, 4135, 4135, 4135, 4136, 4136, 4136,
     4136, 4136, 4136, 4136, 4136, 4136, 4136, 4136,    0, 4136,
        0, 4136, 4136,    0,    0, 4136,    0,    0,    0,    0,
        0,    0,    0, 4136, 4136, 4136, 4137, 4137, 4137, 4137,

     4137, 4137, 4137, 4137, 4137,    0, 4137, 4137, 4137, 4137,
     4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
     4137, 4137, 4137, 4137, 4137, 4138, 4138, 4138, 4138, 4138,
     4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138,
     4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138,
     4138, 4138, 4138, 4138, 4139, 4139, 4139, 4139, 4139, 4139,
     4139, 4139, 4139,    0, 4139, 4139, 4139, 4139, 4139, 4139,
     4139, 4139, 4139, 4139, 4139, 4139, 4139, 4139, 4139, 4139,
     4139, 4139, 4139, 4140, 4140, 4140, 4140, 4140, 4140, 4140,
     4140, 4140, 4140, 4140, 4140, 4140, 4140, 4140, 4140, 4140,

     4140, 4140, 4140, 4140, 4140, 4140, 4140, 4140, 4140, 4140,
     4140, 4140, 4141, 4141, 4141, 4141, 4141, 4141, 4141, 4141,
     4141, 4141, 4141,    0, 4141,    0, 4141, 4141,    0,    0,
     4141,    0,    0,    0,    0,    0,    0,    0, 4141, 4141,
     4141, 4142, 4142,    0,    0,    0,    0,    0,    0,    0,
        0, 4142, 4142, 4142,    0,    0, 4142, 4142,    0, 4142,
     4142, 4142, 4142, 4142, 4142, 4142, 4142, 4143, 4143,    0,
        0,    0,    0,    0, 4143,    0,    0,    0,    0,    0,
        0,    0, 4143, 4143,    0, 4143, 4143, 4143, 4143, 4143,
     4143, 4143, 4144, 4144, 4144, 4144, 4144, 4144, 4144, 4144,

     4144, 4144, 4144,    0, 4144,    0, 4144, 4144,    0,    0,
     4144,    0,    0,    0,    0,    0,    0,    0, 4144, 4144,
     4144, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145,
     4145, 4145,    0, 4145,    0, 4145, 4145,    0,    0, 4145,
        0,    0,    0,    0,    0,    0,    0, 4145, 4145, 4145,
     4146,    0,    0,    0,    0,    0, 4146, 4146,    0, 4146,
     4146, 4146, 4146, 4146, 4146, 4146, 4147, 4147, 4147, 4147,
     4147, 4147, 4147, 4147, 4147, 4147, 4147,    0, 4147,    0,
     4147, 4147,    0,    0, 4147,    0,    0,    0,    0,    0,
        0,    0, 4147, 4147, 4147, 4148, 4148, 4148, 4148, 4148,

     4148, 4148, 4148, 4148, 4148, 4148,    0, 4148,    0, 4148,
     4148,    0,    0, 4148,    0,    0,    0,    0,    0,    0,
        0, 4148, 4148, 4148, 4149, 4149, 4149, 4149, 4149, 4149,
     4149, 4149, 4149, 4149, 4149,    0, 4149,    0, 4149, 4149,
        0,    0, 4149,    0,    0,    0,    0,    0,    0,    0,
     4149, 4149, 4149, 4150, 4150, 4150, 4150, 4150, 4150, 4150,
     4150, 4150, 4150, 4150,    0, 4150,    0, 4150, 4150,    0,
        0, 4150,    0,    0,    0,    0,    0,    0,    0, 4150,
     4150, 4150, 4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151,
     4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151,

     4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151, 4151,
     4151, 4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152,
     4152, 4152,    0, 4152,    0, 4152, 4152,    0,    0, 4152,
        0,    0,    0,    0,    0,    0,    0, 4152, 4152, 4152,
     4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153,
     4153,    0, 4153,    0, 4153, 4153,    0,    0, 4153,    0,
        0,    0,    0,    0,    0,    0, 4153, 4153, 4153, 4154,
     4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154,
     4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154,
     4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4155, 4155,

     4155, 4155, 4155, 4155, 4155, 4155, 4155, 4155, 4155,    0,
     4155,    0, 4155, 4155,    0,    0, 4155,    0,    0,    0,
        0,    0,    0,    0, 4155, 4155, 4155, 4156, 4156, 4156,
     4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156,
     4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156,
     4156, 4156, 4156, 4156, 4156, 4156, 4157, 4157, 4157, 4157,
     4157, 4157, 4157, 4157, 4157, 4157, 4157,    0, 4157,    0,
     4157, 4157,    0,    0, 4157,    0,    0,    0,    0,    0,
        0,    0, 4157, 4157, 4157, 4158, 4158, 4158, 4158, 4158,
     4158, 4158, 4158, 4158, 4158, 4158,    0, 4158,    0, 4158,

     4158,    0,    0, 4158,    0,    0,    0,    0,    0,    0,
        0, 4158, 4158, 4158, 4159, 4159, 4159, 4159, 4159, 4159,
     4159, 4159, 4159, 4159, 4159,    0, 4159,    0, 4159, 4159,
        0,    0, 4159,    0,    0,    0,    0,    0,    0,    0,
     4159, 4159, 4159, 4160, 4160, 4160, 4160, 4160, 4160, 4160,
     4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160,
     4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160,
     4160, 4160, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161,
     4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161,
     4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161,

     4161, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162,
     4162, 4162,    0, 4162,    0, 4162, 4162,    0,    0, 4162,
        0,    0,    0,    0,    0,    0,    0, 4162, 4162, 4162,
     4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163,
     4163,    0, 4163,    0, 4163, 4163,    0,    0, 4163,    0,
        0,    0,    0,    0,    0,    0, 4163, 4163, 4163, 4164,
     4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164,
     4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164,
     4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4165, 4165,
     4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165,

     4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165,
     4165, 4165, 4165, 4165, 4165, 4165, 4165, 4166, 4166, 4166,
     4166, 4166, 4166, 4166, 4166, 4166, 4166, 4166,    0, 4166,
        0, 4166, 4166,    0,    0, 4166,    0,    0,    0,    0,
        0,    0,    0, 4166, 4166, 4166, 4167, 4167, 4167, 4167,
     4167, 4167, 4167, 4167, 4167, 4167, 4167,    0, 4167,    0,
     4167, 4167,    0,    0, 4167,    0,    0,    0,    0,    0,
        0,    0, 4167, 4167, 4167, 4168, 4168, 4168, 4168, 4168,
     4168, 4168, 4168, 4168, 4168, 4168,    0, 4168,    0, 4168,
     4168,    0,    0, 4168,    0,    0,    0,    0,    0,    0,

        0, 4168, 4168, 4168, 4169, 4169, 4169, 4169, 4169, 4169,
     4169, 4169, 4169, 4169, 4169,    0, 4169,    0, 4169, 4169,
        0,    0, 4169,    0,    0,    0,    0,    0,    0,    0,
     4169, 4169, 4169, 4170, 4170, 4170, 4170, 4170, 4170, 4170,
     4170, 4170, 4170, 4170,    0, 4170,    0, 4170, 4170,    0,
        0, 4170,    0,    0,    0,    0,    0,    0,    0, 4170,
     4170, 4170, 4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171,
     4171, 4171, 4171,    0, 4171,    0, 4171, 4171,    0,    0,
     4171,    0,    0,    0,    0,    0,    0,    0, 4171, 4171,
     4171, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172,

     4172, 4172,    0, 4172,    0, 4172, 4172,    0,    0, 4172,
        0,    0,    0,    0,    0,    0,    0, 4172, 4172, 4172,
     4173, 4173, 4173, 4173, 4173, 4173, 4173, 4173, 4173, 4173,
     4173,    0, 4173,    0, 4173, 4173,    0,    0, 4173,    0,
        0,    0,    0,    0,    0,    0, 4173, 4173, 4173, 4174,
     4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174,
        0, 4174,    0, 4174, 4174,    0,    0, 4174,    0,    0,
        0,    0,    0,    0,    0, 4174, 4174, 4174, 4175, 4175,
     4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175,    0,
     4175,    0, 4175, 4175,    0,    0, 4175,    0,    0,    0,

        0,    0,    0,    0, 4175, 4175, 4175, 4176, 4176, 4176,
     4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176,    0, 4176,
        0, 4176, 4176,    0,    0, 4176,    0,    0,    0,    0,
        0,    0,    0, 4176, 4176, 4176, 4177, 4177, 4177, 4177,
     4177, 4177, 4177, 4177, 4177, 4177, 4177,    0, 4177,    0,
     4177, 4177,    0,    0, 4177,    0,    0,    0,    0,    0,
        0,    0, 4177, 4177, 4177, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4179, 4179, 4179, 4179, 4179, 4179,

     4179, 4179, 4179, 4179, 4179,    0, 4179,    0, 4179, 4179,
        0,    0, 4179,    0,    0,    0,    0,    0,    0,    0,
     4179, 4179, 4179, 4180, 4180, 4180, 4180, 4180, 4180, 4180,
     4180, 4180, 4180, 4180,    0, 4180,    0, 4180, 4180,    0,
        0, 4180,    0,    0,    0,    0,    0,    0,    0, 4180,
     4180, 4180, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181,
     4181, 4181, 4181,    0, 4181,    0, 4181, 4181,    0,    0,
     4181,    0,    0,    0,    0,    0,    0,    0, 4181, 4181,
     4181, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182,
     4182, 4182,    0, 4182,    0, 4182, 4182,    0,    0, 4182,

        0,    0,    0,    0,    0,    0,    0, 4182, 4182, 4182,
     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183,    0, 4183,    0, 4183, 4183,    0,    0, 4183,    0,
        0,    0,    0,    0,    0,    0, 4183, 4183, 4183, 4184,
        0,    0,    0, 4184,    0, 4184, 4184,    0, 4184, 4184,
     4184, 4184, 4184, 4184, 4184, 4185, 4185, 4185, 4185, 4185,
     4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185,
     4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185,
     4185, 4185, 4185, 4185, 4186, 4186, 4186, 4186, 4186, 4186,
     4186, 4186, 4186, 4186, 4186,    0, 4186,    0, 4186, 4186,

        0,    0, 4186,    0,    0,    0,    0,    0,    0,    0,
     4186, 4186, 4186, 4187, 4187, 4187, 4187, 4187, 4187, 4187,
     4187, 4187, 4187, 4187,    0, 4187,    0, 4187, 4187,    0,
        0, 4187,    0,    0,    0,    0,    0,    0,    0, 4187,
     4187, 4187, 4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188,
     4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188,
     4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188,
     4188, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189,    0, 4189,    0, 4189, 4189,    0,    0, 4189,
        0,    0,    0,    0,    0,    0,    0, 4189, 4189, 4189,

     4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190,
     4190,    0, 4190,    0, 4190, 4190,    0,    0, 4190,    0,
        0,    0,    0,    0,    0,    0, 4190, 4190, 4190, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4193, 4193, 4193,
     4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193,

     4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193,
     4193, 4193, 4193, 4193, 4193, 4193, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4196, 4196, 4196, 4196, 4196, 4196,
     4196, 4196, 4196, 4196, 4196,    0, 4196,    0, 4196, 4196,
        0,    0, 4196,    0,    0,    0,    0,    0,    0,    0,

     4196, 4196, 4196, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4197, 4197,    0, 4197,    0, 4197, 4197,    0,
        0, 4197,    0,    0,    0,    0,    0,    0,    0, 4197,
     4197, 4197, 4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198,
     4198, 4198, 4198,    0, 4198,    0, 4198, 4198,    0,    0,
     4198,    0,    0,    0,    0,    0,    0,    0, 4198, 4198,
     4198, 4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199,
     4199, 4199,    0, 4199,    0, 4199, 4199,    0,    0, 4199,
        0,    0,    0,    0,    0,    0,    0, 4199, 4199, 4199,
     4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200,

     4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200,
     4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4201,
     4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201,
        0, 4201,    0, 4201, 4201,    0,    0, 4201,    0,    0,
        0,    0,    0,    0,    0, 4201, 4201, 4201, 4202, 4202,
     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,

     4203, 4203, 4203, 4203, 4203, 4203, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204,    0, 4204,    0,
     4204, 4204,    0,    0, 4204,    0,    0,    0,    0,    0,
        0,    0, 4204, 4204, 4204, 4205, 4205, 4205, 4205, 4205,
     4205, 4205, 4205, 4205, 4205, 4205,    0, 4205,    0, 4205,
     4205,    0,    0, 4205,    0,    0,    0,    0,    0,    0,
        0, 4205, 4205, 4205, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4207, 4207, 4207, 4207, 4207, 4207, 4207,

     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,
     4208, 4208, 4208,    0, 4208,    0, 4208, 4208,    0,    0,
     4208,    0,    0,    0,    0,    0,    0,    0, 4208, 4208,
     4208, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209,
     4209, 4209,    0, 4209,    0, 4209, 4209,    0,    0, 4209,
        0,    0,    0,    0,    0,    0,    0, 4209, 4209, 4209,
     4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210,
     4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210,

     4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4211,
     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211,
        0, 4211,    0, 4211, 4211,    0,    0, 4211,    0,    0,
        0,    0,    0,    0,    0, 4211, 4211, 4211, 4212, 4212,
     4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212,    0,
     4212,    0, 4212, 4212,    0,    0, 4212,    0,    0,    0,
        0,    0,    0,    0, 4212, 4212, 4212, 4213, 4213, 4213,
     4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213,
     4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213,
     4213, 4213, 4213, 4213, 4213, 4213, 4214, 4214, 4214, 4214,

     4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,
     4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,
     4214, 4214, 4214, 4214, 4214, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215, 4215, 4216, 4216, 4216, 4216, 4216, 4216,
     4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216,
     4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216,
     4216, 4216, 4216, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,

     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[500] =
    {   0,
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 
    1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 
    0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 
    0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 
    1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
    0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 
    1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 
    0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 
    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 
    0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
        };

static yyconst flex_int16_t yy_rule_linenum[499] =
    {   0,
      288,  289,  308,  317,  327,  334,  343,  352,  362,  372,
      381,  392,  401,  410,  417,  424,  433,  442,  451,  457,
      463,  469,  479,  488,  497,  506,  515,  524,  533,  542,
      554,  572,  578,  584,  590,  596,  602,  608,  614,  620,
      626,  632,  638,  644,  650,  656,  662,  668,  674,  685,
      691,  700,  706,  715,  721,  730,  739,  748,  756,  765,
      773,  781,  789,  797,  805,  816,  824,  832,  840,  851,
      859,  867,  875,  883,  894,  902,  910,  918,  926,  934,
      945,  956,  968,  980,  990,  998, 1010, 1021, 1028, 1039,
     1050, 1061, 1072, 1082, 1096, 1107, 1114, 1121, 1128, 1135,

     1142, 1149, 1158, 1165, 1172, 1179, 1186, 1193, 1200, 1207,
     1217, 1230, 1238, 1249, 1257, 1266, 1274, 1283, 1300, 1306,
     1312, 1318, 1324, 1330, 1336, 1342, 1348, 1354, 1360, 1366,
     1372, 1378, 1384, 1390, 1396, 1402, 1408, 1414, 1420, 1426,
     1432, 1438, 1444, 1450, 1456, 1462, 1468, 1474, 1480, 1486,
     1492, 1498, 1504, 1510, 1516, 1522, 1528, 1534, 1540, 1546,
     1552, 1558, 1564, 1570, 1576, 1582, 1588, 1594, 1601, 1606,
     1625, 1634, 1642, 1660, 1668, 1691, 1699, 1707, 1729, 1736,
     1744, 1751, 1758, 1765, 1772, 1779, 1791, 1800, 1807, 1814,
     1821, 1828, 1835, 1842, 1849, 1856, 1863, 1870, 1877, 1884,

     1891, 1898, 1905, 1915, 1922, 1929, 1936, 1943, 1950, 1957,
     1964, 1971, 1978, 1985, 1992, 1999, 2006, 2013, 2020, 2027,
     2034, 2041, 2048, 2055, 2062, 2069, 2076, 2083, 2096, 2103,
     2114, 2121, 2128, 2135, 2151, 2162, 2169, 2176, 2183, 2194,
     2201, 2212, 2223, 2229, 2235, 2241, 2247, 2253, 2259, 2265,
     2271, 2287, 2295, 2302, 2309, 2316, 2323, 2330, 2337, 2344,
     2351, 2358, 2365, 2376, 2382, 2388, 2394, 2400, 2406, 2412,
     2418, 2424, 2430, 2436, 2442, 2448, 2454, 2460, 2466, 2472,
     2478, 2484, 2490, 2496, 2502, 2508, 2514, 2520, 2526, 2532,
     2538, 2544, 2550, 2556, 2562, 2568, 2574, 2580, 2586, 2592,

     2598, 2604, 2610, 2618, 2625, 2644, 2654, 2661, 2668, 2689,
     2693, 2703, 2707, 2714, 2721, 2728, 2736, 2743, 2760, 2781,
     2786, 2796, 2804, 2814, 2821, 2828, 2835, 2842, 2849, 2856,
     2878, 2886, 2896, 2900, 2907, 2928, 2939, 2943, 2950, 2971,
     2979, 2989, 2995, 3004, 3013, 3022, 3031, 3040, 3049, 3058,
     3069, 3078, 3088, 3098, 3106, 3114, 3124, 3133, 3141, 3149,
     3157, 3165, 3173, 3181, 3189, 3197, 3205, 3213, 3221, 3229,
     3237, 3245, 3253, 3261, 3269, 3277, 3285, 3293, 3301, 3309,
     3317, 3325, 3333, 3341, 3349, 3357, 3365, 3373, 3381, 3389,
     3397, 3405, 3413, 3421, 3429, 3439, 3447, 3457, 3464, 3471,

     3478, 3485, 3492, 3501, 3508, 3528, 3539, 3547, 3558, 3564,
     3574, 3583, 3594, 3601, 3621, 3632, 3638, 3646, 3653, 3660,
     3680, 3690, 3700, 3711, 3717, 3724, 3731, 3759, 3767, 3775,
     3785, 3791, 3796, 3818, 3827, 3834, 3856, 3865, 3874, 3878,
     3902, 3911, 3936, 3947, 3951, 3958, 3982, 3992, 4002, 4012,
     4022, 4032, 4036, 4044, 4074, 4084, 4094, 4104, 4114, 4124,
     4134, 4142, 4150, 4157, 4164, 4173, 4197, 4207, 4217, 4241,
     4251, 4259, 4283, 4289, 4293, 4321, 4328, 4338, 4364, 4390,
     4401, 4428, 4438, 4448, 4455, 4463, 4471, 4478, 4485, 4510,
     4520, 4531, 4538, 4546, 4554, 4561, 4568, 4578

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
/* -*- mode: c++; indent-tabs-mode: nil; tab-width: 2 -*-
 *
 *  $Id: xquery.l,v 1.4 2006/11/14 05:24:43 Paul Pedersen Exp $
 *
 */
/*______________________________________________________________________
 |                                                                       
 |  An implementation of the w3c proposal:                              
 |                                                                       
 |  "Building a Tokenizer for XPath or XQuery,                          
 |   W3C Working Draft 4 April 2005"                                    
 |                                                                       
 |  [http://www.w3.org/TR/xquery-xpath-parsing/]                        
 |                                                                       
 |  Extensions including update, search, and XQueryP:                   
 |                                                                       
 |  [http://www.w3.org/TR/xqupdate/]                                    
 |  [http://www.w3.org/TR/xquery-full-text/]                            
 |  [http://www.ximep-2006.org/papers/Paper-Chamberlin-Carey.pdf]       
 |                                                                      
 |_______________________________________________________________________*/
#line 26 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"

#if defined (WIN32)
#pragma warning(disable: 4786)
#endif

#include <zorbatypes/representations.h>

#include <zorba/common/common.h>
#include <zorba/properties.h>

#include <cstdlib>
#include <errno.h>
#include <limits.h>
#include <iostream>
#include <string>

#include "compiler/parser/xquery_parser.hpp"
#include "compiler/parser/xquery_scanner.h"
#include "compiler/parser/xquery_driver.h"

typedef zorba::xquery_parser::token token;
typedef zorba::xquery_parser::token_type token_type;

#define TRY_STR_LIT( ttype, put, yytext, yyleng )                       \
  do {                                                                  \
    off_t res = getDriver()->symtab.put (yytext, yyleng);               \
    if (res < 0) return token::UNRECOGNIZED;                            \
    else {                                                              \
      yylval->sval = res;                                               \
      return token::ttype;                                              \
    }                                                                   \
 } while (0)

#define TRY_STRINGLIT( ttype, yytext, yyleng ) TRY_STR_LIT (ttype, put_stringlit, yytext, yyleng)

#define TRY_URILIT( ttype, yytext, yyleng ) TRY_STR_LIT (ttype, put_uri, yytext, yyleng)

/*
  Work around an incompatibility in flex (at least versions
  2.5.31 through 2.5.33): it generates code that does
  not conform to C89.  See Debian bug 333231
  <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
*/
#undef yywrap
#define yywrap() 1
     
/*
  By default yylex returns int, we use token_type.
  Unfortunately yyterminate by default returns 0, which is
  not of token_type.
*/
#define yyterminate() return token::END

std::string start_state(int);

#define YY_USER_ACTION \
{ \
  if (yy_flex_debug) { \
    std::cout<<'<'<<start_state(YY_START)<<">" /* << " "<<yytext<<"" */ << std::endl; \
    yylloc->columns(yyleng); \
  } \
}


/*______________________________________________________________________
*                                                                      *
*  Scanner options                                                     *
*______________________________________________________________________*/
/* %option case-insensitive */
/* %option nostdinit */
/* %option reentrant */
#define YY_NO_UNISTD_H 1
/* known expensive option */
/*_____________________________________________________________________
|
|  Whitespace definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Basic character classes
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  XQuery allows '' to escape ', and "" to escape ".
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  NCName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  QName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  VarName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Entity definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Numeric literal definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  String literal definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Content character definitions
|______________________________________________________________________*/
/*
NonXChar  [\x09\x0A\x0D\x20A-WY-Za-wy-z\x7B-\xFD]
NonMChar  [\x09\x0A\x0D\x20A-LN-Za-ln-z\x7B-\xFD]
NonLChar  [\x09\x0A\x0D\x20A-KM-Za-km-z\x7B-\xFD]
PITarget  (({NonXChar}{Char}*)|((X|x){NonMChar}{Char}*)|((X|x)(M|m){NonLChar}*)|({Char}{Char}{Char}{Char}+)) 
*/
/*______________________________________________________________________
| 
|  Exclusive start states
|______________________________________________________________________*/



















 
 







/* Update Modes */

/* Try-Catch Modes */

/*
  The macro YY_USER_ACTION can be defined to provide an action which is 
  always executed prior to the matched rule's action.

  The following paragraph suffices to track locations accurately. Each 
  time yylex is invoked, the begin position is moved onto the end 
  position. Then when a pattern is matched, the end position is advanced 
  of its width. In case it matched ends of lines, the end cursor is 
  adjusted, and each time blanks are matched, the begin cursor is moved 
  onto the end cursor to effectively ignore the blanks preceding tokens. 
  Comments would be treated equally. 
*/
#line 7162 "xquery_scanner.yy.cpp"

#define INITIAL 0
#define MODE_APOS_ATTRIBUTE_CONTENT 1
#define MODE_CDATA_SECTION 2
#define MODE_CLOSE_KINDTEST 3
#define MODE_DECLAREORDERING 4
#define MODE_ELEMENT_CONTENT 5
#define MODE_END_TAG 6
#define MODE_EXPR_COMMENT 7
#define MODE_ITEMTYPE 8
#define MODE_KINDTEST 9
#define MODE_KINDTESTFORPI 10
#define MODE_NAMESPACEDECL 11
#define MODE_NAMESPACEKEYWORD 12
#define MODE_OCCURRENCE_INDICATOR 13
#define MODE_OPERATOR 14
#define MODE_OPTION 15
#define MODE_PRAGMA 16
#define MODE_PRAGMACONTENTS 17
#define MODE_PROCESSING_INSTRUCTION_CTOR 18
#define MODE_PROCESSING_INSTRUCTION 19
#define MODE_PROCESSING_INSTRUCTION_CONTENT 20
#define MODE_QUOTE_ATTRIBUTE_CONTENT 21
#define MODE_SINGLETYPE 22
#define MODE_START_TAG 23
#define MODE_URITOOPERATOR 24
#define MODE_VARNAME 25
#define MODE_XMLSPACE_DECL 26
#define MODE_XML_COMMENT 27
#define MODE_XQUERY_VERSION 28
#define MODE_DECLAREREVALIDATION 29
#define MODE_CATCH 30

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 283 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"


 yylloc->step ();


#line 7355 "xquery_scanner.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3630 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 3629 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 499 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 499 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 500 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 288 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{ yylloc->step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 289 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{ yylloc->lines(yyleng); yylloc->step (); }
	YY_BREAK

typedef zorba::xquery_parser::token token;

/*______________________________________________________________________
   |
   |  INITIAL State
   |
   |  This state is for patterns that occur at the beginning  of an
   |  expression or subexpression.
   |______________________________________________________________________*/
/* maintain INITIAL */
/* ---------------- */
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 308 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VALIDATE_LBRACE" << endl;
#endif
  return token::VALIDATE_LBRACE;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 317 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put(yytext+9, yyleng-9);
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VALIDATE_MODE" << endl;
#endif
  return token::VALIDATE_MODE;
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 327 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TYPESWITCH_LPAR" << endl;
#endif
  return token::TYPESWITCH_LPAR;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 334 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEMENT_LBRACE" << endl;
#endif
  return token::ELEMENT_LBRACE;
}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 343 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ATTRIBUTE_LBRACE" << endl;
#endif
  return token::ATTRIBUTE_LBRACE;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 352 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext+10, yyleng-11, true, true);
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ATTRIBUTE_QNAME_LBRACE" << endl;
#endif
  return token::ATTRIBUTE_QNAME_LBRACE;
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 362 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext+8, yyleng-9, true, true);
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEMENT_QNAME_LBRACE" << endl;
#endif
  return token::ELEMENT_QNAME_LBRACE;
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 372 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOCUMENT_LBRACE" << endl;
#endif
  return token::DOCUMENT_LBRACE;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 381 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TEXT_LBRACE" << endl;
#endif
  return token::TEXT_LBRACE;
}
	YY_BREAK
/* transition to MODE_PROCESSING_INSTRUCTION_CTOR */
/* ---------------------------------------------- */
case 12:
YY_RULE_SETUP
#line 392 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_PROCESSING_INSTRUCTION_CTOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PROCESSING_INSTRUCTION" << endl;
#endif
  return token::PROCESSING_INSTRUCTION;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 401 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMENT_LBRACE" << endl;
#endif
  return token::COMMENT_LBRACE;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 410 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_FUNCTION" << endl;
#endif
  return token::DECLARE_FUNCTION;
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 417 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_UPDATING_FUNCTION" << endl;
#endif
  return token::DECLARE_UPDATING_FUNCTION;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 424 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 433 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ORDERED_LBRACE" << endl;
#endif
  return token::ORDERED_LBRACE;
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 442 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNORDERED_LBRACE" << endl;
#endif
  return token::UNORDERED_LBRACE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 451 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SEMI" << endl;
#endif
  return token::SEMI;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 457 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMA" << endl;
#endif
  return token::COMMA;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 463 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LPAR" << endl;
#endif
  return token::LPAR;
}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 469 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::IF_LPAR" << endl;
#endif
  return token::IF_LPAR;
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 479 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEMENT_LPAR" << endl;
#endif
  return token::ELEMENT_LPAR;
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 488 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ATTRIBUTE_LPAR" << endl;
#endif
  return token::ATTRIBUTE_LPAR;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 497 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCHEMA_ELEMENT_LPAR" << endl;
#endif
  return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 506 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCHEMA_ATTRIBUTE_LPAR" << endl;
#endif
  return token::SCHEMA_ATTRIBUTE_LPAR;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 515 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMENT_LPAR" << endl;
#endif
  return token::COMMENT_LPAR;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 524 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TEXT_LPAR" << endl;
#endif
  return token::TEXT_LPAR;
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 533 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NODE_LPAR" << endl;
#endif
  return token::NODE_LPAR;
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 542 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOCUMENT_NODE_LPAR" << endl;
#endif
  return token::DOCUMENT_NODE_LPAR;
}
	YY_BREAK
/* transition to KINDTESTFORPI */
/* --------------------------- */
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 554 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_KINDTESTFORPI);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PI_LPAR" << endl;
#endif
  return token::PI_LPAR;
}
	YY_BREAK
/* order dependence: this must follow the rules: xxx{S}"(" */
/* {QName}{S}"(" {
   yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng-1, false, true);
 #ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME_LPAR" << endl;
#endif
  return token::QNAME_LPAR;
  }*/
case 32:
YY_RULE_SETUP
#line 572 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::MINUS" << endl;
#endif
  return token::MINUS;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 578 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PLUS" << endl;
#endif
  return token::PLUS;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 584 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SLASH" << endl;
#endif
  return token::SLASH;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 590 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LEADING_LONE_SLASH" << endl;
#endif
  return token::LEADING_LONE_SLASH;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 596 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SLASH_SLASH" << endl;
#endif
  return token::SLASH_SLASH;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 602 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ANCESTOR_OR_SELF_AXIS" << endl;
#endif
  return token::ANCESTOR_OR_SELF_AXIS;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 608 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ANCESTOR_AXIS" << endl;
#endif
  return token::ANCESTOR_AXIS;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 614 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ATTRIBUTE_AXIS" << endl;
#endif
  return token::ATTRIBUTE_AXIS;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 620 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CHILD_AXIS" << endl;
#endif
  return token::CHILD_AXIS;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 626 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DESCENDANT_OR_SELF_AXIS" << endl;
#endif
  return token::DESCENDANT_OR_SELF_AXIS;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 632 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DESCENDANT_AXIS" << endl;
#endif
  return token::DESCENDANT_AXIS;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 638 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FOLLOWING_SIBLING_AXIS" << endl;
#endif
  return token::FOLLOWING_SIBLING_AXIS;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 644 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FOLLOWING_AXIS" << endl;
#endif
  return token::FOLLOWING_AXIS;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 650 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PARENT_AXIS" << endl;
#endif
  return token::PARENT_AXIS;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 656 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRECEDING_SIBLING_AXIS" << endl;
#endif
  return token::PRECEDING_SIBLING_AXIS;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 662 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRECEDING_AXIS" << endl;
#endif
  return token::PRECEDING_AXIS;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 668 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SELF_AXIS" << endl;
#endif
  return token::SELF_AXIS;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 674 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_SIGN" << endl;
#endif
  return token::AT_SIGN;
}
	YY_BREAK
/* transition to OPERATOR */
/* ---------------------- */
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 685 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 691 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->ival = getDriver()->symtab.integerval(yytext, yyleng);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INTEGER_LITERAL" << endl;
#endif
  return token::INTEGER_LITERAL;
}
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 700 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 706 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->decval = getDriver()->symtab.decimalval(yytext, yyleng);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECIMAL_LITERAL" << endl;
#endif
  return token::DECIMAL_LITERAL;
}
	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 715 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 721 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->dval = getDriver()->symtab.doubleval(yytext, yyleng);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOUBLE_LITERAL" << endl;
#endif
  return token::DOUBLE_LITERAL;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 730 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_ncname(yytext, yyleng-2);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEM_WILDCARD" << endl;
#endif
  return token::ELEM_WILDCARD;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 739 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 748 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR" << endl;
#endif
  return token::RPAR;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 756 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_ncname(yytext+2, yyleng-2);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PREFIX_WILDCARD" << endl;
#endif
  return token::PREFIX_WILDCARD;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 765 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STAR" << endl;
#endif
  return token::STAR;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 773 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "scanner::TRY_STRINGLIT" << std::endl;
#endif
  TRY_STRINGLIT (STRING_LITERAL, yytext, yyleng);
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 781 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_CONSTRUCTION" << endl;
#endif
  return token::DECLARE_CONSTRUCTION;
}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 789 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_DEFAULT_ORDER" << endl;
#endif
  return token::DECLARE_DEFAULT_ORDER;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 797 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOT_DOT" << endl;
#endif
  return token::DOT_DOT;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 805 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOT" << endl;
#endif
  return token::DOT;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 816 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEDECL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_DEFAULT_COLLATION" << endl;
#endif
  return token::DECLARE_DEFAULT_COLLATION;
}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 824 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEDECL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_NAMESPACE" << endl;
#endif
  return token::DECLARE_NAMESPACE;
}
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 832 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEDECL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::MODULE_NAMESPACE" << endl;
#endif
  return token::MODULE_NAMESPACE;
}
	YY_BREAK
case 69:
/* rule 69 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 840 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEDECL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_BASE_URI" << endl;
#endif
  return token::DECLARE_BASE_URI;
}
	YY_BREAK
/* transition to NAMESPACEKEYWORD */
/* ------------------------------ */
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 851 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEKEYWORD;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_DEFAULT_ELEMENT" << endl;
#endif
  return token::DECLARE_DEFAULT_ELEMENT;
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 859 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEKEYWORD;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_DEFAULT_FUNCTION" << endl;
#endif
  return token::DECLARE_DEFAULT_FUNCTION;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 867 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEKEYWORD;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::IMPORT_SCHEMA" << endl;
#endif
  return token::IMPORT_SCHEMA;
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 875 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEKEYWORD;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::IMPORT_MODULE" << endl;
#endif
  return token::IMPORT_MODULE;
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 883 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEKEYWORD;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_COPY_NAMESPACES" << endl;
#endif
  return token::DECLARE_COPY_NAMESPACES;
}
	YY_BREAK
/* transition to VARNAME */
/* --------------------- */
case 75:
YY_RULE_SETUP
#line 894 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOLLAR" << endl;
#endif
  return token::DOLLAR;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 902 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FOR_DOLLAR" << endl;
#endif
  return token::FOR_DOLLAR;
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 910 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LET_DOLLAR" << endl;
#endif
  return token::LET_DOLLAR;
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 918 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SOME_DOLLAR" << endl;
#endif
  return token::SOME_DOLLAR;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 926 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EVERY_DOLLAR" << endl;
#endif
  return token::EVERY_DOLLAR;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 934 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_VARIABLE_DOLLAR" << endl;
#endif
  return token::DECLARE_VARIABLE_DOLLAR;
}
	YY_BREAK
/* transition to ITEMTYPE */
/* ---------------------- */
case 81:
/* rule 81 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 945 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_ITEMTYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR_AS" << endl;
#endif
  return token::RPAR_AS;
} 
	YY_BREAK
/* transition to XML_COMMENT */
/* ------------------------- */
case 82:
YY_RULE_SETUP
#line 956 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_XML_COMMENT);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::XML_COMMENT_BEGIN" << endl;
#endif
  return token::XML_COMMENT_BEGIN;
}
	YY_BREAK
/* transition to PROCESSING_INSTRUCTION */
/* ------------------------------------ */
case 83:
YY_RULE_SETUP
#line 968 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{  
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_PROCESSING_INSTRUCTION);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PI_BEGIN" << endl;
#endif
  return token::PI_BEGIN;
}
	YY_BREAK
/* transition to CDATA_SECTION */
/* --------------------------- */
case 84:
YY_RULE_SETUP
#line 980 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_CDATA_SECTION);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CDATA_BEGIN" << endl;
#endif
  return token::CDATA_BEGIN;
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 990 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 86:
YY_RULE_SETUP
#line 998 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{   
  BEGIN MODE_OPERATOR;
  yy_push_state(MODE_START_TAG);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::START_TAG" << endl;
#endif
  return token::START_TAG;
}
	YY_BREAK
/* transition to XMLSPACE_DECL */
/* --------------------------- */
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1010 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_XMLSPACE_DECL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_BOUNDARY_SPACE" << endl;
#endif
  return token::DECLARE_BOUNDARY_SPACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 88:
YY_RULE_SETUP
#line 1021 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* transition to DECLAREORDERING */
/* ----------------------------- */
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1028 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_DECLAREORDERING;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_ORDERING" << endl;
#endif
  return token::DECLARE_ORDERING;
}
	YY_BREAK
/* transition to XQUERY_VERSION */
/* ---------------------------- */
case 90:
/* rule 90 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1039 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_XQUERY_VERSION;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::XQUERY_VERSION" << endl;
#endif
  return token::XQUERY_VERSION;
}
	YY_BREAK
/* transition to PRAGMA */
/* -------------------- */
case 91:
YY_RULE_SETUP
#line 1050 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{  
  BEGIN MODE_PRAGMA;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRAGMA_BEGIN" << endl;
#endif
  return token::PRAGMA_BEGIN;
}
	YY_BREAK
/* transition to OPTION */
/* -------------------- */
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1061 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPTION;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_OPTION" << endl;
#endif
  return token::DECLARE_OPTION;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1072 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  const char *p = yytext + 2;
  for (; *p != '\'' && *p != '"'; p++);
  BEGIN MODE_NAMESPACEDECL;
  TRY_URILIT (AT_URI_LITERAL, p, yyleng + (p - yytext));
}
	YY_BREAK
/* pop previous state */
/* ------------------ */
case 94:
YY_RULE_SETUP
#line 1082 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{   
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RBRACE" << endl;
#endif
  return token::RBRACE;
}
	YY_BREAK
/*______________________________________________________________________  
   |
   | Update rules <INITIAL,MODE_OPERATOR>
   |______________________________________________________________________*/
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1096 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_DECLAREREVALIDATION;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_REVALIDATION" << endl;
#endif
  return token::DECLARE_REVALIDATION;
}
	YY_BREAK

case 96:
/* rule 96 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1107 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INSERT_NODE" << endl;
#endif
  return token::INSERT_NODE;
}
	YY_BREAK
case 97:
/* rule 97 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1114 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INSERT_NODES" << endl;
#endif
  return token::INSERT_NODES;
}
	YY_BREAK
case 98:
/* rule 98 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1121 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DELETE_NODE" << endl;
#endif
  return token::DELETE_NODE;
}
	YY_BREAK
case 99:
/* rule 99 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1128 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DELETE_NODES" << endl;
#endif
  return token::DELETE_NODES;
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1135 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::REPLACE" << endl;
#endif
  return token::REPLACE;
}
	YY_BREAK
case 101:
/* rule 101 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1142 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::REPLACE_VALUE_OF" << endl;
#endif
  return token::REPLACE_VALUE_OF;
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1149 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
  getDriver()->set_rename(true);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RENAME" << endl;
#endif
  return token::RENAME;
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1158 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COPY_DOLLAR" << endl;
#endif
  return token::COPY_DOLLAR;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1165 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INTO" << endl;
#endif
  return token::INTO;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1172 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FIRST_INTO" << endl;
#endif
  return token::FIRST_INTO;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1179 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LAST_INTO" << endl;
#endif
  return token::LAST_INTO;
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1186 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AFTER" << endl;
#endif
  return token::AFTER;
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1193 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::BEFORE" << endl;
#endif
  return token::BEFORE;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1200 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH" << endl;
#endif
  return token::WITH;
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1207 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::MODIFY" << endl;
#endif
  return token::MODIFY;
}
	YY_BREAK

case 111:
/* rule 111 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1217 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AS" << endl;
#endif
  return token::AS;
}
	YY_BREAK
/*______________________________________________________________________  
   |
   | TRY-CATCH rules <INITIAL>
   |______________________________________________________________________*/
case 112:
/* rule 112 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1230 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TRY" << endl;
#endif
  return token::TRY;
}
	YY_BREAK

case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1238 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_CATCH);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CATCH_LPAR" << endl;
#endif
  return token::CATCH_LPAR;
}
	YY_BREAK


case 114:
YY_RULE_SETUP
#line 1249 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR" << endl;
#endif
  return token::RPAR;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1257 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng);
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1266 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STAR" << endl;
#endif
  return token::STAR;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1274 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_ncname(yytext, yyleng-2);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEM_WILDCARD" << endl;
#endif
  return token::ELEM_WILDCARD;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1283 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_ncname(yytext+2, yyleng-2);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PREFIX_WILDCARD" << endl;
#endif
  return token::PREFIX_WILDCARD;
}
	YY_BREAK

/*______________________________________________________________________  
   |
   | FT rules <INITIAL>
   |______________________________________________________________________*/
case 119:
YY_RULE_SETUP
#line 1300 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTAND" << endl;
#endif
  return token::FTAND;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1306 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTNOT" << endl;
#endif
  return token::FTNOT;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1312 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTOR" << endl;
#endif
  return token::FTOR;
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1318 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTNOT_IN" << endl;
#endif
  return token::FTNOT_IN;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1324 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ALL" << endl;
#endif
  return token::ALL;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1330 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ALL_WORDS" << endl;
#endif
  return token::ALL_WORDS;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1336 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ANY" << endl;
#endif
  return token::ANY;
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1342 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ANY_WORD" << endl;
#endif
  return token::ANY_WORD;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1348 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_END" << endl;
#endif
  return token::AT_END;
}
	YY_BREAK
case 128:
/* rule 128 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1354 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_LEAST" << endl;
#endif
  return token::AT_LEAST;
}
	YY_BREAK
case 129:
/* rule 129 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1360 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_MOST" << endl;
#endif
  return token::AT_MOST;
}
	YY_BREAK
case 130:
/* rule 130 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1366 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_START" << endl;
#endif
  return token::AT_START;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1372 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASE_INSENSITIVE" << endl;
#endif
  return token::CASE_INSENSITIVE;
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1378 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASE_SENSITIVE" << endl;
#endif
  return token::CASE_SENSITIVE;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1384 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_FTOPTION" << endl;
#endif
  return token::DECLARE_FTOPTION;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1390 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIACRITICS_INSENSITIVE" << endl;
#endif
  return token::DIACRITICS_INSENSITIVE;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1396 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIACRITICS_SENSITIVE" << endl;
#endif
  return token::DIACRITICS_SENSITIVE;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1402 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIFFERENT" << endl;
#endif
  return token::DIFFERENT;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1408 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DISTANCE" << endl;
#endif
  return token::DISTANCE;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1414 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ENTIRE_CONTENT" << endl;
#endif
  return token::ENTIRE_CONTENT;
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1420 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EXACTLY" << endl;
#endif
  return token::EXACTLY;
}
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1426 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FROM" << endl;
#endif
  return token::FROM;
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1432 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LANGUAGE" << endl;
#endif
  return token::LANGUAGE;
}
	YY_BREAK
case 142:
/* rule 142 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1438 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LEVELS" << endl;
#endif
  return token::LEVELS;
}
	YY_BREAK
case 143:
/* rule 143 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1444 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LOWERCASE" << endl;
#endif
  return token::LOWERCASE;
}
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1450 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::OCCURS" << endl;
#endif
  return token::OCCURS;
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1456 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PARAGRAPH" << endl;
#endif
  return token::PARAGRAPH;
}
	YY_BREAK
case 146:
/* rule 146 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1462 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PHRASE" << endl;
#endif
  return token::PHRASE;
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1468 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RELATIONSHIP" << endl;
#endif
  return token::RELATIONSHIP;
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1474 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SAME" << endl;
#endif
  return token::SAME;
}
	YY_BREAK
case 149:
/* rule 149 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1480 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCORE" << endl;
#endif
  return token::SCORE;
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1486 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SENTENCE" << endl;
#endif
  return token::SENTENCE;
}
	YY_BREAK
case 151:
/* rule 151 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1492 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SENTENCES" << endl;
#endif
  return token::SENTENCES;
}
	YY_BREAK
case 152:
/* rule 152 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1498 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TIMES" << endl;
#endif
  return token::TIMES;
}
	YY_BREAK
case 153:
/* rule 153 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1504 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UPPERCASE" << endl;
#endif
  return token::UPPERCASE;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1510 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WEIGHT" << endl;
#endif
  return token::WEIGHT;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1516 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WINDOW" << endl;
#endif
  return token::WINDOW;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1522 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_CONTENT" << endl;
#endif
  return token::WITHOUT_CONTENT;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1528 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_DIACRITICS" << endl;
#endif
  return token::WITHOUT_DIACRITICS;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1534 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_STEMMING" << endl;
#endif
  return token::WITHOUT_STEMMING;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1540 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_STOP_WORDS" << endl;
#endif
  return token::WITHOUT_STOP_WORDS;
}
	YY_BREAK
case 160:
/* rule 160 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1546 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_THESAURUS" << endl;
#endif
  return token::WITHOUT_THESAURUS;
}
	YY_BREAK
case 161:
/* rule 161 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1552 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_WILDCARDS" << endl;
#endif
  return token::WITHOUT_WILDCARDS;
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1558 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_DEFAULT_STOP_WORDS" << endl;
#endif
  return token::WITH_DEFAULT_STOP_WORDS;
}
	YY_BREAK
case 163:
/* rule 163 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1564 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_DIACRITICS" << endl;
#endif
  return token::WITH_DIACRITICS;
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1570 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_STEMMING" << endl;
#endif
  return token::WITH_STEMMING;
}
	YY_BREAK
case 165:
/* rule 165 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1576 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_STOP_WORDS" << endl;
#endif
  return token::WITH_STOP_WORDS;
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1582 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_THESAURUS" << endl;
#endif
  return token::WITH_THESAURUS;
}
	YY_BREAK
case 167:
/* rule 167 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1588 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_WILDCARDS" << endl;
#endif
  return token::WITH_WILDCARDS;
}
	YY_BREAK
case 168:
/* rule 168 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1594 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WORDS" << endl;
#endif
  return token::WORDS;
}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1601 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* catch all */
case 170:
YY_RULE_SETUP
#line 1606 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* END MODE INITIAL */
/*______________________________________________________________________  
   |
   |  The PROCESSING_INSTRUCTION_CTOR State
   |
   |  transition to MODE_OPERATOR
   |______________________________________________________________________*/

case 171:
YY_RULE_SETUP
#line 1625 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1634 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_ncname(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NCNAME" << endl;
#endif
  return token::NCNAME;
}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 1642 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK

/*______________________________________________________________________  
   |
   |  The DECLAREORDERING State
   |
   |  Special state to recognize declare ordering specific keywords. 
   |  transition to INITIAL
   |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 174:
/* rule 174 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1660 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ORDERED" << endl;
#endif
  return token::ORDERED;
}
	YY_BREAK
case 175:
/* rule 175 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1668 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNORDERED" << endl;
#endif
  return token::UNORDERED;
}
	YY_BREAK
/* <MODE_DECLAREORDERING> */
/*______________________________________________________________________  
   |
   |  The DECLAREREVALIDATION State
   |
   |  Special state to recognize declare revalidation specific keywords. 
   |  transition to INITIAL
   |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 176:
/* rule 176 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1691 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::REVAL_STRICT" << endl;
#endif
  return token::REVAL_STRICT;
}
	YY_BREAK
case 177:
/* rule 177 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1699 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::REVAL_LAX" << endl;
#endif
  return token::REVAL_LAX;
}
	YY_BREAK
case 178:
/* rule 178 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1707 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::REVAL_SKIP" << endl;
#endif
  return token::REVAL_SKIP;
}
	YY_BREAK
/* <MODE_DECLAREORDERING> */
/*______________________________________________________________________  
   |
   |  OPERATOR State 
   | 
   |  This state is for patterns that are defined for operators.
   |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 179:
YY_RULE_SETUP
#line 1729 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1736 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
  /* yy_push_state(INITIAL); */
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LPAR" << endl;
#endif
  return token::LPAR;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1744 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SEMI" << endl;
#endif
  return token::SEMI;
}
	YY_BREAK
case 182:
/* rule 182 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1751 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::THEN" << endl;
#endif
  return token::THEN;
}
	YY_BREAK
case 183:
/* rule 183 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1758 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELSE" << endl;
#endif
  return token::ELSE;
}
	YY_BREAK
case 184:
/* rule 184 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1765 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EXTERNAL" << endl;
#endif
  return token::EXTERNAL;
}
	YY_BREAK
case 185:
/* rule 185 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1772 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AND" << endl;
#endif
  return token::AND;
}
	YY_BREAK
case 186:
/* rule 186 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1779 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  if (!getDriver()->ftcontains()) {
    BEGIN INITIAL;
  }
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT" << endl;
#endif
  return token::AT;
}
	YY_BREAK
/* full-text rule */
case 187:
/* rule 187 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1791 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCORE" << endl;
#endif
  return token::SCORE;
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1800 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::GETS" << endl;
#endif
  return token::GETS;
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1807 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMA" << endl;
#endif
  return token::COMMA;
}
	YY_BREAK
case 190:
/* rule 190 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1814 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIV" << endl;
#endif
  return token::DIV;
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1821 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EQUALS" << endl;
#endif
  return token::EQUALS;
}
	YY_BREAK
case 192:
/* rule 192 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1828 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EXCEPT" << endl;
#endif
  return token::EXCEPT;
}
	YY_BREAK
case 193:
/* rule 193 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1835 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_EQ" << endl;
#endif
  return token::VAL_EQ;
}
	YY_BREAK
case 194:
/* rule 194 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1842 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_GE" << endl;
#endif
  return token::VAL_GE;
}
	YY_BREAK
case 195:
/* rule 195 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1849 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_GT" << endl;
#endif
  return token::VAL_GT;
}
	YY_BREAK
case 196:
/* rule 196 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1856 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_LE" << endl;
#endif
  return token::VAL_LE;
}
	YY_BREAK
case 197:
/* rule 197 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1863 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_LT" << endl;
#endif
  return token::VAL_LT;
}
	YY_BREAK
case 198:
/* rule 198 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1870 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_NE" << endl;
#endif
  return token::VAL_NE;
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1877 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::GE" << endl;
#endif
  return token::GE;
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1884 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FOLLOWS" << endl;
#endif
  return token::FOLLOWS;
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1891 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::GT" << endl;
#endif
  return token::GT;
}
	YY_BREAK
case 202:
/* rule 202 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1898 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::IDIV" << endl;
#endif
  return token::IDIV;
}
	YY_BREAK
case 203:
/* rule 203 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1905 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INTERSECT" << endl;
#endif
  return token::INTERSECT;
}
	YY_BREAK
case 204:
/* rule 204 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1915 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::_IN_" << endl;
#endif
  return token::_IN_;
}
	YY_BREAK
case 205:
/* rule 205 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1922 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::IS" << endl;
#endif
  return token::IS;
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1929 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACK" << endl;
#endif
  return token::LBRACK;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1936 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LE" << endl;
#endif
  return token::LE;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1943 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRECEDES" << endl;
#endif
  return token::PRECEDES;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1950 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LT" << endl;
#endif
  return token::LT;
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1957 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::MINUS" << endl;
#endif
  return token::MINUS;
}
	YY_BREAK
case 211:
/* rule 211 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1964 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::MOD" << endl;
#endif
  return token::MOD;
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1971 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STAR" << endl;
#endif
  return token::STAR;
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1978 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NE" << endl;
#endif
  return token::NE;
}
	YY_BREAK
case 214:
/* rule 214 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1985 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ORDER_BY" << endl;
#endif
  return token::ORDER_BY;
}
	YY_BREAK
case 215:
/* rule 215 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1992 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STABLE_ORDER_BY" << endl;
#endif
  return token::STABLE_ORDER_BY;
}
	YY_BREAK
case 216:
/* rule 216 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1999 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::OR" << endl;
#endif
  return token::OR;
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 2006 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PLUS" << endl;
#endif
  return token::PLUS;
}
	YY_BREAK
case 218:
/* rule 218 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2013 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RETURN" << endl;
#endif
  return token::RETURN;
}
	YY_BREAK
case 219:
/* rule 219 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2020 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SATISFIES" << endl;
#endif
  return token::SATISFIES;
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2027 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SLASH" << endl;
#endif
  return token::SLASH;
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 2034 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LEADING_LONE_SLASH" << endl;
#endif
  return token::LEADING_LONE_SLASH;
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 2041 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SLASH_SLASH" << endl;
#endif
  return token::SLASH_SLASH;
}
	YY_BREAK
case 223:
/* rule 223 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2048 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TO" << endl;
#endif
  return token::TO;
}
	YY_BREAK
case 224:
/* rule 224 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2055 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNION" << endl;
#endif
  return token::UNION;
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2062 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VBAR" << endl;
#endif
  return token::VBAR;
}
	YY_BREAK
case 226:
/* rule 226 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2069 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WHERE" << endl;
#endif
  return token::WHERE;
}
	YY_BREAK
case 227:
/* rule 227 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2076 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRESERVE" << endl;
#endif
  return token::PRESERVE;
}
	YY_BREAK
case 228:
/* rule 228 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2083 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STRIP" << endl;
#endif
  return token::STRIP;
}
	YY_BREAK
/* transition to SINGLETYPE */
/* ------------------------ */
case 229:
/* rule 229 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2096 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_SINGLETYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASTABLE_AS" << endl;
#endif
  return token::CASTABLE_AS;
}
	YY_BREAK
case 230:
/* rule 230 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2103 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_SINGLETYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CAST_AS" << endl;
#endif
  return token::CAST_AS;
}
	YY_BREAK
/* transition to ITEMTYPE */
/* ---------------------- */
case 231:
/* rule 231 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2114 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_ITEMTYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INSTANCE_OF" << endl;
#endif
  return token::INSTANCE_OF;
}
	YY_BREAK
case 232:
/* rule 232 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2121 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_ITEMTYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TREAT_AS" << endl;
#endif
  return token::TREAT_AS;
}
	YY_BREAK
case 233:
/* rule 233 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2128 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_ITEMTYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASE" << endl;
#endif
  return token::CASE;
}
	YY_BREAK
case 234:
/* rule 234 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2135 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  if (getDriver()->rename()) {
    getDriver()->set_rename(false);
    BEGIN INITIAL;
  }
  else if (getDriver()->ftcontains()) {
    getDriver()->set_ftcontains(false);
  }
  else {
    BEGIN MODE_ITEMTYPE;
  }
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AS" << endl;
#endif
  return token::AS;
}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 2151 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_ITEMTYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR_AS" << endl;
#endif
  return token::RPAR_AS;
}
	YY_BREAK
/* transition to VARNAME */
/* --------------------- */
case 236:
YY_RULE_SETUP
#line 2162 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOLLAR" << endl;
#endif
  return token::DOLLAR;
}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 2169 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FOR_DOLLAR" << endl;
#endif
  return token::FOR_DOLLAR;
}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 2176 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LET_DOLLAR" << endl;
#endif
  return token::LET_DOLLAR;
}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 2183 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LET_SCORE_DOLLAR" << endl;
#endif
  return token::LET_SCORE_DOLLAR;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 240:
YY_RULE_SETUP
#line 2194 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* transition to URITOOPERATOR */
/* --------------------------- */
case 241:
/* rule 241 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2201 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_URITOOPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COLLATION" << endl;
#endif
  return token::COLLATION;
}
	YY_BREAK
/* restore previous state on closing brace */
/* --------------------------------------- */
case 242:
YY_RULE_SETUP
#line 2212 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RBRACE" << endl;
#endif
  return token::RBRACE;
}
	YY_BREAK
/* maintain OPERATOR state */
/* ----------------------- */
case 243:
YY_RULE_SETUP
#line 2223 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR" << endl;
#endif
  return token::RPAR;
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 2229 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::HOOK" << endl;
#endif
  return token::HOOK;
}
	YY_BREAK
case 245:
/* rule 245 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2235 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EMPTY_GREATEST" << endl;
#endif
  return token::EMPTY_GREATEST;
}
	YY_BREAK
case 246:
/* rule 246 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2241 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EMPTY_LEAST" << endl;
#endif
  return token::EMPTY_LEAST;
}
	YY_BREAK
case 247:
/* rule 247 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2247 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ASCENDING" << endl;
#endif
  return token::ASCENDING;
}
	YY_BREAK
case 248:
/* rule 248 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2253 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DESCENDING" << endl;
#endif
  return token::DESCENDING;
}
	YY_BREAK
case 249:
/* rule 249 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2259 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DEFAULT" << endl;
#endif
  return token::DEFAULT;
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 2265 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RBRACK" << endl;
#endif
  return token::RBRACK;
}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 2271 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "scanner::TRY_STRINGLIT" << std::endl;
#endif
  TRY_STRINGLIT (STRING_LITERAL, yytext, yyleng);
}
	YY_BREAK
/*______________________________________________________________________  
   |
   | FT rules <OPERATOR>
   |______________________________________________________________________*/
/* transition to INITIAL state */
/* --------------------------- */
case 252:
/* rule 252 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2287 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
  getDriver()->set_ftcontains(true);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTCONTAINS" << endl;
#endif
  return token::FTCONTAINS;
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 2295 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTAND" << endl;
#endif
  return token::FTAND;
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2302 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTNOT" << endl;
#endif
  return token::FTNOT;
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 2309 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTOR" << endl;
#endif
  return token::FTOR;
}
	YY_BREAK
case 256:
/* rule 256 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2316 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FTNOT_IN" << endl;
#endif
  return token::FTNOT_IN;
}
	YY_BREAK
case 257:
/* rule 257 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2323 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_LEAST" << endl;
#endif
  return token::AT_LEAST;
}
	YY_BREAK
case 258:
/* rule 258 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2330 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_MOST" << endl;
#endif
  return token::AT_MOST;
}
	YY_BREAK
case 259:
/* rule 259 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2337 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DISTANCE" << endl;
#endif
  return token::DISTANCE;
}
	YY_BREAK
case 260:
/* rule 260 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2344 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EXACTLY" << endl;
#endif
  return token::EXACTLY;
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2351 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FROM" << endl;
#endif
  return token::FROM;
}
	YY_BREAK
case 262:
/* rule 262 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2358 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::OCCURS" << endl;
#endif
  return token::OCCURS;
}
	YY_BREAK
case 263:
/* rule 263 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2365 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WINDOW" << endl;
#endif
  return token::WINDOW;
}
	YY_BREAK
/* maintain OPERATOR state */
/* ----------------------- */
case 264:
/* rule 264 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2376 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ALL" << endl;
#endif
  return token::ALL;
}
	YY_BREAK
case 265:
/* rule 265 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2382 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ALL_WORDS" << endl;
#endif
  return token::ALL_WORDS;
}
	YY_BREAK
case 266:
/* rule 266 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2388 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ANY" << endl;
#endif
  return token::ANY;
}
	YY_BREAK
case 267:
/* rule 267 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2394 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ANY_WORD" << endl;
#endif
  return token::ANY_WORD;
}
	YY_BREAK
case 268:
/* rule 268 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2400 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_END" << endl;
#endif
  return token::AT_END;
}
	YY_BREAK
case 269:
/* rule 269 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2406 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT_START" << endl;
#endif
  return token::AT_START;
}
	YY_BREAK
case 270:
/* rule 270 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2412 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASE_INSENSITIVE" << endl;
#endif
  return token::CASE_INSENSITIVE;
}
	YY_BREAK
case 271:
/* rule 271 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2418 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASE_SENSITIVE" << endl;
#endif
  return token::CASE_SENSITIVE;
}
	YY_BREAK
case 272:
/* rule 272 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2424 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DECLARE_FTOPTION" << endl;
#endif
  return token::DECLARE_FTOPTION;
}
	YY_BREAK
case 273:
/* rule 273 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2430 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIACRITICS_INSENSITIVE" << endl;
#endif
  return token::DIACRITICS_INSENSITIVE;
}
	YY_BREAK
case 274:
/* rule 274 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2436 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIACRITICS_SENSITIVE" << endl;
#endif
  return token::DIACRITICS_SENSITIVE;
}
	YY_BREAK
case 275:
/* rule 275 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2442 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIFFERENT" << endl;
#endif
  return token::DIFFERENT;
}
	YY_BREAK
case 276:
/* rule 276 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2448 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ENTIRE_CONTENT" << endl;
#endif
  return token::ENTIRE_CONTENT;
}
	YY_BREAK
case 277:
/* rule 277 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2454 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LANGUAGE" << endl;
#endif
  return token::LANGUAGE;
}
	YY_BREAK
case 278:
/* rule 278 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2460 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LEVELS" << endl;
#endif
  return token::LEVELS;
}
	YY_BREAK
case 279:
/* rule 279 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2466 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LOWERCASE" << endl;
#endif
  return token::LOWERCASE;
}
	YY_BREAK
case 280:
/* rule 280 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2472 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PARAGRAPH" << endl;
#endif
  return token::PARAGRAPH;
}
	YY_BREAK
case 281:
/* rule 281 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2478 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PHRASE" << endl;
#endif
  return token::PHRASE;
}
	YY_BREAK
case 282:
/* rule 282 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2484 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RELATIONSHIP" << endl;
#endif
  return token::RELATIONSHIP;
}
	YY_BREAK
case 283:
/* rule 283 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2490 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SAME" << endl;
#endif
  return token::SAME;
}
	YY_BREAK
case 284:
/* rule 284 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2496 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCORE" << endl;
#endif
  return token::SCORE;
}
	YY_BREAK
case 285:
/* rule 285 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2502 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SENTENCE" << endl;
#endif
  return token::SENTENCE;
}
	YY_BREAK
case 286:
/* rule 286 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2508 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SENTENCES" << endl;
#endif
  return token::SENTENCES;
}
	YY_BREAK
case 287:
/* rule 287 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2514 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TIMES" << endl;
#endif
  return token::TIMES;
}
	YY_BREAK
case 288:
/* rule 288 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2520 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UPPERCASE" << endl;
#endif
  return token::UPPERCASE;
}
	YY_BREAK
case 289:
/* rule 289 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2526 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WEIGHT" << endl;
#endif
  return token::WEIGHT;
}
	YY_BREAK
case 290:
/* rule 290 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2532 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_CONTENT" << endl;
#endif
  return token::WITHOUT_CONTENT;
}
	YY_BREAK
case 291:
/* rule 291 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2538 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_DIACRITICS" << endl;
#endif
  return token::WITHOUT_DIACRITICS;
}
	YY_BREAK
case 292:
/* rule 292 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2544 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_STEMMING" << endl;
#endif
  return token::WITHOUT_STEMMING;
}
	YY_BREAK
case 293:
/* rule 293 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2550 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_STOP_WORDS" << endl;
#endif
  return token::WITHOUT_STOP_WORDS;
}
	YY_BREAK
case 294:
/* rule 294 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2556 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_THESAURUS" << endl;
#endif
  return token::WITHOUT_THESAURUS;
}
	YY_BREAK
case 295:
/* rule 295 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2562 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITHOUT_WILDCARDS" << endl;
#endif
  return token::WITHOUT_WILDCARDS;
}
	YY_BREAK
case 296:
/* rule 296 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2568 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_DEFAULT_STOP_WORDS" << endl;
#endif
  return token::WITH_DEFAULT_STOP_WORDS;
}
	YY_BREAK
case 297:
/* rule 297 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2574 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_DIACRITICS" << endl;
#endif
  return token::WITH_DIACRITICS;
}
	YY_BREAK
case 298:
/* rule 298 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2580 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_STEMMING" << endl;
#endif
  return token::WITH_STEMMING;
}
	YY_BREAK
case 299:
/* rule 299 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2586 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_STOP_WORDS" << endl;
#endif
  return token::WITH_STOP_WORDS;
}
	YY_BREAK
case 300:
/* rule 300 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2592 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_THESAURUS" << endl;
#endif
  return token::WITH_THESAURUS;
}
	YY_BREAK
case 301:
/* rule 301 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2598 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WITH_WILDCARDS" << endl;
#endif
  return token::WITH_WILDCARDS;
}
	YY_BREAK
case 302:
/* rule 302 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2604 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WORDS" << endl;
#endif
  return token::WORDS;
}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 2610 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_PRAGMA;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRAGMA_BEGIN" << endl;
#endif
  return token::PRAGMA_BEGIN;
}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 2618 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 2625 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_OPERATOR> */
/*______________________________________________________________________  
   |
   | XQUERY_VERSION State
   |
   | This state is for recognition of XQuery version specific keywords. 
   |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 306:
YY_RULE_SETUP
#line 2644 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SEMI" << endl;
#endif
  return token::SEMI;
}
	YY_BREAK
/* maintain XQUERYVERSION */
/* ---------------------- */
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 2654 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "scanner::TRY_STRINGLIT" << std::endl;
#endif
  TRY_STRINGLIT (STRING_LITERAL, yytext, yyleng);
}
	YY_BREAK
case 308:
/* rule 308 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2661 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ENCODING" << endl;
#endif
  return token::ENCODING;
}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 2668 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_XQUERY_VERSION> */
/*______________________________________________________________________  
   |
   | NAMESPACEDECL State
   |
   | This state occurs inside of a namespace declaration, and is needed
   | to recognize a NCName that is to be used as the prefix, as opposed
   | to allowing a QName to occur. (Otherwise, the difference between
   | NCName and QName becomes ambiguous.)
   |______________________________________________________________________*/

case 310:
YY_RULE_SETUP
#line 2689 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 2693 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SEMI" << endl;
#endif
  return token::SEMI;
}
	YY_BREAK
/* maintain NAMESPACEDECL */
/* ---------------------- */
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 2703 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  TRY_URILIT (URI_LITERAL, yytext, yyleng);
}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 2707 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMA" << endl;
#endif
  return token::COMMA;
}
	YY_BREAK
case 314:
/* rule 314 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2714 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT" << endl;
#endif
  return token::AT;
}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 2721 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EQUALS" << endl;
#endif
  return token::EQUALS;
}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 2728 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_ncname(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NCNAME" << endl;
#endif
  return token::NCNAME;
}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 2736 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 2743 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_NAMESPACEDECL> */
/*______________________________________________________________________  
   |
   | URITOOPERATOR State
   |
   | This state is to recognize a URILiteral that transitions to the
   | OPERATOR state.
   |______________________________________________________________________*/
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 2760 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  TRY_URILIT (URI_LITERAL, yytext, yyleng);
}
	YY_BREAK
/*______________________________________________________________________  
   |
   | NAMESPACEKEYWORD State
   |
   | This state occurs at places where the keyword "namespace" is
   | expected, which would otherwise be ambiguous compared to a QName.
   | QNames can not occur in this state.
   |______________________________________________________________________*/

/* transition to NAMESPACEDECL */
/* --------------------------- */
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 2781 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEDECL;
  TRY_URILIT (URI_LITERAL, yytext, yyleng);
}
	YY_BREAK
case 321:
/* rule 321 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2786 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_NAMESPACEDECL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NAMESPACE" << endl;
#endif
  return token::NAMESPACE;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 322:
/* rule 322 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2796 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INHERIT" << endl;
#endif
  return token::INHERIT;
}
	YY_BREAK
case 323:
/* rule 323 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2804 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NO_INHERIT" << endl;
#endif
  return token::NO_INHERIT;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 324:
YY_RULE_SETUP
#line 2814 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* maintain NAMESPACEKEYWORD */
/* ------------------------- */
case 325:
/* rule 325 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2821 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DEFAULT_ELEMENT" << endl;
#endif
  return token::DEFAULT_ELEMENT;
}
	YY_BREAK
case 326:
/* rule 326 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2828 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRESERVE" << endl;
#endif
  return token::PRESERVE;
}
	YY_BREAK
case 327:
/* rule 327 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2835 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NO_PRESERVE" << endl;
#endif
  return token::NO_PRESERVE;
}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 2842 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMA" << endl;
#endif
  return token::COMMA;
}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 2849 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 2856 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_NAMESPACEKEYWORD> */
/*______________________________________________________________________  
    |
    | XMLSPACE_DECL State
    |
    | This state occurs at places where the keywords "preserve" and
    | "strip" is expected to support "declare xmlspace". QNames cannot
    | occur in this state.
    |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 331:
/* rule 331 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2878 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRESERVE" << endl;
#endif
  return token::PRESERVE;
}
	YY_BREAK
case 332:
/* rule 332 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2886 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STRIP" << endl;
#endif
  return token::STRIP;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 333:
YY_RULE_SETUP
#line 2896 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 2900 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 2907 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_XMLSPACE_DECL> */
/*______________________________________________________________________  
   |
   | SINGLETYPE State 
   |
   | This state distinguishes tokens that can occur only inside the
   | SingleType production.
   |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 336:
YY_RULE_SETUP
#line 2928 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 337:
YY_RULE_SETUP
#line 2939 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 2943 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 2950 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_SINGLETYPE> */
/*______________________________________________________________________  
   |
   | ITEMTYPE State
   |
   | This state distinguishes tokens that can occur only inside the
   | ItemType production.
   |______________________________________________________________________*/

/* transition to VARNAME */
/* --------------------- */
case 340:
YY_RULE_SETUP
#line 2971 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_VARNAME;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOLLAR" << endl;
#endif
  return token::DOLLAR;
}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 2979 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VOID_TEST" << endl;
#endif
  return token::VOID_TEST;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 342:
YY_RULE_SETUP
#line 2989 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 2995 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEMENT_LPAR" << endl;
#endif
  return token::ELEMENT_LPAR;
}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 3004 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ATTRIBUTE_LPAR" << endl;
#endif
  return token::ATTRIBUTE_LPAR;
}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 3013 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCHEMA_ELEMENT_LPAR" << endl;
#endif
  return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 3022 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCHEMA_ATTRIBUTE_LPAR" << endl;
#endif
  return token::SCHEMA_ATTRIBUTE_LPAR;
}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 3031 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMENT_LPAR" << endl;
#endif
  return token::COMMENT_LPAR;
}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 3040 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TEXT_LPAR" << endl;
#endif
  return token::TEXT_LPAR;
}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 3049 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NODE_LPAR" << endl;
#endif
  return token::NODE_LPAR;
}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 3058 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOCUMENT_NODE_LPAR" << endl;
#endif
  return token::DOCUMENT_NODE_LPAR;
}
	YY_BREAK
/* transition to KINDTESTFORPI */
/* --------------------------- */
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 3069 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OCCURRENCE_INDICATOR; 
  yy_push_state(MODE_KINDTESTFORPI);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PI_LPAR" << endl;
#endif
  return token::PI_LPAR;
}
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 3078 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{ 
  BEGIN MODE_OCCURRENCE_INDICATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ITEM_TEST" << endl;
#endif
  return token::ITEM_TEST;
}
	YY_BREAK
/* transition to PRAGMA */
/* -------------------- */
case 353:
YY_RULE_SETUP
#line 3088 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_PRAGMA;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRAGMA_BEGIN" << endl;
#endif
  return token::PRAGMA_BEGIN;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 354:
YY_RULE_SETUP
#line 3098 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SEMI" << endl;
#endif
  return token::SEMI;
}
	YY_BREAK
case 355:
/* rule 355 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3106 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::THEN" << endl;
#endif
  return token::THEN;
}
	YY_BREAK
case 356:
/* rule 356 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3114 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELSE" << endl;
#endif
  return token::ELSE;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 3124 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  const char *p = yytext + 2;
  for (; *p != '\'' && *p != '"'; p++);
  BEGIN MODE_NAMESPACEDECL;
  TRY_URILIT (AT_URI_LITERAL, p, yyleng + (p - yytext));
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 358:
/* rule 358 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3133 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EXTERNAL" << endl;
#endif
  return token::EXTERNAL;
}
	YY_BREAK
case 359:
/* rule 359 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3141 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AND" << endl;
#endif
  return token::AND;
}
	YY_BREAK
case 360:
/* rule 360 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3149 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AT" << endl;
#endif
  return token::AT;
}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 3157 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::GETS" << endl;
#endif
  return token::GETS;
}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 3165 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMA" << endl;
#endif
  return token::COMMA;
}
	YY_BREAK
case 363:
/* rule 363 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3173 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DIV" << endl;
#endif
  return token::DIV;
}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 3181 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EQUALS" << endl;
#endif
  return token::EQUALS;
}
	YY_BREAK
case 365:
/* rule 365 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3189 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EXCEPT" << endl;
#endif
  return token::EXCEPT;
}
	YY_BREAK
case 366:
/* rule 366 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3197 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_EQ" << endl;
#endif
  return token::VAL_EQ;
}
	YY_BREAK
case 367:
/* rule 367 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3205 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_GE" << endl;
#endif
  return token::VAL_GE;
}
	YY_BREAK
case 368:
/* rule 368 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3213 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_GT" << endl;
#endif
  return token::VAL_GT;
}
	YY_BREAK
case 369:
/* rule 369 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3221 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_LE" << endl;
#endif
  return token::VAL_LE;
}
	YY_BREAK
case 370:
/* rule 370 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3229 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_LT" << endl;
#endif
  return token::VAL_LT;
}
	YY_BREAK
case 371:
/* rule 371 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3237 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VAL_NE" << endl;
#endif
  return token::VAL_NE;
}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 3245 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::GE" << endl;
#endif
  return token::GE;
}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 3253 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::FOLLOWS" << endl;
#endif
  return token::FOLLOWS;
}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 3261 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::GT" << endl;
#endif
  return token::GT;
}
	YY_BREAK
case 375:
/* rule 375 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3269 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::IDIV" << endl;
#endif
  return token::IDIV;
}
	YY_BREAK
case 376:
/* rule 376 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3277 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INTERSECT" << endl;
#endif
  return token::INTERSECT;
}
	YY_BREAK
case 377:
/* rule 377 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3285 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::_IN_" << endl;
#endif
  return token::_IN_;
}
	YY_BREAK
case 378:
/* rule 378 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3293 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::IS" << endl;
#endif
  return token::IS;
}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 3301 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACK" << endl;
#endif
  return token::LBRACK;
}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 3309 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LPAR" << endl;
#endif
  return token::LPAR;
}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 3317 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LE" << endl;
#endif
  return token::LE;
}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 3325 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRECEDES" << endl;
#endif
  return token::PRECEDES;
}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 3333 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LT" << endl;
#endif
  return token::LT;
}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 3341 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::MINUS" << endl;
#endif
  return token::MINUS;
}
	YY_BREAK
case 385:
/* rule 385 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3349 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::MOD" << endl;
#endif
  return token::MOD;
}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 3357 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NE" << endl;
#endif
  return token::NE;
}
	YY_BREAK
case 387:
/* rule 387 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3365 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ORDER_BY" << endl;
#endif
  return token::ORDER_BY;
}
	YY_BREAK
case 388:
/* rule 388 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3373 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STABLE_ORDER_BY" << endl;
#endif
  return token::STABLE_ORDER_BY;
}
	YY_BREAK
case 389:
/* rule 389 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3381 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::OR" << endl;
#endif
  return token::OR;
}
	YY_BREAK
case 390:
/* rule 390 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3389 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RETURN" << endl;
#endif
  return token::RETURN;
}
	YY_BREAK
case 391:
/* rule 391 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3397 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SATISFIES" << endl;
#endif
  return token::SATISFIES;
}
	YY_BREAK
case 392:
/* rule 392 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3405 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TO" << endl;
#endif
  return token::TO;
}
	YY_BREAK
case 393:
/* rule 393 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3413 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNION" << endl;
#endif
  return token::UNION;
}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 3421 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VBAR" << endl;
#endif
  return token::VBAR;
}
	YY_BREAK
case 395:
/* rule 395 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3429 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::WHERE" << endl;
#endif
  return token::WHERE;
}
	YY_BREAK
/* transition to SINGLETYPE */
/* ------------------------ */
case 396:
/* rule 396 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3439 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_SINGLETYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASTABLE_AS" << endl;
#endif
  return token::CASTABLE_AS;
}
	YY_BREAK
case 397:
/* rule 397 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3447 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_SINGLETYPE;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CAST_AS" << endl;
#endif
  return token::CAST_AS;
}
	YY_BREAK
/* maintain ITEMTYPE */
/* ----------------- */
case 398:
/* rule 398 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3457 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::INSTANCE_OF" << endl;
#endif
  return token::INSTANCE_OF;
}
	YY_BREAK
case 399:
/* rule 399 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3464 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TREAT_AS" << endl;
#endif
  return token::TREAT_AS;
}
	YY_BREAK
case 400:
/* rule 400 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3471 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CASE" << endl;
#endif
  return token::CASE;
}
	YY_BREAK
case 401:
/* rule 401 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3478 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::AS" << endl;
#endif
  return token::AS;
}
	YY_BREAK
case 402:
/* rule 402 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 3485 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR_AS" << endl;
#endif
  return token::RPAR_AS;
}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 3492 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng);
  BEGIN MODE_OCCURRENCE_INDICATOR; 
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 3501 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 405:
/* rule 405 can match eol */
YY_RULE_SETUP
#line 3508 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_ITEMTYPE> */
/*______________________________________________________________________  
   |
   | KINDTEST State
   |
   | This state is for the psuedo-parameters for the KindTest productions
   |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 406:
YY_RULE_SETUP
#line 3528 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
/* transition to CLOSE_KINDTEST */
/* --------------------------- */
case 407:
YY_RULE_SETUP
#line 3539 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_CLOSE_KINDTEST;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::STAR" << endl;
#endif
  return token::STAR;
}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 3547 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng);
  BEGIN MODE_CLOSE_KINDTEST;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 409:
YY_RULE_SETUP
#line 3558 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* pop previous state on close paren */
/* --------------------------------- */
case 410:
YY_RULE_SETUP
#line 3564 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR" << endl;
#endif
  return token::RPAR;
}
	YY_BREAK
/* maintain KINDTEST */
/* ----------------- */
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 3574 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_KINDTEST;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEMENT_LPAR" << endl;
#endif
  return token::ELEMENT_LPAR;
}
	YY_BREAK
case 412:
/* rule 412 can match eol */
YY_RULE_SETUP
#line 3583 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_KINDTEST;
  yy_push_state(MODE_KINDTEST);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::SCHEMA_ELEMENT_LPAR" << endl;
#endif
  return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
/* catch-all */
/* --------- */
case 413:
YY_RULE_SETUP
#line 3594 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 3601 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_KINDTEST> */
/*______________________________________________________________________  
   |
   | KINDTESTFORPI
   |
   | This state is similar to KINDTEST, but recognizes NCNames instead of
   | QNames.
   |______________________________________________________________________*/

/* pop previous state on close paren */
/* --------------------------------- */
case 415:
YY_RULE_SETUP
#line 3621 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR" << endl;
#endif
  return token::RPAR;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 416:
YY_RULE_SETUP
#line 3632 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* maintain KINDTESTFORPI */
/* ---------------------- */
case 417:
YY_RULE_SETUP
#line 3638 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_ncname(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::NCNAME" << endl;
#endif
  return token::NCNAME;
}
	YY_BREAK
case 418:
/* rule 418 can match eol */
YY_RULE_SETUP
#line 3646 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "scanner::TRY_STRINGLIT" << endl;
#endif
  TRY_STRINGLIT (STRING_LITERAL, yytext, yyleng);
}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 3653 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 420:
/* rule 420 can match eol */
YY_RULE_SETUP
#line 3660 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_KINDTESTFORPI> */
/*______________________________________________________________________  
   |
   | CLOSE_KINDTEST State
   |
   | This state is expecting to close a KINDTEST sequence.
   |______________________________________________________________________*/ 

/* pop previous state */
/* ------------------ */
case 421:
YY_RULE_SETUP
#line 3680 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::RPAR" << endl;
#endif
  return token::RPAR;
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 422:
YY_RULE_SETUP
#line 3690 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_KINDTEST;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::COMMA" << endl;
#endif
  return token::COMMA;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 423:
YY_RULE_SETUP
#line 3700 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 424:
YY_RULE_SETUP
#line 3711 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* maintain CLOSE_KINDTEST */
/* ---------------------- */
case 425:
YY_RULE_SETUP
#line 3717 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::HOOK" << endl;
#endif
  return token::HOOK;
}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 3724 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 427:
/* rule 427 can match eol */
YY_RULE_SETUP
#line 3731 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_CLOSE_KINDTEST> */
/*______________________________________________________________________  
   |
   | OCCURRENCE_INDICATOR State
   |
   | This special state is needed to distinguish occurrence indicators
   | that appear in the SequenceType production. For instance, compare
   | "foo instance of baz*" to "baz*foo". In the first case, the "*" is
   | interpreted as an occurrence indicator, and in the second case, it
   | must be interpreted as a multiplication operator. But, when in the
   | OCCURRENCEINDICATOR state, if anything else other than "?", "*",
   | "+", those symbols must be interpreted in the OPERATOR state. For
   | instance, this would occur with the expression "foo instance of baz
   | and $x", with the operator "and".
   |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 428:
YY_RULE_SETUP
#line 3759 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::OCCURS_HOOK" << endl;
#endif
  return token::OCCURS_HOOK;
}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 3767 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::OCCURS_STAR" << endl;
#endif
  return token::OCCURS_STAR;
}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 3775 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::OCCURS_PLUS" << endl;
#endif
  return token::OCCURS_PLUS;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 431:
YY_RULE_SETUP
#line 3785 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
/* anything else: push back, goto OPERATOR */
/* --------------------------------------- */
case 432:
YY_RULE_SETUP
#line 3791 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yyless(0);
  BEGIN MODE_OPERATOR;
}
	YY_BREAK
case 433:
/* rule 433 can match eol */
YY_RULE_SETUP
#line 3796 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* MODE_OCCURRENCE_INDICATOR> */
/*______________________________________________________________________  
   |
   | OPTION State
   |
   | This state is entered in the prolog for an option declaration, and
   | recognizes a QName that transits to a INITIAL state rather than a
   | OPERATOR state.
   |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 434:
YY_RULE_SETUP
#line 3818 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng);
  BEGIN INITIAL;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 3827 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 436:
/* rule 436 can match eol */
YY_RULE_SETUP
#line 3834 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_OPTION> */
/*______________________________________________________________________  
   |
   | PRAGMA State
   |
   | This state is entered in a a pragma expression, and recognizes
   | a QName that transits to a PRAGMACONTENTS state rather than an
   | OPERATOR state.
   |______________________________________________________________________*/

/* transition to PRAGMACONTENTS */
/* ---------------------------- */
case 437:
/* rule 437 can match eol */
YY_RULE_SETUP
#line 3856 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng,true,true);
  BEGIN MODE_PRAGMACONTENTS;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 3865 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yylval->sval = getDriver()->symtab.put(yytext, yyleng-2);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME_AND_END_PRAGMA" << endl;
#endif
  return token::QNAME_AND_END_PRAGMA;
}
	YY_BREAK
case 439:
/* rule 439 can match eol */
YY_RULE_SETUP
#line 3874 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 3878 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_PRAGMA> */
/*______________________________________________________________________  
   |
   | PRAGMACONTENTS State
   |
   | This state recognizes characters in pragma content and transitions
   | out of this state when a '#)' pattern is recognized.
   |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 441:
/* rule 441 can match eol */
YY_RULE_SETUP
#line 3902 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yylval->sval = getDriver()->symtab.put(yytext, yyleng-2);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PRAGMA_LITERAL_AND_END" << endl;
#endif
  return token::PRAGMA_LITERAL_AND_END;
}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 3911 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_PRAGMACONTENTS> */
/*______________________________________________________________________  
   |
   | VARNAME State
   |
   | This state differentiates variable names from qualified names. This
   | allows only the pattern of a QName to be recognized when otherwise
   | ambiguities could occur.
   |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 443:
YY_RULE_SETUP
#line 3936 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_varname(yytext, yyleng);
  BEGIN MODE_OPERATOR;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::VARNAME" << endl;
#endif
  return token::VARNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 444:
YY_RULE_SETUP
#line 3947 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 3951 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 446:
/* rule 446 can match eol */
YY_RULE_SETUP
#line 3958 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_VARNAME> */
/*______________________________________________________________________  
   |
   | START_TAG State
   |
   | This state allows attributes in the native XML syntax, and marks the
   | beginning of an element construction. Element constructors also push
   | the current state, popping it at the conclusion of an end tag. In
   | the START_TAG state, the string ">" is recognized as a token which
   | is associated with the transition to the original state.
   |______________________________________________________________________*/

/* transition to ELEMENT_CONTENT */
/* ----------------------------- */
case 447:
YY_RULE_SETUP
#line 3982 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_ELEMENT_CONTENT;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TAG_END" << endl;
#endif
  return token::TAG_END;
}
	YY_BREAK
/* transition to QUOT_ATTRIBUTE_CONTENT */
/* ------------------------------------ */
case 448:
YY_RULE_SETUP
#line 3992 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_QUOTE_ATTRIBUTE_CONTENT;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QUOTE" << endl;
#endif
  return token::QUOTE;
}
	YY_BREAK
/* transition to APOS_ATTRIBUTE_CONTENT */
/* ------------------------------------ */
case 449:
YY_RULE_SETUP
#line 4002 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_APOS_ATTRIBUTE_CONTENT;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::APOS" << endl;
#endif
  return token::APOS;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 450:
YY_RULE_SETUP
#line 4012 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_START_TAG;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EQUALS" << endl;
#endif
  return token::EQUALS;
}
	YY_BREAK
/* pop previous state on exit */
/* -------------------------- */
case 451:
YY_RULE_SETUP
#line 4022 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::EMPTY_TAG_END" << endl;
#endif
  return token::EMPTY_TAG_END;
}
	YY_BREAK
/* maintain START_TAG */
/* ------------------ */
case 452:
/* rule 452 can match eol */
YY_RULE_SETUP
#line 4032 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* continue lexing */
}
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 4036 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 4044 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_START_TAG> */
/*______________________________________________________________________  
   |
   | ELEMENT_CONTENT State
   |
   | This state allows XML-like content, without these characters being
   | misinterpreted as expressions. The character "{" marks a transition
   | to the INITIAL state, i.e. the start of an embedded expression, and
   | the "}" character pops back to the ELEMENT_CONTENT state. To allow
   | curly braces to be used as character content, a double left or right
   | curly brace is interpreted as a single curly brace character. The
   | string "</" is interpreted as the beginning of an end tag, which is
   | associated with a transition to the END_TAG state.
   |______________________________________________________________________*/

/* transition to END_TAG */
/* --------------------- */
case 455:
YY_RULE_SETUP
#line 4074 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_END_TAG;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::START_TAG_END" << endl;
#endif
  return token::START_TAG_END;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 456:
YY_RULE_SETUP
#line 4084 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 457:
YY_RULE_SETUP
#line 4094 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_XML_COMMENT);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::XML_COMMENT_BEGIN" << endl;
#endif
  return token::XML_COMMENT_BEGIN;
}
	YY_BREAK
/* transition to PROCESSING_INSTRUCTION */
/* ------------------------------------ */
case 458:
YY_RULE_SETUP
#line 4104 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_PROCESSING_INSTRUCTION);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PI_BEGIN" << endl;
#endif
  return token::PI_BEGIN;
}
	YY_BREAK
/* transition to CDATA_SECTION */
/* --------------------------- */
case 459:
YY_RULE_SETUP
#line 4114 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_CDATA_SECTION);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CDATA_BEGIN" << endl;
#endif
  return token::CDATA_BEGIN;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 460:
YY_RULE_SETUP
#line 4124 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_START_TAG);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::START_TAG" << endl;
#endif
  return token::START_TAG;
}
	YY_BREAK
/* maintain ELEMENT_CONTENT */
/* ------------------------ */
case 461:
/* rule 461 can match eol */
YY_RULE_SETUP
#line 4134 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put(yytext, yyleng, true);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEMENT_CONTENT" << endl;
#endif
  return token::ELEMENT_CONTENT;
}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 4142 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_entityref(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ENTITY_REF" << endl;
#endif
  return token::ELEMENT_CONTENT;
}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 4150 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ELEMENT_CONTENT" << endl;
#endif
  TRY_STR_LIT (CHAR_REF_LITERAL, put_charref, yytext, yyleng);
}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 4157 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOUBLE_LBRACE" << endl;
#endif
  return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 4164 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOUBLE_RBRACE" << endl;
#endif
  return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* catch all else */
/* -------------- */
case 466:
YY_RULE_SETUP
#line 4173 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* MODE_ELEMENT_CONTENT> */
/*______________________________________________________________________  
   |
   | END_TAG State
   |
   | When the end tag is terminated, the state is popped to the state
   | that was pushed at the start of the corresponding start tag.
   |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 467:
YY_RULE_SETUP
#line 4197 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::TAG_END" << endl;
#endif
  return token::TAG_END;
}
	YY_BREAK
/* maintain END_TAG */
/* ---------------- */
case 468:
/* rule 468 can match eol */
YY_RULE_SETUP
#line 4207 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
   yylval->sval = getDriver()->symtab.put_qname(yytext, yyleng, false, true);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QNAME" << endl;
#endif
  return token::QNAME;
}
	YY_BREAK
/* catch all else */
/* -------------- */
case 469:
YY_RULE_SETUP
#line 4217 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_END_TAG> */
/*______________________________________________________________________  
   |
   | XML_COMMENT State
   | The "<--" token marks the beginning of an XML Comment, and the "-->"
   | token marks the end. This allows no special interpretation of other
   | characters in this state.
   |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 470:
YY_RULE_SETUP
#line 4241 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::XML_COMMENT_END" << endl;
#endif
  return token::XML_COMMENT_END;
}
	YY_BREAK
/* maintain XML_COMMENT */
/* -------------------- */
case 471:
/* rule 471 can match eol */
YY_RULE_SETUP
#line 4251 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::XML_COMMENT_LITERAL" << endl;
#endif
  return token::XML_COMMENT_LITERAL;
}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 4259 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
 #ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
 }
	YY_BREAK
/* <MODE_XML_COMMENT> */
/*______________________________________________________________________  
   |
   | EXPR_COMMENT State
   |
   | The "(:" token marks the beginning of an expression Comment, and
   | the ":)" token marks the end. This allows no special interpretation
   | of other characters in this state.
   |______________________________________________________________________*/

/* pop previous state */
/* ------------------ */
case 473:
YY_RULE_SETUP
#line 4283 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
}
	YY_BREAK
/* maintain EXPR_COMMENT */
/* --------------------- */
case 474:
YY_RULE_SETUP
#line 4289 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(MODE_EXPR_COMMENT);
}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4293 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  /* do nothing */
}
	YY_BREAK
case YY_STATE_EOF(MODE_EXPR_COMMENT):
#line 4297 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::UNRECOGNIZED" << endl;
#endif
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_EXPR_COMMENT> */
/*______________________________________________________________________  
   |
   | PROCESSING_INSTRUCTION State
   |
   | In this state, only patterns that are legal in a processing
   | instruction name are recognized.
   |______________________________________________________________________*/

/* transition to PROCESSING_INSTRUCTION_CONTENT */
/* -------------------------------------------- */
case 476:
/* rule 476 can match eol */
YY_RULE_SETUP
#line 4321 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_PROCESSING_INSTRUCTION_CONTENT; 
  /* continue lexing */
}
	YY_BREAK
/* pop previous state on exit */
/* -------------------------- */
case 477:
YY_RULE_SETUP
#line 4328 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PI_END" << endl;
#endif
  return token::PI_END;
}
	YY_BREAK
/* maintain PROCESSING_INSTRUCTION */
/* ------------------------------- */
case 478:
YY_RULE_SETUP
#line 4338 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put(yytext, yyleng);
  BEGIN MODE_PROCESSING_INSTRUCTION;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::PI_TARGET_LITERAL" << endl;
#endif
  return token::PI_TARGET_LITERAL;
}
	YY_BREAK
/* <MODE_PROCESSING_INSTRUCTION> */
/*______________________________________________________________________  
   |
   | PROCESSING_INSTRUCTION_CONTENT State
   |
   | In this state, only characters are that are legal in processing
   | instruction content are recognized.
   |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 479:
/* rule 479 can match eol */
YY_RULE_SETUP
#line 4364 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
  yylval->sval = getDriver()->symtab.put(yytext, yyleng-2);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CHAR_LITERAL_AND_PI_END" << endl;
#endif
  return token::CHAR_LITERAL_AND_PI_END;
}
	YY_BREAK
/* <MODE_PROCESSING_INSTRUCTION_CONTENT> */
/*______________________________________________________________________  
   |
   | CDATA_SECTION State
   |
   | In this state, only lexemes that are legal in a CDATA section are
   | recognized.
   |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 480:
YY_RULE_SETUP
#line 4390 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_pop_state();
  yylval->sval = getDriver()->symtab.put(yytext, yyleng-3);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::CHAR_LITERAL_AND_CDATA_END" << endl;
#endif
  return token::CHAR_LITERAL_AND_CDATA_END;
}
	YY_BREAK
/* maintain CDATA_SECTION */
/* ---------------------- */
case 481:
/* rule 481 can match eol */
YY_RULE_SETUP
#line 4401 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yymore();
}
	YY_BREAK
/* <MODE_CDATA_SECTION> */
/*______________________________________________________________________  
   |
   | QUOTE_ATTRIBUTE_CONTENT State
   |
   | This state allows content legal for attributes. The character "{"
   | marks a transition to the INITIAL state, i.e. the start of an
   | embedded expression, and the "}" character pops back to the original
   | state.  To allow curly braces to be used as character content, a
   | double left or right curly brace is interpreted as a single curly
   | brace character. This state is the same as APOS_ATTRIBUTE_CONTENT,
   | except that apostrophes are allowed without escaping, and an
   | unescaped quote marks the end of the state.
   |______________________________________________________________________*/

/* transition to START_TAG */
/* ----------------------- */
case 482:
YY_RULE_SETUP
#line 4428 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_START_TAG;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QUOTE" << endl;
#endif
  return token::QUOTE;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 483:
YY_RULE_SETUP
#line 4438 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
/* maintain QUOTE_ATTRIBUTE_CONTENT */
/* -------------------------------- */
case 484:
YY_RULE_SETUP
#line 4448 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ESCAPE_QUOTE" << endl;
#endif
  return token::ESCAPE_QUOTE;
}
	YY_BREAK
case 485:
/* rule 485 can match eol */
YY_RULE_SETUP
#line 4455 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put(yytext, yyleng, true);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QUOTE_ATTR_CONTENT" << endl;
#endif
  return token::QUOTE_ATTR_CONTENT;
}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 4463 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_entityref(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ENTITY_REF" << endl;
#endif
  return token::QUOTE_ATTR_CONTENT;
}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 4471 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  TRY_STR_LIT (CHAR_REF_LITERAL, put_charref, yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::QUOTE_ATTR_CONTENT" << endl;
#endif
}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 4478 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOUBLE_LBRACE" << endl;
#endif
  return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4485 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOUBLE_RBRACE" << endl;
#endif
  return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* <MODE_QUOTE_ATTRIBUTE_CONTENT> */
/*______________________________________________________________________  
   |
   | APOS_ATTRIBUTE_CONTENT State
   |
   | This state is the same as QUOT_ATTRIBUTE_CONTENT, except that
   | quotes are allowed, and an unescaped apostrophe marks the end of
   | the state.
   |______________________________________________________________________*/

/* transition to START_TAG */
/* ----------------------- */
case 490:
YY_RULE_SETUP
#line 4510 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_START_TAG;
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::APOS" << endl;
#endif
  return token::APOS;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 491:
YY_RULE_SETUP
#line 4520 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_APOS_ATTRIBUTE_CONTENT;
  yy_push_state(INITIAL);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::LBRACE" << endl;
#endif
  return token::LBRACE;
}
	YY_BREAK
/* maintain APOS_ATTRIBUTE_CONTENT */
/* ------------------------------- */
case 492:
YY_RULE_SETUP
#line 4531 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ESCAPE_APOS" << endl;
#endif
  return token::ESCAPE_APOS;
}
	YY_BREAK
case 493:
/* rule 493 can match eol */
YY_RULE_SETUP
#line 4538 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put(yytext, yyleng, true);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::APOS_ATTR_CONTENT" << endl;
#endif
  return token::APOS_ATTR_CONTENT;
}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 4546 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = getDriver()->symtab.put_entityref(yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::ENTITY_REF" << endl;
#endif
  return token::APOS_ATTR_CONTENT;
}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 4554 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
  TRY_STR_LIT (CHAR_REF_LITERAL, put_charref, yytext, yyleng);
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::APOS_ATTR_CONTENT" << endl;
#endif
}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 4561 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOUBLE_LBRACE" << endl;
#endif
  return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4568 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
{
#ifdef ZORBA_DEBUG_SCANNER
  cout << "token::DOUBLE_RBRACE" << endl;
#endif
  return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* <MODE_APOS_ATTRIBUTE_CONTENT> */
case 498:
YY_RULE_SETUP
#line 4578 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
return token::UNRECOGNIZED;
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 4580 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"
ECHO;
	YY_BREAK
#line 14184 "xquery_scanner.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MODE_APOS_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_CDATA_SECTION):
case YY_STATE_EOF(MODE_CLOSE_KINDTEST):
case YY_STATE_EOF(MODE_DECLAREORDERING):
case YY_STATE_EOF(MODE_ELEMENT_CONTENT):
case YY_STATE_EOF(MODE_END_TAG):
case YY_STATE_EOF(MODE_ITEMTYPE):
case YY_STATE_EOF(MODE_KINDTEST):
case YY_STATE_EOF(MODE_KINDTESTFORPI):
case YY_STATE_EOF(MODE_NAMESPACEDECL):
case YY_STATE_EOF(MODE_NAMESPACEKEYWORD):
case YY_STATE_EOF(MODE_OCCURRENCE_INDICATOR):
case YY_STATE_EOF(MODE_OPERATOR):
case YY_STATE_EOF(MODE_OPTION):
case YY_STATE_EOF(MODE_PRAGMA):
case YY_STATE_EOF(MODE_PRAGMACONTENTS):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION_CTOR):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION_CONTENT):
case YY_STATE_EOF(MODE_QUOTE_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_SINGLETYPE):
case YY_STATE_EOF(MODE_START_TAG):
case YY_STATE_EOF(MODE_URITOOPERATOR):
case YY_STATE_EOF(MODE_VARNAME):
case YY_STATE_EOF(MODE_XMLSPACE_DECL):
case YY_STATE_EOF(MODE_XML_COMMENT):
case YY_STATE_EOF(MODE_XQUERY_VERSION):
case YY_STATE_EOF(MODE_DECLAREREVALIDATION):
case YY_STATE_EOF(MODE_CATCH):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Zorbarealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3630 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3630 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3629);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Zorbaalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Zorbaalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Zorbafree((void *) b->yy_ch_buf  );

	Zorbafree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Zorbaalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Zorbarealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Zorbaalloc(new_size  );

		else
			(yy_start_stack) = (int *) Zorbarealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-or-c++ */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
yyFlexLexer::~yyFlexLexer()
/* %endif */
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	Zorbafree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        Zorbafree((yy_start_stack)  );
        (yy_start_stack) = NULL;

/* %if-c++-only */
	delete [] (yy_state_buf);
	Zorbafree((yy_start_stack)  );
/* %endif */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %endif */
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Zorbaalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Zorbarealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Zorbafree (void * ptr )
{
	free( (char *) ptr );	/* see Zorbarealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 4580 "/usr/local/src/zorba/src/compiler/parser/xquery_scanner.l"




/*
  Finally, because the scanner related driver's member function depend 
  on the scanner's data, it is simpler to implement them in this file. 
*/

std::string start_state(int state)
{
  switch (state) {
    case INITIAL: return "INITIAL";
    case MODE_APOS_ATTRIBUTE_CONTENT: return "MODE_APOS_ATTRIBUTE_CONTENT";
    case MODE_CDATA_SECTION: return "MODE_CDATA_SECTION";
    case MODE_CLOSE_KINDTEST: return "MODE_CLOSE_KINDTEST";
    case MODE_DECLAREORDERING: return "MODE_DECLAREORDERING";
    case MODE_ELEMENT_CONTENT: return "MODE_ELEMENT_CONTENT";
    case MODE_END_TAG: return "MODE_END_TAG";
    case MODE_EXPR_COMMENT: return "MODE_EXPR_COMMENT";
    case MODE_ITEMTYPE: return "MODE_ITEMTYPE";
    case MODE_KINDTEST: return "MODE_KINDTEST";
    case MODE_KINDTESTFORPI: return "MODE_KINDTESTFORPI";
    case MODE_NAMESPACEDECL: return "MODE_NAMESPACEDECL";
    case MODE_NAMESPACEKEYWORD: return "MODE_NAMESPACEKEYWORD";
    case MODE_OCCURRENCE_INDICATOR: return "MODE_OCCURRENCE_INDICATOR";
    case MODE_OPERATOR: return "MODE_OPERATOR";
    case MODE_OPTION: return "MODE_OPTION";
    case MODE_PRAGMA: return "MODE_PRAGMA";
    case MODE_PRAGMACONTENTS: return "MODE_PRAGMACONTENTS";
    case MODE_PROCESSING_INSTRUCTION: return "MODE_PROCESSING_INSTRUCTION";
    case MODE_PROCESSING_INSTRUCTION_CONTENT: return "MODE_PROCESSING_INSTRUCTION_CONTENT";
    case MODE_QUOTE_ATTRIBUTE_CONTENT: return "MODE_QUOTE_ATTRIBUTE_CONTENT";
    case MODE_SINGLETYPE: return "MODE_SINGLETYPE";
    case MODE_START_TAG: return "MODE_START_TAG";
    case MODE_URITOOPERATOR: return "MODE_URITOOPERATOR";
    case MODE_VARNAME: return "MODE_VARNAME";
    case MODE_XMLSPACE_DECL: return "MODE_XMLSPACE_DECL";
    case MODE_XML_COMMENT: return "MODE_XML_COMMENT";
    case MODE_XQUERY_VERSION: return "MODE_XQUERY_VERSION";
    default: return "Something's drastically wrong here, unrecognized start state!\n";
  }
}


namespace zorba {

xquery_scanner::xquery_scanner(
  xquery_driver* aDriver, 
  std::istream* i, 
  std::ostream* o) 
: ZorbaFlexLexer(i, o), theDriver(aDriver)
{}

xquery_scanner::~xquery_scanner() {}
}

#ifdef yylex
#undef yylex
#endif

int ZorbaFlexLexer::yylex()
{
  std::cerr << "in ZorbaFlexLexer::yylex() !" << std::endl;
  return 0;
}

