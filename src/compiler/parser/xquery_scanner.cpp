#line 2 "xquery_scanner.yy.cpp"

#line 4 "xquery_scanner.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int yylex_init (yyscan_t* scanner);
/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 498
#define YY_END_OF_BUFFER 499
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2478] =
    {   0,
      159,  159,    0,    0,    0,    0,  424,  424,    0,    0,
        0,    0,  467,  467,  474,  474,  402,  402,  411,  411,
      417,  417,  314,  314,  326,  326,  430,  430,  302,  302,
      433,  433,  436,  436,  438,  438,  162,  162,    0,    0,
      479,  479,    0,    0,  335,  335,  450,  450,    0,    0,
      444,  444,  331,  331,  471,  471,    0,    0,  499,  158,
        1,    2,  158,  159,  109,  158,   74,  158,  158,   21,
       57,   59,   34,   20,   33,   64,   35,   51,   19,   85,
       50,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   16,  158,   93,  498,  493,  498,  490,  491,
      498,  481,  481,  423,  424,  423,  423,  418,  419,  422,
      420,  498,  498,  465,  460,  460,  465,  459,  455,  465,
      469,  467,  467,  466,  468,  474,  474,  498,  401,  402,
      401,  401,  336,  378,  401,  360,  382,  401,  352,  381,
      362,  372,  338,  377,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  392,  410,  411,  410,  410,  407,  404,  405,  405,
      405,  403,  416,  417,  416,  416,  416,  416,  412,  414,
      313,  314,  313,  313,  313,  313,  309,  307,  311,  312,

      312,  325,  326,  325,  325,  325,  325,  324,  325,  325,
      325,  325,  429,  430,  429,  429,  426,  427,  425,  301,
      302,  301,  252,  301,  234,  301,  301,  301,  241,  210,
      215,  174,  208,  218,  301,  166,  207,  176,  186,  242,
      204,  248,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  165,  223,  240,  432,  433,  432,  431,  435,  436,
      435,  434,  440,  438,  438,  439,  439,  162,  161,  160,
      475,  477,  498,  479,  479,  485,  482,  498,  483,  498,
      334,  335,  334,  334,  332,  452,  450,  450,  446,  447,

      452,  448,  445,  451,  498,  498,  443,  444,  443,  443,
      441,  330,  331,  330,  330,  330,  330,  471,  498,  498,
      498,  303,  498,    1,  159,    2,    0,   60,  108,    0,
       60,   90,   87,    0,    0,   63,   52,   36,   37,    0,
       51,    0,    0,   83,    0,   32,   56,    0,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,  110,  493,    0,

        0,    0,    0,    0,    0,  492,  496,  497,  481,  481,
      424,  421,    0,    0,  460,    0,    0,    0,    0,    0,
        0,    0,  454,  457,  463,  464,  467,  468,    0,  474,
      473,  474,  472,  402,  384,  351,  339,    0,    0,  359,
      380,  379,  370,  371,  338,    0,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      411,  406,  405,    0,  405,  405,  417,    0,  415,    0,
      415,  413,  414,  314,    0,  308,    0,  308,  306,  312,

      310,  326,    0,  316,    0,  316,  320,    0,    0,    0,
        0,    0,  430,  428,  302,  211,    0,  249,  251,    0,
      249,  238,    0,    0,  219,  220,  173,  206,  205,  184,
      185,    0,    0,    0,  232,  171,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  178,    0,    0,    0,    0,
        0,  179,  180,    0,  202,  203,    0,  181,    0,  182,
        0,  183,    0,    0,  214,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  221,    0,    0,    0,    0,
        0,    0,    0,    0,  253,  433,  431,    0,  436,  434,
        0,  438,  438,  439,  437,  162,  161,  475,  477,  476,

      479,  479,  479,  478,  485,  484,    0,    0,    0,    0,
        0,    0,  488,  489,  335,  333,  332,    0,  450,  449,
      451,    0,    0,  315,    0,  315,  444,  442,  441,    0,
      331,  329,    0,    0,  471,    0,  471,    0,    0,  304,
        0,  304,    0,    0,   58,   52,    0,   53,    0,    0,
       55,   56,   54,   56,   56,   56,   56,    0,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,    0,   56,
       56,   56,   56,   56,   56,   56,   56,   56,    0,   22,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,    0,    0,    0,    0,    0,
        0,    0,  480,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  468,  474,  400,  338,  338,    0,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  405,  405,  405,
        0,    0,    0,    0,    0,  233,    0,  262,  170,  264,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  175,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  209,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  431,  434,    0,
        0,    0,    0,    0,    0,    0,  332,  451,  441,    0,
        0,  471,  470,    0,   81,   58,   82,    0,   56,   56,
        0,   56,    0,    0,    0,    0,    0,    0,    0,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,    0,
        0,    0,   56,   56,   56,   56,   56,   56,   56,    0,
       56,   56,   56,   56,   56,    0,   56,   56,   56,   56,

       56,    0,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  495,
        0,    0,  494,    0,    0,    0,    0,  462,    0,    0,
      461,    0,    0,  456,    0,  468,  338,    0,    0,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  405,  405,  405,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  231,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  168,    0,    0,    0,    0,
        0,    0,    0,  259,    0,  187,    0,    0,  189,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  281,    0,    0,    0,    0,    0,  167,
        0,    0,    0,    0,    0,    0,    0,    0,  190,    0,
      431,  434,  487,    0,    0,  486,    0,    0,  332,  451,
      441,    0,    0,    0,    0,   56,    0,   56,    0,    0,
       92,    0,   92,    0,    0,    0,    0,   56,   56,    0,
       56,   56,   56,   56,   56,   56,   56,    0,    0,    0,
       56,   56,   56,   56,   56,   56,   56,   75,   56,   56,

        0,   76,   56,   56,   56,   56,    0,   29,    0,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,    0,
       56,    0,    0,   28,   11,   56,   56,   56,   56,   56,
       56,   56,   56,   56,    0,   56,   56,   56,    0,    0,
        0,    0,    0,    0,  355,    0,  355,  338,    0,  338,
      338,  338,  338,  338,  338,  338,  338,    0,    0,    0,
      346,  338,  338,  338,  338,  338,  338,    0,  345,  338,
      338,    0,    0,  338,  405,  405,    0,    0,    0,    0,
        0,    0,  198,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      235,    0,    0,    0,    0,    0,  236,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      172,    0,    0,  226,  285,    0,  222,    0,    0,    0,
      224,    0,    0,    0,  300,    0,    0,  328,    0,    0,
        0,   56,    0,  116,    0,    0,    0,   56,   56,    0,
        0,    0,   56,   56,   56,   56,   56,   56,    0,    0,
        0,    0,   56,   56,   56,    0,   56,    0,   56,   56,
       56,    0,   56,   56,   56,   56,    0,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   49,   56,   77,   56,

       56,   56,   56,   56,    0,   56,   56,    0,    0,    0,
        0,   56,   56,    0,    0,    0,  338,    0,  338,  338,
      338,  338,  338,  338,  338,  338,    0,  350,    0,  338,
      338,  338,  338,  338,    0,    0,  337,  405,  405,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  266,    0,
        0,    0,  199,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  177,    0,    0,    0,    0,    0,    0,    0,    0,
      276,    0,  201,    0,  260,    0,    0,  279,    0,    0,
      216,    0,    0,    0,    0,    0,    0,  287,  261,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   56,    0,
        0,  118,    0,   56,    0,    0,   41,   56,   56,   56,
       56,   56,   56,    0,    0,    0,    0,   56,   56,    0,
       78,   56,    0,   56,    0,   56,    0,   56,    0,    0,
       56,   56,    0,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,    0,    0,    0,    0,    0,    0,   56,
        0,  163,    0,    0,  338,  395,  338,  338,  338,  338,
      338,  338,  338,    0,  338,  338,  338,    0,    0,  405,
      405,    0,  318,    0,    0,    0,    0,    0,    0,    0,
        0,  256,    0,    0,    0,  228,    0,    0,    0,  247,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  258,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   56,  115,  117,  119,   56,    0,    0,    0,
       27,   13,    0,   56,   56,   56,   56,   56,    0,    0,
        0,    0,   56,    0,   23,    6,    0,    0,   56,    0,
        0,   56,    0,   56,    0,    0,    0,   17,   56,   46,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,  104,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  338,  338,    0,  344,  338,    0,  340,  338,
      338,  338,  385,  338,  338,  338,  338,    0,  397,    0,
      408,  405,    0,    0,    0,    0,  322,    0,  265,    0,
      255,  267,    0,    0,    0,    0,    0,    0,    0,    0,
      257,    0,    0,    0,    0,    0,    0,    0,  169,    0,
        0,    0,    0,  275,    0,    0,    0,    0,  212,    0,
      225,    0,    0,  283,    0,  230,    0,  200,    0,    0,
        0,    0,    0,    0,    0,  327,  305,   84,  113,   56,
        0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,   56,   56,   56,   96,   95,   98,

        0,    0,   56,   10,    0,    0,    0,   56,    0,    0,
      101,   56,    0,  111,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,    0,    3,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  164,
      458,  338,    0,  338,    0,  338,  338,  338,  338,  338,
        0,  405,    0,  317,    0,    0,  263,  245,    0,    0,
        0,  239,    0,    0,    0,  273,  192,  191,  194,    0,
        0,    0,    0,    0,    0,    0,  188,  197,    0,  277,
      254,  278,    0,  217,  284,    0,  286,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,   39,

        0,   24,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,   56,
        0,   56,   97,   56,    0,    0,    0,    9,    0,  100,
       56,    0,    0,    0,    0,   56,    0,   56,   56,   56,
       56,    0,   56,    0,   18,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      341,    0,  338,    0,  338,  338,  338,    0,  405,    0,
      319,    0,    0,    0,    0,    0,  246,    0,  193,    0,
        0,    0,  196,  250,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,

        0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   56,   56,    0,
        0,    0,   56,    0,    0,   56,   45,    0,    0,    0,
       56,   48,   56,   56,   56,   56,    0,    0,    5,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  394,  338,  396,  338,  338,
      338,    0,  405,    0,  323,    0,    0,  227,    0,    0,
        0,  244,    0,  229,  237,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
        0,    0,    0,    8,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
       56,   43,    0,    0,   56,    0,    0,   56,    0,    0,
        0,   56,   56,   56,   56,   56,    0,    4,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  338,  338,  338,  338,    0,  405,    0,
        0,    0,    0,    0,    0,    0,    0,  280,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,   56,
        0,    0,   56,    0,   56,   72,   71,    0,   56,   56,

       56,   56,    0,    0,    0,    0,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  338,  338,  338,
      338,    0,  405,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  296,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   56,    0,    0,  121,    0,    0,
        0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
        0,   56,   56,    0,    0,    0,   30,  127,   56,    0,
       56,   56,   56,   56,    0,    0,    0,    0,    0,  155,
      156,    0,    0,    0,    0,    0,    0,   89,    0,  347,
      338,  338,  338,    0,  405,    0,    0,  269,    0,    0,

        0,  243,  274,    0,    0,    0,    0,  298,  299,    0,
        0,    0,    0,    0,    0,   56,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
       56,    0,    0,   56,    0,   56,   56,   56,    0,   25,
        0,    0,  152,  154,  145,    0,    0,    0,    0,    0,
      338,  338,    0,  342,  386,    0,  409,  321,    0,    0,
        0,    0,  213,    0,  295,  297,  288,    0,    0,    0,
        0,    0,   56,  120,   68,    0,    0,    0,    0,  122,
       14,    0,   88,    0,    0,    0,   56,   56,    0,    0,
       56,   67,   56,   56,   56,   80,    0,    0,  147,    0,

        0,    0,  338,  338,  268,  270,    0,    0,    0,    0,
      290,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   66,    0,    0,    0,   56,   56,    0,    0,
       56,   56,   56,    0,   26,    0,    0,    0,  149,  150,
      338,    0,  343,    0,    0,    0,    0,    0,  292,  293,
       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       79,   56,   56,    0,    0,    0,    0,   56,    0,  146,
      148,  338,    0,    0,    0,  289,  291,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   56,    0,  124,    0,
       44,   47,   56,    0,  338,    0,    0,    0,    0,   61,

        0,    0,    0,    0,    0,    0,    0,   56,   56,   42,
        0,   56,    0,  338,    0,  272,    0,    0,    0,    0,
        0,    0,   62,    0,    0,    0,   56,   56,   56,    0,
       56,    0,  338,    0,    0,   86,    0,    0,    0,    0,
        0,    0,    0,    0,   56,   56,   56,  123,   12,    0,
      338,  271,    0,   73,    0,   69,    0,   94,    0,    0,
        0,   56,    0,   31,  151,    0,  348,  294,    0,   70,
        0,    0,   56,   65,    0,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   31,
       35,   35,   35,   35,   35,   35,   35,   36,   35,   37,
       35,   35,   38,   39,   35,   35,   35,   35,   35,   35,
       40,   41,   42,   41,   43,   41,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   35,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   35,   68,   69,   70,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   71,   71
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    2,    2,    3,    2,    2,    4,    5,    4,    4,
        4,    6,    7,    8,    4,    9,    4,    4,   10,   11,
       12,   13,   14,   12,   15,   12,   16,   12,   12,   17,
       17,   17,   17,   17,   18,   18,   18,   18,   18,   12,
       12,   12,   18,   17,   17,   17,   17,   17,   17,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   12,   15,
       20
    } ;

static yyconst flex_int16_t yy_base[2610] =
    {   0,
        0,    0,   71,   75,   73,   77,   88,  106,   23,   32,
      174,  245,  316,    0,  100,  124,  387,    0,  458,    0,
      529,    0,  600,    0,  670,  727,  156,  186,  785,    0,
      856,    0,  927,    0,  148,  203,  998,    0, 1069, 1098,
      165,  193,  212,  227, 1127,    0, 1198,    0,  105,  109,
     1269,    0,  688,  693,  163,  214,  214,  217, 7569, 7570,
      127,  273,  284,  297, 7570, 7560, 7570, 7555, 7553,   76,
      302, 7542, 7570, 7570, 7570,   85,   76,  233, 7570,  189,
     7570,  753, 1339, 1382,  652, 1303,  716,  207, 1314, 1345,
     1354,  662, 1363, 1372, 1386, 1401, 1410, 1429,  704,  690,

     1430, 1333, 7570, 7495, 7570, 7570,    0, 1444, 7550, 7494,
     7491,    0, 7518, 7570, 1502, 1507, 7536, 7570, 7570, 7570,
     7570, 7498, 7501, 7570,    0,    0, 1470,  682, 7488, 7485,
     7570, 1513, 1528, 7570, 7531,    0, 7530, 7537, 7570, 1533,
     1538, 7525, 7570,  117, 1543, 7570, 7570, 7524, 7570,  110,
     7570,  184, 7526, 7570,  659, 1323,  714,  200,  178, 1504,
     1422,  175, 1325,  249,  682,   50,  681, 1442,  235,  237,
      104, 7570, 7570, 1550, 1565, 7525, 7570, 7570, 7524,  114,
      663, 7570, 7570, 1570, 1575, 7538, 7532, 7521, 7570,    0,
     7570, 1580, 1586, 7535, 7529, 7518, 7570, 7570, 7570,    0,

     7478, 7570, 1591, 1596, 7531, 7525, 7514, 7570, 7488, 7479,
      725, 7474, 7570, 1601, 1606, 7510, 7570, 7570, 7570, 7570,
     1611, 1616, 7506, 7523, 7570, 7518, 7516, 7505, 1621, 7570,
     7570, 7570, 7570,  290, 7501, 7570,  267, 7570,  653, 7570,
     7570, 7570, 1579, 7478, 1312, 1582, 1588, 1593,  181, 1348,
     1604, 7468,  696, 1312, 1441, 7476, 1612, 1611,  107, 7479,
     1621, 7570, 7453, 7570, 7570, 1677, 1682, 7498, 7570, 1687,
     1692, 7497, 7570, 1697, 1702, 7515, 1346, 1707,    0, 7570,
     1712,    0, 7491, 7489,  753,    0, 7508, 1710, 7447, 7444,
     7570, 1718, 1723, 7490, 7489, 7570, 1728, 1733, 7570, 7570,

     7484, 7570, 7570, 7487, 7501, 7495, 7570, 1738, 1743, 7484,
     7483, 7570, 1753, 1768, 7482, 7444, 7441, 7483, 7482, 7492,
     7486, 7570, 7442, 1773, 1778, 1783, 7489, 7488, 7570, 7482,
     7481, 7570, 7570, 1788,    0, 7570, 1773, 7570, 7570, 7471,
     1776, 1506,  744, 7570, 1797, 7570, 1811, 7476, 1824, 1838,
     1851, 1864, 1347, 1877, 1600, 1590, 1766, 1791, 1825, 1845,
     1911, 1393, 1826, 1829, 1818, 1830, 1865, 1861, 1931, 1862,
     1876, 1894, 1884, 1895, 1857, 1880, 1592, 1906, 1903, 1912,
     1918, 1913, 1910, 1925, 1935, 1928, 1938, 1941, 1942, 1948,
     1944, 1952, 1953, 1951, 1966, 1954, 1967, 7570,    0, 1356,

     1425, 7429, 7428, 7444, 7425, 7570, 7570, 7570,    0, 7460,
     2021, 7570, 7439, 7428,    0, 1429, 1503, 7422, 7421, 7437,
     7418, 1844, 7570, 7570, 7570, 7570, 2033, 7457,    0,    0,
     7570,    0, 7570, 2038, 7570, 7570, 7570, 2043, 7418, 7570,
     7570, 7570, 7570, 7570, 7455,    0, 1366, 7454, 2048, 1368,
     1609, 1404, 1774, 2008, 7453, 1970, 7452, 7451, 1069, 1614,
     7450,  664, 7449, 7448, 1474, 7447, 1812, 1826, 1782, 1429,
     1608,  261, 2032, 1738, 1783, 7446, 1800, 1799, 2006, 2034,
     2057, 7570, 7445,    0, 2041, 1499, 2075, 7459, 7458, 7452,
     7451, 7570,    0, 2088, 7455, 7454, 7448, 7447, 7570,    0,

        0, 2093, 7451, 7450, 7444, 7443, 7570, 7406, 7403, 7398,
     7433, 7403, 2098, 7570, 2103, 7570, 7442, 7441, 7570, 7435,
     7434, 7570, 2109, 7385, 7570, 7570, 7570, 7570, 7570, 7570,
     7570, 7383, 7390, 1854, 7397, 2114, 7393, 7380, 7386, 1704,
     2024, 2119, 7378, 7380, 7375, 7570, 2021, 7376, 7375, 7377,
     7387, 7570, 7570, 7380, 1501, 7570, 1503,  119, 7366, 7570,
     7383, 7570, 7367, 7382, 7380, 7366, 7365, 7376,  623, 1840,
     7366, 7366, 1707, 7373, 7365, 7570, 7371, 7366, 7359, 7362,
     7363, 7366, 1293, 7353, 7570, 2124, 7389,    0, 2129, 7388,
        0, 2134, 2139, 7406, 7405, 2144,    0, 2152,    0, 7570,

     7380, 7379, 7378, 7570,    0, 7570, 2129, 2017, 7343, 7342,
     7358, 7339, 7570, 7570, 2157, 7570, 7378,    0, 2162, 7570,
     7377,    0, 7391, 7390, 7384, 7383, 2167, 7570, 7372,    0,
     2172, 7570, 7346, 7333, 7373,    0, 7372, 7363, 7381, 7380,
     7374, 7373, 7339, 7323,    0, 2157, 7361, 7360, 7362, 7348,
     7570, 2178, 2183, 2196, 2209, 2222, 2235, 2269, 2262, 2284,
     2289, 2329, 2342, 2355, 2368, 2382, 2396, 2418, 2249, 2432,
     2445, 2458, 2471, 2484, 2499, 2512, 2534, 2539, 2565, 7570,
     2570, 2583, 2596, 2609, 2631, 2645, 2658, 2671, 2155, 2168,
     1700, 2194, 2256, 2217, 2170, 2253, 2258, 2263, 2266, 2196,

     2276, 2288, 2290, 2314, 2316, 2352, 2355, 2329, 2364, 1756,
     2343, 2379, 2402, 2419, 2377,  163,    0, 7321, 7321, 7353,
     7315, 7318,    0, 7326, 7313, 2062,    0, 7314, 7314, 7346,
     7308, 7311, 7348, 7334,    0,    0, 7570,    0, 7342, 2684,
     2224, 2173, 2207, 7341, 2171, 2258, 2181, 2332, 2410, 1745,
     2274, 2421, 2339, 7340, 2444, 2460, 2344, 2394, 2227, 2461,
     2304, 2390, 2455, 2331, 2186, 2473, 2433,    0, 2388, 2476,
     7318, 7313, 7312, 2439, 7298, 7570, 7310, 2696, 7570, 2705,
     7309, 2710, 7299, 1788, 7301, 7300, 7309, 7306, 7305, 7301,
     7287, 7570, 2715, 7300, 7285, 7294, 7299, 7296, 7295, 7281,

     2722, 7286, 7283, 7275, 7276, 2160, 7287, 7274, 2727, 7287,
     7286, 7281, 7307, 7268, 7282, 7285, 7284, 7266, 7282, 7262,
     7276, 7271, 7262, 7259, 7275, 7267, 7262, 7269, 7272, 7258,
     7266, 7247, 7259, 7248, 7259, 7252, 7255,    0,    0, 2497,
        0, 7243, 7243, 7275, 7237, 7235,    0,    0,    0, 7230,
     7238, 7269, 7570, 7228, 7570,    0, 7570, 7251, 2733, 2495,
     2738, 2471, 2774, 7275, 7269, 7225, 7232, 7217, 7211, 1846,
     2544, 2779, 2502, 2498, 2565, 2529, 2566, 2568, 2578, 7222,
     7211, 7218, 2528, 2590, 2592, 2615, 2617, 2693, 2694, 2787,
     2500, 2709, 2632, 2696, 2802, 2807, 2762, 2735, 2711, 2766,

     2830, 7227, 2763, 2767, 2788, 2785, 2794, 2795, 2797, 2800,
     2798, 2804, 2816, 2843, 2821, 2872, 2884, 2819, 2820, 2833,
     2845, 2839, 2853, 2862, 2852, 2860, 2916, 2875, 2874, 7252,
     7239, 7201, 7570, 7198, 7193, 7194, 7206, 7240, 7227, 7189,
     7570, 7191, 7185, 7570, 7213,    0,    0, 7237, 7231, 2504,
     7215, 2926, 2555, 2601, 2635, 7214, 2506, 2643, 7211, 2489,
     2726, 2937, 2942, 2890, 2776, 2930, 1400, 2602, 2416, 2972,
     7208, 2528, 2910, 2978, 2939,    0, 2940, 2699, 7167, 7169,
     7167, 7171, 7166, 7172, 7159, 2994, 3000, 7162, 7161, 7168,
     7158, 7152, 7153, 3005, 3010, 7167, 7166, 7146, 7160, 7143,

     7154, 7156, 7151, 7142, 7149, 7570, 7046, 7052, 7049, 7051,
     7044, 7041, 3015, 7570, 7046, 7570, 7056, 7035, 7570, 7031,
     3024, 3029, 7039, 7031, 7037, 7047, 7024, 7022, 7027, 7015,
     7027, 7011, 7008, 7570, 7006, 7016, 7011, 7004, 6999, 7570,
     6994, 6988, 6993, 6986, 6993, 6989, 6991, 6980, 3038, 6968,
        0,    0, 7006, 6990, 6952, 7570, 6954, 6948,    0,    0,
        0, 6943, 6929, 6939, 6953, 2906, 6923, 2909, 6921, 6969,
     6968, 6962, 6957, 6922, 6924, 6905, 6919, 2993, 2998, 3064,
     2999, 2997, 2995, 3019, 2985, 3020, 3021, 6907, 6899, 2710,
     3033, 3035, 3040, 3102, 3047, 3109, 3011, 7570, 3057, 3074,

     3125, 7570, 3071, 3089, 3081, 3088, 3153, 7570, 6922, 3086,
     3112, 3034, 3111, 3118, 3124, 3117, 3037, 3138, 3090, 2941,
     3132, 3194, 3207, 7570, 7570, 3116, 3140, 3142, 3154, 3168,
     3171, 3222, 3167, 3170, 3234, 3180, 3189, 3190, 6949, 6905,
     6904, 6942, 6919, 6882, 6871, 6859, 6841, 2483, 3256, 2598,
     2968, 3098, 3094, 2642, 3160, 3162, 2129, 3262, 3267, 3284,
     7570, 3299, 2932, 3221, 2559, 2647, 3231, 3304, 7570, 3309,
     6827, 3321, 3334, 6826, 3222, 2750, 6792, 6749, 6742, 6746,
     6744, 6731, 7570, 6731, 6725, 6726, 6725, 6726, 6704, 6708,
     6686, 3339, 3348, 6675, 6657, 6658, 6662, 6637, 6640, 6629,

     6628, 6629, 6619, 2744, 3353, 6547, 6540, 6531, 6535, 3358,
     7570, 6484, 6489, 6483, 6498, 3363, 7570, 6451, 6435, 6447,
     6421, 6450, 6423, 3368, 6416, 6417, 6398, 6395, 6387, 6393,
     7570, 6383, 6385, 7570, 7570, 3373, 7570, 6378, 3378, 6359,
     7570, 6338, 3383, 6335, 7570, 6381, 6329, 7570, 6334, 6343,
     6321, 3338, 6318, 7570, 6314, 6311, 6312, 3228, 3231, 6315,
     6322, 3041, 3267, 3268, 3346, 3342, 3351, 3350, 6223, 6205,
     6205, 6194, 3265, 3345, 3414, 3419, 3374, 3447, 3375, 3452,
     3384, 6189, 3376, 3415, 3379, 3466, 6173, 3380, 3413, 3429,
     3383, 3411, 3412, 3427, 3428, 3443, 7570, 3437, 7570, 3430,

     3434, 3442, 3457, 3451, 3519, 3444, 3456,  262, 6137, 6145,
     6139, 3464, 3532, 6143, 6127, 6142, 2931, 6111, 2847, 3487,
     3228, 3488, 6148, 3099, 3056, 3494, 3541, 7570, 3549, 2962,
     6146, 3139, 2047, 3555, 3560, 3565, 7570, 3517, 3227, 6089,
     6071, 6075, 6070, 6056, 6051, 6032, 6031, 6036, 7570, 6022,
     6020, 6019, 7570, 5938, 5942, 5834, 5832, 5812, 5809, 5784,
     5791, 5770, 5775, 5774, 5754, 5749, 5741, 5723, 3583, 3594,
     5707, 7570, 5727, 3603, 5392, 5371,  633,  689,  719, 1294,
     7570, 1353, 7570, 1442, 7570, 3608, 1513, 7570, 1565, 1620,
     7570, 1710, 1799, 3613, 3618, 1855, 3623, 7570, 7570, 3245,

     1906, 1918, 1965, 2012, 2196, 2222, 2276, 2273, 3530, 2316,
     2368, 7570, 2417, 3529, 2464, 2503, 7570, 3636, 3642, 3591,
     3476, 3605, 3612, 2533, 2545, 2584, 2652, 3611, 3680, 3685,
     7570, 3478, 2649, 3614, 3703, 3648, 2688, 3606, 3710, 2701,
     3716, 3671, 3170, 3674, 3520, 3676, 3692, 3690, 3683, 3689,
     3697, 3698, 3715, 2721, 2747, 2778, 3199, 2780, 2839, 3767,
     3783, 7570, 2861, 2881, 3609, 7570, 3525, 3788, 3733, 3801,
     3070, 3554, 3626, 2892, 3240, 3628, 3752, 3823, 2906, 3829,
     3734, 3834, 7570, 2943, 2976, 3004, 3097, 3202, 3208, 3277,
     3272, 7570, 3284, 3286, 3292, 7570, 3362, 3354, 3851, 7570,

     3360, 3388, 3428, 3450, 3450, 3471, 3477, 3530, 3515, 3553,
     3856, 7570, 3549, 3574, 3579, 3586, 3590, 3604, 3616, 3619,
     3620, 3640, 3626, 3637, 3649, 3642, 3653, 3662, 3861, 3664,
     3666, 3684, 3698, 3710, 3717, 3714, 3722, 3866, 3729, 3730,
     3741, 3722, 3822, 7570, 7570, 7570, 3760, 3750, 3738, 3873,
     7570, 7570, 3940, 3834, 3757, 3837, 3829, 3758, 3753, 3752,
     3768, 3771, 3901, 3907, 7570, 7570, 3761, 3760, 3838, 3785,
     3798, 3821, 3789, 3867, 3804, 3793, 3920, 7570, 3865, 7570,
     3877, 3895, 3887, 3897, 3903, 3900, 3910, 3928, 3920, 3929,
     4003, 7570, 3806, 3805, 3838, 3836, 3834, 3849, 4070, 3850,

     3852, 3868, 3908, 4008, 4013, 7570, 3913, 4018, 7570, 3891,
     4031, 3914, 7570, 3912, 3910, 3967, 3947, 3878, 7570, 4036,
     7570, 3971, 4041, 3930, 3927, 3922, 7570, 3923, 7570, 3943,
     7570, 7570, 3947, 3937, 4054, 3943, 4059, 3946, 3980, 3966,
     7570, 3982, 3986, 4001, 4005, 4004, 4009, 4010, 7570, 4006,
     4013, 4075, 4008, 7570, 4025, 4035, 4037, 4030, 7570, 4036,
     7570, 4027, 4029, 4030, 4032, 7570, 4045, 7570, 4050, 4049,
     4041, 4039, 4037, 4052, 4098, 7570, 7570, 7570, 7570, 4055,
     4090, 4119, 4049, 4057, 4070, 4053, 4063, 4057, 4071, 4068,
     4081, 4072, 4090, 4084, 4087, 4149, 4094, 7570, 7570, 7570,

     4089, 4162, 4106, 7570, 4168, 4082, 4083, 4156, 4094, 4092,
     7570, 4125, 4101, 7570, 4126, 4161, 4131, 4134, 4130, 4148,
     4143, 4212, 4169, 4235, 4146, 4240, 7570, 4098, 4130, 4144,
     4223, 4158, 4157, 4147, 4153, 4145, 4171, 4171, 4171, 7570,
     7570, 4245, 4267, 4210, 4274, 4211, 4212, 4229, 4230, 4233,
     4208, 4234, 4204, 7570, 4198, 4197, 7570, 7570, 4207, 4213,
     4310, 7570, 4205, 4224, 4222, 7570, 7570, 7570, 7570, 4236,
     4241, 4225, 4232, 4232, 4229, 4315, 7570, 7570, 4320, 7570,
     7570, 7570, 4240, 7570, 7570, 4246, 7570, 4232, 4236, 4242,
     4330, 4255, 4254, 4245, 4252, 4243, 4255, 4255, 4277, 7570,

     4339, 7570, 4323, 7570, 4248, 4248, 4266, 4265, 4291, 4281,
     4281, 4292, 4295, 4289, 4305, 4291, 4309, 4297, 4314, 4340,
     4365, 4378, 7570, 4333, 4395, 4406,    0, 7570, 4298, 7570,
     4312, 4370, 4298, 4314, 4317, 4326, 4372, 4372, 4342, 4354,
     4364, 4434, 4441, 4447, 7570, 4330, 4351, 4322, 4350, 4363,
     4454, 4355, 4376, 4365, 4378, 4375, 4377, 4374, 4370, 4463,
     7570, 4372, 4419, 4385, 4452, 4431, 4439, 4422, 4449, 4425,
     7570, 4430, 4418, 4419, 4421, 4426, 7570, 4482, 7570, 4427,
     4428, 4430, 7570, 7570, 4444, 4493, 4448, 4453, 4448, 4453,
     4454, 4505, 4449, 4469, 4458, 4472, 4469, 4470, 4466, 4502,

     4525, 7570, 4470, 4471, 4476, 4469, 4471, 4466, 4490, 4477,
     4490, 4489, 4486, 4491, 4496, 4497, 4490, 4492, 4493, 4535,
     4495, 4557, 4505, 4570, 4499, 4501, 7570, 4495, 4511, 4506,
     4517, 7570, 4525, 4526, 4527, 4533, 4525, 4596, 7570, 4517,
     4534, 4527, 4529, 4530, 4538, 4538, 4537, 4543, 4542, 4559,
     4551, 4549, 4547, 4564, 4560, 7570, 4590, 7570, 4591, 4592,
     4593, 4557, 4597, 4563, 7570, 4567, 4569, 7570, 4564, 4621,
     4580, 7570, 4581, 7570, 7570, 4572, 4571, 4570, 4571, 4578,
     4578, 4576, 4579, 4578, 4596, 4591, 4589, 4587, 4602, 4598,
     4649, 4660,    0, 7570, 4594, 4593, 4639, 4613, 4605, 4649,

     4606, 4608, 4609, 4611, 4617, 4615, 4622, 4615, 4634, 4627,
     4628, 7570, 4625, 4628, 4637, 4690, 4630, 4652, 4639, 4654,
     4641, 4656, 4650, 4651, 4660, 4655, 4651, 7570, 4652, 4664,
     4727, 4668, 4671, 4662, 4661, 4678, 4678, 4667, 4679, 4733,
     4696, 4695, 4685, 4720, 4721, 4722, 4723, 4745, 4729, 4705,
     4692, 4691, 4694, 4701, 4711, 4699, 4705, 7570, 4760, 4767,
     4722, 4725, 4716, 4715, 4733, 4733, 4722, 4728, 4784, 4740,
     4745, 4744, 4795, 4741, 4746, 4732, 4758, 4743, 4748, 4751,
     4754, 4756, 4751, 4754, 4759, 4760, 4761, 4769, 4768, 4797,
     4756, 4757, 4819, 4757, 4774, 7570, 7570, 4783, 4778, 4777,

     4782, 4784, 4768, 4793, 4848, 4797, 7570, 4797, 4787, 4794,
     4800, 4805, 4806, 4862, 4796, 4817, 4806, 4867, 4851, 4852,
     4854, 4880, 4855, 4820, 4827, 4832, 4835, 4827, 4833, 4829,
     4830, 4891, 4896, 4857, 7570, 4857, 4844, 4845, 4851, 4856,
     4858, 4916, 4848, 4869, 4872, 4926, 4850, 7570, 4863, 4873,
     4871, 4893, 4876, 4882, 4883, 4897, 7570, 4886, 4896, 4888,
     4891, 4902, 4895, 4896, 4901, 4957, 7570, 7570, 4901, 4904,
     4903, 4915, 4917, 4970, 4983, 4889, 4890, 4907, 4909, 7570,
     7570, 4920, 4921, 4934, 4934, 4932, 4935, 7570, 4994, 7570,
     4978, 4979, 5001, 4942, 5008, 4954, 4953, 7570, 4961, 4971,

     4959, 7570, 7570, 4954, 4961, 4964, 4965, 7570, 7570, 4965,
     4966, 4973, 4973, 4972, 4973, 4985, 4987, 4984, 4971, 4993,
     4987, 5041, 4993, 4994, 5005, 5002, 5009, 5004, 5007, 5004,
     5009, 4996, 5003, 5008, 5014, 5013, 5018, 5025, 5080, 7570,
     5087, 5006, 7570, 7570, 7570, 5016, 5024, 5015, 5016, 5033,
     5064, 5072, 5096, 7570, 7570, 5101, 7570, 7570, 5048, 5052,
     5053, 5059, 7570, 5055, 7570, 7570, 7570, 5061, 5064, 5056,
     5054, 5071, 5096, 7570, 7570, 5102, 5060, 5075, 5123, 7570,
     7570, 5082, 7570, 5069, 5130, 5135, 5090, 5091, 5092, 5085,
     5097, 7570, 5100, 5099, 5162, 7570, 5097, 5110, 7570, 5110,

     5097, 5100, 5147, 5184, 7570, 7570, 5112, 5112, 5117, 5131,
     7570, 5131, 5118, 5120, 5168, 5121, 5131, 5131, 5136, 5140,
     5132, 5136, 7570, 5145, 5197, 5209, 5164, 5157, 5140, 5153,
     5185, 5195, 5171, 5226, 7570, 5239, 5161, 5163, 7570, 7570,
     5203, 5248, 7570, 5173, 5181, 5261, 5174, 5175, 7570, 7570,
     7570, 5180, 5182, 5197, 5202, 5209, 5203, 5213, 5204, 5205,
     7570, 5217, 5247, 5223, 5210, 5258, 5259, 5224, 5286, 7570,
     7570, 5254, 5216, 5215, 5291, 7570, 7570, 5239, 5228, 5241,
     5244, 5245, 5255, 5254, 5247, 5248, 5254, 5289, 7570, 5255,
     7570, 7570, 5257, 5254, 5290, 5262, 5270, 5262, 5275, 7570,

     5276, 5279, 5276, 5263, 5266, 5273, 5282, 5285, 5278, 7570,
     5268, 5281, 5275, 5313, 5275, 7570, 5283, 5297, 5298, 5285,
     5293, 5298, 7570, 5308, 5300, 5292, 5303, 5305, 5311, 5310,
     5309, 5312, 5337, 5316, 5320, 7570, 5312, 5323, 5314, 5320,
     5312, 5327, 5320, 5329, 5331, 5332, 5333, 7570, 5395, 5321,
     5400, 7570, 5325, 7570, 5330, 7570, 5332, 7570, 5331, 5339,
     5335, 5361, 5423, 7570, 7570, 5428, 7570, 7570, 5352, 7570,
     5364, 5355, 5383, 7570, 5350, 7570, 7570, 5446, 5466, 5486,
     5506, 5526, 5546, 5566, 5586, 5606, 5626, 5646, 5666, 5686,
     5706, 5726, 5746, 5765, 5782, 5799, 5817, 5826, 5843, 5861,

     5871, 5880, 5898, 5918, 5929, 5947, 5967, 5978, 5996, 6016,
     6036, 6056, 6067, 6076, 6093, 6103, 6111, 6130, 6148, 6166,
     6175, 6184, 6202, 6222, 6233, 6250, 6268, 6287, 6307, 6327,
     6347, 5398, 6366, 5763, 6383, 6400, 6418, 6427, 5402, 6444,
     6462, 6472, 5404, 6481, 5421, 6499, 6519, 6530, 6548, 6568,
     6579, 6597, 6617, 6637, 6657, 6668, 5423, 6677, 5426, 6694,
     6704, 6712, 6731, 6749, 6767, 6776, 5752, 6785, 5771, 6803,
     6823, 6834, 5824, 6851, 6869, 6887, 6906, 6926, 6937, 6954,
     6971, 5870, 6988, 5879, 6998, 7015, 7025, 7034, 7043, 7052,
     7061, 7070, 5928, 7079, 7088, 7097, 7115, 7135, 7155, 7175,

     7187, 7204, 7222, 7240, 5926, 7258, 7276, 5975, 7294
    } ;

static yyconst flex_int16_t yy_def[2610] =
    {   0,
     2477,    1, 2478, 2478, 2479, 2479, 2480, 2480, 2481, 2481,
     2482, 2482, 2477,   13, 2483, 2483, 2477,   17, 2477,   19,
     2477,   21, 2477,   23, 2484, 2484, 2485, 2485, 2477,   29,
     2477,   31, 2477,   33, 2486, 2486, 2477,   37, 2487, 2487,
     2488, 2488, 2489, 2489, 2477,   45, 2477,   47, 2481, 2481,
     2477,   51, 2490, 2490, 2491, 2491, 2481, 2481, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2492, 2477, 2477, 2493, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2494, 2494, 2494,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   97,   97,   97,

       97,   97, 2477, 2477, 2477, 2477, 2495, 2477, 2477, 2477,
     2477, 2496, 2496, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2497, 2497, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2498, 2499, 2499, 2500, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2501, 2477, 2501, 2501, 2501, 2501, 2501, 2501,
     2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
     2501, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2502, 2502,
     2502, 2477, 2477, 2477, 2477, 2503, 2504, 2477, 2477, 2505,
     2477, 2477, 2477, 2506, 2507, 2477, 2477, 2477, 2477, 2508,

     2508, 2477, 2477, 2477, 2509, 2510, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2511, 2477, 2477, 2512, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2513, 2477, 2477,
     2477, 2514, 2477, 2515, 2477, 2515, 2515, 2477, 2516, 2477,
     2477, 2517, 2477, 2518, 2519, 2520, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2521, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2522, 2523, 2524, 2477, 2477, 2477, 2477,
     2525, 2477, 2477, 2477, 2477, 2477, 2477, 2526, 2527, 2528,
     2529, 2477, 2477, 2477, 2477, 2477, 2530, 2477, 2477, 2531,
     2477, 2477, 2477, 2477, 2532, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2533, 2534, 2533, 2533,
     2533, 2533,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352, 2533,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352, 2477, 2535, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2536, 2536,
     2477, 2477, 2477, 2477, 2537, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2538, 2539, 2540,
     2477, 2541, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2542, 2543, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542,
     2477, 2477, 2544, 2545, 2544, 2544, 2477, 2546, 2477, 2547,
     2477, 2477, 2548, 2477, 2549, 2477, 2550, 2477, 2477, 2551,

     2551, 2477, 2552, 2477, 2553, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2554, 2477, 2477, 2555,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2556, 2557, 2477, 2558,
     2559, 2560, 2477, 2560, 2560, 2477, 2561, 2477, 2562, 2477,

     2563, 2564, 2563, 2477, 2565, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2566, 2567, 2477, 2477,
     2568, 2569, 2570, 2477, 2571, 2477, 2477, 2477, 2572, 2573,
     2477, 2477, 2477, 2477, 2574, 2575, 2576, 2477, 2577, 2477,
     2578, 2477, 2477, 2477, 2579, 2477, 2477, 2477, 2477, 2477,
     2477, 2580, 2581, 2581, 2581, 2581, 2581, 2477, 2581, 2581,
     2581, 2581, 2581, 2581, 2581, 2581, 2581, 2581, 2477, 2581,
     2581, 2581, 2581, 2581, 2581, 2581, 2581, 2581, 2477, 2477,
     2581, 2581, 2581, 2581, 2581, 2581, 2581, 2581,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688, 2477, 2582, 2477, 2477, 2477,
     2477, 2477, 2583, 2477, 2477, 2477, 2584, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2585, 2586, 2477, 2587, 2588, 2477,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2589, 2590, 2590,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2591, 2592, 2477,
     2593, 2477, 2477, 2477, 2477, 2477, 2594, 2595, 2596, 2477,
     2477, 2576, 2477, 2477, 2477, 2579, 2477, 2477, 2580,  688,
     2477,  688, 2477, 2597, 2598, 2477, 2477, 2477, 2477,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688, 2477,
     2477, 2477,  688,  688,  688,  688,  688,  688,  688, 2477,
      688,  688,  688,  688,  688, 2477,  688,  688,  688,  688,

     2581, 2477,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688, 2581,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688, 2477,
     2582, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2584, 2477,
     2477, 2477, 2477, 2477, 2477, 2585, 2587, 2599, 2600, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2589, 2590, 2590, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2591, 2592, 2477, 2593, 2477, 2477, 2477, 2477, 2594, 2595,
     2596, 2477, 2477, 2477, 2477,  688, 2477,  688, 2477, 2597,
     2477, 2598, 2477, 2477, 2477, 2477, 2477,  688,  688, 2477,
      688,  688,  688,  688,  688,  688,  688, 2477, 2477, 2477,
      688,  688,  688,  688,  688,  688,  688, 2477,  688,  688,

     2477, 2477,  688,  688,  688,  688, 2477, 2477, 2477,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688, 2601,
      688, 2477, 2477, 2477, 2477,  688,  688,  688,  688,  688,
      688,  688,  688,  688, 2477,  688,  688,  688, 2477, 2477,
     2477, 2477, 2477, 2599, 2477, 2600, 2477, 2588, 2477, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2477, 2477, 2477,
     2477, 2588, 2588, 2588, 2588, 2588, 2588, 2477, 2477, 2588,
     2588, 2477, 2477, 2588, 2590, 2590, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477,  688, 2477, 2477, 2477, 2477, 2477,  688,  688, 2477,
     2477, 2601,  688,  688,  688,  688,  688,  688, 2477, 2477,
     2477, 2477,  688,  688,  688, 2477,  688, 2477,  688,  688,
      688, 2477,  688,  688,  688,  688, 2477,  688,  688,  688,
      688,  688,  688,  688,  688,  688, 2477,  688, 2477,  688,

      688,  688,  688,  688, 2477,  688,  688, 2477, 2477, 2477,
     2477,  688,  688, 2477, 2477, 2477, 2588, 2477, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2477, 2477, 2477, 2588,
     2588, 2588, 2588, 2588, 2477, 2477, 2477, 2590, 2590, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688, 2477,
     2477, 2477, 2477,  688, 2477, 2477, 2477, 2581, 2581,  688,
      688,  688,  688, 2477, 2477, 2477, 2477,  688, 2581, 2477,
     2477,  688, 2477,  688, 2477,  688, 2477,  688, 2477, 2477,
      688,  688, 2601,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688, 2477, 2477, 2477, 2477, 2477, 2477,  688,
     2477, 2477, 2477, 2477, 2588, 2477, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2477, 2588, 2588, 2588, 2477, 2477, 2590,
     2590, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477,  688, 2477, 2477, 2477,  688, 2477, 2477, 2477,
     2477, 2477, 2477,  688,  688,  688,  688,  688, 2477, 2477,
     2477, 2477,  688, 2602, 2477, 2477, 2477, 2477,  688, 2477,
     2477,  688, 2477,  688, 2477, 2477, 2477, 2477,  688, 2477,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2588, 2588, 2477, 2477, 2588, 2477, 2477, 2588,
     2588, 2588, 2477, 2588, 2588, 2588, 2588, 2477, 2477, 2477,
     2477, 2590, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,
     2601, 2581, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477,  688,  688,  688,  688, 2477, 2477, 2477,

     2477, 2477,  688, 2477, 2603, 2477, 2477,  688, 2477, 2477,
     2477,  688, 2477, 2477,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2588, 2477, 2588, 2477, 2588, 2588, 2588, 2588, 2588,
     2477, 2590, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688, 2477,

     2604, 2477, 2601, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,  688,
     2477,  688, 2477,  688, 2477, 2603, 2605, 2477, 2477, 2477,
      688, 2601, 2477, 2477, 2477,  688, 2601,  688,  688,  688,
      688, 2477, 2581, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2588, 2477, 2588, 2588, 2588, 2477, 2590, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,

     2606, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,  688, 2601,
     2477, 2477,  688, 2607, 2477,  688, 2477, 2477, 2477, 2477,
      688, 2477,  688,  688,  688,  688, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2588, 2477, 2588, 2588,
     2588, 2477, 2590, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,
     2477, 2606, 2608, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,
      688, 2477, 2477, 2477,  688, 2607, 2477,  688, 2477, 2477,
     2477,  688,  688,  688,  688,  688, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2588, 2588, 2588, 2588, 2477, 2590, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477,  688, 2609, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,  688,
     2477, 2477, 2581, 2477,  688, 2477, 2477, 2477,  688,  688,

      688,  688, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2588, 2588, 2588,
     2588, 2477, 2590, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477,  688, 2609, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477,  688,  688, 2477, 2477, 2477, 2477, 2477,  688, 2477,
      688,  688,  688, 2581, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2588, 2588, 2588, 2477, 2590, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477,  688, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,
      688, 2477, 2477,  688, 2477,  688,  688,  688, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2588, 2588, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477,  688, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477,  688,  688, 2477, 2477,
      688, 2477,  688,  688, 2581, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2588, 2588, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2601, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477,  688,  688, 2477, 2477,
      688,  688,  688, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2588, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477,  688,  688, 2477, 2477, 2601, 2601,  688, 2477, 2477,
     2477, 2588, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477,  688, 2601, 2477, 2477,
     2477, 2477,  688, 2477, 2588, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477,  688,  688, 2477,
     2477,  688, 2477, 2588, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477,  688,  688,  688, 2477,
      688, 2477, 2588, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477,  688,  688,  688, 2477, 2581, 2477,
     2588, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477,  688, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477,  688, 2477, 2477, 2477,    0, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477
    } ;

static yyconst flex_int16_t yy_nxt[7642] =
    {   0,
       60,   61,   62,   63,   64,   61,   65,   66,   60,   67,
       60,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,   60,   79,   80,   60,   60,   60,   81,   82,
       82,   82,   82,   82,   82,   83,   82,   82,   82,   60,
       60,   60,   82,   84,   85,   86,   87,   88,   89,   82,
       82,   90,   82,   91,   92,   93,   94,   95,   82,   96,
       97,   98,   99,  100,  101,  102,   82,  103,  104,  105,
       60,  106,  446,  106,  106,  106,  106,  106,  106,  122,
      106,  338,  108,  109,  332,  123,  108,  109,  122,  115,
      115,  116,  115,  115,  123,  106,  339,  470,  333,  106,

      106,  117,  118,  106,  336,  119,  337,  115,  115,  116,
      115,  115,  305,  137,  113,  120,  305,  306,  113,  117,
      118,  306,  138,  119,  106,  436,  446,  106,  324,  325,
      325,  325,  324,  120,  441,  442,  484,  137,  110,  437,
      111,  106,  110,  106,  111,  106,  138,  106,  273,  274,
      274,  275,  274,  274,  480,  121,  277,  214,  214,  215,
      214,  214,  578,  106,  579,  106,  106,  485,  106,  216,
      106,  217,  218,  121,  124,  125,  125,  124,  125,  125,
      809,  319,  810,  219,  716,  127,  930,  214,  214,  215,
      214,  214,  285,  106,  106,  343,  106,  446,  128,  216,

      446,  217,  218,  273,  274,  274,  275,  274,  274,  443,
      444,  277,  106,  219,  106,  106,  344,  106,  273,  287,
      285,  320,  446,  288,  320,  457,  321,  106,  552,  321,
      106,  465,  319,  106,  287,  106,  106,  322,  288,  458,
      322,  129,  553,  130,  124,  124,  125,  125,  124,  125,
      125,  106,  340,  454,  341,  347,  127,  446,  455,  446,
      362,  323,  363,  106,  323,  456,  342,  347,  347,  128,
      364,  446,  365,  273,  325,  326,  325,  325,  325,  289,
      342,  290,  106,  446,  106,  325,  325,  325,  325,  325,
      478,  528,  529,  479,  289,  525,  290,  106,  325,  325,

      325,  325,  325,  334,  334,  334,  334,  334,  468, 1455,
      526,  760,  129, 1456,  130,  124,  131,  132,  132,  133,
      132,  132,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  134,  131,  131,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  131,  131,  131,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  131,  131,  131,  131,  139,  140,  140,
      141,  140,  140,  142,  139,  139,  143,  139,  139,  139,

      144,  145,  139,  139,  146,  147,  139,  139,  139,  148,
      149,  150,  151,  152,  139,  139,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  154,  139,  139,  153,
      155,  153,  156,  157,  158,  153,  159,  153,  160,  153,
      161,  162,  163,  164,  165,  153,  166,  167,  168,  169,
      170,  171,  153,  153,  139,  172,  139,  139,  173,  174,
      174,  175,  174,  174,  173,  173,  173,  173,  173,  173,
      173,  176,  177,  178,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  173,  173,  173,

      179,  179,  179,  179,  179,  180,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  181,  179,
      179,  179,  179,  179,  179,  182,  173,  173,  173,  183,
      184,  184,  185,  184,  184,  183,  186,  183,  183,  183,
      183,  187,  188,  189,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  183,  183,
      183,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  183,  183,  183,  183,

      191,  192,  192,  193,  192,  192,  191,  194,  191,  191,
      191,  191,  195,  196,  191,  191,  191,  197,  191,  191,
      191,  191,  191,  198,  191,  199,  191,  191,  191,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  191,
      191,  191,  200,  201,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  191,  191,  191,
      191,  203,  203,  204,  203,  203,  819,  205,  530,  531,
     1517,  446,  206,  207,  820,  484,  446,  208,  422,  313,
      313,  314,  313,  313,  313,  313,  314,  313,  313,  355,

      347,  315,  423,  446,  446,  347,  315,  347,  486,  424,
      347,  753,  347,  347,  447,  347,  209,  347,  375,  448,
      449,  210,  347,  347,  471,  211,  472,  212,  203,  203,
      204,  203,  203,  393,  205,  347,  446,  347, 1518,  206,
      207,  469,  473,  562,  208,  316,  347,  347,  317,  347,
      316,  347,  563,  317,  345,  345,  345,  345,  345,  391,
      347,  392,  649,  359,  347,  452,  346,  360,  510,  347,
      453,  347,  361,  209, 1519,  348,  347,  347,  210,  604,
      602,  511,  211,  650,  212,  220,  221,  221,  222,  221,
      221,  223,  224,  220,  225,  220,  226,  227,  228,  229,

      230,  231,  232,  233,  220,  234,  220,  235,  236,  237,
      238,  239,  240,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  241,  220,  242,  220,  243,  244,
      245,  246,  247,  248,  249,  220,  250,  220,  251,  252,
      253,  254,  255,  220,  256,  257,  258,  259,  260,  261,
      220,  220,  262,  263,  264,  220,  265,  266,  266,  267,
      266,  266,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  265,  265,  265,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  265,  265,  265,  265,  269,  270,  270,
      271,  270,  270,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  269,  269,  269,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  269,  269,  269,  269,  106,  278,

      278,  278,  278,  278,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  106,  106,  106,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  280,  106,  106,  106,  106,
      281,  281,  281,  281,  281,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  446,  106,  106,  106,  106,  283,  106,  106,  281,

      281,  281,  281,  281,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      750,  106,  106,  106,  106,  283,  106,  291,  292,  292,
      293,  292,  292,  291,  291,  291,  291,  291,  291,  291,
      294,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  291,  291,  291,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  291,  291,  291,  291,  296,  297,

      297,  298,  297,  297,  296,  299,  296,  296,  296,  296,
      300,  296,  296,  296,  296,  296,  296,  296,  301,  296,
      296,  296,  296,  302,  303,  296,  296,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  296,  296,  296,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  296,  296,  296,  296,  307,
      308,  308,  309,  308,  308,  307,  307,  307,  307,  307,
      307,  307,  310,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  307,  307,
      307,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  307,  307,  307,  307,
      345,  345,  345,  345,  345,  446,  356,  446,  835, 2477,
     1520,  347,  346,  357,  836,  538,  347,  564,  347,  358,
      595,  348,  347,  347,  347,  366,  450,  347,  539,  347,
      367,  565,  466,  368,  347,  347,  347,  716,  347,  451,
      347,  467,  349,  345,  345,  345,  345,  345,  446,  347,
      446,  397,  347,  369,  554,  346, 1521,  372,  347,  370,

      371,  373,  347,  555,  348,  347,  347,  347,  556,  347,
      374,  347,  739,  347,  347,  347,  347,  377,  347,  376,
      347,  717,  446,  347,  347,  347,  446,  347,  742,  379,
      350,  378,  347,  347,  347,  351,  380,  352,  347,  347,
      671,  347,  353,  354,  446,  381,  347,  347,  382,  347,
      726,  446,  400,  383,  347,  384,  347,  385,  347,  347,
     1165,  347,  347,  347,  446,  347,  386,  744, 1522,  463,
      347,  347,  347,  347,  347,  347,  387,  394,  416,  718,
      388,  395,  719,  464,  566,  347,  396,  401,  389,  474,
      758,  567,  475,  402,  727,  390,  446,  403,  476,  404,

      568,  477,  405,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  417,  427,  427,  427,  427,  427,  418,
      754,  484,  647,  419,  647,  420,  446,  648,  421,  427,
      427,  427,  427,  427,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  438,  438,  438,  438,  438,  770,
      459,  481,  481,  481,  481,  481, 1524,  728,  807,  460,
      729,  805,  806,  808,  461,  462,  481,  481,  481,  481,
      481,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  494,  494,  494,  494,  494,  439,  494,  494,  494,
      494,  494,  502,  502,  502,  502,  502,  502,  502,  502,

      502,  502,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  523,  523,  523,  523,  523,  532, 1525,  540,
      446,  446,  533,  541,  534,  347,  446,  691,  542,  535,
      536,  543,  544,  545,  548,  347,  546,  557,  660,  549,
      661,  558,  550,  547,  551,  570,  347,  571,  347,  572,
      559,  574,  575,  743,  524,  560,  347,  576,  581,  759,
      577,  582,  583,  573,  751,  752, 1526,  584,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  592,  592,

      593,  592,  592,  593,  593,  593,  593,  593,  596,  596,
      596,  596,  596,  598,  598,  598,  598,  598,  607,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  786,
      825,  347,  787,  608,  631,  631,  631,  631,  631,  609,
      446, 1527,  903,  610,  788,  611,  826,  446,  612,  631,
      631,  631,  631,  631,  324,  325,  325,  325,  324,  325,
      325,  325,  325,  325,  325,  326,  325,  325,  325,  334,
      334,  334,  334,  334,  337,  340,  446,  341,  345,  345,

      345,  345,  345,  762,  446,  446,  342,  923,  959,  342,
      346,  347,  345,  345,  345,  345,  345,  662,  924,  745,
      342,  446,  446,  342,  346,  345,  345,  345,  345,  345,
      763,  644,  347,  348,  446,  994,  347,  346,  757,  345,
      345,  345,  345,  345, 1528,  663,  348,  764,  446,  995,
      765,  346,  345,  345,  345,  345,  345,  347,  755,  653,
      348,  674,  733,  347,  346,  345,  345,  345,  345,  345,
      664,  347,  756,  348,  347,  347,  673,  346,  658,  658,
      658,  658,  658,  734,  347,  665,  348,  672,  666,  675,
      347,  347,  347,  667,  821,  347,  347, 1078, 1531,  654,

      779,  822,  347,  688,  655,  668,  347,  347,  347,  656,
      347,  347,  669,  669,  669,  669,  669,  678,  676,  681,
      780,  347,  347,  347,  677,  347,  689,  347,  347,  347,
      657,  347,  679,  679,  679,  679,  679,  682,  659,  347,
      347,  690,  347,  347,  680,  685,  347,  686,  347,  683,
      347,  347,  692,  348,  684,  347,  670,  347,  347,  687,
      347,  347,  693,  347,  698,  695,  697, 1535, 1536,  347,
      347,  694,  347,  347,  696,  699,  347,  347,  347,  347,
      347,  700,  703,  347,  347,  706,  347,  347,  701,  347,
      702,  347,  446,  347,  347,  705,  347,  347,  347,  347,

      708,  347,  711,  704,  347,  707,  710,  347,  347,  709,
      347,  347,  347,  714,  347,  748, 1537,  347,  347,  347,
      347,  712,  411,  411,  411,  411,  411,  713,  446,  715,
      446,  749,  347,  347,  427,  427,  427,  427,  427,  434,
      434,  434,  434,  434,  438,  438,  438,  438,  438,  740,
      740,  740,  740,  740,  446,  746,  446,  766,  481,  481,
      481,  481,  481,  484,  797, 1477,  798,  789,  747,  446,
      446,  842,  790, 1538,  843,  761,  487,  487,  487,  487,
      487,  767,  799,  726,  791,  938,  439,  792,  769,  494,
      494,  494,  494,  494,  502,  502,  502,  502,  502,  513,

      513,  513,  513,  513,  515,  515,  515,  515,  515,  741,
      523,  523,  523,  523,  523,  782,  782,  782,  782,  782,
      793,  793,  793,  793,  793,  586,  586,  586,  586,  586,
      589,  589,  589,  589,  589,  592,  592,  593,  592,  592,
      593,  593,  593,  593,  593,  596,  596,  596,  596,  596,
      840,  446,  524,  598,  598,  598,  598,  598,  615,  615,
      615,  615,  615,  619,  619,  619,  619,  619,  627,  627,
      627,  627,  627,  631,  631,  631,  631,  631,  646,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345, 1326,
      342,  346,  902,  446,  841,  446,  346,  345,  345,  345,

      345,  345,  901,  446,  342,  348,  347, 1018,  446,  346,
      861,  861,  861,  861,  861,  908, 1019,  347,  348,  347,
      951,  347,  346,  345,  345,  345,  345,  345,  956,  446,
      347,  348,  347,  954,  952,  346,  863,  863,  863,  863,
      863,  904,  973,  860,  348,  347,  446,  347,  346,  446,
      669,  669,  669,  669,  669,  913,  347,  348,  347, 1539,
      907,  953,  346,  345,  345,  345,  345,  345,  347,  862,
      658,  658,  658,  658,  658,  346,  864, 1540,  967,  347,
      446,  865,  346,  950,  348,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  880,  446,  346,  909,  905,

      881,  910,  346,  906,  347, 1541,  348,  347,  882,  347,
      911,  348,  955,  912,  347,  347,  866,  347,  347, 1542,
      347,  870,  867,  868,  914,  347,  446,  347,  347,  869,
      345,  345,  345,  345,  345,  960,  872,  916,  347,  347,
      871,  347,  346,  345,  345,  345,  345,  345,  969,  915,
      347,  348,  347,  446,  446,  346,  345,  345,  345,  345,
      345,  446, 1544,  918,  348,  347,  446,  347,  346,  345,
      345,  345,  345,  345,  972,  917,  347,  348,  347,  957,
      347,  346,  873,  345,  345,  345,  345,  345,  921,  965,
      348,  347,  925,  962,  347,  346,  874,  345,  345,  345,

      345,  345,  920,  347,  348,  347,  347,  919,  875,  346,
      484,  922,  446,  876,  347,  347,  446,  347,  348,  345,
      345,  345,  345,  345,  929,  926,  347,  877,  347, 1545,
      347,  346,  446,  345,  345,  345,  345,  345,  446,  347,
      348,  347,  977,  446,  878,  346,  345,  345,  345,  345,
      345,  970,  927,  347,  348,  446,  966,  958,  346,  345,
      345,  345,  345,  345,  347,  928,  446,  348,  961, 1167,
      347,  346,  345,  345,  345,  345,  345,  446, 1546,  879,
      348,  347,  446,  446,  346,  345,  345,  345,  345,  345,
      982,  963,  975,  348,  883,  446,  983,  346,  484,  884,

      345,  345,  345,  345,  345,  446,  348,  964,  968,  885,
      971,  446,  346,  345,  345,  345,  345,  345,  840,  974,
     1053,  348,  347,  978, 1548,  346,  446, 1317,  446,  887,
      886, 1068, 1156,  347,  348,  890,  890,  890,  890,  890,
      345,  345,  345,  345,  345, 1082,  347,  346, 1081,  347,
      446,  347,  346,  347, 1066, 1148,  348,  347, 1549,  888,
      347,  348,  347, 1154,  347,  889,  679,  679,  679,  679,
      679,  345,  345,  345,  345,  345, 1084,  446,  680,  347,
      347,  446, 1091,  346,  345,  345,  345,  345,  345, 1170,
      347,  347,  348,  891, 1559,  347,  346,  345,  345,  345,

      345,  345, 1151, 1079, 1560,  348,  347, 1332, 1083,  346,
      345,  345,  345,  345,  345, 1086,  347,  347,  348,  347,
      446, 1087,  346,  446,  446, 1085,  892,  347,  347,  347,
      347,  348,  896,  896,  896,  896,  896, 1092, 1561,  893,
      347,  347, 1319,  347,  346,  894,  345,  345,  345,  345,
      345, 1093,  347,  348,  347, 1152, 1166,  446,  346,  345,
      345,  345,  345,  345,  446,  446,  347,  348,  347,  446,
      895,  346,  345,  345,  345,  345,  345,  347, 1095,  347,
      348, 1094, 1153,  347,  346,  740,  740,  740,  740,  740,
     1333,  948,  897,  348,  347, 1562,  949,  986,  986,  986,

      986,  986, 1155, 1323, 1568,  898,  987,  987,  987,  987,
      987,  782,  782,  782,  782,  782,  793,  793,  793,  793,
      793,  484,  899, 1013, 1013, 1013, 1013, 1013, 1022, 1022,
     1022, 1022, 1022,  900,  345,  345,  345,  345,  345,  861,
      861,  861,  861,  861,  347,  347,  346,  347,  446, 1573,
     1097,  346, 1576, 1176, 1096,  347,  347,  989, 1100, 1105,
      347, 1003,  347,  990,  991, 1271, 1004, 1272, 1099, 1592,
      992,  347,  484,  347, 1005,  863,  863,  863,  863,  863,
     1080, 1080, 1080, 1080, 1080, 1157,  347,  346,  890,  890,
      890,  890,  890, 1339, 1104, 1593, 1098,  347,  446, 1367,

      346, 1368, 1067, 1101, 1101, 1101, 1101, 1101,  896,  896,
      896,  896,  896,  347,  347, 1103, 1102,  347,  347, 1106,
      346, 1594, 1110, 1163,  347,  347, 1111, 1597,  347,  347,
      347, 1107, 1107, 1107, 1107, 1107,  347, 1112, 1069,  347,
     1113,  347, 1115, 1108, 1116,  347,  347,  347,  347,  347,
      347,  347,  348,  347, 1114,  347,  347,  347, 1118,  347,
      347, 1117,  347, 1119,  347, 1120,  347,  347, 1121,  446,
      347,  347,  347, 1122, 1122, 1122, 1122, 1122,  347, 1126,
     1127,  347,  347,  347,  347, 1123, 1123, 1123, 1123, 1123,
      347, 1129, 1598, 1128,  347,  347,  347, 1124, 1130, 1131,

     1467,  347, 1133,  347,  347,  347,  348,  347, 1601, 1132,
     1602,  347,  446,  347,  347,  347, 1134, 1135, 1135, 1135,
     1135, 1135,  347,  347,  347,  347,  347, 1149, 1149, 1149,
     1149, 1149,  446, 1138,  347, 1137,  347,  347, 1158, 1158,
     1158, 1158, 1158, 1160, 1160, 1160, 1160, 1160,  446, 1162,
     1159, 1125,  446,  446,  446, 1161,  651,  347, 1613,  446,
      347,  446,  484, 1297,  446, 1171, 1619,  347,  347, 1150,
     1252,  347, 1136, 1168, 1168, 1168, 1168, 1168,  347, 1172,
     1172, 1172, 1172, 1172,  446, 1169, 1174, 1175, 1624, 1164,
      446, 1173, 1330, 1465,  446,  986,  986,  986,  986,  986,

      446,  987,  987,  987,  987,  987, 1192, 1192, 1192, 1192,
     1192, 1193, 1193, 1193, 1193, 1193, 1013, 1013, 1013, 1013,
     1013, 1262, 1475, 1320, 1211, 1216, 1216, 1216, 1216, 1216,
     1022, 1022, 1022, 1022, 1022, 1625, 1266, 1258, 1217, 1243,
     1243, 1243, 1243, 1243,  347, 1259,  347,  347,  347,  347,
      347, 1626, 1263, 1194, 1264,  347,  651,  347, 1184,  347,
      347,  347,  347, 1417, 1185, 1080, 1080, 1080, 1080, 1080,
      347,  347,  347,  347, 1265, 1279, 1268,  346,  446, 1267,
     1273,  347,  347,  347,  347,  347,  347, 1275, 1295, 1218,
     1274,  347,  446, 1290, 1244,  347,  347,  347,  347,  347,

     1277, 1472,  347, 1276, 1276, 1276, 1276, 1276,  347,  347,
     1278, 1278, 1278, 1278, 1278, 1260,  446, 1281, 1280,  347,
      446,  446,  347, 1610, 1261,  347, 1101, 1101, 1101, 1101,
     1101, 1283,  347,  347, 1284, 1286,  347,  347,  346,  347,
      347,  347, 1471,  347, 1627, 1321, 1288, 1285,  347, 1322,
      347,  347,  347,  347, 1107, 1107, 1107, 1107, 1107, 1289,
      347,  446,  347,  347,  347, 1292, 1108,  347,  347,  347,
     1293,  347, 1291,  347,  347,  347, 1282, 1294,  347,  347,
      347, 1296,  446,  347,  446,  651,  347, 1298, 1300,  347,
     1476,  347, 1580,  347,  347, 1122, 1122, 1122, 1122, 1122,

      347, 1302,  347, 1299,  347,  347, 1301,  346, 1123, 1123,
     1123, 1123, 1123, 1303, 1304, 1324,  347, 1325,  347,  347,
     1124,  347,  347, 1305, 1305, 1305, 1305, 1305, 1306,  347,
      347,  347,  347,  347, 1307, 1135, 1135, 1135, 1135, 1135,
      347,  347, 1312,  446,  484, 1481, 1595,  346, 1628,  484,
      446,  347,  347,  446, 1629, 1596, 1313, 1149, 1149, 1149,
     1149, 1149,  446, 1158, 1158, 1158, 1158, 1158, 1327, 1327,
     1327, 1327, 1327,  347, 1125, 1159, 1331, 1338, 1334,  347,
     1308, 1328,  347, 1469,  347, 1160, 1160, 1160, 1160, 1160,
     1414, 1614, 1533,  347, 1309, 1310, 1534, 1161, 1311, 1318,

     1329, 1329, 1329, 1329, 1329, 1168, 1168, 1168, 1168, 1168,
     1335, 1335, 1335, 1335, 1335, 1419,  347, 1169,  347,  347,
     1428,  446, 1172, 1172, 1172, 1172, 1172,  347, 1418,  347,
      347,  446, 1630, 1631, 1173, 1336, 1336, 1336, 1336, 1336,
     1192, 1192, 1192, 1192, 1192, 1632, 1633, 1634, 1337, 1193,
     1193, 1193, 1193, 1193, 1369, 1369, 1369, 1369, 1369, 1374,
     1374, 1374, 1374, 1374, 1216, 1216, 1216, 1216, 1216, 1386,
     1386, 1386, 1386, 1386, 1395, 1395, 1395, 1395, 1395, 1397,
     1397, 1397, 1397, 1397, 1243, 1243, 1243, 1243, 1243,  347,
     1354, 1356, 1420,  347, 1409, 1423,  347,  347, 1422, 1355,

      347,  347,  347, 1421,  347, 1443, 1429,  347,  347, 1635,
     1636, 1638,  347,  347, 1379, 1430, 1430, 1430, 1430, 1430,
     1276, 1276, 1276, 1276, 1276,  347, 1434,  347, 1431, 1400,
      347,  347,  346, 1436,  347,  347,  347,  347,  347, 1639,
     1432,  347,  347, 1401, 1402,  347,  347, 1403, 1278, 1278,
     1278, 1278, 1278, 1435, 1435, 1435, 1435, 1435, 1438, 1441,
      346, 1447,  347, 1444,  347,  347,  347, 1439, 1439, 1439,
     1439, 1439, 1442,  347,  347,  347,  347,  347,  347,  347,
      347,  347, 1448, 1640, 1446, 1450, 1449, 1445,  347,  347,
      347,  347,  347,  347,  347,  347,  347, 1641, 1433,  347,

     1452, 1451,  347,  347,  347,  347,  347,  347,  347,  446,
      446, 1642, 1453,  347,  347,  347,  446,  347,  347,  347,
     1305, 1305, 1305, 1305, 1305, 1460,  347, 1556,  347,  347,
     1643, 1644,  346, 1461, 1461, 1461, 1461, 1461,  347,  484,
      347, 1473, 1327, 1327, 1327, 1327, 1327,  446, 1468, 1470,
     1329, 1329, 1329, 1329, 1329, 1328, 1478, 1478, 1478, 1478,
     1478, 1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336,
     1336, 1582, 1604, 1645, 1646, 1454,  446,  446, 1480, 1337,
      347,  347,  347,  347, 1369, 1369, 1369, 1369, 1369, 1543,
     1547,  347,  347, 1474,  347, 1511, 1511, 1511, 1511, 1511,

     1647, 1611, 1649, 1479, 1374, 1374, 1374, 1374, 1374, 1386,
     1386, 1386, 1386, 1386, 1529, 1529, 1529, 1529, 1529, 1395,
     1395, 1395, 1395, 1395, 1397, 1397, 1397, 1397, 1397, 1650,
     1651,  446, 1509, 1652, 1555, 1653, 1510, 1550, 1550, 1550,
     1550, 1550,  347, 1553, 1553, 1553, 1553, 1553,  446, 1551,
      446, 1654, 1523,  347, 1514,  346,  347,  347,  348, 1558,
     1557, 1530,  347,  347,  348,  347, 1574,  347,  347, 1569,
     1603, 1612, 1563,  347,  347, 1615,  347, 1655, 1656, 1532,
     1657, 1564, 1564, 1564, 1564, 1564, 1430, 1430, 1430, 1430,
     1430, 1658, 1659, 1565, 1660, 1572, 1661, 1662,  346,  347,

     1663, 1554,  348, 1552, 1435, 1435, 1435, 1435, 1435, 1664,
      347, 1439, 1439, 1439, 1439, 1439,  346, 1577, 1577, 1577,
     1577, 1577,  347,  346, 1666,  347, 1667,  347, 1579, 1581,
     1567, 1583, 1668,  347,  347, 1584,  347, 1586,  347, 1585,
      347,  347, 1587,  347, 1589,  347, 1669, 1566,  347,  347,
     1588,  347,  347, 1670,  347,  446,  484, 1570, 1590,  347,
      347, 1673, 1591, 1571, 1671, 1575,  347,  347, 1599, 1599,
     1599, 1599, 1599, 1672,  446, 1674, 1676,  347,  347, 1677,
     1678, 1622, 1679, 1578, 1461, 1461, 1461, 1461, 1461, 1605,
     1605, 1605, 1605, 1605, 1607, 1616,  346, 1683, 1684, 1617,

     1698, 1606, 1608, 1608, 1608, 1608, 1608, 1682,  347,  347,
      446,  347, 1695, 1699, 1609, 1700, 1701, 1706,  347,  347,
      347, 1707,  347,  446, 1478, 1478, 1478, 1478, 1478,  347,
     1620, 1620, 1620, 1620, 1620, 1623, 1623, 1623, 1623, 1623,
     1680, 1709, 1621, 1710, 1681, 1711, 1600, 1713, 1714, 1728,
     1729,  484, 1637, 1637, 1637, 1637, 1637, 1511, 1511, 1511,
     1511, 1511, 1529, 1529, 1529, 1529, 1529, 1675, 1675, 1675,
     1675, 1675,  347,  347, 1550, 1550, 1550, 1550, 1550, 1618,
      347, 1694, 1696,  347,  347,  347, 1551, 1708,  347,  347,
     1697,  347, 1730, 1731, 1732, 1733,  347, 1739, 1740,  347,

      347, 1648, 1702, 1702, 1702, 1702, 1702, 1741, 1564, 1564,
     1564, 1564, 1564,  446, 1712, 1715,  347, 1665,  347, 1703,
     1565, 1577, 1577, 1577, 1577, 1577, 1716,  347,  347,  347,
      446, 1744,  446,  346,  446,  446,  446, 1751,  347,  347,
     1552, 1553, 1553, 1553, 1553, 1553,  347, 1718,  347,  347,
     1717,  347,  347,  346,  347, 1742, 1720,  347, 1719,  347,
     1721,  347,  347,  347, 1722,  347, 1724, 1747, 1704,  446,
     1748,  347,  347, 1723, 1566, 1746, 1725, 1754, 1755,  347,
      347, 1756,  347, 1757, 1685, 1686, 1687, 1578, 1688,  446,
      347,  347, 1758,  484, 1759, 1689, 1690, 1760, 1762, 1691,

     1750, 1764, 1692, 1693, 1726, 1726, 1726, 1726, 1726, 1743,
     1743, 1743, 1743, 1743, 1605, 1605, 1605, 1605, 1605, 1608,
     1608, 1608, 1608, 1608, 1752, 1765, 1606, 1766, 1749, 1767,
      446, 1609, 1745, 1745, 1745, 1745, 1745, 1620, 1620, 1620,
     1620, 1620, 1623, 1623, 1623, 1623, 1623, 1768, 1769, 1621,
     1770, 1771, 1772,  446,  347, 1761, 1761, 1761, 1761, 1761,
     1637, 1637, 1637, 1637, 1637,  347, 1773, 1774, 1775, 1777,
     1727, 1599, 1599, 1599, 1599, 1599, 1776, 1776, 1776, 1776,
     1776, 1778, 1779,  346, 1780, 1781, 1782, 1783, 1753, 1784,
     1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1675,

     1675, 1675, 1675, 1675, 1805,  651,  347, 1763, 1806, 1809,
     1810, 1799, 1800, 1807, 1813, 1734, 1735,  347, 1811, 1812,
     1801, 1801, 1801, 1801, 1801, 1814, 1808, 1815, 1816, 1817,
     1736, 1737, 1802, 1818, 1738,  347, 1823, 1829,  347, 1830,
     1833, 1803, 1834, 1794, 1795,  347,  347, 1819, 1820,  347,
     1821, 1821, 1821, 1821, 1821, 1835,  347,  347, 1796, 1797,
     1848, 1824, 1798, 1702, 1702, 1702, 1702, 1702,  347, 1825,
     1825, 1825, 1825, 1825, 1831,  346,  347,  347, 1832, 1836,
     1838,  347,  347, 1837, 1839,  347, 1804,  347,  347, 1849,
     1827, 1840,  347,  347,  347, 1841,  347,  347, 1850,  347,

      347, 1852, 1853, 1854, 1855,  347, 1856,  347,  347, 1822,
      347,  347,  347, 1842, 1842, 1842, 1842, 1842,  347, 1843,
      347, 1857, 1858,  347, 1851, 1851, 1851, 1851, 1851, 1704,
     1859,  347,  446,  446,  446, 1828, 1844, 1844, 1844, 1844,
     1844, 1726, 1726, 1726, 1726, 1726, 1860, 1860, 1860, 1860,
     1860,  446,  446,  346, 1868,  446,  484, 1870, 1861, 1871,
     1872, 1865, 1873,  347, 1874, 1863, 1876,  446, 1743, 1743,
     1743, 1743, 1743, 1877,  347, 1745, 1745, 1745, 1745, 1745,
     1867, 1869, 1878, 1879, 1880, 1881,  347, 1882, 1883, 1884,
     1887, 1866, 1888, 1846, 1889, 1890, 1891,  347, 1893, 1894,

     1847, 1895, 1845, 1896, 1897, 1898, 1899, 1727, 1903, 1904,
     1862, 1761, 1761, 1761, 1761, 1761, 1776, 1776, 1776, 1776,
     1776, 1886, 1886, 1886, 1886, 1886, 1905, 1906,  347, 1909,
     1864, 1892, 1892, 1892, 1892, 1892, 1900, 1910,  651,  347,
     1801, 1801, 1801, 1801, 1801, 1902, 1907, 1911, 1908, 1912,
     1913, 1914, 1802, 1875, 1915, 1916, 1917, 1918, 1919, 1925,
     1928, 1929, 1920,  347, 1930,  347, 1821, 1821, 1821, 1821,
     1821, 1885, 1926, 1940,  347, 1943,  347,  347,  346, 1922,
     1922, 1922, 1922, 1922,  347,  651, 1931,  651,  347, 1923,
     1933,  347, 1927, 1934, 1932,  347, 1825, 1825, 1825, 1825,

     1825, 1944,  347, 1941,  347,  347, 1804, 1825, 1825, 1825,
     1825, 1825, 1942, 1935, 1945,  347,  347, 1947, 1936, 1948,
     1949, 1950, 1951,  347, 1953, 1921,  347, 1954, 1827,  347,
     1955, 1952, 1956, 1958,  347, 1842, 1842, 1842, 1842, 1842,
      347,  446, 1938, 1938, 1938, 1938, 1938,  346, 1844, 1844,
     1844, 1844, 1844,  446, 1939, 1851, 1851, 1851, 1851, 1851,
      346,  446, 1828,  348, 1860, 1860, 1860, 1860, 1860, 1962,
     1959,  484, 1964, 1828,  446, 1957, 1861, 1965, 1966, 1937,
     1967, 1968, 1969, 1970, 1970, 1970, 1970, 1970, 1971, 1972,
     1960, 1973, 1974, 1961, 1886, 1886, 1886, 1886, 1886, 1976,

     1977, 1978, 1975, 1963, 1979, 1980, 1892, 1892, 1892, 1892,
     1892, 1982, 1983, 1984, 1845, 1985, 1986, 1988, 1946, 1989,
     1990, 1995, 1996, 1997, 1998, 1987, 1991, 1991, 1991, 1991,
     1991, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
     2008, 2009, 2013,  347,  347, 2010, 2017, 1993, 2019, 2011,
      651, 2015, 2018,  347,  347,  347,  347, 2012, 1922, 1922,
     1922, 1922, 1922,  347,  347, 2020, 2021,  347, 2022, 1981,
      346, 1825, 1825, 1825, 1825, 1825, 2023,  347, 2025,  347,
     2026, 2027, 2028, 2024,  347, 2029, 2030,  347,  347,  347,
     2031, 2032, 1994, 2033, 2034,  347, 2035, 1938, 1938, 1938,

     1938, 1938, 2036, 2037, 2038, 2039, 2040, 2041, 2014, 1939,
     2042, 2043,  446,  446,  446,  446, 2048, 2050, 2051,  484,
     2052, 2053, 1970, 1970, 1970, 1970, 1970, 2056, 2057, 2058,
     2059, 2060, 2061, 2062, 2063, 2064, 2044, 1828, 2065, 2066,
     2047, 2067, 2045, 2046, 2049, 2068, 2069, 2070, 2071,  347,
     1991, 1991, 1991, 1991, 1991, 2074, 2075, 2076, 2072, 2077,
      347, 1991, 1991, 1991, 1991, 1991, 2078, 2079, 2080, 2081,
     2082, 2083, 2054, 2084, 2085, 2086, 2087, 2088, 2089,  347,
     2091, 2055, 1993, 2092, 2093, 2094, 2096, 2090,  347,  347,
      347, 1825, 1825, 1825, 1825, 1825, 2095, 2097, 2098,  347,

     2099,  347,  347,  347, 2101, 2100,  347,  347, 2103, 2028,
     2102,  347,  347,  347,  347, 2104, 1994,  347,  347, 2106,
     2107, 2108,  347, 2109, 2110, 2111, 2112, 1994, 2105, 2105,
     2105, 2105, 2105, 2113, 2114, 2114, 2114, 2114, 2114, 2115,
     2116, 2117,  446,  446,  446,  446, 2122, 2122, 2122, 2122,
     2122,  484, 2124, 2125, 2126, 2127, 2128, 1828, 2129, 2130,
     2131, 2132, 2132, 2132, 2132, 2132, 2120, 2118, 2133, 2133,
     2133, 2133, 2133, 2134, 2135, 2136, 2119, 2137, 2121, 2138,
     2139, 2140, 2141, 2143, 2123, 2142, 2142, 2142, 2142, 2142,
     2144, 2145, 2147, 2148, 2149,  347, 1991, 1991, 1991, 1991,

     1991, 2150, 2151, 2152, 2153, 2154,  347, 2155, 2156, 2157,
     2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2168,  347,
     2166, 2166, 2166, 2166, 2166,  347, 2170, 2169,  347,  347,
      347, 2171, 2167,  347, 2175,  347,  347, 2172, 2176,  347,
      347,  348, 2178, 2179, 2173, 2174,  347, 2180,  347, 2105,
     2105, 2105, 2105, 2105, 2181, 2182, 2183, 2184, 2186,  347,
     2187, 2188, 1994, 2114, 2114, 2114, 2114, 2114, 2189, 2189,
     2189, 2189, 2189,  446,  446, 2196,  446,  484, 2197, 2198,
     2190, 2122, 2122, 2122, 2122, 2122, 2199, 2200, 2201,  446,
     2202, 2203, 2132, 2132, 2132, 2132, 2132, 2133, 2133, 2133,

     2133, 2133, 2206, 2207, 2208, 2209, 2210, 2211, 2177, 2212,
     2214, 2191, 2215, 2217, 2192, 2193, 2195, 2142, 2142, 2142,
     2142, 2142, 2218,  347, 2194, 2216, 2185, 1991, 1991, 1991,
     1991, 1991, 2219, 2220,  347, 2204, 2221, 2222, 2223, 2224,
     2225, 2226, 2227, 2228, 2229, 2230,  347, 2232, 2233, 2235,
     2028, 2242, 2234,  347, 2236, 2231, 2205,  347, 2166, 2166,
     2166, 2166, 2166,  347,  347,  347,  347, 2243,  347, 2244,
     2167, 2239, 2239, 2239, 2239, 2239, 2237,  347, 2238,  347,
     2213, 2245, 2246, 2240, 2241, 2241, 2241, 2241, 2241, 2247,
     2248, 2249,  348, 1994, 2250, 2189, 2189, 2189, 2189, 2189,

      446,  446, 2253, 2253, 2253, 2253, 2253, 2190, 2255, 2256,
     2256, 2256, 2256, 2256, 2254, 2258, 2259, 2260, 2261, 2262,
     2263, 2257, 2264,  446, 2265, 2266, 2267, 2268, 2269, 2270,
      484, 2271, 2272, 2273, 2274, 2275,  347, 2276, 2277, 2251,
     2252, 2278, 2279, 2279, 2279, 2279, 2279,  347, 2280, 2281,
     2282, 2283, 2284, 2285, 2286,  347, 2288, 2289, 2290,  347,
      347, 2292, 2297, 2291,  347, 2287,  347, 2298, 2293,  347,
      347,  347, 2295, 2299, 2300,  347,  347, 2294, 2301, 2302,
      347, 2239, 2239, 2239, 2239, 2239,  446,  347, 2241, 2241,
     2241, 2241, 2241, 2240,  446, 2305, 2296, 2253, 2253, 2253,

     2253, 2253, 2256, 2256, 2256, 2256, 2256, 2306, 2307, 2254,
     2308, 2309, 2310, 2311, 2257, 2312, 2313, 2314, 2315, 2304,
     2316, 2317, 2318, 2303, 2279, 2279, 2279, 2279, 2279, 2323,
     2324, 2325, 2325, 2325, 2325, 2325, 2326, 2326, 2326, 2326,
     2326, 2327,  347, 2329, 2328, 2330, 2331,  347,  347, 2332,
      347,  347,  347,  347, 2336, 2337, 2338, 2339,  347,  347,
     2340, 2333,  347, 2334, 2334, 2334, 2334, 2334, 2319,  446,
     2320, 2321, 2344, 2345, 2346, 2335, 2347, 2348, 2349, 2322,
     2350, 2352, 2353,  651,  348, 2342, 2342, 2342, 2342, 2342,
     2351, 2354, 2355, 2356, 2357, 2358, 2359, 2343, 2325, 2325,

     2325, 2325, 2325, 2364, 2365, 2363,  446, 2366,  347, 2341,
     2326, 2326, 2326, 2326, 2326,  347, 2368, 2367, 2361,  347,
     2362, 2370,  347, 2371, 2373,  446,  347, 2334, 2334, 2334,
     2334, 2334, 2374,  347, 2376, 2377,  347, 2378, 2379, 2335,
     2369, 2369, 2369, 2369, 2369, 2360,  347,  347, 2372, 2342,
     2342, 2342, 2342, 2342, 2380, 2381, 2382,  347, 2383, 2384,
     2385, 2343, 2375, 2375, 2375, 2375, 2375, 2386,  347, 2388,
     2389, 2390, 2387,  651,  651,  347,  446, 2396, 2397,  347,
     2391, 2392, 2399, 2400, 2401, 2393,  347, 2369, 2369, 2369,
     2369, 2369, 2375, 2375, 2375, 2375, 2375, 2402,  347, 2403,

     2404, 2405, 2406, 2407,  651,  347, 2411, 2408, 2412,  347,
     2413, 2410,  446, 2415, 2409, 2395,  347, 2416, 2417,  347,
     2418, 2419, 2420, 2421, 2422, 2423, 2424, 2426, 2427,  347,
     2428, 2430,  347, 2425, 2432,  446,  347, 2431, 2434, 2429,
      347, 2414, 2435,  347, 2436, 2437, 2438,  347, 2439, 2440,
     2394, 2441, 2442, 2444,  347, 2398, 2446, 2448, 2450,  446,
      347, 2443,  347, 2452, 2449,  347, 2453,  347, 2445, 2433,
     2447,  347, 2454,  347, 2455, 2456, 2457, 2458, 2459, 2460,
     2461, 2465,  347,  347, 2462, 2468, 2469, 2470, 2458, 2445,
     2471, 2472, 2451,  347,  347,  347, 2463, 2463, 2463, 2463,

     2463, 2466, 2466, 2466, 2466, 2466, 2473, 2474, 2464, 2475,
     2476, 2458,  347, 2467,  645,  645, 1516,  348,  735,  735,
      738,  738,  446,  347, 2463, 2463, 2463, 2463, 2463, 2466,
     2466, 2466, 2466, 2466,  347, 1515, 2464,  768,  768,  838,
      838, 2467,  839,  839, 2445,  347,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  312,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  347,  347,  847,  847,
     1513,  652,  347, 1512,  347,  347, 1508,  347,  347,  652,
      652,  347,  347,  399, 1507,  399,  399,  848,  848,  399,
      399,  399,  399,  399,  399,  399, 1506,  399,  399,  399,

      409, 1505,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  415, 1504,
      415,  415, 1503,  415,  415,  415,  415,  415,  415,  415,
      415, 1502,  415,  415,  415,  428,  428, 1501,  428,  428,
      849,  849,  428,  428,  430, 1500,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430, 1499,  430,  430,  430,
      430,  430,  432, 1498,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      445,  445,  931,  445,  445, 1497,  931,  445,  445,  483,
      483,  939,  483,  483, 1496,  939,  483,  483,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  493,  493,
     1054,  493, 1924, 1924, 1054,  493,  493,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  500,  500, 1495,
      500, 2073, 2073, 1494,  500,  500,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  587,  587, 1493,  587,
      587, 1492, 1491,  587,  587,  590,  590, 1490,  590,  590,
     1489, 1488,  590,  590,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  597,  597, 1487,  597, 1486, 1485, 1484,  597,
      597,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  601, 1483,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  603,
     1482,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  605,  446,  605,
      446, 1466,  605,  605,  605,  605,  605,  605,  605,  605,
     1464,  605,  605,  605,  617,  617, 1463,  617,  617, 1462,
     1459,  617,  617,  621,  621, 1458,  621,  621, 1457, 1440,

      621,  621,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  629,  629, 1437,  629,  629, 1427, 1426,  629,
      629,  635, 1425,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  637,
     1424,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  347,  347, 1416,
     1415, 1413, 1412,  347, 1411,  347,  347, 1410,  347,  347,
     1408, 1407,  347,  347,  399, 1406,  399,  399, 1405,  607,
      399,  399,  399,  399,  399,  399,  399, 1404,  399,  399,

      399,  409, 1399,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  415,
     1398,  415,  415, 1396,  415,  415,  415,  415,  415,  415,
      415,  415, 1394,  415,  415,  415,  428,  428, 1393,  428,
      428, 1392, 1391,  428,  428,  430, 1390,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430, 1389,  430,  430,
      430,  430,  430,  736, 1388,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736, 1387,  736,  736,  736,  736,
      736,  445,  445, 1385,  445,  445, 1384, 1383,  445,  445,
      483,  483, 1382,  483,  483, 1381, 1380,  483,  483,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  493,
      493, 1378,  493, 1377, 1376, 1375,  493,  493,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  500,  500,
     1373,  500, 1372, 1371, 1370,  500,  500,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  587,  587, 1366,
      587,  587, 1365, 1364,  587,  587,  590,  590, 1363,  590,
      590, 1362, 1361,  590,  590,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  597,  597, 1360,  597, 1359, 1358, 1357,
      597,  597,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  601, 1353,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      603, 1352,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603, 1351,  603,  603,  603,  605, 1350,
      605, 1349, 1348,  605,  605,  605,  605,  605,  605,  605,
      605, 1347,  605,  605,  605,  617,  617, 1346,  617,  617,
     1345, 1344,  617,  617,  621,  621, 1343,  621,  621, 1342,

     1341,  621,  621,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  629,  629, 1340,  629,  629,  446,  446,
      629,  629,  635, 1146,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      637, 1147,  637,  637,  637,  637,  637,  637, 1144,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  852, 1145,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  852,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  856,  856, 1316,  856,
      416, 1315, 1314,  856,  856,  859,  859,  400, 1287, 1270,
     1269,  859, 1257,  859,  859, 1256,  859, 1255, 1254, 1072,
      859,  859,  347,  347, 1073, 1070, 1071, 1253,  347, 1251,
      347,  347, 1250,  347,  347, 1249, 1248,  347,  347,  409,
     1247,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  946,  946,  844,
      946,  844,  844, 1053,  946,  946,  736, 1246,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736, 1245,  736,
      736,  736,  736,  736,  947,  947, 1242,  947, 1241, 1240,
     1239,  947,  947,  445,  445, 1238,  445,  445, 1237, 1236,
      445,  445,  976,  976, 1235,  976, 1234, 1233, 1232,  976,
      976,  483,  483, 1231,  483,  483, 1230, 1229,  483,  483,
     1051, 1051, 1228, 1051, 1227, 1226, 1225, 1051, 1051, 1052,
     1052, 1224, 1052, 1223, 1222, 1221, 1052, 1052, 1059, 1059,
     1220, 1059, 1219, 1215, 1214, 1059, 1059, 1060, 1060, 1213,

     1060, 1212, 1210, 1209, 1060, 1060, 1061, 1061, 1208, 1061,
     1207, 1206, 1205, 1061, 1061, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146,  652, 1204, 1203, 1202, 1201,

      652, 1200, 1199,  652,  652, 1705, 1705, 1198, 1197, 1196,
     1195, 1705, 1191, 1190, 1189, 1188, 1187, 1186, 1183, 1182,
     1705, 1705, 1705, 1826, 1826, 1181, 1180, 1179, 1178, 1177,
      446, 1826, 1826,  446, 1826, 1826,  446,  446, 1826, 1826,
     1826, 1901, 1901, 1147, 1145, 1143,  730, 1901,  730,  730,
      938, 1142, 1141, 1140,  720,  720, 1901, 1901, 1901, 1992,
     1992,  720,  930, 1139, 1109, 1090, 1089, 1992, 1992, 1088,
     1992, 1992, 1077, 1076, 1992, 1992, 1992, 2016, 2016, 1075,
     1074, 1073, 1071, 1065, 1064, 2016, 2016,  636, 2016, 1063,
     1062, 1058, 2016, 2016, 2016, 2146, 2146, 1057, 1056, 1055,

      844, 1050, 1049, 2146, 2146, 1048, 2146, 1047, 1046, 1045,
     2146, 2146, 2146, 1044, 1043, 1042, 1041, 1040, 1039, 1038,
     1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028,
     1027, 1026, 1025, 1024, 1023, 1021, 1020, 1017, 1016, 1015,
     1014, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1002, 1001,
     1000,  999,  998,  997,  996,  993,  988,  985,  984,  981,
      980,  979,  446,  446,  446,  945,  944,  943,  942,  941,
      940,  730,  937,  936,  935,  934,  933,  932,  720,  858,
      857,  648,  648,  855,  854,  641,  642,  639,  640,  853,
      636,  636,  851,  850,  630,  625,  626,  623,  624,  622,

      618,  846,  845,  844,  844,  602,  602,  602, 2477, 2477,
      591,  588,  837,  834,  833,  832,  831,  830,  829,  828,
      827,  824,  823,  818,  817,  816,  815,  814,  813,  812,
      811,  804,  803,  802,  801,  800,  796,  795,  794,  785,
      784,  783,  781,  778,  777,  776,  520,  521,  517,  518,
      775,  774,  773,  772,  771,  505,  506,  503,  504,  497,
      498,  495,  496,  490,  491,  488,  489,  484,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  737,  429,
      732,  731,  730,  730,  725,  724,  723,  722,  721,  720,
      720,  651,  646,  330,  331,  327,  328,  643,  642,  640,

      638,  636,  634,  633,  632,  630,  628,  626,  624,  622,
      620,  618,  616,  614,  613,  606,  602,  600, 2477,  591,
      588,  585,  580,  569,  561,  537,  527,  522,  521,  519,
      518,  516,  514,  512,  509,  508,  507,  506,  504,  501,
      499,  498,  496,  492,  491,  489,  484,  482,  446,  440,
      435,  433,  431,  429,  426,  425,  414,  413,  412,  410,
      408,  407,  406,  398,  335,  331,  329,  328, 2477,   59,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477
    } ;

static yyconst flex_int16_t yy_chk[7642] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,  166,    5,    3,    4,    5,    6,    4,    9,
        6,   77,    3,    3,   70,    9,    4,    4,   10,    7,
        7,    7,    7,    7,   10,    3,   77,  166,   70,    4,

       15,    7,    7,   15,   76,    7,   76,    8,    8,    8,
        8,    8,   49,   15,    5,    7,   50,   49,    6,    8,
        8,   50,   15,    8,   16,  144,  171,   16,   61,   61,
       61,   61,   61,    8,  150,  150,  180,   16,    3,  144,
        3,    3,    4,    5,    4,    4,   16,    6,   35,   35,
       35,   35,   35,   35,  171,    7,   35,   27,   27,   27,
       27,   27,  259,   55,  259,   41,   55,  180,   41,   27,
       15,   27,   27,    8,   11,   11,   11,   11,   11,   11,
      558,   55,  558,   27,  716,   11,  716,   28,   28,   28,
       28,   28,   41,   42,   16,   80,   42,  162,   11,   28,

      159,   28,   28,   36,   36,   36,   36,   36,   36,  152,
      152,   36,   43,   28,   56,   43,   80,   56,   35,   43,
       42,   57,  158,   43,   58,  159,   57,   44,  249,   58,
       44,  162,   56,   55,   44,   41,   43,   57,   44,  159,
       58,   11,  249,   11,   11,   12,   12,   12,   12,   12,
       12,   44,   78,  158,   78,   88,   12,  169,  158,  170,
       88,   57,   88,   42,   58,  158,   78,   88,   88,   12,
       88,  164,   88,   36,   62,   62,   62,   62,   62,   43,
       78,   43,   43,  472,   56,   63,   63,   63,   63,   63,
      169,  237,  237,  170,   44,  234,   44,   44,   64,   64,

       64,   64,   64,   71,   71,   71,   71,   71,  164, 1308,
      234,  472,   12, 1308,   12,   12,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   25,   25,   25,   25,   25,  569,   25,  239,  239,
     1377,  155,   25,   25,  569,  181,  462,   25,  128,   53,
       53,   53,   53,   53,   54,   54,   54,   54,   54,   85,

       85,   53,  128,  167,  165,   85,   54,   85,  181,  128,
       92,  462,   85,   85,  155,   92,   25,   92,   92,  155,
      155,   25,   92,   92,  167,   25,  167,   25,   26,   26,
       26,   26,   26,  100,   26,  100,  157,  100, 1378,   26,
       26,  165,  167,  253,   26,   53,  100,   99,   53,   99,
       54,   99,  253,   54,   82,   82,   82,   82,   82,   99,
       99,   99,  343,   87,   87,  157,   82,   87,  211,   87,
      157,   87,   87,   26, 1379,   82,   87,   87,   26,  285,
      285,  211,   26,  343,   26,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,  459,   39,   39,   39,   39,   39,   39,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
      459,   40,   40,   40,   40,   40,   40,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       83,   83,   83,   83,   83,  156,   86,  163,  583,  277,
     1380,   86,   83,   86,  583,  245,   86,  254,   86,   86,
      277,   83,   89,   86,   86,   89,  156,   89,  245,   89,
       89,  254,  163,   89,   89,   89,  102,  400,  102,  156,
      102,  163,   83,   84,   84,   84,   84,   84,  447,  102,
      450,  102,  353,   90,  250,   84, 1382,   91,   90,   90,

       90,   91,   91,  250,   84,   90,   90,   91,  250,   91,
       91,   93,  447,  353,   91,   91,   93,   94,   93,   93,
       94,  400,  967,   93,   93,   94,  452,   94,  450,   95,
       84,   94,   94,   94,   95,   84,   95,   84,  362,   95,
      362,   95,   84,   84,  161,   95,   95,   95,   96,   96,
      416,  470,  108,   97,   96,   97,   96,   97,   97,  362,
      967,   96,   96,   97,  168,   97,   97,  452, 1384,  161,
       97,   97,   98,  101,   98,  101,   98,  101,  127,  401,
       98,  101,  401,  161,  255,   98,  101,  108,   98,  168,
      470,  255,  168,  108,  416,   98,  465,  108,  168,  108,

      255,  168,  108,  115,  115,  115,  115,  115,  116,  116,
      116,  116,  116,  127,  132,  132,  132,  132,  132,  127,
      465,  486,  342,  127,  342,  127,  160,  342,  127,  133,
      133,  133,  133,  133,  140,  140,  140,  140,  140,  141,
      141,  141,  141,  141,  145,  145,  145,  145,  145,  486,
      160,  174,  174,  174,  174,  174, 1387,  417,  557,  160,
      417,  555,  555,  557,  160,  160,  175,  175,  175,  175,
      175,  184,  184,  184,  184,  184,  185,  185,  185,  185,
      185,  192,  192,  192,  192,  192,  145,  193,  193,  193,
      193,  193,  203,  203,  203,  203,  203,  204,  204,  204,

      204,  204,  214,  214,  214,  214,  214,  215,  215,  215,
      215,  215,  221,  221,  221,  221,  221,  222,  222,  222,
      222,  222,  229,  229,  229,  229,  229,  243, 1389,  246,
      471,  451,  243,  246,  243,  356,  460,  377,  246,  243,
      243,  247,  247,  247,  248,  355,  247,  251,  355,  248,
      356,  251,  248,  247,  248,  257,  356,  257,  377,  257,
      251,  258,  258,  451,  229,  251,  355,  258,  261,  471,
      258,  261,  261,  257,  460,  460, 1390,  261,  266,  266,
      266,  266,  266,  267,  267,  267,  267,  267,  270,  270,
      270,  270,  270,  271,  271,  271,  271,  271,  274,  274,

      274,  274,  274,  275,  275,  275,  275,  275,  278,  278,
      278,  278,  278,  281,  281,  281,  281,  281,  288,  292,
      292,  292,  292,  292,  293,  293,  293,  293,  293,  297,
      297,  297,  297,  297,  298,  298,  298,  298,  298,  308,
      308,  308,  308,  308,  309,  309,  309,  309,  309,  540,
      573,  691,  540,  288,  313,  313,  313,  313,  313,  288,
      474, 1392,  691,  288,  540,  288,  573,  750,  288,  314,
      314,  314,  314,  314,  324,  324,  324,  324,  324,  325,
      325,  325,  325,  325,  326,  326,  326,  326,  326,  334,
      334,  334,  334,  334,  337,  341,  453,  341,  345,  345,

      345,  345,  345,  474,  469,  475,  337,  710,  750,  341,
      345,  357,  347,  347,  347,  347,  347,  357,  710,  453,
      337,  478,  477,  341,  347,  349,  349,  349,  349,  349,
      475,  334,  357,  347,  467,  784,  358,  349,  469,  350,
      350,  350,  350,  350, 1393,  358,  349,  477,  468,  784,
      478,  350,  351,  351,  351,  351,  351,  358,  467,  349,
      350,  365,  422,  365,  351,  352,  352,  352,  352,  352,
      359,  363,  468,  351,  364,  366,  364,  352,  354,  354,
      354,  354,  354,  422,  365,  359,  352,  363,  360,  366,
      360,  359,  363,  360,  570,  364,  366,  870, 1396,  350,

      534,  570,  375,  375,  351,  360,  368,  370,  870,  352,
      367,  360,  361,  361,  361,  361,  361,  368,  367,  370,
      534,  371,  354,  375,  367,  376,  376,  368,  370,  373,
      352,  367,  369,  369,  369,  369,  369,  371,  354,  372,
      374,  376,  371,  354,  369,  373,  376,  373,  379,  372,
      373,  378,  378,  369,  372,  383,  361,  380,  382,  374,
      372,  374,  379,  381,  383,  381,  382, 1401, 1402,  379,
      384,  380,  378,  386,  381,  384,  383,  361,  380,  382,
      385,  384,  386,  387,  381,  389,  388,  389,  385,  391,
      385,  384,  456,  390,  386,  388,  394,  392,  393,  396,

      391,  385,  394,  387,  387,  390,  393,  388,  389,  392,
      391,  395,  397,  396,  390,  456, 1403,  394,  392,  393,
      396,  395,  411,  411,  411,  411,  411,  395,  479,  397,
      454,  456,  395,  397,  427,  427,  427,  427,  427,  434,
      434,  434,  434,  434,  438,  438,  438,  438,  438,  449,
      449,  449,  449,  449,  473,  454,  480,  479,  481,  481,
      481,  481,  481,  485,  547, 1333,  547,  541,  454, 1333,
      449,  608,  541, 1404,  608,  473,  487,  487,  487,  487,
      487,  480,  547,  726,  541,  726,  438,  541,  485,  494,
      494,  494,  494,  494,  502,  502,  502,  502,  502,  513,

      513,  513,  513,  513,  515,  515,  515,  515,  515,  449,
      523,  523,  523,  523,  523,  536,  536,  536,  536,  536,
      542,  542,  542,  542,  542,  586,  586,  586,  586,  586,
      589,  589,  589,  589,  589,  592,  592,  592,  592,  592,
      593,  593,  593,  593,  593,  596,  596,  596,  596,  596,
      607, 1157,  523,  598,  598,  598,  598,  598,  615,  615,
      615,  615,  615,  619,  619,  619,  619,  619,  627,  627,
      627,  627,  627,  631,  631,  631,  631,  631,  646,  652,
      652,  652,  652,  652,  653,  653,  653,  653,  653, 1157,
      646,  652,  690,  745,  607,  742,  653,  654,  654,  654,

      654,  654,  689,  747,  646,  653,  689,  806,  765,  654,
      655,  655,  655,  655,  655,  695,  806,  689,  654,  690,
      742,  695,  655,  656,  656,  656,  656,  656,  747,  743,
      690,  655,  695,  745,  742,  656,  657,  657,  657,  657,
      657,  692,  765,  654,  656,  692,  741,  700,  657,  759,
      669,  669,  669,  669,  669,  700,  692,  657,  700, 1405,
      694,  743,  669,  659,  659,  659,  659,  659,  694,  656,
      658,  658,  658,  658,  658,  659,  658, 1406,  759,  694,
      746,  658,  658,  741,  659,  660,  660,  660,  660,  660,
      661,  661,  661,  661,  661,  669,  751,  660,  696,  693,

      669,  697,  661,  693,  696, 1407,  660,  693,  669,  697,
      698,  661,  746,  699,  698,  696,  658,  699,  693, 1408,
      697,  659,  658,  658,  701,  698,  761,  701,  699,  658,
      662,  662,  662,  662,  662,  751,  661,  703,  701,  702,
      660,  703,  662,  663,  663,  663,  663,  663,  761,  702,
      702,  662,  703,  764,  748,  663,  664,  664,  664,  664,
      664,  753, 1410,  705,  663,  704,  757,  705,  664,  665,
      665,  665,  665,  665,  764,  704,  704,  664,  705,  748,
      708,  665,  662,  666,  666,  666,  666,  666,  708,  757,
      665,  708,  711,  753,  711,  666,  663,  667,  667,  667,

      667,  667,  707,  706,  666,  711,  707,  706,  664,  667,
      769,  709,  762,  665,  706,  709,  758,  707,  667,  668,
      668,  668,  668,  668,  715,  712,  709,  666,  715, 1411,
      712,  668,  749,  670,  670,  670,  670,  670,  969,  715,
      668,  712,  769,  752,  667,  670,  671,  671,  671,  671,
      671,  762,  713,  713,  670,  767,  758,  749,  671,  672,
      672,  672,  672,  672,  713,  714,  755,  671,  752,  969,
      714,  672,  673,  673,  673,  673,  673,  763, 1413,  668,
      672,  714,  756,  760,  673,  674,  674,  674,  674,  674,
      774,  755,  767,  673,  670,  766,  774,  674,  770,  671,

      675,  675,  675,  675,  675, 1148,  674,  756,  760,  672,
      763,  960,  675,  676,  676,  676,  676,  676,  840,  766,
      840,  675,  862,  770, 1415,  676,  950, 1148,  957,  674,
      673,  862,  960,  862,  676,  677,  677,  677,  677,  677,
      678,  678,  678,  678,  678,  874,  860,  677,  873,  874,
      972,  891,  678,  873,  860,  950,  677,  860, 1416,  675,
      874,  678,  891,  957,  873,  676,  679,  679,  679,  679,
      679,  681,  681,  681,  681,  681,  876,  953,  679,  883,
      876, 1165,  883,  681,  682,  682,  682,  682,  682,  972,
      883,  876,  681,  678, 1424,  871,  682,  683,  683,  683,

      683,  683,  953,  871, 1425,  682,  871, 1165,  875,  683,
      684,  684,  684,  684,  684,  878,  875,  877,  683,  878,
     1150,  879,  684,  954,  968,  877,  681,  875,  877,  879,
      878,  684,  685,  685,  685,  685,  685,  884, 1426,  682,
      879,  884, 1150,  885,  685,  683,  686,  686,  686,  686,
      686,  885,  884,  685,  885,  954,  968,  955,  686,  687,
      687,  687,  687,  687, 1154,  958,  886,  686,  887, 1166,
      684,  687,  688,  688,  688,  688,  688,  886,  887,  887,
      687,  886,  955,  893,  688,  740,  740,  740,  740,  740,
     1166,  740,  686,  688,  893, 1427,  740,  778,  778,  778,

      778,  778,  958, 1154, 1433,  687,  780,  780,  780,  780,
      780,  782,  782,  782,  782,  782,  793,  793,  793,  793,
      793,  978,  688,  801,  801,  801,  801,  801,  809,  809,
      809,  809,  809,  688,  859,  859,  859,  859,  859,  861,
      861,  861,  861,  861,  888,  889,  859,  894,  961, 1437,
      889,  861, 1440,  978,  888,  888,  889,  782,  894,  899,
      892,  793,  899,  782,  782, 1090,  793, 1090,  892, 1454,
      782,  892, 1176,  899,  793,  863,  863,  863,  863,  863,
      872,  872,  872,  872,  872,  961,  898,  863,  890,  890,
      890,  890,  890, 1176,  898, 1455,  890,  898,  965, 1204,

      890, 1204,  861,  895,  895,  895,  895,  895,  896,  896,
      896,  896,  896,  897,  903,  897,  896,  900,  904,  900,
      896, 1456,  903,  965,  897,  903,  904, 1458,  900,  904,
      872,  901,  901,  901,  901,  901,  906,  905,  863,  905,
      906,  872,  908,  901,  909,  907,  908,  906,  909,  911,
      905,  910,  901,  895,  907,  912,  907,  908,  912,  909,
      911,  910,  910,  913,  895,  914,  912,  913,  915, 1319,
      918,  919,  915,  916,  916,  916,  916,  916,  913,  918,
      919,  918,  919,  915,  920,  917,  917,  917,  917,  917,
      922,  921, 1459,  920,  914,  920,  921,  917,  922,  923,

     1319,  922,  925,  925,  923,  914,  917,  921, 1463,  924,
     1464,  926,  964,  924,  925,  923,  926,  927,  927,  927,
      927,  927,  926,  916,  924,  929,  928,  952,  952,  952,
      952,  952,  973,  929,  916,  928,  929,  928,  962,  962,
      962,  962,  962,  963,  963,  963,  963,  963,  952,  964,
      962,  917,  966, 1317, 1163,  963, 1120, 1066, 1474,  962,
     1068,  975,  977, 1120,  963,  973, 1479,  927, 1066,  952,
     1068, 1068,  927,  970,  970,  970,  970,  970,  927,  974,
      974,  974,  974,  974, 1330,  970,  975,  977, 1484,  966,
     1151,  974, 1163, 1317,  970,  986,  986,  986,  986,  986,

      974,  987,  987,  987,  987,  987,  994,  994,  994,  994,
      994,  995,  995,  995,  995,  995, 1013, 1013, 1013, 1013,
     1013, 1081, 1330, 1151, 1013, 1021, 1021, 1021, 1021, 1021,
     1022, 1022, 1022, 1022, 1022, 1485, 1085, 1078, 1022, 1049,
     1049, 1049, 1049, 1049, 1078, 1079, 1083, 1085, 1082, 1079,
     1081, 1486, 1082,  995, 1083, 1078, 1262, 1083,  986, 1082,
     1079, 1081, 1097, 1262,  987, 1080, 1080, 1080, 1080, 1080,
     1084, 1086, 1087, 1097, 1084, 1097, 1087, 1080, 1325, 1086,
     1091, 1084, 1086, 1087, 1091, 1112, 1092, 1093, 1117, 1022,
     1092, 1093, 1471, 1112, 1049, 1091, 1112, 1092, 1095, 1117,

     1095, 1325, 1093, 1094, 1094, 1094, 1094, 1094, 1099, 1095,
     1096, 1096, 1096, 1096, 1096, 1080, 1153, 1100, 1099, 1099,
     1152, 1324, 1103, 1471, 1080, 1100, 1101, 1101, 1101, 1101,
     1101, 1103, 1105, 1103, 1104, 1106, 1100, 1110, 1101, 1106,
     1104, 1119, 1324, 1105, 1487, 1152, 1110, 1105, 1110, 1153,
     1106, 1104, 1119, 1094, 1107, 1107, 1107, 1107, 1107, 1111,
     1096, 1332, 1113, 1111, 1094, 1114, 1107, 1126, 1116, 1114,
     1115, 1096, 1113, 1113, 1111, 1115, 1101, 1116, 1126, 1116,
     1114, 1118, 1155, 1121, 1156, 1443, 1115, 1121, 1127, 1118,
     1332, 1127, 1443, 1128, 1121, 1122, 1122, 1122, 1122, 1122,

     1118, 1129, 1127, 1122, 1128, 1129, 1128, 1122, 1123, 1123,
     1123, 1123, 1123, 1130, 1131, 1155, 1129, 1156, 1133, 1130,
     1123, 1134, 1131, 1132, 1132, 1132, 1132, 1132, 1133, 1133,
     1130, 1136, 1134, 1131, 1134, 1135, 1135, 1135, 1135, 1135,
     1137, 1138, 1136, 1164, 1175, 1339, 1457, 1135, 1488, 1339,
     1321, 1137, 1138, 1167, 1489, 1457, 1138, 1149, 1149, 1149,
     1149, 1149, 1475, 1158, 1158, 1158, 1158, 1158, 1159, 1159,
     1159, 1159, 1159, 1132, 1123, 1158, 1164, 1175, 1167, 1258,
     1135, 1159, 1259, 1321, 1132, 1160, 1160, 1160, 1160, 1160,
     1258, 1475, 1400, 1259, 1135, 1135, 1400, 1160, 1135, 1149,

     1162, 1162, 1162, 1162, 1162, 1168, 1168, 1168, 1168, 1168,
     1170, 1170, 1170, 1170, 1170, 1264, 1273, 1168, 1263, 1264,
     1273, 1162, 1172, 1172, 1172, 1172, 1172, 1273, 1263, 1263,
     1264, 1170, 1490, 1491, 1172, 1173, 1173, 1173, 1173, 1173,
     1192, 1192, 1192, 1192, 1192, 1493, 1494, 1495, 1173, 1193,
     1193, 1193, 1193, 1193, 1205, 1205, 1205, 1205, 1205, 1210,
     1210, 1210, 1210, 1210, 1216, 1216, 1216, 1216, 1216, 1224,
     1224, 1224, 1224, 1224, 1236, 1236, 1236, 1236, 1236, 1239,
     1239, 1239, 1239, 1239, 1243, 1243, 1243, 1243, 1243, 1252,
     1192, 1193, 1265, 1266, 1252, 1268, 1274, 1265, 1267, 1192,

     1252, 1268, 1267, 1266, 1266, 1291, 1274, 1274, 1265, 1497,
     1498, 1501, 1268, 1267, 1216, 1275, 1275, 1275, 1275, 1275,
     1276, 1276, 1276, 1276, 1276, 1277, 1279, 1283, 1276, 1243,
     1285, 1288, 1276, 1281, 1291, 1281, 1277, 1279, 1283, 1502,
     1277, 1285, 1288, 1243, 1243, 1291, 1281, 1243, 1278, 1278,
     1278, 1278, 1278, 1280, 1280, 1280, 1280, 1280, 1284, 1289,
     1278, 1296, 1292, 1293, 1289, 1275, 1284, 1286, 1286, 1286,
     1286, 1286, 1290, 1292, 1293, 1289, 1275, 1284, 1294, 1295,
     1290, 1300, 1298, 1503, 1295, 1301, 1300, 1294, 1298, 1294,
     1295, 1290, 1300, 1302, 1296, 1306, 1301, 1504, 1278, 1298,

     1303, 1302, 1304, 1280, 1302, 1296, 1306, 1307, 1303, 1320,
     1322, 1505, 1304, 1304, 1280, 1312, 1326, 1286, 1307, 1303,
     1305, 1305, 1305, 1305, 1305, 1312, 1312, 1421, 1286, 1432,
     1506, 1507, 1305, 1313, 1313, 1313, 1313, 1313, 1421, 1338,
     1432, 1326, 1327, 1327, 1327, 1327, 1327, 1467, 1320, 1322,
     1329, 1329, 1329, 1329, 1329, 1327, 1334, 1334, 1334, 1334,
     1334, 1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336,
     1336, 1445, 1467, 1508, 1509, 1305, 1472, 1334, 1338, 1336,
     1414, 1409, 1445, 1313, 1369, 1369, 1369, 1369, 1369, 1409,
     1414, 1414, 1409, 1329, 1313, 1370, 1370, 1370, 1370, 1370,

     1510, 1472, 1513, 1335, 1374, 1374, 1374, 1374, 1374, 1386,
     1386, 1386, 1386, 1386, 1394, 1394, 1394, 1394, 1394, 1395,
     1395, 1395, 1395, 1395, 1397, 1397, 1397, 1397, 1397, 1514,
     1515, 1465, 1369, 1516, 1420, 1517, 1369, 1418, 1418, 1418,
     1418, 1418, 1420, 1419, 1419, 1419, 1419, 1419, 1473, 1418,
     1476, 1518, 1386, 1420, 1374, 1419, 1422, 1438, 1418, 1423,
     1422, 1395, 1428, 1423, 1419, 1434, 1438, 1422, 1438, 1434,
     1465, 1473, 1428, 1428, 1423, 1476, 1434, 1519, 1520, 1397,
     1521, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430,
     1430, 1522, 1523, 1429, 1524, 1436, 1525, 1526, 1430, 1436,

     1527, 1419, 1429, 1418, 1435, 1435, 1435, 1435, 1435, 1528,
     1436, 1439, 1439, 1439, 1439, 1439, 1435, 1441, 1441, 1441,
     1441, 1441, 1442, 1439, 1530, 1444, 1531, 1446, 1442, 1444,
     1430, 1446, 1532, 1442, 1449, 1447, 1444, 1448, 1446, 1447,
     1450, 1448, 1449, 1447, 1451, 1449, 1533, 1429, 1451, 1452,
     1450, 1450, 1448, 1534, 1447, 1469, 1481, 1435, 1452, 1451,
     1452, 1536, 1453, 1435, 1535, 1439, 1453, 1441, 1460, 1460,
     1460, 1460, 1460, 1535, 1477, 1537, 1539, 1453, 1441, 1540,
     1541, 1481, 1542, 1441, 1461, 1461, 1461, 1461, 1461, 1468,
     1468, 1468, 1468, 1468, 1469, 1477, 1461, 1548, 1549, 1477,

     1559, 1468, 1470, 1470, 1470, 1470, 1470, 1547, 1555, 1558,
     1468, 1547, 1555, 1560, 1470, 1561, 1562, 1567, 1460, 1555,
     1558, 1568, 1547, 1470, 1478, 1478, 1478, 1478, 1478, 1460,
     1480, 1480, 1480, 1480, 1480, 1482, 1482, 1482, 1482, 1482,
     1543, 1570, 1480, 1571, 1543, 1573, 1461, 1575, 1576, 1593,
     1594, 1480, 1499, 1499, 1499, 1499, 1499, 1511, 1511, 1511,
     1511, 1511, 1529, 1529, 1529, 1529, 1529, 1538, 1538, 1538,
     1538, 1538, 1572, 1543, 1550, 1550, 1550, 1550, 1550, 1478,
     1557, 1554, 1556, 1572, 1543, 1554, 1550, 1569, 1556, 1569,
     1557, 1557, 1595, 1596, 1597, 1598, 1554, 1600, 1601, 1556,

     1569, 1511, 1563, 1563, 1563, 1563, 1563, 1602, 1564, 1564,
     1564, 1564, 1564, 1610, 1574, 1579, 1579, 1529, 1574, 1563,
     1564, 1577, 1577, 1577, 1577, 1577, 1581, 1579, 1581, 1574,
     1603, 1607, 1615, 1577, 1614, 1607, 1612, 1618, 1583, 1581,
     1550, 1553, 1553, 1553, 1553, 1553, 1582, 1583, 1584, 1583,
     1582, 1586, 1563, 1553, 1585, 1603, 1585, 1582, 1584, 1584,
     1586, 1587, 1586, 1563, 1587, 1585, 1589, 1614, 1563, 1617,
     1615, 1589, 1587, 1588, 1564, 1612, 1590, 1624, 1625, 1588,
     1590, 1626, 1589, 1628, 1553, 1553, 1553, 1577, 1553, 1616,
     1588, 1590, 1630, 1622, 1633, 1553, 1553, 1634, 1636, 1553,

     1617, 1638, 1553, 1553, 1591, 1591, 1591, 1591, 1591, 1604,
     1604, 1604, 1604, 1604, 1605, 1605, 1605, 1605, 1605, 1608,
     1608, 1608, 1608, 1608, 1622, 1639, 1605, 1640, 1616, 1642,
     1604, 1608, 1611, 1611, 1611, 1611, 1611, 1620, 1620, 1620,
     1620, 1620, 1623, 1623, 1623, 1623, 1623, 1643, 1644, 1620,
     1645, 1646, 1647, 1611, 1591, 1635, 1635, 1635, 1635, 1635,
     1637, 1637, 1637, 1637, 1637, 1591, 1648, 1650, 1651, 1653,
     1591, 1599, 1599, 1599, 1599, 1599, 1652, 1652, 1652, 1652,
     1652, 1655, 1656, 1599, 1657, 1658, 1660, 1662, 1623, 1663,
     1664, 1665, 1667, 1669, 1670, 1671, 1672, 1673, 1674, 1675,

     1675, 1675, 1675, 1675, 1683, 1681, 1680, 1637, 1684, 1686,
     1687, 1680, 1681, 1685, 1689, 1599, 1599, 1680, 1688, 1688,
     1682, 1682, 1682, 1682, 1682, 1690, 1685, 1690, 1691, 1692,
     1599, 1599, 1682, 1693, 1599, 1694, 1701, 1706, 1695, 1707,
     1709, 1682, 1710, 1675, 1675, 1697, 1694, 1694, 1695, 1695,
     1696, 1696, 1696, 1696, 1696, 1713, 1697, 1703, 1675, 1675,
     1728, 1703, 1675, 1702, 1702, 1702, 1702, 1702, 1703, 1705,
     1705, 1705, 1705, 1705, 1708, 1702, 1712, 1715, 1708, 1716,
     1717, 1719, 1717, 1716, 1718, 1718, 1682, 1712, 1715, 1729,
     1705, 1719, 1719, 1717, 1721, 1720, 1718, 1725, 1730, 1720,

     1696, 1732, 1733, 1734, 1735, 1721, 1736, 1708, 1725, 1696,
     1720, 1696, 1716, 1722, 1722, 1722, 1722, 1722, 1708, 1723,
     1723, 1737, 1738, 1716, 1731, 1731, 1731, 1731, 1731, 1702,
     1739, 1723, 1744, 1746, 1747, 1705, 1724, 1724, 1724, 1724,
     1724, 1726, 1726, 1726, 1726, 1726, 1742, 1742, 1742, 1742,
     1742, 1748, 1749, 1726, 1751, 1750, 1752, 1753, 1742, 1755,
     1756, 1747, 1759, 1722, 1760, 1744, 1763, 1742, 1743, 1743,
     1743, 1743, 1743, 1764, 1722, 1745, 1745, 1745, 1745, 1745,
     1750, 1752, 1765, 1770, 1771, 1772, 1724, 1773, 1774, 1775,
     1783, 1749, 1786, 1726, 1788, 1789, 1790, 1724, 1792, 1793,

     1726, 1794, 1724, 1795, 1796, 1797, 1798, 1726, 1805, 1806,
     1743, 1761, 1761, 1761, 1761, 1761, 1776, 1776, 1776, 1776,
     1776, 1779, 1779, 1779, 1779, 1779, 1807, 1808, 1799, 1810,
     1745, 1791, 1791, 1791, 1791, 1791, 1799, 1811, 1803, 1799,
     1801, 1801, 1801, 1801, 1801, 1803, 1809, 1812, 1809, 1813,
     1814, 1815, 1801, 1761, 1816, 1817, 1818, 1819, 1820, 1829,
     1833, 1834, 1820, 1831, 1835, 1819, 1821, 1821, 1821, 1821,
     1821, 1776, 1831, 1846, 1831, 1848, 1819, 1836, 1821, 1822,
     1822, 1822, 1822, 1822, 1824, 1832, 1836, 1837, 1836, 1824,
     1838, 1820, 1832, 1839, 1837, 1824, 1825, 1825, 1825, 1825,

     1825, 1849, 1820, 1847, 1839, 1840, 1801, 1826, 1826, 1826,
     1826, 1826, 1847, 1840, 1850, 1841, 1840, 1852, 1841, 1853,
     1854, 1855, 1856, 1838, 1857, 1821, 1841, 1858, 1826, 1822,
     1859, 1856, 1862, 1864, 1838, 1842, 1842, 1842, 1842, 1842,
     1822, 1863, 1843, 1843, 1843, 1843, 1843, 1842, 1844, 1844,
     1844, 1844, 1844, 1866, 1843, 1851, 1851, 1851, 1851, 1851,
     1844, 1867, 1825, 1843, 1860, 1860, 1860, 1860, 1860, 1868,
     1865, 1869, 1870, 1826, 1865, 1863, 1860, 1872, 1873, 1842,
     1874, 1875, 1876, 1878, 1878, 1878, 1878, 1878, 1880, 1881,
     1866, 1882, 1885, 1867, 1886, 1886, 1886, 1886, 1886, 1887,

     1888, 1889, 1886, 1869, 1890, 1891, 1892, 1892, 1892, 1892,
     1892, 1893, 1894, 1895, 1844, 1896, 1897, 1898, 1851, 1899,
     1900, 1903, 1904, 1905, 1906, 1897, 1901, 1901, 1901, 1901,
     1901, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
     1916, 1917, 1921, 1918, 1919, 1918, 1925, 1901, 1928, 1919,
     1920, 1923, 1926, 1900, 1918, 1919, 1923, 1920, 1922, 1922,
     1922, 1922, 1922, 1926, 1900, 1929, 1930, 1923, 1931, 1892,
     1922, 1924, 1924, 1924, 1924, 1924, 1933, 1934, 1935, 1931,
     1936, 1937, 1940, 1934, 1936, 1941, 1942, 1933, 1934, 1935,
     1943, 1944, 1901, 1945, 1946, 1936, 1947, 1938, 1938, 1938,

     1938, 1938, 1948, 1949, 1950, 1951, 1952, 1953, 1922, 1938,
     1954, 1955, 1957, 1959, 1960, 1961, 1962, 1964, 1966, 1963,
     1967, 1969, 1970, 1970, 1970, 1970, 1970, 1971, 1973, 1976,
     1977, 1978, 1979, 1980, 1981, 1982, 1957, 1924, 1983, 1984,
     1961, 1985, 1959, 1960, 1963, 1986, 1987, 1988, 1989, 1990,
     1991, 1991, 1991, 1991, 1991, 1995, 1996, 1997, 1990, 1998,
     1990, 1992, 1992, 1992, 1992, 1992, 1999, 2000, 2001, 2002,
     2003, 2004, 1970, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
     2013, 1970, 1992, 2014, 2015, 2017, 2019, 2011, 2015, 2010,
     2011, 2016, 2016, 2016, 2016, 2016, 2018, 2020, 2021, 2015,

     2022, 2023, 2024, 2018, 2025, 2023, 2026, 2022, 2027, 2029,
     2026, 2025, 2023, 2024, 2018, 2030, 1991, 2026, 2022, 2032,
     2033, 2034, 2025, 2035, 2036, 2037, 2038, 1992, 2031, 2031,
     2031, 2031, 2031, 2039, 2040, 2040, 2040, 2040, 2040, 2041,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2048, 2048, 2048,
     2048, 2049, 2050, 2051, 2052, 2053, 2054, 2016, 2055, 2056,
     2057, 2059, 2059, 2059, 2059, 2059, 2046, 2044, 2060, 2060,
     2060, 2060, 2060, 2061, 2062, 2063, 2045, 2064, 2047, 2065,
     2066, 2067, 2068, 2070, 2049, 2069, 2069, 2069, 2069, 2069,
     2071, 2072, 2074, 2075, 2076, 2072, 2073, 2073, 2073, 2073,

     2073, 2077, 2078, 2079, 2080, 2081, 2072, 2082, 2083, 2084,
     2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2094, 2089,
     2093, 2093, 2093, 2093, 2093, 2095, 2098, 2095, 2100, 2099,
     2089, 2099, 2093, 2101, 2103, 2102, 2095, 2100, 2104, 2100,
     2099, 2093, 2106, 2108, 2101, 2102, 2102, 2109, 2090, 2105,
     2105, 2105, 2105, 2105, 2110, 2111, 2112, 2113, 2115, 2090,
     2116, 2117, 2073, 2114, 2114, 2114, 2114, 2114, 2118, 2118,
     2118, 2118, 2118, 2119, 2120, 2124, 2121, 2123, 2125, 2126,
     2118, 2122, 2122, 2122, 2122, 2122, 2127, 2128, 2129, 2118,
     2130, 2131, 2132, 2132, 2132, 2132, 2132, 2133, 2133, 2133,

     2133, 2133, 2134, 2136, 2137, 2138, 2139, 2140, 2105, 2141,
     2143, 2119, 2144, 2147, 2120, 2121, 2123, 2142, 2142, 2142,
     2142, 2142, 2149, 2145, 2122, 2145, 2114, 2146, 2146, 2146,
     2146, 2146, 2150, 2151, 2145, 2132, 2152, 2153, 2154, 2155,
     2156, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2170,
     2176, 2177, 2169, 2162, 2171, 2163, 2133, 2163, 2166, 2166,
     2166, 2166, 2166, 2169, 2162, 2171, 2172, 2178, 2173, 2179,
     2166, 2174, 2174, 2174, 2174, 2174, 2172, 2172, 2173, 2173,
     2142, 2182, 2183, 2174, 2175, 2175, 2175, 2175, 2175, 2184,
     2185, 2186, 2174, 2146, 2187, 2189, 2189, 2189, 2189, 2189,

     2191, 2192, 2193, 2193, 2193, 2193, 2193, 2189, 2194, 2195,
     2195, 2195, 2195, 2195, 2193, 2196, 2197, 2199, 2200, 2201,
     2204, 2195, 2205, 2193, 2206, 2207, 2210, 2211, 2212, 2213,
     2195, 2214, 2215, 2216, 2217, 2218, 2216, 2219, 2220, 2191,
     2192, 2221, 2222, 2222, 2222, 2222, 2222, 2216, 2223, 2224,
     2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234,
     2231, 2235, 2242, 2234, 2236, 2230, 2230, 2246, 2236, 2237,
     2234, 2231, 2238, 2247, 2248, 2236, 2238, 2237, 2249, 2250,
     2237, 2239, 2239, 2239, 2239, 2239, 2251, 2238, 2241, 2241,
     2241, 2241, 2241, 2239, 2252, 2259, 2241, 2253, 2253, 2253,

     2253, 2253, 2256, 2256, 2256, 2256, 2256, 2260, 2261, 2253,
     2262, 2264, 2268, 2269, 2256, 2270, 2271, 2272, 2273, 2252,
     2276, 2277, 2278, 2251, 2279, 2279, 2279, 2279, 2279, 2282,
     2284, 2285, 2285, 2285, 2285, 2285, 2286, 2286, 2286, 2286,
     2286, 2287, 2288, 2289, 2288, 2290, 2291, 2273, 2291, 2293,
     2294, 2293, 2287, 2288, 2297, 2298, 2300, 2301, 2273, 2291,
     2302, 2294, 2293, 2295, 2295, 2295, 2295, 2295, 2279, 2303,
     2279, 2279, 2307, 2308, 2309, 2295, 2310, 2312, 2313, 2279,
     2314, 2316, 2317, 2315, 2295, 2304, 2304, 2304, 2304, 2304,
     2315, 2318, 2319, 2320, 2321, 2322, 2324, 2304, 2325, 2325,

     2325, 2325, 2325, 2329, 2330, 2328, 2304, 2331, 2328, 2303,
     2326, 2326, 2326, 2326, 2326, 2327, 2333, 2332, 2326, 2328,
     2327, 2337, 2333, 2338, 2344, 2341, 2327, 2334, 2334, 2334,
     2334, 2334, 2345, 2333, 2347, 2348, 2331, 2352, 2353, 2334,
     2336, 2336, 2336, 2336, 2336, 2325, 2332, 2331, 2341, 2342,
     2342, 2342, 2342, 2342, 2354, 2355, 2356, 2332, 2357, 2358,
     2359, 2342, 2346, 2346, 2346, 2346, 2346, 2360, 2362, 2363,
     2364, 2365, 2362, 2366, 2367, 2368, 2372, 2373, 2374, 2362,
     2366, 2367, 2378, 2379, 2380, 2368, 2368, 2369, 2369, 2369,
     2369, 2369, 2375, 2375, 2375, 2375, 2375, 2381, 2363, 2382,

     2383, 2384, 2385, 2386, 2388, 2387, 2390, 2387, 2393, 2363,
     2394, 2388, 2395, 2396, 2387, 2372, 2387, 2397, 2398, 2393,
     2399, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409,
     2409, 2411, 2412, 2406, 2413, 2414, 2408, 2412, 2415, 2409,
     2409, 2395, 2417, 2412, 2418, 2419, 2420, 2408, 2421, 2422,
     2369, 2424, 2425, 2426, 2427, 2375, 2428, 2430, 2432, 2433,
     2431, 2425, 2429, 2434, 2431, 2427, 2435, 2428, 2427, 2414,
     2429, 2431, 2437, 2429, 2438, 2439, 2440, 2441, 2442, 2443,
     2444, 2450, 2445, 2446, 2447, 2453, 2455, 2457, 2459, 2446,
     2460, 2461, 2433, 2445, 2446, 2447, 2449, 2449, 2449, 2449,

     2449, 2451, 2451, 2451, 2451, 2451, 2462, 2469, 2449, 2471,
     2472, 2475, 2462, 2451, 2532, 2532, 1376, 2449, 2539, 2539,
     2543, 2543, 2451, 2462, 2463, 2463, 2463, 2463, 2463, 2466,
     2466, 2466, 2466, 2466, 2473, 1375, 2463, 2545, 2545, 2557,
     2557, 2466, 2559, 2559, 2473, 2473, 2478, 2478, 2478, 2478,
     2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478,
     2478, 2478, 2478, 2478, 2478, 2478, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2480, 2480, 2480, 2480,
     2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,

     2480, 2480, 2480, 2480, 2480, 2480, 2481, 2481, 2481, 2481,
     2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481, 2481,
     2481, 2481, 2481, 2481, 2481, 2481, 2482, 2482, 2482, 2482,
     2482, 2482, 2482, 2482, 2482, 2482, 2482, 2482, 2482, 2482,
     2482, 2482, 2482, 2482, 2482, 2482, 2483, 2483, 2483, 2483,
     2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483,
     2483, 2483, 2483, 2483, 2483, 2483, 2484, 2484, 2484, 2484,
     2484, 2484, 2484, 2484, 2484, 2484, 2484, 2484, 2484, 2484,
     2484, 2484, 2484, 2484, 2484, 2484, 2485, 2485, 2485, 2485,
     2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485,

     2485, 2485, 2485, 2485, 2485, 2485, 2486, 2486, 2486, 2486,
     2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486,
     2486, 2486, 2486, 2486, 2486, 2486, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2487, 2487, 2488, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2489, 2489, 2489, 2489,
     2489, 2489, 2489, 2489, 2489, 2489, 2489, 2489, 2489, 2489,
     2489, 2489, 2489, 2489, 2489, 2489, 2490, 2490, 2490, 2490,
     2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,

     2490, 2490, 2490, 2490, 2490, 2490, 2491, 2491, 2491, 2491,
     2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
     2491, 2491, 2491, 2491, 2491, 2491, 2492, 2492, 2492, 2492,
     2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
     2492, 2492, 2492, 2492, 2492, 2492, 2493, 2493, 2493, 2493,
     2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
     2493, 2493, 2493, 2493, 2493, 2493, 2494, 2494, 2567, 2567,
     1373, 2534, 2494, 1371, 2494, 2494, 1368, 2494, 2494, 2534,
     2534, 2494, 2494, 2495, 1367, 2495, 2495, 2569, 2569, 2495,
     2495, 2495, 2495, 2495, 2495, 2495, 1366, 2495, 2495, 2495,

     2496, 1365, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496,
     2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2497, 1364,
     2497, 2497, 1363, 2497, 2497, 2497, 2497, 2497, 2497, 2497,
     2497, 1362, 2497, 2497, 2497, 2498, 2498, 1361, 2498, 2498,
     2573, 2573, 2498, 2498, 2499, 1360, 2499, 2499, 2499, 2499,
     2499, 2499, 2499, 2499, 2499, 2499, 1359, 2499, 2499, 2499,
     2499, 2499, 2500, 1358, 2500, 2500, 2500, 2500, 2500, 2500,
     2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
     2501, 2501, 2582, 2501, 2501, 1357, 2582, 2501, 2501, 2502,
     2502, 2584, 2502, 2502, 1356, 2584, 2502, 2502, 2503, 2503,

     2503, 2503, 2503, 2503, 2503, 2503, 2503, 2503, 2503, 2503,
     2503, 2503, 2503, 2503, 2503, 2503, 2503, 2503, 2504, 2504,
     2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504,
     2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2505, 2505,
     2593, 2505, 2605, 2605, 2593, 2505, 2505, 2506, 2506, 2506,
     2506, 2506, 2506, 2506, 2506, 2506, 2506, 2506, 2506, 2506,
     2506, 2506, 2506, 2506, 2506, 2506, 2506, 2507, 2507, 2507,
     2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507,
     2507, 2507, 2507, 2507, 2507, 2507, 2507, 2508, 2508, 1355,
     2508, 2608, 2608, 1354, 2508, 2508, 2509, 2509, 2509, 2509,

     2509, 2509, 2509, 2509, 2509, 2509, 2509, 2509, 2509, 2509,
     2509, 2509, 2509, 2509, 2509, 2509, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2511, 2511, 2511, 2511,
     2511, 2511, 2511, 2511, 2511, 2511, 2511, 2511, 2511, 2511,
     2511, 2511, 2511, 2511, 2511, 2511, 2512, 2512, 2512, 2512,
     2512, 2512, 2512, 2512, 2512, 2512, 2512, 2512, 2512, 2512,
     2512, 2512, 2512, 2512, 2512, 2512, 2513, 2513, 1352, 2513,
     2513, 1351, 1350, 2513, 2513, 2514, 2514, 1348, 2514, 2514,
     1347, 1346, 2514, 2514, 2515, 2515, 2515, 2515, 2515, 2515,

     2515, 2515, 2515, 2515, 2515, 2515, 2515, 2515, 2515, 2515,
     2515, 2515, 2516, 2516, 1345, 2516, 1344, 1343, 1342, 2516,
     2516, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517,
     2517, 2518, 1341, 2518, 2518, 2518, 2518, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2518, 2519,
     1340, 2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519,
     2519, 2519, 2519, 2519, 2519, 2519, 2519, 2520, 1331, 2520,
     1323, 1318, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520,
     1316, 2520, 2520, 2520, 2521, 2521, 1315, 2521, 2521, 1314,
     1311, 2521, 2521, 2522, 2522, 1310, 2522, 2522, 1309, 1287,

     2522, 2522, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523,
     2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523,
     2523, 2523, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
     2524, 2524, 2525, 2525, 1282, 2525, 2525, 1272, 1271, 2525,
     2525, 2526, 1270, 2526, 2526, 2526, 2526, 2526, 2526, 2526,
     2526, 2526, 2526, 2526, 2526, 2526, 2526, 2526, 2526, 2527,
     1269, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,

     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2529, 2529, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2530, 2530, 2530,
     2530, 2530, 2530, 2530, 2530, 2530, 2530, 2530, 2530, 2530,
     2530, 2530, 2530, 2530, 2530, 2530, 2530, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2533, 2533, 1261,
     1260, 1257, 1256, 2533, 1255, 2533, 2533, 1253, 2533, 2533,
     1251, 1250, 2533, 2533, 2535, 1249, 2535, 2535, 1247, 1246,
     2535, 2535, 2535, 2535, 2535, 2535, 2535, 1244, 2535, 2535,

     2535, 2536, 1242, 2536, 2536, 2536, 2536, 2536, 2536, 2536,
     2536, 2536, 2536, 2536, 2536, 2536, 2536, 2536, 2536, 2537,
     1240, 2537, 2537, 1238, 2537, 2537, 2537, 2537, 2537, 2537,
     2537, 2537, 1233, 2537, 2537, 2537, 2538, 2538, 1232, 2538,
     2538, 1230, 1229, 2538, 2538, 2540, 1228, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 1227, 2540, 2540,
     2540, 2540, 2540, 2541, 1226, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 1225, 2541, 2541, 2541, 2541,
     2541, 2542, 2542, 1223, 2542, 2542, 1222, 1221, 2542, 2542,
     2544, 2544, 1220, 2544, 2544, 1219, 1218, 2544, 2544, 2546,

     2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
     2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2547,
     2547, 2547, 2547, 2547, 2547, 2547, 2547, 2547, 2547, 2547,
     2547, 2547, 2547, 2547, 2547, 2547, 2547, 2547, 2547, 2548,
     2548, 1215, 2548, 1214, 1213, 1212, 2548, 2548, 2549, 2549,
     2549, 2549, 2549, 2549, 2549, 2549, 2549, 2549, 2549, 2549,
     2549, 2549, 2549, 2549, 2549, 2549, 2549, 2549, 2550, 2550,
     2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550,
     2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2551, 2551,
     1209, 2551, 1208, 1207, 1206, 2551, 2551, 2552, 2552, 2552,

     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2553, 2553, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2553, 2554, 2554, 2554,
     2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554,
     2554, 2554, 2554, 2554, 2554, 2554, 2554, 2555, 2555, 2555,
     2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555,
     2555, 2555, 2555, 2555, 2555, 2555, 2555, 2556, 2556, 1203,
     2556, 2556, 1202, 1201, 2556, 2556, 2558, 2558, 1200, 2558,
     2558, 1199, 1198, 2558, 2558, 2560, 2560, 2560, 2560, 2560,

     2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560,
     2560, 2560, 2560, 2561, 2561, 1197, 2561, 1196, 1195, 1194,
     2561, 2561, 2562, 2562, 2562, 2562, 2562, 2562, 2562, 2562,
     2562, 2562, 2563, 1191, 2563, 2563, 2563, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
     2564, 1190, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564,
     2564, 2564, 2564, 2564, 1189, 2564, 2564, 2564, 2565, 1188,
     2565, 1187, 1186, 2565, 2565, 2565, 2565, 2565, 2565, 2565,
     2565, 1185, 2565, 2565, 2565, 2566, 2566, 1184, 2566, 2566,
     1182, 1181, 2566, 2566, 2568, 2568, 1180, 2568, 2568, 1179,

     1178, 2568, 2568, 2570, 2570, 2570, 2570, 2570, 2570, 2570,
     2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570,
     2570, 2570, 2570, 2571, 2571, 2571, 2571, 2571, 2571, 2571,
     2571, 2571, 2571, 2571, 2571, 2571, 2571, 2571, 2571, 2571,
     2571, 2571, 2571, 2572, 2572, 1177, 2572, 2572, 1174, 1171,
     2572, 2572, 2574, 1147, 2574, 2574, 2574, 2574, 2574, 2574,
     2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574,
     2575, 1146, 2575, 2575, 2575, 2575, 2575, 2575, 1145, 2575,
     2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575, 2576, 1144,
     2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576,

     2576, 2576, 2576, 2576, 2576, 2576, 2577, 2577, 2577, 2577,
     2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577, 2577,
     2577, 2577, 2577, 2577, 2577, 2577, 2578, 2578, 2578, 2578,
     2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578, 2578,
     2578, 2578, 2578, 2578, 2578, 2578, 2579, 2579, 1143, 2579,
     1142, 1141, 1140, 2579, 2579, 2580, 2580, 1139, 1109, 1089,
     1088, 2580, 1077, 2580, 2580, 1076, 2580, 1075, 1074, 1073,
     2580, 2580, 2581, 2581, 1072, 1071, 1070, 1069, 2581, 1067,
     2581, 2581, 1065, 2581, 2581, 1064, 1063, 2581, 2581, 2583,
     1062, 2583, 2583, 2583, 2583, 2583, 2583, 2583, 2583, 2583,

     2583, 2583, 2583, 2583, 2583, 2583, 2583, 2585, 2585, 1058,
     2585, 1057, 1055, 1054, 2585, 2585, 2586, 1053, 2586, 2586,
     2586, 2586, 2586, 2586, 2586, 2586, 2586, 2586, 1050, 2586,
     2586, 2586, 2586, 2586, 2587, 2587, 1048, 2587, 1047, 1046,
     1045, 2587, 2587, 2588, 2588, 1044, 2588, 2588, 1043, 1042,
     2588, 2588, 2589, 2589, 1041, 2589, 1039, 1038, 1037, 2589,
     2589, 2590, 2590, 1036, 2590, 2590, 1035, 1033, 2590, 2590,
     2591, 2591, 1032, 2591, 1031, 1030, 1029, 2591, 2591, 2592,
     2592, 1028, 2592, 1027, 1026, 1025, 2592, 2592, 2594, 2594,
     1024, 2594, 1023, 1020, 1018, 2594, 2594, 2595, 2595, 1017,

     2595, 1015, 1012, 1011, 2595, 2595, 2596, 2596, 1010, 2596,
     1009, 1008, 1007, 2596, 2596, 2597, 2597, 2597, 2597, 2597,
     2597, 2597, 2597, 2597, 2597, 2597, 2597, 2597, 2597, 2597,
     2597, 2597, 2597, 2597, 2597, 2598, 2598, 2598, 2598, 2598,
     2598, 2598, 2598, 2598, 2598, 2598, 2598, 2598, 2598, 2598,
     2598, 2598, 2598, 2598, 2598, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2600, 2600, 2600, 2600, 2600,
     2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600,
     2600, 2600, 2600, 2600, 2600, 2601, 1005, 1004, 1003, 1002,

     2601, 1001, 1000, 2601, 2601, 2602, 2602,  999,  998,  997,
      996, 2602,  993,  992,  991,  990,  989,  988,  985,  984,
     2602, 2602, 2602, 2603, 2603,  983,  982,  981,  980,  979,
      971, 2603, 2603,  959, 2603, 2603,  956,  951, 2603, 2603,
     2603, 2604, 2604,  949,  948,  945,  943, 2604,  942,  940,
      939,  938,  937,  936,  935,  934, 2604, 2604, 2604, 2606,
     2606,  932,  931,  930,  902,  882,  881, 2606, 2606,  880,
     2606, 2606,  869,  868, 2606, 2606, 2606, 2607, 2607,  867,
      866,  865,  864,  858,  854, 2607, 2607,  852, 2607,  851,
      850,  846, 2607, 2607, 2607, 2609, 2609,  845,  844,  843,

      842,  837,  836, 2609, 2609,  835, 2609,  834,  833,  832,
     2609, 2609, 2609,  831,  830,  829,  828,  827,  826,  825,
      824,  823,  822,  821,  820,  819,  818,  817,  816,  815,
      814,  813,  812,  811,  810,  808,  807,  805,  804,  803,
      802,  800,  799,  798,  797,  796,  795,  794,  791,  790,
      789,  788,  787,  786,  785,  783,  781,  777,  775,  773,
      772,  771,  754,  744,  739,  734,  733,  732,  731,  730,
      729,  728,  725,  724,  722,  721,  720,  719,  718,  650,
      649,  648,  647,  644,  643,  642,  641,  640,  639,  638,
      637,  635,  634,  633,  629,  626,  625,  624,  623,  621,

      617,  612,  611,  610,  609,  603,  602,  601,  595,  594,
      590,  587,  584,  582,  581,  580,  579,  578,  577,  575,
      574,  572,  571,  568,  567,  566,  565,  564,  563,  561,
      559,  554,  551,  550,  549,  548,  545,  544,  543,  539,
      538,  537,  535,  533,  532,  524,  521,  520,  518,  517,
      512,  511,  510,  509,  508,  506,  505,  504,  503,  498,
      497,  496,  495,  491,  490,  489,  488,  483,  476,  466,
      464,  463,  461,  458,  457,  455,  448,  445,  439,  428,
      421,  420,  419,  418,  414,  413,  410,  405,  404,  403,
      402,  348,  340,  331,  330,  328,  327,  323,  321,  320,

      319,  318,  317,  316,  315,  311,  310,  306,  305,  304,
      301,  295,  294,  290,  289,  287,  284,  283,  276,  272,
      268,  263,  260,  256,  252,  244,  235,  228,  227,  226,
      224,  223,  216,  212,  210,  209,  207,  206,  205,  201,
      196,  195,  194,  188,  187,  186,  179,  176,  153,  148,
      142,  138,  137,  135,  130,  129,  123,  122,  117,  113,
      111,  110,  109,  104,   72,   69,   68,   66,   59, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,

     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477, 2477,
     2477
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[499] =
    {   0,
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 
    1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 
    1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 
    0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
    0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 
    1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 
    0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[498] =
    {   0,
      245,  246,  265,  271,  278,  282,  288,  294,  301,  308,
      314,  322,  328,  334,  338,  342,  348,  354,  360,  363,
      366,  369,  376,  382,  388,  394,  400,  406,  412,  418,
      427,  436,  442,  445,  448,  451,  454,  457,  460,  463,
      466,  469,  472,  475,  478,  481,  484,  487,  490,  493,
      500,  506,  512,  518,  523,  529,  535,  540,  546,  551,
      557,  562,  567,  572,  580,  585,  590,  595,  603,  608,
      613,  618,  623,  631,  636,  641,  646,  651,  656,  662,
      670,  678,  687,  696,  705,  714,  722,  729,  737,  745,
      753,  761,  770,  781,  784,  787,  790,  793,  797,  800,

      803,  806,  809,  812,  815,  818,  821,  831,  834,  837,
      840,  843,  846,  849,  852,  855,  858,  861,  864,  867,
      870,  873,  876,  879,  882,  885,  888,  891,  894,  897,
      900,  903,  906,  909,  912,  915,  918,  921,  924,  927,
      930,  933,  936,  939,  942,  945,  948,  951,  954,  957,
      960,  963,  966,  969,  972,  975,  978,  984,  988, 1004,
     1010, 1015, 1033, 1038, 1059, 1063, 1067, 1071, 1075, 1079,
     1083, 1092, 1098, 1102, 1106, 1110, 1114, 1118, 1122, 1126,
     1130, 1134, 1138, 1142, 1146, 1150, 1154, 1158, 1166, 1170,
     1174, 1178, 1182, 1186, 1191, 1195, 1199, 1203, 1207, 1211,

     1215, 1219, 1223, 1227, 1231, 1235, 1239, 1243, 1247, 1251,
     1255, 1259, 1263, 1267, 1271, 1275, 1279, 1283, 1287, 1291,
     1295, 1299, 1303, 1307, 1311, 1315, 1325, 1329, 1337, 1341,
     1345, 1349, 1362, 1370, 1374, 1378, 1382, 1390, 1397, 1405,
     1413, 1416, 1419, 1422, 1425, 1428, 1431, 1434, 1437, 1451,
     1456, 1460, 1464, 1468, 1472, 1476, 1480, 1484, 1488, 1492,
     1496, 1504, 1507, 1510, 1513, 1516, 1519, 1522, 1525, 1528,
     1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552, 1555, 1558,
     1561, 1564, 1567, 1570, 1573, 1576, 1579, 1582, 1585, 1588,
     1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 1615, 1618,

     1622, 1626, 1646, 1653, 1658, 1679, 1683, 1690, 1695, 1699,
     1703, 1707, 1712, 1716, 1733, 1755, 1761, 1768, 1773, 1780,
     1787, 1791, 1795, 1799, 1803, 1807, 1829, 1834, 1841, 1845,
     1849, 1870, 1878, 1882, 1886, 1907, 1914, 1919, 1928, 1934,
     1940, 1946, 1952, 1958, 1964, 1970, 1976, 1984, 1992, 1997,
     2004, 2011, 2016, 2021, 2028, 2036, 2041, 2046, 2051, 2056,
     2061, 2066, 2071, 2076, 2081, 2086, 2091, 2096, 2101, 2106,
     2111, 2116, 2121, 2126, 2131, 2136, 2141, 2146, 2151, 2156,
     2161, 2166, 2171, 2176, 2181, 2186, 2191, 2196, 2201, 2206,
     2211, 2216, 2221, 2228, 2233, 2240, 2244, 2248, 2252, 2256,

     2260, 2264, 2284, 2292, 2297, 2305, 2311, 2318, 2324, 2332,
     2336, 2356, 2364, 2370, 2375, 2380, 2384, 2404, 2411, 2418,
     2426, 2432, 2436, 2440, 2468, 2473, 2478, 2485, 2491, 2496,
     2518, 2524, 2528, 2550, 2556, 2560, 2581, 2588, 2592, 2597,
     2619, 2627, 2631, 2635, 2659, 2666, 2673, 2680, 2687, 2694,
     2698, 2703, 2707, 2734, 2741, 2748, 2755, 2762, 2769, 2776,
     2781, 2786, 2791, 2795, 2801, 2822, 2829, 2833, 2840, 2861,
     2868, 2891, 2897, 2901, 2923, 2930, 2937, 2960, 2967, 2990,
     2997, 3025, 3032, 3039, 3043, 3048, 3052, 3057, 3061, 3083,
     3090, 3098, 3102, 3107, 3111, 3116, 3120

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
/* -*- mode: c++; indent-tabs-mode: nil; tab-width: 2 -*-
 *
 *  $Id: xquery.l,v 1.4 2006/11/14 05:24:43 Paul Pedersen Exp $
 *
 */
/*______________________________________________________________________
|                                                                       
| 	An implementation of the w3c proposal:                              
|                                                                       
| 	"Building a Tokenizer for XPath or XQuery,                          
| 	 W3C Working Draft 4 April 2005"                                    
|                                                                       
| 	[http://www.w3.org/TR/xquery-xpath-parsing/]                        
|                                                                       
| 	Extensions including update, search, and XQueryP:                   
|                                                                       
| 	[http://www.w3.org/TR/xqupdate/]                                    
| 	[http://www.w3.org/TR/xquery-full-text/]                            
| 	[http://www.ximep-2006.org/papers/Paper-Chamberlin-Carey.pdf]       
|                                                                      
|_______________________________________________________________________*/
#line 26 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"

#ifdef _WIN32
#pragma warning(disable: 4786)
#endif

#ifdef WIN32
#include "util/win32/compatib_defs.h"
#ifndef _WIN32_WCE
#include <io.h>
#endif
#endif

#include <cstdlib>
#ifndef _WIN32_WCE
#include <errno.h>
#endif
#include <limits.h>
#include <iostream>
#include <string>

#include "compiler/parser/symbol_table.h"
#include "compiler/parser/xquery_driver.h"
#include "compiler/parser/xquery_parser.hpp"
#include "zorba/util/properties.h"

/*
	Work around an incompatibility in flex (at least versions
	2.5.31 through 2.5.33): it generates code that does
	not conform to C89.  See Debian bug 333231
	<http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
*/
#undef yywrap
#define yywrap(yyscanner) 1
     
/*
	By default yylex returns int, we use token_type.
	Unfortunately yyterminate by default returns 0, which is
	not of token_type.
*/
#define yyterminate() return token::END

/*______________________________________________________________________
*                                                                      *
*  Scanner options                                                     *
*______________________________________________________________________*/
/*%option case-insensitive*/
/*%option nostdinit*/
#define YY_NO_UNISTD_H 1
/* known expensive option */
/*_____________________________________________________________________
|
|  Whitespace definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Basic character classes
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  XQuery allows '' to escape ', and "" to escape ".
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  NCName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  QName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  VarName definition
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Entity definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Numeric literal definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  String literal definitions
|______________________________________________________________________*/
/*_____________________________________________________________________
|
|  Content character definitions
|______________________________________________________________________*/
/*
NonXChar	[\x09\x0A\x0D\x20A-WY-Za-wy-z\x7B-\xFD]
NonMChar	[\x09\x0A\x0D\x20A-LN-Za-ln-z\x7B-\xFD]
NonLChar	[\x09\x0A\x0D\x20A-KM-Za-km-z\x7B-\xFD]
PITarget	(({NonXChar}{Char}*)|((X|x){NonMChar}{Char}*)|((X|x)(M|m){NonLChar}*)|({Char}{Char}{Char}{Char}+)) 
*/
/*______________________________________________________________________
| 
|  Exclusive start states
|______________________________________________________________________*/



















 
 







/*
	The macro YY_USER_ACTION can be defined to provide an action which is 
	always executed prior to the matched rule's action.

	The following paragraph suffices to track locations accurately. Each 
	time yylex is invoked, the begin position is moved onto the end 
	position. Then when a pattern is matched, the end position is advanced 
	of its width. In case it matched ends of lines, the end cursor is 
	adjusted, and each time blanks are matched, the begin cursor is moved 
	onto the end cursor to effectively ignore the blanks preceding tokens. 
	Comments would be treated equally. 
*/
#line 3306 "xquery_scanner.yy.cpp"

#define INITIAL 0
#define MODE_APOS_ATTRIBUTE_CONTENT 1
#define MODE_CDATA_SECTION 2
#define MODE_CLOSE_KINDTEST 3
#define MODE_DECLAREORDERING 4
#define MODE_ELEMENT_CONTENT 5
#define MODE_END_TAG 6
#define MODE_EXPR_COMMENT 7
#define MODE_ITEMTYPE 8
#define MODE_KINDTEST 9
#define MODE_KINDTESTFORPI 10
#define MODE_NAMESPACEDECL 11
#define MODE_NAMESPACEKEYWORD 12
#define MODE_OCCURRENCE_INDICATOR 13
#define MODE_OPERATOR 14
#define MODE_OPTION 15
#define MODE_PRAGMA 16
#define MODE_PRAGMACONTENTS 17
#define MODE_PROCESSING_INSTRUCTION_CTOR 18
#define MODE_PROCESSING_INSTRUCTION 19
#define MODE_PROCESSING_INSTRUCTION_CONTENT 20
#define MODE_QUOTE_ATTRIBUTE_CONTENT 21
#define MODE_SINGLETYPE 22
#define MODE_START_TAG 23
#define MODE_URITOOPERATOR 24
#define MODE_VARNAME 25
#define MODE_XMLSPACE_DECL 26
#define MODE_XML_COMMENT 27
#define MODE_XQUERY_VERSION 28

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

/* %endif */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 240 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"


 yylloc->step ();


#line 3626 "xquery_scanner.yy.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2478 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2477 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 498 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 498 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 499 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 245 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{ yylloc->step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 246 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{ yylloc->lines(yyleng); yylloc->step (); }
	YY_BREAK

typedef yy::xquery_parser::token token;

/*______________________________________________________________________
	 |
	 |  INITIAL State
	 |
	 |  This state is for patterns that occur at the beginning	of an
	 |  expression or subexpression.
	 |______________________________________________________________________*/
/* maintain INITIAL */
/* ---------------- */
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 265 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::VALIDATE_LBRACE;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 271 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext+9, yyleng-9);
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::VALIDATE_MODE;
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 278 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::TYPESWITCH_LPAR;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 282 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::ELEMENT_LBRACE;
}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 288 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::ATTRIBUTE_LBRACE;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 294 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext+10, yyleng-11, true, true);
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::ATTRIBUTE_QNAME_LBRACE;
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 301 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext+8, yyleng-9, true, true);
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::ELEMENT_QNAME_LBRACE;
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 308 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::DOCUMENT_LBRACE;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 314 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::TEXT_LBRACE;
}
	YY_BREAK
/* transition to MODE_PROCESSING_INSTRUCTION_CTOR */
/* ---------------------- */
case 12:
YY_RULE_SETUP
#line 322 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_PROCESSING_INSTRUCTION_CTOR;
  return token::PROCESSING_INSTRUCTION;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 328 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::COMMENT_LBRACE;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 334 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DECLARE_FUNCTION;
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 338 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DECLARE_UPDATING_FUNCTION;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 342 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::LBRACE;
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 348 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::ORDERED_LBRACE;
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 354 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::UNORDERED_LBRACE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 360 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SEMI;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 363 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::COMMA;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 366 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::LPAR;
}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 369 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::IF_LPAR;
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 376 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::ELEMENT_LPAR;
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 382 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::ATTRIBUTE_LPAR;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 388 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 394 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::SCHEMA_ATTRIBUTE_LPAR;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 400 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::COMMENT_LPAR;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 406 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::TEXT_LPAR;
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 412 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::NODE_LPAR;
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 418 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::DOCUMENT_NODE_LPAR;
}
	YY_BREAK
/* transition to KINDTESTFORPI */
/* --------------------------- */
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 427 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_KINDTESTFORPI, yyscanner);
	return token::PI_LPAR;
}
	YY_BREAK
/* order dependence: this must follow the rules: xxx{S}"(" */
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 436 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng-1, false, true);
	return token::QNAME_LPAR;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 442 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::MINUS;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 445 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PLUS;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 448 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SLASH;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 451 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LEADING_LONE_SLASH;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 454 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SLASH_SLASH;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 457 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ANCESTOR_OR_SELF_AXIS;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 460 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ANCESTOR_AXIS;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 463 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ATTRIBUTE_AXIS;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 466 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::CHILD_AXIS;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 469 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DESCENDANT_OR_SELF_AXIS;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 472 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DESCENDANT_AXIS;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 475 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FOLLOWING_SIBLING_AXIS;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 478 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FOLLOWING_AXIS;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 481 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PARENT_AXIS;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 484 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PRECEDING_SIBLING_AXIS;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 487 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PRECEDING_AXIS;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 490 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SELF_AXIS;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 493 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT_SIGN;
}
	YY_BREAK
/* transition to OPERATOR */
/* ---------------------- */
case 51:
YY_RULE_SETUP
#line 500 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->ival = driver.symtab.intval(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::INTEGER_LITERAL;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 506 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->decval = driver.symtab.decimalval(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::DECIMAL_LITERAL;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 512 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->dval = driver.symtab.doubleval(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::DOUBLE_LITERAL;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 518 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::_NAN;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 523 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext, yyleng-2);
	BEGIN MODE_OPERATOR;
	return token::ELEM_WILDCARD;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 529 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::QNAME;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 535 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::RPAR;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 540 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext+2, yyleng-2);
	BEGIN MODE_OPERATOR;
	return token::PREFIX_WILDCARD;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 546 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::STAR;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 551 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::STRING_LITERAL;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 557 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DECLARE_CONSTRUCTION;
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 562 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DECLARE_DEFAULT_ORDER;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 567 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DOT_DOT;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 572 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::DOT;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 580 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::DECLARE_DEFAULT_COLLATION;
}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 585 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::DECLARE_NAMESPACE;
}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 590 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::MODULE_NAMESPACE;
}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 595 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::DECLARE_BASE_URI;
}
	YY_BREAK
/* transition to NAMESPACEKEYWORD */
/* ------------------------------ */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 603 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::DECLARE_DEFAULT_ELEMENT;
}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 608 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::DECLARE_DEFAULT_FUNCTION;
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 613 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::IMPORT_SCHEMA;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 618 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::IMPORT_MODULE;
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 623 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEKEYWORD;
	return token::DECLARE_COPY_NAMESPACES;
}
	YY_BREAK
/* transition to VARNAME */
/* --------------------- */
case 74:
YY_RULE_SETUP
#line 631 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DOLLAR;
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 636 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::FOR_DOLLAR;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 641 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::LET_DOLLAR;
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 646 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::SOME_DOLLAR;
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 651 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::EVERY_DOLLAR;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 656 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DECLARE_VARIABLE_DOLLAR;
}
	YY_BREAK
/* update rule */
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 662 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::TRANSFORM_COPY_DOLLAR;
}
	YY_BREAK
/* transition to ITEMTYPE */
/* ---------------------- */
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 670 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::RPAR_AS;
}	
	YY_BREAK
/* transition to XML_COMMENT */
/* ------------------------- */
case 82:
YY_RULE_SETUP
#line 678 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_XML_COMMENT, yyscanner);
	return token::XML_COMMENT_BEGIN;
}
	YY_BREAK
/* transition to PROCESSING_INSTRUCTION */
/* ------------------------------------ */
case 83:
YY_RULE_SETUP
#line 687 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{	
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_PROCESSING_INSTRUCTION, yyscanner);
	return token::PI_BEGIN;
}
	YY_BREAK
/* transition to CDATA_SECTION */
/* --------------------------- */
case 84:
YY_RULE_SETUP
#line 696 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_CDATA_SECTION, yyscanner);
	return token::CDATA_BEGIN;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 85:
YY_RULE_SETUP
#line 705 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{ 	
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ MODE_START_TAG, yyscanner);
	return token::START_TAG;
}
	YY_BREAK
/* transition to XMLSPACE_DECL */
/* --------------------------- */
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 714 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_XMLSPACE_DECL;
	return token::DECLARE_BOUNDARY_SPACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 87:
YY_RULE_SETUP
#line 722 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* transition to DECLAREORDERING */
/* ----------------------------- */
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 729 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_DECLAREORDERING;
	return token::DECLARE_ORDERING;
}
	YY_BREAK
/* transition to XQUERY_VERSION */
/* ---------------------------- */
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 737 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_XQUERY_VERSION;
	return token::XQUERY_VERSION;
}
	YY_BREAK
/* transition to PRAGMA */
/* -------------------- */
case 90:
YY_RULE_SETUP
#line 745 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{ 	
	BEGIN MODE_PRAGMA;
	return token::PRAGMA_BEGIN;
}
	YY_BREAK
/* transition to OPTION */
/* -------------------- */
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 753 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPTION;
	return token::DECLARE_OPTION;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 761 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext+3, yyleng-3, true);
	BEGIN MODE_NAMESPACEDECL;
	return token::AT_URI_LITERAL;
}
	YY_BREAK
/* pop previous state */
/* ------------------ */
case 93:
YY_RULE_SETUP
#line 770 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{ 	
	yy_pop_state(yyscanner);
	return token::RBRACE;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | Update rules <INITIAL>
	 |______________________________________________________________________*/
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 781 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DECLARE_REVALIDATION_MODE;
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 784 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DO_INSERT;
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 787 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DO_DELETE;
}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 790 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DO_REPLACE;
}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 793 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	driver.set_rename(true);
	return token::DO_RENAME;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 797 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::INTO;
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 800 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FIRST_INTO;
}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 803 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LAST_INTO;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 806 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AFTER;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 809 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::BEFORE;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 812 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::VALUE_OF;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 815 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 818 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AS;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 821 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::MODIFY;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | FT rules <INITIAL>
	 |______________________________________________________________________*/
case 108:
YY_RULE_SETUP
#line 831 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FTAND;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 834 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FTNOT;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 837 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FTOR;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 840 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FTNOT_IN;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 843 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ALL;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 846 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ALL_WORDS;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 849 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ANY;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 852 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ANY_WORD;
}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 855 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT_END;
}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 858 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT_LEAST;
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 861 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT_MOST;
}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 864 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT_START;
}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 867 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::CASE_INSENSITIVE;
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 870 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::CASE_SENSITIVE;
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 873 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DECLARE_FTOPTION;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 876 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DIACRITICS_INSENSITIVE;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 879 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DIACRITICS_SENSITIVE;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 882 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DIFFERENT;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 885 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DISTANCE;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 888 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ENTIRE_CONTENT;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 891 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::EXACTLY;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 894 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::FROM;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 897 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LANGUAGE;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 900 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LEVELS;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 903 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LOWERCASE;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 906 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::OCCURS;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 909 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PARAGRAPH;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 912 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PHRASE;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 915 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::RELATIONSHIP;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 918 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SAME;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 921 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SCORE;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 924 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SENTENCE;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 927 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SENTENCES;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 930 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::TIMES;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 933 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::UPPERCASE;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 936 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WEIGHT;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 939 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WINDOW;
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 942 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_CONTENT;
}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 945 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_DIACRITICS;
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 948 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_STEMMING;
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 951 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_STOP_WORDS;
}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 954 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_THESAURUS;
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 957 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_WILDCARDS;
}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 960 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_DEFAULT_STOP_WORDS;
}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 963 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_DIACRITICS;
}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 966 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_STEMMING;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 969 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_STOP_WORDS;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 972 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_THESAURUS;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 975 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_WILDCARDS;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 978 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WORDS;
}
	YY_BREAK
/* catch all */
case 158:
YY_RULE_SETUP
#line 984 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 988 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* END MODE INITIAL */
/*______________________________________________________________________  
    |
    |  The PROCESSING_INSTRUCTION_CTOR State
    |
    |  transition to MODE_OPERATOR
    |______________________________________________________________________*/

case 160:
YY_RULE_SETUP
#line 1004 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN MODE_OPERATOR;
  yy_push_state( /*and goto*/ INITIAL, yyscanner);
  return token::LBRACE;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1010 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_ncname(yytext, yyleng);
  return token::NCNAME;
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1015 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK

/*______________________________________________________________________  
	 |
	 |	The DECLAREORDERING State
	 |
	 |	Special state to recognize declare ordering specific keywords. 
	 |	transition to INITIAL
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 163:
YY_RULE_SETUP
#line 1033 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ORDERED;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1038 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::UNORDERED;
}
	YY_BREAK
/* <MODE_DECLAREORDERING> */
/*______________________________________________________________________  
	 |
	 |	OPERATOR State 
	 | 
	 |  This state is for patterns that are defined for operators.
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 165:
YY_RULE_SETUP
#line 1059 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::LBRACE;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1063 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1067 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::THEN;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1071 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ELSE;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1075 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXTERNAL;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1079 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AND;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1083 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	if (!driver.ftcontains()) {
		BEGIN INITIAL;
	}
	return token::AT;
}
	YY_BREAK
/* full-text rule */
case 172:
YY_RULE_SETUP
#line 1092 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SCORE;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1098 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GETS;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1102 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::COMMA;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1106 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DIV;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1110 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EQUALS;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1114 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXCEPT;
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1118 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_EQ;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1122 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GE;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1126 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GT;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1130 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LE;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1134 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LT;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1138 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_NE;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1142 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GE;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1146 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FOLLOWS;
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1150 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GT;
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1154 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IDIV;
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1158 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTERSECT;
}
	YY_BREAK
/* Update rules */
case 189:
YY_RULE_SETUP
#line 1166 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTO;
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1170 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::WITH;
}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 1174 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DO_INSERT;
}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 1178 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DO_DELETE;
}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 1182 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DO_REPLACE;
}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 1186 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	driver.set_rename(true);
	return token::DO_RENAME;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1191 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTO;
}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 1195 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FIRST_INTO;
}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 1199 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LAST_INTO;
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1203 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AFTER;
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1207 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::BEFORE;
}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 1211 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VALUE_OF;
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1215 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MODIFY;
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1219 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::_IN_;
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1223 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IS;
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1227 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LBRACK;
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1231 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LE;
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1235 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRECEDES;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1239 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LT;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1243 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MINUS;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1247 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MOD;
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1251 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STAR;
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1255 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::NE;
}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 1259 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ORDER_BY;
}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 1263 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STABLE_ORDER_BY;
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1267 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::OR;
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1271 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PLUS;
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1275 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::RETURN;
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1279 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SATISFIES;
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1283 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SLASH;
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1287 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LEADING_LONE_SLASH;
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1291 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SLASH_SLASH;
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1295 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::TO;
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1299 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::UNION;
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1303 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VBAR;
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 1307 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::WHERE;
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1311 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRESERVE;
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1315 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STRIP;
}
	YY_BREAK
/* transition to SINGLETYPE */
/* ------------------------ */
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 1325 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CASTABLE_AS;
}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 1329 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CAST_AS;
}
	YY_BREAK
/* transition to ITEMTYPE */
/* ---------------------- */
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 1337 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::INSTANCE_OF;
}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1341 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::TREAT_AS;
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 1345 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::CASE;
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 1349 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	if (driver.rename()) {
		driver.set_rename(false);
		BEGIN INITIAL;
	}
	else if (driver.ftcontains()) {
		driver.set_ftcontains(false);
	}
	else {
		BEGIN MODE_ITEMTYPE;
	}
	return token::AS;
}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1362 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_ITEMTYPE;
	return token::RPAR_AS;
}
	YY_BREAK
/* transition to VARNAME */
/* --------------------- */
case 234:
YY_RULE_SETUP
#line 1370 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DOLLAR;
}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 1374 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::FOR_DOLLAR;
}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 1378 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::LET_DOLLAR;
}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 1382 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::LET_SCORE_DOLLAR;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 238:
YY_RULE_SETUP
#line 1390 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* transition to URITOOPERATOR */
/* --------------------------- */
case 239:
YY_RULE_SETUP
#line 1397 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_URITOOPERATOR;
	return token::COLLATION;
}
	YY_BREAK
/* restore previous state on closing brace */
/* --------------------------------------- */
case 240:
YY_RULE_SETUP
#line 1405 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::RBRACE;
}
	YY_BREAK
/* maintain OPERATOR state */
/* ----------------------- */
case 241:
YY_RULE_SETUP
#line 1413 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::RPAR;
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1416 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::HOOK;
}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 1419 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::EMPTY_GREATEST;
}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 1422 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::EMPTY_LEAST;
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1425 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ASCENDING;
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1428 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DESCENDING;
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 1431 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DEFAULT;
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1434 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::RBRACK;
}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 1437 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	return token::STRING_LITERAL;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | FT rules <OPERATOR>
	 |______________________________________________________________________*/
/* transition to INITIAL state */
/* --------------------------- */
case 250:
YY_RULE_SETUP
#line 1451 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	driver.set_ftcontains(true);
	return token::FTCONTAINS;
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1456 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTAND;
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 1460 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTNOT;
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1464 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTOR;
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1468 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FTNOT_IN;
}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 1472 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::AT_LEAST;
}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 1476 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::AT_MOST;
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1480 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::DISTANCE;
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1484 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::EXACTLY;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1488 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::FROM;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1492 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::OCCURS;
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1496 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  BEGIN INITIAL;
	return token::WINDOW;
}
	YY_BREAK
/* maintain OPERATOR state */
/* ----------------------- */
case 262:
YY_RULE_SETUP
#line 1504 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ALL;
}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 1507 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ALL_WORDS;
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 1510 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ANY;
}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 1513 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ANY_WORD;
}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 1516 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT_END;
}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 1519 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT_START;
}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 1522 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::CASE_INSENSITIVE;
}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 1525 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::CASE_SENSITIVE;
}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 1528 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DECLARE_FTOPTION;
}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 1531 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DIACRITICS_INSENSITIVE;
}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 1534 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DIACRITICS_SENSITIVE;
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1537 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DIFFERENT;
}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 1540 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ENTIRE_CONTENT;
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1543 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LANGUAGE;
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1546 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LEVELS;
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1549 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::LOWERCASE;
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1552 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PARAGRAPH;
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1555 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PHRASE;
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1558 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::RELATIONSHIP;
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1561 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SAME;
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1564 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SCORE;
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1567 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SENTENCE;
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1570 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::SENTENCES;
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1573 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::TIMES;
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1576 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::UPPERCASE;
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1579 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WEIGHT;
}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 1582 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_CONTENT;
}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 1585 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_DIACRITICS;
}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 1588 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_STEMMING;
}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 1591 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_STOP_WORDS;
}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 1594 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_THESAURUS;
}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 1597 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITHOUT_WILDCARDS;
}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 1600 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_DEFAULT_STOP_WORDS;
}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 1603 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_DIACRITICS;
}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 1606 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_STEMMING;
}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 1609 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_STOP_WORDS;
}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 1612 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_THESAURUS;
}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 1615 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WITH_WILDCARDS;
}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1618 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::WORDS;
}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1622 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 1626 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_OPERATOR> */
/*______________________________________________________________________  
	|
	| XQUERY_VERSION State
	|
	| This state is for recognition of XQuery version specific keywords. 
	|______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 303:
YY_RULE_SETUP
#line 1646 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
/* maintain XQUERYVERSION */
/* ---------------------- */
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 1653 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	return token::STRING_LITERAL;
}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1658 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ENCODING;
}
	YY_BREAK
/* <MODE_XQUERY_VERSION> */
/*______________________________________________________________________  
	|
	| NAMESPACEDECL State
	|
	| This state occurs inside of a namespace declaration, and is needed
	| to recognize a NCName that is to be used as the prefix, as opposed
	| to allowing a QName to occur. (Otherwise, the difference between
	| NCName and QName becomes ambiguous.)
	|______________________________________________________________________*/

case 306:
YY_RULE_SETUP
#line 1679 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1683 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
/* maintain NAMESPACEDECL */
/* ---------------------- */
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 1690 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext+1, yyleng-2);
	return token::URI_LITERAL;
}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1695 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::COMMA;
}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 1699 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AT;
}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 1703 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::EQUALS;
}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1707 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext, yyleng);
	return token::NCNAME;
}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1712 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 1716 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_NAMESPACEDECL> */
/*______________________________________________________________________  
	 |
	 | URITOOPERATOR State
	 |
	 | This state is to recognize a URILiteral that transitions to the
	 | OPERATOR state.
	 |______________________________________________________________________*/
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 1733 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext+1, yyleng-2);
	BEGIN MODE_OPERATOR;
	return token::URI_LITERAL;
}
	YY_BREAK
/*______________________________________________________________________  
	 |
	 | NAMESPACEKEYWORD State
	 |
	 | This state occurs at places where the keyword "namespace" is
	 | expected, which would otherwise be ambiguous compared to a QName.
	 | QNames can not occur in this state.
	 |______________________________________________________________________*/

/* transition to NAMESPACEDECL */
/* --------------------------- */
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 1755 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext+1, yyleng-2);
	BEGIN MODE_NAMESPACEDECL;
	return token::URI_LITERAL;
}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1761 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_NAMESPACEDECL;
	return token::NAMESPACE;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 318:
YY_RULE_SETUP
#line 1768 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INHERIT;
}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1773 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::NO_INHERIT;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 320:
YY_RULE_SETUP
#line 1780 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* maintain NAMESPACEKEYWORD */
/* ------------------------- */
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 1787 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DEFAULT_ELEMENT;
}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 1791 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::PRESERVE;
}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 1795 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::NO_PRESERVE;
}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 1799 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::COMMA;
}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 1803 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 1807 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_NAMESPACEKEYWORD> */
/*______________________________________________________________________  
	 |
	 | XMLSPACE_DECL State
	 |
	 | This state occurs at places where the keywords "preserve" and
	 | "strip" is expected to support "declare xmlspace". QNames cannot
	 | occur in this state.
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 327:
YY_RULE_SETUP
#line 1829 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRESERVE;
}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 1834 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STRIP;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 329:
YY_RULE_SETUP
#line 1841 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 1845 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 1849 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_XMLSPACE_DECL> */
/*______________________________________________________________________  
	 |
	 | SINGLETYPE State 
	 |
	 | This state distinguishes tokens that can occur only inside the
	 | SingleType production.
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 332:
YY_RULE_SETUP
#line 1870 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 333:
YY_RULE_SETUP
#line 1878 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 1882 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 1886 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_SINGLETYPE> */
/*______________________________________________________________________  
	 |
	 | ITEMTYPE State
	 |
	 | This state distinguishes tokens that can occur only inside the
	 | ItemType production.
	 |______________________________________________________________________*/

/* transition to VARNAME */
/* --------------------- */
case 336:
YY_RULE_SETUP
#line 1907 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_VARNAME;
	return token::DOLLAR;
}
	YY_BREAK
/* transition to OPERATOR */
/* ---------------------- */
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 1914 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::VOID_TEST;
}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 1919 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	/* BEGIN MODE_OPERATOR; */
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 339:
YY_RULE_SETUP
#line 1928 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 1934 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::ELEMENT_LPAR;
}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 1940 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::ATTRIBUTE_LPAR;
}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 1946 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 1952 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::SCHEMA_ATTRIBUTE_LPAR;
}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 1958 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::COMMENT_LPAR;
}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 1964 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::TEXT_LPAR;
}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 1970 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::NODE_LPAR;
}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 1976 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::DOCUMENT_NODE_LPAR;
}
	YY_BREAK
/* transition to KINDTESTFORPI */
/* --------------------------- */
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 1984 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OCCURRENCE_INDICATOR; 
	yy_push_state( /*and goto*/ MODE_KINDTESTFORPI, yyscanner);
	return token::PI_LPAR;
}
	YY_BREAK
/* transition to OCCURENCE_INDICATOR */
/* -------------------------------- */
case 349:
YY_RULE_SETUP
#line 1992 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	return token::QNAME;
}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 1997 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{	
	BEGIN MODE_OCCURRENCE_INDICATOR;
	return token::ITEM_TEST;
}
	YY_BREAK
/* transition to PRAGMA */
/* -------------------- */
case 351:
YY_RULE_SETUP
#line 2004 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_PRAGMA;
	return token::PRAGMA_BEGIN;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 352:
YY_RULE_SETUP
#line 2011 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SEMI;
}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 2016 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::THEN;
}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 2021 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ELSE;
}
	YY_BREAK
/* transition to NAMESPACEDECL */
/* --------------------------- */
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 2028 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_uri(yytext+3, yyleng-3, true);
	BEGIN MODE_NAMESPACEDECL;
	return token::AT_URI_LITERAL;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 356:
YY_RULE_SETUP
#line 2036 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXTERNAL;
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 2041 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AND;
}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 2046 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::AT;
}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 2051 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GETS;
}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 2056 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::COMMA;
}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 2061 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::DIV;
}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 2066 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EQUALS;
}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 2071 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::EXCEPT;
}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 2076 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_EQ;
}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 2081 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GE;
}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 2086 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_GT;
}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 2091 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LE;
}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 2096 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_LT;
}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 2101 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VAL_NE;
}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 2106 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GE;
}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 2111 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::FOLLOWS;
}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 2116 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::GT;
}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 2121 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IDIV;
}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 2126 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::INTERSECT;
}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 2131 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::_IN_;
}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 2136 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::IS;
}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 2141 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LBRACK;
}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 2146 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LPAR;
}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 2151 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LE;
}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 2156 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::PRECEDES;
}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 2161 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::LT;
}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 2166 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MINUS;
}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 2171 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::MOD;
}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 2176 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::NE;
}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 2181 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::ORDER_BY;
}
	YY_BREAK
case 386:
/* rule 386 can match eol */
YY_RULE_SETUP
#line 2186 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::STABLE_ORDER_BY;
}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 2191 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::OR;
}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 2196 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::RETURN;
}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 2201 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::SATISFIES;
}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 2206 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::TO;
}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 2211 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::UNION;
}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 2216 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::VBAR;
}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 2221 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN INITIAL;
	return token::WHERE;
}
	YY_BREAK
/* transition to SINGLETYPE */
/* ------------------------ */
case 394:
/* rule 394 can match eol */
YY_RULE_SETUP
#line 2228 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CASTABLE_AS;
}
	YY_BREAK
case 395:
/* rule 395 can match eol */
YY_RULE_SETUP
#line 2233 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_SINGLETYPE;
	return token::CAST_AS;
}
	YY_BREAK
/* maintain ITEMTYPE */
/* ----------------- */
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 2240 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::INSTANCE_OF;
}
	YY_BREAK
case 397:
/* rule 397 can match eol */
YY_RULE_SETUP
#line 2244 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::TREAT_AS;
}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 2248 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::CASE;
}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 2252 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::AS;
}
	YY_BREAK
case 400:
/* rule 400 can match eol */
YY_RULE_SETUP
#line 2256 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::RPAR_AS;
}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 2260 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 2264 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_ITEMTYPE> */
/*______________________________________________________________________  
	 |
	 | KINDTEST State
	 |
	 | This state is for the psuedo-parameters for the KindTest productions
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 403:
YY_RULE_SETUP
#line 2284 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::LBRACE;
}
	YY_BREAK
/* transition to CLOSE_KINDTEST */
/* --------------------------- */
case 404:
YY_RULE_SETUP
#line 2292 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_CLOSE_KINDTEST;
	return token::STAR;
}
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 2297 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_CLOSE_KINDTEST;
	return token::QNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 406:
YY_RULE_SETUP
#line 2305 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* pop previous state on close paren */
/* --------------------------------- */
case 407:
YY_RULE_SETUP
#line 2311 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::RPAR;
}
	YY_BREAK
/* maintain KINDTEST */
/* ----------------- */
case 408:
/* rule 408 can match eol */
YY_RULE_SETUP
#line 2318 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_KINDTEST;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::ELEMENT_LPAR;
}
	YY_BREAK
case 409:
/* rule 409 can match eol */
YY_RULE_SETUP
#line 2324 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_KINDTEST;
	yy_push_state( /*and goto*/ MODE_KINDTEST, yyscanner);
	return token::SCHEMA_ELEMENT_LPAR;
}
	YY_BREAK
/* catch-all */
/* --------- */
case 410:
YY_RULE_SETUP
#line 2332 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 2336 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_KINDTEST> */
/*______________________________________________________________________  
	 |
	 | KINDTESTFORPI
	 |
	 | This state is similar to KINDTEST, but recognizes NCNames instead of
	 | QNames.
	 |______________________________________________________________________*/

/* pop previous state on close paren */
/* --------------------------------- */
case 412:
YY_RULE_SETUP
#line 2356 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::RPAR;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 413:
YY_RULE_SETUP
#line 2364 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* maintain KINDTESTFORPI */
/* ---------------------- */
case 414:
YY_RULE_SETUP
#line 2370 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_ncname(yytext, yyleng);
	return token::NCNAME;
}
	YY_BREAK
case 415:
/* rule 415 can match eol */
YY_RULE_SETUP
#line 2375 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_stringlit(yytext, yyleng);
	return token::STRING_LITERAL;
}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 2380 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 2384 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_KINDTESTFORPI> */
/*______________________________________________________________________  
	 |
	 | CLOSE_KINDTEST State
	 |
	 | This state is expecting to close a KINDTEST sequence.
	 |______________________________________________________________________*/ 

/* pop previous state */
/* ------------------ */
case 418:
YY_RULE_SETUP
#line 2404 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::RPAR;
}
	YY_BREAK
/* transition to KINDTEST */
/* ---------------------- */
case 419:
YY_RULE_SETUP
#line 2411 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_KINDTEST;
	return token::COMMA;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 420:
YY_RULE_SETUP
#line 2418 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::LBRACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 421:
YY_RULE_SETUP
#line 2426 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* maintain CLOSE_KINDTEST */
/* ---------------------- */
case 422:
YY_RULE_SETUP
#line 2432 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::HOOK;
}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 2436 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 424:
/* rule 424 can match eol */
YY_RULE_SETUP
#line 2440 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_CLOSE_KINDTEST> */
/*______________________________________________________________________  
	 |
	 | OCCURRENCE_INDICATOR State
	 |
	 | This special state is needed to distinguish occurrence indicators
	 | that appear in the SequenceType production. For instance, compare
	 | "foo instance of baz*" to "baz*foo". In the first case, the "*" is
	 | interpreted as an occurrence indicator, and in the second case, it
	 | must be interpreted as a multiplication operator. But, when in the
	 | OCCURRENCEINDICATOR state, if anything else other than "?", "*",
	 | "+", those symbols must be interpreted in the OPERATOR state. For
	 | instance, this would occur with the expression "foo instance of baz
	 | and $x", with the operator "and".
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 425:
YY_RULE_SETUP
#line 2468 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::OCCURS_HOOK;
}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 2473 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::OCCURS_STAR;
}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 2478 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::OCCURS_PLUS;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 428:
YY_RULE_SETUP
#line 2485 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
/* anything else: push back, goto OPERATOR */
/* --------------------------------------- */
case 429:
YY_RULE_SETUP
#line 2491 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yyless(0);
	BEGIN MODE_OPERATOR;
}
	YY_BREAK
case 430:
/* rule 430 can match eol */
YY_RULE_SETUP
#line 2496 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* MODE_OCCURRENCE_INDICATOR> */
/*______________________________________________________________________  
	 |
	 | OPTION State
	 |
	 | This state is entered in the prolog for an option declaration, and
	 | recognizes a QName that transits to a INITIAL state rather than a
	 | OPERATOR state.
	 |______________________________________________________________________*/

/* transition to INITIAL */
/* --------------------- */
case 431:
YY_RULE_SETUP
#line 2518 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN INITIAL;
	return token::QNAME;
}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 2524 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 433:
/* rule 433 can match eol */
YY_RULE_SETUP
#line 2528 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_OPTION> */
/*______________________________________________________________________  
	 |
	 | PRAGMA State
	 |
	 | This state is entered in a a pragma expression, and recognizes
	 | a QName that transits to a PRAGMACONTENTS state rather than an
	 | OPERATOR state.
	 |______________________________________________________________________*/

/* transition to PRAGMACONTENTS */
/* ---------------------------- */
case 434:
YY_RULE_SETUP
#line 2550 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	BEGIN MODE_PRAGMACONTENTS;
	return token::QNAME;
}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 2556 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 436:
/* rule 436 can match eol */
YY_RULE_SETUP
#line 2560 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_PRAGMA> */
/*______________________________________________________________________  
	 |
	 | PRAGMACONTENTS State
	 |
	 | This state recognizes characters in pragma content and transitions
	 | out of this state when a '#)' pattern is recognized.
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 437:
YY_RULE_SETUP
#line 2581 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_OPERATOR;
	return token::PRAGMA_END;
}
	YY_BREAK
/* maintain PRAGMACONTENTS */
/* ----------------------- */
case 438:
/* rule 438 can match eol */
YY_RULE_SETUP
#line 2588 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	/* continue lexing */
}
	YY_BREAK
case 439:
/* rule 439 can match eol */
YY_RULE_SETUP
#line 2592 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::PRAGMA_LITERAL;
}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 2597 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_PRAGMACONTENTS> */
/*______________________________________________________________________  
	 |
	 | VARNAME State
	 |
	 | This state differentiates variable names from qualified names. This
	 | allows only the pattern of a QName to be recognized when otherwise
	 | ambiguities could occur.
	 |______________________________________________________________________*/

/* transition to OPERATOR */
/* ---------------------- */
case 441:
YY_RULE_SETUP
#line 2619 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_varname(yytext, yyleng);
	BEGIN MODE_OPERATOR;
	return token::VARNAME;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 442:
YY_RULE_SETUP
#line 2627 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 2631 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 444:
/* rule 444 can match eol */
YY_RULE_SETUP
#line 2635 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_VARNAME> */
/*______________________________________________________________________  
	 |
	 | START_TAG State
	 |
	 | This state allows attributes in the native XML syntax, and marks the
	 | beginning of an element construction. Element constructors also push
	 | the current state, popping it at the conclusion of an end tag. In
	 | the START_TAG state, the string ">" is recognized as a token which
	 | is associated with the transition to the original state.
	 |______________________________________________________________________*/

/* transition to ELEMENT_CONTENT */
/* ----------------------------- */
case 445:
YY_RULE_SETUP
#line 2659 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_ELEMENT_CONTENT;
	return token::TAG_END;
}
	YY_BREAK
/* transition to QUOT_ATTRIBUTE_CONTENT */
/* ------------------------------------ */
case 446:
YY_RULE_SETUP
#line 2666 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_QUOTE_ATTRIBUTE_CONTENT;
	return token::QUOTE;
}
	YY_BREAK
/* transition to APOS_ATTRIBUTE_CONTENT */
/* ------------------------------------ */
case 447:
YY_RULE_SETUP
#line 2673 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_APOS_ATTRIBUTE_CONTENT;
	return token::APOS;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 448:
YY_RULE_SETUP
#line 2680 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_START_TAG;
	return token::EQUALS;
}
	YY_BREAK
/* pop previous state on exit */
/* -------------------------- */
case 449:
YY_RULE_SETUP
#line 2687 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::EMPTY_TAG_END;
}
	YY_BREAK
/* maintain START_TAG */
/* ------------------ */
case 450:
/* rule 450 can match eol */
YY_RULE_SETUP
#line 2694 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	/* continue lexing */
}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 2698 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put_qname(yytext, yyleng);
	return token::QNAME;
}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 2703 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 453:
/* rule 453 can match eol */
YY_RULE_SETUP
#line 2707 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  /* eat up whitespace */
}
	YY_BREAK
/* <MODE_START_TAG> */
/*______________________________________________________________________  
	 |
	 | ELEMENT_CONTENT State
	 |
	 | This state allows XML-like content, without these characters being
	 | misinterpreted as expressions. The character "{" marks a transition
	 | to the INITIAL state, i.e. the start of an embedded expression, and
	 | the "}" character pops back to the ELEMENT_CONTENT state. To allow
	 | curly braces to be used as character content, a double left or right
	 | curly brace is interpreted as a single curly brace character. The
	 | string "</" is interpreted as the beginning of an end tag, which is
	 | associated with a transition to the END_TAG state.
	 |______________________________________________________________________*/

/* transition to END_TAG */
/* --------------------- */
case 454:
YY_RULE_SETUP
#line 2734 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_END_TAG;
	return token::START_TAG_END;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 455:
YY_RULE_SETUP
#line 2741 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::LBRACE;
}
	YY_BREAK
/* transition to EXPR_COMMENT */
/* -------------------------- */
case 456:
YY_RULE_SETUP
#line 2748 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_XML_COMMENT, yyscanner);
	return token::XML_COMMENT_BEGIN;
}
	YY_BREAK
/* transition to PROCESSING_INSTRUCTION */
/* ------------------------------------ */
case 457:
YY_RULE_SETUP
#line 2755 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_PROCESSING_INSTRUCTION, yyscanner);
	return token::PI_BEGIN;
}
	YY_BREAK
/* transition to CDATA_SECTION */
/* --------------------------- */
case 458:
YY_RULE_SETUP
#line 2762 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_CDATA_SECTION, yyscanner);
	return token::CDATA_BEGIN;
}
	YY_BREAK
/* transition to START_TAG */
/* ----------------------- */
case 459:
YY_RULE_SETUP
#line 2769 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_START_TAG, yyscanner);
	return token::START_TAG;
}
	YY_BREAK
/* maintain ELEMENT_CONTENT */
/* ------------------------ */
case 460:
/* rule 460 can match eol */
YY_RULE_SETUP
#line 2776 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::ELEMENT_CONTENT;
}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 2781 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_entityref(yytext, yyleng);
	return token::ENTITY_REF;
}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 2786 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_charref(yytext, yyleng);
	return token::CHAR_REF_LITERAL;
}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 2791 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 2795 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* catch all else */
/* -------------- */
case 465:
YY_RULE_SETUP
#line 2801 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* MODE_ELEMENT_CONTENT> */
/*______________________________________________________________________  
	 |
	 | END_TAG State
	 |
	 | When the end tag is terminated, the state is popped to the state
	 | that was pushed at the start of the corresponding start tag.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 466:
YY_RULE_SETUP
#line 2822 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::TAG_END;
}
	YY_BREAK
/* maintain END_TAG */
/* ---------------- */
case 467:
/* rule 467 can match eol */
YY_RULE_SETUP
#line 2829 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	/* continue lexing */
}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 2833 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::QNAME;
}
	YY_BREAK
/* catch all else */
/* -------------- */
case 469:
YY_RULE_SETUP
#line 2840 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
  return token::UNRECOGNIZED;
}
	YY_BREAK
/* <MODE_END_TAG> */
/*______________________________________________________________________  
	 |
	 | XML_COMMENT State
	 | The "<--" token marks the beginning of an XML Comment, and the "-->"
	 | token marks the end. This allows no special interpretation of other
	 | characters in this state.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 470:
YY_RULE_SETUP
#line 2861 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::XML_COMMENT_END;
}
	YY_BREAK
/* maintain XML_COMMENT */
/* -------------------- */
case 471:
/* rule 471 can match eol */
YY_RULE_SETUP
#line 2868 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::XML_COMMENT_LITERAL;
}
	YY_BREAK
/* <MODE_XML_COMMENT> */
/*______________________________________________________________________  
	 |
	 | EXPR_COMMENT State
	 |
	 | The "(:" token marks the beginning of an expression Comment, and
	 | the ":)" token marks the end. This allows no special interpretation
	 | of other characters in this state.
	 |______________________________________________________________________*/

/* pop previous state */
/* ------------------ */
case 472:
YY_RULE_SETUP
#line 2891 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
}
	YY_BREAK
/* maintain EXPR_COMMENT */
/* --------------------- */
case 473:
YY_RULE_SETUP
#line 2897 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ MODE_EXPR_COMMENT, yyscanner);
}
	YY_BREAK
case 474:
/* rule 474 can match eol */
YY_RULE_SETUP
#line 2901 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	/* do nothing */
  // TODO: check if, indeed, nothing needs to be done
}
	YY_BREAK
/* <MODE_EXPR_COMMENT> */
/*______________________________________________________________________  
	 |
	 | PROCESSING_INSTRUCTION State
	 |
	 | In this state, only patterns that are legal in a processing
	 | instruction name are recognized.
	 |______________________________________________________________________*/

/* transition to PROCESSING_INSTRUCTION_CONTENT */
/* -------------------------------------------- */
case 475:
/* rule 475 can match eol */
YY_RULE_SETUP
#line 2923 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_PROCESSING_INSTRUCTION_CONTENT; 
	/* continue lexing */
}
	YY_BREAK
/* pop previous state on exit */
/* -------------------------- */
case 476:
YY_RULE_SETUP
#line 2930 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::PI_END;
}
	YY_BREAK
/* maintain PROCESSING_INSTRUCTION */
/* ------------------------------- */
case 477:
YY_RULE_SETUP
#line 2937 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	BEGIN MODE_PROCESSING_INSTRUCTION;
	return token::PI_TARGET_LITERAL;
}
	YY_BREAK
/* <MODE_PROCESSING_INSTRUCTION> */
/*______________________________________________________________________  
	 |
	 | PROCESSING_INSTRUCTION_CONTENT State
	 |
	 | In this state, only characters are that are legal in processing
	 | instruction content are recognized.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 478:
YY_RULE_SETUP
#line 2960 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::PI_END;
}
	YY_BREAK
/* maintain PROCESSING_INSTRUCTION_CONTENT */
/* --------------------------------------- */
case 479:
/* rule 479 can match eol */
YY_RULE_SETUP
#line 2967 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng-1);
  yyless(yyleng-1);
	return token::CHAR_LITERAL;
}
	YY_BREAK
/* <MODE_PROCESSING_INSTRUCTION_CONTENT> */
/*______________________________________________________________________  
	 |
	 | CDATA_SECTION State
	 |
	 | In this state, only lexemes that are legal in a CDATA section are
	 | recognized.
	 |______________________________________________________________________*/

/* pop previous state on exit */
/* -------------------------- */
case 480:
YY_RULE_SETUP
#line 2990 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_pop_state(yyscanner);
	return token::CDATA_END;
}
	YY_BREAK
/* maintain CDATA_SECTION */
/* ---------------------- */
case 481:
/* rule 481 can match eol */
YY_RULE_SETUP
#line 2997 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::CHAR_LITERAL;
}
	YY_BREAK
/* <MODE_CDATA_SECTION> */
/*______________________________________________________________________  
	 |
	 | QUOTE_ATTRIBUTE_CONTENT State
	 |
	 | This state allows content legal for attributes. The character "{"
	 | marks a transition to the INITIAL state, i.e. the start of an
	 | embedded expression, and the "}" character pops back to the original
	 | state.  To allow curly braces to be used as character content, a
	 | double left or right curly brace is interpreted as a single curly
	 | brace character. This state is the same as APOS_ATTRIBUTE_CONTENT,
	 | except that apostrophes are allowed without escaping, and an
	 | unescaped quote marks the end of the state.
	 |______________________________________________________________________*/

/* transition to START_TAG */
/* ----------------------- */
case 482:
YY_RULE_SETUP
#line 3025 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_START_TAG;
	return token::QUOTE;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 483:
YY_RULE_SETUP
#line 3032 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::LBRACE;
}
	YY_BREAK
/* maintain QUOTE_ATTRIBUTE_CONTENT */
/* -------------------------------- */
case 484:
YY_RULE_SETUP
#line 3039 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ESCAPE_QUOTE;
}
	YY_BREAK
case 485:
/* rule 485 can match eol */
YY_RULE_SETUP
#line 3043 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::QUOTE_ATTR_CONTENT;
}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 3048 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ENTITY_REF;
}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 3052 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_charref(yytext, yyleng);
	return token::CHAR_REF_LITERAL;
}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 3057 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 3061 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* <MODE_QUOTE_ATTRIBUTE_CONTENT> */
/*______________________________________________________________________  
	 |
	 | APOS_ATTRIBUTE_CONTENT State
	 |
	 | This state is the same as QUOT_ATTRIBUTE_CONTENT, except that
	 | quotes are allowed, and an unescaped apostrophe marks the end of
	 | the state.
	 |______________________________________________________________________*/

/* transition to START_TAG */
/* ----------------------- */
case 490:
YY_RULE_SETUP
#line 3083 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_START_TAG;
	return token::APOS;
}
	YY_BREAK
/* transition to INITIAL */
/* --------------------- */
case 491:
YY_RULE_SETUP
#line 3090 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	BEGIN MODE_APOS_ATTRIBUTE_CONTENT;
	yy_push_state( /*and goto*/ INITIAL, yyscanner);
	return token::LBRACE;
}
	YY_BREAK
/* maintain APOS_ATTRIBUTE_CONTENT */
/* ------------------------------- */
case 492:
YY_RULE_SETUP
#line 3098 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ESCAPE_APOS;
}
	YY_BREAK
case 493:
/* rule 493 can match eol */
YY_RULE_SETUP
#line 3102 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put(yytext, yyleng);
	return token::APOS_ATTR_CONTENT;
}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 3107 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::ENTITY_REF;
}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 3111 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	yylval->sval = driver.symtab.put_charref(yytext, yyleng);
	return token::CHAR_REF_LITERAL;
}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 3116 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DOUBLE_LBRACE;
}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 3120 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
{
	return token::DOUBLE_RBRACE;
}
	YY_BREAK
/* <MODE_APOS_ATTRIBUTE_CONTENT> */
case 498:
YY_RULE_SETUP
#line 3126 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"
ECHO;
	YY_BREAK
#line 8299 "xquery_scanner.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MODE_APOS_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_CDATA_SECTION):
case YY_STATE_EOF(MODE_CLOSE_KINDTEST):
case YY_STATE_EOF(MODE_DECLAREORDERING):
case YY_STATE_EOF(MODE_ELEMENT_CONTENT):
case YY_STATE_EOF(MODE_END_TAG):
case YY_STATE_EOF(MODE_EXPR_COMMENT):
case YY_STATE_EOF(MODE_ITEMTYPE):
case YY_STATE_EOF(MODE_KINDTEST):
case YY_STATE_EOF(MODE_KINDTESTFORPI):
case YY_STATE_EOF(MODE_NAMESPACEDECL):
case YY_STATE_EOF(MODE_NAMESPACEKEYWORD):
case YY_STATE_EOF(MODE_OCCURRENCE_INDICATOR):
case YY_STATE_EOF(MODE_OPERATOR):
case YY_STATE_EOF(MODE_OPTION):
case YY_STATE_EOF(MODE_PRAGMA):
case YY_STATE_EOF(MODE_PRAGMACONTENTS):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION_CTOR):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION_CONTENT):
case YY_STATE_EOF(MODE_QUOTE_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_SINGLETYPE):
case YY_STATE_EOF(MODE_START_TAG):
case YY_STATE_EOF(MODE_URITOOPERATOR):
case YY_STATE_EOF(MODE_VARNAME):
case YY_STATE_EOF(MODE_XMLSPACE_DECL):
case YY_STATE_EOF(MODE_XML_COMMENT):
case YY_STATE_EOF(MODE_XQUERY_VERSION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2478 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2478 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2477);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef _UNISTD_H /* assume unistd.h has isatty() for us */
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __THROW /* this is a gnuism */
extern int isatty (int ) __THROW;
#else
extern int isatty (int );
#endif
#ifdef __cplusplus
}
#endif
#endif
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  new_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
    static void yy_pop_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

/* %if-c-only */
    static int yy_top_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 3126 "/home/colea/work/xquery/src/compiler/parser/xquery_scanner.l"




/*
	Finally, because the scanner related driver's member function depend 
	on the scanner's data, it is simpler to implement them in this file. 
*/
namespace xqp {
  
void xquery_driver::parse_string( const char *query_string)
{  
  yyscan_t scanner;
  yylex_init(&scanner);
  struct yyguts_t * yyg = (struct yyguts_t*)scanner;

  YY_BUFFER_STATE str_buffer = yy_scan_string(query_string,scanner);

  yy_flex_debug = Properties::instance()->traceScanning();
  yy::xquery_parser parser(*this, scanner);
  parser.set_debug_level(Properties::instance()->traceParsing());
  parser.parse();

  yy_delete_buffer(str_buffer,scanner); /* free up memory */
  yylex_destroy(scanner);
}

void xquery_driver::parse(xqp_string const fname)
{    
  yyscan_t scanner;
  yylex_init(&scanner);
  struct yyguts_t * yyg = (struct yyguts_t*)scanner;
  
  filename = fname;
  
  if (!(yyin = fopen(((std::string)fname).c_str (), "r"))) {
    error (std::string("cannot open ") + (std::string)fname);
  }

  yy_flex_debug = Properties::instance()->traceScanning();
  yy::xquery_parser parser(*this, scanner);
  parser.set_debug_level(Properties::instance()->traceParsing());
  parser.parse();
  
  fclose(yyin);  
  yylex_destroy(&scanner);
}

}


std::string start_state(yyscan_t* yyscanner)
{  
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  
	switch (YY_START) {
	case INITIAL: return "INITIAL";
	case MODE_APOS_ATTRIBUTE_CONTENT: return "MODE_APOS_ATTRIBUTE_CONTENT";
	case MODE_CDATA_SECTION: return "MODE_CDATA_SECTION";
	case MODE_CLOSE_KINDTEST: return "MODE_CLOSE_KINDTEST";
	case MODE_DECLAREORDERING: return "MODE_DECLAREORDERING";
	case MODE_ELEMENT_CONTENT: return "MODE_ELEMENT_CONTENT";
	case MODE_END_TAG: return "MODE_END_TAG";
	case MODE_EXPR_COMMENT: return "MODE_EXPR_COMMENT";
	case MODE_ITEMTYPE: return "MODE_ITEMTYPE";
	case MODE_KINDTEST: return "MODE_KINDTEST";
	case MODE_KINDTESTFORPI: return "MODE_KINDTESTFORPI";
	case MODE_NAMESPACEDECL: return "MODE_NAMESPACEDECL";
	case MODE_NAMESPACEKEYWORD: return "MODE_NAMESPACEKEYWORD";
	case MODE_OCCURRENCE_INDICATOR: return "MODE_OCCURRENCE_INDICATOR";
	case MODE_OPERATOR: return "MODE_OPERATOR";
	case MODE_OPTION: return "MODE_OPTION";
	case MODE_PRAGMA: return "MODE_PRAGMA";
	case MODE_PRAGMACONTENTS: return "MODE_PRAGMACONTENTS";
	case MODE_PROCESSING_INSTRUCTION: return "MODE_PROCESSING_INSTRUCTION";
	case MODE_PROCESSING_INSTRUCTION_CONTENT: return "MODE_PROCESSING_INSTRUCTION_CONTENT";
	case MODE_QUOTE_ATTRIBUTE_CONTENT: return "MODE_QUOTE_ATTRIBUTE_CONTENT";
	case MODE_SINGLETYPE: return "MODE_SINGLETYPE";
	case MODE_START_TAG: return "MODE_START_TAG";
	case MODE_URITOOPERATOR: return "MODE_URITOOPERATOR";
	case MODE_VARNAME: return "MODE_VARNAME";
	case MODE_XMLSPACE_DECL: return "MODE_XMLSPACE_DECL";
	case MODE_XML_COMMENT: return "MODE_XML_COMMENT";
	case MODE_XQUERY_VERSION: return "MODE_XQUERY_VERSION";
	default: return "Something's drastically wrong here, unrecognized start state!\n";
	}  
}
/*
#define YY_USER_ACTION \
	{ \
		std::cout<<'<'<<start_state()<<"> "<<yytext<<""<<std::endl; \
		yylloc->columns(yyleng); \
	}
*/






