#line 2 "xquery_scanner.yy.cpp"

#line 4 "xquery_scanner.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ZorbaFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Zorbaalloc (yy_size_t  );
void *Zorbarealloc (void *,yy_size_t  );
void Zorbafree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "compiler/parser/FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 351
#define YY_END_OF_BUFFER 352
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1839] =
    {   0,
      286,  286,    0,    0,  286,  286,    0,    0,    0,    0,
      291,  291,  291,  291,  291,  291,  291,  291,    0,    0,
        0,    0,    0,    0,    0,    0,  326,  326,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  303,  303,
      321,  321,  352,  350,  286,  286,   10,  276,   18,   17,
       21,  276,    3,   12,   13,    7,    5,    6,   15,    8,
      263,   19,    4,  280,  195,  205,   16,   11,  269,  269,
      269,  133,  134,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  284,  223,  285,

      350,  350,  350,    2,    2,    2,  345,  345,  350,  342,
      343,  350,  337,  337,  334,  350,  335,  350,  292,  291,
      291,  291,  292,  287,  289,  292,  292,  292,  288,  292,
      292,  292,  350,  351,  350,  313,  313,  350,  312,  308,
      350,  351,  318,  319,  350,  350,  350,  324,  324,  325,
      325,  325,  326,  326,  350,  297,  297,  350,  350,  350,
      350,  350,  350,  350,  350,  351,  350,  329,  329,  350,
      350,  331,  350,  350,  350,  350,  351,  350,  306,  303,
      303,  303,  300,  301,  306,  302,  299,  305,  306,  306,
      306,  321,  321,  350,  286,  212,  276,  274,  276,  271,

      271,    0,    0,    0,  276,  276,  274,  283,  282,    0,
       14,  264,    9,  264,  263,  266,  266,   20,  193,    0,
      210,  209,  278,  203,  204,  269,    0,    0,    0,    0,
      269,    0,  136,  269,  269,  269,  269,  269,   86,   84,
      269,  269,  269,  269,  269,  214,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  197,  269,  269,  269,  269,
      269,  269,  269,  198,  269,  199,  269,   29,  269,  151,
      208,  269,  269,  269,  269,  200,  269,  269,  201,  269,
      269,  269,  269,  269,  202,  174,  269,  269,  231,  124,
      269,  216,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  221,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  135,  137,   22,
      138,  269,    0,    0,    0,  345,    0,    0,    0,    0,
        0,    0,  344,  348,  349,  337,  336,    0,    0,    0,
        0,    0,    0,  340,  341,  291,  290,  287,    0,    0,
        0,    0,  287,    0,    0,  288,    0,    0,    0,  288,
        0,    0,    0,    0,    0,  313,    0,    0,    0,    0,
        0,    0,    0,  307,  310,  316,  317,  319,  319,    0,
        0,    0,    0,  319,    0,    0,  324,  323,  322,  326,

      327,  328,  327,  297,    0,    0,    0,    0,    0,    0,
      293,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  298,  329,    0,    0,  330,  331,
        0,    0,    0,  331,    0,    0,    0,    0,  332,  303,
      304,  305,    0,    0,    0,    0,  305,    0,    0,  321,
        0,  321,    0,  276,  275,  276,  276,  276,  276,  276,
      276,  271,    0,    0,    0,    0,    0,  271,    0,    0,
      276,  276,  275,  276,  276,  276,  276,  276,  281,  273,
        0,    0,    0,    0,  264,  266,    0,  265,    0,    0,
      267,  269,    0,    0,    0,  269,    0,    0,  104,    0,

        0,    0,  269,  152,  269,  245,  154,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  194,  269,  269,  269,  269,  269,  156,
      269,  269,  269,  269,  269,  269,  269,  269,  269,   64,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  129,  269,
      269,  240,  269,   65,  269,  269,  269,  269,  269,  269,
      269,  211,  269,  269,  269,  269,  269,  269,  118,  150,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,   37,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,   87,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,    0,    0,    1,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  287,
        0,    0,    0,  287,    0,    0,    0,  288,    0,    0,
        0,  333,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  319,    0,    0,    0,  319,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  295,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  298,    0,    0,  331,
        0,    0,    0,  305,    0,    0,    0,  305,    0,    0,
        0,  321,  320,  276,  276,  276,  276,  276,  276,  276,
      271,    0,    0,    0,  271,    0,    0,    0,    0,    0,
        0,  276,  276,  276,  276,  276,  276,  276,  273,    0,
        0,    0,  273,    0,    0,  265,  277,    0,  269,    0,
        0,    0,  269,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  268,  270,    0,    0,    0,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  160,
      251,  269,  269,  269,  269,  269,  269,  269,  233,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  243,  269,  269,  269,  269,  269,  269,  269,   31,
      269,  269,  269,  269,  170,  269,  269,  269,  148,  269,
      269,  269,  269,  206,  269,  269,  269,  269,  269,  269,
      269,  235,  250,  139,  132,  269,  256,  269,  269,  269,
       34,  269,  269,  269,  269,  269,  269,  158,  269,  269,
       70,  269,  269,   53,  269,  269,  269,   71,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  180,
      269,  269,  269,   98,  269,  269,  269,  269,  241,  269,
       75,  269,  269,  269,  190,  269,  269,  269,   43,  242,
      269,  269,  269,  269,   39,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,   72,  269,  269,  269,
      269,   32,  155,  269,  269,  347,    0,    0,  346,    0,
        0,  339,    0,    0,  338,    0,    0,  287,    0,    0,
        0,  287,    0,    0,    0,    0,  333,    0,  315,    0,
        0,  314,    0,    0,  309,    0,  319,    0,    0,    0,
      319,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  305,    0,    0,    0,  305,    0,    0,    0,
      276,  276,  276,  276,  271,    0,    0,    0,  271,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  272,    0,
        0,    0,  276,  276,  276,  276,  273,    0,    0,    0,
        0,  269,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  270,    0,    0,    0,  270,    0,    0,  236,
      269,  269,  269,  144,  269,  269,  269,  269,  269,  269,

       33,  269,  257,  128,   90,  269,  269,  269,  111,  269,
      269,  269,  269,   73,  269,  269,  269,  269,  269,  269,
      269,  108,  269,  269,  269,  258,  269,  269,  269,   76,
      269,  269,  269,  255,  269,  269,  269,  269,  147,  149,
      269,  269,  269,  213,  269,  116,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  157,  269,  217,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  234,  269,
      269,  269,  269,   58,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  113,  122,  269,  269,  269,
      269,  269,  269,  269,  269,  181,  269,  269,  269,  269,

      269,  269,  159,  269,  269,  226,  269,  269,  269,  184,
      254,  269,  269,  222,  269,  269,  269,  269,   74,  269,
      230,  269,  269,  269,  224,   36,  269,  269,  269,  153,
      269,  269,    0,    0,  287,    0,    0,    0,    0,    0,
      319,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  294,    0,    0,    0,    0,    0,    0,    0,  305,
        0,    0,    0,  271,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  272,    0,    0,    0,  272,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  270,    0,
        0,    0,  269,  269,  140,  269,  269,  269,  269,  237,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  228,  269,  269,  269,  269,  269,
      269,  269,  269,  167,  269,  269,  196,  269,  269,  269,
      269,  269,  269,  269,  269,  269,   61,  269,  269,  269,
      227,  269,  269,  269,  269,  269,  172,  269,  269,  269,
      269,  238,   24,  269,  269,  269,  269,  145,  175,  218,
       83,  269,  269,  269,   95,  269,  269,  269,  178,  269,
      269,  269,  269,  269,  269,  269,  232,  269,  219,  269,

      269,   62,  269,  269,  269,   46,  269,  215,  269,  239,
      269,   40,  269,  269,  269,  117,  269,  269,  269,  269,
      269,  269,  186,  269,  187,  269,   81,  269,    0,    0,
        0,  296,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  272,    0,    0,    0,    0,    0,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,   44,  269,
      269,  269,  168,   77,  269,  269,  269,   23,   57,  269,
      269,  269,  269,  269,   25,  269,  269,  269,  169,  269,
      269,  130,  131,  269,  269,  125,  269,  269,  269,  246,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      114,  269,  269,  269,   49,  269,  269,  269,  269,  105,
      269,  269,  269,  269,  269,  269,  269,  229,  269,  269,
      269,  269,  269,  269,  269,   67,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,   82,  269,  188,  269,
        0,    0,    0,    0,    0,   66,   89,  269,  269,  269,
      269,   60,  269,  252,  269,  269,  269,  269,  146,   35,
      269,  269,  269,  269,  269,  269,  166,   42,  269,  262,
      123,  244,  269,  269,   45,  259,  269,  102,  269,  253,
      269,  269,  269,  171,  269,  269,  119,  269,  269,  269,

      269,   80,  269,  269,  269,  141,  269,  225,   69,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  182,  269,
      189,  269,  269,   68,  269,  269,   47,  269,   38,   78,
      269,  269,    0,  279,  269,  269,  260,   26,  269,  269,
       59,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      165,  269,  269,   94,  163,  269,  269,  126,  207,  142,
      173,  269,  269,   28,  269,  269,  176,  269,  106,   97,
      269,  115,  269,   30,  269,  220,  269,  269,  162,  183,
      269,  269,  191,  269,   50,  185,  192,  269,  311,  269,
      269,  269,  269,  110,  127,  269,  269,  269,  269,   92,

      261,  164,  269,  269,  269,  269,  269,  121,  103,  269,
      247,  269,  177,  269,  269,  269,  269,  269,  269,  269,
       48,  269,   41,  107,  269,  112,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  161,  269,  248,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,   56,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  179,   85,  269,  269,  269,  269,
      120,  269,  269,  269,  269,  269,   54,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,   79,  269,
       99,  269,  269,  249,  269,  269,   55,  269,  269,  269,

      269,   51,  269,  269,   63,  269,  269,  269,  269,  269,
      269,  269,  269,  143,   88,  269,  269,  269,  269,  269,
      269,  269,   52,  100,  269,   93,  269,  109,   96,  269,
       91,  101,  269,  269,  269,  269,   27,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   29,
       33,   33,   33,   33,   33,   33,   33,   34,   33,   33,
       35,   33,   33,   36,   33,   33,   33,   33,   33,   33,
       37,   38,   39,   38,   40,   38,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   38,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   74,
       74,   74,   74,   74,   74,   74,   74,   38,   38,   38,
       38,   38,   38,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    2,    3,    4,    5,    6,    4,    4,    7,
        8,    9,    9,   10,    4,    4,   11,   12,    4,   13,
       14,   15,    7,    4,    4,    4,    4,   16,   16,   16,
       16,   16,   17,   17,   17,   17,    4,    4,    4,   17,
       16,   16,   16,   16,   16,   16,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   18,    4,    7,    4,
        4,   19,   19,   19
    } ;

static yyconst flex_int16_t yy_base[1970] =
    {   0,
        0,    0,   72,   73,    0,    0,   80,   84,   95,  105,
      174,    0,    0,    0,  248,    0,    0,    0,  109,  113,
      322,  326,  395,    0,  117,  119,   79,   83, 4011, 4010,
      469,    0,  120,  132,  543,    0,  140,  330,  617,    0,
      153,  334, 4005, 9607,  156,  165, 3980,   83, 9607, 9607,
      289,   67,  321, 9607, 3968, 9607, 9607, 9607,  143, 3968,
      321,  113, 9607,  341, 9607,  101, 9607, 9607,  671,  674,
      682, 9607, 3914,  736,  695,  327,  329,  749,  652,  663,
      745,  699,  690,  771,  783,  664,  804,  816,  704,  798,
      827,  848,  845,  850,  875,  854,  862,   82,   77, 9607,

     3910, 3908, 3904, 9607, 9607, 3967,    0,    0,  891, 3956,
     3899, 3886,    0,    0, 3945,  903, 3863, 3855, 9607,  355,
      377,  696, 3902,  711, 9607, 3847, 3846, 3839,  665, 3831,
     3825, 3824, 3843, 3842,  315,    0,    0,  915,  350, 3801,
     3798, 9607, 9607,  949, 3791, 3790, 3777,    0,    0, 3826,
     9607, 3824,    0,    0,  152,  777,  831,  337,  716,  961,
      971, 3763, 3749, 3748, 3799, 3796,  337,  977,  981, 3771,
     3766,  914, 3706, 3702, 3701, 3739, 3737,  705, 9607,  992,
      995,  998, 9607, 9607, 3724, 9607, 9607,  933, 3676, 3668,
     3667, 3714, 3713, 3706, 1006, 9607,  342, 3716, 1005,  945,

      982, 3649, 3637, 3636,  723, 1017, 3690, 9607, 3630,  941,
     9607,  755, 9607,  795, 1021,    0,  922, 9607, 9607,  677,
     9607, 9607, 9607, 9607, 9607, 1004,  957, 3624, 3623, 3621,
     1016,  692, 9607, 1019, 1011, 1051, 1026, 1039, 1030, 1046,
     1054, 1075, 1059, 1080, 1065, 1086, 1096, 1101, 1124, 1136,
     1140, 1119, 1144, 1150, 1183, 1173, 1180, 1190, 1163, 1186,
     1194, 1244, 1219, 1230, 1250, 1207, 1257, 1253, 1265, 1299,
     1261, 1291, 1294, 1279, 1320, 1329, 1327, 1299, 1334, 1348,
     1356, 1339, 1364, 1361, 1375, 1398, 1382, 1388, 1395, 1405,
     1422, 1402, 1429, 1432, 1442, 1438, 1462, 1419, 1459, 1467,

     1485, 1501, 1498, 1508, 1504, 1519, 1526, 1549, 1523, 1542,
     1536, 1559, 1545, 1580, 1567, 1590, 1606, 1603, 1564, 1613,
     1584, 1623, 1639, 1638, 1609, 1628, 1645, 9607, 9607, 9607,
     9607, 1648, 3620, 3610, 3669,    0,  722,  330, 3597, 3587,
     3592, 3572, 9607, 9607, 9607,    0, 9607,  773,  798, 3571,
     3566, 3583, 3556, 9607, 9607, 1140, 9607, 1652, 1203, 3545,
     3543, 3542, 1672, 3540, 3539, 1215, 3537, 3533, 3532, 1235,
     3530, 3528, 3554,  855,  861,    0,  857,  799, 3532, 3530,
     3537, 3515,  912, 9607, 9607, 9607, 9607, 1482, 1702, 1510,
     3504, 3499, 3498, 1706, 3477, 3473,    0, 9607, 9607,    0,

     9607, 9607,  738, 1712,  367,  867, 1700,  936, 1730,   81,
     1726, 3520, 1729, 1666, 3459, 3448, 3443,  815, 1760, 3441,
     3440, 3499,  918, 1013, 9607, 1756, 3484, 3482, 9607, 1716,
     3425, 3424, 3422, 1719, 3421, 3402, 3425,  933, 9607, 1792,
     9607, 1732, 1725, 3374, 3372, 3366, 1735, 3364, 3362, 3411,
        0, 3410, 3400, 3418, 3416,  984, 1759, 1010, 1021,  935,
      746, 1745, 1748, 3347, 3344, 3338,  892, 1751, 3337, 3334,
     3392, 1750, 3391, 1110,  854, 1076, 1230,  713, 9607, 1754,
     3326, 3325, 3320, 1796, 1498,    0, 3370, 3361, 3363, 3339,
     9607, 1757, 3284, 3277, 3275, 1764, 3272, 3271, 1779, 1098,

     1803, 1769, 1814, 1818, 1824, 1827, 1833, 1837, 1840, 1844,
     1850, 1847, 1858, 1872, 1883, 1894, 1904, 1907, 1915, 1918,
     1921, 1912, 1938, 1931, 1948, 1978, 1941, 1962, 1985, 1988,
     1995, 1951, 2005, 1998, 2012, 2021, 2008, 2016, 2028, 2024,
     2042, 2034, 2045, 2066, 2078, 2071, 2083, 2089, 2101, 2092,
     2105, 2112, 2115, 2121, 2125, 2128, 2147, 2139, 2161, 2169,
     2151, 2182, 2187, 2193, 2208, 2218, 2175, 2197, 2205, 2211,
     2229, 2223, 2241, 2236, 2253, 2267, 2272, 2278, 2283, 2286,
     2300, 2314, 2308, 2297, 2321, 2332, 2327, 2344, 2341, 2356,
     2363, 2370, 2375, 2381, 2389, 2400, 2411, 2404, 2448, 2386,

     2430, 2454, 2445, 2420, 2459, 2465, 2469, 2474, 2477, 2484,
     2493, 2480, 2487, 2490, 2519, 2509, 2547, 2523, 2502, 2552,
     2557, 2565, 2569, 2590, 2580, 2584, 2573, 2595, 2606, 2623,
     2614, 2577, 2602, 2639, 2644, 2649, 2652, 2662, 2669, 2673,
     2679, 2684, 2708, 2716, 2711, 2687, 2727, 2733, 2743, 2749,
     2723, 2753, 3269, 3333, 9607,  368,    0, 3266, 3266, 3297,
     3259, 3259, 1210,    0, 3255, 3251, 3278, 3240, 3232, 1790,
     3207, 3201, 3174, 2757, 3171, 3169, 3153, 1802, 3152, 3145,
     3143, 9607, 1090, 1274,    0, 3153, 3153, 3181, 3111, 3114,
     3144, 3122, 2800, 3077, 3075, 3073, 2807, 3069, 3068, 3062,

     1811, 1045, 1257, 3060, 3059, 3073, 3052, 1250, 1325, 3045,
     3044, 3044, 3024, 9607, 2830, 3008, 3001, 3000, 2836, 2998,
     2986, 1173, 2265, 1966, 2980, 3035, 3034, 3017, 1151, 1974,
     2958, 2951, 2945, 2143, 2943, 2938, 2937, 2773, 2932, 2931,
     2929, 2982, 9607, 1729, 2905, 1213, 1145,  149,  808, 1242,
     2258, 2918, 2917, 2905, 2777, 2897, 2896, 1273, 2807, 2350,
     2894, 1918, 2941,   86, 1433,  349, 1345, 1454, 2497, 2893,
     2888, 2884, 2515, 2883, 2874, 2923, 9607, 2907, 2530, 2849,
     2848, 2841, 2619, 2836, 2829, 2820, 1478, 1334, 2830, 2810,
     2827, 2806, 9607, 2746, 2792, 2789, 2787, 2820, 2803, 2823,

     2814, 2841, 2844, 2850, 2868, 2884, 2905, 2918, 2923, 2932,
     2939, 2945, 2973, 2954, 2980, 2986, 2960, 2994, 3019, 2989,
     3002, 3009, 3016, 3027, 3035, 3044, 3049, 3052, 3023, 3057,
     3082, 3063, 3077, 3090, 3085, 3093, 3107, 3111, 3117, 3120,
     3139, 3126, 3132, 3147, 3153, 3161, 3157, 3181, 3174, 3189,
     3186, 3197, 3194, 3201, 3207, 3218, 3222, 3230, 3235, 3211,
     3265, 3243, 3256, 3280, 3277, 3284, 3289, 3299, 3292, 3310,
     3303, 3320, 3314, 3326, 3347, 3339, 3358, 3368, 3374, 3380,
     3383, 3396, 3386, 3402, 3393, 3405, 3417, 3408, 3428, 3413,
     3451, 3443, 3463, 3467, 3473, 3483, 3478, 3486, 3489, 3500,

     3508, 3522, 3533, 3492, 3511, 3547, 3556, 3565, 3570, 3577,
     3581, 3588, 3591, 3594, 3597, 3603, 3611, 3606, 3614, 3624,
     3631, 3638, 3653, 3661, 3668, 3672, 3678, 3681, 3685, 3688,
     3695, 3711, 3716, 3722, 3727, 3743, 3750, 3735, 3754, 3708,
     3757, 3766, 3791, 3772, 3784, 3777, 3781, 3797, 3814, 3800,
     3811, 3820, 3831, 3839, 3859, 2846, 2833, 2794, 9607, 2796,
     2782, 2826, 2791, 2753, 9607, 2736, 2727, 2811, 2715, 2708,
     2705, 2855, 2704, 2702, 2701, 2695, 2723, 1564, 2745, 2728,
     2690, 9607, 2682, 2671, 9607, 2699, 3875, 2649, 2648, 2644,
     3896, 2638, 2636, 2631, 3515, 2630, 2628, 2627, 1405,    0,

     2629, 2629, 2650, 2612, 2606, 1504,    0, 2580, 2573, 2595,
     2556, 2557, 3912, 2539, 2529, 2528, 3918, 2514, 2509, 2508,
     1606, 1595, 2512, 2464, 2470, 2446, 3904, 2429, 2428, 2425,
     1298, 2418, 2858, 2416, 2411, 2400, 3103, 2399, 2397, 2396,
     3987, 1888, 1389, 1326, 3164, 2386, 2379, 2369, 3253, 2368,
     2362, 2355, 1722, 1793, 2360, 2359, 2370, 2350, 3260, 2338,
     2332, 2327, 4023, 1346,  685, 1290, 3454, 2326, 2319, 2314,
     2351, 3645, 2307, 2296, 2293, 1545,    0, 2298, 2294, 2321,
     2277, 2279, 3854, 2262, 2253, 2249, 3862, 2240, 2234, 3868,
     3880, 3922, 3929, 3888, 3953, 3938, 3967, 3985, 3999, 4015,

     3950, 4021, 4026, 4029, 4039, 4049, 4053, 4056, 4059, 4065,
     4070, 4086, 4094, 4083, 4120, 4114, 4097, 4129, 4124, 4132,
     4141, 4144, 4154, 4162, 4158, 4168, 4174, 4179, 4188, 4198,
     4204, 4208, 4201, 4212, 4224, 4236, 4217, 4228, 4233, 4242,
     4245, 4262, 4248, 4274, 4271, 4278, 4283, 4290, 4306, 4309,
     4312, 4303, 4328, 4319, 4332, 4316, 4337, 4346, 4351, 4374,
     4377, 4382, 4387, 4391, 4401, 4406, 4395, 4412, 4409, 4416,
     4437, 4445, 4449, 4471, 4456, 4466, 4474, 4478, 4481, 4486,
     4492, 4512, 4503, 4515, 4521, 4528, 4536, 4541, 4548, 4553,
     4560, 4557, 4569, 4578, 4595, 4583, 4586, 4591, 4607, 4602,

     4616, 4627, 4619, 4633, 4623, 4641, 4650, 4656, 4664, 4645,
     4673, 4677, 4681, 4687, 4690, 4695, 4699, 4713, 4706, 4736,
     4710, 4749, 4720, 4744, 4753, 4760, 4774, 4767, 4777, 4780,
     4790, 4784, 2287, 2280, 3865, 2215, 2205, 2204, 2245, 2218,
     4810, 2174, 2159, 2139, 2196, 3884, 2134, 2120, 2110, 4367,
     2099, 2088, 2132, 2088, 2085, 2075, 2112, 2066, 2064, 2052,
     4863, 2040, 2034, 1993, 1850,    0, 2000, 1999, 2022, 1984,
     1977, 3942, 4833, 1947, 1946, 1937, 4840, 1930, 1904, 3891,
     1890, 1883, 1882, 3926, 1872, 1870, 1863, 1858,    0, 1870,
     1840, 1855, 1808, 1811, 4009, 1785, 1776, 1769, 4499, 1702,

     1698, 1684, 1712, 1672, 1712, 1615, 1612, 1590, 4787, 1572,
     1564, 1558, 4824, 4847, 4803, 4850, 4866, 4858, 4870, 4873,
     4883, 4896, 4880, 4889, 4904, 4930, 4912, 4937, 4946, 4951,
     4954, 4961, 4969, 4972, 4966, 4977, 4987, 4984, 4994, 5001,
     5009, 5027, 5031, 5015, 5042, 5055, 5049, 5069, 5058, 5063,
     5072, 5075, 5085, 5098, 5092, 5113, 5088, 5117, 5132, 5135,
     5142, 5152, 5147, 5155, 5158, 5176, 5161, 5172, 5189, 5201,
     5182, 5196, 5215, 5219, 5226, 5231, 5222, 5236, 5239, 5244,
     5250, 5257, 5261, 5265, 5269, 5286, 5276, 5293, 5298, 5306,
     5315, 5311, 5325, 5331, 5341, 5336, 5347, 5355, 5373, 5380,

     5385, 5390, 5395, 5405, 5410, 5402, 5414, 5417, 5439, 5422,
     5444, 5428, 5434, 5450, 5460, 5464, 5477, 5489, 5498, 5482,
     5493, 5504, 5507, 5510, 5519, 5525, 5531, 5538, 1557, 1566,
     1516, 9607, 4800, 1515, 1500, 1477, 1428, 1459, 1414, 1410,
     1391, 5571, 1347, 1346, 1257, 1219, 1158, 1198, 1146, 1134,
     1075, 4816, 1059,  997,  990, 1014,  965, 5543, 5548, 5568,
     5565, 5574, 5579, 5586, 5592, 5604, 5608, 5612, 5597, 5634,
     5629, 5615, 5641, 5646, 5652, 5658, 5673, 5670, 5677, 5688,
     5684, 5700, 5691, 5695, 5706, 5714, 5719, 5731, 5727, 5750,
     5754, 5760, 5763, 5774, 5777, 5768, 5785, 5791, 5788, 5794,

     5809, 5798, 5818, 5831, 5834, 5852, 5855, 5859, 5865, 5868,
     5872, 5875, 5878, 5889, 5881, 5922, 5900, 5894, 5936, 5939,
     5943, 5949, 5954, 5959, 5965, 5968, 5971, 5962, 5998, 5983,
     6008, 6028, 5986, 6033, 6025, 6040, 6043, 6046, 6062, 6056,
     6065, 6087, 6074, 6068, 6105, 6110, 6071, 6128, 6090, 6133,
      963,  905,  841,  771,  793, 6101, 6136, 6144, 6147, 6150,
     6160, 6155, 6168, 6165, 6171, 6175, 6192, 6210, 6178, 6183,
     6214, 6232, 6239, 6242, 6246, 6250, 6253, 6256, 6260, 6264,
     6269, 6273, 6288, 6277, 6280, 6300, 6323, 6318, 6327, 6334,
     6337, 6343, 6359, 6346, 6349, 6368, 6354, 6377, 6384, 6365,

     6372, 6362, 6404, 6422, 6426, 6432, 6438, 6441, 6444, 6447,
     6458, 6463, 6481, 6466, 6470, 6486, 6504, 6512, 6520, 6524,
     6476, 6530, 6540, 6543, 6546, 6551, 6559, 6562, 6566, 6569,
     6585, 6579,  669, 9607, 6590, 6608, 6600, 6605, 6625, 6616,
     6628, 6633, 6644, 6647, 6650, 6640, 6663, 6655, 6704, 6671,
     6682, 6710, 6689, 6717, 6720, 6726, 6739, 6731, 6736, 6744,
     6747, 6751, 6760, 6754, 6775, 6767, 6785, 6801, 6781, 6821,
     6809, 6794, 6815, 6824, 6829, 6839, 6844, 6855, 6848, 6851,
     6858, 6863, 6869, 6878, 6884, 6887, 6893, 6912, 9607, 6917,
     6923, 6926, 6947, 6932, 6941, 6952, 6955, 6958, 6961, 6966,

     6971, 6980, 6987, 6991, 6997, 7001, 7027, 7016, 7020, 7030,
     7034, 7037, 7041, 7056, 7046, 7059, 7074, 7062, 7066, 7100,
     7070, 7105, 7077, 7095, 7120, 7124, 7131, 7134, 7137, 7140,
     7149, 7143, 7164, 7155, 7179, 7169, 7174, 7199, 7203, 7210,
     7213, 7218, 7229, 7223, 7234, 7240, 7248, 7245, 7277, 7259,
     7283, 7288, 7294, 7302, 7306, 7313, 7309, 7320, 7317, 7324,
     7351, 7348, 7331, 7356, 7327, 7363, 7367, 7390, 7386, 7381,
     7393, 7397, 7406, 7412, 7427, 7417, 7422, 7431, 7435, 7440,
     7452, 7461, 7467, 7456, 7471, 7489, 7497, 7485, 7500, 7506,
     7510, 7515, 7526, 7529, 7532, 7535, 7539, 7556, 7545, 7565,

     7571, 7574, 7589, 7594, 7599, 7602, 7605, 7611, 7620, 7614,
     7628, 7631, 7669, 7634, 7637, 7660, 7643, 7649, 7676, 7698,
     7691, 7705, 7708, 7714, 7723, 7718, 7726, 7730, 7733, 7740,
     7736, 7746, 7755, 7752, 7768, 7790, 7764, 9607, 7864, 7883,
     7902, 7921, 7940, 7959, 7978, 7997, 8016, 8035, 8054, 8073,
     8077, 8096, 8104, 8111, 8129, 8147, 8156, 8165, 8183, 8201,
     8219, 8238, 8257, 8276, 8295, 8314, 8332, 8350, 8359, 8377,
     8386, 8404, 8422, 8441, 8460, 8469, 8488, 8507, 8511, 8519,
     8524, 8531, 8541, 8560, 8579, 8597, 8615, 8624, 8628, 8637,
     8655, 8673, 8691, 8695, 8714, 8733, 8752, 8771, 8790, 8808,

     8812, 8831, 8849, 8867, 8886, 8895, 8913, 8922, 8926, 8944,
     8962, 8980, 8999, 9008, 9012, 9031, 9050, 9059, 9066, 9073,
     9082, 9101, 9111, 9130, 1935, 1947, 9139, 9148, 9157, 9175,
     1958, 9193, 9211, 9215, 9233, 9251, 9270, 9274, 9292, 9311,
     9320, 9329, 9338, 9356, 9375, 9384, 9393, 9412, 9416, 9435,
     9444, 9453, 9462, 9471, 9478, 9482, 9488, 9506, 9513, 9528,
     9542, 2108, 2114, 9560, 9578, 9587, 2116, 2191, 2224
    } ;

static yyconst flex_int16_t yy_def[1970] =
    {   0,
     1838,    1, 1839, 1839,    1,    1, 1840, 1840, 1841, 1841,
     1838,   11,   11,   11, 1838,   15,   15,   15, 1842, 1842,
     1843, 1843, 1838,   23, 1844, 1844, 1845, 1845, 1846, 1846,
     1838,   31, 1847, 1847, 1838,   35, 1848, 1848, 1838,   39,
     1849, 1849, 1838, 1838, 1838, 1838, 1838, 1850, 1838, 1838,
     1851, 1852, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1853, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1854, 1854,
     1854, 1838, 1838, 1854, 1854,   75,   75, 1854,   75,   75,
     1854, 1854, 1854,   75,   75,   75,   75,   75, 1854,   75,
       75,   75, 1854,   75,   75, 1854, 1854, 1838, 1838, 1838,

     1838, 1838, 1838, 1838, 1838, 1838, 1855, 1855, 1838, 1838,
     1838, 1838, 1856, 1856, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1857, 1838, 1838, 1838, 1838, 1858, 1838,
     1838, 1838, 1859, 1859, 1859, 1860, 1860, 1838, 1838, 1838,
     1838, 1838, 1838, 1861, 1838, 1838, 1838, 1862, 1862, 1838,
     1838, 1838, 1863, 1863, 1864, 1838, 1838, 1865, 1866, 1867,
     1867, 1838, 1838, 1838, 1868, 1868, 1868, 1838, 1838, 1838,
     1838, 1869, 1838, 1838, 1838, 1870, 1870, 1870, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1871, 1838, 1838,
     1838, 1872, 1872, 1873, 1838, 1838, 1874, 1838, 1875, 1876,

     1876, 1838, 1838, 1838, 1877, 1878, 1838, 1838, 1838, 1879,
     1838, 1838, 1838, 1838, 1880, 1881, 1881, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1882, 1883, 1838, 1838, 1838,
     1882, 1884, 1838, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,  251,
     1882, 1882, 1882, 1882, 1882,  251, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,  249,

      249, 1882,  249,  249, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882,  249, 1882, 1882, 1882, 1838, 1838, 1838,
     1838, 1882, 1838, 1838, 1885, 1886, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1887, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1888, 1889, 1838,
     1838, 1838, 1888, 1838, 1838, 1890, 1838, 1838, 1838, 1890,
     1838, 1838, 1891, 1891, 1891, 1892, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1893, 1894,
     1838, 1838, 1838, 1893, 1838, 1838, 1895, 1838, 1838, 1896,

     1838, 1838, 1897, 1838, 1898, 1838, 1838, 1899, 1838, 1838,
     1838, 1838, 1900, 1901, 1838, 1838, 1838, 1902, 1900, 1838,
     1838, 1903, 1903, 1904, 1838, 1838, 1838, 1905, 1838, 1906,
     1838, 1838, 1838, 1906, 1838, 1838, 1907, 1907, 1838, 1838,
     1838, 1908, 1909, 1838, 1838, 1838, 1908, 1838, 1838, 1910,
     1911, 1912, 1838, 1913, 1838, 1913, 1913, 1913, 1913, 1913,
     1913, 1914, 1915, 1838, 1838, 1838, 1916, 1914, 1838, 1838,
     1917, 1917, 1838, 1917, 1917, 1917, 1917, 1917, 1838, 1918,
     1838, 1838, 1838, 1838, 1838, 1919, 1838, 1919, 1838, 1838,
     1838, 1920, 1838, 1838, 1838, 1921, 1838, 1838, 1921, 1922,

     1838, 1923, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,

     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
     1921, 1921, 1838, 1924, 1838, 1838, 1925, 1838, 1838, 1838,
     1838, 1838, 1838, 1926, 1838, 1838, 1838, 1838, 1838, 1927,
     1838, 1838, 1838, 1928, 1838, 1838, 1838, 1929, 1838, 1838,
     1838, 1838, 1930, 1838, 1931, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1932, 1838, 1838, 1838, 1933, 1838, 1838, 1838,

     1934, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1935, 1838, 1838, 1838, 1936, 1838,
     1838, 1937, 1838, 1938, 1838, 1939, 1939, 1940, 1940, 1941,
     1838, 1838, 1838, 1942, 1838, 1838, 1838, 1943, 1838, 1838,
     1838, 1944, 1838, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1946, 1838, 1838, 1838, 1947, 1838, 1838, 1948, 1838, 1949,
     1838, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1951, 1838,
     1838, 1838, 1951, 1838, 1838, 1838, 1838, 1838, 1952, 1838,
     1838, 1838, 1952, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1953, 1838, 1838, 1838, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1838, 1955, 1838, 1838, 1838,
     1838, 1838, 1956, 1838, 1838, 1838, 1838, 1957, 1838, 1838,
     1838, 1957, 1838, 1838, 1838, 1838, 1958, 1958, 1838, 1959,
     1838, 1838, 1838, 1838, 1838, 1838, 1960, 1838, 1838, 1838,
     1960, 1838, 1838, 1838, 1961, 1838, 1838, 1838, 1838, 1962,

     1838, 1838, 1838, 1838, 1838, 1838, 1963, 1838, 1838, 1838,
     1838, 1838, 1964, 1838, 1838, 1838, 1964, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1965, 1838, 1838, 1838,
     1940, 1838, 1942, 1838, 1838, 1838, 1942, 1838, 1838, 1838,
     1945, 1945, 1945, 1945, 1946, 1838, 1838, 1838, 1946, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1966, 1838,
     1838, 1838, 1950, 1950, 1950, 1950, 1951, 1838, 1838, 1838,
     1838, 1952, 1838, 1838, 1838, 1838, 1967, 1838, 1838, 1838,
     1838, 1838, 1953, 1838, 1838, 1838, 1953, 1838, 1838, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1838, 1838, 1957, 1838, 1838, 1838, 1838, 1838,
     1960, 1838, 1838, 1838, 1838, 1961, 1838, 1838, 1838, 1961,
     1838, 1838, 1962, 1838, 1838, 1838, 1963, 1838, 1838, 1838,
     1964, 1838, 1838, 1838, 1838, 1968, 1838, 1838, 1838, 1838,
     1838, 1838, 1965, 1838, 1838, 1838, 1965, 1838, 1838, 1942,
     1838, 1838, 1838, 1946, 1838, 1838, 1838, 1838, 1969, 1838,
     1838, 1838, 1838, 1838, 1966, 1838, 1838, 1838, 1966, 1838,

     1838, 1838, 1838, 1838, 1967, 1838, 1838, 1838, 1953, 1838,
     1838, 1838, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1838, 1838,
     1838, 1838, 1961, 1838, 1838, 1838, 1838, 1968, 1838, 1838,
     1838, 1965, 1838, 1838, 1838, 1838, 1838, 1969, 1838, 1838,
     1838, 1966, 1838, 1838, 1838, 1838, 1838, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1838, 1838, 1838, 1838, 1838, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1838, 1838, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1838, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,

     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954,    0, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,

     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838
    } ;

static yyconst flex_int16_t yy_nxt[9682] =
    {   0,
       44,   45,   46,   45,   47,   48,   49,   50,   51,   44,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   69,   69,
       69,   69,   69,   70,   71,   69,   72,   44,   73,   69,
       74,   75,   76,   77,   78,   79,   80,   69,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   69,   97,   98,   99,  100,   44,
       44,  101,  102,  103,  105,  105,  206,  207,  106,  106,
       44,  154,  108,   44,   44,  154,  108,   44,  198,  109,
      110,  408,  199,  109,  110,   44,  473,  114,   44,  155,

      115,  701,   44,  155,  116,   44,   44,  114,   44,   44,
      115,  134,   44,   44,  116,  134,   44,   44,  328,  149,
       44,  149,  166,   44,  224,  225,  167,   44,  150,  151,
      150,  151,   44,  218,  166,   44,  219,  152,  167,  152,
       44,  766,  177,   44,  330,  331,  111,  135,  112,  329,
      111,  135,  112,   44,  455,  193,   44,  195,  195,  195,
      211,  117,  212,  118,  402,  178,  195,  195,  195,  194,
      197,  117,  403,  118,  119,  120,  121,  122,  119,  119,
      119,  119,  119,  119,  119,  123,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      119,  119,  119,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      125,  119,  119,  119,  119,  126,  127,  128,  119,  120,
      121,  122,  119,  119,  119,  119,  119,  119,  119,  123,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  119,  119,  119,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  125,  119,  119,  119,  119,  130,
      131,  132,   44,  201,  137,   44,   44,  208,  137,   44,
       44,  138,  177,   44,   44,  138,  193,   44,  214, 1838,
      215,  209,  406,  424,  139,  220,  407,  198,  139,  425,
      194,  199,  217,  375,  383,  178,  356,  356,  356,  473,
      202,  203,  204,  221,  222,  217,  223,  247,  384,  226,
      205,  226,  406,  250,  248,  385,  407,  251,  356,  356,
      356,  249,  658,  252,  226,  659,  226,  656,  140,  956,
      141,  226,  140,  226,  141,   44,   44,  142,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,  143,
       44,   44,  144,  144,  144,  144,  144,  144,  144,  144,
      144,   44,   44,   44,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,   44,   44,   44,   44,   44,  145,  146,  147,   44,
      156,  157,  156,   44,  158,   44,   44,   44,   44,  159,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  160,  160,  160,  160,

      160,  160,  160,  161,  160,   44,   44,   44,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,   44,   44,   44,   44,   44,
      162,  163,  164,   44,  168,  169,  168,   44,   44,   44,
       44,   44,   44,   44,  170,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,  171,   44,
      172,  172,  172,  172,  172,  172,  172,  172,  172,   44,
       44,   44,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,   44,
       44,   44,   44,   44,  173,  174,  175,  179,  180,  181,
      182,  179,  183,  179,  179,  179,  179,  184,  179,  179,
      179,  179,  179,  179,  179,  185,  179,  179,  179,  179,
      186,  187,  179,  179,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  179,  179,  179,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  179,  179,  179,  179,  179,  189,  190,
      191,  227,  226,  489,  227,  473,  226,  356,  356,  356,

      259,  501,  227,  226,  284, 1689,  260,  264,  285,  261,
      227,  262,  263,  490,  231,  227,  226,  226,  286,  227,
      265,  226,  266,  473,  227,  409,  410,  226,  226,  439,
      438,  359,  206,  207,  274,  242,  367,  368,  369,  243,
      766,  656,  228,  229,  230,  228,  229,  230,  232,  244,
      402,  455,  245,  228,  229,  230,  227,  273,  403,  246,
      502,  228,  229,  230,  298,  227,  228,  229,  230,  227,
      228,  229,  230,  768,  212,  228,  229,  230,  404,  404,
      404,  234,  360,  361,  362,  657,  484,  235,  267,  236,
      268,  237,  663,  238,  239,  240,  241,  269,  270,  484,

      253,  254,  255,  271,  272,  256,  750,  228,  229,  230,
      257,  275,  258,  455,  485,  276,  228,  229,  230,  277,
      228,  229,  230,  280,  723,  278,  484,  226,  226, 1634,
      279,  281,  404,  404,  404,  226,  664,  282,  299,  484,
      226, 1452,  300,  283,  226,  287,  288,  226,  226,  289,
      665,  686,  226,  666,  687,  226,  293,  290,  226,  291,
      294,  292,  226,  295,  473,  227, 1043,  301,  226,  302,
      296,  303,  405,  297,  227,  304,  684,  305,  306, 1838,
      226,  307,  227,  724,  226,  682,  308,  701,  226,  309,
      320,  226,  310,  375,  321,  311,  312,  337,  317,  683,

      318,  759,  313,  319,  226,  314,  327,  226,  315,  348,
      326, 1442,  316,  766,  226,  226,  228,  229,  230,  322,
      685,  377,  323,  324,  424,  228,  229,  230,  691,  325,
      425,  338,  226,  228,  229,  230,  487,  339,  487,  226,
      455,  488,  340,  349,  341,  409,  410,  342,  692,  350,
      388,  388,  388,  443,  351,  378,  352,  439,  438,  353,
      760,  379,  411,  411,  411,  463,  380,  412,  381,  390,
      491,  382,  411,  411,  411, 1433,  749,  412,  426,  426,
      426,  414,  426,  426,  426,  431,  432,  433,  427,  455,
     1633,  414,  427,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  463,  744,  444,  445,  446,  195,  195,  195,
      455,  456,  481,  482,  483,  455,  464,  465,  466,  424,
      391,  392,  393,  472,  227,  727,  455,  473,  493,  494,
      495,  227,  415,  416,  417, 1309,  227,  418,  214,  227,
      215, 1555,  415,  416,  417,  457,  227,  745,  467,  499,
      227,  458,  217,  464,  465,  466,  459,  474,  460,  227,
     1299,  461,  504,  475,  999,  217,  227, 1554,  476,  748,
      477,  227,  510,  478,  227,  228,  229,  230,  503,  227,
      748,  508,  228,  229,  230,  227,  473,  228,  229,  230,
      228,  229,  230,  505,  506,  227,  509,  228,  229,  230,

      227,  228,  229,  230,  514,  511,  227,  501, 1000,  516,
      228,  229,  230,  512,  977,  507,  227,  228,  229,  230,
      473,  227,  228,  229,  230,  228,  229,  230,  978, 1452,
      228,  229,  230,  513, 1292,  766,  228,  229,  230,  227,
      515,  356,  356,  356,  227,  519,  228,  229,  230,  520,
      455,  228,  229,  230,  517,  518,  227,  228,  229,  230,
      227,  535,  764,  426,  227,  765,  502,  228,  229,  230,
      227, 1031,  228,  229,  230,  521,  522,  523,  526,  524,
      530,  527,  723,  227,  525,  531,  532,  528,  536, 1292,
      228,  229,  230,  227,  529,  228,  229,  230,  533, 1042,

      227,  534,  537,  227, 1292,  538,  227,  228,  229,  230,
      227,  228,  229,  230,  227,  228,  229,  230,  455,  758,
      548,  228,  229,  230,  543,  539,  540,  227, 1284,  663,
      544,  962,  545,  542,  228,  229,  230,  549,  546,  227,
      473,  724,  541,  550,  228,  229,  230,  455,  551,  547,
      227,  228,  229,  230,  228,  229,  230,  228,  229,  230,
      552,  228,  229,  230,  227,  228,  229,  230,  748, 1006,
      227,  767,  556,  227,  671,  672,  673,  227,  228,  229,
      230,  227,  759,  557,  553,  227,  367,  368,  369, 1280,
      228,  229,  230,  684,  558,  979, 1044,  554,  555,  227,

      473,  228,  229,  230,  559,  560,  367,  368,  369, 1001,
     1838,  227, 1002, 1007,  227,  228,  229,  230, 1031,  227,
      561,  228,  229,  230,  228,  229,  230, 1277,  228,  229,
      230,  455,  228,  229,  230,  567,  228,  229,  230,  226,
      227,  760,  562,  569,  563,  226,  564,  227,  568,  766,
      228,  229,  230,  577,  227,  473,  473,  565,  566,  227,
      226,  578,  228,  229,  230,  228,  229,  230,  227,  573,
      228,  229,  230,  570,  226,  226,  227, 1008,  571,  576,
     1009,  227,  582,  572,  227,  748, 1078,  226,  574, 1079,
      575,  228,  229,  230,  455,  227,  579,  583,  228,  229,

      230,  580,  227, 1065,  766,  228,  229,  230,  227,  581,
      228,  229,  230,  585,  587,  227, 1553, 1442,  227,  228,
      229,  230,  227,  584,  999,  227,  405,  228,  229,  230,
      592,  591,  228,  229,  230,  228,  229,  230,  586,  227,
      593,  588,  227,  473,  748,  596,  228,  229,  230,  227,
     1269,  589,  227,  228,  229,  230,  594,  590,  227,  228,
      229,  230,  227,  604,  473, 1269,  228,  229,  230,  228,
      229,  230, 1269,  228,  229,  230,  228,  229,  230,  227,
      722,  595,  227,  388,  388,  388,  597, 1064,  598,  599,
      228,  229,  230,  228,  229,  230,  601, 1076, 1261,  600,

      228,  229,  230,  228,  229,  230,  602,  606, 1066,  228,
      229,  230,  605,  228,  229,  230,  603,  485,  607,  226,
      608,  227,  609, 1006,  227,  408,  610,  226,  611,  484,
      228,  229,  230,  228,  229,  230,  226,  612,  226,  227,
      226, 1077,  484,  227,  613,  226,  227, 1250,  614,  616,
      226,  617,  621,  226,  618,  615,  227,  619,  226,  226,
      620,  226,  227,  226, 1076,  227,  500,  622,  226,  227,
     1552,  628,  228,  229,  230,  228,  229,  230,  623,  227,
      630,  694,  695,  696,  227, 1433, 1241,  227,  682,  624,
      228,  229,  230,  625,  228,  229,  230,  228,  229,  230,

      227, 1551,  375,  626,  227,  629,  627,  228,  229,  230,
      227,  631,  640,  228,  229,  230,  228,  229,  230,  634,
      228,  229,  230,  227,  632, 1265,  227, 1235, 1087,  227,
      228,  229,  230,  227, 1457,  228,  229,  230,  228,  229,
      230,  643, 1309,  227,  633,  635,  638, 1267,  227, 1080,
     1268,  228,  229,  230,  636,  228,  229,  230,  639,  227,
      637,  228,  229,  230,  641,  227,  650, 1080,  227, 1266,
      642,  644,  359, 1080,  228,  229,  230,  228,  229,  230,
      228,  229,  230,  645,  228,  229,  230,  646,  651,  647,
      226,  648,  359,  226,  228,  229,  230,  649,  226,  228,

      229,  230,  652,  388,  388,  388,  702,  388,  388,  388,
      228,  229,  230,  404,  404,  404,  228,  229,  230,  228,
      229,  230,  390,  360,  361,  362,  390,  411,  411,  411,
      411,  411,  411,  500,  455,  412,  708,  716,  717,  718,
      703, 1288, 1072,  360,  361,  362,  704, 1456,  744,  414,
      197,  705,  443,  706, 1067,  443,  707,  426,  426,  426,
      473,  411,  411,  411,  455,  463,  412,  427, 1455,  762,
      709,  463, 1299,  391,  392,  393,  710,  391,  392,  393,
      414,  711,  793,  712,  227, 1289,  713,  431,  432,  433,
      431,  432,  433,  440,  440,  440,  735,  736,  737,  227,

      415,  416,  417,  444,  445,  446,  444,  445,  446,  787,
      487,  746,  487,  763,  747,  776,  464,  465,  466,  752,
      753,  754,  464,  465,  466,  770,  771,  772,  780,  781,
      782,  415,  416,  417,  227,  228,  229,  230,  227, 1454,
      795,  796,  797,  788,  227, 1290, 1453,  227, 1291,  789,
      228,  229,  230,  227,  790, 1452,  791,  227,  798,  792,
      227,  969,  970,  971,  227, 1451, 1450,  227,  800, 1265,
      227,  722,  799,  367,  368,  369,  758, 1288,  227,  758,
      802,  801,  996,  997,  998,  228,  229,  230,  803,  228,
      229,  230,  227,  455, 1449,  228,  229,  230,  228,  229,

      230,  805,  806,  227,  228,  229,  230,  804,  228,  229,
      230,  228,  229,  230,  227,  228,  229,  230,  228,  229,
      230,  228,  229,  230,  227, 1292,  807,  227,  473,  228,
      229,  230,  227, 1049,  809,  227,  808,  762,  227,  205,
     1447,  227, 1284,  228,  229,  230,  748,  957,  810,  812,
      957,  227, 1037, 1446,  228,  229,  230,  813,  227,  963,
     1280,  227,  963,  811,  816,  228,  229,  230,  227,  814,
      980,  227,  815,  980, 1445,  228,  229,  230,  228,  229,
      230,  823,  227,  228,  229,  230,  228,  229,  230,  228,
      229,  230,  228,  229,  230,  819,  817,  818,  227,  828,

     1277,  820,  228,  229,  230,  227,  824, 1444,  227,  228,
      229,  230,  228,  229,  230,  227, 1443, 1442,  227,  228,
      229,  230,  228,  229,  230,  227,  821,  825,  227,  822,
      826, 1441,  227,  228,  229,  230,  227, 1028, 1029, 1030,
      827,  227, 1440,  722,  227,  431,  432,  433,  227,  228,
      229,  230,  832, 1439,  227, 1269,  228,  229,  230,  228,
      229,  230,  227, 1017,  829,  227,  228,  229,  230,  228,
      229,  230,  830,  831,  836,  833,  228,  229,  230,  228,
      229,  230,  834,  228,  229,  230,  227,  228,  229,  230,
      835,  227,  228,  229,  230,  228,  229,  230,  227,  228,

      229,  230,  837,  227, 1437,  228,  229,  230,  838,  227,
     1261, 1010,  227,  228,  229,  230,  228,  229,  230, 1010,
     1253,  227,  839, 1253, 1010,  227, 1257,  841, 1305, 1257,
      840, 1305,  227,  408, 1003,  227,  844,  228,  229,  230,
     1003,  227,  228,  229,  230,  227, 1003,  842,  227,  228,
      229,  230,  843,  405,  228,  229,  230,  845, 1436,  227,
      228,  229,  230,  228,  229,  230,  846,  227,  847, 1250,
      850,  227,  228,  229,  230,  848,  228,  229,  230,  852,
     1435,  227,  849,  228,  229,  230,  228,  229,  230,  227,
     1434,  851,  228,  229,  230,  227,  228,  229,  230,  228,

      229,  230,  227, 1438, 1433,  855, 1438,  227, 1432,  991,
      228,  229,  230,  227, 1034, 1035, 1036,  227,  228,  229,
      230,  853,  228,  229,  230,  227,  856,  863,  227, 1431,
      854,  227,  228,  229,  230,  857, 1448,  858,  227, 1448,
      228,  229,  230,  227, 1241, 1430,  228,  229,  230,  227,
      864,  377,  859,  228,  229,  230,  227,  866,  228,  229,
      230,  227,  861,  865,  228,  229,  230,  860,  228,  229,
      230, 1021,  862,  227,  972, 1429,  228,  229,  230,  228,
      229,  230,  228,  229,  230, 1235,  348,  227,  867,  228,
      229,  230,  227,  337,  228,  229,  230,  869,  227,  868,

      228,  229,  230,  227, 1312, 1022,  227,  228,  229,  230,
     1087, 1023,  228,  229,  230,  870, 1024,  227, 1025, 1311,
      227, 1026,  872, 1310,  228,  229,  230,  871,  227, 1046,
     1047, 1048, 1309, 1308,  227, 1307,  873,  879,  228,  229,
      230,  227,  500,  228,  229,  230,  874,  227, 1306,  228,
      229,  230,  227, 1080,  228,  229,  230,  228,  229,  230,
      875,  227,  876,  783,  227,  880, 1304,  878,  228,  229,
      230,  228,  229,  230,  877,  882,  227, 1072, 1303,  228,
      229,  230,  883,  227,  773,  228,  229,  230,  884, 1302,
      227,  881,  228,  229,  230,  227, 1067, 1301,  228,  229,

      230,  227, 1300,  228,  229,  230,  227,  885, 1299,  227,
     1294, 1293,  228,  229,  230,  228,  229,  230, 1292, 1292,
      227, 1060, 1061, 1062,  227,  755,  896,  228,  229,  230,
      886,  227, 1287,  887,  228,  229,  230,  889, 1049, 1286,
      227,  228,  229,  230,  890,  888,  228,  229,  230, 1285,
      227,  891,  228,  229,  230,  892, 1284,  228,  229,  230,
      228,  229,  230,  893,  894,  227,  738, 1283,  227, 1037,
     1282,  228,  229,  230,  227,  228,  229,  230,  897,  227,
      902, 1281,  228,  229,  230,  227, 1280,  901,  730,  227,
      895,  228,  229,  230,  227, 1279,  898,  227, 1278, 1277,

      227,  228,  229,  230,  227,  903, 1271,  227,  904,  905,
      227, 1270,  899,  227,  906,  900,  228,  229,  230,  228,
      229,  230,  227, 1269,  910,  228,  229,  230,  907,  227,
      228,  229,  230,  909,  912,  911,  228,  229,  230,  227,
      228,  229,  230,  227,  908,  228,  229,  230,  228,  229,
      230,  228,  229,  230,  914,  228,  229,  230,  228,  229,
      230,  228,  229,  230,  228,  229,  230,  227,  770,  771,
      772, 1269,  227,  228,  229,  230,  913,  227,  719, 1264,
      228,  229,  230,  917, 1017,  227,  770,  771,  772,  227,
      228,  229,  230,  227,  228,  229,  230,  227, 1263, 1262,

      227,  780,  781,  782,  227,  915,  916,  918,  920, 1261,
      227, 1260,  919,  921, 1259,  227,  408,  933,  228,  229,
      230,  926,  227,  228,  229,  230,  227, 1258,  228,  229,
      230,  922,  924,  927,  227, 1010,  228,  229,  230,  925,
      228,  229,  230,  227,  228,  229,  230,  923,  228,  229,
      230,  228,  229,  230,  928,  228,  229,  230,  932,  227,
     1256,  228,  229,  230,  227,  929,  228,  229,  230,  227,
     1255,  405,  227,  228,  229,  230,  930,  228,  229,  230,
      934,  931,  227, 1254, 1003,  228,  229,  230,  935,  227,
      780,  781,  782,  227,  228,  229,  230, 1252, 1251,  227,

     1250,  697,  939,  936,  227,  937, 1244,  227,  991,  938,
      228,  229,  230,  940, 1243,  228,  229,  230, 1242, 1241,
      228,  229,  230,  228,  229,  230,  941,  942,  227, 1240,
      688,  227,  944,  228,  229,  230,  227,  688,  949,  943,
      228,  229,  230,  227,  228,  229,  230,  227,  688,  979,
      228,  229,  230,  227, 1239,  228,  229,  230,  228,  229,
      230,  374,  946,  227,  947,  678,  945,  954,  948,  227,
      950,  674, 1238,  227,  972, 1237,  951,  359, 1236,  228,
      229,  230,  228,  229,  230, 1235,  667,  228,  229,  230,
      952,  667,  953,  443,  228,  229,  230,  463,  228,  229,

      230,  388,  388,  388,  228,  229,  230,  955,  388,  388,
      388,  667,  962, 1053,  228,  229,  230, 1084, 1085, 1086,
      228,  229,  230,  227,  228,  229,  230,  390,  360,  361,
      362,  411,  411,  411,  227, 1234,  412,  411,  411,  411,
      227,  660,  412,  227,  444,  445,  446, 1054,  464,  465,
      466,  660,  660, 1055,  956, 1233,  414, 1089, 1056, 1088,
     1057,  227, 1087, 1058,  227, 1091, 1082, 1093, 1081, 1080,
      227,  988,  989,  990,  228,  229,  230, 1090,  391,  392,
      393, 1092,  969,  970,  971,  228,  229,  230,  227, 1080,
      496,  228,  229,  230,  228,  229,  230, 1095, 1096, 1075,

     1098, 1014, 1015, 1016,  227, 1094,  783,  415,  416,  417,
      455, 1074,  228,  229,  230,  228,  229,  230, 1073, 1072,
     1097,  228,  229,  230, 1041,  227,  969,  970,  971, 1034,
     1035, 1036, 1041, 1041, 1041, 1041, 1041, 1071,  227,  228,
      229,  230,  776,  227, 1070, 1041, 1041, 1041, 1041, 1041,
     1041,  473,  227,  773, 1069,  228,  229,  230, 1068,  227,
     1063, 1100, 1099, 1067,  468,  227, 1052,  755, 1063, 1063,
     1063, 1063, 1063, 1101,  227, 1051,  228,  229,  230, 1102,
      227, 1063, 1063, 1063, 1063, 1063, 1063, 1050, 1049,  228,
      229,  230, 1103,  227,  228,  229,  230, 1105,  451,  447,

      227, 1040,  738,  228,  229,  230,  227, 1039, 1038,  227,
      228,  229,  230, 1037,  227,  434,  228,  229,  230, 1109,
     1106, 1032,  227, 1104, 1107,  228,  229,  230,  730,  227,
     1108,  228,  229,  230, 1110, 1113,  227,  729, 1111,  227,
      423,  423, 1112,  227,  228,  229,  230,  227, 1114, 1116,
      419,  228,  229,  230, 1115,  227, 1020,  228,  229,  230,
      228,  229,  230, 1123,  227,  228,  229,  230,  719,  227,
     1019, 1018,  227,  228,  229,  230, 1117,  227, 1017, 1119,
      228,  229,  230,  227, 1012, 1011, 1118,  228,  229,  230,
      228,  229,  230, 1121,  228,  229,  230,  227,  228,  229,

      230, 1120,  227, 1010, 1010,  227,  228,  229,  230, 1124,
      227, 1122, 1005,  227, 1004,  228,  229,  230, 1003, 1003,
      228,  229,  230,  228,  229,  230, 1125,  227,  228,  229,
      230,  227,  394, 1127,  228,  229,  230,  227,  994,  697,
      227, 1126, 1128,  993, 1129,  992,  227,  991,  228,  229,
      230,  986,  227,  228,  229,  230,  228,  229,  230,  227,
      985,  228,  229,  230,  228,  229,  230,  227,  984,  983,
     1131, 1130, 1132,  227, 1034, 1035, 1036,  227,  228,  229,
      230,  227,  228,  229,  230, 1134, 1135, 1136,  228,  229,
      230,  228,  229,  230,  227, 1137, 1133,  228,  229,  230,

     1139,  227,  982,  228,  229,  230,  227,  981,  688,  227,
      228,  229,  230,  370,  227,  976, 1138,  227,  228,  229,
      230,  227,  678,  363,  228,  229,  230,  227,  228,  229,
      230,  227,  228,  229,  230, 1046, 1047, 1048,  227,  975,
     1140,  674,  227, 1142,  974,  228,  229,  230, 1141, 1144,
      227, 1151,  228,  229,  230,  227, 1143,  228,  229,  230,
      228,  229,  230,  227, 1145,  228,  229,  230,  228,  229,
      230,  973,  228,  229,  230, 1147,  227,  972,  228,  229,
      230, 1146,  228,  229,  230,  227,  967, 1148, 1149,  228,
      229,  230, 1150,  228,  229,  230, 1154,  227,  966,  965,

      227,  228,  229,  230,  227,  964,  228,  229,  230,  227,
      667, 1152,  227,  961,  228,  229,  230,  960,  959,  227,
      958,  660, 1153,  227, 1046, 1047, 1048,  228,  229,  230,
      227, 1296, 1297, 1298,  227,  655,  228,  229,  230,  332,
      227,  786,  496, 1157, 1155,  785,  227,  784,  228,  229,
      230,  228,  229,  230,  783,  228,  229,  230, 1156,  227,
      228,  229,  230,  228,  229,  230, 1161,  227,  778, 1158,
      228,  229,  230, 1160,  228,  229,  230, 1159,  227,  777,
      488,  228,  229,  230, 1163,  228,  229,  230,  227,  776,
      775,  228,  229,  230,  227,  774,  773,  228,  229,  230,

      227,  471,  473,  227,  761, 1162,  227,  468,  757, 1164,
      228,  229,  230,  227,  756, 1165,  227,  755,  228,  229,
      230,  454,  227,  455,  743,  227,  451,  451,  227,  228,
      229,  230,  741,  227,  447, 1170,  740,  227, 1166,  228,
      229,  230,  739, 1168,  738,  228,  229,  230,  227, 1167,
      438,  228,  229,  230,  228,  229,  230,  228,  229,  230,
     1169, 1172, 1171,  227,  228,  229,  230,  228,  229,  230,
     1174,  227,  733,  228,  229,  230,  228,  229,  230,  228,
      229,  230, 1173,  227,  228,  229,  230,  227,  228,  229,
      230,  434,  732,  227,  731,  730, 1176, 1175,  227,  228,

      229,  230,  729,  227,  428,  423,  227, 1177, 1188,  227,
      725,  419,  227,  721,  228,  229,  230, 1179,  720, 1178,
      227, 1245,  228,  229,  230,  770,  771,  772,  227,  719,
     1182,  227,  714, 1183,  228,  229,  230, 1181,  228,  229,
      230, 1180,  227,  700,  228,  229,  230,  394, 1184,  228,
      229,  230, 1185,  227,  228,  229,  230,  228,  229,  230,
      228,  229,  230,  228,  229,  230, 1186,  227,  699,  698,
     1189,  228,  229,  230,  697,  690,  227, 1187,  689,  228,
      229,  230,  228,  229,  230,  227, 1247, 1248, 1249,  688,
      227,  688,  374,  228,  229,  230, 1191,  227,  681, 1190,

      370,  227,  680,  679,  228,  229,  230,  678,  227,  677,
      363,  227,  676,  675,  227,  674,  669,  227,  228,  229,
      230, 1193, 1192,  227,  668,  667,  227,  228,  229,  230,
      667,  227,  662,  661,  227, 1196,  228,  229,  230, 1194,
     1195,  228,  229,  230,  227, 1197,  660, 1198,  228,  229,
      230,  227,  228,  229,  230, 1199,  660, 1200,  227,  228,
      229,  230,  228,  229,  230,  228,  229,  230,  228,  229,
      230,  655, 1201,  227,  228,  229,  230,  228,  229,  230,
      653,  227,  228,  229,  230,  228,  229,  230,  227, 1202,
      332,  498,  227,  497,  496,  228,  229,  230,  227,  479,

      205,  227,  228,  229,  230,  227,  470,  469,  227,  228,
      229,  230, 1203, 1204, 1205,  227,  780,  781,  782,  468,
     1207,  197,  453, 1208,  228,  229,  230, 1206,  227,  451,
      451,  227,  228,  229,  230, 1209,  227,  449,  448,  228,
      229,  230,  227,  228,  229,  230,  447,  227,  441,  228,
      229,  230,  228,  229,  230,  227,  228,  229,  230,  228,
      229,  230,  438,  227,  438, 1218,  228,  229,  230, 1210,
      227,  436,  435, 1212,  227, 1211,  434,  227, 1216,  228,
      229,  230,  228,  229,  230, 1213,  227,  228,  229,  230,
      429,  428,  227,  228,  229,  230, 1214,  227,  228,  229,

      230,  227,  423, 1219,  227,  423,  228,  229,  230, 1220,
     1215,  227, 1222, 1217,  228,  229,  230,  227,  421,  420,
      227,  228,  229,  230, 1224,  228,  229,  230,  228,  229,
      230,  227, 1223,  419,  227, 1221,  399,  228,  229,  230,
      227, 1225, 1227,  228,  229,  230,  398,  396,  228,  229,
      230,  227,  228,  229,  230,  228,  229,  230, 1226,  227,
      395,  394,  228,  229,  230, 1228,  387,  386,  228,  229,
      230,  228,  229,  230, 1229, 1232,  388,  388,  388,  227,
      374,  374,  228,  229,  230,  228,  229,  230,  227, 1230,
     1245,  228,  229,  230,  372,  371, 1231,  388,  388,  388,

      227,  370,  228,  229,  230, 1272, 1272, 1272,  227,  365,
      228,  229,  230,  411,  411,  411,  364,  363,  412,  411,
      411,  411,  357,  355,  412, 1084, 1085, 1086, 1313,  354,
      228,  229,  230, 1084, 1085, 1086,  969,  970,  971,  228,
      229,  230,  227, 1272, 1272, 1272,  988,  989,  990,  227,
      347,  228,  229,  230,  345, 1247, 1248, 1249,  227,  228,
      229,  230, 1034, 1035, 1036,  344,  343,  988,  989,  990,
      227,  335, 1315,  227,  334, 1274, 1275, 1276,  333, 1317,
      332, 1314,  233, 1014, 1015, 1016,  213,  227,  210, 1014,
     1015, 1016,  455,  228,  229,  230, 1316, 1046, 1047, 1048,

      228,  229,  230,  196, 1838,  227, 1041, 1318,  197,  228,
      229,  230,  142,  142, 1041, 1041, 1041, 1041, 1041,  227,
     1838,  228,  229,  230,  228,  229,  230, 1041, 1041, 1041,
     1041, 1041, 1041,  473, 1838,  227, 1838, 1838,  228,  229,
      230,  227, 1063, 1320,  205, 1319,  227, 1838, 1838,  227,
     1063, 1063, 1063, 1063, 1063, 1321,  228,  229,  230,  227,
     1838, 1838, 1322, 1063, 1063, 1063, 1063, 1063, 1063,  227,
      228,  229,  230,  227, 1838, 1838,  227, 1838, 1838,  227,
     1296, 1297, 1298, 1838, 1838,  227,  228,  229,  230, 1838,
      227, 1838,  228,  229,  230, 1324, 1838,  228,  229,  230,

      228,  229,  230,  227, 1838, 1838,  227, 1838, 1323, 1325,
      228,  229,  230, 1327,  227, 1838, 1326,  227, 1838, 1838,
      228,  229,  230, 1328,  228,  229,  230,  228,  229,  230,
      228,  229,  230, 1329,  227, 1838,  228,  229,  230, 1330,
      227,  228,  229,  230,  227, 1838, 1838, 1331, 1334,  227,
     1838, 1838,  227, 1838,  228,  229,  230,  228,  229,  230,
     1332,  227, 1838, 1838,  227,  228,  229,  230,  228,  229,
      230, 1333, 1838, 1335,  227, 1838, 1838, 1336,  227, 1838,
     1337, 1838,  227, 1838, 1342,  228,  229,  230,  227, 1838,
     1838,  228,  229,  230,  227,  228,  229,  230, 1338,  227,

      228,  229,  230,  228,  229,  230, 1340, 1339,  227, 1838,
     1838, 1341,  228,  229,  230,  228,  229,  230,  227, 1838,
     1838,  227, 1343, 1344,  227,  228,  229,  230,  227,  228,
      229,  230,  227,  228,  229,  230, 1345,  227, 1838,  228,
      229,  230, 1838, 1838,  227,  228,  229,  230,  227, 1838,
      228,  229,  230,  227, 1348, 1346,  227, 1838, 1838,  228,
      229,  230,  227, 1351, 1838,  227, 1838, 1347,  227,  228,
      229,  230,  228,  229,  230,  228,  229,  230, 1350,  228,
      229,  230,  227,  228,  229,  230, 1349, 1352,  228,  229,
      230,  227, 1355, 1353,  227,  228,  229,  230,  227,  228,

      229,  230, 1354,  227,  228,  229,  230,  228,  229,  230,
      227, 1838, 1838,  228,  229,  230,  228,  229,  230,  228,
      229,  230, 1356,  227, 1838, 1838,  227, 1838, 1838,  227,
     1357, 1358,  227,  228,  229,  230,  227, 1838, 1359,  227,
     1838, 1838,  228,  229,  230,  228,  229,  230,  227,  228,
      229,  230,  227, 1838,  228,  229,  230,  227, 1838, 1838,
     1363,  228,  229,  230, 1360, 1362,  227, 1365, 1361, 1838,
     1838,  227, 1366, 1245,  228,  229,  230,  228,  229,  230,
      228,  229,  230,  228,  229,  230, 1364,  228,  229,  230,
      228,  229,  230, 1368,  227, 1367, 1838,  227, 1371,  228,

      229,  230,  227,  228,  229,  230, 1838,  227,  228,  229,
      230,  227, 1838, 1838, 1369,  227, 1838,  228,  229,  230,
     1838,  227,  228,  229,  230, 1838,  227, 1838, 1370,  227,
     1838, 1838,  227, 1838, 1838, 1373,  227, 1838, 1247, 1248,
     1249, 1838, 1376, 1838, 1838,  228,  229,  230,  228,  229,
      230, 1372, 1374,  228,  229,  230, 1377,  227,  228,  229,
      230, 1375,  228,  229,  230,  227,  228,  229,  230,  227,
     1838, 1838,  228,  229,  230, 1378,  227,  228,  229,  230,
      228,  229,  230,  228,  229,  230,  227,  228,  229,  230,
     1838,  227, 1838, 1838,  227, 1379, 1838, 1838,  227, 1838,

     1838,  227, 1381, 1838, 1380, 1838,  227, 1838,  228,  229,
      230, 1838,  227, 1384, 1838, 1382,  228,  229,  230, 1383,
      228,  229,  230,  227, 1838, 1385, 1387,  228,  229,  230,
     1389, 1386,  227, 1838, 1388,  227, 1838,  228,  229,  230,
     1390,  227,  228,  229,  230,  228,  229,  230,  227,  228,
      229,  230,  228,  229,  230, 1391,  227,  228,  229,  230,
     1392,  227, 1838,  228,  229,  230, 1838, 1838,  227, 1393,
     1296, 1297, 1298,  227,  228,  229,  230,  227, 1838, 1394,
      227, 1838, 1838,  228,  229,  230,  228,  229,  230,  227,
     1838, 1838,  228,  229,  230, 1395, 1396, 1397,  227,  228,

      229,  230, 1398,  227, 1838, 1838,  227,  228,  229,  230,
     1399,  227,  228,  229,  230,  227, 1838, 1400, 1838,  228,
      229,  230,  227, 1401,  228,  229,  230,  227,  228,  229,
      230,  228,  229,  230, 1838, 1402,  227, 1838, 1838,  227,
      228,  229,  230,  227, 1404, 1403, 1406,  227, 1838,  228,
      229,  230, 1838,  227,  228,  229,  230,  228,  229,  230,
     1405,  227,  228,  229,  230,  227,  228,  229,  230, 1407,
      227, 1408, 1838,  228,  229,  230,  227, 1838,  228,  229,
      230, 1409, 1410, 1838,  227, 1838, 1838,  228,  229,  230,
      228,  229,  230,  227,  228,  229,  230,  227,  228,  229,

      230,  227, 1838, 1412,  228,  229,  230,  227, 1838, 1411,
      227, 1838,  228,  229,  230,  227,  228,  229,  230,  227,
     1838,  228,  229,  230, 1413, 1414,  227,  228,  229,  230,
      227, 1838, 1838,  227, 1416,  228,  229,  230, 1838, 1417,
      227, 1838, 1838, 1415,  228,  229,  230, 1418,  228,  229,
      230, 1838,  228,  229,  230, 1419,  227, 1838,  228,  229,
      230,  228,  229,  230,  227, 1838,  228,  229,  230,  227,
      228,  229,  230,  227, 1422, 1838, 1420,  228,  229,  230,
      227,  228,  229,  230,  228,  229,  230,  227, 1838, 1838,
     1421,  228,  229,  230,  227, 1838, 1838,  227, 1838, 1838,

      227, 1838, 1838, 1423,  227, 1838, 1245,  228,  229,  230,
      227,  388,  388,  388, 1424,  228,  229,  230, 1838, 1460,
      228,  229,  230,  227,  228,  229,  230, 1428, 1838, 1425,
     1838,  228,  229,  230, 1272, 1272, 1272, 1426,  228,  229,
      230, 1272, 1272, 1272,  227,  228,  229,  230,  228,  229,
      230,  228,  229,  230, 1427,  228,  229,  230, 1084, 1085,
     1086,  228,  229,  230,  411,  411,  411,  227, 1838,  412,
      227, 1247, 1248, 1249,  228,  229,  230, 1458,  227, 1838,
     1838,  988,  989,  990, 1838, 1838,  227, 1296, 1297, 1298,
      227, 1838, 1838,  227, 1838,  228,  229,  230, 1461, 1838,

      227, 1459, 1838,  227, 1274, 1275, 1276, 1838, 1838,  227,
     1838, 1274, 1275, 1276, 1838, 1838,  227, 1463,  228,  229,
      230,  228,  229,  230,  227, 1838, 1462, 1464, 1467,  228,
      229,  230,  227, 1838, 1014, 1015, 1016,  228,  229,  230,
     1465,  228,  229,  230,  228,  229,  230, 1466, 1468, 1838,
      227,  228,  229,  230,  228,  229,  230,  227, 1838, 1838,
      228,  229,  230, 1469, 1838, 1472,  227,  228,  229,  230,
     1470,  227, 1838, 1838,  227,  228,  229,  230, 1838, 1838,
     1838,  227, 1838,  228,  229,  230,  227, 1838, 1838,  227,
     1471, 1838,  227, 1838, 1476, 1838, 1473,  227, 1838, 1838,

     1838,  228,  229,  230,  227, 1474, 1838,  227,  228,  229,
      230, 1475, 1477, 1478,  227, 1838, 1838,  228,  229,  230,
     1480,  227,  228,  229,  230,  228,  229,  230, 1482,  227,
     1838, 1479,  228,  229,  230,  227, 1483,  228,  229,  230,
      228,  229,  230,  228,  229,  230, 1481,  227,  228,  229,
      230,  227, 1838, 1838, 1484,  228,  229,  230,  228,  229,
      230, 1838,  227, 1838, 1838,  228,  229,  230, 1485,  227,
     1838, 1838,  228,  229,  230,  227, 1838, 1838,  227, 1838,
      228,  229,  230,  227, 1487, 1486,  228,  229,  230,  227,
     1838, 1838,  227, 1838, 1838,  227, 1838, 1838,  228,  229,

      230, 1488,  228,  229,  230,  227, 1491, 1838,  227, 1490,
     1492, 1838,  227,  228,  229,  230, 1838, 1838,  227, 1489,
      228,  229,  230, 1494, 1838, 1493,  228,  229,  230,  228,
      229,  230, 1838,  227,  228,  229,  230,  227, 1838, 1495,
      228,  229,  230,  228,  229,  230,  228,  229,  230, 1496,
     1497, 1838,  227, 1838, 1838,  227,  228,  229,  230,  228,
      229,  230,  227,  228,  229,  230, 1498,  227, 1838,  228,
      229,  230,  227, 1838, 1838,  227, 1499, 1838,  227, 1838,
     1838,  227, 1838, 1501,  228,  229,  230, 1838,  228,  229,
      230, 1500,  227, 1838, 1502, 1503,  227, 1838, 1838, 1504,

     1838, 1838,  227,  228,  229,  230,  228,  229,  230,  227,
     1838, 1838, 1507,  228,  229,  230,  227, 1505,  228,  229,
      230,  227, 1506,  228,  229,  230,  228,  229,  230,  228,
      229,  230,  228,  229,  230,  227, 1838, 1508, 1838,  227,
     1510, 1838,  227,  228,  229,  230,  227,  228,  229,  230,
     1838,  227, 1509,  228,  229,  230,  227, 1838, 1838,  227,
      228,  229,  230, 1511,  227, 1838, 1512,  228,  229,  230,
      227, 1838,  228,  229,  230, 1513, 1838,  227, 1838, 1838,
     1514,  227, 1838, 1838, 1838,  227,  228,  229,  230,  227,
      228,  229,  230,  228,  229,  230,  227,  228,  229,  230,

     1515, 1838,  228,  229,  230, 1517,  227,  228,  229,  230,
      228,  229,  230,  227, 1516,  228,  229,  230,  227, 1838,
     1838,  228,  229,  230, 1838, 1838,  227, 1519,  228,  229,
      230,  227,  228,  229,  230,  227,  228,  229,  230, 1518,
      228,  229,  230, 1838, 1838,  227, 1838,  228,  229,  230,
     1838,  227, 1520, 1838, 1838, 1838,  227,  228,  229,  230,
     1521,  227, 1838, 1522,  228,  229,  230,  227, 1838,  228,
      229,  230, 1523, 1838, 1838,  227, 1838,  228,  229,  230,
     1838, 1838,  228,  229,  230, 1524,  228,  229,  230, 1525,
     1527, 1838, 1838,  227, 1526, 1838,  228,  229,  230, 1528,

      227, 1838,  228,  229,  230,  227, 1532,  228,  229,  230,
      227, 1838,  228,  229,  230,  227, 1838, 1838,  228,  229,
      230, 1529,  227, 1530, 1838,  227,  228,  229,  230, 1838,
      227, 1838, 1838, 1531,  227, 1838, 1838,  227, 1838, 1838,
     1838, 1838,  227, 1533,  228,  229,  230, 1534,  227, 1838,
     1838,  228,  229,  230,  227, 1838,  228,  229,  230,  227,
     1536,  228,  229,  230,  227, 1838,  228,  229,  230, 1535,
      227, 1838, 1838,  228,  229,  230,  228,  229,  230, 1838,
      227,  228,  229,  230,  227,  228,  229,  230,  228,  229,
      230, 1539, 1537,  228,  229,  230, 1838,  227, 1838,  228,

      229,  230,  227, 1540, 1538,  228,  229,  230, 1541,  227,
      228,  229,  230,  227, 1838,  228,  229,  230,  227, 1838,
     1838,  228,  229,  230,  227, 1838, 1838,  227, 1838, 1838,
      227,  228,  229,  230, 1542,  228,  229,  230, 1544,  227,
     1838, 1545, 1543, 1838, 1546,  227, 1838, 1838,  228,  229,
      230,  227, 1838,  228,  229,  230, 1838, 1547,  227, 1838,
      228,  229,  230,  227,  228,  229,  230, 1548,  227,  228,
      229,  230, 1272, 1272, 1272,  228,  229,  230,  228,  229,
      230,  228,  229,  230, 1549,  227, 1550, 1838,  227, 1556,
      228,  229,  230, 1838,  227, 1838,  228,  229,  230,  227,

     1838, 1838,  228,  229,  230, 1557,  227, 1838, 1838,  228,
      229,  230,  227, 1838,  228,  229,  230,  227, 1559,  228,
      229,  230, 1558, 1838,  227, 1838, 1838, 1561,  227, 1838,
     1838, 1838,  227, 1560, 1562,  227,  228,  229,  230,  228,
      229,  230, 1274, 1275, 1276,  228,  229,  230, 1564,  227,
      228,  229,  230, 1838,  227, 1838, 1563,  228,  229,  230,
     1566,  227, 1565,  228,  229,  230,  227, 1838,  228,  229,
      230, 1568,  227, 1569, 1838,  228,  229,  230,  227,  228,
      229,  230, 1567,  228,  229,  230,  228,  229,  230, 1572,
      227, 1838, 1838,  227, 1838, 1838, 1570,  227, 1838, 1838,

      228,  229,  230, 1838,  227,  228,  229,  230,  227, 1838,
     1571,  227,  228,  229,  230,  227, 1838,  228,  229,  230,
      227, 1838, 1838,  228,  229,  230,  227, 1838, 1573,  228,
      229,  230, 1575, 1838,  227, 1577, 1574, 1838, 1838,  227,
     1838,  228,  229,  230,  228,  229,  230,  227,  228,  229,
      230,  227, 1838, 1576, 1578,  228,  229,  230, 1579,  228,
      229,  230,  228,  229,  230, 1580,  228,  229,  230, 1838,
      227,  228,  229,  230,  227, 1838, 1838,  228,  229,  230,
      227, 1838, 1838,  227, 1838,  228,  229,  230,  227, 1838,
      228,  229,  230, 1838,  227, 1581, 1838,  227,  228,  229,

      230, 1582,  228,  229,  230,  227, 1838, 1583,  227, 1838,
     1838,  227, 1838, 1838,  227, 1838, 1838, 1838,  227, 1838,
     1838,  228,  229,  230, 1838,  228,  229,  230, 1584,  227,
     1585,  228,  229,  230,  228,  229,  230, 1587,  227,  228,
      229,  230, 1590, 1838, 1586,  228,  229,  230,  228,  229,
      230,  227, 1588, 1838,  227, 1838,  228,  229,  230,  228,
      229,  230,  228,  229,  230,  228,  229,  230, 1589,  228,
      229,  230,  227, 1592, 1838,  227, 1838, 1591, 1593,  227,
      228,  229,  230, 1838, 1838,  227, 1838, 1838,  227,  228,
      229,  230,  227, 1838, 1838,  227, 1594, 1838,  227, 1838,

     1838,  227,  228,  229,  230,  228,  229,  230, 1838,  227,
     1604, 1838, 1596, 1595,  227, 1838, 1598, 1599, 1838, 1838,
      227, 1838, 1838,  228,  229,  230,  228,  229,  230, 1597,
      228,  229,  230, 1601, 1838, 1600,  228,  229,  230,  228,
      229,  230,  227,  228,  229,  230,  228,  229,  230,  228,
      229,  230,  228,  229,  230, 1603,  227, 1838, 1838,  227,
      228,  229,  230,  227, 1838,  228,  229,  230, 1602,  227,
     1838,  228,  229,  230,  227, 1838, 1838, 1838, 1838,  227,
     1838, 1838,  227, 1838, 1838,  227, 1838, 1605,  227, 1838,
     1838,  227, 1838,  228,  229,  230, 1606, 1838, 1608, 1838,

     1838, 1838, 1607,  227, 1838, 1838,  227,  228,  229,  230,
      228,  229,  230, 1610,  228,  229,  230, 1609,  227, 1611,
      228,  229,  230, 1614, 1612,  228,  229,  230,  227, 1838,
      228,  229,  230,  228,  229,  230,  228,  229,  230,  228,
      229,  230,  228,  229,  230,  227, 1838, 1618,  227, 1838,
     1838, 1613, 1615,  227,  228,  229,  230,  228,  229,  230,
      227, 1838, 1838,  227, 1838, 1838,  227, 1838, 1616,  228,
      229,  230, 1617, 1620, 1838, 1838,  227, 1619, 1838,  228,
      229,  230,  227, 1838, 1838,  227, 1838, 1838,  227, 1621,
     1838,  227, 1838, 1838,  227, 1838,  228,  229,  230,  228,

      229,  230, 1624, 1622,  228,  229,  230,  227, 1838, 1838,
      227,  228,  229,  230,  228,  229,  230,  228,  229,  230,
     1627,  227, 1623, 1838, 1625,  227, 1628,  228,  229,  230,
      227, 1626, 1838,  228,  229,  230,  228,  229,  230,  228,
      229,  230,  228,  229,  230,  228,  229,  230,  227, 1629,
     1838, 1838, 1635,  227, 1630, 1838,  227, 1838,  228,  229,
      230,  228,  229,  230,  227, 1838, 1838,  227, 1838, 1838,
      227, 1631,  228,  229,  230,  227,  228,  229,  230, 1632,
      227,  228,  229,  230, 1640,  227, 1838, 1838,  227, 1838,
     1838,  227, 1838, 1637, 1638,  227, 1838, 1636,  227,  228,

      229,  230, 1639,  227,  228,  229,  230,  228,  229,  230,
     1838, 1838,  227, 1838, 1838,  228,  229,  230,  228,  229,
      230,  228,  229,  230, 1641, 1838,  228,  229,  230, 1642,
      227,  228,  229,  230,  227, 1838,  228,  229,  230,  228,
      229,  230,  228,  229,  230, 1643,  228,  229,  230,  228,
      229,  230,  227, 1838,  228,  229,  230, 1838, 1645,  227,
     1838, 1838,  227,  228,  229,  230,  227, 1838, 1838, 1644,
      227, 1838, 1652,  227, 1838, 1838,  227, 1646, 1838, 1838,
      227,  228,  229,  230,  227,  228,  229,  230, 1650,  227,
     1647, 1838, 1648,  227, 1838, 1649, 1838,  227, 1838, 1838,

      227, 1838, 1838,  228,  229,  230, 1838, 1838,  227, 1651,
      228,  229,  230,  228,  229,  230, 1653,  228,  229,  230,
      227,  228,  229,  230,  228,  229,  230,  228,  229,  230,
     1655,  228,  229,  230, 1654,  228,  229,  230,  227, 1656,
      228,  229,  230,  227,  228,  229,  230,  227,  228,  229,
      230,  228,  229,  230,  227, 1838, 1838,  227, 1838,  228,
      229,  230, 1838,  227, 1838, 1838,  227, 1838, 1838,  227,
     1838,  228,  229,  230,  227, 1657, 1838, 1838, 1838,  227,
     1838, 1838,  227, 1838, 1838,  227, 1838, 1838,  227,  228,
      229,  230,  227, 1661,  228,  229,  230,  227,  228,  229,

      230, 1658, 1659, 1838,  227,  228,  229,  230,  228,  229,
      230, 1660, 1662, 1665,  228,  229,  230,  228,  229,  230,
      228,  229,  230, 1663,  227,  228,  229,  230, 1664, 1666,
      228,  229,  230,  228,  229,  230,  228,  229,  230,  228,
      229,  230,  227,  228,  229,  230,  227, 1838,  228,  229,
      230, 1667,  227, 1838, 1838,  228,  229,  230,  227, 1838,
     1838,  227, 1838, 1838,  227, 1838, 1838,  227, 1838, 1838,
     1669, 1838, 1838, 1838, 1838,  228,  229,  230,  227, 1838,
     1668, 1838, 1838,  227, 1670, 1838,  227, 1838, 1838, 1838,
      227, 1838, 1838,  228,  229,  230,  227,  228,  229,  230,

     1671,  227, 1838,  228,  229,  230,  227, 1838, 1838,  228,
      229,  230,  228,  229,  230,  228,  229,  230,  228,  229,
      230, 1673, 1672, 1838,  227, 1675, 1838, 1674, 1676,  228,
      229,  230,  227, 1838,  228,  229,  230,  228,  229,  230,
      227,  228,  229,  230,  227, 1677, 1838,  228,  229,  230,
      227, 1838,  228,  229,  230, 1678, 1679,  228,  229,  230,
      227, 1838, 1838,  227, 1681, 1838,  227, 1838, 1838, 1838,
     1838,  227, 1838, 1838, 1682,  228,  229,  230, 1680,  227,
     1838, 1838,  227,  228,  229,  230,  227, 1838, 1684,  227,
     1838,  228,  229,  230, 1685,  228,  229,  230, 1683,  227,

     1838,  228,  229,  230, 1838,  227, 1686, 1838, 1838, 1838,
      227,  228,  229,  230,  228,  229,  230,  228,  229,  230,
      227, 1838,  228,  229,  230,  227, 1838, 1688,  227, 1838,
      228,  229,  230,  228,  229,  230,  227,  228,  229,  230,
      228,  229,  230, 1687, 1690,  227, 1838, 1838,  227, 1838,
      228,  229,  230,  227, 1838, 1838,  228,  229,  230, 1691,
      227,  228,  229,  230,  227, 1692, 1838,  227, 1838, 1838,
      227,  228,  229,  230, 1693,  227,  228,  229,  230,  228,
      229,  230, 1838,  227, 1838, 1838, 1694,  228,  229,  230,
     1838,  227, 1838, 1838, 1698, 1696,  228,  229,  230,  228,

      229,  230,  227, 1695,  228,  229,  230, 1699, 1697,  227,
     1838,  228,  229,  230, 1700,  228,  229,  230,  228,  229,
      230,  228,  229,  230,  227, 1838,  228,  229,  230, 1702,
      227, 1838, 1838, 1705,  228,  229,  230,  227, 1838, 1838,
      227, 1838,  228,  229,  230, 1838,  227, 1838, 1838, 1704,
     1701,  227, 1838,  228,  229,  230,  227, 1838, 1838,  227,
      228,  229,  230, 1703,  227, 1838, 1838,  227, 1838, 1838,
     1710,  227, 1838, 1838,  227,  228,  229,  230, 1838, 1838,
      227,  228,  229,  230, 1706, 1838, 1838,  227,  228,  229,
      230,  228,  229,  230, 1708,  227, 1838,  228,  229,  230,

     1707,  227,  228,  229,  230,  227, 1838,  228,  229,  230,
      228,  229,  230, 1709,  227,  228,  229,  230,  228,  229,
      230,  227,  228,  229,  230,  228,  229,  230, 1712,  227,
     1838,  228,  229,  230, 1711,  227, 1838, 1715,  228,  229,
      230,  227, 1838, 1713,  227, 1714,  228,  229,  230,  227,
     1838, 1838,  228,  229,  230, 1716,  228,  229,  230,  227,
     1838, 1838, 1717, 1838,  227,  228,  229,  230,  227, 1838,
     1838,  227,  228,  229,  230,  227, 1838, 1718,  227, 1838,
      228,  229,  230,  227, 1838, 1838,  228,  229,  230,  227,
     1838, 1838,  228,  229,  230,  228,  229,  230,  227, 1720,

      228,  229,  230, 1719,  227, 1838, 1722,  227, 1838, 1721,
      228,  229,  230,  227, 1838,  228,  229,  230, 1838,  228,
      229,  230,  228,  229,  230, 1723,  228,  229,  230,  228,
      229,  230,  227, 1838,  228,  229,  230,  227, 1838, 1838,
      228,  229,  230,  227, 1838, 1838,  227, 1838, 1838,  228,
      229,  230,  227, 1838, 1838,  228,  229,  230,  228,  229,
      230,  227, 1838, 1838,  228,  229,  230,  227, 1838, 1838,
     1838, 1724,  227, 1838, 1725,  227, 1838, 1727,  227, 1838,
     1838,  227, 1733,  228,  229,  230,  227, 1726,  228,  229,
      230,  227, 1838, 1838,  228,  229,  230,  228,  229,  230,

      227, 1838, 1728,  228,  229,  230, 1729,  227, 1838, 1838,
     1730,  227,  228,  229,  230, 1731, 1732,  227,  228,  229,
      230,  227, 1838,  228,  229,  230,  228,  229,  230,  228,
      229,  230,  228,  229,  230, 1735,  227,  228,  229,  230,
      227, 1734,  228,  229,  230, 1737, 1838,  227, 1838, 1838,
      227,  228,  229,  230,  227, 1736, 1838,  227,  228,  229,
      230,  227,  228,  229,  230, 1838,  227, 1838,  228,  229,
      230, 1738,  228,  229,  230, 1743,  227, 1838, 1838,  227,
     1838, 1740,  227, 1739, 1838, 1838,  227,  228,  229,  230,
      227,  228,  229,  230,  227, 1838, 1838,  227,  228,  229,

      230,  228,  229,  230, 1742,  228,  229,  230,  228,  229,
      230, 1741,  228,  229,  230,  227, 1745,  228,  229,  230,
      227, 1748, 1744, 1746, 1838,  227, 1838,  228,  229,  230,
      228,  229,  230,  228,  229,  230, 1749,  228,  229,  230,
      227,  228,  229,  230,  227,  228,  229,  230,  228,  229,
      230,  227, 1747, 1838,  227, 1838, 1838,  227, 1838, 1838,
      227, 1838, 1838,  227, 1838, 1838,  228,  229,  230,  227,
     1838,  228,  229,  230, 1751,  227,  228,  229,  230, 1838,
     1753, 1838, 1750, 1755,  227, 1838, 1838, 1838, 1838,  227,
     1752,  228,  229,  230,  227,  228,  229,  230, 1757,  227,

     1838, 1754,  228,  229,  230,  228,  229,  230,  228,  229,
      230,  228,  229,  230,  228,  229,  230, 1759, 1756,  227,
      228,  229,  230,  227, 1838, 1838,  228,  229,  230, 1760,
      227, 1838, 1758,  227, 1838,  228,  229,  230,  227, 1838,
      228,  229,  230,  227, 1838,  228,  229,  230, 1838,  227,
      228,  229,  230, 1762,  227, 1838, 1838, 1761, 1838, 1838,
      227, 1838, 1838, 1838, 1838,  227, 1763, 1838,  227, 1838,
      228,  229,  230, 1838,  228,  229,  230, 1764, 1765,  227,
     1838,  228,  229,  230,  228,  229,  230, 1766, 1767,  228,
      229,  230, 1768, 1769,  228,  229,  230,  227, 1838, 1838,

      228,  229,  230,  227, 1838,  228,  229,  230,  227, 1838,
     1838,  228,  229,  230,  227, 1838,  228,  229,  230,  228,
      229,  230,  227, 1771, 1838, 1772,  227, 1838, 1838,  227,
      228,  229,  230,  227, 1838, 1770, 1773,  227, 1838, 1838,
      227, 1838, 1774, 1838,  227, 1838, 1838,  227,  228,  229,
      230,  227, 1838, 1777,  228,  229,  230, 1838, 1779,  228,
      229,  230, 1778, 1775, 1780,  228,  229,  230,  227, 1838,
     1776,  227, 1783,  228,  229,  230,  227,  228,  229,  230,
      228,  229,  230,  227,  228,  229,  230,  227,  228,  229,
      230,  228,  229,  230, 1781,  228,  229,  230,  228,  229,

      230,  227,  228,  229,  230, 1782,  227, 1838, 1785, 1784,
      227, 1838, 1838,  227, 1838, 1838, 1838,  227, 1838,  228,
      229,  230,  228,  229,  230, 1788,  227,  228,  229,  230,
     1838, 1838,  227, 1793,  228,  229,  230,  227,  228,  229,
      230, 1789,  227, 1786, 1838, 1787, 1838,  227, 1838, 1838,
     1790,  227,  228,  229,  230,  227, 1838,  228,  229,  230,
      227,  228,  229,  230,  228,  229,  230, 1792,  228,  229,
      230, 1791,  227, 1838, 1838, 1794,  227,  228,  229,  230,
     1838,  227, 1838,  228,  229,  230, 1795,  227,  228,  229,
      230,  227, 1838,  228,  229,  230, 1797, 1796,  228,  229,

      230, 1798,  228,  229,  230,  227,  228,  229,  230,  227,
     1838,  228,  229,  230, 1800, 1838, 1838,  227, 1799, 1838,
      227, 1838, 1838,  228,  229,  230,  227,  228,  229,  230,
      227, 1801,  228,  229,  230,  227, 1804, 1838,  228,  229,
      230, 1803,  228,  229,  230, 1838,  227, 1838, 1802,  227,
     1838, 1838,  227, 1838, 1838,  227,  228,  229,  230,  227,
      228,  229,  230, 1838, 1805,  227, 1838, 1838,  228,  229,
      230,  228,  229,  230, 1806, 1809,  227,  228,  229,  230,
     1808,  228,  229,  230, 1807,  227,  228,  229,  230, 1838,
     1838,  227, 1838, 1811,  227, 1838, 1838,  228,  229,  230,

      228,  229,  230,  228,  229,  230,  228,  229,  230,  227,
      228,  229,  230, 1838,  227, 1810,  228,  229,  230,  227,
     1838, 1838,  227, 1838, 1812,  227, 1838,  228,  229,  230,
     1813,  227, 1838, 1838,  227, 1838,  228,  229,  230, 1815,
      227, 1814,  228,  229,  230,  228,  229,  230,  227, 1817,
     1838,  227, 1838, 1838,  227, 1838, 1816,  227, 1838, 1838,
      228,  229,  230,  227, 1818,  228,  229,  230, 1820,  227,
      228,  229,  230,  228,  229,  230,  228,  229,  230, 1819,
      227, 1821,  228,  229,  230,  228,  229,  230, 1822,  227,
     1838,  228,  229,  230, 1825, 1826,  227, 1838, 1838,  228,

      229,  230,  228,  229,  230,  228,  229,  230,  228,  229,
      230,  227, 1838, 1823,  228,  229,  230, 1824,  227, 1838,
      228,  229,  230, 1838, 1838,  227, 1838, 1838,  227, 1838,
     1827,  228,  229,  230,  227, 1838, 1838, 1829,  227, 1838,
      228,  229,  230,  227, 1838, 1838,  227,  228,  229,  230,
      227, 1838, 1838,  227, 1838, 1828,  227, 1838, 1838, 1838,
      227, 1838,  228,  229,  230, 1830,  227, 1838, 1831,  228,
      229,  230,  227, 1838, 1838,  227,  228,  229,  230,  228,
      229,  230, 1833, 1832,  227,  228,  229,  230,  227,  228,
      229,  230, 1838, 1838,  228,  229,  230,  228,  229,  230,

     1835,  228,  229,  230,  228,  229,  230,  228,  229,  230,
      227,  228,  229,  230, 1834, 1838, 1838,  228,  229,  230,
     1838, 1838, 1836,  228,  229,  230,  228,  229,  230, 1838,
     1838, 1838, 1838, 1838, 1838,  228,  229,  230, 1838,  228,
      229,  230, 1838, 1837, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838,  228,  229,  230,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  200,  200, 1838,  200,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  216,  216, 1838, 1838,  216,
      216,  226,  226,  226,  226, 1838,  226,  226, 1838,  226,
      336, 1838,  336,  336,  336, 1838, 1838,  336,  336,  336,
      336,  336,  336,  336,  336,  336, 1838,  336,  346, 1838,
      346, 1838,  346, 1838,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346, 1838,  346,  358,  358,  358,  358,
     1838,  358,  358, 1838,  358,  366,  366,  366, 1838, 1838,
      366,  366, 1838,  366,  373, 1838,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  376, 1838,  376,  376,  376, 1838,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376, 1838,  376,
      389,  389, 1838, 1838, 1838, 1838, 1838, 1838, 1838,  389,
      389,  389,  389, 1838,  389,  389, 1838,  389,  397,  397,
      397,  397,  397,  397,  397,  397, 1838,  397,  397,  397,
      397, 1838,  397,  397,  397,  397,  397,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
     1838,  400,  400,  400,  400,  400,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  413,  413, 1838, 1838,  413, 1838, 1838,
     1838, 1838,  413,  413,  413,  413, 1838,  413,  413, 1838,
      413,  422, 1838,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  430,
      430,  430, 1838, 1838,  430,  430, 1838,  430,  437, 1838,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  442,  442,  442,  442,

     1838,  442,  442, 1838,  442,  450, 1838,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  452, 1838,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  462,
      462,  462,  462, 1838,  462,  462, 1838,  462,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  480,  480, 1838,  480,
      216,  216, 1838, 1838,  216,  216,  486, 1838, 1838,  486,
      486,  226,  226,  226,  226, 1838,  226,  226, 1838,  226,
      492, 1838, 1838, 1838, 1838, 1838,  492,  492, 1838,  492,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500, 1838,  500,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  336, 1838,

      336,  336,  336, 1838, 1838,  336,  336,  336,  336,  336,
      336,  336,  336,  336, 1838,  336,  346, 1838,  346, 1838,
      346, 1838,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346, 1838,  346,  358,  358,  358,  358, 1838,  358,
      358, 1838,  358,  670,  670, 1838,  670,  366,  366,  366,
     1838, 1838,  366,  366, 1838,  366,  373, 1838,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  376, 1838,  376,  376,  376, 1838,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
     1838,  376,  389,  389, 1838, 1838, 1838, 1838, 1838, 1838,

     1838,  389,  389,  389,  389, 1838,  389,  389, 1838,  389,
      693,  693, 1838,  693,  397,  397,  397,  397,  397,  397,
      397,  397, 1838,  397,  397,  397,  397, 1838,  397,  397,
      397,  397,  397,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400, 1838,  400,  400,  400,
      400,  400,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408,  413,
      413, 1838, 1838,  413, 1838, 1838, 1838, 1838,  413,  413,
      413,  413, 1838,  413,  413, 1838,  413,  715,  715, 1838,
      715,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722, 1838,  722,
      422, 1838,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  726, 1838,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  430,  430,  430, 1838, 1838,
      430,  430, 1838,  430,  437, 1838,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  442,  442,  442,  442, 1838,  442,  442, 1838,
      442,  734,  734, 1838,  734,  450, 1838,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  452, 1838,  452,  452,  452,  452,  452,
      452,  452, 1838,  452,  452,  452,  452,  452,  452,  452,
      452,  742, 1838,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  462,  462,
      462,  462, 1838,  462,  462, 1838,  462,  751,  751, 1838,
      751,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758, 1838,  758,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  769,
      769,  769, 1838, 1838,  769,  769, 1838,  769,  486, 1838,
     1838,  486,  486,  779,  779,  779, 1838, 1838,  779,  779,
     1838,  779,  226,  226,  226,  226, 1838,  226,  226, 1838,

      226,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500, 1838,  500,
      794, 1838, 1838, 1838, 1838, 1838,  794,  794, 1838,  794,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  968,
      968,  968, 1838, 1838,  968,  968, 1838,  968,  358,  358,
      358,  358, 1838,  358,  358, 1838,  358,  366,  366,  366,
     1838, 1838,  366,  366, 1838,  366,  373, 1838,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  987,  987, 1838, 1838, 1838, 1838,

     1838, 1838, 1838,  987,  987,  987, 1838, 1838,  987,  987,
     1838,  987,  389,  389, 1838, 1838, 1838, 1838, 1838, 1838,
     1838,  389,  389,  389,  389, 1838,  389,  389, 1838,  389,
      995,  995, 1838,  995, 1013, 1013, 1838, 1838, 1013, 1838,
     1838, 1838, 1838, 1013, 1013, 1013, 1838, 1838, 1013, 1013,
     1838, 1013,  413,  413, 1838, 1838,  413, 1838, 1838, 1838,
     1838,  413,  413,  413,  413, 1838,  413,  413, 1838,  413,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722, 1838,  722, 1027,
     1027, 1838, 1027,  422, 1838,  422,  422,  422,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      430,  430,  430, 1838, 1838,  430,  430, 1838,  430, 1033,
     1033, 1033, 1838, 1838, 1033, 1033, 1838, 1033,  442,  442,
      442,  442, 1838,  442,  442, 1838,  442,  742, 1838,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454, 1045, 1045, 1045, 1838, 1838, 1045,

     1045, 1838, 1045,  462,  462,  462,  462, 1838,  462,  462,
     1838,  462,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758, 1838,
      758, 1059, 1059, 1838, 1059,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  769,  769,  769, 1838, 1838,  769,
      769, 1838,  769,  779,  779,  779, 1838, 1838,  779,  779,
     1838,  779, 1083, 1083, 1083, 1838, 1838, 1083, 1083, 1838,
     1083,  226,  226,  226,  226, 1838,  226,  226, 1838,  226,
      957, 1838,  957,  957,  963, 1838,  963,  963,  968,  968,

      968, 1838, 1838,  968,  968, 1838,  968,  373, 1838,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  980, 1838,  980,  980,  987,
      987, 1838, 1838, 1838, 1838, 1838, 1838, 1838,  987,  987,
      987, 1838, 1838,  987,  987, 1838,  987, 1246, 1838, 1838,
     1838, 1838, 1246, 1246, 1246, 1838, 1838, 1246, 1246, 1838,
     1246, 1013, 1013, 1838, 1838, 1013, 1838, 1838, 1838, 1838,
     1013, 1013, 1013, 1838, 1838, 1013, 1013, 1838, 1013, 1273,
     1273, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1273, 1273,
     1273, 1838, 1838, 1273, 1273, 1838, 1273, 1295, 1295, 1295,

     1838, 1838, 1295, 1295, 1838, 1295,   43, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838
    } ;

static yyconst flex_int16_t yy_chk[9682] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   52,   52,    3,    4,
        7,   27,    7,    7,    8,   28,    8,    8,   48,    7,
        7,  410,   48,    8,    8,    9,  764,    9,    9,   27,

        9,  410,    7,   28,    9,   10,    8,   10,   10,   19,
       10,   19,   19,   20,   10,   20,   20,    9,   98,   25,
       33,   26,   33,   33,   66,   66,   33,   10,   25,   25,
       26,   26,   34,   62,   34,   34,   62,   25,   34,   26,
       37,  764,   37,   37,   99,   99,    7,   19,    7,   98,
        8,   20,    8,   41,  748,   41,   41,   45,   45,   45,
       59,    9,   59,    9,  155,   37,   46,   46,   46,   41,
      748,   10,  155,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   21,   51,   21,   21,   22,   53,   22,   22,
       38,   21,   38,   38,   42,   22,   42,   42,   61,  135,
       61,   53,  158,  167,   21,   64,  158,  197,   22,  167,
       42,  197,   61,  135,  139,   38,  120,  120,  120,  766,
       51,   51,   51,   64,   64,   61,   64,   76,  139,   77,
      766,   76,  405,   77,   76,  139,  405,   77,  121,  121,
      121,   76,  338,   77,   76,  338,   77,  656,   21,  656,
       21,   76,   22,   77,   22,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   69,   79,  220,   70, 1065,   79,  122,  122,  122,

       79,  232,   71,   80,   86, 1633,   79,   80,   86,   79,
       83,   79,   79,  220,   70,   75,   79,   80,   86,   82,
       80,   86,   80,  478,   89,  159,  159,   80,   86,  178,
      178,  124,  205,  205,   83,   75,  129,  129,  129,   75,
     1065,  337,   69,   69,   69,   70,   70,   70,   71,   75,
      403,  461,   75,   71,   71,   71,   74,   82,  403,   75,
      232,   83,   83,   83,   89,   81,   75,   75,   75,   78,
       82,   82,   82,  478,  212,   89,   89,   89,  156,  156,
      156,   74,  124,  124,  124,  337,  212,   74,   81,   74,
       81,   74,  348,   74,   74,   74,   74,   81,   81,  212,

       78,   78,   78,   81,   81,   78,  461,   74,   74,   74,
       78,   84,   78,  749,  214,   84,   81,   81,   81,   84,
       78,   78,   78,   85,  418,   84,  214,   85,   84, 1555,
       84,   85,  157,  157,  157,   84,  348,   85,   90,  214,
       85, 1554,   90,   85,   87,   87,   87,   85,   87,   87,
      349,  378,   90,  349,  378,   90,   88,   87,   87,   87,
       88,   87,   90,   88,  475,   93,  749,   91,   87,   91,
       88,   91,  406,   88,   96,   91,  377,   91,   91,  374,
       88,   91,   97,  418,   91,  375,   91,  406,   92,   91,
       94,   91,   92,  374,   94,   92,   92,  109,   93,  375,

       93,  467,   92,   93,   94,   92,   97,   94,   92,  116,
       96, 1553,   92,  475,   94,   95,   93,   93,   93,   95,
      377,  138,   95,   95,  423,   96,   96,   96,  383,   95,
      423,  109,   95,   97,   97,   97,  217,  109,  217,   95,
      460,  217,  109,  116,  109,  408,  408,  109,  383,  116,
      144,  144,  144,  188,  116,  138,  116,  438,  438,  116,
      467,  138,  160,  160,  160,  200,  138,  160,  138,  144,
      227,  138,  161,  161,  161, 1552,  460,  161,  168,  168,
      168,  160,  169,  169,  169,  172,  172,  172,  168,  456,
     1551,  161,  169,  180,  180,  180,  181,  181,  181,  182,

      182,  182,  201,  456,  188,  188,  188,  195,  195,  195,
      199,  199,  210,  210,  210,  458,  200,  200,  200,  424,
      144,  144,  144,  206,  226,  424,  459,  206,  227,  227,
      227,  235,  160,  160,  160, 1457,  231,  161,  215,  234,
      215, 1456,  161,  161,  161,  199,  237,  456,  201,  231,
      239,  199,  215,  201,  201,  201,  199,  206,  199,  238,
     1455,  199,  235,  206,  702,  215,  240, 1454,  206,  458,
      206,  236,  239,  206,  241,  226,  226,  226,  234,  243,
      459,  237,  235,  235,  235,  245,  476,  231,  231,  231,
      234,  234,  234,  236,  236,  242,  238,  237,  237,  237,

      244,  239,  239,  239,  243,  240,  246,  500,  702,  245,
      238,  238,  238,  241,  683,  236,  247,  240,  240,  240,
      474,  248,  236,  236,  236,  241,  241,  241,  683, 1453,
      243,  243,  243,  242, 1451,  476,  245,  245,  245,  252,
      244,  356,  356,  356,  249,  248,  242,  242,  242,  248,
      747,  244,  244,  244,  247,  247,  250,  246,  246,  246,
      251,  252,  474,  729,  253,  474,  500,  247,  247,  247,
      254,  729,  248,  248,  248,  249,  249,  249,  250,  249,
      251,  250,  722,  259,  249,  251,  251,  250,  253, 1450,
      252,  252,  252,  256,  250,  249,  249,  249,  251,  747,

      257,  251,  253,  255, 1449,  254,  260,  250,  250,  250,
      258,  251,  251,  251,  261,  253,  253,  253,  746, 1448,
      259,  254,  254,  254,  257,  255,  255,  266, 1447,  663,
      258,  663,  258,  256,  259,  259,  259,  260,  258,  263,
      477,  722,  255,  260,  256,  256,  256,  750,  261,  258,
      264,  257,  257,  257,  255,  255,  255,  260,  260,  260,
      262,  258,  258,  258,  262,  261,  261,  261,  746,  708,
      265,  477,  263,  268,  359,  359,  359,  267,  266,  266,
      266,  271,  758,  264,  262,  269,  366,  366,  366, 1446,
      263,  263,  263,  684,  265,  684,  750,  262,  262,  274,

     1066,  264,  264,  264,  265,  267,  370,  370,  370,  703,
     1031,  272,  703,  708,  273,  262,  262,  262, 1031,  278,
      269,  265,  265,  265,  268,  268,  268, 1445,  267,  267,
      267, 1044,  271,  271,  271,  272,  269,  269,  269,  270,
      275,  758,  270,  274,  270,  270,  270,  277,  273, 1066,
      274,  274,  274,  278,  279,  767, 1064,  270,  270,  282,
      270,  278,  272,  272,  272,  273,  273,  273,  280,  276,
      278,  278,  278,  275,  276,  276,  281,  709,  275,  277,
      709,  284,  282,  275,  283, 1044,  788,  276,  276,  788,
      276,  275,  275,  275, 1043,  285,  280,  282,  277,  277,

      277,  280,  287,  767, 1064,  279,  279,  279,  288,  281,
      282,  282,  282,  284,  286,  289, 1444, 1443,  286,  280,
      280,  280,  292,  283,  999,  290,  999,  281,  281,  281,
      288,  287,  284,  284,  284,  283,  283,  283,  285,  298,
      289,  286,  291,  765, 1043,  292,  285,  285,  285,  293,
     1441,  286,  294,  287,  287,  287,  290,  286,  296,  288,
      288,  288,  295,  298,  768, 1440,  289,  289,  289,  286,
      286,  286, 1439,  292,  292,  292,  290,  290,  290,  299,
     1438,  291,  297,  388,  388,  388,  293,  765,  293,  294,
      298,  298,  298,  291,  291,  291,  296,  787, 1437,  295,

      293,  293,  293,  294,  294,  294,  297,  300,  768,  296,
      296,  296,  299,  295,  295,  295,  297,  485,  300,  300,
      300,  302,  300, 1006,  305, 1006,  300,  300,  300,  485,
      299,  299,  299,  297,  297,  297,  301,  301,  301,  306,
      301,  787,  485,  309,  301,  301,  307, 1436,  302,  303,
      303,  303,  305,  303,  303,  302,  311,  303,  303,  304,
      304,  304,  310,  304, 1076,  313, 1076,  306,  304,  308,
     1435,  309,  302,  302,  302,  305,  305,  305,  307,  312,
      311,  390,  390,  390,  319, 1434, 1431,  315,  978,  308,
      306,  306,  306,  308,  309,  309,  309,  307,  307,  307,

      314, 1430,  978,  308,  321,  310,  308,  311,  311,  311,
      316,  312,  319,  310,  310,  310,  313,  313,  313,  315,
      308,  308,  308,  318,  314, 1021,  317, 1429, 1312,  325,
      312,  312,  312,  320, 1311,  319,  319,  319,  315,  315,
      315,  321, 1310,  322,  314,  316,  318, 1022,  326, 1308,
     1022,  314,  314,  314,  317,  321,  321,  321,  318,  323,
      317,  316,  316,  316,  320,  327,  325, 1307,  332, 1021,
      320,  322,  358, 1306,  318,  318,  318,  317,  317,  317,
      325,  325,  325,  323,  320,  320,  320,  323,  326,  324,
      324,  324,  363,  324,  322,  322,  322,  324,  324,  326,

      326,  326,  327,  389,  389,  389,  407,  394,  394,  394,
      323,  323,  323,  404,  404,  404,  327,  327,  327,  332,
      332,  332,  389,  358,  358,  358,  394,  411,  411,  411,
      413,  413,  413, 1305,  744,  413,  409,  414,  414,  414,
      407, 1053, 1304,  363,  363,  363,  407, 1303,  744,  413,
      744,  407,  442,  407, 1302,  447,  407,  426,  426,  426,
      472,  419,  419,  419,  457,  462,  419,  426, 1301,  472,
      409,  468, 1300,  389,  389,  389,  409,  394,  394,  394,
      419,  409,  502,  409,  496, 1053,  409,  430,  430,  430,
      434,  434,  434,  440,  440,  440,  443,  443,  443,  499,

      413,  413,  413,  442,  442,  442,  447,  447,  447,  501,
      484,  457,  484,  472,  457,  484,  462,  462,  462,  463,
      463,  463,  468,  468,  468,  480,  480,  480,  492,  492,
      492,  419,  419,  419,  503,  496,  496,  496,  504, 1298,
      502,  502,  502,  501,  505, 1054, 1297,  506, 1054,  501,
      499,  499,  499,  507,  501, 1296,  501,  508,  503,  501,
      509,  670,  670,  670,  510, 1294, 1293,  512,  505, 1265,
      511, 1265,  504,  678,  678,  678, 1292, 1288,  513, 1288,
      509,  508,  701,  701,  701,  503,  503,  503,  510,  504,
      504,  504,  514, 1042, 1291,  505,  505,  505,  506,  506,

      506,  512,  513,  515,  507,  507,  507,  511,  508,  508,
      508,  509,  509,  509,  516,  510,  510,  510,  512,  512,
      512,  511,  511,  511,  517, 1290,  514,  518,  762,  513,
      513,  513,  522, 1287,  516,  519,  515,  762,  520,  762,
     1286,  521, 1285,  514,  514,  514, 1042, 1925,  517,  518,
     1925,  524, 1283, 1282,  515,  515,  515,  519,  523, 1926,
     1281,  527, 1926,  517,  522,  516,  516,  516,  525,  520,
     1931,  532,  521, 1931, 1279,  517,  517,  517,  518,  518,
      518,  527,  528,  522,  522,  522,  519,  519,  519,  520,
      520,  520,  521,  521,  521,  524,  523,  523,  526,  532,

     1278,  525,  524,  524,  524,  529,  528, 1276,  530,  523,
      523,  523,  527,  527,  527,  531, 1275, 1274,  534,  525,
      525,  525,  532,  532,  532,  533,  526,  529,  537,  526,
      530, 1271,  535,  528,  528,  528,  538,  724,  724,  724,
      531,  536, 1270, 1269,  540,  730,  730,  730,  539,  526,
      526,  526,  537, 1268,  542, 1267,  529,  529,  529,  530,
      530,  530,  541, 1264,  533,  543,  531,  531,  531,  534,
      534,  534,  535,  536,  542,  538,  533,  533,  533,  537,
      537,  537,  539,  535,  535,  535,  544,  538,  538,  538,
      541,  546,  536,  536,  536,  540,  540,  540,  545,  539,

      539,  539,  543,  547, 1263,  542,  542,  542,  544,  548,
     1262, 1260,  550,  541,  541,  541,  543,  543,  543, 1259,
     1962,  549,  545, 1962, 1258,  551, 1963,  547, 1967, 1963,
      546, 1967,  552, 1257, 1256,  553,  550,  544,  544,  544,
     1255,  554,  546,  546,  546,  555, 1254,  548,  556,  545,
      545,  545,  549, 1253,  547,  547,  547,  551, 1252,  558,
      548,  548,  548,  550,  550,  550,  552,  557,  553, 1251,
      556,  561,  549,  549,  549,  554,  551,  551,  551,  558,
     1249,  559,  555,  552,  552,  552,  553,  553,  553,  560,
     1248,  557,  554,  554,  554,  567,  555,  555,  555,  556,

      556,  556,  562, 1968, 1247,  561, 1968,  563, 1245, 1244,
      558,  558,  558,  564,  734,  734,  734,  568,  557,  557,
      557,  559,  561,  561,  561,  569,  562,  567,  565, 1243,
      560,  570,  559,  559,  559,  563, 1969,  564,  566, 1969,
      560,  560,  560,  572, 1242, 1240,  567,  567,  567,  571,
      568, 1239,  565,  562,  562,  562,  574,  570,  563,  563,
      563,  573,  566,  569,  564,  564,  564,  565,  568,  568,
      568,  723,  566,  575, 1238, 1237,  569,  569,  569,  565,
      565,  565,  570,  570,  570, 1236, 1234,  576,  571,  566,
      566,  566,  577, 1233,  572,  572,  572,  575,  578,  573,

      571,  571,  571,  579, 1089,  723,  580,  574,  574,  574,
     1088,  723,  573,  573,  573,  576,  723,  584,  723, 1086,
      581,  723,  578, 1085,  575,  575,  575,  577,  583,  751,
      751,  751, 1084, 1082,  582, 1081,  579,  584,  576,  576,
      576,  585, 1080,  577,  577,  577,  580,  587, 1079,  578,
      578,  578,  586, 1078,  579,  579,  579,  580,  580,  580,
      581,  589,  582, 1075,  588,  585, 1074,  583,  584,  584,
      584,  581,  581,  581,  582,  587,  590, 1073, 1071,  583,
      583,  583,  587,  591, 1070,  582,  582,  582,  588, 1069,
      592,  586,  585,  585,  585,  593, 1068, 1062,  587,  587,

      587,  594, 1061,  586,  586,  586,  600,  591, 1060,  595,
     1058, 1057,  589,  589,  589,  588,  588,  588, 1056, 1055,
      596,  760,  760,  760,  598, 1052,  600,  590,  590,  590,
      592,  597, 1051,  593,  591,  591,  591,  595, 1050, 1048,
      604,  592,  592,  592,  596,  594,  593,  593,  593, 1047,
      601,  597,  594,  594,  594,  597, 1046,  600,  600,  600,
      595,  595,  595,  598,  599,  603, 1040, 1039,  599, 1038,
     1036,  596,  596,  596,  602,  598,  598,  598,  601,  605,
      604, 1035,  597,  597,  597,  606, 1034,  603, 1032,  607,
      599,  604,  604,  604,  608, 1030,  602,  609, 1029, 1028,

      612,  601,  601,  601,  610,  605, 1026,  613,  606,  607,
      614, 1025,  602,  611,  608,  602,  603,  603,  603,  599,
      599,  599,  619, 1024,  612,  602,  602,  602,  609,  616,
      605,  605,  605,  611,  614,  613,  606,  606,  606,  615,
      607,  607,  607,  618,  610,  608,  608,  608,  609,  609,
      609,  612,  612,  612,  616,  610,  610,  610,  613,  613,
      613,  614,  614,  614,  611,  611,  611,  617,  769,  769,
      769, 1023,  620,  619,  619,  619,  615,  621, 1020, 1019,
      616,  616,  616,  618, 1018,  622,  773,  773,  773,  623,
      615,  615,  615,  627,  618,  618,  618,  632, 1016, 1015,

      625,  779,  779,  779,  626,  617,  617,  620,  622, 1014,
      624, 1012,  621,  623, 1011,  628, 1010,  632,  617,  617,
      617,  627,  633,  620,  620,  620,  629, 1009,  621,  621,
      621,  624,  625,  627,  631, 1008,  622,  622,  622,  626,
      623,  623,  623,  630,  627,  627,  627,  624,  632,  632,
      632,  625,  625,  625,  628,  626,  626,  626,  631,  634,
     1005,  624,  624,  624,  635,  629,  628,  628,  628,  636,
     1004, 1003,  637,  633,  633,  633,  630,  629,  629,  629,
      634,  630,  638, 1002, 1001,  631,  631,  631,  635,  639,
      783,  783,  783,  640,  630,  630,  630,  998,  997,  641,

      996,  994,  638,  636,  642,  636,  993,  646,  992,  637,
      634,  634,  634,  639,  990,  635,  635,  635,  989,  988,
      636,  636,  636,  637,  637,  637,  640,  641,  643,  986,
      984,  645,  642,  638,  638,  638,  644,  983,  646,  641,
      639,  639,  639,  651,  640,  640,  640,  647,  981,  980,
      641,  641,  641,  648,  979,  642,  642,  642,  646,  646,
      646,  977,  644,  649,  645,  976,  643,  651,  645,  650,
      647,  975,  974,  652,  973,  971,  648,  674,  970,  643,
      643,  643,  645,  645,  645,  969,  967,  644,  644,  644,
      649,  966,  650,  738,  651,  651,  651,  755,  647,  647,

      647,  693,  693,  693,  648,  648,  648,  652,  697,  697,
      697,  964,  963,  759,  649,  649,  649,  794,  794,  794,
      650,  650,  650,  799,  652,  652,  652,  697,  674,  674,
      674,  715,  715,  715,  801,  962,  715,  719,  719,  719,
      798,  961,  719,  800,  738,  738,  738,  759,  755,  755,
      755,  960,  958,  759,  957,  956,  719,  797,  759,  796,
      759,  802,  795,  759,  803,  799,  792,  801,  791,  790,
      804,  693,  693,  693,  799,  799,  799,  798,  697,  697,
      697,  800,  968,  968,  968,  801,  801,  801,  805,  789,
      786,  798,  798,  798,  800,  800,  800,  803,  804,  785,

      806,  715,  715,  715,  806,  802,  784,  719,  719,  719,
      745,  782,  802,  802,  802,  803,  803,  803,  781,  780,
      805,  804,  804,  804,  745,  807,  972,  972,  972, 1033,
     1033, 1033,  745,  745,  745,  745,  745,  778,  808,  805,
      805,  805,  776,  809,  775,  745,  745,  745,  745,  745,
      745,  763,  810,  774,  772,  806,  806,  806,  771,  811,
      763,  808,  807,  770,  761,  812,  757,  756,  763,  763,
      763,  763,  763,  809,  814,  754,  807,  807,  807,  811,
      817,  763,  763,  763,  763,  763,  763,  753,  752,  808,
      808,  808,  812,  813,  809,  809,  809,  814,  742,  741,

      815,  740,  739,  810,  810,  810,  816,  737,  736,  820,
      811,  811,  811,  735,  818,  733,  812,  812,  812,  817,
      815,  732,  821,  813,  815,  814,  814,  814,  731,  822,
      816,  817,  817,  817,  818,  819,  823,  728,  818,  819,
      727,  726,  818,  829,  813,  813,  813,  824,  820,  822,
      725,  815,  815,  815,  821,  825,  721,  816,  816,  816,
      820,  820,  820,  829,  826,  818,  818,  818,  720,  827,
      718,  717,  828,  821,  821,  821,  823,  830,  716,  825,
      822,  822,  822,  832,  713,  712,  824,  823,  823,  823,
      819,  819,  819,  827,  829,  829,  829,  833,  824,  824,

      824,  826,  831,  711,  710,  835,  825,  825,  825,  830,
      834,  828,  707,  836,  706,  826,  826,  826,  705,  704,
      827,  827,  827,  828,  828,  828,  831,  837,  830,  830,
      830,  838,  700,  834,  832,  832,  832,  839,  699,  698,
      840,  833,  835,  696,  836,  695,  842,  694,  833,  833,
      833,  692,  843,  831,  831,  831,  835,  835,  835,  841,
      691,  834,  834,  834,  836,  836,  836,  844,  690,  689,
      838,  837,  839,  845, 1037, 1037, 1037,  847,  837,  837,
      837,  846,  838,  838,  838,  842,  843,  844,  839,  839,
      839,  840,  840,  840,  849,  844,  841,  842,  842,  842,

      847,  848,  688,  843,  843,  843,  851,  687,  686,  850,
      841,  841,  841,  681,  853,  680,  846,  852,  844,  844,
      844,  854,  679,  677,  845,  845,  845,  855,  847,  847,
      847,  860,  846,  846,  846, 1045, 1045, 1045,  856,  676,
      848,  675,  857,  851,  673,  849,  849,  849,  850,  853,
      858,  860,  848,  848,  848,  859,  852,  851,  851,  851,
      850,  850,  850,  862,  855,  853,  853,  853,  852,  852,
      852,  672,  854,  854,  854,  857,  863,  671,  855,  855,
      855,  856,  860,  860,  860,  861,  669,  858,  859,  856,
      856,  856,  859,  857,  857,  857,  864,  865,  668,  667,

      864,  858,  858,  858,  866,  666,  859,  859,  859,  867,
      665,  861,  869,  662,  862,  862,  862,  661,  660,  868,
      659,  658,  861,  871, 1049, 1049, 1049,  863,  863,  863,
      870, 1059, 1059, 1059,  873,  654,  861,  861,  861,  653,
      872,  498,  497,  869,  866,  495,  874,  494,  865,  865,
      865,  864,  864,  864,  493,  866,  866,  866,  868,  876,
      867,  867,  867,  869,  869,  869,  874,  875,  490,  870,
      868,  868,  868,  873,  871,  871,  871,  872,  877,  489,
      488,  870,  870,  870,  876,  873,  873,  873,  878,  487,
      483,  872,  872,  872,  879,  482,  481,  874,  874,  874,

      880,  473,  471,  881,  470,  875,  883,  469,  466,  877,
      876,  876,  876,  885,  465,  879,  882,  464,  875,  875,
      875,  455,  884,  454,  453,  886,  452,  450,  888,  877,
      877,  877,  449,  890,  448,  885,  446,  887,  880,  878,
      878,  878,  445,  883,  444,  879,  879,  879,  889,  882,
      437,  880,  880,  880,  881,  881,  881,  883,  883,  883,
      884,  887,  886,  892,  885,  885,  885,  882,  882,  882,
      890,  891,  436,  884,  884,  884,  886,  886,  886,  888,
      888,  888,  889,  893,  890,  890,  890,  894,  887,  887,
      887,  435,  433,  895,  432,  431,  892,  891,  897,  889,

      889,  889,  428,  896,  427,  422,  898,  893,  904,  899,
      421,  420,  904,  417,  892,  892,  892,  895,  416,  894,
      900,  995,  891,  891,  891, 1067, 1067, 1067,  901,  415,
      898,  905,  412,  899,  893,  893,  893,  897,  894,  894,
      894,  896,  902,  396,  895,  895,  895,  395,  900,  897,
      897,  897,  901,  903,  896,  896,  896,  898,  898,  898,
      899,  899,  899,  904,  904,  904,  902,  906,  393,  392,
      905,  900,  900,  900,  391,  382,  907,  903,  381,  901,
      901,  901,  905,  905,  905,  908,  995,  995,  995,  380,
      909,  379,  373,  902,  902,  902,  907,  910,  372,  906,

      371,  911,  369,  368,  903,  903,  903,  367,  912,  365,
      364,  913,  362,  361,  914,  360,  353,  915,  906,  906,
      906,  909,  908,  916,  352,  351,  918,  907,  907,  907,
      350,  917,  342,  341,  919,  913,  908,  908,  908,  911,
      912,  909,  909,  909,  920,  915,  340,  916,  910,  910,
      910,  921,  911,  911,  911,  917,  339,  918,  922,  912,
      912,  912,  913,  913,  913,  914,  914,  914,  915,  915,
      915,  335,  920,  923,  916,  916,  916,  918,  918,  918,
      334,  924,  917,  917,  917,  919,  919,  919,  925,  922,
      333,  230,  926,  229,  228,  920,  920,  920,  927,  209,

      207,  928,  921,  921,  921,  929,  204,  203,  930,  922,
      922,  922,  923,  924,  926,  931, 1072, 1072, 1072,  202,
      927,  198,  194,  928,  923,  923,  923,  926,  940,  193,
      192,  932,  924,  924,  924,  931,  933,  191,  190,  925,
      925,  925,  934,  926,  926,  926,  189,  935,  185,  927,
      927,  927,  928,  928,  928,  938,  929,  929,  929,  930,
      930,  930,  177,  936,  176,  940,  931,  931,  931,  932,
      937,  175,  174,  934,  939,  933,  173,  941,  938,  940,
      940,  940,  932,  932,  932,  935,  942,  933,  933,  933,
      171,  170,  944,  934,  934,  934,  936,  946,  935,  935,

      935,  947,  166,  941,  945,  165,  938,  938,  938,  942,
      937,  943,  944,  939,  936,  936,  936,  948,  164,  163,
      950,  937,  937,  937,  946,  939,  939,  939,  941,  941,
      941,  951,  945,  162,  949,  943,  152,  942,  942,  942,
      952,  948,  950,  944,  944,  944,  150,  147,  946,  946,
      946,  953,  947,  947,  947,  945,  945,  945,  949,  954,
      146,  145,  943,  943,  943,  951,  141,  140,  948,  948,
      948,  950,  950,  950,  952,  955,  987,  987,  987,  955,
      134,  133,  951,  951,  951,  949,  949,  949, 1090,  953,
     1246,  952,  952,  952,  132,  131,  954,  991,  991,  991,

     1091,  130,  953,  953,  953, 1027, 1027, 1027, 1094,  128,
      954,  954,  954, 1013, 1013, 1013,  127,  126, 1013, 1017,
     1017, 1017,  123,  118, 1017, 1083, 1083, 1083, 1091,  117,
      955,  955,  955, 1087, 1087, 1087, 1235, 1235, 1235, 1090,
     1090, 1090, 1092, 1272, 1272, 1272,  987,  987,  987, 1093,
      115, 1091, 1091, 1091,  112, 1246, 1246, 1246, 1096, 1094,
     1094, 1094, 1280, 1280, 1280,  111,  110,  991,  991,  991,
     1101,  106, 1093, 1095,  103, 1027, 1027, 1027,  102, 1096,
      101, 1092,   73, 1013, 1013, 1013,   60, 1097,   55, 1017,
     1017, 1017, 1041, 1092, 1092, 1092, 1095, 1284, 1284, 1284,

     1093, 1093, 1093,   47,   43, 1098, 1041, 1097, 1041, 1096,
     1096, 1096,   30,   29, 1041, 1041, 1041, 1041, 1041, 1099,
        0, 1101, 1101, 1101, 1095, 1095, 1095, 1041, 1041, 1041,
     1041, 1041, 1041, 1063,    0, 1100,    0,    0, 1097, 1097,
     1097, 1102, 1063, 1099, 1063, 1098, 1103,    0,    0, 1104,
     1063, 1063, 1063, 1063, 1063, 1100, 1098, 1098, 1098, 1105,
        0,    0, 1102, 1063, 1063, 1063, 1063, 1063, 1063, 1106,
     1099, 1099, 1099, 1107,    0,    0, 1108,    0,    0, 1109,
     1295, 1295, 1295,    0,    0, 1110, 1100, 1100, 1100,    0,
     1111,    0, 1102, 1102, 1102, 1107,    0, 1103, 1103, 1103,

     1104, 1104, 1104, 1114,    0,    0, 1112,    0, 1106, 1108,
     1105, 1105, 1105, 1110, 1113,    0, 1109, 1117,    0,    0,
     1106, 1106, 1106, 1111, 1107, 1107, 1107, 1108, 1108, 1108,
     1109, 1109, 1109, 1111, 1116,    0, 1110, 1110, 1110, 1112,
     1115, 1111, 1111, 1111, 1119,    0,    0, 1113, 1117, 1118,
        0,    0, 1120,    0, 1114, 1114, 1114, 1112, 1112, 1112,
     1115, 1121,    0,    0, 1122, 1113, 1113, 1113, 1117, 1117,
     1117, 1116,    0, 1118, 1123,    0,    0, 1119, 1125,    0,
     1120,    0, 1124,    0, 1126, 1116, 1116, 1116, 1126,    0,
        0, 1115, 1115, 1115, 1127, 1119, 1119, 1119, 1121, 1128,

     1118, 1118, 1118, 1120, 1120, 1120, 1124, 1123, 1129,    0,
        0, 1125, 1121, 1121, 1121, 1122, 1122, 1122, 1130,    0,
        0, 1133, 1127, 1128, 1131, 1123, 1123, 1123, 1132, 1125,
     1125, 1125, 1134, 1124, 1124, 1124, 1129, 1137,    0, 1126,
     1126, 1126,    0,    0, 1135, 1127, 1127, 1127, 1138,    0,
     1128, 1128, 1128, 1139, 1133, 1131, 1136,    0,    0, 1129,
     1129, 1129, 1140, 1137,    0, 1141,    0, 1132, 1143, 1130,
     1130, 1130, 1133, 1133, 1133, 1131, 1131, 1131, 1136, 1132,
     1132, 1132, 1142, 1134, 1134, 1134, 1135, 1138, 1137, 1137,
     1137, 1145, 1143, 1141, 1144, 1135, 1135, 1135, 1146, 1138,

     1138, 1138, 1142, 1147, 1139, 1139, 1139, 1136, 1136, 1136,
     1148,    0,    0, 1140, 1140, 1140, 1141, 1141, 1141, 1143,
     1143, 1143, 1144, 1152,    0,    0, 1149,    0,    0, 1150,
     1145, 1147, 1151, 1142, 1142, 1142, 1156,    0, 1148, 1154,
        0,    0, 1145, 1145, 1145, 1144, 1144, 1144, 1153, 1146,
     1146, 1146, 1155,    0, 1147, 1147, 1147, 1157,    0,    0,
     1152, 1148, 1148, 1148, 1149, 1151, 1158, 1154, 1150,    0,
        0, 1159, 1155, 1250, 1152, 1152, 1152, 1149, 1149, 1149,
     1150, 1150, 1150, 1151, 1151, 1151, 1153, 1156, 1156, 1156,
     1154, 1154, 1154, 1159, 1160, 1157,    0, 1161, 1162, 1153,

     1153, 1153, 1162, 1155, 1155, 1155,    0, 1163, 1157, 1157,
     1157, 1164,    0,    0, 1160, 1167,    0, 1158, 1158, 1158,
        0, 1165, 1159, 1159, 1159,    0, 1166,    0, 1161, 1169,
        0,    0, 1168,    0,    0, 1164, 1170,    0, 1250, 1250,
     1250,    0, 1167,    0,    0, 1160, 1160, 1160, 1161, 1161,
     1161, 1163, 1165, 1162, 1162, 1162, 1168, 1171, 1163, 1163,
     1163, 1166, 1164, 1164, 1164, 1172, 1167, 1167, 1167, 1173,
        0,    0, 1165, 1165, 1165, 1170, 1175, 1166, 1166, 1166,
     1169, 1169, 1169, 1168, 1168, 1168, 1176, 1170, 1170, 1170,
        0, 1174,    0,    0, 1177, 1171,    0,    0, 1178,    0,

        0, 1179, 1173,    0, 1172,    0, 1180,    0, 1171, 1171,
     1171,    0, 1181, 1175,    0, 1174, 1172, 1172, 1172, 1174,
     1173, 1173, 1173, 1183,    0, 1176, 1178, 1175, 1175, 1175,
     1180, 1177, 1182,    0, 1179, 1184,    0, 1176, 1176, 1176,
     1181, 1185, 1174, 1174, 1174, 1177, 1177, 1177, 1186, 1178,
     1178, 1178, 1179, 1179, 1179, 1182, 1187, 1180, 1180, 1180,
     1183, 1188,    0, 1181, 1181, 1181,    0,    0, 1189, 1184,
     1299, 1299, 1299, 1190, 1183, 1183, 1183, 1192,    0, 1185,
     1191,    0,    0, 1182, 1182, 1182, 1184, 1184, 1184, 1193,
        0,    0, 1185, 1185, 1185, 1188, 1189, 1190, 1194, 1186,

     1186, 1186, 1191, 1196,    0,    0, 1197, 1187, 1187, 1187,
     1192, 1198, 1188, 1188, 1188, 1195,    0, 1193,    0, 1189,
     1189, 1189, 1200, 1194, 1190, 1190, 1190, 1199, 1192, 1192,
     1192, 1191, 1191, 1191,    0, 1195, 1201,    0,    0, 1203,
     1193, 1193, 1193, 1205, 1198, 1197, 1200, 1202,    0, 1194,
     1194, 1194,    0, 1204, 1196, 1196, 1196, 1197, 1197, 1197,
     1199, 1206, 1198, 1198, 1198, 1210, 1195, 1195, 1195, 1201,
     1207, 1202,    0, 1200, 1200, 1200, 1208,    0, 1199, 1199,
     1199, 1204, 1205,    0, 1209,    0,    0, 1201, 1201, 1201,
     1203, 1203, 1203, 1211, 1205, 1205, 1205, 1212, 1202, 1202,

     1202, 1213,    0, 1208, 1204, 1204, 1204, 1214,    0, 1207,
     1215,    0, 1206, 1206, 1206, 1216, 1210, 1210, 1210, 1217,
        0, 1207, 1207, 1207, 1209, 1212, 1219, 1208, 1208, 1208,
     1221,    0,    0, 1218, 1215, 1209, 1209, 1209,    0, 1216,
     1223,    0,    0, 1213, 1211, 1211, 1211, 1217, 1212, 1212,
     1212,    0, 1213, 1213, 1213, 1218, 1220,    0, 1214, 1214,
     1214, 1215, 1215, 1215, 1224,    0, 1216, 1216, 1216, 1222,
     1217, 1217, 1217, 1225, 1223,    0, 1220, 1219, 1219, 1219,
     1226, 1221, 1221, 1221, 1218, 1218, 1218, 1228,    0,    0,
     1222, 1223, 1223, 1223, 1227,    0,    0, 1229,    0,    0,

     1230,    0,    0, 1224, 1232,    0, 1433, 1220, 1220, 1220,
     1231, 1241, 1241, 1241, 1227, 1224, 1224, 1224,    0, 1315,
     1222, 1222, 1222, 1315, 1225, 1225, 1225, 1232,    0, 1228,
        0, 1226, 1226, 1226, 1273, 1273, 1273, 1229, 1228, 1228,
     1228, 1277, 1277, 1277, 1313, 1227, 1227, 1227, 1229, 1229,
     1229, 1230, 1230, 1230, 1231, 1232, 1232, 1232, 1309, 1309,
     1309, 1231, 1231, 1231, 1261, 1261, 1261, 1314,    0, 1261,
     1316, 1433, 1433, 1433, 1315, 1315, 1315, 1313, 1318,    0,
        0, 1241, 1241, 1241,    0,    0, 1317, 1452, 1452, 1452,
     1319,    0,    0, 1320,    0, 1313, 1313, 1313, 1316,    0,

     1323, 1314,    0, 1321, 1273, 1273, 1273,    0,    0, 1324,
        0, 1277, 1277, 1277,    0,    0, 1322, 1318, 1314, 1314,
     1314, 1316, 1316, 1316, 1325,    0, 1317, 1319, 1323, 1318,
     1318, 1318, 1327,    0, 1261, 1261, 1261, 1317, 1317, 1317,
     1321, 1319, 1319, 1319, 1320, 1320, 1320, 1322, 1324,    0,
     1326, 1323, 1323, 1323, 1321, 1321, 1321, 1328,    0,    0,
     1324, 1324, 1324, 1325,    0, 1327, 1329, 1322, 1322, 1322,
     1326, 1330,    0,    0, 1331, 1325, 1325, 1325,    0,    0,
        0, 1332,    0, 1327, 1327, 1327, 1335,    0,    0, 1333,
     1326,    0, 1334,    0, 1331,    0, 1328, 1336,    0,    0,

        0, 1326, 1326, 1326, 1338, 1329,    0, 1337, 1328, 1328,
     1328, 1330, 1332, 1333, 1339,    0,    0, 1329, 1329, 1329,
     1336, 1340, 1330, 1330, 1330, 1331, 1331, 1331, 1338, 1341,
        0, 1334, 1332, 1332, 1332, 1344, 1339, 1335, 1335, 1335,
     1333, 1333, 1333, 1334, 1334, 1334, 1337, 1342, 1336, 1336,
     1336, 1343,    0,    0, 1340, 1338, 1338, 1338, 1337, 1337,
     1337,    0, 1345,    0,    0, 1339, 1339, 1339, 1341, 1347,
        0,    0, 1340, 1340, 1340, 1346,    0,    0, 1349,    0,
     1341, 1341, 1341, 1350, 1343, 1342, 1344, 1344, 1344, 1348,
        0,    0, 1351,    0,    0, 1352,    0,    0, 1342, 1342,

     1342, 1345, 1343, 1343, 1343, 1353, 1349,    0, 1357, 1348,
     1350,    0, 1355, 1345, 1345, 1345,    0,    0, 1354, 1346,
     1347, 1347, 1347, 1352,    0, 1351, 1346, 1346, 1346, 1349,
     1349, 1349,    0, 1356, 1350, 1350, 1350, 1358,    0, 1353,
     1348, 1348, 1348, 1351, 1351, 1351, 1352, 1352, 1352, 1354,
     1355,    0, 1359,    0,    0, 1360, 1353, 1353, 1353, 1357,
     1357, 1357, 1361, 1355, 1355, 1355, 1356, 1363,    0, 1354,
     1354, 1354, 1362,    0,    0, 1364, 1358,    0, 1365,    0,
        0, 1367,    0, 1360, 1356, 1356, 1356,    0, 1358, 1358,
     1358, 1359, 1368,    0, 1362, 1363, 1366,    0,    0, 1364,

        0,    0, 1371, 1359, 1359, 1359, 1360, 1360, 1360, 1369,
        0,    0, 1368, 1361, 1361, 1361, 1372, 1365, 1363, 1363,
     1363, 1370, 1366, 1362, 1362, 1362, 1364, 1364, 1364, 1365,
     1365, 1365, 1367, 1367, 1367, 1373,    0, 1369,    0, 1374,
     1371,    0, 1377, 1368, 1368, 1368, 1375, 1366, 1366, 1366,
        0, 1376, 1370, 1371, 1371, 1371, 1378,    0,    0, 1379,
     1369, 1369, 1369, 1374, 1380,    0, 1375, 1372, 1372, 1372,
     1381,    0, 1370, 1370, 1370, 1376,    0, 1382,    0,    0,
     1377, 1383,    0,    0,    0, 1384, 1373, 1373, 1373, 1385,
     1374, 1374, 1374, 1377, 1377, 1377, 1387, 1375, 1375, 1375,

     1382,    0, 1376, 1376, 1376, 1384, 1386, 1378, 1378, 1378,
     1379, 1379, 1379, 1388, 1383, 1380, 1380, 1380, 1389,    0,
        0, 1381, 1381, 1381,    0,    0, 1390, 1387, 1382, 1382,
     1382, 1392, 1383, 1383, 1383, 1391, 1384, 1384, 1384, 1386,
     1385, 1385, 1385,    0,    0, 1393,    0, 1387, 1387, 1387,
        0, 1394, 1388,    0,    0,    0, 1396, 1386, 1386, 1386,
     1390, 1395,    0, 1391, 1388, 1388, 1388, 1397,    0, 1389,
     1389, 1389, 1392,    0,    0, 1398,    0, 1390, 1390, 1390,
        0,    0, 1392, 1392, 1392, 1393, 1391, 1391, 1391, 1394,
     1396,    0,    0, 1399, 1395,    0, 1393, 1393, 1393, 1398,

     1400,    0, 1394, 1394, 1394, 1401, 1402, 1396, 1396, 1396,
     1402,    0, 1395, 1395, 1395, 1403,    0,    0, 1397, 1397,
     1397, 1399, 1406, 1400,    0, 1404, 1398, 1398, 1398,    0,
     1405,    0,    0, 1401, 1407,    0,    0, 1408,    0,    0,
        0,    0, 1410, 1403, 1399, 1399, 1399, 1404, 1412,    0,
        0, 1400, 1400, 1400, 1413,    0, 1401, 1401, 1401, 1409,
     1407, 1402, 1402, 1402, 1411,    0, 1403, 1403, 1403, 1405,
     1414,    0,    0, 1406, 1406, 1406, 1404, 1404, 1404,    0,
     1415, 1405, 1405, 1405, 1416, 1407, 1407, 1407, 1408, 1408,
     1408, 1413, 1409, 1410, 1410, 1410,    0, 1417,    0, 1412,

     1412, 1412, 1420, 1414, 1411, 1413, 1413, 1413, 1415, 1418,
     1409, 1409, 1409, 1421,    0, 1411, 1411, 1411, 1419,    0,
        0, 1414, 1414, 1414, 1422,    0,    0, 1423,    0,    0,
     1424, 1415, 1415, 1415, 1417, 1416, 1416, 1416, 1419, 1425,
        0, 1420, 1418,    0, 1421, 1426,    0,    0, 1417, 1417,
     1417, 1427,    0, 1420, 1420, 1420,    0, 1422, 1428,    0,
     1418, 1418, 1418, 1458, 1421, 1421, 1421, 1424, 1459, 1419,
     1419, 1419, 1442, 1442, 1442, 1422, 1422, 1422, 1423, 1423,
     1423, 1424, 1424, 1424, 1426, 1461, 1428,    0, 1460, 1458,
     1425, 1425, 1425,    0, 1462,    0, 1426, 1426, 1426, 1463,

        0,    0, 1427, 1427, 1427, 1459, 1464,    0,    0, 1428,
     1428, 1428, 1465,    0, 1458, 1458, 1458, 1469, 1461, 1459,
     1459, 1459, 1460,    0, 1466,    0,    0, 1463, 1467,    0,
        0,    0, 1468, 1462, 1464, 1472, 1461, 1461, 1461, 1460,
     1460, 1460, 1442, 1442, 1442, 1462, 1462, 1462, 1466, 1471,
     1463, 1463, 1463,    0, 1470,    0, 1465, 1464, 1464, 1464,
     1468, 1473, 1467, 1465, 1465, 1465, 1474,    0, 1469, 1469,
     1469, 1471, 1475, 1472,    0, 1466, 1466, 1466, 1476, 1467,
     1467, 1467, 1470, 1468, 1468, 1468, 1472, 1472, 1472, 1477,
     1478,    0,    0, 1477,    0,    0, 1475, 1479,    0,    0,

     1471, 1471, 1471,    0, 1481, 1470, 1470, 1470, 1480,    0,
     1476, 1483, 1473, 1473, 1473, 1484,    0, 1474, 1474, 1474,
     1482,    0,    0, 1475, 1475, 1475, 1485,    0, 1480, 1476,
     1476, 1476, 1481,    0, 1486, 1483, 1480,    0,    0, 1487,
        0, 1478, 1478, 1478, 1477, 1477, 1477, 1489, 1479, 1479,
     1479, 1488,    0, 1482, 1484, 1481, 1481, 1481, 1486, 1480,
     1480, 1480, 1483, 1483, 1483, 1487, 1484, 1484, 1484,    0,
     1490, 1482, 1482, 1482, 1491,    0,    0, 1485, 1485, 1485,
     1492,    0,    0, 1493,    0, 1486, 1486, 1486, 1496,    0,
     1487, 1487, 1487,    0, 1494, 1488,    0, 1495, 1489, 1489,

     1489, 1490, 1488, 1488, 1488, 1497,    0, 1491, 1499,    0,
        0, 1498,    0,    0, 1500,    0,    0,    0, 1502,    0,
        0, 1490, 1490, 1490,    0, 1491, 1491, 1491, 1494, 1501,
     1495, 1492, 1492, 1492, 1493, 1493, 1493, 1498, 1503, 1496,
     1496, 1496, 1502,    0, 1497, 1494, 1494, 1494, 1495, 1495,
     1495, 1504, 1499,    0, 1505,    0, 1497, 1497, 1497, 1499,
     1499, 1499, 1498, 1498, 1498, 1500, 1500, 1500, 1501, 1502,
     1502, 1502, 1506, 1504,    0, 1507,    0, 1503, 1505, 1508,
     1501, 1501, 1501,    0,    0, 1509,    0,    0, 1510, 1503,
     1503, 1503, 1511,    0,    0, 1512, 1506,    0, 1513,    0,

        0, 1515, 1504, 1504, 1504, 1505, 1505, 1505,    0, 1514,
     1518,    0, 1508, 1507, 1518,    0, 1510, 1512,    0,    0,
     1517,    0,    0, 1506, 1506, 1506, 1507, 1507, 1507, 1509,
     1508, 1508, 1508, 1514,    0, 1513, 1509, 1509, 1509, 1510,
     1510, 1510, 1516, 1511, 1511, 1511, 1512, 1512, 1512, 1513,
     1513, 1513, 1515, 1515, 1515, 1517, 1519,    0,    0, 1520,
     1514, 1514, 1514, 1521,    0, 1518, 1518, 1518, 1516, 1522,
        0, 1517, 1517, 1517, 1523,    0,    0,    0,    0, 1524,
        0,    0, 1528,    0,    0, 1525,    0, 1519, 1526,    0,
        0, 1527,    0, 1516, 1516, 1516, 1521,    0, 1523,    0,

        0,    0, 1522, 1530,    0,    0, 1533, 1519, 1519, 1519,
     1520, 1520, 1520, 1525, 1521, 1521, 1521, 1524, 1529, 1526,
     1522, 1522, 1522, 1530, 1527, 1523, 1523, 1523, 1531,    0,
     1524, 1524, 1524, 1528, 1528, 1528, 1525, 1525, 1525, 1526,
     1526, 1526, 1527, 1527, 1527, 1535,    0, 1533, 1532,    0,
        0, 1529, 1531, 1534, 1530, 1530, 1530, 1533, 1533, 1533,
     1536,    0,    0, 1537,    0,    0, 1538,    0, 1532, 1529,
     1529, 1529, 1532, 1535,    0,    0, 1540, 1534,    0, 1531,
     1531, 1531, 1539,    0,    0, 1541,    0,    0, 1544, 1537,
        0, 1547,    0,    0, 1543,    0, 1535, 1535, 1535, 1532,

     1532, 1532, 1540, 1538, 1534, 1534, 1534, 1542,    0,    0,
     1549, 1536, 1536, 1536, 1537, 1537, 1537, 1538, 1538, 1538,
     1543, 1556, 1539,    0, 1541, 1545, 1544, 1540, 1540, 1540,
     1546, 1542,    0, 1539, 1539, 1539, 1541, 1541, 1541, 1544,
     1544, 1544, 1547, 1547, 1547, 1543, 1543, 1543, 1548, 1545,
        0,    0, 1557, 1550, 1546,    0, 1557,    0, 1542, 1542,
     1542, 1549, 1549, 1549, 1558,    0,    0, 1559,    0,    0,
     1560, 1548, 1556, 1556, 1556, 1562, 1545, 1545, 1545, 1550,
     1561, 1546, 1546, 1546, 1563, 1564,    0,    0, 1563,    0,
        0, 1565,    0, 1559, 1560, 1566,    0, 1558, 1569, 1548,

     1548, 1548, 1561, 1570, 1550, 1550, 1550, 1557, 1557, 1557,
        0,    0, 1567,    0,    0, 1558, 1558, 1558, 1559, 1559,
     1559, 1560, 1560, 1560, 1565,    0, 1562, 1562, 1562, 1566,
     1568, 1561, 1561, 1561, 1571,    0, 1564, 1564, 1564, 1563,
     1563, 1563, 1565, 1565, 1565, 1567, 1566, 1566, 1566, 1569,
     1569, 1569, 1572,    0, 1570, 1570, 1570,    0, 1571, 1573,
        0,    0, 1574, 1567, 1567, 1567, 1575,    0,    0, 1568,
     1576,    0, 1578, 1577,    0,    0, 1578, 1572,    0,    0,
     1579, 1568, 1568, 1568, 1580, 1571, 1571, 1571, 1575, 1581,
     1572,    0, 1573, 1582,    0, 1574,    0, 1584,    0,    0,

     1585,    0,    0, 1572, 1572, 1572,    0,    0, 1583, 1576,
     1573, 1573, 1573, 1574, 1574, 1574, 1579, 1575, 1575, 1575,
     1586, 1576, 1576, 1576, 1577, 1577, 1577, 1578, 1578, 1578,
     1584, 1579, 1579, 1579, 1583, 1580, 1580, 1580, 1588, 1587,
     1581, 1581, 1581, 1587, 1582, 1582, 1582, 1589, 1584, 1584,
     1584, 1585, 1585, 1585, 1590,    0,    0, 1591,    0, 1583,
     1583, 1583,    0, 1592,    0,    0, 1594,    0,    0, 1595,
        0, 1586, 1586, 1586, 1597, 1589,    0,    0,    0, 1593,
        0,    0, 1602,    0,    0, 1600,    0,    0, 1596, 1588,
     1588, 1588, 1601, 1595, 1587, 1587, 1587, 1598, 1589, 1589,

     1589, 1591, 1592,    0, 1599, 1590, 1590, 1590, 1591, 1591,
     1591, 1593, 1596, 1600, 1592, 1592, 1592, 1594, 1594, 1594,
     1595, 1595, 1595, 1598, 1603, 1597, 1597, 1597, 1599, 1601,
     1593, 1593, 1593, 1602, 1602, 1602, 1600, 1600, 1600, 1596,
     1596, 1596, 1604, 1601, 1601, 1601, 1605,    0, 1598, 1598,
     1598, 1603, 1606,    0,    0, 1599, 1599, 1599, 1607,    0,
        0, 1608,    0,    0, 1609,    0,    0, 1610,    0,    0,
     1605,    0,    0,    0,    0, 1603, 1603, 1603, 1611,    0,
     1604,    0,    0, 1612, 1607,    0, 1614,    0,    0,    0,
     1615,    0,    0, 1604, 1604, 1604, 1621, 1605, 1605, 1605,

     1610, 1613,    0, 1606, 1606, 1606, 1616,    0,    0, 1607,
     1607, 1607, 1608, 1608, 1608, 1609, 1609, 1609, 1610, 1610,
     1610, 1612, 1611,    0, 1617, 1614,    0, 1613, 1615, 1611,
     1611, 1611, 1618,    0, 1612, 1612, 1612, 1614, 1614, 1614,
     1619, 1615, 1615, 1615, 1620, 1616,    0, 1621, 1621, 1621,
     1622,    0, 1613, 1613, 1613, 1617, 1618, 1616, 1616, 1616,
     1623,    0,    0, 1624, 1620,    0, 1625,    0,    0,    0,
        0, 1626,    0,    0, 1622, 1617, 1617, 1617, 1619, 1627,
        0,    0, 1628, 1618, 1618, 1618, 1629,    0, 1625, 1630,
        0, 1619, 1619, 1619, 1626, 1620, 1620, 1620, 1623, 1632,

        0, 1622, 1622, 1622,    0, 1631, 1628,    0,    0,    0,
     1635, 1623, 1623, 1623, 1624, 1624, 1624, 1625, 1625, 1625,
     1637,    0, 1626, 1626, 1626, 1638,    0, 1632, 1636,    0,
     1627, 1627, 1627, 1628, 1628, 1628, 1640, 1629, 1629, 1629,
     1630, 1630, 1630, 1631, 1635, 1639,    0,    0, 1641,    0,
     1632, 1632, 1632, 1642,    0,    0, 1631, 1631, 1631, 1636,
     1646, 1635, 1635, 1635, 1643, 1639,    0, 1644,    0,    0,
     1645, 1637, 1637, 1637, 1640, 1648, 1638, 1638, 1638, 1636,
     1636, 1636,    0, 1647,    0,    0, 1642, 1640, 1640, 1640,
        0, 1650,    0,    0, 1646, 1644, 1639, 1639, 1639, 1641,

     1641, 1641, 1651, 1643, 1642, 1642, 1642, 1647, 1645, 1653,
        0, 1646, 1646, 1646, 1648, 1643, 1643, 1643, 1644, 1644,
     1644, 1645, 1645, 1645, 1649,    0, 1648, 1648, 1648, 1650,
     1652,    0,    0, 1654, 1647, 1647, 1647, 1654,    0,    0,
     1655,    0, 1650, 1650, 1650,    0, 1656,    0,    0, 1653,
     1649, 1658,    0, 1651, 1651, 1651, 1659,    0,    0, 1657,
     1653, 1653, 1653, 1652, 1660,    0,    0, 1661,    0,    0,
     1664, 1662,    0,    0, 1664, 1649, 1649, 1649,    0,    0,
     1663, 1652, 1652, 1652, 1656,    0,    0, 1666, 1654, 1654,
     1654, 1655, 1655, 1655, 1662, 1665,    0, 1656, 1656, 1656,

     1657, 1669, 1658, 1658, 1658, 1667,    0, 1659, 1659, 1659,
     1657, 1657, 1657, 1663, 1672, 1660, 1660, 1660, 1661, 1661,
     1661, 1668, 1662, 1662, 1662, 1664, 1664, 1664, 1666, 1671,
        0, 1663, 1663, 1663, 1665, 1673,    0, 1670, 1666, 1666,
     1666, 1670,    0, 1667, 1674, 1668, 1665, 1665, 1665, 1675,
        0,    0, 1669, 1669, 1669, 1671, 1667, 1667, 1667, 1676,
        0,    0, 1673,    0, 1677, 1672, 1672, 1672, 1679,    0,
        0, 1680, 1668, 1668, 1668, 1678,    0, 1675, 1681,    0,
     1671, 1671, 1671, 1682,    0,    0, 1673, 1673, 1673, 1683,
        0,    0, 1670, 1670, 1670, 1674, 1674, 1674, 1684, 1678,

     1675, 1675, 1675, 1677, 1685,    0, 1682, 1686,    0, 1681,
     1676, 1676, 1676, 1687,    0, 1677, 1677, 1677,    0, 1679,
     1679, 1679, 1680, 1680, 1680, 1684, 1678, 1678, 1678, 1681,
     1681, 1681, 1688,    0, 1682, 1682, 1682, 1690,    0,    0,
     1683, 1683, 1683, 1691,    0,    0, 1692,    0,    0, 1684,
     1684, 1684, 1694,    0,    0, 1685, 1685, 1685, 1686, 1686,
     1686, 1695,    0,    0, 1687, 1687, 1687, 1693,    0,    0,
        0, 1688, 1696,    0, 1690, 1697,    0, 1692, 1698,    0,
        0, 1699, 1700, 1688, 1688, 1688, 1700, 1691, 1690, 1690,
     1690, 1701,    0,    0, 1691, 1691, 1691, 1692, 1692, 1692,

     1702,    0, 1693, 1694, 1694, 1694, 1696, 1703,    0,    0,
     1697, 1704, 1695, 1695, 1695, 1698, 1699, 1705, 1693, 1693,
     1693, 1706,    0, 1696, 1696, 1696, 1697, 1697, 1697, 1698,
     1698, 1698, 1699, 1699, 1699, 1704, 1708, 1700, 1700, 1700,
     1709, 1703, 1701, 1701, 1701, 1706,    0, 1707,    0,    0,
     1710, 1702, 1702, 1702, 1711, 1705,    0, 1712, 1703, 1703,
     1703, 1713, 1704, 1704, 1704,    0, 1715,    0, 1705, 1705,
     1705, 1707, 1706, 1706, 1706, 1716, 1714,    0,    0, 1716,
        0, 1712, 1718, 1710,    0,    0, 1719, 1708, 1708, 1708,
     1721, 1709, 1709, 1709, 1717,    0,    0, 1723, 1707, 1707,

     1707, 1710, 1710, 1710, 1715, 1711, 1711, 1711, 1712, 1712,
     1712, 1714, 1713, 1713, 1713, 1724, 1718, 1715, 1715, 1715,
     1720, 1722, 1717, 1719,    0, 1722,    0, 1714, 1714, 1714,
     1716, 1716, 1716, 1718, 1718, 1718, 1725, 1719, 1719, 1719,
     1725, 1721, 1721, 1721, 1726, 1717, 1717, 1717, 1723, 1723,
     1723, 1727, 1720,    0, 1728,    0,    0, 1729,    0,    0,
     1730,    0,    0, 1732,    0,    0, 1724, 1724, 1724, 1731,
        0, 1720, 1720, 1720, 1728, 1734, 1722, 1722, 1722,    0,
     1730,    0, 1727, 1732, 1733,    0,    0,    0,    0, 1736,
     1729, 1725, 1725, 1725, 1737, 1726, 1726, 1726, 1734, 1735,

        0, 1731, 1727, 1727, 1727, 1728, 1728, 1728, 1729, 1729,
     1729, 1730, 1730, 1730, 1732, 1732, 1732, 1736, 1733, 1738,
     1731, 1731, 1731, 1739,    0,    0, 1734, 1734, 1734, 1737,
     1740,    0, 1735, 1741,    0, 1733, 1733, 1733, 1742,    0,
     1736, 1736, 1736, 1744,    0, 1737, 1737, 1737,    0, 1743,
     1735, 1735, 1735, 1741, 1745,    0,    0, 1739,    0,    0,
     1746,    0,    0,    0,    0, 1748, 1742,    0, 1747,    0,
     1738, 1738, 1738,    0, 1739, 1739, 1739, 1743, 1744, 1750,
        0, 1740, 1740, 1740, 1741, 1741, 1741, 1745, 1746, 1742,
     1742, 1742, 1747, 1748, 1744, 1744, 1744, 1749,    0,    0,

     1743, 1743, 1743, 1751,    0, 1745, 1745, 1745, 1752,    0,
        0, 1746, 1746, 1746, 1753,    0, 1748, 1748, 1748, 1747,
     1747, 1747, 1754, 1750,    0, 1751, 1755,    0,    0, 1757,
     1750, 1750, 1750, 1756,    0, 1749, 1753, 1759,    0,    0,
     1758,    0, 1754,    0, 1760,    0,    0, 1765, 1749, 1749,
     1749, 1763,    0, 1757, 1751, 1751, 1751,    0, 1759, 1752,
     1752, 1752, 1758, 1755, 1760, 1753, 1753, 1753, 1762,    0,
     1756, 1761, 1763, 1754, 1754, 1754, 1764, 1755, 1755, 1755,
     1757, 1757, 1757, 1766, 1756, 1756, 1756, 1767, 1759, 1759,
     1759, 1758, 1758, 1758, 1761, 1760, 1760, 1760, 1765, 1765,

     1765, 1770, 1763, 1763, 1763, 1762, 1769,    0, 1767, 1764,
     1768,    0,    0, 1771,    0,    0,    0, 1772,    0, 1762,
     1762, 1762, 1761, 1761, 1761, 1770, 1773, 1764, 1764, 1764,
        0,    0, 1774, 1776, 1766, 1766, 1766, 1776, 1767, 1767,
     1767, 1772, 1777, 1768,    0, 1769,    0, 1775,    0,    0,
     1773, 1778, 1770, 1770, 1770, 1779,    0, 1769, 1769, 1769,
     1780, 1768, 1768, 1768, 1771, 1771, 1771, 1775, 1772, 1772,
     1772, 1774, 1781,    0,    0, 1778, 1784, 1773, 1773, 1773,
        0, 1782,    0, 1774, 1774, 1774, 1779, 1783, 1776, 1776,
     1776, 1785,    0, 1777, 1777, 1777, 1781, 1780, 1775, 1775,

     1775, 1782, 1778, 1778, 1778, 1788, 1779, 1779, 1779, 1786,
        0, 1780, 1780, 1780, 1784,    0,    0, 1787, 1783,    0,
     1789,    0,    0, 1781, 1781, 1781, 1790, 1784, 1784, 1784,
     1791, 1785, 1782, 1782, 1782, 1792, 1788,    0, 1783, 1783,
     1783, 1787, 1785, 1785, 1785,    0, 1793,    0, 1786, 1794,
        0,    0, 1795,    0,    0, 1796, 1788, 1788, 1788, 1797,
     1786, 1786, 1786,    0, 1790, 1799,    0,    0, 1787, 1787,
     1787, 1789, 1789, 1789, 1792, 1796, 1798, 1790, 1790, 1790,
     1795, 1791, 1791, 1791, 1793, 1800, 1792, 1792, 1792,    0,
        0, 1801,    0, 1799, 1802,    0,    0, 1793, 1793, 1793,

     1794, 1794, 1794, 1795, 1795, 1795, 1796, 1796, 1796, 1803,
     1797, 1797, 1797,    0, 1804, 1798, 1799, 1799, 1799, 1805,
        0,    0, 1806,    0, 1800, 1807,    0, 1798, 1798, 1798,
     1801, 1808,    0,    0, 1810,    0, 1800, 1800, 1800, 1804,
     1809, 1803, 1801, 1801, 1801, 1802, 1802, 1802, 1811, 1807,
        0, 1812,    0,    0, 1814,    0, 1806, 1815,    0,    0,
     1803, 1803, 1803, 1817, 1808, 1804, 1804, 1804, 1810, 1818,
     1805, 1805, 1805, 1806, 1806, 1806, 1807, 1807, 1807, 1809,
     1816, 1811, 1808, 1808, 1808, 1810, 1810, 1810, 1812, 1813,
        0, 1809, 1809, 1809, 1817, 1818, 1819,    0,    0, 1811,

     1811, 1811, 1812, 1812, 1812, 1814, 1814, 1814, 1815, 1815,
     1815, 1821,    0, 1813, 1817, 1817, 1817, 1816, 1820,    0,
     1818, 1818, 1818,    0,    0, 1822,    0,    0, 1823,    0,
     1819, 1816, 1816, 1816, 1824,    0,    0, 1821, 1826,    0,
     1813, 1813, 1813, 1825,    0,    0, 1827, 1819, 1819, 1819,
     1828,    0,    0, 1829,    0, 1820, 1831,    0,    0,    0,
     1830,    0, 1821, 1821, 1821, 1822, 1832,    0, 1825, 1820,
     1820, 1820, 1834,    0,    0, 1833, 1822, 1822, 1822, 1823,
     1823, 1823, 1830, 1827, 1837, 1824, 1824, 1824, 1835, 1826,
     1826, 1826,    0,    0, 1825, 1825, 1825, 1827, 1827, 1827,

     1834, 1828, 1828, 1828, 1829, 1829, 1829, 1831, 1831, 1831,
     1836, 1830, 1830, 1830, 1833,    0,    0, 1832, 1832, 1832,
        0,    0, 1835, 1834, 1834, 1834, 1833, 1833, 1833,    0,
        0,    0,    0,    0,    0, 1837, 1837, 1837,    0, 1835,
     1835, 1835,    0, 1836,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1836, 1836, 1836, 1839, 1839, 1839, 1839, 1839, 1839,
     1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839,
     1839, 1839, 1839, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,

     1840, 1840, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1845, 1845, 1845, 1846, 1846, 1846,

     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1847, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1848, 1848, 1848, 1848, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1849, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1851, 1851,    0, 1851, 1852, 1852, 1852, 1852,

     1852, 1852, 1852, 1852, 1852, 1852, 1852, 1852, 1852, 1852,
     1852, 1852, 1852, 1852, 1852, 1853, 1853,    0,    0, 1853,
     1853, 1854, 1854, 1854, 1854,    0, 1854, 1854,    0, 1854,
     1855,    0, 1855, 1855, 1855,    0,    0, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855,    0, 1855, 1856,    0,
     1856,    0, 1856,    0, 1856, 1856, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1856,    0, 1856, 1857, 1857, 1857, 1857,
        0, 1857, 1857,    0, 1857, 1858, 1858, 1858,    0,    0,
     1858, 1858,    0, 1858, 1859,    0, 1859, 1859, 1859, 1859,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,

     1859, 1859, 1860,    0, 1860, 1860, 1860,    0, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,    0, 1860,
     1861, 1861,    0,    0,    0,    0,    0,    0,    0, 1861,
     1861, 1861, 1861,    0, 1861, 1861,    0, 1861, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862,    0, 1862, 1862, 1862,
     1862,    0, 1862, 1862, 1862, 1862, 1862, 1863, 1863, 1863,
     1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863,
        0, 1863, 1863, 1863, 1863, 1863, 1864, 1864, 1864, 1864,
     1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864,
     1864, 1864, 1864, 1864, 1864, 1865, 1865, 1865, 1865, 1865,

     1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865,
     1865, 1865, 1865, 1865, 1866, 1866, 1866, 1866, 1866, 1866,
     1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866,
     1866, 1866, 1866, 1867, 1867,    0,    0, 1867,    0,    0,
        0,    0, 1867, 1867, 1867, 1867,    0, 1867, 1867,    0,
     1867, 1868,    0, 1868, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1869,
     1869, 1869,    0,    0, 1869, 1869,    0, 1869, 1870,    0,
     1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870, 1870,
     1870, 1870, 1870, 1870, 1870, 1870, 1871, 1871, 1871, 1871,

        0, 1871, 1871,    0, 1871, 1872,    0, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1873,    0, 1873, 1873, 1873, 1873, 1873,
     1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873,
     1873, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874,
     1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874, 1874,
     1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1876,
     1876, 1876, 1876,    0, 1876, 1876,    0, 1876, 1877, 1877,
     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,

     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1878, 1878, 1878,
     1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878,
     1878, 1878, 1878, 1878, 1878, 1878, 1879, 1879,    0, 1879,
     1880, 1880,    0,    0, 1880, 1880, 1881,    0,    0, 1881,
     1881, 1882, 1882, 1882, 1882,    0, 1882, 1882,    0, 1882,
     1883,    0,    0,    0,    0,    0, 1883, 1883,    0, 1883,
     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
     1884, 1884, 1884, 1884, 1884, 1884, 1884,    0, 1884, 1885,
     1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885,
     1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1886,    0,

     1886, 1886, 1886,    0,    0, 1886, 1886, 1886, 1886, 1886,
     1886, 1886, 1886, 1886,    0, 1886, 1887,    0, 1887,    0,
     1887,    0, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
     1887, 1887,    0, 1887, 1888, 1888, 1888, 1888,    0, 1888,
     1888,    0, 1888, 1889, 1889,    0, 1889, 1890, 1890, 1890,
        0,    0, 1890, 1890,    0, 1890, 1891,    0, 1891, 1891,
     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1891, 1891, 1891, 1891, 1892,    0, 1892, 1892, 1892,    0,
     1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892,
        0, 1892, 1893, 1893,    0,    0,    0,    0,    0,    0,

        0, 1893, 1893, 1893, 1893,    0, 1893, 1893,    0, 1893,
     1894, 1894,    0, 1894, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895,    0, 1895, 1895, 1895, 1895,    0, 1895, 1895,
     1895, 1895, 1895, 1896, 1896, 1896, 1896, 1896, 1896, 1896,
     1896, 1896, 1896, 1896, 1896, 1896,    0, 1896, 1896, 1896,
     1896, 1896, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897,
     1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897,
     1897, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898,
     1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898,
     1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899,

     1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1900,
     1900,    0,    0, 1900,    0,    0,    0,    0, 1900, 1900,
     1900, 1900,    0, 1900, 1900,    0, 1900, 1901, 1901,    0,
     1901, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902,
     1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902,    0, 1902,
     1903,    0, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
     1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1904,    0,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1905, 1905, 1905, 1905,
     1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,

     1905, 1905, 1905, 1905, 1905, 1906, 1906, 1906,    0,    0,
     1906, 1906,    0, 1906, 1907,    0, 1907, 1907, 1907, 1907,
     1907, 1907, 1907, 1907, 1907, 1907, 1907, 1907, 1907, 1907,
     1907, 1907, 1908, 1908, 1908, 1908,    0, 1908, 1908,    0,
     1908, 1909, 1909,    0, 1909, 1910,    0, 1910, 1910, 1910,
     1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
     1910, 1910, 1910, 1911,    0, 1911, 1911, 1911, 1911, 1911,
     1911, 1911,    0, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1911, 1912,    0, 1912, 1912, 1912, 1912, 1912, 1912, 1912,
     1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912, 1912, 1913,

     1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913,
     1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1914, 1914,
     1914, 1914,    0, 1914, 1914,    0, 1914, 1915, 1915,    0,
     1915, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916,
     1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916,    0, 1916,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1918,
     1918, 1918,    0,    0, 1918, 1918,    0, 1918, 1919,    0,
        0, 1919, 1919, 1920, 1920, 1920,    0,    0, 1920, 1920,
        0, 1920, 1921, 1921, 1921, 1921,    0, 1921, 1921,    0,

     1921, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922,
     1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922,    0, 1922,
     1923,    0,    0,    0,    0,    0, 1923, 1923,    0, 1923,
     1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924,
     1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1927,
     1927, 1927,    0,    0, 1927, 1927,    0, 1927, 1928, 1928,
     1928, 1928,    0, 1928, 1928,    0, 1928, 1929, 1929, 1929,
        0,    0, 1929, 1929,    0, 1929, 1930,    0, 1930, 1930,
     1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
     1930, 1930, 1930, 1930, 1932, 1932,    0,    0,    0,    0,

        0,    0,    0, 1932, 1932, 1932,    0,    0, 1932, 1932,
        0, 1932, 1933, 1933,    0,    0,    0,    0,    0,    0,
        0, 1933, 1933, 1933, 1933,    0, 1933, 1933,    0, 1933,
     1934, 1934,    0, 1934, 1935, 1935,    0,    0, 1935,    0,
        0,    0,    0, 1935, 1935, 1935,    0,    0, 1935, 1935,
        0, 1935, 1936, 1936,    0,    0, 1936,    0,    0,    0,
        0, 1936, 1936, 1936, 1936,    0, 1936, 1936,    0, 1936,
     1937, 1937, 1937, 1937, 1937, 1937, 1937, 1937, 1937, 1937,
     1937, 1937, 1937, 1937, 1937, 1937, 1937,    0, 1937, 1938,
     1938,    0, 1938, 1939,    0, 1939, 1939, 1939, 1939, 1939,

     1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939,
     1939, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1941, 1941, 1941,    0,    0, 1941, 1941,    0, 1941, 1942,
     1942, 1942,    0,    0, 1942, 1942,    0, 1942, 1943, 1943,
     1943, 1943,    0, 1943, 1943,    0, 1943, 1944,    0, 1944,
     1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944,
     1944, 1944, 1944, 1944, 1944, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1946, 1946, 1946,    0,    0, 1946,

     1946,    0, 1946, 1947, 1947, 1947, 1947,    0, 1947, 1947,
        0, 1947, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948,
     1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948,    0,
     1948, 1949, 1949,    0, 1949, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1951, 1951, 1951,    0,    0, 1951,
     1951,    0, 1951, 1952, 1952, 1952,    0,    0, 1952, 1952,
        0, 1952, 1953, 1953, 1953,    0,    0, 1953, 1953,    0,
     1953, 1954, 1954, 1954, 1954,    0, 1954, 1954,    0, 1954,
     1955,    0, 1955, 1955, 1956,    0, 1956, 1956, 1957, 1957,

     1957,    0,    0, 1957, 1957,    0, 1957, 1958,    0, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1959,    0, 1959, 1959, 1960,
     1960,    0,    0,    0,    0,    0,    0,    0, 1960, 1960,
     1960,    0,    0, 1960, 1960,    0, 1960, 1961,    0,    0,
        0,    0, 1961, 1961, 1961,    0,    0, 1961, 1961,    0,
     1961, 1964, 1964,    0,    0, 1964,    0,    0,    0,    0,
     1964, 1964, 1964,    0,    0, 1964, 1964,    0, 1964, 1965,
     1965,    0,    0,    0,    0,    0,    0,    0, 1965, 1965,
     1965,    0,    0, 1965, 1965,    0, 1965, 1966, 1966, 1966,

        0,    0, 1966, 1966,    0, 1966, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1838
    } ;

static yyconst flex_int16_t yy_rule_linenum[351] =
    {   0,
      457,  458,  462,  463,  464,  465,  466,  467,  468,  469,
      470,  471,  472,  473,  474,  475,  476,  477,  478,  479,
      480,  481,  488,  495,  503,  504,  505,  506,  509,  510,
      512,  513,  514,  515,  516,  517,  518,  519,  520,  521,
      522,  523,  524,  525,  526,  527,  528,  529,  530,  531,
      532,  533,  534,  535,  536,  537,  538,  539,  540,  541,
      542,  543,  544,  545,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  555,  556,  557,  558,  559,  560,  561,
      562,  563,  564,  565,  566,  567,  568,  575,  576,  577,
      578,  579,  580,  581,  582,  583,  584,  585,  588,  589,

      590,  591,  592,  593,  594,  595,  596,  597,  598,  605,
      606,  607,  608,  609,  610,  612,  613,  614,  615,  616,
      617,  618,  619,  620,  621,  623,  624,  625,  626,  627,
      628,  629,  630,  631,  633,  634,  650,  651,  652,  653,
      654,  655,  656,  657,  658,  659,  660,  661,  662,  663,
      664,  665,  666,  667,  668,  669,  670,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  680,  681,  682,  683,
      684,  685,  686,  687,  688,  689,  690,  691,  692,  693,
      694,  695,  696,  697,  698,  699,  700,  701,  702,  703,
      704,  705,  706,  707,  708,  709,  710,  711,  712,  713,

      714,  715,  716,  717,  718,  719,  720,  721,  722,  723,
      724,  725,  726,  727,  728,  729,  730,  731,  732,  736,
      737,  738,  739,  740,  741,  742,  750,  751,  752,  753,
      754,  755,  756,  757,  758,  759,  760,  761,  763,  764,
      765,  766,  767,  768,  769,  771,  772,  773,  774,  775,
      776,  777,  778,  779,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  799,  804,  816,  822,  824,  826,  828,
      830,  832,  834,  836,  845,  847,  848,  853,  858,  863,
      868,  873,  878,  883,  888,  891,  896,  902,  908,  927,
      928,  930,  931,  932,  933,  934,  935,  936,  937,  938,

      939,  940,  941,  942,  943,  944,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  958,  959,  961,
      962,  963,  964,  965,  966,  968,  969,  970,  972,  973,
      974,  975,  979,  980,  981,  982,  983,  984,  985,  986,
      987,  988,  989,  990,  991,  992,  993,  994,  995,  996
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
#line 2 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
#define XQUERY_SCANNER
/*
 * Copyright 2006-2008 The FLWOR Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#line 20 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"

#undef SCANNER_CLASS
#undef PARSER_CLASS

#ifdef XQUERY_SCANNER
#define SCANNER_CLASS xquery_scanner
#define PARSER_CLASS xquery_parser
#else
#define SCANNER_CLASS jsoniq_scanner
#define PARSER_CLASS jsoniq_parser
#endif

#if defined (WIN32)
#pragma warning(disable: 4786)
#endif

#include <zorba/diagnostic_list.h>

#include "zorbatypes/schema_types.h"
#include "common/common.h"

#include <cstdlib>
#include <errno.h>
#include <limits.h>
#include <iostream>
#include <string>

#include "compiler/parser/xquery_driver.h"

#include "util/xml_util.h"

#ifdef __GNUC__
  // disable a warning in location.hh which comes with bison
  // position.hh:141: warning: suggest parentheses around && within ||
#  pragma GCC diagnostic ignored "-Wparentheses"
#endif

#ifdef XQUERY_SCANNER
#include "compiler/parser/xquery_parser.hpp"
#else
#include "compiler/parser/jsoniq_parser.hpp"
#endif

#ifdef __GNUC__
#  pragma GCC diagnostic warning "-Wparentheses"
#endif

#ifdef XQUERY_SCANNER
#include "compiler/parser/xquery_scanner.h"
#else
#include "compiler/parser/jsoniq_scanner.h"
#endif

typedef zorba::PARSER_CLASS::token token;
typedef zorba::PARSER_CLASS::token_type token_type;


  /*______________________________________________________________________
   |
   |  Scanner states management
   |______________________________________________________________________*/

#define PUSH_STATE(state) \
  do { \
    yy_push_state(state); \
  } while(0)

#define POP_STATE() \
  do { \
    if (yy_get_start_stack_ptr() > 0) \
      yy_pop_state(); \
  } while(0)

#define PUSH_AND_BEGIN( pushed, new ) \
  do { \
    BEGIN new; \
    PUSH_STATE(pushed); \
  } while(0)


  /*______________________________________________________________________
   |
   |  String literals processing
   |______________________________________________________________________*/

#define TRY_TOKEN_INTERNAL(ttype, put, yytext, err_func)                \
  do {                                                                  \
    off_t res = getDriver()->symtab.put;                                \
    if (res < 0) {                                                      \
      yylval->err = getDriver()->err_func(yytext, *yylloc);             \
      return token::UNRECOGNIZED;                                       \
    } else {                                                            \
      yylval->sval = res;                                               \
      return token::ttype;                                              \
    }                                                                   \
  } while (0)

#define TRY_SVAL_TOKEN(ttype, put, yytext) \
    TRY_TOKEN_INTERNAL(ttype, put, yytext, unrecognizedToken)

#define TRY_CHARREF_LITERAL(ttype, put, yytext, yyleng) \
  TRY_TOKEN_INTERNAL(ttype, put (yytext, yyleng), yytext, unrecognizedToken)

#define TRY_URI_LITERAL(ttype, yytext, yyleng ) \
  TRY_TOKEN_INTERNAL(ttype, put_uri(yytext, yyleng), yytext, unrecognizedToken)

#ifdef XQUERY_SCANNER  
#define TRY_STRING_LITERAL(ttype, yytext, yyleng) \
  TRY_TOKEN_INTERNAL(ttype, put_stringlit(yytext, yyleng), yytext, invalidCharRef)
#else
#define TRY_STRING_LITERAL(ttype, yytext, yyleng) \
  TRY_TOKEN_INTERNAL(ttype, put_json_stringliteral(yytext, yyleng, getDriver(), *yylloc), yytext, invalidCharRef)
#endif
  

  // Returns 0 on success, non-zero on error  
int checkXmlRefs(zorba::ZorbaParserError** err, char* yytext, int yyleng, zorba::SCANNER_CLASS* scanner, zorba::PARSER_CLASS::location_type* yylloc)
{
  std::string entity;
  const char* temp;
  char* pos = yytext;
  bool found_entity = false;
  bool found_json_escape = false;

  while (pos < yytext+yyleng)
  {
    if (*pos == '&')
    {
      pos += zorba::xml::parse_entity((const char*)pos, &entity);
      temp = entity.c_str();
      zorba::unicode::code_point cp = zorba::utf8::next_char(temp);
      if (!zorba::xml::is_valid(cp))
      {
        *err = scanner->getDriver()->parserErr(std::string("Invalid XML v1.0 codepoint in the string literal \"") + yytext + "\"", *yylloc, zorba::err::XQST0090);
        return 1;
      }
      found_entity = true;
    }
    else if (*pos == '\\' && scanner->getDriver()->commonLanguageEnabled())
    {
      switch (*(++pos))
      {
      case '\\': 
      case '/': 
      case '\"': 
      case '\'': 
      case 'b': 
      case 'f': 
      case 'n': 
      case 'r': 
      case 't': 
        ++pos;  
        found_json_escape = true;
        break;
      case 'u':
        pos += 5;
        found_json_escape = true;
        break;
      }      
    }
    else
      pos++;
  }
  
  // Issue one warning per string  
  if (scanner->getDriver()->commonLanguageEnabled())
  {
    if (found_entity)
      scanner->getDriver()->addCommonLanguageWarning(*yylloc, ZED(ZWST0009_CHAR_REF));
    
    if (found_json_escape)
      scanner->getDriver()->addCommonLanguageWarning(*yylloc, ZED(ZWST0009_JSON_ESCAPE));
    
    if (yytext[0] == '\'' && yytext[yyleng-1] == '\'')
      scanner->getDriver()->addCommonLanguageWarning(*yylloc, ZED(ZWST0009_APOS_STRING));
  }

  return 0;
}


#define COMP_CONSTR_ROLLBACK(invoke_yy_less)                            \
  do {                                                                  \
    int _STATE = YY_START;                                              \
    POP_STATE();                                                        \
    if (invoke_yy_less) {                                               \
      yylloc->columns(-1 * yyleng);                                     \
      yyless(0);                                                        \
    }                                                                   \
    if (yy_comp_constr_qname != "") {                                   \
      unput(' ');                                                       \
      for (int i=yy_comp_constr_qname.size()-1; i>=0; i--)              \
        unput(yy_comp_constr_qname[i]);                                 \
      yylloc->columns(-1 * (yy_comp_constr_qname.size()+1));            \
      yy_comp_constr_qname = "";                                        \
    }                                                                   \
    if (_STATE == MODE_ELEM_COMP_CONSTR)                                \
      return token::ELEMENT;                                            \
    else if (_STATE == MODE_ATTR_COMP_CONSTR)                           \
      return token::ATTRIBUTE;                                          \
    else if (_STATE == MODE_PI_COMP_CONSTR)                             \
      return token::PROCESSING_INSTRUCTION;                             \
    else                                                                \
      return token::NAMESPACE;                                          \
  } while (0)

/*
  Work around an incompatibility in flex (at least versions
  2.5.31 through 2.5.33): it generates code that does
  not conform to C89.  See Debian bug 333231
  <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
*/
#undef yywrap
#define yywrap() 1

/*
  By default yylex returns int, we use token_type.
  Unfortunately yyterminate by default returns 0, which is
  not of token_type.
*/
#define yyterminate() return token::_EOF


std::string start_xquery_state(int);   /* forward declaration, used by YY_USER_ACTION */

/*
  The macro YY_USER_ACTION can be defined to provide an action which is
  always executed prior to the matched rule's action.

  The following paragraph suffices to track locations accurately. Each
  time yylex is invoked, the begin position is moved onto the end
  position. Then when a pattern is matched, the end position is advanced
  of its width. In case it matched ends of lines, the end cursor is
  adjusted, and each time blanks are matched, the begin cursor is moved
  onto the end cursor to effectively ignore the blanks preceding tokens.
  Comments would be treated equally.
*/
#ifdef YY_USER_ACTION
#undef YY_USER_ACTION
#endif

#define YY_USER_ACTION \
{ \
  if (yy_flex_debug) { \
    std::cerr << "<" << start_xquery_state(YY_START) << ">" << "\""<<yytext<<"\"" << std::endl; \
  } \
  \
  int last_endl = 0;\
  for (int i=0; i<yyleng; i++) \
    if (yytext[i] == '\n')  \
    { \
      yylloc->lines(1);\
      last_endl = i+1;\
    }\
  \
  yylloc->step();\
  yylloc->columns(yyleng - last_endl);\
}

  /*______________________________________________________________________
   |
   |  Override Flex's starting state here.
   |______________________________________________________________________*/
#define YY_USER_INIT      \
{                         \
  BEGIN MODE_SHEBANG;     \
}

#define YY_NO_UNISTD_H 1




















#line 451 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
  typedef zorba::PARSER_CLASS::token token;
#line 3601 "xquery_scanner.yy.cpp"

#define INITIAL 0
#define MODE_SHEBANG 1
#define INITIAL_ACCUMULATOR 2
#define MODE_APOS_ATTRIBUTE_CONTENT 3
#define MODE_QUOTE_ATTRIBUTE_CONTENT 4
#define MODE_ELEM_COMP_CONSTR 5
#define MODE_ATTR_COMP_CONSTR 6
#define MODE_PI_COMP_CONSTR 7
#define MODE_NS_COMP_CONSTR 8
#define MODE_CDATA_SECTION 9
#define MODE_ELEMENT_CONTENT 10
#define MODE_END_TAG 11
#define MODE_EXPR_COMMENT 12
#define MODE_EXPR_DOC_COMMENT 13
#define MODE_OCCURRENCE_INDICATOR 14
#define MODE_PRAGMA 15
#define MODE_PRAGMACONTENTS 16
#define MODE_PROCESSING_INSTRUCTION 17
#define MODE_PROCESSING_INSTRUCTION_CONTENT 18
#define MODE_START_TAG 19
#define MODE_XML_COMMENT 20

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 455 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"

#line 3780 "xquery_scanner.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1839 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1838 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 351 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 351 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 352 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 457 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SHEBANG; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 458 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN INITIAL; yyless(0); }
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 462 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LPAR; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 463 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SEMI; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 464 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COMMA; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 465 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MINUS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 466 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PLUS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 467 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SLASH; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 468 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SLASH_SLASH; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 469 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::BANG; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 470 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::AT_SIGN; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 471 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::RPAR; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 472 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::STAR; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 473 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOT_DOT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 474 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 475 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::HOOK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 476 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOLLAR; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 477 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::HASH; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 478 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COLON; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 479 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOUBLE_COLON; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 480 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PERCENTAGE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 481 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONCAT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 488 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  std::string lDocComment = theDriver->theDocComment.str();
  yylval->sval = getDriver()->symtab.put_commentcontent(lDocComment.c_str(), lDocComment.length());
  theDriver->theDocComment.str("");
  return token::DECLARE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 495 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  std::string lDocComment = theDriver->theDocComment.str();
  yylval->sval = getDriver()->symtab.put_commentcontent(lDocComment.c_str(), lDocComment.length());
  theDriver->theDocComment.str("");
  return token::MODULE;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 503 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_ELEM_COMP_CONSTR); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 504 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_ATTR_COMP_CONSTR); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 505 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_PI_COMP_CONSTR); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 506 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_NS_COMP_CONSTR); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 509 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::IF; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 510 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::RETURNING; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 512 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EXIT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 513 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WITH; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 514 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::BREAK; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 515 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LOOP; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 516 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONTINUE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 517 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WHILE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 518 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SET; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 519 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VALIDATE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 520 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TYPE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 521 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SWITCH; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 522 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TYPESWITCH; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 523 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOCUMENT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 524 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TEXT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 525 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COMMENT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 526 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FUNCTION; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 527 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SIMPLE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 528 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::UPDATING; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 529 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SEQUENTIAL; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 530 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ORDERED;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 531 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::UNORDERED; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 532 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SCHEMA_ELEMENT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 533 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SCHEMA_ATTRIBUTE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 534 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NODE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 535 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOCUMENT_NODE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 536 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NS_NODE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 537 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONSTRUCTION; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 538 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DEFAULT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 539 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ORDER; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 540 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COLLATION; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 541 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::BASE_URI; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 542 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::IMPORT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 543 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SCHEMA; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 544 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COPY_NAMESPACES; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 545 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FOR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 546 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LET; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 547 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ALLOWING; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 548 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SLIDING; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 549 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TUMBLING; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 550 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PREVIOUS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 551 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NEXT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 552 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ONLY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 553 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WHEN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 554 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COUNT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 555 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::USING; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 556 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SOME; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 557 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EVERY; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 558 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONTEXT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 559 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VARIABLE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 560 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::BOUNDARY_SPACE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 561 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ORDERING; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 562 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::XQUERY; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 563 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VERSION; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 564 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::OPTION; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 565 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::AT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 566 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::REVALIDATION; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 567 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::AS; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 568 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TRY; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 575 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ANCESTOR_OR_SELF; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 576 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ANCESTOR; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 577 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CHILD; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 578 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DESCENDANT_OR_SELF; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 579 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DESCENDANT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 580 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FOLLOWING_SIBLING; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 581 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FOLLOWING; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 582 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PARENT; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 583 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PRECEDING_SIBLING; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 584 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PRECEDING; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 585 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SELF;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 588 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DECIMAL_FORMAT; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 589 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DECIMAL_SEPARATOR; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 590 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::GROUPING_SEPARATOR; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 591 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INFINITY_VALUE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 592 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MINUS_SIGN; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 593 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NaN; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 594 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PERCENT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 595 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PER_MILLE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 596 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ZERO_DIGIT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 597 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DIGIT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 598 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PATTERN_SEPARATOR; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 605 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COLLECTION; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 606 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONSTOPT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 607 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::APPEND_ONLY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 608 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::QUEUE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 609 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MUTABLE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 610 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::READ_ONLY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 612 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INDEX; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 613 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::UNIQUE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 614 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NON; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 615 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MANUALLY; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 616 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::AUTOMATICALLY; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 617 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MAINTAINED; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 618 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::RANGE; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 619 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EQUALITY; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 620 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ON; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 621 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::GENERAL; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 623 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INTEGRITY; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 624 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONSTRAINT; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 625 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CHECK; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 626 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::KEY; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 627 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FOREACH; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 628 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FOREIGN; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 629 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::KEYS; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 630 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACK; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 631 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); return token::RBRACK; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 633 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(INITIAL_ACCUMULATOR); return token::L_ACCUMULATOR_OBJ_UNION; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 634 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{


        if (YY_START == INITIAL_ACCUMULATOR)
        {
          POP_STATE();
          return token::R_ACCUMULATOR_OBJ_UNION;
        }
        else
        {
          POP_STATE();
          yyless(1);
          return token::RBRACK;
        }
      }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 650 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::L_SIMPLE_OBJ_UNION; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 651 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::R_SIMPLE_OBJ_UNION; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 652 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::JSON; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 653 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::APPEND; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 654 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::POSITION; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 655 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::JSON_ITEM; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 656 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::STRUCTURED_ITEM; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 657 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ARRAY; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 658 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::OBJECT; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 659 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONTAINS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 660 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FTAND; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 661 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FTOR; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 662 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FTNOT; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 663 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NOT; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 664 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::_IN; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 665 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ALL; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 666 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WORDS; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 667 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ANY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 668 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WORD; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 669 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::END; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 670 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LEAST; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 671 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MOST; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 672 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::START; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 673 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CASE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 674 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INSENSITIVE; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 675 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SENSITIVE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 676 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FT_OPTION; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 677 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DIACRITICS; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 678 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DIFFERENT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 679 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DISTANCE; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 680 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ENTIRE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 681 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CONTENT; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 682 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EXACTLY; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 683 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FROM; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 684 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LANGUAGE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 685 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LEVELS; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 686 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LOWERCASE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 687 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NO; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 688 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::OCCURS; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 689 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PARAGRAPH; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 690 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PARAGRAPHS; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 691 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PHRASE; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 692 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::RELATIONSHIP; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 693 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SAME; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 694 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SCORE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 695 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SENTENCE; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 696 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SENTENCES; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 697 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TIMES; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 698 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::UPPERCASE; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 699 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WEIGHT; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 700 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WINDOW; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 701 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WITHOUT; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 702 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::STEMMING; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 703 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::STOP; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 704 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::THESAURUS; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 705 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WILDCARDS; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 706 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::GETS; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 707 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DIV; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 708 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EQUALS; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 709 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EXCEPT; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 710 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VAL_EQ; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 711 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VAL_GE; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 712 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VAL_GT; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 713 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VAL_LE; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 714 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VAL_LT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 715 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VAL_NE; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 716 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::GE; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 717 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FOLLOWS; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 718 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::GT; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 719 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::IDIV; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 720 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INTERSECT; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 721 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::IS; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 722 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 723 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PRECEDES; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 724 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MOD; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 725 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 726 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::GROUP; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 727 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::BY; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 728 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::STABLE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 729 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::OR; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 730 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LIMIT; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 731 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::OFFSET; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 732 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::RETURN; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 736 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SATISFIES; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 737 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TO; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 738 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::UNION; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 739 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VBAR; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 740 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::WHERE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 741 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::PRESERVE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 742 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::STRIP; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 750 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INSERT; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 751 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::_DELETE; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 752 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::REPLACE; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 753 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::VALUE; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 754 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::OF; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 755 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::RENAME; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 756 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::COPY; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 757 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NODES; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 758 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INTO; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 759 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::AFTER; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 760 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::BEFORE; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 761 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::MODIFY; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 763 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::_STRICT; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 764 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LAX; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 765 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::SKIP; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 766 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::THEN; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 767 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ELSE; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 768 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EXTERNAL; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 769 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::AND; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 771 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INHERIT; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 772 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NO_INHERIT; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 773 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::NO_PRESERVE; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 774 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EMPTY_SEQUENCE; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 775 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ITEM; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 776 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CAST; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 777 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CASTABLE; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 778 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::INSTANCE;}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 779 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::TREAT; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 780 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::FIRST; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 781 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::LAST; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 782 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CATCH; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 783 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::_EMPTY; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 784 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::GREATEST; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 785 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ASCENDING; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 786 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DESCENDING; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 787 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ENCODING; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 788 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  yylval->ival = getDriver()->symtab.integerval(yytext, yyleng);
  if (yylval->ival == NULL)
  {
    yylval->err = getDriver()->parserErr(yytext, *yylloc, err::FOAR0002);
    return token::UNRECOGNIZED;
  }
  else
    return token::INTEGER_LITERAL;
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 799 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  yylval->decval = getDriver()->symtab.decimalval(yytext, yyleng);
  return token::DECIMAL_LITERAL;
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 804 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  yylval->dval = getDriver()->symtab.doubleval(yytext, yyleng);
  if (yylval->dval == NULL)
  {

    yylval->err = getDriver()->parserErr(yytext, *yylloc, err::FOAR0002);
    return token::UNRECOGNIZED;
  }
  else
    return token::DOUBLE_LITERAL;
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 816 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{

  yylval->err = getDriver()->parserErr(std::string("syntax error: unexpected \"") + yytext + "\", separator needed after numeric literal", *yylloc);
  return token::UNRECOGNIZED;
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 822 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(ELEM_WILDCARD, put_ncname(yytext, yyleng-2), yytext); }
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 824 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(ELEM_EQNAME_WILDCARD, put_ncname(yytext+2, yyleng-4), yytext+2); }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 826 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(QNAME_SVAL, put_qname(yytext, yyleng), yytext); }
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 828 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(EQNAME_SVAL, put_qname(yytext, yyleng, false, false, true), yytext); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 830 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(ANNOTATION_QNAME_SVAL, put_qname(yytext+1, yyleng-1), yytext+1); }
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 832 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(ANNOTATION_EQNAME_SVAL, put_qname(yytext+1, yyleng-1, false, false, true), yytext+1); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 834 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN (PREFIX_WILDCARD, put_ncname(yytext+2, yyleng-2), yytext); }
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 836 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{

  if (checkXmlRefs(&yylval->err, yytext, yyleng, this, yylloc)) return token::UNRECOGNIZED;

  TRY_STRING_LITERAL(STRING_LITERAL, yytext, yyleng);
}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 845 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->invalidCharRef(yytext, *yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 847 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->parserErr(std::string("syntax error: unterminated string literal \"") + yytext + "\"", *yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 848 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_XML_COMMENT); return token::XML_COMMENT_BEGIN; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 853 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_PROCESSING_INSTRUCTION);return token::PI_BEGIN; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 858 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::CDATA_BEGIN; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 863 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_START_TAG); return token::LT_OR_START_TAG; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 868 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_EXPR_DOC_COMMENT); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 873 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_EXPR_COMMENT); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 878 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_PRAGMA; return token::PRAGMA_BEGIN;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 883 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACE; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 888 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); return token::RBRACE; }
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 891 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{

}
	YY_BREAK

case 287:
YY_RULE_SETUP
#line 896 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  if (yy_comp_constr_qname == "")
    yy_comp_constr_qname = yytext;
  else
    COMP_CONSTR_ROLLBACK(true);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 902 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  if (yy_comp_constr_qname == "")
    yy_comp_constr_qname = yytext;
  else
    COMP_CONSTR_ROLLBACK(true);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 908 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  if ( yy_comp_constr_qname == "")
    COMP_CONSTR_ROLLBACK(true);
  else
  {
    int _STATE = YY_START;
    BEGIN INITIAL;
    std::string temp = yy_comp_constr_qname;
    yy_comp_constr_qname = "";
    if (_STATE == MODE_ELEM_COMP_CONSTR)
      TRY_SVAL_TOKEN(COMP_ELEMENT_QNAME_LBRACE, put_qname(temp.c_str(), temp.size()), temp.c_str());
    else if (_STATE == MODE_ATTR_COMP_CONSTR)
      TRY_SVAL_TOKEN(COMP_ATTRIBUTE_QNAME_LBRACE, put_qname(temp.c_str(), temp.size()), temp.c_str());
    else if (_STATE == MODE_PI_COMP_CONSTR)
      TRY_SVAL_TOKEN(COMP_PI_NCNAME_LBRACE, put_ncname(temp.c_str(), temp.size()), temp.c_str());
    else
      TRY_SVAL_TOKEN(COMP_NS_NCNAME_LBRACE, put_ncname(temp.c_str(), temp.size()), temp.c_str());
  }
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 927 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_EXPR_COMMENT); }
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 928 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ }
	YY_BREAK
case YY_STATE_EOF(MODE_ELEM_COMP_CONSTR):
case YY_STATE_EOF(MODE_ATTR_COMP_CONSTR):
case YY_STATE_EOF(MODE_PI_COMP_CONSTR):
case YY_STATE_EOF(MODE_NS_COMP_CONSTR):
#line 929 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ COMP_CONSTR_ROLLBACK(false); }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 930 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ COMP_CONSTR_ROLLBACK(true); }
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 931 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_PRAGMACONTENTS; TRY_SVAL_TOKEN(QNAME_SVAL, put_qname(yytext, yyleng, true, true), yytext); }
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 932 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_PRAGMACONTENTS; TRY_SVAL_TOKEN(EQNAME_SVAL, put_qname(yytext, yyleng, true, true), yytext); }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 933 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN INITIAL; TRY_SVAL_TOKEN(QNAME_SVAL_AND_END_PRAGMA, put_qname(yytext, yyleng-2), yytext); }
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 934 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN INITIAL; TRY_SVAL_TOKEN(EQNAME_SVAL_AND_END_PRAGMA, put_qname(yytext, yyleng-2), yytext); }
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 935 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ }
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 936 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN INITIAL; TRY_SVAL_TOKEN(PRAGMA_LITERAL_AND_END_PRAGMA, put(yytext, yyleng-2), yytext); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 937 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_ELEMENT_CONTENT; return token::TAG_END; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 938 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_QUOTE_ATTRIBUTE_CONTENT; return token::QUOTE; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 939 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_APOS_ATTRIBUTE_CONTENT; return token::APOS; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 940 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::EQUALS; }
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 941 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::BLANK; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 942 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); return token::EMPTY_TAG_END; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 943 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN (QNAME_SVAL, put_qname(yytext, yyleng), yytext); }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 944 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->unrecognizedCharErr(yytext, *yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case YY_STATE_EOF(MODE_START_TAG):
#line 945 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->unterminatedElementConstructor(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 946 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_END_TAG; return token::START_TAG_END; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 947 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACE; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 948 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_XML_COMMENT); return token::XML_COMMENT_BEGIN; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 949 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_PROCESSING_INSTRUCTION); return token::PI_BEGIN; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 950 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_CDATA_SECTION); return token::CDATA_BEGIN; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 951 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_START_TAG); return token::LT_OR_START_TAG; }
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 952 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(ELEMENT_CONTENT, put(yytext, yyleng, 1), yytext); }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 953 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(ELEMENT_CONTENT, put_entityref(yytext, yyleng), yytext); }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 954 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_CHARREF_LITERAL(CHAR_REF_LITERAL, put_charref, yytext, yyleng); }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 955 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOUBLE_LBRACE; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 956 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOUBLE_RBRACE; }
	YY_BREAK
case YY_STATE_EOF(MODE_ELEMENT_CONTENT):
#line 957 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->noClosingTagForElementConstructor(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 958 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); return token::TAG_END; }
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 959 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN (QNAME_SVAL, put_qname(yytext, yyleng, false, true), yytext); }
	YY_BREAK
case YY_STATE_EOF(MODE_END_TAG):
#line 960 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->noClosingTagForElementConstructor(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 961 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); return token::XML_COMMENT_END; }
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 962 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN (XML_COMMENT_LITERAL, put(yytext, yyleng, 1), yytext); }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 963 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 964 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(MODE_EXPR_COMMENT); }
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 965 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 966 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ }
	YY_BREAK
case YY_STATE_EOF(MODE_EXPR_COMMENT):
#line 967 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->unterminatedCommentErr(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 968 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ getDriver()->theDocComment << yytext; }
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 969 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ getDriver()->theDocComment << yytext; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 970 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); }
	YY_BREAK
case YY_STATE_EOF(MODE_EXPR_DOC_COMMENT):
#line 971 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ yylval->err = getDriver()->unterminatedCommentErr(*yylloc); return token::UNRECOGNIZED; }
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 972 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_PROCESSING_INSTRUCTION_CONTENT; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 973 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); return token::PI_END; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 974 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN (NCNAME_SVAL, put(yytext, yyleng), yytext); }
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 975 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
  POP_STATE();
  TRY_SVAL_TOKEN (CHAR_LITERAL_AND_PI_END, put(yytext, yyleng-2), yytext);
}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 979 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ POP_STATE(); TRY_SVAL_TOKEN (CHAR_LITERAL_AND_CDATA_END, put(yytext, yyleng-3, 1), yytext); }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 980 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_START_TAG; return token::QUOTE; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 981 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_STATE(INITIAL); return token::LBRACE; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 982 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ESCAPE_QUOTE; }
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 983 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(QUOTE_ATTR_CONTENT, put(yytext, yyleng, 2), yytext); }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 984 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(QUOTE_ATTR_CONTENT, put_entityref(yytext, yyleng), yytext); }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 985 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_CHARREF_LITERAL(CHAR_REF_LITERAL, put_charref, yytext, yyleng); }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 986 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOUBLE_LBRACE; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 987 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOUBLE_RBRACE; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 988 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ BEGIN MODE_START_TAG; return token::APOS; }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 989 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ PUSH_AND_BEGIN (INITIAL, MODE_APOS_ATTRIBUTE_CONTENT); return token::LBRACE; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 990 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::ESCAPE_APOS; }
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 991 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(APOS_ATTR_CONTENT, put(yytext, yyleng, 2), yytext); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 992 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_SVAL_TOKEN(APOS_ATTR_CONTENT, put_entityref(yytext, yyleng), yytext); }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 993 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ TRY_CHARREF_LITERAL(CHAR_REF_LITERAL, put_charref, yytext, yyleng); }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 994 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOUBLE_LBRACE; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 995 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{ return token::DOUBLE_RBRACE; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 996 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
{
    yylval->err = getDriver()->unrecognizedCharErr(yytext, *yylloc);
    return token::UNRECOGNIZED;
}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1005 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"
ECHO;
	YY_BREAK
#line 5792 "xquery_scanner.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MODE_SHEBANG):
case YY_STATE_EOF(INITIAL_ACCUMULATOR):
case YY_STATE_EOF(MODE_APOS_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_QUOTE_ATTRIBUTE_CONTENT):
case YY_STATE_EOF(MODE_CDATA_SECTION):
case YY_STATE_EOF(MODE_OCCURRENCE_INDICATOR):
case YY_STATE_EOF(MODE_PRAGMA):
case YY_STATE_EOF(MODE_PRAGMACONTENTS):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION):
case YY_STATE_EOF(MODE_PROCESSING_INSTRUCTION_CONTENT):
case YY_STATE_EOF(MODE_XML_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Zorbafree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Zorbafree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Zorbarealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Zorbarealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1839 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1839 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1838);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Zorbaalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Zorbaalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Zorbafree((void *) b->yy_ch_buf  );

	Zorbafree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Zorbaalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Zorbarealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Zorbaalloc(new_size  );

		else
			(yy_start_stack) = (int *) Zorbarealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Zorbaalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Zorbarealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Zorbafree (void * ptr )
{
	free( (char *) ptr );	/* see Zorbarealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 1005 "/Users/pjl/src/flwor/zorba/repo/skiplimit/zorba/build/src/compiler/parser/xquery_scanner.l"





std::string start_xquery_state(int state)
{
  switch (state)
  {
    case INITIAL: return "INITIAL";
    case MODE_SHEBANG: return "MODE_SHEBANG";
    case INITIAL_ACCUMULATOR: return "INITIAL_ACCUMULATOR";
    case MODE_APOS_ATTRIBUTE_CONTENT: return "MODE_APOS_ATTRIBUTE_CONTENT";
    case MODE_ELEM_COMP_CONSTR: return "MODE_ELEM_COMP_CONSTR";
    case MODE_ATTR_COMP_CONSTR: return "MODE_ATTR_COMP_CONSTR";
    case MODE_PI_COMP_CONSTR: return "MODE_PI_COMP_CONSTR";
    case MODE_NS_COMP_CONSTR: return "MODE_NS_COMP_CONSTR";
    case MODE_CDATA_SECTION: return "MODE_CDATA_SECTION";
    case MODE_ELEMENT_CONTENT: return "MODE_ELEMENT_CONTENT";
    case MODE_END_TAG: return "MODE_END_TAG";
    case MODE_EXPR_DOC_COMMENT: return "MODE_EXPR_DOC_COMMENT";
    case MODE_EXPR_COMMENT: return "MODE_EXPR_COMMENT";
    case MODE_OCCURRENCE_INDICATOR: return "MODE_OCCURRENCE_INDICATOR";
    case MODE_PRAGMA: return "MODE_PRAGMA";
    case MODE_PRAGMACONTENTS: return "MODE_PRAGMACONTENTS";
    case MODE_PROCESSING_INSTRUCTION: return "MODE_PROCESSING_INSTRUCTION";
    case MODE_PROCESSING_INSTRUCTION_CONTENT: return "MODE_PROCESSING_INSTRUCTION_CONTENT";
    case MODE_QUOTE_ATTRIBUTE_CONTENT: return "MODE_QUOTE_ATTRIBUTE_CONTENT";
    case MODE_START_TAG: return "MODE_START_TAG";
    case MODE_XML_COMMENT: return "MODE_XML_COMMENT";
    default: return "[zorba] Unrecognized start state. If a new state has been created, translation should be added to start_xquery_state() in scanner.l \n";
  }
}


namespace zorba {

SCANNER_CLASS::SCANNER_CLASS(
  xquery_driver* aDriver,
  std::istream* i,
  std::ostream* o)
  :

  ZorbaFlexLexer(i, o),



  theDriver(aDriver), cond_stk_depth(0), yy_comp_constr_qname("")
{
}

SCANNER_CLASS::~SCANNER_CLASS()
{
}

void SCANNER_CLASS::set_yy_flex_debug(bool aBool)
{
  yy_flex_debug = aBool;
}

int SCANNER_CLASS::interpretAsLessThan()
{
  BEGIN INITIAL;
  POP_STATE();
  return 0;
}

int SCANNER_CLASS::yy_get_start_stack_ptr() const
{
  return yy_start_stack_ptr;
}

}






int ZorbaFlexLexer::yylex()



{
  return 0;
}

