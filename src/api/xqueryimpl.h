#ifndef XQP_XQUERY_IMPL_H
#define XQP_XQUERY_IMPL_H

#include <iostream>
#include <zorba/xquery.h>

#include <zorba/api_shared_types.h>
#include "common/shared_types.h" 
#include "compiler/api/compilercb.h"


namespace zorba {

	class XQueryImpl : public XQuery 
	{

    public:
      virtual ~XQueryImpl();

      virtual void
      registerErrorHandler(ErrorHandler*);

      virtual void
      resetErrorHandler();

      virtual void
      serialize(std::ostream&, XQuery::SerializerOptions_t = XQuery::SerializerOptions());

      virtual ResultIterator_t
      iterator();

      virtual DynamicContext_t
      getDynamicContext();

      virtual StaticContext_t
      getStaticContext();

		// only allow ZorbaImpl to create us
		friend class ZorbaImpl;
		protected:
      XQueryImpl();

      void 
      compile(const xqpString&, const XQuery::CompilerHints_t& aHints);
      
      void 
      compile(std::istream&, const XQuery::CompilerHints_t& aHints);
      
      void 
      compile(const xqpString&, const StaticContext_t&, const XQuery::CompilerHints_t& aHints);
      
      void 
      compile(std::istream&, const StaticContext_t&, const XQuery::CompilerHints_t& aHints);

      void
      doCompile(std::istream&, const XQuery::CompilerHints_t& aHints);

      CompilerCB::config_t
      getCompilerConfig(const XQuery::CompilerHints_t&);

      PlanWrapper_t
      generateWrapper();

      // static stuff
      CompilerCB*     theCompilerCB;         
      PlanIter_t      thePlan;

      // static context is either generated by ourselves or given by the user 
      // (hence, the boolean flag in order to capture ownership).
      static_context*  theStaticContext;

      bool             theQueryIsCompiled;

      // dynamic stuff
      // one dynamic context that always belongs to a query
      dynamic_context* theDynamicContext;

      // utility stuff
      bool                   theUserErrorHandler;   
      ErrorHandler*          theErrorHandler;      // provided by user or default one throwing exceptions 
      error::ErrorManager*   theErrorManager; // see note in the constructor

	}; /* class XQueryImpl */


  std::ostream& operator<< (std::ostream& os, const XQuery_t& aQuery);


} /* namespace zorba */
#endif
