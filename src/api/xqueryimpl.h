/*
 * Copyright 2006-2008 The FLWOR Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef XQP_XQUERY_IMPL_H
#define XQP_XQUERY_IMPL_H

#include <iostream>
#include <zorba/xquery.h>
#include <zorba/sax2.h>

#include <zorba/api_shared_types.h>
#include "zorbatypes/xqpstring.h"
#include "common/shared_types.h" 
#include "compiler/api/compilercb.h"


namespace zorba {

  class DynamicContextImpl;
  class StaticContextImpl;

	class XQueryImpl : public XQuery 
	{
  public:
    virtual ~XQueryImpl();

    void
    registerErrorHandler(ErrorHandler*);

    void
    resetErrorHandler();

    bool
    isUpdateQuery() const;

    void
    serialize(std::ostream&, const XQuery::SerializerOptions_t& = XQuery::SerializerOptions());

    void 
    applyUpdates();

    ResultIterator_t
    iterator();

    DynamicContext*
    getDynamicContext() const;

    const StaticContext*
    getStaticContext() const;

    void
    compile(const String&);

    void 
    compile(const String&, const XQuery::CompilerHints_t& aHints);
      
    void 
    compile(std::istream&, const XQuery::CompilerHints_t& aHints);
      
    void 
    compile(const String&, const StaticContext_t&, const XQuery::CompilerHints_t& aHints);
      
    void 
    compile(std::istream&, const StaticContext_t&, const XQuery::CompilerHints_t& aHints);

    void
    setFileName( const String& );

    void
    registerSAXHandler( SAX2_ContentHandler *  aSAXHandler );
    
    void
    executeSAX( SAX2_ContentHandler *  aSAXHandler );

    void executeSAX();

    void
    close();

    XQuery_t
    clone() const;

		// only allow ZorbaImpl to create us
		friend class ZorbaImpl;

  protected:
    
    XQueryImpl();
      
    void
    doCompile(std::istream&, const XQuery::CompilerHints_t& aHints);

    CompilerCB::config_t
    getCompilerConfig(const XQuery::CompilerHints_t&);

    void
    setSerializationParameters(serializer*, const XQuery::SerializerOptions&);

    PlanWrapper_t
    generateWrapper();

    // check whether the query has already been closed
    // if so, fire an error
    void
    checkClosed() const;

    // check whether the query has been compiled (successfully)
    // if not, fire an error
    void
    checkCompiled() const;

    // check whether the query has not been compiled
    // if so, fire an error
    void
    checkNotCompiled() const;

    // static stuff
    xqpString              theFileName; // the filename of the query

    CompilerCB*            theCompilerCB;
    PlanIterator*          thePlan; 

    // static context is either generated by ourselves or given by the user 
    // (hence, the boolean flag in order to capture ownership).
    static_context       * theStaticContext;

    // dynamic stuff
    // one dynamic context that always belongs to a query
    dynamic_context      * theDynamicContext;

    // Caching and holding on to the api context wrappers
    mutable DynamicContextImpl*    theDynamicContextWrapper;
    mutable StaticContextImpl*     theStaticContextWrapper;

    // utility stuff
    bool                   theUserErrorHandler; // who has ownership of the error handler
    ErrorHandler         * theErrorHandler; // provided by user or default one throwing exceptions
    
    error::ErrorManager  * theErrorManager; // see note in the constructor

    SAX2_ContentHandler     * theSAX2Handler; // sax content handler that provide event-based xml parser 
    
    bool                   theIsClosed; // remember whether the query has been closed

	}; /* class XQueryImpl */


  std::ostream& operator<< (std::ostream& os, const XQuery_t& aQuery);


} /* namespace zorba */
#endif
