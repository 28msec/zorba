// The following defines are really internal to this file.

// Masks and shifts for the bitfields in a type code.
#define ARITY_MASK (1<<28+1<<27)
#define ARITY_SHIFT 27
#define NODE_MASK (1<<26+1<<25+1<<24+1<<23)
#define NODE_SHIFT 23
#define REP_MASK (1<<22+1<<21+1<<20+1<<19+1<<18+1<<17)
#define REP_SHIFT 17
#define PRIM_MASK (1<<16+1<<15+1<<14+1<<13+1<<12)
#define PRIM_SHIFT 12
#define SUB_MASK (1<<11+1<<10)
#define SUB_SHIFT 10
#define SUB2_MASK (1<<9+1<<8)
#define SUB2_SHIFT 8
#define SUB3_MASK (1<<7+1<<6)
#define SUB3_SHIFT 6
#define SUB4_MASK (1<<5+1<<4)
#define SUB4_SHIFT 4
#define SUB5_MASK (1<<3+1<<2)
#define SUB5_SHIFT 2
#define SUB6_MASK (1<<1+1<<0)
#define SUB6_SHIFT 0

// ARITY specifies whether this value is an item or a sequence.
// Data items use ITEM_ARITY or SEQUENCE_ARITY.
// The other codes are used only to specify argument and result types of functions.
#define ITEM_ARITY (0 << ARITY_SHIFT)
#define SEQUENCE_ARITY (1 << ARITY_SHIFT)
#define NONEMPTY_SEQ_ARITY (2 << ARITY_SHIFT)
#define OPT_ITEM_ARITY (3 << ARITY_SHIFT)

// NODE specifies the node type.
// VALUE_NODE is a dummy for values,
// ANY_NODE is a dummy for sequences of any type of node (but not a value).
#define VALUE_NODE (0 << NODE_SHIFT)
#define DOCUMENT_NODE (1 << NODE_SHIFT)
#define ELEMENT_NODE (2 << NODE_SHIFT)
#define ATTRIBUTE_NODE (3 << NODE_SHIFT)
#define NAMESPACE_NODE (4 << NODE_SHIFT)
#define PROCESSING_INSTRUCTION_NODE (5 << NODE_SHIFT)
#define COMMENT_NODE (6 << NODE_SHIFT)
#define TEXT_NODE (7 << NODE_SHIFT)
#define ANY_NODE (8 << NODE_SHIFT)

// REP specifies the representation (C++ class)
// More reps may be added in future.
// Initially DECIMAL_REP is not used.
// NODE_REP is a dummy value, as node representations are implicit in the NODE.
#define NODE_REP (0 << REP_SHIFT)
#define STRING_REP (1 << REP_SHIFT)
#define DECIMAL_REP (2 << REP_SHIFT)
#define DOUBLE_REP (3 << REP_SHIFT)
#define BOOLEAN_REP (4 << REP_SHIFT)
#define TIME_REP (5 << REP_SHIFT)
#define BINARY_REP (6 << REP_SHIFT)
#define URI_REP (7 << REP_SHIFT)
#define QNAME_REP (8 << REP_SHIFT)

// PRIM specifies the XML Schema primitive type.
// UNTYPED is used for elements, UNTYPED_ATOMIC for other node types.
// COMPLEX_TYPE is reserved for later use with complex types.
#define UNTYPED_PRIM (0 << PRIM_SHIFT)
#define UNTYPED_ATOMIC_PRIM (1 << PRIM_SHIFT)
#define STRING_PRIM (2 << PRIM_SHIFT)
#define DECIMAL_PRIM (3 << PRIM_SHIFT)
#define BOOLEAN_PRIM (4 << PRIM_SHIFT)
#define FLOAT_PRIM (5 << PRIM_SHIFT)
#define DOUBLE_PRIM (6 << PRIM_SHIFT)
#define DURATION_PRIM (7 << PRIM_SHIFT)
#define DATE_TIME_PRIM (8 << PRIM_SHIFT)
#define TIME_PRIM (9 << PRIM_SHIFT)
#define DATE_PRIM (10 << PRIM_SHIFT)
#define G_YEAR_MONTH_PRIM (11 << PRIM_SHIFT)
#define G_YEAR_PRIM (12 << PRIM_SHIFT)
#define G_MONTH_DAY_PRIM (13 << PRIM_SHIFT)
#define G_DAY_PRIM (14 << PRIM_SHIFT)
#define G_MONTH_PRIM (15 << PRIM_SHIFT)
#define HEX_BINARY_PRIM (16 << PRIM_SHIFT)
#define BASE_64_BINARY_PRIM (17 << PRIM_SHIFT)
#define ANY_URI_PRIM (18 << PRIM_SHIFT)
#define QNAME_PRIM (19 << PRIM_SHIFT)
#define NOTATION_PRIM (20 << PRIM_SHIFT)
#define COMPLEX_TYPE_PRIM

// SUB2-SUB5 specify derived XML Schema types.
#define NORMALIZED_STRING_SUB (STRING_PRIM + 1 << SUB_SHIFT)
#define TOKEN_SUB2 (NORMALIZED_STRING_SUB + 1 << SUB2_SHIFT)
#define LANGUAGE_SUB3 (TOKEN_SUB2 + 1 << SUB3_SHIFT)
#define NMTOKEN_SUB3 (TOKEN_SUB2 + 2 << SUB3_SHIFT)
#define NAME_SUB3 (TOKEN_SUB2 + 3 << SUB3_SHIFT)
#define NCNAME_SUB4 (NAME_SUB3 + 1 << SUB4_SHIFT)
#define ID_SUB5 (NCNAME_SUB4 + 1 << SUB5_SHIFT)
#define IDREF_SUB5 (NCNAME_SUB4 + 2 << SUB5_SHIFT)
#define ENTITY_SUB5 (NCNAME_SUB4 + 3 << SUB5_SHIFT)

#define INTEGER_SUB (DECIMAL_PRIM + 1 << SUB_SHIFT)
#define NON_POSITIVE_INTEGER_SUB2 (INTEGER_SUB + 1 << SUB2_SHIFT)
#define NEGATIVE_INTEGER_SUB3 (NON_POSITIVE_INTEGER_SUB2 + 1 << SUB3_SHIFT)
#define LONG_SUB2 (INTEGER_SUB + 2 << SUB2_SHIFT)
#define INT_SUB3 (LONG_SUB2 + 1 << SUB3_SHIFT)
#define SHORT_SUB4 (INT_SUB3 + 1 << SUB4_SHIFT)
#define BYTE_SUB5 (SHORT_SUB4 + 1 << SUB5_SHIFT)
#define NON_NEGATIVE_INTEGER_SUB2 (INTEGER_SUB + 3 << SUB2_SHIFT)
#define UNSIGNED_LONG_SUB3 (NON_NEGATIVE_INTEGER_SUB2 + 1 << SUB3_SHIFT)
#define UNSIGNED_INT_SUB4 (UNSIGNED_LONG_SUB3 + 1 << SUB4_SHIFT)
#define UNSIGNED_SHORT_SUB5 (UNSIGNED_INT_SUB4 + 1 << SUB5_SHIFT)
#define UNSIGNED_BYTE_SUB6 (UNSIGNED_SHORT_SUB5 + 1 << SUB6_SHIFT)
#define POSITIVE_INTEGER_SUB3 (NON_NEGATIVE_INTEGER_SUB2 + 2 << SUB3_SHIFT)

#define DAY_TIME_DURATION_SUB2 (DURATION_PRIM + 1 << SUB2_SHIFT)
#define YEAR_MONTH_DURATION_SUB2 (DURATION_PRIM + 1 << SUB2_SHIFT)

// Okay, at last the bit-twiddling is done.  Now we just make an enum of type codes
// that assembles the correct values together.
// Note: short, int, long, float, double are C++ reserved words,
//       so we use signedShort, signedInt, signedLong, singleFloat, doubleFloat instead.
enum TypeCode {
	// Node items.
	documentNode = ITEM_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNode = ITEM_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNode = ITEM_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNode = ITEM_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNode = ITEM_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNode = ITEM_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNode = ITEM_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,

	// String value items.
	string = ITEM_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	normalizedString = ITEM_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	token = ITEM_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	language = ITEM_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	nmtoken = ITEM_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	name = ITEM_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	ncName = ITEM_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	id = ITEM_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	idref = ITEM_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	entity = ITEM_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value items.
//	decimal = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	decimal = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//	integer = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	integer = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//	nonPositiveInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	nonPositiveInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//	negativeInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	negativeInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//	signedLong = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	signedLong = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	signedInt = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	signedShort = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	signedByte = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//	nonNegativeInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	nonNegativeInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//	unsignedLong = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	unsignedLong = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	unsignedInt = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	unsignedShort = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	unsignedByte = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//	positiveInteger = ITEM_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	positiveInteger = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value items.
	untypedValue = ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	untypedAtomicValue = ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	booleanValue = ITEM_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	singleFloat = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	doubleFloat = ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	duration = 	ITEM_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	dayTimeDuration = ITEM_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	yearMonthDuration = ITEM_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	dateTime = ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	time = ITEM_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	date = ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	gYearMonth = ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	gYear = ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	gMonthDay = ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	gDay = ITEM_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	gMonth = ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	hexBinary = ITEM_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	base64Binary = ITEM_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	anyURI = ITEM_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	qname = ITEM_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	notation = ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	complexType = ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,


	// Node sequences.
	documentNodeSeq = SEQUENCE_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNodeSeq = SEQUENCE_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNodeSeq = SEQUENCE_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNodeSeq = SEQUENCE_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNodeSeq = SEQUENCE_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNodeSeq = SEQUENCE_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNodeSeq = SEQUENCE_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	anyNodeSeq = SEQUENCE_ARITY + ANY_NODE + UNTYPED_PRIM,

	// String value sequences.
	stringSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	normalizedStringSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	tokenSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	languageSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	nmtokenSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	nameSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	ncNameSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	idSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	idrefSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	entitySeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value sequences.
//	decimalSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	decimalSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//	integerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	integerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//	nonPositiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	nonPositiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//	negativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	negativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//	signedLongSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	signedLongSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	signedIntSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	signedShortSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	signedByteSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//	nonNegativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	nonNegativeIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//	unsignedLongSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	unsignedLongSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	unsignedIntSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	unsignedShortSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	unsignedByteSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//	positiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	positiveIntegerSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value sequences.
	untypedValueSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	untypedAtomicValueSeq = SEQUENCE_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	booleanValueSeq = SEQUENCE_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	singleFloatSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	doubleFloatSeq = SEQUENCE_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	durationSeq = 	SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	dayTimeDurationSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	yearMonthDurationSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	dateTimeSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	timeSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	dateSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	gYearMonthSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	gYearSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	gMonthDaySeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	gDaySeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	gMonthSeq = SEQUENCE_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	hexBinarySeq = SEQUENCE_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	base64BinarySeq = SEQUENCE_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	anyURISeq = SEQUENCE_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	qnameSeq = SEQUENCE_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	notationSeq = SEQUENCE_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	complexTypeSeq = SEQUENCE_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,


	// Node non-empty sequences.
	documentNodePlus = NONEMPTY_SEQ_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNodePlus = NONEMPTY_SEQ_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNodePlus = NONEMPTY_SEQ_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNodePlus = NONEMPTY_SEQ_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNodePlus = NONEMPTY_SEQ_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNodePlus = NONEMPTY_SEQ_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNodePlus = NONEMPTY_SEQ_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	anyNodePlus = NONEMPTY_SEQ_ARITY + ANY_NODE + UNTYPED_PRIM,

	// String value non-empty sequences.
	stringPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	normalizedStringPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	tokenPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	languagePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	nmtokenPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	namePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	ncNamePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	idPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	idrefPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	entityPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value non-empty sequences.
//	decimalPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	decimalPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//	integerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	integerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//	nonPositiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	nonPositiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//	negativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	negativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//	signedLongPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	signedLongPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	signedIntPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	signedShortPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	signedBytePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//	nonNegativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	nonNegativeIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//	unsignedLongPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	unsignedLongPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	unsignedIntPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	unsignedShortPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	unsignedBytePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//	positiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	positiveIntegerPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value non-empty sequences.
	untypedValuePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	untypedAtomicValuePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	booleanValuePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	singleFloatPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	doubleFloatPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	durationPlus = 	NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	dayTimeDurationPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	yearMonthDurationPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	dateTimePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	timePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	datePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	gYearMonthPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	gYearPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	gMonthDayPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	gDayPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	gMonthPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	hexBinaryPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	base64BinaryPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	anyURIPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	qnamePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	notationPlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	complexTypePlus = NONEMPTY_SEQ_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,


	// Node optional items.
	documentNodeOpt = OPT_ITEM_ARITY + DOCUMENT_NODE + NODE_REP + UNTYPED_PRIM,
	elementNodeOpt = OPT_ITEM_ARITY + ELEMENT_NODE + NODE_REP + UNTYPED_PRIM,
	attributeNodeOpt = OPT_ITEM_ARITY + ATTRIBUTE_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	namespaceNodeOpt = OPT_ITEM_ARITY + NAMESPACE_NODE + NODE_REP + QNAME_PRIM,
	processingInstructionNodeOpt = OPT_ITEM_ARITY + PROCESSING_INSTRUCTION_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	commentNodeOpt = OPT_ITEM_ARITY + COMMENT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	textNodeOpt = OPT_ITEM_ARITY + TEXT_NODE + NODE_REP + UNTYPED_ATOMIC_PRIM,
	anyNodeOpt = OPT_ITEM_ARITY + ANY_NODE + UNTYPED_PRIM,

	// String value optional items.
	stringOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + STRING_PRIM,
	normalizedStringOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NORMALIZED_STRING_SUB,
	tokenOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + TOKEN_SUB2,
	languageOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + LANGUAGE_SUB3,
	nmtokenOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NMTOKEN_SUB3,
	nameOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NAME_SUB3,
	ncNameOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + NCNAME_SUB4,
	idOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + ID_SUB5,
	idrefOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + IDREF_SUB5,
	entityOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + ENTITY_SUB5,

	// Numeric value optional items.
//	decimalOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + DECIMAL_PRIM,  // no decimal rep yet
	decimalOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DECIMAL_PRIM,  // no decimal rep yet
//	integerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + INTEGER_SUB,
	integerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INTEGER_SUB,
//	nonPositiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_POSITIVE_INTEGER_SUB2,  // no decimal rep yet
	nonPositiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_POSITIVE_INTEGER_SUB2,
//	negativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NEGATIVE_INTEGER_SUB3,  // no decimal rep yet
	negativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NEGATIVE_INTEGER_SUB3,
//	signedLongOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + LONG_SUB2,  // no decimal rep yet
	signedLongOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + LONG_SUB2,
	signedIntOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + INT_SUB3,
	signedShortOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + SHORT_SUB4,
	signedByteOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + BYTE_SUB5,
//	nonNegativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + NON_EGATIVE_INTEGER_SUB2,
	nonNegativeIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + NON_NEGATIVE_INTEGER_SUB2,  // no decimal rep yet
//	unsignedLongOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_LONG_SUB3,
	unsignedLongOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_LONG_SUB3,
	unsignedIntOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_INT_SUB4,
	unsignedShortOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + UNSIGNED_SHORT_SUB5,
	unsignedByteOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + UNSIGNED_BYTE_SUB6,
//	positiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DECIMAL_REP + POSITIVE_INTEGER_SUB3,  // no decimal rep yet
	positiveIntegerOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + POSITIVE_INTEGER_SUB3,

	// Other atomic value optional items.
	untypedValueOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_PRIM,
	untypedAtomicValueOpt = OPT_ITEM_ARITY + VALUE_NODE + STRING_REP + UNTYPED_ATOMIC_PRIM,
	booleanValueOpt = OPT_ITEM_ARITY + VALUE_NODE + BOOLEAN_REP + BOOLEAN_PRIM,
	singleFloatOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + FLOAT_PRIM,
	doubleFloatOpt = OPT_ITEM_ARITY + VALUE_NODE + DOUBLE_REP + DOUBLE_PRIM,
	durationOpt = 	OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DURATION_PRIM,
	dayTimeDurationOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DAY_TIME_DURATION_SUB2,
	yearMonthDurationOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + YEAR_MONTH_DURATION_SUB2,
	dateTimeOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_TIME_PRIM,
	timeOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + TIME_PRIM,
	dateOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + DATE_PRIM,
	gYearMonthOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_MONTH_PRIM,
	gYearOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_YEAR_PRIM,
	gMonthDayOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_DAY_PRIM,
	gDayOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_DAY_PRIM,
	gMonthOpt = OPT_ITEM_ARITY + VALUE_NODE + TIME_REP + G_MONTH_PRIM,
	hexBinaryOpt = OPT_ITEM_ARITY + VALUE_NODE + BINARY_REP + HEX_BINARY_PRIM,
	base64BinaryOpt = OPT_ITEM_ARITY + VALUE_NODE + BINARY_REP + BASE_64_BINARY_PRIM,
	anyURIOpt = OPT_ITEM_ARITY + VALUE_NODE + URI_REP + ANY_URI_PRIM,
	qnameOpt = OPT_ITEM_ARITY + VALUE_NODE + QNAME_REP + QNAME_PRIM,
	notationOpt = OPT_ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	complexTypeOpt = OPT_ITEM_ARITY + VALUE_NODE + QNAME_REP + NOTATION_PRIM,
	};
