("as-files,f", "Treat all -q arguments as file paths instead of URIs or inline queries.")
("base-uri", po::value<std::string>(), "Set the base URI property of the static context.")
("boundary-space", po::value<std::string>(), "Set the boundary-space policy ('strip' or 'preserve') in the static context.")
("byte-order-mark", "Set the byte-order-mark for the serializer.")
("classpath", po::value<std::string>(), "JVM classpath to be used by modules using Java implementations")
("compile-only", "Only compile (don't execute)")
("compile-plan,c", "Output the query plan as binary.")
("construction-mode", po::value<std::string>(), "Set the construction mode ('strip' or 'preserve') in the static context.")
("context-item", po::value<std::string> (), "Set the context item to the XML document in a given file.")
("debug,d", "Launch the Zorba debugger server and connect to a DBGP-enabled debugger client.")
("debug-host,h", po::value<std::string>()->default_value("127.0.0.1"), "The host where the DBGP-enabled debugger client listens for connections. Defaults to: 127.0.0.1")
("debug-port,p", po::value<unsigned int>()->default_value (28028), "The port on which the DBGP-enabled debugger client listens for connections. Defaults to: 28028")
("default-collation", po::value<std::string>(), "Add the given collation and set the value of the default collation in the static context to the given collation.")
("execute-plan", "Take a query plan as binary and execute it. Binary query plans can be generated using the --compile-plan option.")
("external-variable,e", po::value<std::vector<std::string> >(), "Provide the value for a variable given a file (name=file) or a value (name:=value)")
("indent,i", "Indent output.")
("lib-module,l", "Query compiler option to treat the query as a library module. If this is set --compile-only option is also set to true.")
("lib-path", po::value<std::string>(), "Library path (list of directories) where Zorba will look for dynamic libraries (e.g., module external function implementations.")
("module-path", po::value<std::string>(), "Path (list of directories) to add to both the URI and Library paths.")
("multiple,m", po::value<unsigned long>()->default_value (1), "Execute the given queries multiple times.")
("no-logo", "Print no logo when starting.")
("no-serializer", "Do not serialize (discard) result.")
("omit-xml-declaration,r", "Omit the XML declaration from the result.")
("optimization-level", po::value<std::string>()->default_value("O1"), "Optimization level for the query compiler (O0, O1 or O2 - default: O1)")
("option", po::value<std::vector<std::string> >(), "Set an XQuery option in the static context. The QName of the option is passed as a string in the notation by James Clark (i.e. {namespace}localname). For example, --option {http://zorba.io/}option=value").
("ordering-mode", po::value<std::string>(), "Set the ordering mode ('ordered' or 'unordered') in the static context.")
("output-file,o", po::value<std::string>(), "Write the result to the given file.")
("parse-only", "Stop after parsing the query.")
("print-errors-as-xml,x", "Print the errors as XML.")
("print-query", "Print the queries.")
("query,q", po::value<std::vector<std::string> >(&theQueriesOrFiles), "Query test or file URI (file://...)")
("serialization-parameter,z", po::value<std::vector<std::string> >(), "Set serialization parameter in the form of a parameter=value pair (see http://www.w3.org/TR/xslt-xquery-serialization/#serparam, e.g.: -z method=xhtml -z doctype-system=DTD/xhtml1-strict.dtd -z indent=yes).")
("serialize-html", "Serialize the result as HTML.")
("serialize-text", "Serialize the result as Text.")
("stop-words", po::value<std::vector<std::string> >(), "Mapping specifying a stop-words URI to another.")
("thesaurus", po::value<std::vector<std::string> >(), "Mapping specifying a thesaurus URI to another.")
("timeout", po::value<long>()->default_value(-1), "Specify a timeout in seconds. After the specified time, the execution of the query will be aborted.")
("timing,t", "Print timing information. In case of multiple queries the timing information is provided per each query. Both wallclock time and user time (which excludes I/O, network delays and other kernel waits) are shown.")
("trailing-nl", "Output a trailing newline after the result of the query.")
("uri-path", po::value<std::string>(), "URI path (list of directories) added to the built-in URI resolver, i.e. where to find modules/schemas to import.")
