<?xml version="1.0"?>
<!--
 ! Copyright 2006-2011 The FLWOR Foundation.
 ! 
 ! Licensed under the Apache License, Version 2.0 (the "License");
 ! you may not use this file except in compliance with the License.
 ! You may obtain a copy of the License at
 ! 
 ! http://www.apache.org/licenses/LICENSE-2.0
 ! 
 ! Unless required by applicable law or agreed to in writing, software
 ! distributed under the License is distributed on an "AS IS" BASIS,
 ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ! See the License for the specific language governing permissions and
 ! limitations under the License.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://www.zorba-xquery.com/modules/full-text"
  xmlns="http://www.zorba-xquery.com/modules/full-text"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified">

  <!--======================================================================-->

  <xs:element name="compare-options">
    <xs:complexType>
      <xs:attributeGroup ref="compare-attributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="compare-attributes">
    <xs:attribute name="case" type="sensitivity" default="insensitive"/>
    <xs:attribute name="diacritics" type="sensitivity" default="insensitive"/>
    <xs:attribute name="stem" type="yes-no-both" default="no"/>
  </xs:attributeGroup>

  <xs:simpleType name="sensitivity">
    <xs:restriction base="xs:string">
      <xs:enumeration value="insensitive"/>
      <xs:enumeration value="sensitive"/>
      <xs:enumeration value="both"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="yes-no-both">
    <xs:restriction base="xs:string">
      <xs:enumeration value="yes"/>
      <xs:enumeration value="no"/>
      <xs:enumeration value="both"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="boolean-value">
    <xs:attribute name="value" type="xs:boolean" use="required"/>
  </xs:complexType>

  <!--======================================================================-->

  <xs:element name="token">
    <xs:complexType>

      <!-- The language of the token. -->
      <xs:attribute name="lang" type="xs:language"/>

      <!-- The sentence number. -->
      <xs:attribute name="sentence" type="xs:nonNegativeInteger" use="required"/>

      <!-- The paragraph number. -->
      <xs:attribute name="paragraph" type="xs:nonNegativeInteger" use="required"/>

      <!-- The token string value. -->
      <xs:attribute name="value" type="xs:string" use="required"/>

      <!--
       ! A reference to the originating node.  If the token occurred within an
       ! element, the reference refers to the text node.  If the token occurred
       ! within an attribute, the reference refers to the attribute node.
      -->
      <xs:attribute name="node-ref" type="xs:anyURI"/>

    </xs:complexType>
  </xs:element>

  <!--======================================================================-->

  <xs:element name="tokenizer-properties">
    <xs:complexType>
      <xs:all>

        <!--
         ! If true, XML comments separate tokens.  (No example can be provided
         ! here because it is illegal to nest an XML comment inside an XML
         ! comment.)
        -->
        <xs:element name="comments-separate-tokens" type="boolean-value"/>

        <!--
         ! If true, XML elements separate tokens.  For example,
         ! <b>B</b>old would be 2 tokens instead of 1.
        -->
        <xs:element name="elements-separate-tokens" type="boolean-value"/>

        <!--
         ! If true, XML processing instructions separate tokens.  For example,
         ! net<?PI pi?>work would be 2 tokens instead of 1.
        -->
        <xs:element name="processing-instructions-separate-tokens" type="boolean-value"/>

        <!--
         ! The list of languages that the tokenizer can tokenize.
        -->
        <xs:element name="supported-languages">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="lang" type="xs:language" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

      </xs:all>

      <!--
       !  The tokenizer's identifying URI.
      -->
      <xs:attribute name="uri" type="xs:anyURI"/>

    </xs:complexType>
  </xs:element>

  <!--======================================================================-->

</xs:schema>
<!-- vim:set et sw=2 ts=2: -->
