(:
 : !!! WARNING: This code is automatically generated by the script located at
 : /scripts/mailchimp/generator.xq !!!
 :)

(:~
 :
 : Mailchimp Client Module
 :
 : @see &lt;a href="http://apidocs.mailchimp.com/"&gt;http://apidocs.mailchimp.com/&lt;/a&gt;
 :
 : @author William Candillon {william.candillon@28msec.com}
 :
 :)
module namespace mailchimp = "http://www.zorba-xquery.com/modules/webservices/mailchimp";

import module namespace http-client = "http://expath.org/ns/http-client";

import module namespace xmlrpc = "http://www.zorba-xquery.com/modules/xmlrpc";

(:~
 : Mailchimp gateway where the client data is stored.
 :)
declare variable $mailchimp:gateway  := "us2";

(:~
 : Mailchimp API version.
 :)
declare variable $mailchimp:version  := "1.3";

(:~
 : Endpoint URL for the XML-RPC requests.
 :)
declare variable $mailchimp:endpoint := concat("http://", $mailchimp:gateway, ".api.mailchimp.com/", $mailchimp:version, "/");

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignUnschedule-3'&gt;campaignUnschedule&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the id of the campaign to unschedule
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignUnschedule($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignUnschedule($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Unschedule a campaign that is scheduled to be sent in the future
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignunschedule.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the id of the campaign to unschedule
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignUnschedule($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignUnschedule", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignSchedule-5'&gt;campaignSchedule&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the id of the campaign to schedule
 : @param $schedule_time the time to schedule the campaign. For A/B Split "schedule" campaigns, the time for Group A - in YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 : @param $schedule_time_b optional -the time to schedule Group B of an A/B Split "schedule" campaign - in YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignSchedule($apikey as xs:string, $cid as xs:string, $schedule_time as xs:string, $schedule_time_b as xs:string){
  mailchimp:campaignSchedule($mailchimp:endpoint, $apikey, $cid, $schedule_time, $schedule_time_b)
};

(:~
 : Schedule a campaign to be sent in the future
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignschedule.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the id of the campaign to schedule
 : @param $schedule_time the time to schedule the campaign. For A/B Split "schedule" campaigns, the time for Group A - in YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 : @param $schedule_time_b optional -the time to schedule Group B of an A/B Split "schedule" campaign - in YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignSchedule($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $schedule_time as xs:string, $schedule_time_b as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignSchedule", ($apikey, $cid, $schedule_time, $schedule_time_b))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignResume-3'&gt;campaignResume&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the id of the campaign to pause
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignResume($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignResume($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Resume sending an AutoResponder or RSS campaign
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignresume.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the id of the campaign to pause
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignResume($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignResume", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignPause-3'&gt;campaignPause&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the id of the campaign to pause
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignPause($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignPause($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Pause an AutoResponder orRSS campaign from sending
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignpause.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the id of the campaign to pause
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignPause($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignPause", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignSendNow-3'&gt;campaignSendNow&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the id of the campaign to send
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignSendNow($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignSendNow($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Send a given campaign immediately.
 : For RSS campaigns, this will "start" them.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignsendnow.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the id of the campaign to send
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignSendNow($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignSendNow", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignSendTest-5'&gt;campaignSendTest&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the id of the campaign to test
 : @param $test_emails an array of email address to receive the test message
 : @param $send_type optional by default (null) both formats are sent - "html" or "text" send just that format
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignSendTest($apikey as xs:string, $cid as xs:string, $test_emails as element(array), $send_type as xs:string){
  mailchimp:campaignSendTest($mailchimp:endpoint, $apikey, $cid, $test_emails, $send_type)
};

(:~
 : Send a test of this campaign to the provided email address
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignsendtest.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the id of the campaign to test
 : @param $test_emails an array of email address to receive the test message
 : @param $send_type optional by default (null) both formats are sent - "html" or "text" send just that format
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignSendTest($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $test_emails as element(array), $send_type as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignSendTest", ($apikey, $cid, $test_emails, $send_type))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignSegmentTest-4'&gt;campaignSegmentTest&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $list_id the list to test segmentation on - get lists using lists()
 : @param $options with 2 keys:
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignSegmentTest($apikey as xs:string, $list_id as xs:string, $options as element(array)){
  mailchimp:campaignSegmentTest($mailchimp:endpoint, $apikey, $list_id, $options)
};

(:~
 : Allows one to test their segmentation rules before creating a campaign using them string
 : "match" controls whether to use AND or OR when applying your options - expects "&amp;lt;strong&amp;gt;any&amp;lt;/strong&amp;gt;" (for
 : OR) or "&amp;lt;strong&amp;gt;all&amp;lt;/strong&amp;gt;" (for AND) array "conditions" - up to 10 different
 : criteria to apply while segmenting.
 : Each criteria row must contain 3 keys - "&amp;lt;strong&amp;gt;field&amp;lt;/strong&amp;gt;", "&amp;lt;strong&amp;gt;op&amp;lt;/strong&amp;gt;", and
 : "&amp;lt;strong&amp;gt;value&amp;lt;/strong&amp;gt;" - and possibly a fourth, "&amp;lt;strong&amp;gt;extra&amp;lt;/strong&amp;gt;", based
 : on these definitions: Field = "&amp;lt;strong&amp;gt;date&amp;lt;/strong&amp;gt;" : Select based on
 : signup date Valid Op(eration): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (is) / &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (after)
 : / &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt; (before) Valid Values: string last_campaign_sent uses
 : the date of the last campaign sent string campaign_id - uses the send date of the campaign
 : that carriers the Id submitted - see campaigns() string YYYY-MM-DD - any date in the
 : form of YYYY-MM-DD - &amp;lt;em&amp;gt;note:&amp;lt;/em&amp;gt; anything that appears to start with YYYY
 : will be treated as a date Field = "&amp;lt;strong&amp;gt;interests-X&amp;lt;/strong&amp;gt;": where X
 : is the Grouping Id from listInterestGroupings() Valid Op(erations): &amp;lt;strong&amp;gt;one&amp;lt;/strong&amp;gt; /
 : &amp;lt;strong&amp;gt;none&amp;lt;/strong&amp;gt; / &amp;lt;strong&amp;gt;all&amp;lt;/strong&amp;gt; Valid Values: a
 : comma delimited of interest groups for the list - see listInterestGroupings() Field =
 : "&amp;lt;strong&amp;gt;aim&amp;lt;/strong&amp;gt;" Valid Op(erations): &amp;lt;strong&amp;gt;open&amp;lt;/strong&amp;gt; /
 : &amp;lt;strong&amp;gt;noopen&amp;lt;/strong&amp;gt; / &amp;lt;strong&amp;gt;click&amp;lt;/strong&amp;gt; / &amp;lt;strong&amp;gt;noclick&amp;lt;/strong&amp;gt; Valid
 : Values: "&amp;lt;strong&amp;gt;any&amp;lt;/strong&amp;gt;" or a valid AIM-enabled Campaign that has been
 : sent Field = "&amp;lt;strong&amp;gt;rating&amp;lt;/strong&amp;gt;" : allows matching based on list member
 : ratings Valid Op(erations): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (=) / &amp;lt;strong&amp;gt;ne&amp;lt;/strong&amp;gt; (!=)
 : / &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (&amp;gt;) / &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt; (&amp;lt;) Valid
 : Values: a number between 0 and 5 Field = "&amp;lt;strong&amp;gt;ecomm_prod&amp;lt;/strong&amp;gt;" or
 : "&amp;lt;strong&amp;gt;ecomm_prod&amp;lt;/strong&amp;gt;": allows matching product and category names from
 : purchases Valid Op(erations): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (=) / &amp;lt;strong&amp;gt;ne&amp;lt;/strong&amp;gt; (!=)
 : / &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (&amp;gt;) / &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt; (&amp;lt;) /
 : &amp;lt;strong&amp;gt;like&amp;lt;/strong&amp;gt; (like '%blah%') / &amp;lt;strong&amp;gt;nlike&amp;lt;/strong&amp;gt; (not
 : like '%blah%') / &amp;lt;strong&amp;gt;starts&amp;lt;/strong&amp;gt; (like 'blah%') / &amp;lt;strong&amp;gt;ends&amp;lt;/strong&amp;gt; (like
 : '%blah') Valid Values: any string Field = "&amp;lt;strong&amp;gt;ecomm_spent_one&amp;lt;/strong&amp;gt;" or
 : "&amp;lt;strong&amp;gt;ecomm_spent_all&amp;lt;/strong&amp;gt;" : allows matching purchase amounts on
 : a single order or all orders Valid Op(erations): &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (&amp;gt;)
 : / &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt; (&amp;lt;) Valid Values: a number Field = "&amp;lt;strong&amp;gt;ecomm_date&amp;lt;/strong&amp;gt;" :
 : allow matching based on order dates Valid Op(eration): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (is)
 : / &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (after) / &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt; (before) Valid
 : Values: string YYYY-MM-DD - any date in the form of YYYY-MM-DD Field = "&amp;lt;strong&amp;gt;social_gender&amp;lt;/strong&amp;gt;" :
 : allows matching against the gender acquired from SocialPro Valid Op(eration): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (is)
 : / &amp;lt;strong&amp;gt;ne&amp;lt;/strong&amp;gt; (is not) Valid Values: male, female Field = "&amp;lt;strong&amp;gt;social_age&amp;lt;/strong&amp;gt;" :
 : allows matching against the age acquired from SocialPro Valid Op(erations): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (=)
 : / &amp;lt;strong&amp;gt;ne&amp;lt;/strong&amp;gt; (!=) / &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (&amp;gt;) / &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt;
 : (&amp;lt;) Valid Values: any number Field = "&amp;lt;strong&amp;gt;social_influence&amp;lt;/strong&amp;gt;" :
 : allows matching against the influence acquired from SocialPro Valid Op(erations): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt;
 : (=) / &amp;lt;strong&amp;gt;ne&amp;lt;/strong&amp;gt; (!=) / &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (&amp;gt;) /
 : &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt; (&amp;lt;) Valid Values: a number between 0 and 5 Field =
 : "&amp;lt;strong&amp;gt;social_network&amp;lt;/strong&amp;gt;" : Valid Op(erations): &amp;lt;strong&amp;gt;member&amp;lt;/strong&amp;gt; (is
 : a member of) / &amp;lt;strong&amp;gt;notmember&amp;lt;/strong&amp;gt; (is not a member of) Valid Values:
 : twitter, facebook, myspace, linkedin, flickr Field = "&amp;lt;strong&amp;gt;static_segment&amp;lt;/strong&amp;gt;" :
 : Valid Op(eration): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (is in) / &amp;lt;strong&amp;gt;ne&amp;lt;/strong&amp;gt; (is
 : not in) Valid Values: an int - get from listStaticSegments() Field = An &amp;lt;strong&amp;gt;Address&amp;lt;/strong&amp;gt; Merge
 : Var.
 : Use &amp;lt;strong&amp;gt;Merge0-Merge30&amp;lt;/strong&amp;gt; or the &amp;lt;strong&amp;gt;Custom Tag&amp;lt;/strong&amp;gt; you've
 : setup for your merge field - see listMergeVars().
 : Note, Address fields can still be used with the default operations below - this section is
 : broken out solely to highlight the differences in using the geolocation routines.
 : Valid Op(erations): &amp;lt;strong&amp;gt;geoin&amp;lt;/strong&amp;gt; Valid Values: The number of miles
 : an address should be within Extra Value: The Zip Code to be used as the center point Default
 : Field = A Merge Var.
 : Use &amp;lt;strong&amp;gt;Merge0-Merge30&amp;lt;/strong&amp;gt; or the &amp;lt;strong&amp;gt;Custom Tag&amp;lt;/strong&amp;gt; you've
 : setup for your merge field - see listMergeVars() Valid Op(erations): &amp;lt;strong&amp;gt;eq&amp;lt;/strong&amp;gt; (=)
 : / &amp;lt;strong&amp;gt;ne&amp;lt;/strong&amp;gt; (!=) / &amp;lt;strong&amp;gt;gt&amp;lt;/strong&amp;gt; (&amp;gt;) / &amp;lt;strong&amp;gt;lt&amp;lt;/strong&amp;gt;
 : (&amp;lt;) / &amp;lt;strong&amp;gt;like&amp;lt;/strong&amp;gt; (like '%blah%') / &amp;lt;strong&amp;gt;nlike&amp;lt;/strong&amp;gt; (not
 : like '%blah%') / &amp;lt;strong&amp;gt;starts&amp;lt;/strong&amp;gt; (like 'blah%') / &amp;lt;strong&amp;gt;ends&amp;lt;/strong&amp;gt; (like
 : '%blah') Valid Values: any string
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignsegmenttest.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $list_id the list to test segmentation on - get lists using lists()
 : @param $options with 2 keys:
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignSegmentTest($endpoint-url as xs:string, $apikey as xs:string, $list_id as xs:string, $options as element(array)){
  xmlrpc:invoke($endpoint-url, "campaignSegmentTest", ($apikey, $list_id, $options))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignCreate-7'&gt;campaignCreate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $type the Campaign Type to create - one of "regular", "plaintext", "absplit", "rss", "trans", "auto"
 : @param $options a hash of the standard options for this campaign :
 : @param $content the content for this campaign - use a struct with the following keys:
 : @param $segment_opts optional - if you wish to do Segmentation with this campaign this array should contain: see campaignSegmentTest(). It's suggested that you test your options against campaignSegmentTest(). Also, "trans" campaigns &lt;strong&gt;do not&lt;/strong&gt; support segmentation.
 : @param $type_opts optional -
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignCreate($apikey as xs:string, $type as xs:string, $options as element(array), $content as element(array), $segment_opts as element(array), $type_opts as element(array)){
  mailchimp:campaignCreate($mailchimp:endpoint, $apikey, $type, $options, $content, $segment_opts, $type_opts)
};

(:~
 : Create a new draft campaign to send.
 : You &amp;lt;strong&amp;gt;can not&amp;lt;/strong&amp;gt; have more than 32,000 campaigns in your account.
 : string list_id the list to send this campaign to- get lists using lists() string subject
 : the subject line for your campaign message string from_email the From: email address for
 : your campaign message string from_name the From: name for your campaign message (not an
 : email address) string to_name the To: name recipients will see (not email address) int
 : template_id optional - use this user-created template to generate the HTML content of
 : the campaign (takes precendence over other template options) int gallery_template_id optional
 : - use a template from the public gallery to generate the HTML content of the campaign (takes
 : precendence over base template options) int base_template_id optional - use this a
 : base/start-from-scratch template to generate the HTML content of the campaign int folder_id
 : optional - automatically file the new campaign in the folder_id passed.
 : Get using folders() - note that Campaigns and Autoresponders have separate folder setupsn
 : array tracking optional - set which recipient actions will be tracked, as a struct of
 : boolean values with the following keys: "opens", "html_clicks", and "text_clicks".
 : By default, opens and HTML clicks will be tracked.
 : Click tracking can not be disabled for Free accounts.
 : string title optional - an internal name to use for this campaign.
 : By default, the campaign subject will be used.
 : boolean authenticate optional - set to true to enable SenderID, DomainKeys, and DKIM authentication,
 : defaults to false.
 : array analytics optional - if provided, use a struct with "service type" as a key and
 : the "service tag" as a value.
 : For Google, this should be "google"=&amp;gt;"your_google_analytics_key_here".
 : Note that only "google" is currently supported - a Google Analytics tags will be added
 : to all links in the campaign with this string attached.
 : Others may be added in the future boolean auto_footer optional Whether or not we should
 : auto-generate the footer for your content.
 : Mostly useful for content from URLs or Imports boolean inline_css optional Whether or
 : not css should be automatically inlined when this campaign is sent, defaults to false.
 : boolean generate_text optional Whether of not to auto-generate your Text content from
 : the HTML content.
 : Note that this will be ignored if the Text part of the content passed is not empty, defaults
 : to false.
 : boolean auto_tweet optional If set, this campaign will be auto-tweeted when it is sent
 : - defaults to false.
 : Note that if a Twitter account isn't linked, this will be silently ignored.
 : boolean timewarp optional If set, this campaign must be scheduled 24 hours in advance of
 : sending - default to false.
 : Only valid for "regular" campaigns and "absplit" campaigns that split on schedule_time.
 : boolean ecomm360 optional If set, our &amp;lt;a href="http://www.mailchimp.com/blog/ecommerce-tracking-plugin/" target="_blank"&amp;gt;Ecommerce360
 : tracking&amp;lt;/a&amp;gt; will be enabled for links in the campaign string html for pasted HTML
 : content string text for the plain-text version string url to have us pull in content from
 : a URL.
 : Note, this will override any other content options - for lists with Email Format options,
 : you'll need to turn on generate_text as well string archive to send a Base64 encoded archive
 : file for us to import all media from.
 : Note, this will override any other content options - for lists with Email Format options,
 : you'll need to turn on generate_text as well string archive_type optional - only necessary
 : for the "archive" option.
 : Supported formats are: zip, tar.gz, tar.bz2, tar, tgz, tbz .
 : If not included, we will default to zip If you chose a template instead of pasting in
 : your HTML content, then use "html_" followed by the template sections as keys - for example,
 : use a key of "html_MAIN" to fill in the "MAIN" section of a template.
 : Supported template sections include: "html_HEADER", "html_MAIN", "html_SIDECOLUMN", and
 : "html_FOOTER" For RSS Campaigns this, array should contain: string url the URL to pull
 : RSS content from - it will be verified and must exist string schedule optional one of
 : "daily", "weekly", "monthly" - defaults to "daily" string schedule_hour optional an
 : hour between 0 and 24 - default to 4 (4am &amp;lt;em&amp;gt;local time&amp;lt;/em&amp;gt;) - applies to
 : all schedule types string schedule_weekday optional for "weekly" only, a number specifying the
 : day of the week to send: 0 (Sunday) - 6 (Saturday) - defaults to 1 (Monday) string schedule_monthday
 : optional for "monthly" only, a number specifying the day of the month to send (1 -
 : 28) or "last" for the last day of a given month.
 : Defaults to the 1st day of the month For A/B Split campaigns, this array should contain: string
 : split_test The values to segment based on.
 : Currently, one of: "subject", "from_name", "schedule".
 : NOTE, for "schedule", you will need to call campaignSchedule() separately! string pick_winner
 : How the winner will be picked, one of: "opens" (by the open_rate), "clicks" (by the click
 : rate), "manual" (you pick manually) int wait_units optional the default time unit to
 : wait before auto-selecting a winner - use "3600" for hours, "86400" for days.
 : Defaults to 86400.
 : int wait_time optional the number of units to wait before auto-selecting a winner -
 : defaults to 1, so if not set, a winner will be selected after 1 Day.
 : int split_size optional this is a percentage of what size the Campaign's List plus any
 : segmentation options results in.
 : "schedule" type forces 50%, all others default to 10% string from_name_a optional sort
 : of, required when split_test is "from_name" string from_name_b optional sort of, required
 : when split_test is "from_name" string from_email_a optional sort of, required when split_test
 : is "from_name" string from_email_b optional sort of, required when split_test is "from_name"
 : string subject_a optional sort of, required when split_test is "subject" string subject_b optional
 : sort of, required when split_test is "subject" For AutoResponder campaigns, this array
 : should contain: string offset-units one of "day", "week", "month", "year" - required string
 : offset-time optional, sort of - the number of units must be a number greater than 0
 : for signup based autoresponders string offset-dir either "before" or "after" string event
 : optional "signup" (default) to base this on double-optin signup, "date" or "annual" to
 : base this on merge field in the list string event-datemerge optional sort of, this is
 : required if the event is "date" or "annual"
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigncreate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $type the Campaign Type to create - one of "regular", "plaintext", "absplit", "rss", "trans", "auto"
 : @param $options a hash of the standard options for this campaign :
 : @param $content the content for this campaign - use a struct with the following keys:
 : @param $segment_opts optional - if you wish to do Segmentation with this campaign this array should contain: see campaignSegmentTest(). It's suggested that you test your options against campaignSegmentTest(). Also, "trans" campaigns &lt;strong&gt;do not&lt;/strong&gt; support segmentation.
 : @param $type_opts optional -
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignCreate($endpoint-url as xs:string, $apikey as xs:string, $type as xs:string, $options as element(array), $content as element(array), $segment_opts as element(array), $type_opts as element(array)){
  xmlrpc:invoke($endpoint-url, "campaignCreate", ($apikey, $type, $options, $content, $segment_opts, $type_opts))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignUpdate-5'&gt;campaignUpdate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the Campaign Id to update
 : @param $name the parameter name ( see campaignCreate() ). For items in the &lt;strong&gt;options&lt;/strong&gt; array, this will be that parameter's name (subject, from_email, etc.). Additional parameters will be that option name  (content, segment_opts). "type_opts" will be the name of the type - rss, auto, trans, etc.
 : @param $valuee an appropriate value for the parameter ( see campaignCreate() ). For items in the &lt;strong&gt;options&lt;/strong&gt; array, this will be that parameter's value. For additional parameters, this is the same value passed to them.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignUpdate($apikey as xs:string, $cid as xs:string, $name as xs:string, $value as item()){
  mailchimp:campaignUpdate($mailchimp:endpoint, $apikey, $cid, $name, $value)
};

(:~
 : Update just about any setting for a campaign that has &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; been sent.
 : See campaignCreate() for details.
 : Caveats:&amp;lt;br/&amp;gt;&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;If you set list_id, all segmentation options will
 : be deleted and must be re-added.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;If you set template_id, you need
 : to follow that up by setting it's 'content'&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;If you set segment_opts, you
 : should have tested your options against campaignSegmentTest() as campaignUpdate() will
 : not allow you to set a segment that includes no members.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignupdate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the Campaign Id to update
 : @param $name the parameter name ( see campaignCreate() ). For items in the &lt;strong&gt;options&lt;/strong&gt; array, this will be that parameter's name (subject, from_email, etc.). Additional parameters will be that option name  (content, segment_opts). "type_opts" will be the name of the type - rss, auto, trans, etc.
 : @param $valuee an appropriate value for the parameter ( see campaignCreate() ). For items in the &lt;strong&gt;options&lt;/strong&gt; array, this will be that parameter's value. For additional parameters, this is the same value passed to them.
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignUpdate($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $name as xs:string, $value as item()){
  xmlrpc:invoke($endpoint-url, "campaignUpdate", ($apikey, $cid, $name, $value))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignReplicate-3'&gt;campaignReplicate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the Campaign Id to replicate
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignReplicate($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignReplicate($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Replicate a campaign.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignreplicate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the Campaign Id to replicate
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignReplicate($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignReplicate", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignDelete-3'&gt;campaignDelete&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the Campaign Id to delete
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignDelete($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignDelete($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Delete a campaign.
 : Seriously, "poof, gone!" - be careful!
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigndelete.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the Campaign Id to delete
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignDelete($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignDelete", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaigns-5'&gt;campaigns&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $filters a hash of filters to apply to this query - all are optional:
 : @param $start optional - control paging of campaigns, start results at this campaign #, defaults to 1st page of data  (page 0)
 : @param $limit optional - control paging of campaigns, number of campaigns to return with each call, defaults to 25 (max=1000)
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaigns($apikey as xs:string, $filters as element(array), $start as xs:integer, $limit as xs:integer){
  mailchimp:campaigns($mailchimp:endpoint, $apikey, $filters, $start, $limit)
};

(:~
 : Get the list of campaigns and their details matching the specified filters string campaign_id
 : optional - return a single campaign using a know campaign_id string list_id optional -
 : the list to send this campaign to- get lists using lists().
 : Accepts multiples separated by commas when not using exact matching.
 : int folder_id optional - only show campaigns from this folder id - get folders using campaignFolders().
 : Accepts multiples separated by commas when not using exact matching.
 : int template_id optional - only show campaigns using this template id - get templates using
 : templates().
 : Accepts multiples separated by commas when not using exact matching.
 : string status optional - return campaigns of a specific status - one of "sent", "save", "paused",
 : "schedule", "sending".
 : Accepts multiples separated by commas when not using exact matching.
 : string type optional - return campaigns of a specific type - one of "regular", "plaintext", "absplit",
 : "rss", "trans", "auto".
 : Accepts multiples separated by commas when not using exact matching.
 : string from_name optional - only show campaigns that have this "From Name" string from_email
 : optional - only show campaigns that have this "Reply-to Email" string title optional -
 : only show campaigns that have this title string subject optional - only show campaigns that
 : have this subject string sendtime_start optional - only show campaigns that have been
 : sent since this date/time (in GMT) - format is YYYY-MM-DD HH:mm:ss (24hr) string sendtime_end
 : optional - only show campaigns that have been sent before this date/time (in GMT) -
 : format is YYYY-MM-DD HH:mm:ss (24hr) boolean exact optional - flag for whether to filter
 : on exact values when filtering, or search within content for filter values - defaults to
 : true.
 : Using this disables the use of any filters that accept multiples.
 : string id Campaign Id (used for all other campaign functions) int web_id The Campaign id
 : used in our web app, allows you to create a link directly to it string list_id The List
 : used for this campaign int folder_id The Folder this campaign is in int template_id The
 : Template this campaign uses string content_type How the campaign's content is put together
 : - one of 'template', 'html', 'url' string title Title of the campaign string type The
 : type of campaign this is (regular,plaintext,absplit,rss,inspection,trans,auto) string create_time
 : Creation time for the campaign string send_time Send time for the campaign - also the
 : scheduled time for scheduled campaigns.
 : int emails_sent Number of emails email was sent to string status Status of the given campaign
 : (save,paused,schedule,sending,sent) string from_name From name of the given campaign string
 : from_email Reply-to email of the given campaign string subject Subject of the given campaign
 : string to_name Custom "To:" email string using merge variables string archive_url Archive
 : link for the given campaign boolean inline_css Whether or not the campaign content's css
 : was auto-inlined string analytics Either "google" if enabled or "N" if disabled string analytics_tag
 : The name/tag the campaign's links were tagged with if analytics were enabled.
 : boolean authenticate Whether or not the campaign was authenticated boolean ecomm360 Whether
 : or not ecomm360 tracking was appended to links boolean auto_tweet Whether or not the
 : campaign was auto tweeted after sending string auto_fb_post A comma delimited list of
 : Facebook Profile/Page Ids the campaign was posted to after sending.
 : If not used, blank.
 : boolean auto_footer Whether or not the auto_footer was manually turned on boolean timewarp
 : Whether or not the campaign used Timewarp boolean timewarp_schedule The time, in GMT,
 : that the Timewarp campaign is being sent.
 : For A/B Split campaigns, this is blank and is instead in their schedule_a and schedule_b in
 : the type_opts array array tracking containing "text_clicks", "html_clicks", and "opens" as
 : boolean values representing whether or not they were enabled string segment_text a
 : string marked-up with HTML explaining the segment used for the campaign in plain English
 : array segment_opts the segment used for the campaign - can be passed to campaignSegmentTest() or
 : campaignCreate() array type_opts the type-specific options for the campaign - can be
 : passed to campaignCreate()
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigns.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $filters a hash of filters to apply to this query - all are optional:
 : @param $start optional - control paging of campaigns, start results at this campaign #, defaults to 1st page of data  (page 0)
 : @param $limit optional - control paging of campaigns, number of campaigns to return with each call, defaults to 25 (max=1000)
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaigns($endpoint-url as xs:string, $apikey as xs:string, $filters as element(array), $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaigns", ($apikey, $filters, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignStats-3'&gt;campaignStats&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull stats for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignStats($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignStats($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Given a list and a campaign, get all the relevant campaign statistics (opens, bounces, clicks,
 : etc.) int bounces_a bounces for the A group int bounces_b bounces for the B group int
 : forwards_a forwards for the A group int forwards_b forwards for the B group int abuse_reports_a abuse
 : reports for the A group int abuse_reports_b abuse reports for the B group int unsubs_a unsubs
 : for the A group int unsubs_b unsubs for the B group int recipients_click_a clicks for
 : the A group int recipients_click_b clicks for the B group int forwards_opens_a opened forwards
 : for the A group int forwards_opens_b opened forwards for the A group int opens opens for
 : this timezone string last_open the date/time of the last open for this timezone int unique_opens
 : the unique opens for this timezone int clicks the total clicks for this timezone string
 : last_click the date/time of the last click for this timezone int unique_opens the unique
 : clicks for this timezone int bounces the total bounces for this timezone int total the
 : total number of members sent to in this timezone int sent the total number of members delivered
 : to in this timezone
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignstats.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull stats for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignStats($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignStats", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignClickStats-3'&gt;campaignClickStats&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull stats for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignClickStats($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignClickStats($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Get an array of the urls being tracked, and their click counts for a given campaign
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignclickstats.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull stats for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignClickStats($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignClickStats", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignEmailDomainPerformance-3'&gt;campaignEmailDomainPerformance&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull email domain performance for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignEmailDomainPerformance($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignEmailDomainPerformance($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Get the top 5 performing email domains for this campaign.
 : Users want more than 5 should use campaign campaignEmailStatsAIM() or campaignEmailStatsAIMAll() and
 : generate any additional stats they require.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignemaildomainperformance.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull email domain performance for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignEmailDomainPerformance($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignEmailDomainPerformance", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignMembers-6'&gt;campaignMembers&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull members for (can be gathered using campaigns())
 : @param $status optional the status to pull - one of 'sent', 'hard' (bounce), or 'soft' (bounce). By default, all records are returned
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignMembers($apikey as xs:string, $cid as xs:string, $status as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignMembers($mailchimp:endpoint, $apikey, $cid, $status, $start, $limit)
};

(:~
 : Get all email addresses the campaign was successfully sent to (ie, no bounces) string email
 : the email address sent to string status the status of the send - one of 'sent', 'hard', 'soft'
 : string absplit_group if this was an absplit campaign, one of 'a','b', or 'winner' string
 : tz_group if this was an timewarp campaign the timezone GMT offset the member was included
 : in
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignmembers.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull members for (can be gathered using campaigns())
 : @param $status optional the status to pull - one of 'sent', 'hard' (bounce), or 'soft' (bounce). By default, all records are returned
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignMembers($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $status as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignMembers", ($apikey, $cid, $status, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignHardBounces-5'&gt;campaignHardBounces&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignHardBounces($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignHardBounces($mailchimp:endpoint, $apikey, $cid, $start, $limit)
};

(:~
 : &amp;lt;strong&amp;gt;DEPRECATED&amp;lt;/strong&amp;gt; Get all email addresses with Hard Bounces for
 : a given campaign string email the email address that bounced
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignhardbounces.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignHardBounces($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignHardBounces", ($apikey, $cid, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignSoftBounces-5'&gt;campaignSoftBounces&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignSoftBounces($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignSoftBounces($mailchimp:endpoint, $apikey, $cid, $start, $limit)
};

(:~
 : &amp;lt;strong&amp;gt;DEPRECATED&amp;lt;/strong&amp;gt; Get all email addresses with Soft Bounces for
 : a given campaign string email the email address that bounced
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignsoftbounces.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignSoftBounces($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignSoftBounces", ($apikey, $cid, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignUnsubscribes-5'&gt;campaignUnsubscribes&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignUnsubscribes($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignUnsubscribes($mailchimp:endpoint, $apikey, $cid, $start, $limit)
};

(:~
 : Get all unsubscribed email addresses for a given campaign string email the email address
 : that unsubscribed string reason For unsubscribes only - the reason collected for the
 : unsubscribe.
 : If populated, one of 'NORMAL','NOSIGNUP','INAPPROPRIATE','SPAM','OTHER' string reason_text For
 : unsubscribes only - if the reason is OTHER, the text entered.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignunsubscribes.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignUnsubscribes($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignUnsubscribes", ($apikey, $cid, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignAbuseReports-6'&gt;campaignAbuseReports&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull abuse reports for (can be gathered using campaigns())
 : @param $since optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $start optional for large data sets, the number of results to return - defaults to 500, upper limit set at 1000
 : @param $limit optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignAbuseReports($apikey as xs:string, $cid as xs:string, $since as xs:integer, $start as xs:integer, $limit as xs:string){
  mailchimp:campaignAbuseReports($mailchimp:endpoint, $apikey, $cid, $since, $start, $limit)
};

(:~
 : Get all email addresses that complained about a given campaign
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignabusereports.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull abuse reports for (can be gathered using campaigns())
 : @param $since optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $start optional for large data sets, the number of results to return - defaults to 500, upper limit set at 1000
 : @param $limit optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignAbuseReports($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $since as xs:integer, $start as xs:integer, $limit as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignAbuseReports", ($apikey, $cid, $since, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignAdvice-3'&gt;campaignAdvice&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull advice text for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignAdvice($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignAdvice($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Retrieve the text presented in our app for how a campaign performed and any advice we
 : may have for you - best suited for display in customized reports pages.
 : Note: some messages will contain HTML - clean tags as necessary
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignadvice.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull advice text for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignAdvice($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignAdvice", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignAnalytics-3'&gt;campaignAnalytics&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignAnalytics($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignAnalytics($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Retrieve the Google Analytics data we've collected for this campaign.
 : Note, requires Google Analytics Add-on to be installed and configured.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignanalytics.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignAnalytics($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignAnalytics", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignGeoOpens-3'&gt;campaignGeoOpens&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignGeoOpens($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignGeoOpens($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Retrieve the countries and number of opens tracked for each.
 : Email address are not returned.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigngeoopens.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignGeoOpens($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignGeoOpens", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignGeoOpensForCountry-4'&gt;campaignGeoOpensForCountry&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $code An ISO3166 2 digit country code
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignGeoOpensForCountry($apikey as xs:string, $cid as xs:string, $code as xs:string){
  mailchimp:campaignGeoOpensForCountry($mailchimp:endpoint, $apikey, $cid, $code)
};

(:~
 : Retrieve the regions and number of opens tracked for a certain country.
 : Email address are not returned.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigngeoopensforcountry.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $code An ISO3166 2 digit country code
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignGeoOpensForCountry($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $code as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignGeoOpensForCountry", ($apikey, $cid, $code))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignEepUrlStats-3'&gt;campaignEepUrlStats&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignEepUrlStats($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignEepUrlStats($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Retrieve the tracked eepurl mentions on Twitter int tweets Total number of tweets seen
 : string first_tweet date and time of the first tweet seen string last_tweet date and time
 : of the last tweet seen int retweets Total number of retweets seen string first_retweet date
 : and time of the first retweet seen string last_retweet date and time of the last retweet
 : seen array statuses an array of statuses recorded inclduing the status, screen_name, status_id,
 : and datetime fields plus an is_retweet flag int clicks Total number of clicks seen string
 : first_click date and time of the first click seen string last_click date and time of
 : the first click seen array locations an array of geographic locations including country, region,
 : and total clicks string referrer the referrer, truncated to 100 bytes int clicks Total
 : number of clicks seen from this referrer string first_click date and time of the first
 : click seen from this referrer string last_click date and time of the first click seen
 : from this referrer
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigneepurlstats.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignEepUrlStats($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignEepUrlStats", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignBounceMessage-4'&gt;campaignBounceMessage&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $email the email address or unique id of the member to pull a bounce message for.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignBounceMessage($apikey as xs:string, $cid as xs:string, $email as xs:string){
  mailchimp:campaignBounceMessage($mailchimp:endpoint, $apikey, $cid, $email)
};

(:~
 : Retrieve the most recent full bounce message for a specific email address on the given
 : campaign.
 : Messages over 30 days old are subject to being removed
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignbouncemessage.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $email the email address or unique id of the member to pull a bounce message for.
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignBounceMessage($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $email as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignBounceMessage", ($apikey, $cid, $email))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignBounceMessages-6'&gt;campaignBounceMessages&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 25, upper limit set at 50
 : @param $since optional pull only messages since this time - use YYYY-MM-DD format in &lt;strong&gt;GMT&lt;/strong&gt; (we only store the date, not the time)
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignBounceMessages($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  mailchimp:campaignBounceMessages($mailchimp:endpoint, $apikey, $cid, $start, $limit, $since)
};

(:~
 : Retrieve the full bounce messages for the given campaign.
 : Note that this can return very large amounts of data depending on how large the campaign was
 : and how much cruft the bounce provider returned.
 : Also, message over 30 days old are subject to being removed string date date/time the
 : bounce was received and processed string email the email address that bounced string message
 : the entire bounce message received
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignbouncemessages.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 25, upper limit set at 50
 : @param $since optional pull only messages since this time - use YYYY-MM-DD format in &lt;strong&gt;GMT&lt;/strong&gt; (we only store the date, not the time)
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignBounceMessages($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignBounceMessages", ($apikey, $cid, $start, $limit, $since))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignEcommOrders-6'&gt;campaignEcommOrders&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 500
 : @param $since optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignEcommOrders($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  mailchimp:campaignEcommOrders($mailchimp:endpoint, $apikey, $cid, $start, $limit, $since)
};

(:~
 : Retrieve the Ecommerce Orders tracked by campaignEcommOrderAdd() string store_id the
 : store id generated by the plugin used to uniquely identify a store string store_name the
 : store name collected by the plugin - often the domain name string order_id the internal order
 : id the store tracked this order by string email the email address that received this campaign
 : and is associated with this order double order_total the order total double tax_total the
 : total tax for the order (if collected) double ship_total the shipping total for the order
 : (if collected) string order_date the date the order was tracked - from the store if
 : possible, otherwise the GMT time we recieved it array lines containing detail of the
 : order - product, category, quantity, item cost
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignecommorders.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to pull bounces for (can be gathered using campaigns())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 500
 : @param $since optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignEcommOrders($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignEcommOrders", ($apikey, $cid, $start, $limit, $since))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignShareReport-4'&gt;campaignShareReport&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to share a report for (can be gathered using campaigns())
 : @param $optss optional various parameters which can be used to configure the shared report
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignShareReport($apikey as xs:string, $cid as xs:string, $opts as element(array)){
  mailchimp:campaignShareReport($mailchimp:endpoint, $apikey, $cid, $opts)
};

(:~
 : Get the URL to a customized &amp;lt;a href="http://eepurl.com/gKmL" target="_blank"&amp;gt;VIP Report&amp;lt;/a&amp;gt;
 : for the specified campaign and optionally send an email to someone with links to it.
 : Note subsequent calls will overwrite anything already set for the same campign (eg, the
 : password) string header_type optional - "text" or "image', defaults to "text' string header_data
 : optional - if "header_type" is text, the text to display.
 : if "header_type" is "image" a valid URL to an image file.
 : Note that images will be resized to be no more than 500x150.
 : Defaults to the Accounts Company Name.
 : boolean secure optional - whether to require a password for the shared report.
 : defaults to "true" string password optional - if secure is true and a password is not
 : included, we will generate one.
 : It is always returned.
 : string to_email optional - optional, email address to share the report with - no value
 : means an email will not be sent array theme optional - an array containing either 3
 : or 6 character color code values for: "bg_color", "header_color", "current_tab", "current_tab_text",
 : "normal_tab", "normal_tab_text", "hover_tab", "hover_tab_text" string css_url optional -
 : a link to an external CSS file to be included after our default CSS (http://vip-reports.net/css/vip.css) &amp;lt;strong&amp;gt;only
 : if&amp;lt;/strong&amp;gt; loaded via the "secure_url" - max 255 bytes
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignsharereport.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to share a report for (can be gathered using campaigns())
 : @param $optss optional various parameters which can be used to configure the shared report
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignShareReport($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $opts as element(array)){
  xmlrpc:invoke($endpoint-url, "campaignShareReport", ($apikey, $cid, $opts))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignContent-4'&gt;campaignContent&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to get content for (can be gathered using campaigns())
 : @param $for_archiveve optional controls whether we return the Archive version (true) or the Raw version (false), defaults to true
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignContent($apikey as xs:string, $cid as xs:string, $for_archive as xs:boolean){
  mailchimp:campaignContent($mailchimp:endpoint, $apikey, $cid, $for_archive)
};

(:~
 : Get the content (both html and text) for a campaign either as it would appear in the
 : campaign archive or as the raw, original content
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigncontent.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to get content for (can be gathered using campaigns())
 : @param $for_archiveve optional controls whether we return the Archive version (true) or the Raw version (false), defaults to true
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignContent($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $for_archive as xs:boolean){
  xmlrpc:invoke($endpoint-url, "campaignContent", ($apikey, $cid, $for_archive))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignTemplateContent-3'&gt;campaignTemplateContent&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to get content for (can be gathered using campaigns())
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignTemplateContent($apikey as xs:string, $cid as xs:string){
  mailchimp:campaignTemplateContent($mailchimp:endpoint, $apikey, $cid)
};

(:~
 : Get the HTML template content sections for a campaign.
 : Note that this &amp;lt;strong&amp;gt;will&amp;lt;/strong&amp;gt; return very jagged, non-standard results
 : based on the template a campaign is using.
 : You only want to use this if you want to allow editing template sections in your applicaton.
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaigntemplatecontent.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to get content for (can be gathered using campaigns())
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignTemplateContent($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignTemplateContent", ($apikey, $cid))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignOpenedAIM-5'&gt;campaignOpenedAIM&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to get opens for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignOpenedAIM($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignOpenedAIM($mailchimp:endpoint, $apikey, $cid, $start, $limit)
};

(:~
 : Retrieve the list of email addresses that opened a given campaign with how many times they
 : opened - note: this AIM function is free and does not actually require the AIM module to
 : be installed string email Email address that opened the campaign int open_count Total number
 : of times the campaign was opened by this email address
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignopenedaim.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to get opens for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignOpenedAIM($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignOpenedAIM", ($apikey, $cid, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignNotOpenedAIM-5'&gt;campaignNotOpenedAIM&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to get no opens for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignNotOpenedAIM($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignNotOpenedAIM($mailchimp:endpoint, $apikey, $cid, $start, $limit)
};

(:~
 : Retrieve the list of email addresses that did not open a given campaign string email Email
 : address that opened the campaign
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignnotopenedaim.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to get no opens for (can be gathered using campaigns())
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignNotOpenedAIM($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignNotOpenedAIM", ($apikey, $cid, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignClickDetailAIM-6'&gt;campaignClickDetailAIM&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to get click stats for (can be gathered using campaigns())
 : @param $url the URL of the link that was clicked on
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignClickDetailAIM($apikey as xs:string, $cid as xs:string, $url as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignClickDetailAIM($mailchimp:endpoint, $apikey, $cid, $url, $start, $limit)
};

(:~
 : Return the list of email addresses that clicked on a given url, and how many times they
 : clicked string email Email address that opened the campaign int clicks Total number of
 : times the URL was clicked on by this email address
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignclickdetailaim.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to get click stats for (can be gathered using campaigns())
 : @param $url the URL of the link that was clicked on
 : @param $startart optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limitmit optional for large data sets, the number of results to return - defaults to 1000, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignClickDetailAIM($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $url as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignClickDetailAIM", ($apikey, $cid, $url, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignEmailStatsAIM-4'&gt;campaignEmailStatsAIM&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to get stats for (can be gathered using campaigns())
 : @param $email_address an array of up to 50 email addresses to check OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns. For backwards compatibility, if a string is passed, it will be treated as an array with a single element (will not work with XML-RPC).
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignEmailStatsAIM($apikey as xs:string, $cid as xs:string, $email_address as element(array)){
  mailchimp:campaignEmailStatsAIM($mailchimp:endpoint, $apikey, $cid, $email_address)
};

(:~
 : Given a campaign and email address, return the entire click and open history with timestamps,
 : ordered by time string action The action taken (open or click) string timestamp Time the
 : action occurred string url For clicks, the URL that was clicked
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignemailstatsaim.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to get stats for (can be gathered using campaigns())
 : @param $email_address an array of up to 50 email addresses to check OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns. For backwards compatibility, if a string is passed, it will be treated as an array with a single element (will not work with XML-RPC).
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignEmailStatsAIM($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $email_address as element(array)){
  xmlrpc:invoke($endpoint-url, "campaignEmailStatsAIM", ($apikey, $cid, $email_address))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignEmailStatsAIMAll-5'&gt;campaignEmailStatsAIMAll&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $cid the campaign id to get stats for (can be gathered using campaigns())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 1000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignEmailStatsAIMAll($apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:campaignEmailStatsAIMAll($mailchimp:endpoint, $apikey, $cid, $start, $limit)
};

(:~
 : Given a campaign and correct paging limits, return the entire click and open history with
 : timestamps, ordered by time, for every user a campaign was delivered to.
 : string action The action taken (open or click) string timestamp Time the action occurred string
 : url For clicks, the URL that was clicked
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignemailstatsaimall.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $cid the campaign id to get stats for (can be gathered using campaigns())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 1000
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignEmailStatsAIMAll($endpoint-url as xs:string, $apikey as xs:string, $cid as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "campaignEmailStatsAIMAll", ($apikey, $cid, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignEcommOrderAdd-3'&gt;campaignEcommOrderAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $order an array of information pertaining to the order that has completed. Use the following keys:
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignEcommOrderAdd($apikey as xs:string, $order as element(array)){
  mailchimp:campaignEcommOrderAdd($mailchimp:endpoint, $apikey, $order)
};

(:~
 : Attach Ecommerce Order Information to a Campaign.
 : This will generall be used by ecommerce package plugins &amp;lt;a href="/plugins/ecomm360.phtml"&amp;gt;that we
 : provide&amp;lt;/a&amp;gt; or by 3rd part system developers.
 : string id the Order Id string campaign_id the Campaign Id to track this order with (see
 : the "mc_cid" query string variable a campaign passes) string email_id the Email Id of
 : the subscriber we should attach this order to (see the "mc_eid" query string variable a
 : campaign passes) double total The Order Total (ie, the full amount the customer ends up
 : paying) string order_date optional the date of the order - if this is not provided, we
 : will default the date to now double shipping optional the total paid for Shipping Fees
 : double tax optional the total tax paid string store_id a unique id for the store sending
 : the order in (20 bytes max) string store_name optional a "nice" name for the store -
 : typically the base web address (ie, "store.mailchimp.com").
 : We will automatically update this if it changes (based on store_id) string plugin_id the
 : MailChimp assigned Plugin Id.
 : Get yours by &amp;lt;a href="/register.php"&amp;gt;registering here&amp;lt;/a&amp;gt; array items the
 : individual line items for an order using these keys: &amp;lt;div style="padding-left:30px"&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td colspan=*&amp;gt;
 : int line_num optional the line number of the item on the order.
 : We will generate these if they are not passed int product_id the store's internal Id
 : for the product.
 : Lines that do no contain this will be skipped string product_name the product name for
 : the product_id associated with this item.
 : We will auto update these as they change (based on product_id) int category_id the store's
 : internal Id for the (main) category associated with this product.
 : Our testing has found this to be a "best guess" scenario string category_name the category
 : name for the category_id this product is in.
 : Our testing has found this to be a "best guess" scenario.
 : Our plugins walk the category heirarchy up and send "Root - SubCat1 - SubCat4", etc.
 : double qty the quantity of the item ordered double cost the cost of a single item (ie,
 : not the extended cost of the line) &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignecommorderadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $order an array of information pertaining to the order that has completed. Use the following keys:
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignEcommOrderAdd($endpoint-url as xs:string, $apikey as xs:string, $order as element(array)){
  xmlrpc:invoke($endpoint-url, "campaignEcommOrderAdd", ($apikey, $order))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='lists-5'&gt;lists&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $filters a hash of filters to apply to this query - all are optional:
 : @param $start optional - control paging of lists, start results at this list #, defaults to 1st page of data  (page 0)
 : @param $limit optional - control paging of lists, number of lists to return with each call, defaults to 25 (max=100)
 :
 : @return No description available    
 :)
declare sequential function mailchimp:lists($apikey as xs:string, $filters as element(array), $start as xs:integer, $limit as xs:integer){
  mailchimp:lists($mailchimp:endpoint, $apikey, $filters, $start, $limit)
};

(:~
 : Retrieve all of the lists defined for your user account string list_id optional - return
 : a single list using a known list_id.
 : Accepts multiples separated by commas when not using exact matching string list_name optional
 : - only lists that match this name string from_name optional - only lists that have a
 : default from name matching this string from_email optional - only lists that have a
 : default from email matching this string from_subject optional - only lists that have a
 : default from email matching this string created_before optional - only show lists that
 : were created before this date/time (in GMT) - format is YYYY-MM-DD HH:mm:ss (24hr) string
 : created_after optional - only show lists that were created since this date/time (in GMT)
 : - format is YYYY-MM-DD HH:mm:ss (24hr) boolean exact optional - flag for whether to
 : filter on exact values when filtering, or search within content for filter values -
 : defaults to true string id The list id for this list.
 : This will be used for all other list management functions.
 : int web_id The list id used in our web app, allows you to create a link directly to
 : it string name The name of the list.
 : string date_created The date that this list was created.
 : boolean email_type_option Whether or not the List supports multiple formats for emails or
 : just HTML boolean use_awesomebar Whether or not campaigns for this list use the Awesome Bar
 : in archives by default string default_from_name Default From Name for campaigns using this
 : list string default_from_email Default From Email for campaigns using this list string default_subject
 : Default Subject Line for campaigns using this list string default_language Default Language
 : for this list's forms int list_rating An auto-generated activity score for the list (0
 : - 5) array stats various stats and counts for the list int member_count The number of
 : active members in the given list.
 : int unsubscribe_count The number of members who have unsubscribed from the given list.
 : int cleaned_count The number of members cleaned from the given list.
 : int member_count_since_send The number of active members in the given list since the
 : last campaign was sent int unsubscribe_count_since_send The number of members who have
 : unsubscribed from the given list since the last campaign was sent int cleaned_count_since_send The
 : number of members cleaned from the given list since the last campaign was sent int campaign_count
 : The number of campaigns in any status that use this list int grouping_count The number of
 : Interest Groupings for this list int group_count The number of Interest Groups (regardless of
 : grouping) for this list int merge_var_count The number of merge vars for this list (not
 : including the required EMAIL one) int avg_sub_rate the average number of subscribe per
 : month for the list (empty value if we haven't calculated this yet) int avg_unsub_rate the
 : average number of unsubscribe per month for the list (empty value if we haven't calculated this
 : yet) int target_sub_rate the target subscription rate for the list to keep it growing (empty
 : value if we haven't calculated this yet) int open_rate the average open rate per campaign
 : for the list (empty value if we haven't calculated this yet) int click_rate the average click
 : rate per campaign for the list (empty value if we haven't calculated this yet) array modules
 : Any list specific modules installed for this list (example is SocialPro)
 :
 : @see http://apidocs.mailchimp.com/rtfm/lists.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $filters a hash of filters to apply to this query - all are optional:
 : @param $start optional - control paging of lists, start results at this list #, defaults to 1st page of data  (page 0)
 : @param $limit optional - control paging of lists, number of lists to return with each call, defaults to 25 (max=100)
 :
 : @return No description available
 :)
declare sequential function mailchimp:lists($endpoint-url as xs:string, $apikey as xs:string, $filters as element(array), $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "lists", ($apikey, $filters, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listMergeVars-3'&gt;listMergeVars&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listMergeVars($apikey as xs:string, $id as xs:string){
  mailchimp:listMergeVars($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Get the list of merge tags for a given list, including their name, tag, and required setting
 :
 : @see http://apidocs.mailchimp.com/rtfm/listmergevars.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listMergeVars($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listMergeVars", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listMergeVarAdd-6'&gt;listMergeVarAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $tag The merge tag to add, e.g. FNAME
 : @param $name The long description of the tag being added, used for user displays
 : @param $options optional Various options for this merge var. &lt;em&gt;note:&lt;/em&gt; for historical purposes this can also take a "boolean"
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listMergeVarAdd($apikey as xs:string, $id as xs:string, $tag as xs:string, $name as xs:string, $options as element(array)){
  mailchimp:listMergeVarAdd($mailchimp:endpoint, $apikey, $id, $tag, $name, $options)
};

(:~
 : Add a new merge tag to a given list string field_type optional one of: text, number, radio,
 : dropdown, date, address, phone, url, imageurl - defaults to text boolean req optional indicates
 : whether the field is required - defaults to false boolean public optional indicates whether
 : the field is displayed in public - defaults to true boolean show optional indicates whether
 : the field is displayed in the app's list member view - defaults to true string default_value optional
 : the default value for the field.
 : See listSubscribe() for formatting info.
 : Defaults to blank array choices optional kind of - an array of strings to use as the
 : choices for radio and dropdown type fields
 :
 : @see http://apidocs.mailchimp.com/rtfm/listmergevaradd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $tag The merge tag to add, e.g. FNAME
 : @param $name The long description of the tag being added, used for user displays
 : @param $options optional Various options for this merge var. &lt;em&gt;note:&lt;/em&gt; for historical purposes this can also take a "boolean"
 :
 : @return No description available
 :)
declare sequential function mailchimp:listMergeVarAdd($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $tag as xs:string, $name as xs:string, $options as element(array)){
  xmlrpc:invoke($endpoint-url, "listMergeVarAdd", ($apikey, $id, $tag, $name, $options))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listMergeVarUpdate-5'&gt;listMergeVarUpdate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $tag The merge tag to update
 : @param $options The options to change for a merge var. See listMergeVarAdd() for valid options
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listMergeVarUpdate($apikey as xs:string, $id as xs:string, $tag as xs:string, $options as element(array)){
  mailchimp:listMergeVarUpdate($mailchimp:endpoint, $apikey, $id, $tag, $options)
};

(:~
 : Update most parameters for a merge tag on a given list.
 : You cannot currently change the merge type
 :
 : @see http://apidocs.mailchimp.com/rtfm/listmergevarupdate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $tag The merge tag to update
 : @param $options The options to change for a merge var. See listMergeVarAdd() for valid options
 :
 : @return No description available
 :)
declare sequential function mailchimp:listMergeVarUpdate($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $tag as xs:string, $options as element(array)){
  xmlrpc:invoke($endpoint-url, "listMergeVarUpdate", ($apikey, $id, $tag, $options))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listMergeVarDel-4'&gt;listMergeVarDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $tag The merge tag to delete
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listMergeVarDel($apikey as xs:string, $id as xs:string, $tag as xs:string){
  mailchimp:listMergeVarDel($mailchimp:endpoint, $apikey, $id, $tag)
};

(:~
 : Delete a merge tag from a given list and all its members.
 : Seriously - the data is removed from all members as well! Note that on large lists this
 : method may seem a bit slower than calls you typically make.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listmergevardel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $tag The merge tag to delete
 :
 : @return No description available
 :)
declare sequential function mailchimp:listMergeVarDel($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $tag as xs:string){
  xmlrpc:invoke($endpoint-url, "listMergeVarDel", ($apikey, $id, $tag))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listInterestGroupings-3'&gt;listInterestGroupings&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listInterestGroupings($apikey as xs:string, $id as xs:string){
  mailchimp:listInterestGroupings($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Get the list of interest groupings for a given list, including the label, form information, and
 : included groups for each
 :
 : @see http://apidocs.mailchimp.com/rtfm/listinterestgroupings.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listInterestGroupings($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listInterestGroupings", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listInterestGroupAdd-5'&gt;listInterestGroupAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $group_name the interest group to add - group names must be unique within a grouping
 : @param $grouping_idouping_id The grouping to add the new group to - get using listInterestGrouping() . If not supplied, the first grouping on the list is used.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listInterestGroupAdd($apikey as xs:string, $id as xs:string, $group_name as xs:string, $grouping_id as xs:integer){
  mailchimp:listInterestGroupAdd($mailchimp:endpoint, $apikey, $id, $group_name, $grouping_id)
};

(:~
 : Add a single Interest Group - if interest groups for the List are not yet enabled, adding
 : the first group will automatically turn them on.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listinterestgroupadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $group_name the interest group to add - group names must be unique within a grouping
 : @param $grouping_idouping_id The grouping to add the new group to - get using listInterestGrouping() . If not supplied, the first grouping on the list is used.
 :
 : @return No description available
 :)
declare sequential function mailchimp:listInterestGroupAdd($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $group_name as xs:string, $grouping_id as xs:integer){
  xmlrpc:invoke($endpoint-url, "listInterestGroupAdd", ($apikey, $id, $group_name, $grouping_id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listInterestGroupDel-5'&gt;listInterestGroupDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $group_name the interest group to delete
 : @param $grouping_id The grouping to delete the group from - get using listInterestGrouping() . If not supplied, the first grouping on the list is used.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listInterestGroupDel($apikey as xs:string, $id as xs:string, $group_name as xs:string, $grouping_id as xs:integer){
  mailchimp:listInterestGroupDel($mailchimp:endpoint, $apikey, $id, $group_name, $grouping_id)
};

(:~
 : Delete a single Interest Group - if the last group for a list is deleted, this will also
 : turn groups for the list off.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listinterestgroupdel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $group_name the interest group to delete
 : @param $grouping_id The grouping to delete the group from - get using listInterestGrouping() . If not supplied, the first grouping on the list is used.
 :
 : @return No description available
 :)
declare sequential function mailchimp:listInterestGroupDel($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $group_name as xs:string, $grouping_id as xs:integer){
  xmlrpc:invoke($endpoint-url, "listInterestGroupDel", ($apikey, $id, $group_name, $grouping_id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listInterestGroupUpdate-6'&gt;listInterestGroupUpdate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $old_name the interest group name to be changed
 : @param $new_name the new interest group name to be set
 : @param $grouping_idouping_id The grouping to delete the group from - get using listInterestGrouping() . If not supplied, the first grouping on the list is used.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listInterestGroupUpdate($apikey as xs:string, $id as xs:string, $old_name as xs:string, $new_name as xs:string, $grouping_id as xs:integer){
  mailchimp:listInterestGroupUpdate($mailchimp:endpoint, $apikey, $id, $old_name, $new_name, $grouping_id)
};

(:~
 : Change the name of an Interest Group
 :
 : @see http://apidocs.mailchimp.com/rtfm/listinterestgroupupdate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $old_name the interest group name to be changed
 : @param $new_name the new interest group name to be set
 : @param $grouping_idouping_id The grouping to delete the group from - get using listInterestGrouping() . If not supplied, the first grouping on the list is used.
 :
 : @return No description available
 :)
declare sequential function mailchimp:listInterestGroupUpdate($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $old_name as xs:string, $new_name as xs:string, $grouping_id as xs:integer){
  xmlrpc:invoke($endpoint-url, "listInterestGroupUpdate", ($apikey, $id, $old_name, $new_name, $grouping_id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listInterestGroupingAdd-6'&gt;listInterestGroupingAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $name the interest grouping to add - grouping names must be unique
 : @param $type The type of the grouping to add - one of "checkboxes", "hidden", "dropdown", "radio"
 : @param $groups The lists of initial group names to be added - at least 1 is required and the names must be unique within a grouping. If the number takes you over the 60 group limit, an error will be thrown.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listInterestGroupingAdd($apikey as xs:string, $id as xs:string, $name as xs:string, $type as xs:string, $groups as element(array)){
  mailchimp:listInterestGroupingAdd($mailchimp:endpoint, $apikey, $id, $name, $type, $groups)
};

(:~
 : Add a new Interest Grouping - if interest groups for the List are not yet enabled, adding
 : the first grouping will automatically turn them on.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listinterestgroupingadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $name the interest grouping to add - grouping names must be unique
 : @param $type The type of the grouping to add - one of "checkboxes", "hidden", "dropdown", "radio"
 : @param $groups The lists of initial group names to be added - at least 1 is required and the names must be unique within a grouping. If the number takes you over the 60 group limit, an error will be thrown.
 :
 : @return No description available
 :)
declare sequential function mailchimp:listInterestGroupingAdd($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $name as xs:string, $type as xs:string, $groups as element(array)){
  xmlrpc:invoke($endpoint-url, "listInterestGroupingAdd", ($apikey, $id, $name, $type, $groups))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listInterestGroupingUpdate-5'&gt;listInterestGroupingUpdate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $grouping_id the interest grouping id - get from listInterestGroupings()
 : @param $name The name of the field to update - either "name" or "type". Groups with in the grouping should be manipulated using the standard listInterestGroup* methods
 : @param $value The new value of the field. Grouping names must be unique - only "hidden" and "checkboxes" grouping types can be converted between each other.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listInterestGroupingUpdate($apikey as xs:string, $grouping_id as xs:integer, $name as xs:string, $value as xs:string){
  mailchimp:listInterestGroupingUpdate($mailchimp:endpoint, $apikey, $grouping_id, $name, $value)
};

(:~
 : Update an existing Interest Grouping
 :
 : @see http://apidocs.mailchimp.com/rtfm/listinterestgroupingupdate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $grouping_id the interest grouping id - get from listInterestGroupings()
 : @param $name The name of the field to update - either "name" or "type". Groups with in the grouping should be manipulated using the standard listInterestGroup* methods
 : @param $value The new value of the field. Grouping names must be unique - only "hidden" and "checkboxes" grouping types can be converted between each other.
 :
 : @return No description available
 :)
declare sequential function mailchimp:listInterestGroupingUpdate($endpoint-url as xs:string, $apikey as xs:string, $grouping_id as xs:integer, $name as xs:string, $value as xs:string){
  xmlrpc:invoke($endpoint-url, "listInterestGroupingUpdate", ($apikey, $grouping_id, $name, $value))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listInterestGroupingDel-3'&gt;listInterestGroupingDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $grouping_id the interest grouping id - get from listInterestGroupings()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listInterestGroupingDel($apikey as xs:string, $grouping_id as xs:integer){
  mailchimp:listInterestGroupingDel($mailchimp:endpoint, $apikey, $grouping_id)
};

(:~
 : Delete an existing Interest Grouping - this will permanently delete all contained interest
 : groups and will remove those selections from all list members
 :
 : @see http://apidocs.mailchimp.com/rtfm/listinterestgroupingdel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $grouping_id the interest grouping id - get from listInterestGroupings()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listInterestGroupingDel($endpoint-url as xs:string, $apikey as xs:string, $grouping_id as xs:integer){
  xmlrpc:invoke($endpoint-url, "listInterestGroupingDel", ($apikey, $grouping_id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listWebhooks-3'&gt;listWebhooks&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listWebhooks($apikey as xs:string, $id as xs:string){
  mailchimp:listWebhooks($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Return the Webhooks configured for the given list
 :
 : @see http://apidocs.mailchimp.com/rtfm/listwebhooks.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listWebhooks($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listWebhooks", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listWebhookAdd-6'&gt;listWebhookAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $url a valid URL for the Webhook - it will be validated. note that a url may only exist on a list once.
 : @param $actions optional a hash of actions to fire this Webhook for
 : @param $sources optional a hash of sources to fire this Webhook for
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listWebhookAdd($apikey as xs:string, $id as xs:string, $url as xs:string, $actions as element(array), $sources as element(array)){
  mailchimp:listWebhookAdd($mailchimp:endpoint, $apikey, $id, $url, $actions, $sources)
};

(:~
 : Add a new Webhook URL for the given list boolean subscribe optional as subscribes occur,
 : defaults to true boolean unsubscribe optional as subscribes occur, defaults to true boolean
 : profile optional as profile updates occur, defaults to true boolean cleaned optional as
 : emails are cleaned from the list, defaults to true boolean upemail optional when subscribers
 : change their email address, defaults to true boolean user optional user/subscriber initiated
 : actions, defaults to true boolean admin optional admin actions in our web app, defaults to
 : true boolean api optional actions that happen via API calls, defaults to false
 :
 : @see http://apidocs.mailchimp.com/rtfm/listwebhookadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $url a valid URL for the Webhook - it will be validated. note that a url may only exist on a list once.
 : @param $actions optional a hash of actions to fire this Webhook for
 : @param $sources optional a hash of sources to fire this Webhook for
 :
 : @return No description available
 :)
declare sequential function mailchimp:listWebhookAdd($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $url as xs:string, $actions as element(array), $sources as element(array)){
  xmlrpc:invoke($endpoint-url, "listWebhookAdd", ($apikey, $id, $url, $actions, $sources))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listWebhookDel-4'&gt;listWebhookDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $url the URL of a Webhook on this list
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listWebhookDel($apikey as xs:string, $id as xs:string, $url as xs:string){
  mailchimp:listWebhookDel($mailchimp:endpoint, $apikey, $id, $url)
};

(:~
 : Delete an existing Webhook URL from a given list
 :
 : @see http://apidocs.mailchimp.com/rtfm/listwebhookdel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $url the URL of a Webhook on this list
 :
 : @return No description available
 :)
declare sequential function mailchimp:listWebhookDel($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $url as xs:string){
  xmlrpc:invoke($endpoint-url, "listWebhookDel", ($apikey, $id, $url))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listStaticSegments-3'&gt;listStaticSegments&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listStaticSegments($apikey as xs:string, $id as xs:string){
  mailchimp:listStaticSegments($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Retrieve all of the Static Segments for a list.
 :
 : @see http://apidocs.mailchimp.com/rtfm/liststaticsegments.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listStaticSegments($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listStaticSegments", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listStaticSegmentAdd-4'&gt;listStaticSegmentAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $name a unique name per list for the segment - 50 byte maximum length, anything longer will throw an error
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listStaticSegmentAdd($apikey as xs:string, $id as xs:string, $name as xs:string){
  mailchimp:listStaticSegmentAdd($mailchimp:endpoint, $apikey, $id, $name)
};

(:~
 : Save a segment against a list for later use.
 : There is no limit to the number of segments which can be saved.
 : Static Segments &amp;lt;strong&amp;gt;are not&amp;lt;/strong&amp;gt; tied to any merge data, interest groups,
 : etc.
 : They essentially allow you to configure an unlimited number of custom segments which will
 : have standard performance.
 : When using proper segments, Static Segments are one of the available options for segmentation
 : just as if you used a merge var (and they can be used with other segmentation options), though
 : performance may degrade at that point.
 :
 : @see http://apidocs.mailchimp.com/rtfm/liststaticsegmentadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $name a unique name per list for the segment - 50 byte maximum length, anything longer will throw an error
 :
 : @return No description available
 :)
declare sequential function mailchimp:listStaticSegmentAdd($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $name as xs:string){
  xmlrpc:invoke($endpoint-url, "listStaticSegmentAdd", ($apikey, $id, $name))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listStaticSegmentReset-4'&gt;listStaticSegmentReset&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to reset  - get from listStaticSegments()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listStaticSegmentReset($apikey as xs:string, $id as xs:string, $seg_id as xs:integer){
  mailchimp:listStaticSegmentReset($mailchimp:endpoint, $apikey, $id, $seg_id)
};

(:~
 : Resets a static segment - removes &amp;lt;strong&amp;gt;all&amp;lt;/strong&amp;gt; members from the static
 : segment.
 : Note: does not actually affect list member data
 :
 : @see http://apidocs.mailchimp.com/rtfm/liststaticsegmentreset.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to reset  - get from listStaticSegments()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listStaticSegmentReset($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $seg_id as xs:integer){
  xmlrpc:invoke($endpoint-url, "listStaticSegmentReset", ($apikey, $id, $seg_id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listStaticSegmentDel-4'&gt;listStaticSegmentDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to delete - get from listStaticSegments()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listStaticSegmentDel($apikey as xs:string, $id as xs:string, $seg_id as xs:integer){
  mailchimp:listStaticSegmentDel($mailchimp:endpoint, $apikey, $id, $seg_id)
};

(:~
 : Delete a static segment.
 : Note that this will, of course, remove any member affiliations with the segment
 :
 : @see http://apidocs.mailchimp.com/rtfm/liststaticsegmentdel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to delete - get from listStaticSegments()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listStaticSegmentDel($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $seg_id as xs:integer){
  xmlrpc:invoke($endpoint-url, "listStaticSegmentDel", ($apikey, $id, $seg_id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listStaticSegmentMembersAdd-5'&gt;listStaticSegmentMembersAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to modify - get from listStaticSegments()
 : @param $batch an array of email addresses and/or unique_ids to add to the segment
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listStaticSegmentMembersAdd($apikey as xs:string, $id as xs:string, $seg_id as xs:integer, $batch as element(array)){
  mailchimp:listStaticSegmentMembersAdd($mailchimp:endpoint, $apikey, $id, $seg_id, $batch)
};

(:~
 : Add list members to a static segment.
 : It is suggested that you limit batch size to no more than 10,000 addresses per call.
 : Email addresses must exist on the list in order to be included - this &amp;lt;strong&amp;gt;will not&amp;lt;/strong&amp;gt;
 : subscribe them to the list!
 :
 : @see http://apidocs.mailchimp.com/rtfm/liststaticsegmentmembersadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to modify - get from listStaticSegments()
 : @param $batch an array of email addresses and/or unique_ids to add to the segment
 :
 : @return No description available
 :)
declare sequential function mailchimp:listStaticSegmentMembersAdd($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $seg_id as xs:integer, $batch as element(array)){
  xmlrpc:invoke($endpoint-url, "listStaticSegmentMembersAdd", ($apikey, $id, $seg_id, $batch))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listStaticSegmentMembersDel-5'&gt;listStaticSegmentMembersDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to delete - get from listStaticSegments()
 : @param $batch an array of email addresses and/or unique_ids to remove from the segment
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listStaticSegmentMembersDel($apikey as xs:string, $id as xs:string, $seg_id as xs:integer, $batch as element(array)){
  mailchimp:listStaticSegmentMembersDel($mailchimp:endpoint, $apikey, $id, $seg_id, $batch)
};

(:~
 : Remove list members from a static segment.
 : It is suggested that you limit batch size to no more than 10,000 addresses per call.
 : Email addresses must exist on the list in order to be removed - this &amp;lt;strong&amp;gt;will not&amp;lt;/strong&amp;gt;
 : unsubscribe them from the list!
 :
 : @see http://apidocs.mailchimp.com/rtfm/liststaticsegmentmembersdel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $seg_id the id of the static segment to delete - get from listStaticSegments()
 : @param $batch an array of email addresses and/or unique_ids to remove from the segment
 :
 : @return No description available
 :)
declare sequential function mailchimp:listStaticSegmentMembersDel($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $seg_id as xs:integer, $batch as element(array)){
  xmlrpc:invoke($endpoint-url, "listStaticSegmentMembersDel", ($apikey, $id, $seg_id, $batch))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listSubscribe-10'&gt;listSubscribe&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address the email address to subscribe
 : @param $merge_vars optional merges for the email (FNAME, LNAME, etc.) (see examples below for handling "blank" arrays). Note that a merge field can only hold up to 255 bytes. Also, there are a few "special" keys:
 : @param $email_type optional email type preference for the email (html, text, or mobile defaults to html)
 : @param $double_optin optional flag to control whether a double opt-in confirmation message is sent, defaults to true. &lt;em&gt;Abusing this may cause your account to be suspended.&lt;/em&gt;
 : @param $update_existing optional flag to control whether a existing subscribers should be updated instead of throwing and error, defaults to false
 : @param $replace_interests optional flag to determine whether we replace the interest groups with the groups provided, or we add the provided groups to the member's interest groups (optional, defaults to true)
 : @param $send_welcome optional if your double_optin is false and this is true, we will send your lists Welcome Email if this subscribe succeeds - this will *not* fire if we end up updating an existing subscriber. If double_optin is true, this has no effect. defaults to false.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listSubscribe($apikey as xs:string, $id as xs:string, $email_address as xs:string, $merge_vars as element(array), $email_type as xs:string, $double_optin as xs:boolean, $update_existing as xs:boolean, $replace_interests as xs:boolean, $send_welcome as xs:boolean){
  mailchimp:listSubscribe($mailchimp:endpoint, $apikey, $id, $email_address, $merge_vars, $email_type, $double_optin, $update_existing, $replace_interests, $send_welcome)
};

(:~
 : Subscribe the provided email to a list.
 : By default this sends a confirmation email - you will not see new members until the link
 : contained in it is clicked! string EMAIL set this to change the email address.
 : This is only respected on calls using update_existing or when passed to listUpdateMember() array
 : GROUPINGS Set Interest Groups by Grouping.
 : Each element in this array should be an array containing the "groups" parameter which contains
 : a comma delimited list of Interest Groups to add.
 : Commas in Interest Group names should be escaped with a backslash.
 : ie, "," =&amp;gt; "\," and either an "id" or "name" parameter to specify the Grouping -
 : get from listInterestGroupings() string OPTIN_IP Set the Opt-in IP field.
 : &amp;lt;em&amp;gt;Abusing this may cause your account to be suspended.&amp;lt;/em&amp;gt; We do validate this
 : and it must not be a private IP address.
 : string OPTIN_TIME Set the Opt-in Time field.
 : &amp;lt;em&amp;gt;Abusing this may cause your account to be suspended.&amp;lt;/em&amp;gt; We do validate this
 : and it must be a valid date.
 : Use YYYY-MM-DD HH:ii:ss to be safe.
 : Generally, though, anything strtotime() understands we'll understand - &amp;lt;a href="http://us2.php.net/strtotime" target="_blank"&amp;gt;http://us2.php.net/strtotime&amp;lt;/a&amp;gt;
 : array MC_LOCATION Set the members geographic location.
 : By default if this merge field exists, we'll update using the optin_ip if it exists.
 : If the array contains LATITUDE and LONGITUDE keys, they will be used.
 : NOTE - this will slow down each subscribe call a bit, especially for lat/lng pairs in
 : sparsely populated areas.
 : Currently our automated background processes can and will overwrite this based on opens
 : and clicks.
 : &amp;lt;strong&amp;gt;Handling Field Data Types&amp;lt;/strong&amp;gt; - most fields you can just pass
 : a string and all is well.
 : For some, though, that is not the case...
 : Field values should be formatted as follows: string address For the string version of
 : an Address, the fields should be delimited by &amp;lt;strong&amp;gt;2&amp;lt;/strong&amp;gt; spaces.
 : Address 2 can be skipped.
 : The Country should be a 2 character ISO-3166-1 code and will default to your default country
 : if not set array address For the array version of an Address, the requirements for Address
 : 2 and Country are the same as with the string version.
 : Then simply pass us an array with the keys &amp;lt;strong&amp;gt;addr1&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;addr2&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;city&amp;lt;/strong&amp;gt;,
 : &amp;lt;strong&amp;gt;state&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;zip&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;country&amp;lt;/strong&amp;gt; and
 : appropriate values for each string date use YYYY-MM-DD to be safe.
 : Generally, though, anything strtotime() understands we'll understand - &amp;lt;a href="http://us2.php.net/strtotime" target="_blank"&amp;gt;http://us2.php.net/strtotime&amp;lt;/a&amp;gt;
 : string dropdown can be a normal string - we &amp;lt;em&amp;gt;will&amp;lt;/em&amp;gt; validate that the
 : value is a valid option string image must be a valid, existing url.
 : we &amp;lt;em&amp;gt;will&amp;lt;/em&amp;gt; check its existence string multi_choice can be a normal string
 : - we &amp;lt;em&amp;gt;will&amp;lt;/em&amp;gt; validate that the value is a valid option double number pass
 : in a valid number - anything else will turn in to zero (0).
 : Note, this will be rounded to 2 decimal places string phone If your account has the US
 : Phone numbers option set, this &amp;lt;em&amp;gt;must&amp;lt;/em&amp;gt; be in the form of NPA-NXX-LINE (404-555-1212).
 : If not, we assume an International number and will simply set the field with what ever
 : number is passed in.
 : string website This is a standard string, but we &amp;lt;em&amp;gt;will&amp;lt;/em&amp;gt; verify that
 : it looks like a valid URL
 :
 : @see http://apidocs.mailchimp.com/rtfm/listsubscribe.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address the email address to subscribe
 : @param $merge_vars optional merges for the email (FNAME, LNAME, etc.) (see examples below for handling "blank" arrays). Note that a merge field can only hold up to 255 bytes. Also, there are a few "special" keys:
 : @param $email_type optional email type preference for the email (html, text, or mobile defaults to html)
 : @param $double_optin optional flag to control whether a double opt-in confirmation message is sent, defaults to true. &lt;em&gt;Abusing this may cause your account to be suspended.&lt;/em&gt;
 : @param $update_existing optional flag to control whether a existing subscribers should be updated instead of throwing and error, defaults to false
 : @param $replace_interests optional flag to determine whether we replace the interest groups with the groups provided, or we add the provided groups to the member's interest groups (optional, defaults to true)
 : @param $send_welcome optional if your double_optin is false and this is true, we will send your lists Welcome Email if this subscribe succeeds - this will *not* fire if we end up updating an existing subscriber. If double_optin is true, this has no effect. defaults to false.
 :
 : @return No description available
 :)
declare sequential function mailchimp:listSubscribe($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $email_address as xs:string, $merge_vars as element(array), $email_type as xs:string, $double_optin as xs:boolean, $update_existing as xs:boolean, $replace_interests as xs:boolean, $send_welcome as xs:boolean){
  xmlrpc:invoke($endpoint-url, "listSubscribe", ($apikey, $id, $email_address, $merge_vars, $email_type, $double_optin, $update_existing, $replace_interests, $send_welcome))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listUnsubscribe-7'&gt;listUnsubscribe&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address the email address to unsubscribe  OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns
 : @param $delete_member flag to completely delete the member from your list instead of just unsubscribing, default to false
 : @param $send_goodbye flag to send the goodbye email to the email address, defaults to true
 : @param $send_notify flag to send the unsubscribe notification email to the address defined in the list email notification settings, defaults to true
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listUnsubscribe($apikey as xs:string, $id as xs:string, $email_address as xs:string, $delete_member as xs:boolean, $send_goodbye as xs:boolean, $send_notify as xs:boolean){
  mailchimp:listUnsubscribe($mailchimp:endpoint, $apikey, $id, $email_address, $delete_member, $send_goodbye, $send_notify)
};

(:~
 : Unsubscribe the given email address from the list
 :
 : @see http://apidocs.mailchimp.com/rtfm/listunsubscribe.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address the email address to unsubscribe  OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns
 : @param $delete_member flag to completely delete the member from your list instead of just unsubscribing, default to false
 : @param $send_goodbye flag to send the goodbye email to the email address, defaults to true
 : @param $send_notify flag to send the unsubscribe notification email to the address defined in the list email notification settings, defaults to true
 :
 : @return No description available
 :)
declare sequential function mailchimp:listUnsubscribe($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $email_address as xs:string, $delete_member as xs:boolean, $send_goodbye as xs:boolean, $send_notify as xs:boolean){
  xmlrpc:invoke($endpoint-url, "listUnsubscribe", ($apikey, $id, $email_address, $delete_member, $send_goodbye, $send_notify))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listUpdateMember-7'&gt;listUpdateMember&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address the current email address of the member to update OR the "id" for the member returned from listMemberInfo, Webhooks, and Campaigns
 : @param $merge_vars array of new field values to update the member with.  See merge_vars in listSubscribe() for details.
 : @param $email_type change the email type preference for the member ("html", "text", or "mobile").  Leave blank to keep the existing preference (optional)
 : @param $replace_interests flag to determine whether we replace the interest groups with the updated groups provided, or we add the provided groups to the member's interest groups (optional, defaults to true)
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listUpdateMember($apikey as xs:string, $id as xs:string, $email_address as xs:string, $merge_vars as element(array), $email_type as xs:string, $replace_interests as xs:boolean){
  mailchimp:listUpdateMember($mailchimp:endpoint, $apikey, $id, $email_address, $merge_vars, $email_type, $replace_interests)
};

(:~
 : Edit the email address, merge fields, and interest groups for a list member.
 : If you are doing a batch update on lots of users, consider using listBatchSubscribe() with
 : the update_existing and possible replace_interests parameter.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listupdatemember.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address the current email address of the member to update OR the "id" for the member returned from listMemberInfo, Webhooks, and Campaigns
 : @param $merge_vars array of new field values to update the member with.  See merge_vars in listSubscribe() for details.
 : @param $email_type change the email type preference for the member ("html", "text", or "mobile").  Leave blank to keep the existing preference (optional)
 : @param $replace_interests flag to determine whether we replace the interest groups with the updated groups provided, or we add the provided groups to the member's interest groups (optional, defaults to true)
 :
 : @return No description available
 :)
declare sequential function mailchimp:listUpdateMember($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $email_address as xs:string, $merge_vars as element(array), $email_type as xs:string, $replace_interests as xs:boolean){
  xmlrpc:invoke($endpoint-url, "listUpdateMember", ($apikey, $id, $email_address, $merge_vars, $email_type, $replace_interests))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listBatchSubscribe-7'&gt;listBatchSubscribe&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $batch an array of structs for each address to import with two special keys: "EMAIL" for the email address, and "EMAIL_TYPE" for the email type option (html, text, or mobile)
 : @param $double_optin flag to control whether to send an opt-in confirmation email - defaults to true
 : @param $update_existing flag to control whether to update members that are already subscribed to the list or to return an error, defaults to false (return error)
 : @param $replace_interests flag to determine whether we replace the interest groups with the updated groups provided, or we add the provided groups to the member's interest groups (optional, defaults to true)
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listBatchSubscribe($apikey as xs:string, $id as xs:string, $batch as element(array), $double_optin as xs:boolean, $update_existing as xs:boolean, $replace_interests as xs:boolean){
  mailchimp:listBatchSubscribe($mailchimp:endpoint, $apikey, $id, $batch, $double_optin, $update_existing, $replace_interests)
};

(:~
 : Subscribe a batch of email addresses to a list at once.
 : If you are using a serialized version of the API, we strongly suggest that you only run
 : this method as a POST request, and &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; a GET request.
 : Maximum batch sizes vary based on the amount of data in each record, though you should cap
 : them at 5k - 10k records, depending on your experience.
 : These calls are also long, so be sure you increase your timeout values.
 : string code the error code string message the full error message string email the email
 : address being processed
 :
 : @see http://apidocs.mailchimp.com/rtfm/listbatchsubscribe.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $batch an array of structs for each address to import with two special keys: "EMAIL" for the email address, and "EMAIL_TYPE" for the email type option (html, text, or mobile)
 : @param $double_optin flag to control whether to send an opt-in confirmation email - defaults to true
 : @param $update_existing flag to control whether to update members that are already subscribed to the list or to return an error, defaults to false (return error)
 : @param $replace_interests flag to determine whether we replace the interest groups with the updated groups provided, or we add the provided groups to the member's interest groups (optional, defaults to true)
 :
 : @return No description available
 :)
declare sequential function mailchimp:listBatchSubscribe($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $batch as element(array), $double_optin as xs:boolean, $update_existing as xs:boolean, $replace_interests as xs:boolean){
  xmlrpc:invoke($endpoint-url, "listBatchSubscribe", ($apikey, $id, $batch, $double_optin, $update_existing, $replace_interests))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listBatchUnsubscribe-7'&gt;listBatchUnsubscribe&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $emails array of email addresses to unsubscribe
 : @param $delete_member flag to completely delete the member from your list instead of just unsubscribing, default to false
 : @param $send_goodbye flag to send the goodbye email to the email addresses, defaults to true
 : @param $send_notify flag to send the unsubscribe notification email to the address defined in the list email notification settings, defaults to false
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listBatchUnsubscribe($apikey as xs:string, $id as xs:string, $emails as element(array), $delete_member as xs:boolean, $send_goodbye as xs:boolean, $send_notify as xs:boolean){
  mailchimp:listBatchUnsubscribe($mailchimp:endpoint, $apikey, $id, $emails, $delete_member, $send_goodbye, $send_notify)
};

(:~
 : Unsubscribe a batch of email addresses to a list
 :
 : @see http://apidocs.mailchimp.com/rtfm/listbatchunsubscribe.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $emails array of email addresses to unsubscribe
 : @param $delete_member flag to completely delete the member from your list instead of just unsubscribing, default to false
 : @param $send_goodbye flag to send the goodbye email to the email addresses, defaults to true
 : @param $send_notify flag to send the unsubscribe notification email to the address defined in the list email notification settings, defaults to false
 :
 : @return No description available
 :)
declare sequential function mailchimp:listBatchUnsubscribe($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $emails as element(array), $delete_member as xs:boolean, $send_goodbye as xs:boolean, $send_notify as xs:boolean){
  xmlrpc:invoke($endpoint-url, "listBatchUnsubscribe", ($apikey, $id, $emails, $delete_member, $send_goodbye, $send_notify))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listMembers-7'&gt;listMembers&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $status the status to get members for - one of(subscribed, unsubscribed, &lt;a target="_blank" href="http://eepurl.com/dwk1"&gt;cleaned&lt;/a&gt;, updated), defaults to subscribed
 : @param $since optional pull all members whose status (subscribed/unsubscribed/cleaned) has changed or whose profile (updated) has changed since this date/time (in GMT) - format is YYYY-MM-DD HH:mm:ss (24hr)
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 15000
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listMembers($apikey as xs:string, $id as xs:string, $status as xs:string, $since as xs:string, $start as xs:integer, $limit as xs:integer){
  mailchimp:listMembers($mailchimp:endpoint, $apikey, $id, $status, $since, $start, $limit)
};

(:~
 : Get all of the list members for a list that are of a particular status.
 : Are you trying to get a dump including lots of merge data or specific members of a
 : list? If so, checkout the &amp;lt;a href="/api/export"&amp;gt;Export API&amp;lt;/a&amp;gt; string email
 : Member email address date timestamp timestamp of their associated status date (subscribed, unsubscribed,
 : cleaned, or updated) in GMT string reason For unsubscribes only - the reason collected for
 : the unsubscribe.
 : If populated, one of 'NORMAL','NOSIGNUP','INAPPROPRIATE','SPAM','OTHER' string reason_text For
 : unsubscribes only - if the reason is OTHER, the text entered.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listmembers.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $status the status to get members for - one of(subscribed, unsubscribed, &lt;a target="_blank" href="http://eepurl.com/dwk1"&gt;cleaned&lt;/a&gt;, updated), defaults to subscribed
 : @param $since optional pull all members whose status (subscribed/unsubscribed/cleaned) has changed or whose profile (updated) has changed since this date/time (in GMT) - format is YYYY-MM-DD HH:mm:ss (24hr)
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 15000
 :
 : @return No description available
 :)
declare sequential function mailchimp:listMembers($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $status as xs:string, $since as xs:string, $start as xs:integer, $limit as xs:integer){
  xmlrpc:invoke($endpoint-url, "listMembers", ($apikey, $id, $status, $since, $start, $limit))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listMemberInfo-4'&gt;listMemberInfo&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address an array of up to 50 email addresses to get information for OR the "id"(s) for the member returned from listMembers, Webhooks, and Campaigns. For backwards compatibility, if a string is passed, it will be treated as an array with a single element (will not work with XML-RPC).
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listMemberInfo($apikey as xs:string, $id as xs:string, $email_address as element(array)){
  mailchimp:listMemberInfo($mailchimp:endpoint, $apikey, $id, $email_address)
};

(:~
 : Get all the information for particular members of a list string id The unique id for
 : this email address on an account string email The email address associated with this record
 : string email_type The type of emails this customer asked to get: html, text, or mobile array
 : merges An associative array of all the merge tags and the data for those tags for this
 : email address.
 : &amp;lt;em&amp;gt;Note&amp;lt;/em&amp;gt;: Interest Groups are returned as comma delimited strings -
 : if a group name contains a comma, it will be escaped with a backslash.
 : ie, "," =&amp;gt; "\,".
 : Groupings will be returned with their "id" and "name" as well as a "groups" field formatted
 : just like Interest Groups string status The subscription status for this email address, either
 : pending, subscribed, unsubscribed, or cleaned string ip_opt IP Address this address opted
 : in from.
 : string ip_signup IP Address this address signed up from.
 : int member_rating the rating of the subscriber.
 : This will be 1 - 5 as described &amp;lt;a href="http://eepurl.com/f-2P" target="_blank"&amp;gt;here&amp;lt;/a&amp;gt; string
 : campaign_id If the user is unsubscribed and they unsubscribed from a specific campaign, that
 : campaign_id will be listed, otherwise this is not returned.
 : array lists An associative array of the other lists this member belongs to - the key
 : is the list id and the value is their status in that list.
 : date timestamp The time this email address was added to the list date info_changed The
 : last time this record was changed.
 : If the record is old enough, this may be blank.
 : int web_id The Member id used in our web app, allows you to create a link directly to
 : it array geo the geographic information if we have it.
 : includes keys for 'latitude', 'longitude', 'gmtoff' (GMT offset), 'dstoff' (GMT offset during
 : daylight savings), 'timezone', 'cc' (2 digit ISO-3166 country code), 'region' (generally state,
 : province, or similar) array clients the client we've tracked the address as using the
 : most - includes client 'name' and 'icon_url' array static_segments the 'id', 'name', and
 : date 'added' for any static segment this member is in
 :
 : @see http://apidocs.mailchimp.com/rtfm/listmemberinfo.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address an array of up to 50 email addresses to get information for OR the "id"(s) for the member returned from listMembers, Webhooks, and Campaigns. For backwards compatibility, if a string is passed, it will be treated as an array with a single element (will not work with XML-RPC).
 :
 : @return No description available
 :)
declare sequential function mailchimp:listMemberInfo($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $email_address as element(array)){
  xmlrpc:invoke($endpoint-url, "listMemberInfo", ($apikey, $id, $email_address))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listMemberActivity-4'&gt;listMemberActivity&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address an array of up to 50 email addresses to get information for OR the "id"(s) for the member returned from listMembers, Webhooks, and Campaigns.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listMemberActivity($apikey as xs:string, $id as xs:string, $email_address as element(array)){
  mailchimp:listMemberActivity($mailchimp:endpoint, $apikey, $id, $email_address)
};

(:~
 : Get the most recent 100 activities for particular list members (open, click, bounce, unsub,
 : abuse, sent to) string action The action name, one of: open, click, bounce, unsub, abuse,
 : sent string timestamp The date/time of the action string url For click actions, the url
 : clicked, otherwise this is empty string bounce_type For bounce actions, the bounce type,
 : otherwise this is empty string campaign_id The campaign id the action was related to,
 : if it exists - otherwise empty (ie, direct unsub from list)
 :
 : @see http://apidocs.mailchimp.com/rtfm/listmemberactivity.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 : @param $email_address an array of up to 50 email addresses to get information for OR the "id"(s) for the member returned from listMembers, Webhooks, and Campaigns.
 :
 : @return No description available
 :)
declare sequential function mailchimp:listMemberActivity($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $email_address as element(array)){
  xmlrpc:invoke($endpoint-url, "listMemberActivity", ($apikey, $id, $email_address))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listAbuseReports-6'&gt;listAbuseReports&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to pull abuse reports for (can be gathered using lists())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 500, upper limit set at 1000
 : @param $since optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listAbuseReports($apikey as xs:string, $id as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  mailchimp:listAbuseReports($mailchimp:endpoint, $apikey, $id, $start, $limit, $since)
};

(:~
 : Get all email addresses that complained about a given campaign string date date/time the
 : abuse report was received and processed string email the email address that reported abuse
 : string campaign_id the unique id for the campaign that report was made against string type
 : an internal type generally specifying the orginating mail provider - may not be useful outside
 : of filling report views
 :
 : @see http://apidocs.mailchimp.com/rtfm/listabusereports.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to pull abuse reports for (can be gathered using lists())
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 500, upper limit set at 1000
 : @param $since optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:listAbuseReports($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  xmlrpc:invoke($endpoint-url, "listAbuseReports", ($apikey, $id, $start, $limit, $since))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listGrowthHistory-3'&gt;listGrowthHistory&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listGrowthHistory($apikey as xs:string, $id as xs:string){
  mailchimp:listGrowthHistory($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Access the Growth History by Month for a given list.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listgrowthhistory.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listGrowthHistory($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listGrowthHistory", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listActivity-3'&gt;listActivity&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listActivity($apikey as xs:string, $id as xs:string){
  mailchimp:listActivity($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Access up to the previous 180 days of daily detailed aggregated activity stats for a
 : given list
 :
 : @see http://apidocs.mailchimp.com/rtfm/listactivity.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listActivity($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listActivity", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listLocations-3'&gt;listLocations&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listLocations($apikey as xs:string, $id as xs:string){
  mailchimp:listLocations($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Retrieve the locations (countries) that the list's subscribers have been tagged to based
 : on geocoding their IP address
 :
 : @see http://apidocs.mailchimp.com/rtfm/listlocations.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listLocations($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listLocations", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listClients-3'&gt;listClients&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listClients($apikey as xs:string, $id as xs:string){
  mailchimp:listClients($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Retrieve the clients that the list's subscribers have been tagged as being used based on
 : user agents seen.
 : Made possible by &amp;lt;a href="http://user-agent-string.info" target="_blank"&amp;gt;user-agent-string.info&amp;lt;/a&amp;gt; double
 : penetration the percent of desktop clients in use array clients a record containing the
 : 'client', an 'icon' image url, the 'percent' using the client, and the total 'members' represented
 : double penetration the percent of mobile clients in use array clients a record containing the
 : 'client', an 'icon' image url, the 'percent' using the client, and the total 'members' represented
 :
 : @see http://apidocs.mailchimp.com/rtfm/listclients.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the list id to connect to. Get by calling lists()
 :
 : @return No description available
 :)
declare sequential function mailchimp:listClients($endpoint-url as xs:string, $apikey as xs:string, $id as xs:string){
  xmlrpc:invoke($endpoint-url, "listClients", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='templates-5'&gt;templates&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $types optional the types of templates to return
 : @param $category optional for Gallery templates only, limit to a specific template category
 : @param $inactives optional options to control how inactive templates are returned, if at all
 :
 : @return No description available    
 :)
declare sequential function mailchimp:templates($apikey as xs:string, $types as element(array), $category as xs:string, $inactives as element(array)){
  mailchimp:templates($mailchimp:endpoint, $apikey, $types, $category, $inactives)
};

(:~
 : Retrieve various templates available in the system, allowing some thing similar to our
 : template gallery to be created.
 : boolean user Customer template for this user account.
 : Defaults to true.
 : boolean gallery Templates from our Gallery.
 : Note that some templates that require extra configuration are withheld.
 : (eg, the Etsy template).
 : Defaults to false.
 : boolean base Our "start from scratch" extremely basic templates boolean include user templates
 : are not deleted, only set inactive.
 : defaults to false.
 : boolean only only include inactive templates.
 : defaults to false.
 :
 : @see http://apidocs.mailchimp.com/rtfm/templates.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $types optional the types of templates to return
 : @param $category optional for Gallery templates only, limit to a specific template category
 : @param $inactives optional options to control how inactive templates are returned, if at all
 :
 : @return No description available
 :)
declare sequential function mailchimp:templates($endpoint-url as xs:string, $apikey as xs:string, $types as element(array), $category as xs:string, $inactives as element(array)){
  xmlrpc:invoke($endpoint-url, "templates", ($apikey, $types, $category, $inactives))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='templateInfo-4'&gt;templateInfo&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $tid the template id - get from templates()
 : @param $type the template type to load - one of 'user', 'gallery', 'base'
 :
 : @return No description available    
 :)
declare sequential function mailchimp:templateInfo($apikey as xs:string, $tid as xs:integer, $type as xs:string){
  mailchimp:templateInfo($mailchimp:endpoint, $apikey, $tid, $type)
};

(:~
 : Pull details for a specific template to help support editing
 :
 : @see http://apidocs.mailchimp.com/rtfm/templateinfo.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $tid the template id - get from templates()
 : @param $type the template type to load - one of 'user', 'gallery', 'base'
 :
 : @return No description available
 :)
declare sequential function mailchimp:templateInfo($endpoint-url as xs:string, $apikey as xs:string, $tid as xs:integer, $type as xs:string){
  xmlrpc:invoke($endpoint-url, "templateInfo", ($apikey, $tid, $type))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='templateAdd-4'&gt;templateAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $name the name for the template - names must be unique and a max of 50 bytes
 : @param $html a string specifying the entire template to be created. This is &lt;strong&gt;NOT&lt;/strong&gt; campaign content. They are intended to utilize our &lt;a href="http://www.mailchimp.com/resources/email-template-language/" target="_blank"&gt;template language&lt;/a&gt;.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:templateAdd($apikey as xs:string, $name as xs:string, $html as xs:string){
  mailchimp:templateAdd($mailchimp:endpoint, $apikey, $name, $html)
};

(:~
 : Create a new user template, &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; campaign content.
 : These templates can then be applied while creating campaigns.
 :
 : @see http://apidocs.mailchimp.com/rtfm/templateadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $name the name for the template - names must be unique and a max of 50 bytes
 : @param $html a string specifying the entire template to be created. This is &lt;strong&gt;NOT&lt;/strong&gt; campaign content. They are intended to utilize our &lt;a href="http://www.mailchimp.com/resources/email-template-language/" target="_blank"&gt;template language&lt;/a&gt;.
 :
 : @return No description available
 :)
declare sequential function mailchimp:templateAdd($endpoint-url as xs:string, $apikey as xs:string, $name as xs:string, $html as xs:string){
  xmlrpc:invoke($endpoint-url, "templateAdd", ($apikey, $name, $html))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='templateUpdate-4'&gt;templateUpdate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the id of the user template to update
 : @param $valuess the values to updates - while both are optional, at least one should be provided. Both can be updated at the same time.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:templateUpdate($apikey as xs:string, $id as xs:integer, $values as element(array)){
  mailchimp:templateUpdate($mailchimp:endpoint, $apikey, $id, $values)
};

(:~
 : Replace the content of a user template, &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; campaign content.
 : string name optional the name for the template - names must be unique and a max of 50
 : bytes string html optional a string specifying the entire template to be created.
 : This is &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; campaign content.
 : They are intended to utilize our &amp;lt;a href="http://www.mailchimp.com/resources/email-template-language/" target="_blank"&amp;gt;template
 : language&amp;lt;/a&amp;gt;.
 :
 : @see http://apidocs.mailchimp.com/rtfm/templateupdate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the id of the user template to update
 : @param $valuess the values to updates - while both are optional, at least one should be provided. Both can be updated at the same time.
 :
 : @return No description available
 :)
declare sequential function mailchimp:templateUpdate($endpoint-url as xs:string, $apikey as xs:string, $id as xs:integer, $values as element(array)){
  xmlrpc:invoke($endpoint-url, "templateUpdate", ($apikey, $id, $values))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='templateDel-3'&gt;templateDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the id of the user template to delete
 :
 : @return No description available    
 :)
declare sequential function mailchimp:templateDel($apikey as xs:string, $id as xs:integer){
  mailchimp:templateDel($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Delete (deactivate) a user template
 :
 : @see http://apidocs.mailchimp.com/rtfm/templatedel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the id of the user template to delete
 :
 : @return No description available
 :)
declare sequential function mailchimp:templateDel($endpoint-url as xs:string, $apikey as xs:string, $id as xs:integer){
  xmlrpc:invoke($endpoint-url, "templateDel", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='templateUndel-3'&gt;templateUndel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $id the id of the user template to reactivate
 :
 : @return No description available    
 :)
declare sequential function mailchimp:templateUndel($apikey as xs:string, $id as xs:integer){
  mailchimp:templateUndel($mailchimp:endpoint, $apikey, $id)
};

(:~
 : Undelete (reactivate) a user template
 :
 : @see http://apidocs.mailchimp.com/rtfm/templateundel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $id the id of the user template to reactivate
 :
 : @return No description available
 :)
declare sequential function mailchimp:templateUndel($endpoint-url as xs:string, $apikey as xs:string, $id as xs:integer){
  xmlrpc:invoke($endpoint-url, "templateUndel", ($apikey, $id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='getAccountDetails-2'&gt;getAccountDetails&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 :
 :
 : @return No description available    
 :)
declare sequential function mailchimp:getAccountDetails($apikey as xs:string){
  mailchimp:getAccountDetails($mailchimp:endpoint, $apikey)
};

(:~
 : Retrieve lots of account information including payments made, plan info, some account stats,
 : installed modules, contact info, and more.
 : No private information like Credit Card numbers is available.
 : string fname First Name string lname Last Name string email Email Address string company
 : Company Name string address1 Address Line 1 string address2 Address Line 2 string city
 : City string state State or Province string zip Zip or Postal Code string country Country
 : name string url Website URL string phone Phone number string fax Fax number string name
 : The module name string added The date the module was added int order_id The order id
 : string type The order type - either "monthly" or "credits" double amount The order amount
 : string date The order date double credits_used The total credits used int referrals_this_month the
 : total number of referrals this month string notify_on whether or not we notify the user
 : when rewards are earned string notify_email the email address address used for rewards notifications
 : array credits Email credits earned "this_month", "total_earned", and "remaining" array
 : inspections Inbox Inspections earned "this_month", "total_earned", and "remaining" array
 : referrals All referrals, including "name", "email", "signup_date", and "type" array applied
 : Applied rewards, including "value", "date", "order_id", and "order_desc"
 :
 : @see http://apidocs.mailchimp.com/rtfm/getaccountdetails.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:getAccountDetails($endpoint-url as xs:string, $apikey as xs:string){
  xmlrpc:invoke($endpoint-url, "getAccountDetails", ($apikey))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='generateText-4'&gt;generateText&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $type The type of content to parse. Must be one of: "html", "template", "url", "cid" (Campaign Id), or "tid" (Template Id)
 : @param $content The content to use. For "html" expects  a single string value, "template" expects an array like you send to campaignCreate, "url" expects a valid &amp; public URL to pull from, "cid" expects a valid Campaign Id, and "tid" expects a valid Template Id on your account.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:generateText($apikey as xs:string, $type as xs:string, $content as item()){
  mailchimp:generateText($mailchimp:endpoint, $apikey, $type, $content)
};

(:~
 : Have HTML content auto-converted to a text-only format.
 : You can send: plain HTML, an array of Template content, an existing Campaign Id, or
 : an existing Template Id.
 : Note that this will &amp;lt;b&amp;gt;not&amp;lt;/b&amp;gt; save anything to or update any of your lists,
 : campaigns, or templates.
 :
 : @see http://apidocs.mailchimp.com/rtfm/generatetext.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $type The type of content to parse. Must be one of: "html", "template", "url", "cid" (Campaign Id), or "tid" (Template Id)
 : @param $content The content to use. For "html" expects  a single string value, "template" expects an array like you send to campaignCreate, "url" expects a valid &amp; public URL to pull from, "cid" expects a valid Campaign Id, and "tid" expects a valid Template Id on your account.
 :
 : @return No description available
 :)
declare sequential function mailchimp:generateText($endpoint-url as xs:string, $apikey as xs:string, $type as xs:string, $content as item()){
  xmlrpc:invoke($endpoint-url, "generateText", ($apikey, $type, $content))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='inlineCss-4'&gt;inlineCss&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $html Your HTML content
 : @param $strip_css optional Whether you want the CSS &amp;lt;style&amp;gt; tags stripped from the returned document. Defaults to false.
 :
 : @return No description available    
 :)
declare sequential function mailchimp:inlineCss($apikey as xs:string, $html as xs:string, $strip_css as xs:boolean){
  mailchimp:inlineCss($mailchimp:endpoint, $apikey, $html, $strip_css)
};

(:~
 : Send your HTML content to have the CSS inlined and optionally remove the original styles.
 :
 : @see http://apidocs.mailchimp.com/rtfm/inlinecss.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $html Your HTML content
 : @param $strip_css optional Whether you want the CSS &amp;lt;style&amp;gt; tags stripped from the returned document. Defaults to false.
 :
 : @return No description available
 :)
declare sequential function mailchimp:inlineCss($endpoint-url as xs:string, $apikey as xs:string, $html as xs:string, $strip_css as xs:boolean){
  xmlrpc:invoke($endpoint-url, "inlineCss", ($apikey, $html, $strip_css))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='folders-3'&gt;folders&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $type optional the type of folders to return - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available    
 :)
declare sequential function mailchimp:folders($apikey as xs:string, $type as xs:string){
  mailchimp:folders($mailchimp:endpoint, $apikey, $type)
};

(:~
 : List all the folders for a user account
 :
 : @see http://apidocs.mailchimp.com/rtfm/folders.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $type optional the type of folders to return - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available
 :)
declare sequential function mailchimp:folders($endpoint-url as xs:string, $apikey as xs:string, $type as xs:string){
  xmlrpc:invoke($endpoint-url, "folders", ($apikey, $type))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='folderAdd-4'&gt;folderAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $name a unique name for a folder (max 100 bytes)
 : @param $type optional the type of folder to create - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available    
 :)
declare sequential function mailchimp:folderAdd($apikey as xs:string, $name as xs:string, $type as xs:string){
  mailchimp:folderAdd($mailchimp:endpoint, $apikey, $name, $type)
};

(:~
 : Add a new folder to file campaigns or autoresponders in
 :
 : @see http://apidocs.mailchimp.com/rtfm/folderadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $name a unique name for a folder (max 100 bytes)
 : @param $type optional the type of folder to create - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available
 :)
declare sequential function mailchimp:folderAdd($endpoint-url as xs:string, $apikey as xs:string, $name as xs:string, $type as xs:string){
  xmlrpc:invoke($endpoint-url, "folderAdd", ($apikey, $name, $type))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='folderUpdate-5'&gt;folderUpdate&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $fid the folder id to update - retrieve from folders()
 : @param $name a new, unique name for the folder (max 100 bytes)
 : @param $type optional the type of folder to create - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available    
 :)
declare sequential function mailchimp:folderUpdate($apikey as xs:string, $fid as xs:integer, $name as xs:string, $type as xs:string){
  mailchimp:folderUpdate($mailchimp:endpoint, $apikey, $fid, $name, $type)
};

(:~
 : Update the name of a folder for campaigns or autoresponders
 :
 : @see http://apidocs.mailchimp.com/rtfm/folderupdate.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $fid the folder id to update - retrieve from folders()
 : @param $name a new, unique name for the folder (max 100 bytes)
 : @param $type optional the type of folder to create - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available
 :)
declare sequential function mailchimp:folderUpdate($endpoint-url as xs:string, $apikey as xs:string, $fid as xs:integer, $name as xs:string, $type as xs:string){
  xmlrpc:invoke($endpoint-url, "folderUpdate", ($apikey, $fid, $name, $type))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='folderDel-4'&gt;folderDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $fid the folder id to update - retrieve from folders()
 : @param $type optional the type of folder to create - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available    
 :)
declare sequential function mailchimp:folderDel($apikey as xs:string, $fid as xs:integer, $type as xs:string){
  mailchimp:folderDel($mailchimp:endpoint, $apikey, $fid, $type)
};

(:~
 : Delete a campaign or autoresponder folder.
 : Note that this will simply make campaigns in the folder appear unfiled, they are not
 : removed.
 :
 : @see http://apidocs.mailchimp.com/rtfm/folderdel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $fid the folder id to update - retrieve from folders()
 : @param $type optional the type of folder to create - either "campaign" or "autoresponder". Defaults to "campaign"
 :
 : @return No description available
 :)
declare sequential function mailchimp:folderDel($endpoint-url as xs:string, $apikey as xs:string, $fid as xs:integer, $type as xs:string){
  xmlrpc:invoke($endpoint-url, "folderDel", ($apikey, $fid, $type))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='ecommOrders-5'&gt;ecommOrders&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 500
 : @param $since optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available    
 :)
declare sequential function mailchimp:ecommOrders($apikey as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  mailchimp:ecommOrders($mailchimp:endpoint, $apikey, $start, $limit, $since)
};

(:~
 : Retrieve the Ecommerce Orders for an account string store_id the store id generated by
 : the plugin used to uniquely identify a store string store_name the store name collected by
 : the plugin - often the domain name string order_id the internal order id the store tracked
 : this order by string email the email address that received this campaign and is associated with
 : this order double order_total the order total double tax_total the total tax for the
 : order (if collected) double ship_total the shipping total for the order (if collected) string
 : order_date the date the order was tracked - from the store if possible, otherwise the
 : GMT time we recieved it array lines containing detail of the order - product, category, quantity,
 : item cost
 :
 : @see http://apidocs.mailchimp.com/rtfm/ecommorders.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $start optional for large data sets, the page number to start at - defaults to 1st page of data  (page 0)
 : @param $limit optional for large data sets, the number of results to return - defaults to 100, upper limit set at 500
 : @param $since optional pull only messages since this time - use YYYY-MM-DD HH:II:SS format in &lt;strong&gt;GMT&lt;/strong&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:ecommOrders($endpoint-url as xs:string, $apikey as xs:string, $start as xs:integer, $limit as xs:integer, $since as xs:string){
  xmlrpc:invoke($endpoint-url, "ecommOrders", ($apikey, $start, $limit, $since))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='ecommOrderAdd-3'&gt;ecommOrderAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $order an array of information pertaining to the order that has completed. Use the following keys:
 :
 : @return No description available    
 :)
declare sequential function mailchimp:ecommOrderAdd($apikey as xs:string, $order as element(array)){
  mailchimp:ecommOrderAdd($mailchimp:endpoint, $apikey, $order)
};

(:~
 : Import Ecommerce Order Information to be used for Segmentation.
 : This will generally be used by ecommerce package plugins &amp;lt;a href="/plugins/ecomm360.phtml"&amp;gt;that we
 : provide&amp;lt;/a&amp;gt; or by 3rd part system developers.
 : string id the Order Id string email_id optional (kind of) the Email Id of the subscriber we
 : should attach this order to (see the "mc_eid" query string variable a campaign passes) -
 : either this or &amp;lt;strong&amp;gt;email&amp;lt;/strong&amp;gt; is required.
 : If both are provided, email_id takes precedence string email optional (kind of) the Email
 : Address we should attach this order to - either this or &amp;lt;strong&amp;gt;email_id&amp;lt;/strong&amp;gt; is
 : required.
 : If both are provided, email_id takes precedence double total The Order Total (ie, the
 : full amount the customer ends up paying) string order_date optional the date of the order
 : - if this is not provided, we will default the date to now double shipping optional the
 : total paid for Shipping Fees double tax optional the total tax paid string store_id a
 : unique id for the store sending the order in (20 bytes max) string store_name optional a
 : "nice" name for the store - typically the base web address (ie, "store.mailchimp.com").
 : We will automatically update this if it changes (based on store_id) string plugin_id the
 : MailChimp assigned Plugin Id.
 : Get yours by &amp;lt;a href="/api/register.php"&amp;gt;registering here&amp;lt;/a&amp;gt; string campaign_id
 : optional the Campaign Id to track this order with (see the "mc_cid" query string variable
 : a campaign passes) array items the individual line items for an order using these keys:
 : &amp;lt;div style="padding-left:30px"&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td colspan=*&amp;gt; int
 : line_num optional the line number of the item on the order.
 : We will generate these if they are not passed int product_id the store's internal Id
 : for the product.
 : Lines that do no contain this will be skipped string product_name the product name for
 : the product_id associated with this item.
 : We will auto update these as they change (based on product_id) int category_id the store's
 : internal Id for the (main) category associated with this product.
 : Our testing has found this to be a "best guess" scenario string category_name the category
 : name for the category_id this product is in.
 : Our testing has found this to be a "best guess" scenario.
 : Our plugins walk the category heirarchy up and send "Root - SubCat1 - SubCat4", etc.
 : double qty the quantity of the item ordered double cost the cost of a single item (ie,
 : not the extended cost of the line) &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;
 :
 : @see http://apidocs.mailchimp.com/rtfm/ecommorderadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $order an array of information pertaining to the order that has completed. Use the following keys:
 :
 : @return No description available
 :)
declare sequential function mailchimp:ecommOrderAdd($endpoint-url as xs:string, $apikey as xs:string, $order as element(array)){
  xmlrpc:invoke($endpoint-url, "ecommOrderAdd", ($apikey, $order))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='ecommOrderDel-4'&gt;ecommOrderDel&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $store_id the store id the order belongs to
 : @param $order_id the order id (generated by the store) to delete
 :
 : @return No description available    
 :)
declare sequential function mailchimp:ecommOrderDel($apikey as xs:string, $store_id as xs:string, $order_id as xs:string){
  mailchimp:ecommOrderDel($mailchimp:endpoint, $apikey, $store_id, $order_id)
};

(:~
 : Delete Ecommerce Order Information used for segmentation.
 : This will generally be used by ecommerce package plugins &amp;lt;a href="/plugins/ecomm360.phtml"&amp;gt;that we
 : provide&amp;lt;/a&amp;gt; or by 3rd part system developers.
 :
 : @see http://apidocs.mailchimp.com/rtfm/ecommorderdel.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $store_id the store id the order belongs to
 : @param $order_id the order id (generated by the store) to delete
 :
 : @return No description available
 :)
declare sequential function mailchimp:ecommOrderDel($endpoint-url as xs:string, $apikey as xs:string, $store_id as xs:string, $order_id as xs:string){
  xmlrpc:invoke($endpoint-url, "ecommOrderDel", ($apikey, $store_id, $order_id))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='listsForEmail-3'&gt;listsForEmail&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $email_address the email address to check OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns
 :
 : @return No description available    
 :)
declare sequential function mailchimp:listsForEmail($apikey as xs:string, $email_address as xs:string){
  mailchimp:listsForEmail($mailchimp:endpoint, $apikey, $email_address)
};

(:~
 : Retrieve all List Ids a member is subscribed to.
 :
 : @see http://apidocs.mailchimp.com/rtfm/listsforemail.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $email_address the email address to check OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns
 :
 : @return No description available
 :)
declare sequential function mailchimp:listsForEmail($endpoint-url as xs:string, $apikey as xs:string, $email_address as xs:string){
  xmlrpc:invoke($endpoint-url, "listsForEmail", ($apikey, $email_address))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='campaignsForEmail-3'&gt;campaignsForEmail&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $email_address the email address to unsubscribe  OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns
 :
 : @return No description available    
 :)
declare sequential function mailchimp:campaignsForEmail($apikey as xs:string, $email_address as xs:string){
  mailchimp:campaignsForEmail($mailchimp:endpoint, $apikey, $email_address)
};

(:~
 : Retrieve all Campaigns Ids a member was sent
 :
 : @see http://apidocs.mailchimp.com/rtfm/campaignsforemail.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 : @param $email_address the email address to unsubscribe  OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns
 :
 : @return No description available
 :)
declare sequential function mailchimp:campaignsForEmail($endpoint-url as xs:string, $apikey as xs:string, $email_address as xs:string){
  xmlrpc:invoke($endpoint-url, "campaignsForEmail", ($apikey, $email_address))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='chimpChatter-2'&gt;chimpChatter&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 :
 :
 : @return No description available    
 :)
declare sequential function mailchimp:chimpChatter($apikey as xs:string){
  mailchimp:chimpChatter($mailchimp:endpoint, $apikey)
};

(:~
 : Return the current Chimp Chatter messages for an account.
 :
 : @see http://apidocs.mailchimp.com/rtfm/chimpchatter.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:chimpChatter($endpoint-url as xs:string, $apikey as xs:string){
  xmlrpc:invoke($endpoint-url, "chimpChatter", ($apikey))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='apikeys-5'&gt;apikeys&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $password Your MailChimp password
 : @param $apikey Any valid API Key for your account
 : @param $expired optional - whether or not to include expired keys, defaults to false
 :
 : @return No description available    
 :)
declare sequential function mailchimp:apikeys($username as xs:string, $password as xs:string, $apikey as xs:string, $expired as xs:boolean){
  mailchimp:apikeys($mailchimp:endpoint, $username, $password, $apikey, $expired)
};

(:~
 : Retrieve a list of all MailChimp API Keys for this User
 :
 : @see http://apidocs.mailchimp.com/rtfm/apikeys.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $username Your MailChimp user name
 : @param $password Your MailChimp password
 : @param $apikey Any valid API Key for your account
 : @param $expired optional - whether or not to include expired keys, defaults to false
 :
 : @return No description available
 :)
declare sequential function mailchimp:apikeys($endpoint-url as xs:string, $username as xs:string, $password as xs:string, $apikey as xs:string, $expired as xs:boolean){
  xmlrpc:invoke($endpoint-url, "apikeys", ($username, $password, $apikey, $expired))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='apikeyAdd-4'&gt;apikeyAdd&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $password Your MailChimp password
 : @param $apikey Any valid API Key
 :
 : @return No description available    
 :)
declare sequential function mailchimp:apikeyAdd($username as xs:string, $password as xs:string, $apikey as xs:string){
  mailchimp:apikeyAdd($mailchimp:endpoint, $username, $password, $apikey)
};

(:~
 : Add an API Key to your account.
 : We will generate a new key for you and return it.
 :
 : @see http://apidocs.mailchimp.com/rtfm/apikeyadd.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $username Your MailChimp user name
 : @param $password Your MailChimp password
 : @param $apikey Any valid API Key
 :
 : @return No description available
 :)
declare sequential function mailchimp:apikeyAdd($endpoint-url as xs:string, $username as xs:string, $password as xs:string, $apikey as xs:string){
  xmlrpc:invoke($endpoint-url, "apikeyAdd", ($username, $password, $apikey))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='apikeyExpire-4'&gt;apikeyExpire&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $password Your MailChimp password
 : @param $apikey Any valid API Key that you wish to expire
 :
 : @return No description available    
 :)
declare sequential function mailchimp:apikeyExpire($username as xs:string, $password as xs:string, $apikey as xs:string){
  mailchimp:apikeyExpire($mailchimp:endpoint, $username, $password, $apikey)
};

(:~
 : Expire a Specific API Key.
 : Note that if you expire all of your keys, just visit &amp;lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&amp;gt;your
 : API dashboard&amp;lt;/a&amp;gt; to create a new one.
 : If you are trying to shut off access to your account for an old developer, change your
 : MailChimp password, then expire all of the keys they had access to.
 : Note that this takes effect immediately, so make sure you replace the keys in any working
 : application before expiring them! Consider yourself warned...
 :
 : @see http://apidocs.mailchimp.com/rtfm/apikeyexpire.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $username Your MailChimp user name
 : @param $password Your MailChimp password
 : @param $apikey Any valid API Key that you wish to expire
 :
 : @return No description available
 :)
declare sequential function mailchimp:apikeyExpire($endpoint-url as xs:string, $username as xs:string, $password as xs:string, $apikey as xs:string){
  xmlrpc:invoke($endpoint-url, "apikeyExpire", ($username, $password, $apikey))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='login-3'&gt;login&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $password Your MailChimp password
 :
 : @return No description available    
 :)
declare sequential function mailchimp:login($username as xs:string, $password as xs:string){
  mailchimp:login($mailchimp:endpoint, $username, $password)
};

(:~
 : &amp;lt;strong&amp;gt;DEPRECATED:&amp;lt;/strong&amp;gt; Log into the MailChimp API and return an API
 : Key.
 : There is &amp;lt;strong&amp;gt;no&amp;lt;/strong&amp;gt; reason to call this in a real app, just hard
 : code your API Key from this or &amp;lt;a href="http://admin.mailchimp.com/account/api/"&amp;gt;http://admin.mailchimp.com/account/api/&amp;lt;/a&amp;gt;.
 : By default the oldest one is returned.
 : If you've never logged into the API before, this will create your first API Key.
 :
 : @see http://apidocs.mailchimp.com/rtfm/login.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $username Your MailChimp user name
 : @param $password Your MailChimp password
 :
 : @return No description available
 :)
declare sequential function mailchimp:login($endpoint-url as xs:string, $username as xs:string, $password as xs:string){
  xmlrpc:invoke($endpoint-url, "login", ($username, $password))
};

(:~
 :
 : Convenience function.
 :
 : @see &lt;a href='ping-2'&gt;ping&lt;/a&gt;
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 :
 :
 : @return No description available    
 :)
declare sequential function mailchimp:ping($apikey as xs:string){
  mailchimp:ping($mailchimp:endpoint, $apikey)
};

(:~
 : "Ping" the MailChimp API - a simple method you can call that will return a constant value
 : as long as everything is good.
 : Note than unlike most all of our methods, we don't throw an Exception if we are having issues.
 : You will simply receive a different string back that will explain our view on what is
 : going on.
 :
 : @see http://apidocs.mailchimp.com/rtfm/ping.func.php
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 : @param $apikey a valid API Key for your user account. Get by visiting &lt;a href="http://admin.mailchimp.com/account/api" target="_blank"&gt;your API dashboard&lt;/a&gt;
 :
 : @return No description available
 :)
declare sequential function mailchimp:ping($endpoint-url as xs:string, $apikey as xs:string){
  xmlrpc:invoke($endpoint-url, "ping", ($apikey))
};
