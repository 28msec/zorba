import module namespace http-client = "http://expath.org/ns/http-client";

import schema namespace http = "http://expath.org/ns/http-client";

declare default element namespace 'http://www.w3.org/1999/xhtml';

declare function local:ucfirst($string as xs:string) as xs:string
{
  let $strlen := string-length($string)
  return
  if($strlen = 0) then
    ""
  else if($strlen = 1) then
    fn:upper-case($string)
  else
    concat(
      fn:upper-case(substring($string, 1, 1)),
      fn:lower-case(substring($string, 2))
    )
};

declare sequential function local:get-return-description($url as xs:string)
{
  let $result :=
    try {
      http-client:send-request(<http:request href="{$url}" method="GET" />)[2]//dt[./text() = "Returns:"]/following-sibling::dd[1]/text()
    } catch * {
      "no description available"
    }
  let $r := local:ucfirst(normalize-space(replace(replace($result, "\n", " "), "\s\s\s-\s", "")))
  return if($r = "") then "No description available" else $r
};

declare function local:get-type($type as xs:string) {
  switch(normalize-space($type))
    case "(string)" return "xs:string"
    case "(boolean)" return "xs:boolean"
    case "(integer)" return "xs:integer"
    case "(array)" return "element(array)"
    case "(struct)" return "element(struct)"
    case "(mixed)" return "item()"
    default return error(xs:QName("local:err"), trace($type, "TYPE"))
};

declare function local:wrap($description as xs:string) as xs:string* {
  let $words := tokenize($description, "\s")
  for tumbling window $word in $words
   start at $s when true()
   end at $e when string-length(string-join(subsequence($words, $s, $e - $s), " ")) >= 80 or 
                  ends-with($words[$e], ".")
   return string-join($word, " ")
};

let $result :=
  for $method in doc("doc.xml")//span[@class = "name"]
  where $method/text() != "callMethod"
  let $title := $method/..
  let $block := $title/../..
  let $types  := $title//span[@class = "paratype"]
  let $names  := for $name in $title//span[@class = "paraname"] return concat("$", $name)
  let $params := for $name at $i in $names return concat($name, " as ", local:get-type($types[$i]/text()))
  let $xqdoc-params := for $name at $i in $names 
                       return concat(" @param ", $name, $block//table/tr[concat("$", ./td[2]/text()) = $name]/td[3]/text())
  let $body   := concat("  xmlrpc:invoke($endpoint-url", ', "', $method/text(), '", (', string-join($names, ", "), "))")
  let $description := normalize-space($block/div[@class = "description"])
  let $description := replace($description, "<", "&amp;lt;")
  let $description := replace($description, ">", "&amp;gt;")
  let $description := if(exists($description)) then local:wrap($description) else ()
  let $doc-link    := concat("http://apidocs.mailchimp.com/rtfm/", lower-case(replace($method/text(), "_", "")), ".func.php")
  return concat("
(:~
 :
 : Convenience function.
 :
 : @see <a href='", $method/text(), "-", count($names) + 1, "'>", $method/text(), "</a>
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 :", string-join(subsequence($xqdoc-params, 2), "
 :"),"
 :
 : @return ", let $r := local:get-return-description($doc-link) return $r, "    
 :)
declare sequential function mailchimp:", $method/text(), "(", string-join($params, ", "), "){
  mailchimp:", $method/text(), "(", string-join(('$mailchimp:endpoint', $names), ", "), ")
};
",
"
(:~
 : ", string-join($description, "
 : "),
"
 :
 : @see ", $doc-link,"
 :
 : @param $endpoint-url Mailchimp endpoint URL, e.g. http://us1.api.mailchimp.com/1.3/
 :", string-join($xqdoc-params, "
 :"),"
 :
 : @return ", let $r := local:get-return-description($doc-link) return $r, "
 :)
declare sequential function mailchimp:", $method/text(), "(", string-join(("$endpoint-url as xs:string", $params), ", "), "){
", $body, "
};
")
return concat(
'
(:
 : !!! WARNING: This code is automatically generated by the script located at
 : /scripts/mailchimp/generator.xq !!!
 :)

(:~
 :
 : Mailchimp Client Module
 :
 : @see <a href="http://apidocs.mailchimp.com/">http://apidocs.mailchimp.com/</a>
 :
 : @author William Candillon {william.candillon@28msec.com}
 :
 :)
module namespace mailchimp = "http://www.zorba-xquery.com/modules/webservices/mailchimp";

import module namespace http-client = "http://expath.org/ns/http-client";

import module namespace xmlrpc = "http://www.zorba-xquery.com/modules/xmlrpc";

(:~
 : Mailchimp gateway where the client data is stored.
 :)
declare variable $mailchimp:gateway  := "us2";

(:~
 : Mailchimp API version.
 :)
declare variable $mailchimp:version  := "1.3";

(:~
 : Endpoint URL for the XML-RPC requests.
 :)
declare variable $mailchimp:endpoint := concat("http://", $mailchimp:gateway, ".api.mailchimp.com/", $mailchimp:version, "/");
',
string-join($result, ""))
