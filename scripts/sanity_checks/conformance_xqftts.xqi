xquery version "3.0";

module namespace conf  = "http://www.zorba-xquery.com/modules/conformance";

import module namespace file = "http://expath.org/ns/file";
import module namespace functx = "http://www.functx.com/";

import module namespace dml = "http://www.zorba-xquery.com/modules/store/static/collections/dml";
import module namespace ddl = "http://www.zorba-xquery.com/modules/store/static/collections/ddl";

import schema namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";

declare namespace ann = "http://www.zorba-xquery.com/annotations";
declare namespace xqCat = "http://www.w3.org/2005/02/query-test-full-text";
declare namespace xqRes = "http://www.w3.org/2005/02/query-test-XQTSResult";

declare %private variable $conf:submissionXqueryX as xs:QName := xs:QName("conf:submissionXqueryX");
declare collection conf:submissionXqueryX as node()*;

declare %private variable $conf:submissionXquery as xs:QName := xs:QName("conf:submissionXquery");
declare collection conf:submissionXquery as node()*;

declare %private variable $conf:failingXQuery as xs:QName := xs:QName("conf:failingXQuery");
declare collection conf:failingXQuery as node()*;

declare %private variable $conf:failingXQueryX as xs:QName := xs:QName("conf:failingXQueryX");
declare collection conf:failingXQueryX as node()*;

declare %private variable $conf:serParamXhtml :=
  <output:serialization-parameters>
    <output:method value="xhtml"/>
    <output:indent value="yes"/>
  </output:serialization-parameters>;
  
declare %private variable $conf:XQFTTS_PATH  as xs:string := "/tmp/XQFTTS_current";
declare %private variable $conf:XQFTTS_submission as xs:string := 
"/tmp/XQFTTS_current/ReportingResults/zorba_11674_xqftts_current.xml";
declare %private variable $conf:XQFTTSX_submission as xs:string := 
"/tmp/XQFTTS_current/ReportingResults/zorba_11674_xqfttsx_current.xml";

declare %private variable $conf:XQuery   as xs:string := "XQuery";
declare %private variable $conf:XQueryX  as xs:string := "XQueryX";

declare %private variable $conf:features := <features/>;

declare %private %ann:sequential function conf:collect-feature(
  $name as xs:string, 
  $supported as xs:string) 
{
  insert node <feature name ="{$name}" supported="{$supported}" /> as last into $conf:features;
};

declare function conf:count-available-tests($node, $isDetailed as xs:boolean) as xs:integer?
{
  if(not($isDetailed) or
    ($isDetailed and (count($node//xqCat:test-group) eq xs:integer(0)))) then
    count($node//xqCat:test-case)
  else
    ()
};

declare function conf:failing-tests($node, $no_spaces as xs:integer, $isDetailed as xs:boolean)
{
  let $padding := functx:repeat-string(codepoints-to-string(160), $no_spaces)
  return
    if(not($isDetailed) or 
      ($isDetailed and (count($node//xqCat:test-group) eq xs:integer(0)))) then
    (: if there are no sub-categories and there are tests in this category :)
    {
      (: list all tests that are not passing in either XQuery or XQueryX :)
      for $testCase in $node//xqCat:test-case
      let $testCaseName := data($testCase/@name)
      let $xqTmp  := xs:string(dml:collection(xs:QName("conf:failingXQuery"))[@name = $testCaseName]/@value)
      let $xqStatus := if(exists($xqTmp)) then $xqTmp else "pass"

      let $xqxTmp := xs:string(dml:collection(xs:QName("conf:failingXQueryX"))[@name = $testCaseName]/@value)
      let $xqxStatus := if(exists($xqxTmp)) then $xqxTmp else "pass"
      where (exists(dml:collection( xs:QName("conf:failingXQuery"))[@name = $testCaseName]/@value) or
             exists(dml:collection( xs:QName("conf:failingXQueryX"))[@name = $testCaseName]/@value))
      return
        if(($xqStatus = "pass") and ($xqxStatus = "pass")) then ()
        else
          <tr bgcolor="lightcyan">
            <td >{$padding}
              <a target="_blank" href="{concat('http://dev.w3.org/2007/xpath-full-text-10-test-suite/TestSuiteStagingArea/Queries/XQuery/',data($testCase/@FilePath),$testCaseName,'.xq')}">{$testCaseName}</a>
            </td>
            <td class="xq" bgcolor="{if($xqStatus = 'fail') then 'coral' else if($xqStatus = 'pass') then 'mediumseagreen' else 'lightcyan'}">
              {$xqStatus}</td>
            <td class="xqx" bgcolor="{if($xqxStatus = 'fail') then 'coral' else if($xqxStatus = 'pass') then 'mediumseagreen' else 'lightcyan'}">
              {$xqxStatus}</td>
          </tr>
    }
    else ()
};

declare function conf:create-tr(
  $nodes, 
  $no_spaces as xs:integer)
{
  let $padding := functx:repeat-string(codepoints-to-string(160), $no_spaces)
  return
    for $test-group in $nodes
    let $failingTests := conf:failing-tests($test-group, ($no_spaces + xs:integer(2)), fn:true())
    let $total := conf:count-available-tests($test-group, fn:true())
    let $passingXQ := $total - count(for $test in $failingTests//td[@class = "xq"] 
                                     where (not($test/text()='pass') and 
                                           not($test/text()='not applicable')  and 
                                           not($test/text()='no result')) 
                                     return $test)
    let $notApplXQ := count(for $test in $failingTests//td[@class = "xq"]
                            where  ($test/text()='not applicable')
                            return $test)
    let $sumXQ := $passingXQ + $notApplXQ
                            
    let $passingXQX := $total - count(for $test in $failingTests//td[@class = "xqx"] 
                                     where (not($test/text()='pass') and
                                           not($test/text()='not applicable')  and 
                                           not($test/text()='no result')) 
                                     return $test)
    let $notApplXQX := count(for $test in $failingTests//td[@class = "xqx"]
                            where  ($test/text()='not applicable')
                            return $test)
    let $sumXQX := $passingXQX + $notApplXQX
    return
    (
     if(count($test-group//xqCat:test-case) ne xs:integer(0)) then
      <tr bgcolor="lightcyan">
        <td bgcolor="{if(not(exists($total))) then 'paleturquoise' else 'lightcyan'}">
          {concat($padding,data($test-group/xqCat:GroupInfo/xqCat:title))}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise'
                      else if($passingXQ = $total) then 'mediumseagreen'
                      else if($sumXQ = $total) then 'white' 
                      else if(($sumXQ div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($sumXQ,"/",$total) else ()}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise' 
                      else if($passingXQX = $total) then 'mediumseagreen'
                      else if($sumXQX = $total) then 'white' 
                      else if(($sumXQX div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($sumXQX,"/",$total) else ()}</td>
      </tr> else (),
      conf:create-tr($test-group/xqCat:test-group, 
                     ($no_spaces + xs:integer(2)))
    )
};

declare function conf:create-tr-summary(
  $nodes, 
  $no_spaces as xs:integer)
{
  let $padding := functx:repeat-string(codepoints-to-string(160), $no_spaces)
  return
    for $test-group in $nodes
    let $failingTests := conf:failing-tests($test-group, ($no_spaces + xs:integer(2)), fn:false())
    let $total := conf:count-available-tests($test-group, fn:false())
    let $passingXQ := $total - count(for $test in $failingTests//td[@class = "xq"] 
                                     where (not($test/text()='pass') and 
                                           not($test/text()='not applicable')  and 
                                           not($test/text()='no result')) 
                                     return $test)
    let $notApplXQ := count(for $test in $failingTests//td[@class = "xq"]
                            where  ($test/text()='not applicable')
                            return $test)
    let $sumXQ := $passingXQ + $notApplXQ
                            
    let $passingXQX := $total - count(for $test in $failingTests//td[@class = "xqx"] 
                                     where (not($test/text()='pass') and 
                                           not($test/text()='not applicable') and 
                                           not($test/text()='no result')) 
                                     return $test)
    let $notApplXQX := count(for $test in $failingTests//td[@class = "xqx"]
                            where  ($test/text()='not applicable')
                            return $test)
    let $sumXQX := $passingXQX + $notApplXQX
    return
    (
     if(count($test-group//xqCat:test-case) ne xs:integer(0)) then
      <tr bgcolor="lightcyan">
        <td bgcolor="{if(not(exists($total))) then 'paleturquoise' else 'lightcyan'}">
          {concat($padding,data($test-group/xqCat:GroupInfo/xqCat:title))}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise'
                      else if($passingXQ = $total) then 'mediumseagreen'
                      else if($sumXQ = $total) then 'white' 
                      else if(($sumXQ div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($sumXQ,"/",$total) else ()}<br />
           {if(data($test-group/@name) = "MinimalConformance") then concat(round(($sumXQ div $total)*100),'%') else ()}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise' 
                      else if($passingXQX = $total) then 'mediumseagreen'
                      else if($sumXQX = $total) then 'white' 
                      else if(($sumXQX div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($sumXQX,"/",$total) else ()}<br />
           {if(data($test-group/@name) = "MinimalConformance") then concat(round(($sumXQX div $total)*100),'%') else ()}</td>
      </tr> else (),
      if(data($test-group/xqCat:GroupInfo/xqCat:title) = "Optional") then
        conf:create-tr-summary($test-group/xqCat:test-group, 
                              ($no_spaces + xs:integer(2)))
      else ()
    )
};

declare %ann:sequential function conf:create-collection($syntax as xs:string, $XQTS_catalog)
{
  variable $noTestsCatalog := count($XQTS_catalog//*:test-case);
  
  if($syntax eq $conf:XQuery) then
  {
    ddl:create($conf:failingXQuery);

    variable $noTestsSubmissionXQuery := count(dml:collection(xs:QName("conf:submissionXquery")));
    
    if($noTestsCatalog > $noTestsSubmissionXQuery) then
    {
      variable $untested as xs:integer := trace(($noTestsCatalog - $noTestsSubmissionXQuery),
                                          "tests that are not reported in the XQuery submission file and have to be identified...");
      (: there are tests for which we do not report anything :)      
      for $test in $XQTS_catalog//*:test-case
      where empty(dml:collection(xs:QName("conf:submissionXquery"))[@name = data($test/@name)])
      return
        dml:apply-insert-nodes($conf:failingXQuery, <test name="{data($test/@name)}" value="no result"/>);        
    } else ();
    
    for $testFailed in dml:collection(xs:QName("conf:submissionXquery"))
    let $name := data($testFailed/@name)
    let $status := data($testFailed/@result)
    let $comment := data($testFailed/@comment)
    where (not($status = "pass") and not($status = "not applicable"))
    return
      if(exists($comment)) then
        dml:apply-insert-nodes($conf:failingXQuery, <test name="{$name}" value="{$status}" comment="{$comment}"/>);
      else
        dml:apply-insert-nodes($conf:failingXQuery, <test name="{$name}" value="{$status}"/>);
  }
  else if($syntax eq $conf:XQueryX) then
  {
    ddl:create($conf:failingXQueryX);
    
    variable $noTestsSubmissionXQueryX := count(dml:collection(xs:QName("conf:submissionXqueryX")));
    if($noTestsCatalog > $noTestsSubmissionXQueryX) then
    {
      variable $untested as xs:integer := trace(($noTestsCatalog - $noTestsSubmissionXQueryX),
                                          "tests that are not reported in the XQueryX submission file and have to be identified..."); 
      (: there are tests for which we do not report anything :)      
      for $test in $XQTS_catalog//*:test-case
      where empty(dml:collection(xs:QName("conf:submissionXqueryX"))[@name = xs:string($test/@name)])
      return
        dml:apply-insert-nodes($conf:failingXQueryX, <test name="{data($test/@name)}" value="no result"/>);
    }
    else ();
    
    for $testFailed in dml:collection(xs:QName("conf:submissionXqueryX"))
    let $name := data($testFailed/@name)
    let $status := data($testFailed/@result)
    let $comment := data($testFailed/@comment)
    where (not($status = "pass") and not($status = "not applicable"))
    return
      if(exists($comment)) then
        dml:apply-insert-nodes($conf:failingXQueryX, <test name="{$name}" value="{$status}" comment="{$comment}"/>);
      else
        dml:apply-insert-nodes($conf:failingXQueryX, <test name="{$name}" value="{$status}"/>);
  }
  else
  ();
};

declare %ann:sequential function conf:create-collection-submissions()
{
  ddl:create($conf:submissionXquery);
  
  variable $docXQ := fn:parse-xml(file:read-text(file:resolve-path($conf:XQFTTS_submission)));
  for $test in $docXQ/xqRes:test-suite-result//xqRes:test-case
  return dml:apply-insert-nodes($conf:submissionXquery, $test);
    
  (: collect features :)
  for $feature in $docXQ/xqRes:test-suite-result/xqRes:implementation/xqRes:features/xqRes:feature
  return
    conf:collect-feature(data($feature/@name),
                         data($feature/@supported));
    
  ddl:create($conf:submissionXqueryX);
  
  variable $docXQX := fn:parse-xml(file:read-text(file:resolve-path($conf:XQFTTSX_submission)));
  for $test in $docXQX/xqRes:test-suite-result//xqRes:test-case
  return dml:apply-insert-nodes($conf:submissionXqueryX, $test);
};

declare function conf:generate-detailed-table($XQTS_catalog)
{
  <table bgcolor="lightcyan">
    <tr><td>W3C XQuery and XPath Full Text 1.0 features</td><td>XQuery</td><td>XQueryX</td></tr>
    <tr><td></td><td></td><td></td></tr>
    {
      for $test-group in $XQTS_catalog/xqCat:test-suite/xqCat:test-group
      return conf:create-tr($test-group, 
                            xs:integer(0))
    }
  </table>
};

declare function conf:generate-summary-table($XQTS_catalog)
{
  <table bgcolor="lightcyan">
    <tr><td>W3C XQuery and XPath Full Text 1.0 features</td><td>XQuery</td><td>XQueryX</td></tr>
    <tr><td></td><td></td><td></td></tr>
    {
      for $test-group in $XQTS_catalog/xqCat:test-suite/xqCat:test-group      
      return conf:create-tr-summary($test-group,
                                    xs:integer(0))
    }
  </table>
};

declare function conf:generate-features-table()
{
  <table bgcolor="lightcyan">
    <tr><td>W3C XQuery and XPath Full Text 1.0 features</td><td>supported</td></tr>
    <tr><td></td><td></td></tr>
    {
      for $feature in $conf:features/feature
      let $isSupported := xs:boolean(data($feature/@supported))
      return
      <tr>
        <td>{data($feature/@name)}</td>
        <td bgcolor="{if($isSupported) then 'mediumseagreen' else 'white'}">{data($feature/@supported)}</td>
      </tr>
    }
  </table>
};

declare %ann:sequential function conf:test()
{  
  variable $XQTS_catalog := fn:parse-xml(file:read-text(file:resolve-path(concat($conf:XQFTTS_PATH,file:directory-separator(),"XQFTTSCatalog.xml"))));
  
  conf:create-collection($conf:XQuery, $XQTS_catalog);
  conf:create-collection($conf:XQueryX, $XQTS_catalog);

  variable $pageNameDetailed := "conformanceXQFTTS";
  variable $pathDetailed := fn:concat($conf:XQFTTS_PATH, file:directory-separator(), $pageNameDetailed, ".dox"); 
  
  file:write(trace($pathDetailed,"output file path"),
             ("/** \page conformanceXQFTTS  Detailed conformance W3C XQuery and XPath Full Text 1.0

",
             {conf:generate-detailed-table($XQTS_catalog)}
,"
*/"), 
             $conf:serParamXhtml);

  variable $pageNameSummary := "conformanceXQFTTSSummary";
  variable $pathSummary := fn:concat($conf:XQFTTS_PATH, file:directory-separator(), $pageNameSummary, ".dox"); 
  
  file:write(trace($pathSummary,"output file path"),
             ("/** \page conformanceXQFTTSSummary  Detailed conformance W3C XQuery and XPath Full Text 1.0

",
             {conf:generate-features-table()},"
",
             {conf:generate-summary-table($XQTS_catalog)}
,"
*/"), 
             $conf:serParamXhtml);
};
