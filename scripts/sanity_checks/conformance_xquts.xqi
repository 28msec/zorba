xquery version "3.0";

(:
 : Copyright 2006-2011 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)

module namespace conf  = "http://www.zorba-xquery.com/modules/conformance";

import module namespace file = "http://expath.org/ns/file";
import module namespace functx = "http://www.functx.com/";

import module namespace dml = "http://www.zorba-xquery.com/modules/store/static/collections/dml";
import module namespace ddl = "http://www.zorba-xquery.com/modules/store/static/collections/ddl";

import schema namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";

declare namespace ann = "http://www.zorba-xquery.com/annotations";
declare namespace xqCat = "http://www.w3.org/2005/02/query-test-update";
declare namespace xqRes = "http://www.w3.org/2005/02/query-test-XQTSResult";

declare %private  variable $conf:submissionXqueryX as xs:QName := xs:QName("conf:submissionXqueryX");
declare collection conf:submissionXqueryX as node()*;

declare %private  variable $conf:submissionXquery as xs:QName := xs:QName("conf:submissionXquery");
declare collection conf:submissionXquery as node()*;

declare  %private variable $conf:xquery as xs:QName := xs:QName("conf:xquery");
declare collection conf:xquery as node()*;

declare %private  variable $conf:xqueryx as xs:QName := xs:QName("conf:xqueryx");
declare collection conf:xqueryx as node()*;

declare %private  variable $conf:serParamXhtml :=
  <output:serialization-parameters>
    <output:method value="xhtml"/>
    <output:indent value="yes"/>
  </output:serialization-parameters>;
  
declare %private  variable $conf:XQUTS_PATH  as xs:string := "/tmp/XQUTS_current";

declare %private  variable $conf:XQUTS_submission as xs:string := 
"/tmp/XQUTS_current/zorba_xquts_submission.xml";
declare variable $conf:XQUTSX_submission as xs:string := 
"/tmp/XQUTS_current/zorba_xqutsx_submission.xml";

declare %private  variable $conf:XQuery   as xs:string := "XQuery";
declare %private  variable $conf:XQueryX  as xs:string := "XQueryX";

declare %private variable $conf:features := <features/>;

declare %private variable $conf:numbers := <numbers/>;

declare %private %ann:sequential function conf:collect-feature(
  $name       as xs:string, 
  $supported  as xs:string) 
{
  insert node <feature name ="{$name}" supported="{$supported}" /> as last into $conf:features;
};

declare %private %ann:sequential function conf:collect-number(
  $name   as xs:string, 
  $value  as xs:string) 
{
  insert node <number name ="{$name}" value="{$value}" /> as last into $conf:numbers;
};

declare %private function  conf:value-intersect(
  $arg1 as xs:anyAtomicType*,
  $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* 
{
  fn:distinct-values($arg1[.=$arg2])
};

declare function conf:count-available-tests($node, $isDetailed as xs:boolean) as xs:integer?
{
  if(not($isDetailed) or
    ($isDetailed and (count($node//xqCat:test-group) eq xs:integer(0)))) then
    count($node//xqCat:test-case)
  else
    ()
};

declare function conf:failing-tests($node, $no_spaces as xs:integer, $isDetailed as xs:boolean)
{
  let $padding := functx:repeat-string(codepoints-to-string(160), $no_spaces)
  return
    if(not($isDetailed) or 
      ($isDetailed and (count($node//xqCat:test-group) eq xs:integer(0)))) then
    (: if there are no sub-categories and there are tests in this category :)
    {
      (: list all tests that are not passing in either XQuery or XQueryX :)
      for $testCase in $node//xqCat:test-case
      let $testCaseName := data($testCase/@name)
      let $xqTmp  := data(dml:collection( xs:QName("conf:xquery"))[@name = $testCaseName]/@value)
      let $xqStatus := if(exists($xqTmp)) then $xqTmp else "pass"
      let $xqxTmp := data(dml:collection(xs:QName("conf:xqueryx"))[@name = $testCaseName]/@value)
      let $xqxStatus := if(exists($xqxTmp)) then $xqxTmp else "pass"
      where (exists(dml:collection( xs:QName("conf:xquery"))[@name = $testCaseName]) or
             exists(dml:collection( xs:QName("conf:xqueryx"))[@name = $testCaseName]) and
             not(ends-with($testCaseName,"unsupported")))          
      return
        if(($xqStatus = "pass") and ($xqxStatus = "pass")) then ()
        else
          <tr bgcolor="lightcyan">
            <td >{$padding}
              <a target="_blank" href="{concat('http://dev.w3.org/2007/xquery-update-10-test-suite/Queries/XQuery/',data($testCase/@FilePath),$testCaseName,'.xq')}">{$testCaseName}</a>
            </td>
            <td class="xq" bgcolor="{if($xqStatus = 'fail') then 'coral' else if($xqStatus = 'pass') then 'mediumseagreen' else 'lightcyan'}">
              {$xqStatus}</td>
            <td class="xqx" bgcolor="{if($xqxStatus = 'fail') then 'coral' else if($xqxStatus = 'pass') then 'mediumseagreen' else 'lightcyan'}">
              {$xqxStatus}</td>
          </tr>
    }
    else ()
};

declare function conf:create-tr(
  $nodes, 
  $no_spaces as xs:integer,
  $StaticTyping as xs:boolean)
{
  let $padding := functx:repeat-string(codepoints-to-string(160), $no_spaces)
  return
    for $test-group in $nodes  
    let $failingTests := conf:failing-tests($test-group, ($no_spaces + xs:integer(2)), fn:true())
    let $total := conf:count-available-tests($test-group, fn:true())
    let $passingXQ := $total - count($failingTests//td[@class = "xq"])
    let $notApplXQ := count(for $test in $failingTests
                            where (($test//td[@class = "xq"]) and
                                   ($test//td[@class = "xq"]/text()="not applicable"))
                            return $test)
    let $passingXQX := $total - count($failingTests//td[@class = "xqx"])
    let $notApplXQX := count(for $test in $failingTests
                             where (($test//td[@class = "xqx"]) and
                                    ($test//td[@class = "xqx"]/text() = "not applicable"))
                             return $test)
    let $isStaticTyping as xs:boolean := fn:contains(data($test-group/xqCat:GroupInfo/xqCat:title),"Static Typing")
    return
    (
     if(count($test-group//xqCat:test-case) ne xs:integer(0)) then
      <tr bgcolor="lightcyan">
        <td bgcolor="{if(not(exists($total))) then 'paleturquoise' else 'lightcyan'}">
          {concat($padding,data($test-group/xqCat:GroupInfo/xqCat:title))}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise'
                      else if($passingXQ = $total) then 'mediumseagreen' 
                      else if($isStaticTyping) then 'white'
                      else if(($passingXQ div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($passingXQ,"/",$total) else ()}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise' 
                      else if($passingXQX = $total) then 'mediumseagreen'
                      else if($isStaticTyping) then 'white' 
                      else if(($passingXQX div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($passingXQX,"/",$total) else ()}</td>
      </tr> else (),
      conf:create-tr($test-group/xqCat:test-group, 
                     ($no_spaces + xs:integer(2)),
                     $isStaticTyping)
    )
};

declare %private function conf:round-decimal(
  $tmp  as xs:decimal) as xs:decimal
{
  let $dec := ($tmp - floor($tmp))*100
  return (floor($tmp)+(round($dec) div 100))
};

declare %private function conf:is-root-category(
  $catName as xs:string, 
  $XQTS_catalog) as xs:boolean
{
  let $rootCategories := for $test-group in $XQTS_catalog/xqCat:test-suite/xqCat:test-group
                         return xs:string($test-group/xqCat:GroupInfo/xqCat:title)
  return exists(conf:value-intersect($rootCategories, $catName))
};

declare %ann:sequential function conf:create-tr-summary(
  $nodes, 
  $no_spaces as xs:integer,
  $StaticTyping as xs:boolean,
  $XQTS_catalog)
{
  let $padding := functx:repeat-string(codepoints-to-string(160), $no_spaces)
  return
    for $test-group in $nodes  
    let $failingTests := conf:failing-tests($test-group, ($no_spaces + xs:integer(2)), fn:false())
    let $total := conf:count-available-tests($test-group, fn:false())
    let $passingXQ := $total - count($failingTests//td[@class = "xq"])
    let $notApplXQ := count(for $test in $failingTests
                            where (($test//td[@class = "xq"]) and
                                   ($test//td[@class = "xq"]/text() = "not applicable"))
                            return $test) 
    let $passingXQX := $total - count($failingTests//td[@class = "xqx"])
    let $notApplXQX := count(for $test in $failingTests
                             where (($test//td[@class = "xqx"]) and
                                   ($test//td[@class = "xqx"]/text() = "not applicable"))
                             return $test)
    let $isStaticTyping as xs:boolean := fn:contains(data($test-group/xqCat:GroupInfo/xqCat:title),"Static Typing")
    let $percentXQ := conf:round-decimal(($passingXQ div $total)*100)
    let $percentXQX := conf:round-decimal(($passingXQX div $total)*100)    
    return
    (if(conf:is-root-category(data($test-group/xqCat:GroupInfo/xqCat:title), $XQTS_catalog)) then
      conf:collect-number(data($test-group/xqCat:GroupInfo/xqCat:title), xs:string($percentXQ))
     else ()      
     ,
     if(count($test-group//xqCat:test-case) ne xs:integer(0)) then
      <tr bgcolor="lightcyan">
        <td bgcolor="{if(not(exists($total))) then 'paleturquoise' else 'lightcyan'}">
          {concat($padding,data($test-group/xqCat:GroupInfo/xqCat:title))}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise'
                      else if($passingXQ = $total) then 'mediumseagreen'
                      else if($isStaticTyping) then 'white'
                      else if(($passingXQ div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($passingXQ,"/",$total) else ()}<br />
           {if(conf:is-root-category(data($test-group/xqCat:GroupInfo/xqCat:title), $XQTS_catalog)) then concat($percentXQ,'%') else ()}</td>
        <td align="center" bgcolor="{if(not(exists($total))) then 'paleturquoise' 
                      else if($passingXQX = $total) then 'mediumseagreen'
                      else if($isStaticTyping) then 'white'
                      else if(($passingXQX div $total)*100 > 25) then 'palegreen' else 'coral'}">
          {if(exists($total) and ($total ne xs:integer(0))) 
           then concat($passingXQX,"/",$total) else ()}<br />
           {if(conf:is-root-category(data($test-group/xqCat:GroupInfo/xqCat:title), $XQTS_catalog)) then concat($percentXQX,'%') else ()}</td>
      </tr> else (),
      if(data($test-group/@name) = "Optional") then
      conf:create-tr-summary($test-group/xqCat:test-group, 
                            ($no_spaces + xs:integer(2)),
                            $isStaticTyping,
                            $XQTS_catalog)
      else()
    )
};

declare %ann:sequential function conf:create-collection($syntax as xs:string, $XQTS_catalog)
{
  variable $noTestsCatalog := count($XQTS_catalog//*:test-case);
  
  if($syntax eq $conf:XQuery) then
  {
    ddl:create($conf:xquery);
 
    variable $noTestsSubmissionXQuery := count(dml:collection(xs:QName("conf:submissionXquery")));
    
    if($noTestsCatalog > $noTestsSubmissionXQuery) then
    {
      variable $untested as xs:integer := trace(($noTestsCatalog - $noTestsSubmissionXQuery),
                                          "tests that are not reported in the XQuery submission file and have to be identified...");
      (: there are tests for which we do not report anything :)
      
      for $testCatalog in $XQTS_catalog//*:test-case
      where empty(dml:collection(xs:QName("conf:submissionXquery"))[@name = data($testCatalog/@name)])
      return
        dml:apply-insert-nodes($conf:xquery, <test name="{data($testCatalog/@name)}" value="no result"/>);
        
    }
    else ();
    
    for $testFailed in dml:collection(xs:QName("conf:submissionXquery"))
    let $comment := data($testFailed/@comment)
    where (not(data($testFailed/@result) = "pass") and 
          not(ends-with(data($testFailed/@name),"-fail")))
    return
      if(exists($comment)) then
        dml:apply-insert-nodes($conf:xquery, <test name="{data($testFailed/@name)}" value="{data($testFailed/@result)}" comment="{$comment}"/>);
      else
        dml:apply-insert-nodes($conf:xquery, <test name="{data($testFailed/@name)}" value="{data($testFailed/@result)}"/>);
  }
  else if($syntax eq $conf:XQueryX) then
  {
    ddl:create($conf:xqueryx);
    
    variable $noTestsSubmissionXQueryX := count(dml:collection(xs:QName("conf:submissionXqueryX")));

    if($noTestsCatalog > $noTestsSubmissionXQueryX) then
    {
      variable $untested as xs:integer := trace(($noTestsCatalog - $noTestsSubmissionXQueryX),
                                          "tests that are not reported in the XQueryX submission file and have to be identified..."); 
      (: there are tests for which we do not report anything :)
      
      for $testCatalog in $XQTS_catalog//*:test-case
      where empty(dml:collection(xs:QName("conf:submissionXqueryX"))[@name = data($testCatalog/@name)])
      return
        dml:apply-insert-nodes($conf:xqueryx, <test name="{data($testCatalog/@name)}" value="no result"/>);
      
    }
    else ();
    
    for $testFailed in dml:collection(xs:QName("conf:submissionXqueryX"))
    let $comment := data($testFailed/@comment)
    where (not(data($testFailed/@result) = "pass") and
          not(ends-with(data($testFailed/@name),"-fail")))
    return 
      if(exists($comment)) then
        dml:apply-insert-nodes($conf:xqueryx, <test name="{data($testFailed/@name)}" value="{data($testFailed/@result)}" comment="{$comment}"/>);
      else
        dml:apply-insert-nodes($conf:xqueryx, <test name="{data($testFailed/@name)}" value="{data($testFailed/@result)}"/>);
    
  }
  else
  ();
};

declare %ann:sequential function conf:create-collection-submissions()
{
  ddl:create($conf:submissionXquery);
  
  variable $doc := fn:parse-xml(file:read-text(file:resolve-path($conf:XQUTS_submission)));

  for $test in $doc/xqRes:test-suite-result//xqRes:test-case
  return dml:apply-insert-nodes($conf:submissionXquery, $test);

  (: collect features :)
  for $feature in $doc/xqRes:test-suite-result/xqRes:implementation/xqRes:features/xqRes:feature
  return
    conf:collect-feature(data($feature/@name),
                         data($feature/@supported));

  ddl:create($conf:submissionXqueryX);
  
  let $doc := fn:parse-xml(file:read-text(file:resolve-path($conf:XQUTSX_submission)))
  return
    for $test in $doc/xqRes:test-suite-result//xqRes:test-case
    return dml:apply-insert-nodes($conf:submissionXqueryX, $test);
};

declare function conf:generate-detailed-table($XQTS_catalog)
{
  <table bgcolor="lightcyan">
    <tr><td>W3C XQuery Update Facility 1.0 features</td><td>XQuery</td><td>XQueryX</td></tr>
    <tr><td></td><td></td><td></td></tr>
    {
      for $test-group in $XQTS_catalog/xqCat:test-suite/xqCat:test-group
      (: we disable Static Typing explicitelly because there is no clear rule to connect the features with test-groups description :)
      let $isStaticTyping as xs:boolean := fn:contains(data($test-group/xqCat:GroupInfo/xqCat:title),"Static Typing")
      return conf:create-tr($test-group,
                            xs:integer(0),
                            $isStaticTyping)
    }
  </table>
};

declare %ann:sequential function conf:generate-summary-table($XQTS_catalog)
{
  <table bgcolor="lightcyan">
    <tr><td>W3C XQuery Update Facility 1.0 features</td><td>XQuery</td><td>XQueryX</td></tr>
    <tr><td></td><td></td><td></td></tr>
    {
      for $test-group in $XQTS_catalog/xqCat:test-suite/xqCat:test-group
      (: we disable Static Typing explicitelly because there is no clear rule to connect the features with test-groups description :)
      let $isStaticTyping as xs:boolean := fn:contains(data($test-group/xqCat:GroupInfo/xqCat:title),"Static Typing")
      return conf:create-tr-summary($test-group,
                                    xs:integer(0),
                                    $isStaticTyping,
                                    $XQTS_catalog)
    }
  </table>
};

declare function conf:generate-features-table()
{
  <table bgcolor="lightcyan">
    <tr><td>W3C XQuery Update Facility 1.0 feature</td><td>supported</td></tr>
    <tr><td></td><td></td></tr>
    {
      for $feature in $conf:features/feature
      let $isSupported := xs:boolean(data($feature/@supported))
      return
      <tr>
        <td>{data($feature/@name)}</td>
        <td bgcolor="{if($isSupported) then 'mediumseagreen' else 'white'}">{data($feature/@supported)}</td>
      </tr>
    }
  </table>
};

declare %private function conf:create-summary-string() as xs:string
{
  let $minConf := for $number in $conf:numbers/number where xs:string($number/@name) eq "Minimal Conformance" return xs:string(data($number/@value))
  return
    concat("Zorba achieves ",
            $minConf, 
            "% on Minimal conformance (", 
            string-join(( for $number in $conf:numbers/number where xs:string($number/@name) eq "Optional Features" 
                          return concat(xs:string(data($number/@value)),"% on ",xs:string(data($number/@name)))),", "),
            ") for the W3C XQuery Update Facility Test Suite.
            
Please see the table below for more details.")
};

declare %ann:sequential function conf:test()
{  
  variable $XQTS_catalog := fn:parse-xml(file:read-text(file:resolve-path(concat($conf:XQUTS_PATH,file:directory-separator(),"XQUTSCatalog.xml"))));
  
  conf:create-collection($conf:XQuery, $XQTS_catalog);
  conf:create-collection($conf:XQueryX, $XQTS_catalog);
  
  variable $pageNameSummary := "conformanceXQUTSSummary";
  variable $pathSummary := fn:concat($conf:XQUTS_PATH, file:directory-separator(), $pageNameSummary, ".dox"); 
  
  file:write(trace($pathSummary,"output file path"),
             ("/** \page conformanceXQUTSSummary  Summary W3C XQuery Update Facility 1.0 conformance

The following table shows the supported features:
",
             {conf:generate-features-table()},"
",
             {conf:generate-summary-table($XQTS_catalog)}
,"
*/"), 
             $conf:serParamXhtml);

  variable $pageNameDetailed := "conformanceXQUTS";
  variable $pathDetailed := fn:concat($conf:XQUTS_PATH, file:directory-separator(), $pageNameDetailed, ".dox"); 
  
  file:write(trace($pathDetailed,"output file path"),
             ("/** \page conformanceXQUTS  W3C XQuery Update Facility 1.0 Conformance.

",
             {conf:create-summary-string()},"
",
             {conf:generate-detailed-table($XQTS_catalog)}
,"
*/"), 
             $conf:serParamXhtml);

};
