(:
 : Copyright 2006-2011 The FLWOR Foundation.
 :
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 : http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
:)

import module namespace file = "http://expath.org/ns/file";
declare namespace ann = "http://www.zorba-xquery.com/annotations";
declare namespace notice = "http://www.zorba-xquery.com/notice";

declare variable $local:path-to-zorba := "${PROJECT_SOURCE_DIR}"; 
declare variable $local:zorba-version := "${ZORBA_MAJOR_NUMBER}.${ZORBA_MINOR_NUMBER}.${ZORBA_PATCH_NUMBER}";

declare %ann:nondeterministic function local:read-notice-file($dirname as xs:string) as node()?
{
  let $ftxt := fn:concat($dirname, "/NOTICE.xml")
  return
    if(file:is-file($ftxt)) then
      fn:parse-xml(file:read-text($ftxt))
    else
      ()
};

declare function local:header() as xs:string
{
  concat(
    "-----------", "&#10;",
    "Zorba ", $local:zorba-version, "&#10;",
    "-----------", "&#10;&#10;",
    "(Note: This file is generated automatically from NOTICE.xml.&#10;",
    "Please do not modify this file directly.)&#10;&#10;"
  )
};

declare function local:contents($notice as node()?)
{
  string-join(
    (
      local:header(), "&#10;",
      local:native-license($notice),
      local:other-files($notice),
      local:external-libs($notice),
      local:external-apps($notice)
    ),
    "&#10;"
  )
};

declare function local:native-license($notice as node()?) as xs:string
{
  concat(
    string($notice/notice:notice/notice:master-license/notice:license),
    "&#10;",
    string($notice/notice:notice/notice:master-license/notice:text)
  )
};

declare function local:external-apps($notice as node()?) as xs:string
{
  concat(
    "&#10;",
    "External applications used by this project:",
    "&#10;----------------------------------------------------&#10;&#10;",
    string-join(
      for $el in $notice/notice:notice/notice:external-app
      return
        concat (
          "Name: ", string($el/notice:name), "&#10;",
          "Preferred version: ", string($el/notice:version),"&#10;",
          "Is mandatory: ",
          let $m := string($el/@mandatory)
          return if($m = "") then "true" else $m,
          "&#10;",
          "Website: ", string($el/notice:website), "&#10;",
          if ($el/notice:license)
          then
            concat("License: ", string($el/notice:license),"&#10;")
          else
            "",
          "Copyright: ", string($el/notice:copyright),"&#10;",
          "External notice: &#10;", string($el/notice:foreign-notice)
       ),
     "&#10;----------------------------------------------------&#10;&#10;"
   )
  )
};

declare function local:external-libs($notice as node()?) as xs:string
{
  concat(
    "&#10;",
    "External libraries used by this project:",
    "&#10;----------------------------------------------------&#10;&#10;",
    string-join(
      for $el in $notice/notice:notice/notice:external-lib
      return
        concat (
          "Name: ", string($el/notice:name), "&#10;",
          "Preferred version: ", string($el/notice:version),"&#10;",
          "Is mandatory: ",
          let $m := string($el/@mandatory)
          return if($m = "") then "true" else $m,
          "&#10;",
          "Website: ", string($el/notice:website), "&#10;",
          if ($el/notice:license)
          then
            concat("License: ", string($el/notice:license),"&#10;")
          else
            "",
          "Copyright: ", string($el/notice:copyright),"&#10;",
          "External notice: &#10;", string($el/notice:foreign-notice)
       ),
     "&#10;----------------------------------------------------&#10;&#10;"
   )
  )
};

declare function local:other-files($notice as node()?) as xs:string
{
  concat(
    "&#10;",
    "Other files used by this project:",
    "&#10;----------------------------------------------------&#10;&#10;",
    string-join(
      for $ff in  $notice/notice:notice/notice:foreign-files
      return
        concat (
          string-join(
            for $f in $ff/notice:file
            return
              concat(
                fn:string($f),
                let $m := string($f/@is-modified)
                return if($m = "true") then " (has been modified)" else ""
              ),
            "&#10;"
          ),
          "&#10;",
          "&#10;",
          concat("Copyright: ", string($ff/notice:copyright)),
          "&#10;",
          if ($ff/notice:website)
          then
           concat("Website: ", $ff/notice:website)
          else
           "",
          "&#10;",
          string($ff/notice:foreign-notice)
       ),
       "&#10;----------------------------------------------------&#10;&#10;"
     )
  )
};

declare %ann:sequential function local:generate-notice (
  $relpath-from-this as xs:string, 
  $notice as node()?
)
{
  if(fn:empty($notice)) then
    ()
  else
    let $contents := local:contents($notice)
    return file:write (
      fn:concat($relpath-from-this, "/NOTICE.txt"), $contents,
      <output:serialization-parameters
             xmlns:output="http://www.w3.org/2010/xslt-xquery-serialization">
        <output:method value="text"/>
      </output:serialization-parameters>
    )
};


(" generate NOTICE.txt for Zorba in ", $local:path-to-zorba, "
",
local:generate-notice($local:path-to-zorba, local:read-notice-file($local:path-to-zorba))
)
