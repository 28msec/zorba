<feed xmlns="http://www.w3.org/2005/Atom"><title>28.io - Blog</title><link href="http://www.28.io/blog/atom.xml"/><updated>2013-12-02T18:22:56.283305+01:00</updated><author><name>28msec</name></author><entry><title>Zorba 3.0 - Kratos</title><id>/68780805079/zorba-30--kratos</id><summary>We are more than proud to announce the release of Zorba 3.0, codename Kratos. Kratos contains major improvements of the JSONiq language, the language bindings, as well as all of the XQuery and JSONiq modules. Moreover, we made considerable performance improvements and fixed a huge number of bugs. Because we can’t elaborate on all changes, please refer to to the ChangeLog for an exhaustive list of changes.</summary><updated>Mon, 02 Dec 2013 09:44:00 -0500</updated><content type="html">&lt;p&gt;We are more than proud to announce the release of Zorba 3.0, codename Kratos. Kratos contains major improvements of the JSONiq language, the language bindings, as well as all of the XQuery and JSONiq modules. Moreover, we made considerable performance improvements and fixed a huge number of bugs. Because we can&amp;#8217;t elaborate on all changes, please refer to to the ChangeLog for an exhaustive list of changes.&lt;/p&gt;
&lt;h2&gt;JSONiq&lt;/h2&gt;
&lt;p&gt;We have been keeping up with the latest &lt;a href="http://jsoniq.org" target="_blank"&gt;JSONiq language improvements.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Array Selectors and Array Unboxing&lt;/h3&gt;
&lt;p&gt;JSONiq now features a syntactically much pleasant way to unbox an array or select a member of an array. For example,&lt;/p&gt;
&lt;pre&gt;[ "foo", "bar" ] [[2]]&lt;/pre&gt;
&lt;p&gt;extract the second member of the array (&amp;#8220;bar&amp;#8221;).&lt;/p&gt;
&lt;p&gt;Since JSONiq expressions are composable, you can also use any expression for the left-hand side.&lt;/p&gt;
&lt;pre&gt;{ field : [ "one",  { "foo" : "bar" } ] }.field[[2]].foo&lt;/pre&gt;
&lt;p&gt;returns &amp;#8220;bar&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Unboxing an array was so far possible using the jn:members function. JSONiq now features a convenient syntax for doing this.&lt;/p&gt;
&lt;pre&gt;[ "foo", "bar" ][]&lt;/pre&gt;
&lt;p&gt;returns &amp;#8220;foo&amp;#8221; and &amp;#8220;bar&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Because all the JSONiq functions and (updating) expressions implement implicit iteration and skip input to which the functionality is not applicable, you can now write something like&lt;/p&gt;
&lt;pre&gt;([ "foo", "bar" ], { "foo" : "bar" }, true, [ 1, 2, 3 ] )[&lt;/pre&gt;
&lt;p&gt;which returns&lt;/p&gt;
&lt;pre&gt;"foo" "bar" 1 2 3&lt;/pre&gt;
&lt;h2&gt;JSound&lt;/h2&gt;
&lt;p&gt;Over the past decade, the need for more flexible and scalable dataformats such as JSON has greatly increased. The NoSQL universe brings many new ideas on how to build scalable data storage. With JSONiq and Zorba you can easily process all such kinds of data stored in a variety of NoSQL stores. The last missing piece is a way to make sure that the data stored is consistent and sound. This is where schemas come into play. With Zorba 3.0, we are proud to announce the first beta implementation of the &lt;a href="http://www.jsoniq.org/docs/JSOund/html-single/"&gt;JSound schema definition language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The JSound module provides functions to validate JSONiq objects or arrays (called instances) against a JSound schema. The following example validates a JSON instance object against the line type in an images schema.&lt;/p&gt;
&lt;pre&gt;import module namespace jsv = "http://jsound.io/modules/validate";

let $jsd := {
   "$namespace" : "http://zorba.io/modules/images/",
   "$types" : [
    {
      "$name" : "line",
      "$kind" : "object",
      "$content" :
      {
        "start" :
        {
          "$type" : "integer"
        },
        "end" :
        {
          "$type" : "integer"
        }
      }
    }
   ]
}

let $instance := {
  "start": 1,
  "end": 5
}
return
  jsv:jsd-valid($jsd, "line", "http://zorba.io/modules/images/", $instance)&lt;/pre&gt;
&lt;p&gt;The implementation is still beta but we are working on testing and finalizing it with the upcoming release.&lt;/p&gt;
&lt;h2&gt;Modules &amp;amp; Functions&lt;/h2&gt;
&lt;p&gt;Beyond the JSONiq changes, we also JSONified several of the modules making them much easier to use.&lt;/p&gt;
&lt;h2&gt;CSV-to-JSON and Back&lt;/h2&gt;
&lt;p&gt;A huge amount of data out there is fully structured and available in the CSV format. Mostly, this data comes out of the world&amp;#8217;s most famous BI tool (aka Excel) or relational databases. With Zorba&amp;#8217;s new CSV-JSON conversion module, it&amp;#8217;s very easy to parse CSV data making it available for processing using the powerful JSONiq language.&lt;/p&gt;
&lt;p&gt;For example, consider the following query:&lt;/p&gt;
&lt;pre&gt;import module namespace csv = "http://zorba.io/modules/json-csv";

let $csv := "string,integer,decimal,double,boolean,null
foo,42,98.6,1E4,false,null"
return csv:parse($csv)&lt;/pre&gt;
&lt;p&gt;which returns&lt;/p&gt;
&lt;pre&gt;{ "string" : "foo", "integer" : 42, "decimal" : 98.6, "double" : 10000, "boolean" : false, "null" : null }&lt;/pre&gt;
&lt;p&gt;The parse function provides a huge number of options to customize the conversion (e.g. configuring the separator, turning off casting of unquoted values, or providing custom field names). Of course, the module also allows serialization of JSONiq objects to CSV.&lt;/p&gt;
&lt;pre&gt;import module namespace csv = "http://zorba.io/modules/json-csv";                                                                                          
 
let $values := (
  {
    "first" : "one",                                                                                                                                                                  
    "second" : "two",
    "third" : "three"
  },
  {   
    "first" : "four",                                                                                                                                                                 
    "second" : "embedded \" quote",
    "third" : "embedded\r\nnewline" 
  }       
)
let $options := { "field-names" : [ "first", "second", "third" ] }                                                                                                                    
return csv:serialize( $values, $options )&lt;/pre&gt;
&lt;h2&gt;HTTP-Client&lt;/h2&gt;
&lt;p&gt;The HTTP-Client module is a crucial piece for communicating with any kind of service on the Web. So far, the input and output of functions in this module were based on the XML data model (using nodes) making it very hard to use. We have rewritten the module to leverage the JSONiq data model (using objects and arrays) - allowing the developer to interact with the Web much easier. For example, making a complex HTTP request (i.e. including custom headers) and processing the result as XML is as easy as&lt;/p&gt;
&lt;pre&gt;import module namespace http = "http://zorba.io/modules/http-client";

let $req :=
{
  "method": "POST",
  "href": "http://zorbatest.lambda.nu:8080/http-test-data/request.php",
  "headers": {"foo":"bar"},
  "body": {
    "media-type": "text/plain",
    "content": "
      Dies ist ein kleiner Test
    "
  }
};
return parse-xml(http:send-request($req).body.content)&lt;/pre&gt;
&lt;h2&gt;And Much More&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;All modules take their options as JSONiq objects which greatly improves usability.&lt;/li&gt;
&lt;li&gt;More and improved optimization rules like hoisting, flwor-merging, or sort elimination.&lt;/li&gt;
&lt;li&gt;Full encoding support in the file module.&lt;/li&gt;
&lt;li&gt;Performance improvements of castable as and binary en- and decoding.&lt;/li&gt;
&lt;li&gt;Even better conformance with the XQuery 3.0 conformance test suite.&lt;/li&gt;
&lt;li&gt;A new module for fast set-based sequence operations such as value-intersect or value-except.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We can&amp;#8217;t wait for you to download Zorba 3.0 and give it a try!&lt;/p&gt;</content></entry><entry><title>Zorba 2.9 - Io</title><id>/68774681365/zorba-29--io</id><summary>The Zorba Team is proud to announce the release of Zorba 2.9, codename Io! Io includes extensions and improvements to our JSONiq support; enhanced support for Higher-Order Functions (HOF); and extensive improvements in XQuery 3.0 comformance.</summary><updated>Mon, 02 Dec 2013 07:34:21 -0500</updated><content type="html">&lt;p&gt;&lt;span&gt;The Zorba Team is proud to announce the release of Zorba 2.9, codename Io! Io includes extensions and improvements to our &lt;/span&gt;&lt;a href="http://www.jsoniq.org/"&gt;JSONiq&lt;/a&gt;&lt;span&gt; support; enhanced support for Higher-Order Functions (HOF); and extensive improvements in XQuery 3.0 comformance. There are also many optimizations, a number of new features, and more than 65 bug fixes! We can&amp;#8217;t cover everything here, so please see the &lt;/span&gt;&lt;a href="https://launchpadlibrarian.net/142881735/ChangeLog"&gt;ChangeLog&lt;/a&gt;&lt;span&gt; for complete information.&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;JSONiq&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.jsoniq.org/"&gt;JSONiq&lt;/a&gt;&lt;span&gt; - the language for querying JSON data - has been expanding, and Zorba&amp;#8217;s implementation is keeping up. New in this release is the ability to declare a module or query to be JSONiq via a version declaration (the first line of the query)&amp;#160;:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;jsoniq version "1.0";
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;You can also save your query in a file with a &amp;#8220;.jq&amp;#8221; extension to enable this.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Doing so invokes a new JSONiq query parser which offers several syntax improvements for dealing with JSON data. In particular, you can now use the familiar &amp;#8220;.&amp;#8221; notation for accessing JSON object members:&lt;/p&gt;
&lt;pre&gt;let $obj := { "field1" : 42 }
return $obj.field1
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;This parser also understands JSON-style string escape characters, instead of XML-style &amp;amp;XXX; character references. So you should be able to cut-and-paste valid JSON into your query.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;Higher-Order Functions&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;Zorba has supported for &lt;/span&gt;&lt;em&gt;function items&lt;/em&gt;&lt;span&gt; for some time, but Zorba 2.9 ups the ante with full support for XQuery 3.0 &lt;/span&gt;&lt;em&gt;Higher-Order Functions&lt;/em&gt;&lt;span&gt; - functions that take other functions as arguments. This includes sequence-type extensions for declaring variables and parameters as specifically-typed functions; dynamic function evaluation; and even partial function application, which is a powerful functional-programming technique. Zorba 2.9 also includes the XQuery 3.0 functions dealing with higher-order functions, such as&lt;/span&gt;&lt;code&gt;fn:filter()&lt;/code&gt;&lt;span&gt; and &lt;/span&gt;&lt;code&gt;fn:for-each()&lt;/code&gt;&lt;span&gt;. Be on the lookup for a future blog entry covering these features in more detail.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;XQuery 3.0 Conformance&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;The W3C has a conformance test suite for XQuery 1.0 and 3.0 called &lt;/span&gt;&lt;a href="http://dev.w3.org/2011/QT3-test-suite/"&gt;QT3&lt;/a&gt;&lt;span&gt;, which comprises over 26,000 test cases. While Zorba 2.8 had good compliance, we made strides in this release to clean up many small (and a few not-so-small) conformance issues. Zorba 2.9 boasts over 99.5% conformance with XQuery 1.0, and 99.1% conformance with XQuery 3.0. Check out our &lt;/span&gt;&lt;a href="http://www.zorba.io/documentation/2.9/zorba/conformance.html"&gt;full conformance report&lt;/a&gt;&lt;span&gt;, including details of our support for XQuery Update Facility and XQuery Full-Text.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;And much more&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;Extensions to the &amp;#8220;uri&amp;#8221; module for parsing URIs into components&lt;/li&gt;
&lt;li&gt;Support for XML canonicalization in the &amp;#8220;xml&amp;#8221; module&lt;/li&gt;
&lt;li&gt;Support for most XML Schema 1.1 features, including &lt;code&gt;xs:dateTimeStamp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeswitch&lt;/code&gt; extended to support unions of types&lt;/li&gt;
&lt;li&gt;&amp;#8230;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Go check it out today! &lt;/span&gt;&lt;/p&gt;</content></entry><entry><title>Zorba 2.8 - The (No)SQL Edition</title><id>/60028721581/zorba-28--the-nosql-edition</id><summary>The Zorba team is pleased to announce the release of Zorba 2.8, codename Hermes. Hermes ships five new modules: four brand new database drivers and a new info-extraction module for querying concepts and entities in natural language text. This release provides several improvements in the Zorba optimizer and twenty-two bug fixes (see Changelog). It is available in our download section.</summary><updated>Wed, 23 Jan 2013 00:00:00 -0500</updated><content type="html">&lt;div class="entry-info"&gt;
&lt;p&gt;The Zorba team is pleased to announce the release of Zorba 2.8, codename Hermes. Hermes ships five new modules: &lt;a href="/html/modules/db/couchbase"&gt;four brand new database drivers&lt;/a&gt; and a new &lt;a href="/html/modules/zorba/data-cleaning/info-extraction"&gt;info-extraction module&lt;/a&gt; for querying concepts and entities in natural language text. This release provides several improvements in the Zorba optimizer and twenty-two bug fixes (see &lt;a href="https://launchpadlibrarian.net/129093447/ChangeLog"&gt;Changelog&lt;/a&gt;). It is available in our &lt;a href="/html/download"&gt;download section&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="entry-content"&gt;
&lt;h2&gt;New Database Drivers&lt;/h2&gt;
Last summer, we released &lt;a href="http://www.zorba-xquery.com/html/entry/2012/08/20/Eros"&gt;the first JSONiq implementation&lt;/a&gt;. &lt;a href="http://jsoniq.org/"&gt;JSONiq&lt;/a&gt; extends the XQuery data model with JSON objects and arrays. It enables developers to leverage the power and expressiveness of XQuery in both JSON stores and relational databases. Moreover, JSONiq is a unified query language that you can run accross multiple NoSQL stores. It also brings advanced query processing features in this space: joins, aggregation, windows, full-text search, collation support, powerful date/time arithmetic, and more. Hermes contains four new databases drivers in order to help you process your data:

&lt;ul&gt;&lt;li&gt;&lt;a href="/html/modules/db/couchbase"&gt;Couchbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/html/modules/db/oracle-nosql"&gt;Oracle NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/html/modules/db/sqlite"&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/html/modules/db/jdbc"&gt;JDBC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Couchbase&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.couchbase.com/"&gt;Couchbase&lt;/a&gt; is a key-value database management system optimized for storing unstructured data. In the code snippet below, we connect to a couchbase instance at &lt;em&gt;localhost:8091&lt;/em&gt; and create a view on the bucket where the key of the map is the name of the state and the value is the population. For each row in the document, we group them by state and compute the total population for the state. Finally, we return the list of states with their total population.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;couchbase&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/couchbase"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;variable&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;couchbase:connect&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"host"&lt;/span&gt;&lt;span class="text"&gt;: &lt;/span&gt;&lt;span class="string"&gt;"localhost:8091"&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"username"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="identifier"&gt;null&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"password"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="identifier"&gt;null&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"bucket"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"default"&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;variable&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$view-name&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;couchbase:create-view&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"zip"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"zip"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="string"&gt;"key"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"doc.state"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"values"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"doc.pop"&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;variable&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$data&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;couchbase:view&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$view-name&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$data&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"rows"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; ! &lt;/span&gt;&lt;span class="support function"&gt;jn:members&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;group&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;by&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$state&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"key"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$population&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;sum&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"value"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"state"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="variable"&gt;$state&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"population"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="variable"&gt;$population&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;h3&gt;Oracle NoSQL&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.oracle.com/technetwork/products/nosqldb/overview/index.html"&gt;Oracle NoSQL Database&lt;/a&gt; is a distributed key-value database. It is built upon the proven Oracle Berkeley DB Java Edition high-availability storage engine. In the code snippet below, we connect to an Oracle NoSQL instance and run the same aggregation query than above. The Oracle NoSQL module has advanced functions that allow to return multiple objects at once. For example, in order to retrieve all zip documents from the database as JSON, the multi-get-json function can be used as follows:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;nosql&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/oracle-nosqldb"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;nosql:connect&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"store-name"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"kvstore"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"helper-host-ports"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="string"&gt;"localhost:5000"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$zip&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;nosql:multi-get-json&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$db&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"major"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"zips"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="string"&gt;"prefix"&lt;/span&gt;&lt;span class="text"&gt;: &lt;/span&gt;&lt;span class="string"&gt;""&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                                 &lt;/span&gt;&lt;span class="variable"&gt;$nosql:depth-PARENT_AND_DESCENDANTS&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                                 &lt;/span&gt;&lt;span class="variable"&gt;$nosql:direction-FORWARD&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"value"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;group&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;by&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$state&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$zip&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"state"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$pop&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;sum&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$zip&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"pop"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"state"&lt;/span&gt;&lt;span class="text"&gt;: &lt;/span&gt;&lt;span class="variable"&gt;$state&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"population"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="variable"&gt;$pop&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;h3&gt;SQLite&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.sqlite.org/"&gt;SQLite&lt;/a&gt; is a self-contained, serverless, zero-configuration, transactional SQL database engine. In the code snippet below, we connect to a database located at &lt;em&gt;small.db&lt;/em&gt; and get all fields from all rows in &lt;em&gt;maintable&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;s&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/sqlite"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;s:connect&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"small.db"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;s:execute-query&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"select * from maintable"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;/pre&gt;
&lt;h3&gt;JDBC&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://www.oracle.com/technetwork/java/javase/jdbc/index.html"&gt;JDBC&lt;/a&gt; modules enables to query any JDBC enabled database (there are quite a few ;-)). In the code snippet below, we connect to a MySQL database running at &lt;em&gt;localhost:3307&lt;/em&gt;, and get all fields from all rows in &lt;em&gt;maintable&lt;/em&gt;&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;jdbc&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/jdbc"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;variable&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;jdbc:connect&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"url"&lt;/span&gt;&lt;span class="text"&gt;: &lt;/span&gt;&lt;span class="string"&gt;"jdbc:mysql://localhost:3307/"&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"user"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"root"&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"password"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;""&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="support function"&gt;jdbc:execute-query&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$con&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"select * from maintable"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;Info Extraction&lt;/h2&gt;
&lt;p&gt;Hermes introduces a new &lt;a href="/html/modules/zorba/data-cleaning/info-extraction"&gt;info extraction module&lt;/a&gt;, providing data extraction functions that return the entities, relations, categories and concepts present in a given text, with basis on &lt;a href="http://developer.yahoo.com/contentanalysis/"&gt;Yahoo&amp;#8217;s Content Analysis webservice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the example below, we extract the concepts available from a random newpaper headline:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;ex&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/info-extraction"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;          &lt;/span&gt;&lt;br/&gt;&lt;span class="support function"&gt;ex:entities&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"President Obama called Wednesday on Congress to extend a tax break for students."&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This query will return (you can also &lt;a href="http://www.zorba-xquery.com/html/demo#9AkjaMnWwGYpJXJGQ7vswhVsOuc="&gt;try it live&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ex:entity&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:ex&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/info-extraction"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;start&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"0"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;end&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"14"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  President Obama&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ex:entity&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ex:entity&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:ex&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/info-extraction"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;start&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"36"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;end&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"43"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ex:type&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;organization&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ex:type&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;Congress&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ex:entity&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h2 id="xmlprague"&gt;See you at XMLPrague?&lt;/h2&gt;
&lt;p&gt;It&amp;#8217;s that time of the year. &lt;a href="http://www.xmlprague.cz/"&gt;XMLPrague&lt;/a&gt; is one of the best conferences in the XML circuit and &lt;a href="http://www.xmlprague.cz/sessions/"&gt;this year&amp;#8217;s edition will be no exception&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Three talks will be given by the Zorba team. Luis Rodriguez will get the show started with &lt;a href="http://www.xmlprague.cz/sessions/#xqsql"&gt;XQuery meets SQL&lt;/a&gt; and tell us everything about querying relational databases using JSONiq. Then William Candillon, will talk about &lt;a href="http://www.xmlprague.cz/sessions/#xqincloud"&gt;XQuery Development in the Cloud(9)&lt;/a&gt; and introduce a new browser-based toolkit that relies on static code analysis. Finally, Juan Zacarias will bring &lt;a href="http://www.xmlprague.cz/sessions/#nosql"&gt;NoSQL Datastores into an XQuery Playground&lt;/a&gt; and showcase how developers can leverage the power of JSONiq in the NoSQL space.&lt;/p&gt;
&lt;h2&gt;That&amp;#8217;s all for now&lt;/h2&gt;
&lt;p&gt;We hope that you will take Zorba 2.8 for a ride and we are looking forward to &lt;a href="https://groups.google.com/forum/?fromgroups#!search/zorba-users"&gt;your feedback&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>A Time Saver on Multiple Query Executions</title><id>/60028669088/a-time-saver-on-multiple-query-executions</id><summary>An underused feature of Zorba is its capability to compile query plans for later execution.</summary><updated>Fri, 07 Dec 2012 00:00:00 -0500</updated><content type="html">&lt;div class="entry-info"&gt;
&lt;p&gt;&lt;span&gt;An underused feature of Zorba is its capability to compile query plans for later execution.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="entry-content"&gt;
&lt;p&gt;When executing a query with Zorba, it goes through the following steps:&lt;/p&gt;
&lt;img src="http://media.tumblr.com/5ab756c6ef35352940e34cd2d754fda2/tumblr_inline_mx6jr4G24I1rjv2qx.png"/&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Parser&lt;/strong&gt; - An abstract syntax tree (AST) is created from the query&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Translator&lt;/strong&gt; - The AST is converted into a tree of expressions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimizer&lt;/strong&gt; - The expressions are rewritten for faster execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Generator&lt;/strong&gt; - The expressions are converted to a tree of iterators (aka, query plan)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Runtime&lt;/strong&gt; - The query plan is executed&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;If you run a query multiple times, you might want to perform the steps from parsing to code generation only once and directly execute your query plan for every new runtime. Zorba provides the ability to save a query plan into a file. You then later simply load the query plan and execute it:&lt;/p&gt;
&lt;img src="http://media.tumblr.com/376e3a25e7340f4c209467645247d867/tumblr_inline_mx6jrsJOoG1rjv2qx.png"/&gt;&lt;br/&gt;&lt;p&gt;There are two ways to compile and execute query plans: using &lt;a href="/html/entry/2012/12/10/compile-plan-zorba"&gt;Zorba command line interface (CLI)&lt;/a&gt; or the &lt;a href="/html/entry/2012/12/10/compile-plan-cxx"&gt;C++ API&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="compile-plan-zorba"&gt;Using the Zorba CLI&lt;/h2&gt;
&lt;p&gt;Zorba 2.7 provides two new options for the CLI: &lt;em&gt;&amp;#8212;compile-plan&lt;/em&gt; and &lt;em&gt;&amp;#8212;execute-plan&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;#8212;compile-plan&lt;/em&gt; outputs the plan in binary format.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;#8212;execute-plan&lt;/em&gt; executes the query plan that was given as input query.&lt;/p&gt;
&lt;p&gt;In the figure below we request the query plan of 1+1 and store it into &lt;em&gt;test.xqc&lt;/em&gt;. Then we execute &lt;em&gt;test.xqc&lt;/em&gt; directly.&lt;/p&gt;
&lt;pre class="ace-static"&gt;$zorba -q 1+1 --compile-plan -o test.xqc
$zorba -q test.xqc -f --execute-plan
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
2&lt;/pre&gt;
&lt;p&gt;Now let&amp;#8217;s look at the performance gain that can be achieved by using this feature. &lt;a href="http://www.bottlecaps.de/rex/"&gt;REx&lt;/a&gt; is a parser generator written by Gunther Rademacher that supports many output formats including XQuery. In the code snippet below, we parse a small piece of XQuery in XQuery.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"XQueryV30"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;at&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"parser.xq"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tree&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;p:parse-XQuery&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'("red", "blue", "green")!string-length()'&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tree&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s run it:&lt;/p&gt;
&lt;pre class="ace-static"&gt;$zorba -q test-parser.xq -f -t
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;XQuery&amp;gt;&amp;lt;Module&amp;gt;&amp;lt;MainModule&amp;gt;&amp;lt;Prolog/&amp;gt;...&amp;lt;/MainModule&amp;gt;&amp;lt;/Module&amp;gt;&amp;lt;EOF/&amp;gt;&amp;lt;/XQuery&amp;gt;
Number of executions = 1
Engine Startup Time     : 0.000 (user: 0.000) milliseconds
Average Compilation Time: 6625.271 (user: 6453.332) milliseconds
Average Execution Time  : 602.584 (user: 531.234) milliseconds
Average Loading Time    : 0.000 (user: 0.000) milliseconds
Average Unloading Time  : 0.852 (user: 0.809) milliseconds
Average Total Time      : 7237.826 (user: 6990.856) milliseconds

Engine Shutdown Time     : 0.025 (user: 0.019) milliseconds&lt;/pre&gt;
&lt;p&gt;Could be faster&amp;#8230; As you can see, most of the time is spent in compilation: more than 6 seconds. Now let&amp;#8217;s look at the query plan loading and execution&lt;/p&gt;
&lt;pre class="ace-static"&gt;$zorba -q test-parser.xq -f --compile-plan -o test-parser.xqc
$zorba -q test-parser.xqc -f --execute-plan -t
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;XQuery&amp;gt;&amp;lt;Module&amp;gt;&amp;lt;MainModule&amp;gt;&amp;lt;Prolog/&amp;gt;...&amp;lt;/MainModule&amp;gt;&amp;lt;/Module&amp;gt;&amp;lt;EOF/&amp;gt;&amp;lt;/XQuery&amp;gt;
Number of executions = 1
Engine Startup Time     : 0.000 (user: 0.000) milliseconds
Average Compilation Time: 510.884 (user: 435.228) milliseconds
Average Execution Time  : 290.257 (user: 258.943) milliseconds
Average Loading Time    : 0.000 (user: 0.000) milliseconds
Average Unloading Time  : 1.034 (user: 0.970) milliseconds
Average Total Time      : 813.945 (user: 705.542) milliseconds

Engine Shutdown Time     : 0.008 (user: 0.006) milliseconds&lt;/pre&gt;
&lt;p&gt;In the example above, the loading time of the query plan appears in the &lt;em&gt;Compilation Time&lt;/em&gt; category. As you can see, the loading and execution of the query plan is more than 9 times faster. This can be a very useful optimization when runing your queries in production.&lt;/p&gt;
&lt;h2 id="compile-plan-cxx"&gt;Using the C++ API&lt;/h2&gt;
&lt;p&gt;In the C++ API, the &lt;a href="/html/documentation/latest/cxx/classzorba_1_1XQuery"&gt;XQuery&lt;/a&gt; class has a method named &lt;a href="/html/documentation/latest/cxx/classzorba_1_1XQuery#aec520b912a97dd8c9a0555bccd16900b"&gt;saveExecutionPlan()&lt;/a&gt; that takes an output stream as parameter. This is where the query plan will be saved. The second parameter is the output format. It can be binary or XML.&lt;/p&gt;
&lt;p&gt;The XQuery class has a corresponding method &lt;a href="/html/documentation/latest/cxx/classzorba_1_1XQuery#a5e95bbc7e19bc4a2bbbadf183bfc7a29"&gt;XQuery::loadExecutionPlan()&lt;/a&gt; that takes an input stream as parameter and loads it as a compiled query.&lt;/p&gt;
&lt;p&gt;The code snippet below demonstrates how to use these two methods. We compile &lt;em&gt;1+1&lt;/em&gt; and save the query plan into an output string stream. Then, we create a second query to load and execute the query plan previously saved.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;main&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;argc&lt;/span&gt;&lt;span class="punctuation operator"&gt;,&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;char&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;argv&lt;/span&gt;&lt;span class="paren lparen"&gt;[&lt;/span&gt;&lt;span class="paren rparen"&gt;]&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;br/&gt;&lt;span class="paren lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="comment"&gt;//Startup Zorba&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lStore&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;StoreManager&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;getStore&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;Zorba&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lZorba&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;Zorba&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;getInstance&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;lStore&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;ostringstream&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lOut&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="paren lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;//Compile 1+1&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;XQuery_t&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lQuery&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lZorba&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;compileQuery&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"1+1"&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;//Save the query plan&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;lQuery&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;saveExecutionPlan&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;lOut&lt;/span&gt;&lt;span class="punctuation operator"&gt;,&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;ZORBA_USE_BINARY_ARCHIVE&lt;/span&gt;&lt;span class="punctuation operator"&gt;,&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;SAVE_UNUSED_FUNCTIONS&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="paren rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="paren lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;istringstream&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lIn&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;lOut&lt;/span&gt;&lt;span class="punctuation operator"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;str&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;XQuery_t&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lQuery&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lZorba&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;createQuery&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;//Load the query plan&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;lQuery&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;loadExecutionPlan&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;lIn&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;//Execute the query&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;cout&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;lQuery&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="punctuation operator"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;endl&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="paren rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="comment"&gt;//Shutdown Zorba&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;lZorba&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;shutdown&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant numeric"&gt;0&lt;/span&gt;&lt;span class="punctuation operator"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="paren rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;That&amp;#8217;s All Folks!&lt;/h2&gt;
&lt;p&gt;We hope that you find this feature useful for your applications built on top of Zorba. Feel free to send us feedback and question on our &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/zorba-users"&gt;mailing-list&lt;/a&gt;. &lt;br/&gt;Happy Coding with Zorba!&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>The New Archive Module</title><id>/60028626564/the-new-archive-module</id><summary>We have heard your Feedback and developed a module to work with compressed archives (e.g. zip or tar.gz). The Archive module provides functions to create, read, and modify archives given as xs:base64Binary items. For example, it provides functions to retrieve the names or extract the values of several entries from a zip archive.</summary><updated>Fri, 30 Nov 2012 00:00:00 -0500</updated><content type="html">&lt;div class="entry-info"&gt;
&lt;p&gt;We have heard your &lt;a href="https://zorba.uservoice.com/forums/145664-what-should-we-work-on-next-/suggestions/2634054-module-for-zip-please-please-please-"&gt;Feedback&lt;/a&gt; and developed a module to work with compressed archives (e.g. zip or tar.gz).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="entry-content"&gt;
&lt;p&gt;&lt;a href="http://www.zorba-xquery.com/html/modules/zorba/archive"&gt;The Archive module&lt;/a&gt; provides functions to create, read, and modify archives given as xs:base64Binary items. For example, it provides functions to retrieve the names or extract the values of several entries from a zip archive.&lt;/p&gt;
&lt;p&gt;In the following, we would like to show some basic examples to demonstrate how to use this module. Assume you have a digital book given in the ePub format (an ePub file is actually a collection of mostly XML and HTML files that are zipped together). To list information about all files/entries in such an archive, we use entries() as shown in the following example (you can try it live &lt;a href="http://www.zorba-xquery.com/html/demo#e9h97MVQsmZc00XrK7ofI9qVgyU=" target="_blank"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;archive&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/archive"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$moby&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://zorba.s3.amazonaws.com/MobyDick.epub"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;archive:entries&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$moby&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we use extract-text() to extract the text content of a particular file in this archive. Here, we extract the first chapter of the book as text, parse it, and return all the paragraphs contained in this chapter (&lt;a href="http://www.zorba-xquery.com/html/demo#i0gFmQJz/pQvaIUW87su0qHlWno=" target="_blank"&gt;try it live&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;archive&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/archive"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$moby&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://zorba.s3.amazonaws.com/MobyDick.epub"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$chap1&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;archive:extract-text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$moby&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"OPS/main1.xml"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$doc&lt;/span&gt;&lt;span class="text"&gt;   :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;parse-xml&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$chap1&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$doc&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Finally, &lt;a href="/html/modules/zorba/archive#create-2"&gt;create()&lt;/a&gt; allows you to create archives. In the following example, we use it to create a tar.gz archive containing a text file and the Zorba logo (&lt;a href="http://www.zorba-xquery.com/html/demo#5Xgtf5mnC75VLtBU5Ct1IJXWHFA="&gt;try it live&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;archive&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/archive"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$logo&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/images/zorba-logo-small.png"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;api:save-archive&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;archive:create&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &lt;/span&gt;&lt;span class="string"&gt;"my-text-file.txt"&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &lt;/span&gt;&lt;span class="string"&gt;"logo.png"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &lt;/span&gt;&lt;span class="string"&gt;"This is the content of the text file."&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &lt;/span&gt;&lt;span class="variable"&gt;$logo&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;archive:options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;archive:format&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;TAR&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;archive:format&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;archive:compression&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;GZIP&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;archive:compression&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;archive:options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;</content></entry><entry><title>Zorba 2.7: Gaia</title><id>/60028553817/zorba-27-gaia</id><summary>The Zorba team is pleased to announce the release of Zorba 2.7, codename Gaia. The release is a substantial step forward in terms of new features, performance improvements, and bug fixes.</summary><updated>Sat, 10 Nov 2012 00:00:00 -0500</updated><content type="html">&lt;div class="entry-info"&gt;
&lt;p&gt;The Zorba team is pleased to announce the release of Zorba 2.7, codename Gaia. The release is a substantial step forward in terms of&lt;a href="https://launchpadlibrarian.net/119067678/ChangeLog"&gt;new features, performance improvements, and bug fixes&lt;/a&gt;. It is available in our &lt;a href="/html/download"&gt;download section&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="entry-content"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;h3&gt;Simple Map Operator&lt;/h3&gt;
&lt;p&gt;One of the new expressions in XQuery 3.0 is the &lt;a href="http://www.w3.org/TR/xquery-30/#id-map-operator"&gt;Simple Map Operator&lt;/a&gt;. It provides a very compact way to do simple mappings which may replace simple &amp;#8220;for&amp;#8221; expression and make them much shorter. For example:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"Here is"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"Zorba"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"2.7"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; ! &lt;/span&gt;&lt;span class="support function"&gt;upper-case&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the context item &lt;em&gt;&amp;#8221;.&amp;#8221;&lt;/em&gt; in the argument on the right-hand side of the &lt;em&gt;!&lt;/em&gt; operator is bound to each item in the sequence resulting from evaluating the left-hand side. In contrast to the path operator (&lt;em&gt;/&lt;/em&gt;), the simple map operator also allows non-node sequences as a result of the left-hand side argument.&lt;/p&gt;
&lt;h3&gt;Reading PDFs&lt;/h3&gt;
&lt;p&gt;Zorba 2.7 comes with a new module that provides functionality to read the text from PDF documents and allow you to render pages of a PDF documents to images. It&amp;#8217;s based on the &lt;a href="http://pdfbox.apache.org/"&gt;Apache PDFBox&lt;/a&gt; library. Here is an example of the module in action below:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;pdf&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/read-pdf"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;rpo&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$pdf&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;fetch:content-binary&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"some.pdf"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$options&lt;/span&gt;&lt;span class="text"&gt;  :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;   &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:extract-text-options&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;xmlns:rpo&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;     &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:text-kind&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;simple&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:text-kind&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;     &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:start-page&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:start-page&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;     &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:end-page&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;3&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:end-page&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;     &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:start-page-separator&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword"&gt;start&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;page&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;separator&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:start-page-separator&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;     &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:end-page-separator&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword"&gt;end&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;page&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;separator&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:end-page-separator&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;   &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;rpo:extract-text-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="support function"&gt;read-pdf:extract-text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$pdf&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$options&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The code snippet above loads the content of the &lt;em&gt;some.pdf&lt;/em&gt; file and extracts the text contained in page two and three.&lt;/p&gt;
&lt;h3&gt;JSONiq Improvements&lt;/h3&gt;
&lt;p&gt;In Zorba 2.6.0, parsing JSON text and serializing results to JSON was kind of a hassle. In this release, we have improved this functionality and made it much easier to use. For example, you can now parse sequences of JSON documents or serialize JSON objects that contain dateTime-typed values. For example:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"now"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="support function"&gt;fn:current-dateTime&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In this example (&lt;a href="http://www.zorba-xquery.com/html/demo#mc31W6cwj9//xY+xCuab4FUx7OA="&gt;try it live&lt;/a&gt;), the current dateTime is cast to a string. In case you want to keep the types of such values but they are not natively supported by JSON, you can use the function jn:encode-for-roundtrip to get a fully round-trippable version of the JSON object that you can serialize. to read the object back, the jn:decode-from-roundtrip function ensures that all of the values still have the same type that they had before encoding. See example below and try it live &lt;a href="http://www.zorba-xquery.com/html/demo#8rwUeZSZv0dlINB+BRDwDMLJi+0="&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="support function"&gt;jn:encode-for-roundtrip&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="string"&gt;"now"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="support function"&gt;fn:current-dateTime&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Two other little changes in the JSONiq language are the automatic conversion of empty sequences to null. For instance:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"null"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;will be serialized to:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"null"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="identifier"&gt;null&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And the automatic casting of key names to string.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"foo"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;will be serialized to:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"1"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="string"&gt;"foo"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;Performance Improvements&lt;/h2&gt;
&lt;p&gt;The release also contains quite some under-the-hood changes. Specifically, the memory management in the compiler was refactored to accommodate for the fact that compiler expressions are not very big and their life-time is naturally limited. This allows for a much more efficient memory management.&lt;/p&gt;
&lt;p&gt;Beyond that, the optimizer has been improved to deal with positional predicates that involve inequality comparisons. Knowing about this, the runtime can avoid unnecessary work because of its lazy evaluation strategy.&lt;/p&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;p&gt;Despite all the work we did for those new features and performance improvements, we also spent quite some time to fix bugs. Zorba 2.7 comes with approx. 30 bug fixes. The most asked for was the correct serialization of XHTML elements with empty content. Particularly, only tags such as br or img should legally use the empty element shorthand whereas all other must be written as &amp;lt;elem&amp;gt;&amp;lt;/elem&amp;gt;.&lt;/p&gt;
&lt;p&gt;We hope you like the release and are looking forward to &lt;a href="https://groups.google.com/forum/?fromgroups#!search/zorba-users"&gt;your feedback&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>xqDoc Support in Zorba</title><id>/60028475838/xqdoc-support-in-zorba</id><summary>xqDoc is the de facto industry standard for generating API documentation from XQuery modules.</summary><updated>Wed, 26 Sep 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;p&gt;&lt;em&gt;Note: this is an edited version of a previous tutorial we updated to run with Zorba 2.0.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://xqdoc.org/"&gt;xqDoc&lt;/a&gt; is the de facto industry standard for generating API documentation from XQuery modules. xqDoc style comments begin with a &amp;#8216;(:~&amp;#8217; and end with a &amp;#8216;:)&amp;#8217; (see code snippet below).&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="comment"&gt;(:&lt;/span&gt;&lt;span class="comment"&gt;~&lt;/span&gt;&lt;br/&gt;&lt;span class="comment"&gt; : This library module provides simple file system I/O operations.&lt;/span&gt;&lt;br/&gt;&lt;span class="comment"&gt; :&lt;/span&gt;&lt;br/&gt;&lt;span class="comment"&gt; : @author Gabriel Petrovay&lt;/span&gt;&lt;br/&gt;&lt;span class="comment"&gt; : @version 1.0 &lt;/span&gt;&lt;br/&gt;&lt;span class="comment"&gt; :)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;file&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/file"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;More information about the xqDoc specification is available on the &lt;a href="http://xqdoc.org/"&gt;xqDoc website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Zorba 1.4 provides built-in xqDoc support which doesn&amp;#8217;t require any installation or configuration. In general, creating documentation from an XQuery module that is documented with xqDoc is a two step process:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Given a module as input, one creates a valid xqDoc document.&lt;/li&gt;
&lt;li&gt;This xqDoc document can be converted to formats such as XHTML or DocBook.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In Zorba, the first step is accomplished by using the built-in xqDoc module. This module provides functions whose result given a documented module is a valid xqDoc document.&lt;/p&gt;
&lt;p&gt;In a first step, the filename lib.xq of the documented module is passed as an argument to the &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/xqdoc/xqdoc#xqdoc-1"&gt;xqdoc() function of Zorba&amp;#8217;s xqDoc module&lt;/a&gt;. This function returns a valid xqDoc document containing information about the module. In a second step, this document is transformed (using XQuery) into a nicely presented HTML document. In the following sections, we describe each of those steps in more detail.&lt;/p&gt;
&lt;h2&gt;Generating an xqDoc Document&lt;/h2&gt;
&lt;p&gt;The module that can be used to generate xqDoc documents is available using the target namespace &lt;a href="http://www.zorba-xquery.com/modules/xqdoc."&gt;http://www.zorba-xquery.com/modules/xqdoc.&lt;/a&gt; This module contains two functions both returning xqDoc documents given a (documented) XQuery module as input: &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/xqdoc/xqdoc#xqdoc-1"&gt;xqdoc:xqdoc()&lt;/a&gt; and &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/xqdoc/xqdoc#xqdoc-content-1"&gt;xqdoc:xqdoc-content()&lt;/a&gt;. The former function takes the URI of the documented module as a string. The argument of the latter function is the XQuery module itself.&lt;/p&gt;
&lt;p&gt;For instance, the following XQuery program generates the xqDoc document for the xqDoc module itself.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqdoc&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/xqdoc"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="support function"&gt;xqdoc:xqdoc&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/xqdoc"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can try this example &lt;a href="http://www.zorba-xquery.com/html/demo#qQ55Kvv8jemz3Ihv6Qo7H0B0DM8="&gt;live&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An excerpt of the result looks as follows:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:xqdoc&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:xqdoc&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.xqdoc.org/1.0"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:control&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:date&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;2012-09-23T15:52:10.06Z&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:date&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:version&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;1.0&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:version&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:control&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"library"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:uri&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;&lt;a href="http://www.zorba-xquery.com/modules/xqdoc"&gt;http://www.zorba-xquery.com/modules/xqdoc&lt;/a&gt;&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:uri&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:name&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;xqdoc&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:name&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:comment&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xqdoc:description&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;p&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; The goal of xqDoc is to provide a simple vendor neutral solution for...&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, if you want to generate xqDoc document out of the string representation of a module (maybe because it&amp;#8217;s not available as a file or built-in module), you can pass the contents of the module as a parameter to the xqdoc:xqdoc-content() function. For example, the following XQuery program retrieves the functx module using http and returns the documentation.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqdoc&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/xqdoc"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$module-uri&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.xqueryfunctions.com/xq/functx-1.0-doc-2007-01.xq"&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$module&lt;/span&gt;&lt;span class="text"&gt;     :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"{$module-uri}"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$xqdoc&lt;/span&gt;&lt;span class="text"&gt;      :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;xqdoc:xqdoc-content&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$module&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$xqdoc&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can try this example &lt;a href="http://www.zorba-xquery.com/html/demo#kthxQuj9GJjOiyk70hltWSCVeXE="&gt;live&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Transforming xqDoc Documents&lt;/h2&gt;
&lt;p&gt;Given a valid xqDoc document, it can be easily translated into a variety of formats such as XHTML or DocBook. Zorba provides an XQuery module that can be used to transform xqDoc documents into XHTML. The following XQuery program demonstrates how easy it is to generate nice XHTML documentation using the xqDoc module and a simple stylesheet (written in XQuery) that converts xqDoc XML to XHTML:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqdoc&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/xqdoc"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;html&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;stylesheet&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/xqdoc/html"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                                                   &lt;/span&gt;&lt;span class="keyword"&gt;at&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://zorba.s3.amazonaws.com/html.xq"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$xqdoc&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;xqdoc:xqdoc&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/xqdoc"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;html-stylesheet:convert&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$xqdoc&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can try this example &lt;a href="http://www.zorba-xquery.com/html/demo#RWrsjfYzm3oHc0vP6hxdH/DFKwE="&gt;live&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Examples, Extensions, &amp;amp; Contact&lt;/h2&gt;
&lt;p&gt;More examples showing documentation generated by the Zorba xqDoc modules are available at&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="/html/modules"&gt;Zorba&amp;#8217;s module documentation page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.28msec.com/html/doc"&gt;28msec&amp;#8217;s module documentation page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zorba is extending the original xqDoc specification to make the information available in xqDoc documents even more useful. Specifically, the xqDoc documents generated by Zorba add an additional attribute named arity to the xqdoc:name element of a function. This allows to disambiguate references to functions having the same name but a different arity.&lt;/p&gt;
&lt;p&gt;If you have questions or comments regarding Zorba or its xqDoc support, feel free to write an email to the &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/zorba-users"&gt;zorba-users mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Atom Processing</title><id>/60028351254/atom-processing</id><summary>The Atom Syndication Format (RFC 4287) is one of the most popular XML formats to aggregate XML data. Such an aggregate is called an Atom feed.</summary><updated>Mon, 24 Sep 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Note: this is an edited version of a previous tutorial we updated to run with Zorba 2.0.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.ietf.org/rfc/rfc4287.txt"&gt;Atom Syndication Format (RFC 4287)&lt;/a&gt; is one of the most popular XML formats to aggregate XML data. Such an aggregate is called an Atom feed. Atom is heavily used by the industry for web services (e.g. Google) and countless people use it to subscribe to their favourite blogs in their Feed Readers. The aim of this tutorial is to present how easy an Atom feed can be processed with XQuery.&lt;/p&gt;
&lt;p&gt;We will download the &lt;a href="http://www.zorba-xquery.com/html/blog"&gt;Zorba blog&lt;/a&gt; in Atom format, create a Tiny URL to the blog post, extract some keywords and output the result as HTML.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start with two helper functions that we&amp;#8217;ll use afterwards. One to create a Tiny URL, the other to get frequent keywords out of a longer string (such as a Atom blog entry).&lt;/p&gt;
&lt;h2&gt;Create the Tiny URL&lt;/h2&gt;
&lt;p&gt;Creating a Tiny URL is simple. It can be done by sending an HTTP GET request to &lt;a href="http://tinyurl.com/api-create.php"&gt;&lt;a href="http://tinyurl.com/api-create.php"&gt;http://tinyurl.com/api-create.php&lt;/a&gt;&lt;/a&gt; with the URL to shorten as a parameter named &amp;#8220;url&amp;#8221;.&lt;/p&gt;
&lt;p&gt;We write a simple function that uses the &lt;a href="http://www.zorba-xquery.com/html/modules/expath/http-client"&gt;EXPath http-client module&lt;/a&gt;. The result of a HTTP GET using that module is a sequence of two items: the first is the response header, the second the body. We&amp;#8217;re only interested in the response body which will contain the shortened URL.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;an&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/annotations"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; %&lt;/span&gt;&lt;span class="identifier"&gt;an&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;sequential&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:create-tinyurl&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$url&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$url-encoded&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;encode-for-uri&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$url&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$result&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://tinyurl.com/api-create.php?url={$url-encoded}"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                    &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$result&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="support function"&gt;local:create-tinyurl&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can run this code snippet in &lt;a href="http://www.zorba-xquery.com/html/demo#z/I="&gt;the Zorba live sandbox&lt;/a&gt; our with your local zorba installation. You should get the following result:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&lt;a href="http://tinyurl.com/yc76gyh"&gt;http://tinyurl.com/yc76gyh&lt;/a&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;Generating Keywords&lt;/h2&gt;
&lt;p&gt;Now let&amp;#8217;s write a function which finds the most frequent words in a string while discarding common stop words such as &amp;#8220;or&amp;#8221;, &amp;#8220;and&amp;#8221;, or &amp;#8220;not&amp;#8221;. For this, we use Zorba&amp;#8217;s &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/fulltext"&gt;full-text module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we tokenize the string into a sequence of words. Then, for each word we convert it to lower-case and discard the stop words. Finally we group all occurrences of the same word together and count how many times the word appeared in the string and order by that count.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;ft&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/full-text"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:words-by-frequency&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$content&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt;   &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$token&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;ft:tokenize-string&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$content&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="support function"&gt;xs:language&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"en"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;lower-case&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$token&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;where&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;not&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="support function"&gt;ft:is-stop-word&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;group&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;by&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;order&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;by&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;count&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$token&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;descending&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;li&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;li&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="support function"&gt;local:words-by-frequency&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"Processing text with Zorba is easy when using the full-text module."&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The result is a sequence of words (each wrapped in an HTML li tag), with the most frequent words at the beginning. Have a look at the result on &lt;a href="http://www.zorba-xquery.com/html/demo#qeY60mbZf/k3Ub9R4EOaWNTyfYg="&gt;live sandbox&lt;/a&gt;&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;text&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;zorba&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;easy&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;processing&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;module&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;using&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;li&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;h2&gt;Processing the Atom feed&lt;/h2&gt;
&lt;p&gt;Now that we have our two helper functions, let&amp;#8217;s finish the job.&lt;/p&gt;
&lt;p&gt;In the same way we made an HTTP GET request to &lt;a href="http://tinyurl.com/"&gt;tinyurl.com&lt;/a&gt;, we can make one to get the Zorba blog in Atom format.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/blog/feed"&lt;/span&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;One entry in the Atom feed might look like this.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;feed&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/2005/Atom"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xml:base&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.28msec.com"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;[...]&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;entry&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;title&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"text"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;Zorba "Eros" 2.6: The JSONiq Release&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;title&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;link&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;rel&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"alternate"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"text/html"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;href&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/html/entry/2012/08/20/Eros"&lt;/span&gt;&lt;span class="meta tag"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;author&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;name&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;Zorba Team&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;name&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;email&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;zorba-dev@googlegroups.com&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;email&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;author&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;updated&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;2012-08-20T07:47:04.74+02:00&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;updated&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;content&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"xhtml"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;div&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/1999/xhtml"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;p&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; The Zorba development team is pleased to announce the release of Zorba 2.6, codename Eros.&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; The release is available in our &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;href&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"/html/download"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;download section&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;[...]&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;p&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;div&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;content&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;entry&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;[...]&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;feed&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;Have you noticed the &lt;em&gt;xmlns=&amp;#8221;http://www.w3.org/2005/Atom&amp;#8221;&lt;/em&gt; above? That means that the &amp;#8220;feed&amp;#8221; node, and all its children, are in the &amp;#8220;atom&amp;#8221; XML namespace. That&amp;#8217;s why we have to write &lt;em&gt;$feed//atom:entry&lt;/em&gt; to get all the entries. We could also have used&lt;em&gt;$feed//*:entry&lt;/em&gt;, but &lt;em&gt;$feed//entry&lt;/em&gt; would not have worked. Limiting to &amp;#8220;less or equal 3&amp;#8221; with &lt;em&gt;$feed//atom:entry[position() le 3]&lt;/em&gt;, will give us a sequence containing the first three entries in the blog.&lt;/p&gt;
&lt;p&gt;For each blog entry, we get its title and its URL&amp;#8230;&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/2005/Atom"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$entry&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$feed&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;entry&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="support function"&gt;position&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;le&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;3&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$title&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$entry&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;title&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$url&lt;/span&gt;&lt;span class="text"&gt;   :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;encode-for-uri&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$entry&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;link&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;rel&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"alternate"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/@&lt;/span&gt;&lt;span class="identifier"&gt;href&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;data&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;#8230;and when we invoke our previously written helper functions (local:create-tinyurl and local:words-by-frequency), and construct the XHTML to return, we get the finished script:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;ft&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/full-text"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/2005/Atom"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;an&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/annotations"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; %&lt;/span&gt;&lt;span class="identifier"&gt;an&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;sequential&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:create-tinyurl&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$url&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$url-encoded&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;encode-for-uri&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$url&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$result&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://tinyurl.com/api-create.php?url={$url-encoded}"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                  &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$result&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:words-by-frequency&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$content&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt;   &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$token&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;ft:tokenize-string&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$content&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="support function"&gt;xs:language&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"en"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;lower-case&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$token&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;where&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;not&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="support function"&gt;ft:is-stop-word&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;group&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;by&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;order&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;by&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;count&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$token&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;descending&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;li&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$word&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;li&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;html&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;body&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;(:&lt;/span&gt;&lt;span class="comment"&gt; (1) Download Atom feed :)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$feed&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/blog/feed"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                    &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"get"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;(:&lt;/span&gt;&lt;span class="comment"&gt; For the first three entries in the feed... :)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$entry&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$feed&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;entry&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="support function"&gt;position&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;le&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;3&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$title&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$entry&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;title&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$url&lt;/span&gt;&lt;span class="text"&gt;   :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$entry&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;link&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;rel&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"alternate"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/@&lt;/span&gt;&lt;span class="identifier"&gt;href&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;data&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;(:&lt;/span&gt;&lt;span class="comment"&gt; (2) Create the tiny URL :)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tinyurl&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:create-tinyurl&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$url&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;(:&lt;/span&gt;&lt;span class="comment"&gt; (3) Get 10 most frequent words in feed entry:)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$flattened-content&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;string-join&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$entry&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atom&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;content&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;" "&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$top-ten-words&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:words-by-frequency&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$flattened-content&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="support function"&gt;position&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;le&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;10&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="comment"&gt;(:&lt;/span&gt;&lt;span class="comment"&gt; (4) Return it as HTML :)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;div&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;h2&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;a&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"{ $tinyurl }"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$title&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;a&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;h2&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;ul&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$top-ten-words&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;ul&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;div&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;body&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;html&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can run the complete query online on our live sandbox &lt;a href="http://www.zorba-xquery.com/html/demo#PYGvdckGc3S6YE9gbc2qtl/ufps="&gt;here&lt;/a&gt; or download the source and run it locally.&lt;/p&gt;
&lt;p&gt;Et Voilà! With just a few lines of code, we were able to to process an Atom feed, interact with the Tiny URL web service and do some text analysis. In such use-cases, Zorba makes your life very easy. Check out the rest of &lt;a href="/html/modules"&gt;Zorba&amp;#8217;s modules&lt;/a&gt; fully packed with functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>Zorba "Eros" 2.6: The JSONiq Release</title><id>/60028280241/zorba-eros-26-the-jsoniq-release</id><summary>The Zorba development team is pleased to announce the release of Zorba 2.6, codename Eros. The release is available in ourdownload section.</summary><updated>Mon, 20 Aug 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;The Zorba development team is pleased to announce the release of Zorba 2.6, codename Eros. The release is available in our&lt;a href="/html/download"&gt;download section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Eros contains several new features, performance improvements, and bug fixes that are available on our &lt;a href="https://launchpadlibrarian.net/112669217/ChangeLog"&gt;ChangeLog&lt;/a&gt;. But there is one feature on that list that we are particularly excited about&amp;#8230;&lt;/p&gt;
&lt;p&gt;For a couple of months, we have been working on a project named &lt;a href="http://jsoniq.org/"&gt;JSONiq&lt;/a&gt;, which extends the XQuery data model with JSON objects and arrays. The JSONiq specification has now reached a mature state and Zorba 2.6 is shipped with a JSONiq implementation. In other words, Zorba now supports JSON natively.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"Greeting"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"JSON"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"Hello, "&lt;/span&gt;&lt;span class="text"&gt; || &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="string"&gt;"Farewell"&lt;/span&gt;&lt;span class="text"&gt; : &lt;/span&gt;&lt;span class="support function"&gt;string-join&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"Live"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"long"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"and"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"prosper"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;" "&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The specification as well as railroad diagrams that showcase the grammar are available on &lt;a href="http://www.jsoniq.org/"&gt;&lt;a href="http://www.jsoniq.org"&gt;http://www.jsoniq.org&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you already know XQuery, you can learn JSONiq quickly with the tutorial &lt;a href="http://www.zorba-xquery.com/html/JSONforXQuery.html"&gt;JSON for XQuery&lt;/a&gt;. If you come from the JSON world, you will find an adapted tutorial named &lt;a href="http://www.zorba-xquery.com/html/XQueryforJSON.html"&gt;XQuery for JSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, you can play with JSONiq on the &lt;a href="http://www.zorba-xquery.com/html/demo"&gt;Zorba sandbox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please find us at the Zorba booth next week at &lt;a href="http://nosql2012.dataversity.net/"&gt;@ NoSQL Now!&lt;/a&gt; to learn more about JSONiq. Four talks featuring Zorba and JSONiq will be given:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4888"&gt;Advances in XML and XQuery&lt;/a&gt; by Daniela Florescu&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4832"&gt;JSONiq: XQuery for JSON, JSON for XQuery&lt;/a&gt; by Jonathan Robie&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4850"&gt;Implementing JSONiq: Add JSON to your XQuery processor in no time&lt;/a&gt; by Chris Hillery&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4841"&gt;Harnessing Flexible Data in the Cloud&lt;/a&gt; by Matthias Brantner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are looking forward to meeting you at NoSQL Now!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>API enhancements</title><id>/60028229416/api-enhancements</id><summary>Users are often using Zorba from different host languages. We usually see the C++ and Java APIs being used to integrate XQuery with core components. That’s the case of the 28msec platform for instance. The PHP, Python, and Ruby APIs are fairly popular for integrating Zorba into web applications. In the Zorba team, our favorite programming language is XQuery and we use XQuery as an host language for XQuery as much as possible ;-):</summary><updated>Wed, 01 Aug 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;Greetings from Zorba Labs!&lt;/p&gt;
&lt;p&gt;Users are often using Zorba from different host languages. We usually see the &lt;a href="/html/documentation/2.5.0/cxx/indexpage"&gt;C++&lt;/a&gt; and &lt;a href="/html/documentation/2.5.0/java/indexpage"&gt;Java&lt;/a&gt; APIs being used to integrate XQuery with core components. That&amp;#8217;s the case of the &lt;a href="http://28.io/"&gt;28msec platform&lt;/a&gt; for instance. The &lt;a href="/html/entry/2011/12/27/PHP_Meets_XQuery"&gt;PHP&lt;/a&gt;, &lt;a href="/html/documentation/2.5.0/python/indexpage"&gt;Python&lt;/a&gt;, and &lt;a href="/html/documentation/2.5.0/ruby/indexpage"&gt;Ruby&lt;/a&gt; APIs are fairly popular for integrating Zorba into web applications. In the Zorba team, our favorite programming language is XQuery and we use &lt;a href="/documentation/latest/modules/zorba/languages/xqxq"&gt;XQuery as an host language for XQuery&lt;/a&gt; as much as possible ;-)&lt;/p&gt;
&lt;p&gt;In the 2.5 release, we worked on several improvements to these APIs. The most important one is probably the addition of the &lt;a href="/html/entry/2012/07/27/XQJ_From_Zorba"&gt;XQJ API&lt;/a&gt;. XQJ is the de facto standard API for using XQuery from Java and it enables Zorba to be integrated into many components that are already using XQJ. The Ruby, Python, and Java API are also containing several enhancements in 2.5. If you want to know how to install these bindings, you can look directly in our &lt;a href="/html/documentation"&gt;documentation for the different languages availables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you take a look to the &lt;a href="/html/documentation"&gt;documentation&lt;/a&gt;, you will have a clear perspective of which are your possibilities with Zorba, but we have to say that the most remarkable changes that we included in this release come with the ItemFactory class and XmlDataManager class. The&lt;em&gt;ItemFactory&lt;/em&gt; now is able to produce most of the data types supported by XQuery. And with the inclusion of the &lt;em&gt;XmlDataManager&lt;/em&gt;, we added the ability to manage collections and documents. Here is an small example in Python using the collection manager:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;sys&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;sys&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;insert&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="constant numeric"&gt;0&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;'C:\..path_to_zorba_python_lib'&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba_api&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;store&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba_api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;InMemoryStore_getInstance&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba_api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;Zorba_getInstance&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;store&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getXmlDataManager&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getCollectionManager&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;itemFactory&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getItemFactory&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;itemFactory&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createQName&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"aaa"&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createCollection&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;isAdded&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;isAvailableCollection&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;isAdded&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;collection&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getCollection&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;parseXMLtoItem&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"&amp;lt;books&amp;gt;Book 1Book 2"&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;itemSequence&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba_api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;ItemSequence&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;collection&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;insertNodesLast&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;itemSequence&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;shutdown&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;zorba_api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;InMemoryStore_shutdown&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;store&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Same example in Ruby:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="support function"&gt;require&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;'C:\..path_to_zorba_ruby.so'&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;store&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable class"&gt;Zorba_api&lt;/span&gt;&lt;span class="text"&gt;::&lt;/span&gt;&lt;span class="variable class"&gt;InMemoryStore&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getInstance&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable class"&gt;Zorba_api&lt;/span&gt;&lt;span class="text"&gt;::&lt;/span&gt;&lt;span class="variable class"&gt;Zorba&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getInstance&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;store&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getXmlDataManager&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getCollectionManager&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;itemFactory&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getItemFactory&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;itemFactory&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createQName&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"aaa"&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createCollection&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;isAdded&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;isAvailableCollection&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;isAdded&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;collection&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;collectionManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getCollection&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;parseXMLtoItem&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"&amp;lt;books&amp;gt;Book 1Book 2"&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;itemSequence&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable class"&gt;Zorba_api&lt;/span&gt;&lt;span class="text"&gt;::&lt;/span&gt;&lt;span class="variable class"&gt;ItemSequence&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;new&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;collection&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;insertNodesLast&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;itemSequence&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;end&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;zorba&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;shutdown&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="variable class"&gt;Zorba_api&lt;/span&gt;&lt;span class="text"&gt;::&lt;/span&gt;&lt;span class="variable class"&gt;InMemoryStore&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;shutdown&lt;/span&gt;&lt;span class="paren lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;store&lt;/span&gt;&lt;span class="paren rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The documentation covers this in more detail, so take a look and please tell us about your experience with these new features. All comments and suggestions are very welcome! Let us know if you have a suggestion for any other language.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>XQJ from Zorba</title><id>/60028183183/xqj-from-zorba</id><summary>If you’ve ever wondered whether Zorba will support XQJ, now is the time. Starting with version 2.5 Zorba includes a XQJ layer where you can have full access to all the features specified by XQJ. The XQJ API enables Java programmers to execute XQuery against any XML data source.</summary><updated>Fri, 27 Jul 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;If you&amp;#8217;ve ever wondered whether Zorba will support XQJ, now is the time. Starting with version 2.5 Zorba includes a XQJ layer where you can have full access to all the features specified by XQJ. The XQJ API enables Java programmers to execute XQuery against any XML data source. The advantages for Java users include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Executing XQuery against an XML data source and processing the results in Java.&lt;/li&gt;
&lt;li&gt;Binding XQuery variables from Java.&lt;/li&gt;
&lt;li&gt;Creating prepared and ad-hoc XQuery expressions.&lt;/li&gt;
&lt;li&gt;Altering XQuery static and dynamic context behaviour.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now with this layer enabled for Zorba, you will have access to a fast multi-platform and open-source XQuery engine.&lt;/p&gt;
&lt;p&gt;Along with Zorba distribution we are including:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;(lib)zorba_api[.so/.dll]&lt;/em&gt; - Zorba-Java layer library&lt;/li&gt;
&lt;li&gt;&lt;em&gt;zorba_api.jar&lt;/em&gt; - Zorba-Java layer classes&lt;/li&gt;
&lt;li&gt;&lt;em&gt;zorba-xqj.jar&lt;/em&gt; - Zorba-XQJ layer classes&lt;/li&gt;
&lt;li&gt;&lt;em&gt;xqjapi.jar&lt;/em&gt; - XQJ Interfaces Standard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where can you find these files on your system? On Windows, they are usually installed in:&lt;/p&gt;
&lt;pre class="ace-static"&gt;C:\Program Files (x86)\Zorba XQuery Processor 2.X.0\share\java
C:\Program Files (x86)\Zorba XQuery Processor 2.X.0\share\xqj
&lt;/pre&gt;
&lt;p&gt;On Linux or Mac, you should be able to find them in:&lt;/p&gt;
&lt;pre class="ace-static"&gt;/usr/share/java 
/usr/share/xqj
&lt;/pre&gt;
&lt;p&gt;Your project will need to you set-up one of the following environment variables use the variable according to your system:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; SET PATH=%PATH%;[path_to_zorba_api_dll]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mac:&lt;/strong&gt; export DYLD_LIBRARY_PATH=[path_to_zorba_api_so]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux:&lt;/strong&gt; export LD_LIBRARY_PATH=[path_to_zorba_api_so]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now show your friends how easy is to manage XML. Here is an example of how the Zorba XQJ layer is being used in a single open-close connection:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;javax&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xml&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xquery&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;org&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;zorbaxquery&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xqj&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="comment"&gt;// Getting Zorba Data Source&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;ZorbaXQDataSource&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqds&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;ZorbaXQDataSource&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQConnection&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqds&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getConnection&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;Properties&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;props&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;Properties&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQPreparedExpression&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;exp&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;prepareExpression&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"’Hello from Zorba’"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQResultSequence&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;res&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;exp&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;executeQuery&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;res&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;next&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;System&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;out&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;println&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;res&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getItemAsString&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;props&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQExpression&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqe&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createExpression&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQResultSequence&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqs&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqe&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;executeQuery&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"1,2,3"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;xqs&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;next&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;System&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;out&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;println&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;xqs&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getItemAsString&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;props&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="comment"&gt;// IMPORTANT - Close to release resources&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;close&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;This means that you can use Zorba with any other project that uses XQJ. And there is one more thing: we added a&lt;a href="/html/documentation/2.5.0/xqj/classorg_1_1zorbaxquery_1_1api_1_1xqj_1_1ZorbaXQDocumentManager"&gt;XQDocumentManager&lt;/a&gt; and a &lt;a href="/html/documentation/2.5.0/xqj/classorg_1_1zorbaxquery_1_1api_1_1xqj_1_1ZorbaXQCollectionManager"&gt;XQCollectionManager&lt;/a&gt; class directly from our Zorba framework. We have designed these classes based on the XQJ standard so you can use them directly with XQJ. To see how can you use these classes in Zorba, please refer directly to our&lt;a href="/html/documentation/2.5.0/xqj/classes"&gt;documentation&lt;/a&gt;. Here is an example that shows Zorba collections in action:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;javax&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xml&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xquery&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;org&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;zorbaxquery&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xqj&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="comment"&gt;// Getting Zorba Data Source&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;ZorbaXQDataSource&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqds&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;ZorbaXQDataSource&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;org&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;zorbaxquery&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xqj&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;XQConnection&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;org&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;zorbaxquery&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;api&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;xqj&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;XQConnection&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqds&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getConnection&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQXmlDataManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getXmlDataManager&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQCollectionManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;colManager&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getCollectionManager&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;URI&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;uri&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;QName&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;qname&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQItemType&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;type&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant language"&gt;null&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;try&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;uri&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;URI&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"http://www.mod2.com/"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;qname&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;QName&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"http://www.mod2.com/"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"col2"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="identifier"&gt;type&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createAtomicType&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;XQItemType&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;XQBASETYPE_QNAME&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="identifier"&gt;qname&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="identifier"&gt;uri&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;URISyntaxException&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;e&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &lt;/span&gt;&lt;span class="keyword"&gt;throw&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;XQException&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"Error creating QName: "&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;+&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;e&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getLocalizedMessage&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQItem&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;colName&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createItemFromString&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"col2"&lt;/span&gt;&lt;span class="text"&gt;,  &lt;/span&gt;&lt;span class="identifier"&gt;type&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;colManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;createCollection&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;colName&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQCollection&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;collection&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;colManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;getCollection&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;colName&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;colName&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;close&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;XQSequence&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xmlManager&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;parseXML&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"Book 1Book 2"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;collection&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;insertNodesLast&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="identifier"&gt;xqc&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;close&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;Our XQJ layer passes 100% of the XQJ TCK tests. Give it a try!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>Join Us @ NoSQL Now! 2012</title><id>/60028135025/join-us--nosql-now-2012</id><summary>Zorba is a proud partner of NoSQL Now! 2012, a conference covering the dynamic field of NoSQL technologies. This year’s edition features several XQuery-related talks and some of them will showcase new features in both XQuery 3.0 and Zorba.</summary><updated>Tue, 10 Jul 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;Zorba is a proud partner of &lt;a href="http://nosql2012.dataversity.net/"&gt;NoSQL Now! 2012&lt;/a&gt;, a conference covering the dynamic field of NoSQL technologies. This year&amp;#8217;s edition features several XQuery-related talks and some of them will showcase new features in both &lt;a href="http://www.w3.org/TR/xquery-30/"&gt;XQuery 3.0&lt;/a&gt; and Zorba.&lt;/p&gt;
&lt;p&gt;Some people have claimed that XQuery was &lt;a href="http://developer.marklogic.com/media/ML_shirt_design_NoSQL.jpg"&gt;NoSQL before NoSQL was cool&lt;/a&gt;. Well, this summer we get an opportunity to showcase that XQuery really is kind of cool but also to demonstrate where this technology fits in the NoSQL space.&lt;/p&gt;
&lt;p&gt;To get the party started, Daniela Florescu will present the latest &lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4888"&gt;Advances in XML and XQuery&lt;/a&gt; in a tutorial format. Undoubtedly the most disruptive novelty in this area will be introduced by Jonathan Robie with &lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4832"&gt;JSONiq: XQuery for JSON, JSON for XQuery&lt;/a&gt;. The JSONiq implementation in Zorba is currently in late development stage and you can already &lt;a href="/html/jsoniq"&gt;try it live&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For XQuery implementors looking to add JSON support to your own processor, Chris Hillery will tell us everything about it in&lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4850"&gt;Implementing JSONiq: Add JSON to your XQuery processor in no time&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least, Matthias Brantner will introduce the &lt;a href="http://28.io/"&gt;28msec platform&lt;/a&gt; that integrates Zorba with the MongoDB scalable store. The talk is titled &lt;a href="http://nosql2012.dataversity.net/sessionPop.cfm?confid=70&amp;amp;proposalid=4841"&gt;Harnessing Flexible Data in the Cloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We hope to see you there at the Zorba booth. We will happily answer questions and debug queries ;-) If you plan to register, don&amp;#8217;t forget to use the &lt;strong&gt;ZORBA&lt;/strong&gt; coupon code to get $500 off for the entire event, $300 off any of the 2-day options, or $100 off for the single day option.&lt;/p&gt;
&lt;p&gt;See you in Silicon Valley!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>Painless XML Schema typing with Zorba</title><id>/60028086432/painless-xml-schema-typing-with-zorba</id><summary>Providing a schema for your data makes your applications much more robust and can enable numerous optimizations in your query processor. However, many users shy away from the complexity of XML Schema. Well, what if you could generate a schema automatically from your data? Or what if you could generate a sample instance from a big schema and modify it with your data in just a few lines of code? Now you can!</summary><updated>Tue, 26 Jun 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;Providing a schema for your data makes your applications much more robust and can enable numerous optimizations in your query processor. However, many users shy away from the complexity of XML Schema. Well, what if you could generate a schema automatically from your data? Or what if you could generate a sample instance from a big schema and modify it with your data in just a few lines of code? Now you can!&lt;/p&gt;
&lt;p&gt;The schema-tools module contains functions to go in both directions between instances and schemas: &lt;strong&gt;xsd2inst&lt;/strong&gt; to get an instance from a schema set and &lt;strong&gt;inst2xsd&lt;/strong&gt; to get schema for a set of instances.&lt;/p&gt;
&lt;p&gt;Let’s dive in.&lt;/p&gt;
&lt;h2&gt;From schema to instance&lt;/h2&gt;
&lt;p&gt;This is quite useful when trying out a web-service API described by a schema or for generating data for unit or performance testing. In other domains like WSDL or more specific like XBRL the documents contain schema definitions for some parts of the document. For these xsd2inst helps with generating documents when using these web-services.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s look at an example - finding out the location of an IP address using the &lt;a href="http://www.restfulwebservices.net/wcf/GeoIPService.svc"&gt;GeoIPService&lt;/a&gt;. The GeoIP service has &lt;a href="http://www.restfulwebservices.net/wcf/GeoIPService.svc?wsdl"&gt;a WSDL&lt;/a&gt; that contains a link to &lt;a href="http://www.restfulwebservices.net/wcf/GeoIPService.svc?xsd=xsd0"&gt;the schema of a valid input document&lt;/a&gt;. To find out what the input document should look like we can write the following:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;st&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;sto&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$xsd&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/wcf/GeoIPService.svc?xsd=xsd0"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:xsd2inst-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;              &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:network-downloads&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;true&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:network-downloads&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        	&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:xsd2inst-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="support function"&gt;st:xsd2inst&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$xsd&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"Analyse"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;Getting this result:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ns:Analyse&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:ns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/ServiceContracts/2008/01"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="comment"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="comment"&gt;Optional:--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ns:request&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;string&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ns:request&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;ns:Analyse&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;http:send-request() was used to retrieve the schema and st:xsd2inst() generated a valid instance for it.&lt;/p&gt;
&lt;p&gt;Now, using XQuery Update&amp;#8217;s copy/modify/return construct, we can modify this instance to put a valid IP address into the &lt;em&gt;&amp;lt;request&amp;gt;&lt;/em&gt;element.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$xsd&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/wcf/GeoIPService.svc?xsd=xsd0"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="text"&gt;  :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:xsd2inst-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;           	&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:network-downloads&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;true&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:network-downloads&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;         	&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:xsd2inst-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$sampleInput&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="support function"&gt;st:xsd2inst&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$xsd&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"Analyse"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;copy&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$sampleInput&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;modify&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="keyword"&gt;replace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;value&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;of&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;node&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;with&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"2.2.2.2"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;Returning:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;ns:Analyse&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;xmlns:ns&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/ServiceContracts/2008/01"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="comment"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="comment"&gt;Optional:--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;ns:request&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;2.2&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="constant"&gt;2.2&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;ns:request&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;ns:Analyse&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;With the request message constructed we can call the GeoIP web-service. Everything put together should look like this:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;st&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;sto&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;soap&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://schemas.xmlsoap.org/soap/envelope/"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$xsd&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/wcf/GeoIPService.svc?xsd=xsd0"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="text"&gt;  :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:xsd2inst-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;           	&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:network-downloads&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;true&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:network-downloads&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;         	&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:xsd2inst-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$sampleInput&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="support function"&gt;st:xsd2inst&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$xsd&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"Analyse"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$input&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;copy&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$sampleInput&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;modify&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="keyword"&gt;replace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;value&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;of&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;node&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;with&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"2.2.2.2"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="variable"&gt;$d&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$req&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"POST"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;				&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:header&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;name&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"SOAPAction"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;value&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"Analyse"&lt;/span&gt;&lt;span class="text"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;           	&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:body&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;media-type&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"text/xml"&lt;/span&gt;&lt;span class="text"&gt; &amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;           	&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;http:body&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;         	&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;    &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;       	 &lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$soap&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;soap:Envelope&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;           	&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;soap:Header&lt;/span&gt;&lt;span class="text"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;           	&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;soap:Body&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;               	&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="variable"&gt;$input&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;           	&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;soap:Body&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;         	&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;soap:Envelope&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;  	 &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	 &lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$req&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/wcf/GeoIPService.svc"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$soap&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Which returns the following result:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;s:Envelope&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:s&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://schemas.xmlsoap.org/soap/envelope/"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;s:Body&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;AnalyseResponse&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/ServiceContracts/2008/01"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;AnalyseResult&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:a&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.restfulwebservices.net/DataContracts/2008/01"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:i&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:Registry&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;ARIN&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:Registry&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:Assigned&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;772588800&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:Assigned&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:CountryCode&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;US&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:CountryCode&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:ISOCountryCode&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;USA&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:ISOCountryCode&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:Country&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;UNITED STATES&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;a:Country&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;AnalyseResult&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;AnalyseResponse&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;s:Body&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;s:Envelope&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Run it &lt;a href="http://www.zorba-xquery.com/html/demo#Sus4nEAK2c1o1vTzQUCaSJudj7I="&gt;live&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;From instances to schema&lt;/h2&gt;
&lt;p&gt;In many cases using a schema is a good idea to formally define the contract of the interface, and even the rules that describe how the contract might change so that it remains backwards compatible. There are cases when starting from an instance is faster, simpler, or easier to start with. For these cases, the inst2xsd tool is a good way to generate a schema.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s say we are creating our own web service based on GeoIP. The result we got in the last sample was not structured exactly how we like and we would like something simpler like this:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;country&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;isoCode&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt;”&lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;USA&lt;/span&gt;&lt;span class="text"&gt;”&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;UNITED STATES&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;country&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;XQuery is made for performing these kinds of transformations and makes it really simple:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$res&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;s:Envelope&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;xmlns:s&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://schemas.xmlsoap.org/soap/envelope/"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  ...&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;s:Envelope&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;country&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;isoCode&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"{fn:data($res//*:ISOCountryCode)}"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="support function"&gt;fn:data&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$res&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;Country&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;country&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Now getting the schema for this structure is straightforward using the inst2xsd function. This function generates a schema for a given instance. The options element contain smart detection of simple types and when to use enumeration values.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;st&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;sto&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$inst&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;country&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;isoCode&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"USA"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;UNITED&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;STATES&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;country&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="text"&gt;  :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:inst2xsd-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;               &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:simple-content-types&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;smart&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:simple-content-types&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;               &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;sto:use-enumeration&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:use-enumeration&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        	 &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;sto:inst2xsd-options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;st:inst2xsd&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$inst&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$opt&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This returns the full schema to represent our simple result:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:schema&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:xs&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;attributeFormDefault&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"unqualified"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;elementFormDefault&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"qualified"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:element&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;name&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"country"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"countryType"&lt;/span&gt;&lt;span class="meta tag"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:complexType&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;name&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"countryType"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:simpleContent&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:extension&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;base&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"xs:string"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:attribute&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"xs:string"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;name&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"isoCode"&lt;/span&gt;&lt;span class="meta tag"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:extension&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:simpleContent&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:complexType&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:schema&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;We can use this schema to make the result of our function typed or, if we make it a web-service, to describe the structure of the result. Try it &lt;a href="http://www.zorba-xquery.com/html/demo#got4WDe+E7iZ3TnOc200rsVB7fY="&gt;live&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a more complicated instance let&amp;#8217;s look at an example that generates a sample schema for &lt;a href="http://dev.iptc.org/files/SportsML-Examples/sportsml-2.2-soccer-sample.xml"&gt;a document found on the web&lt;/a&gt;. This document is an instance of SportsML, which has a formal schema defined by IPTC, but for this example let&amp;#8217;s pretend there isn&amp;#8217;t one.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;st&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;sto&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$inst&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="string"&gt;"http://dev.iptc.org/files/SportsML-Examples/sportsml-2.2-soccer-sample.xml"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="support function"&gt;st:inst2xsd&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$inst&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The result is a schema document defining this particular instance. &lt;a href="http://www.zorba-xquery.com/html/demo#6d/B2CGmu1yd9tohtkhysIUE0OY="&gt;Try it live&lt;/a&gt; to see the entire result.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:schema&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:xs&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;attributeFormDefault&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"unqualified"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;elementFormDefault&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"qualified"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;targetNamespace&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://iptc.org/std/SportsML/2008-04-01/"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:element&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:ns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://iptc.org/std/SportsML/2008-04-01/"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;name&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"sports-content"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"ns:sports-contentType"&lt;/span&gt;&lt;span class="meta tag"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:complexType&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;name&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"sports-contentType"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:sequence&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:element&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:ns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://iptc.org/std/SportsML/2008-04-01/"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"ns:sports-metadataType"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;name&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"sports-metadata"&lt;/span&gt;&lt;span class="meta tag"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:element&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns:ns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://iptc.org/std/SportsML/2008-04-01/"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;type&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"ns:sports-eventType"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;name&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"sports-event"&lt;/span&gt;&lt;span class="meta tag"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;	&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:sequence&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:complexType&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  ...&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;xs:schema&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This sample provides quite a good start for somebody with relatively little XMLSchema experience to modify it for his uses.&lt;/p&gt;
&lt;p&gt;There are cases when the complete schema or parts of the schema is required inside the document it describes, like WSDL or XBRL. These cases require a deeper integration and knowledge of the domain.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As we&amp;#8217;ve seen in the above examples, tools like inst2xsd and xsd2inst are quite useful in a variety of cases: when prototyping, while working with dynamic schemas, or in generating test samples.&lt;/p&gt;
&lt;p&gt;More detailed information is found in the &lt;a href="/html/modules/zorba/data-processing/schema-tools"&gt;documentation pages of the schema-tools module.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>Zorba 2.5, aka Dionysus</title><id>/60028018460/zorba-25-aka-dionysus</id><summary>The Zorba development team is pleased to announce the release of Zorba 2.5, codename Dionysus. The release is a major step forward in terms of new features, performance improvements, and bug fixes. It is available in our download section.</summary><updated>Thu, 14 Jun 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;The Zorba development team is pleased to announce the release of Zorba 2.5, codename &lt;a href="http://en.wikipedia.org/wiki/Dionysus"&gt;Dionysus&lt;/a&gt;. The release is a major step forward in terms of new features, performance improvements, and bug fixes. It is available in our &lt;a href="/html/download"&gt;download section&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;The main focus of this release has been to extend and improve Zorba&amp;#8217;s language bindings. We have finally added support for the long requested &lt;a href="/html/documentation/2.5.0/xqj"&gt;XQJ binding - a standard Java interface&lt;/a&gt;. Moreover, the existing language bindings for Ruby, Python, and PHP provide plenty of new classes and functions bringing their functionality very close to Zorba&amp;#8217;s powerful C++ API.&lt;/p&gt;
&lt;p&gt;Additionally, Zorba comes with two new modules. The &lt;a href="/html/modules/zorba/data-processing/schema-tools"&gt;schema-tools module&lt;/a&gt; contains function that allow generating XML schemas from sample data and vice versa. For example, this is extremely useful for generating data for unit or performance testing. The &lt;a href="/html/modules/zorba/fulltext"&gt;full-text module&lt;/a&gt; provides access to a variety of full-text primitives such as tokenization, stemming, stop-word detection, and thesaurus lookup for plenty of languages. With this module, XQuery developers have easy means to examining and indexing their text-centric information.&lt;/p&gt;
&lt;p&gt;Last but not least, we added eight new XQuery 3.0 functions including fn:path, fn:environment-variables, and fn:unparsed-text.&lt;/p&gt;
&lt;p&gt;We will showcase some of the new features in upcoming blog entries over the next couple of weeks.&lt;/p&gt;
&lt;h2&gt;Performance Improvements &amp;amp; Bug Fixes&lt;/h2&gt;
&lt;p&gt;On top of the new features, we have improved the performance of the compiler (e.g., when compiling recursive functions) and the runtime (e.g., the insertion of nodes into collections). Also, several functions, such as the file module&amp;#8217;s read-text-lines function, have been enhanced to handle unlimited text streams while maintaining a low memory footprint.&lt;/p&gt;
&lt;p&gt;In addition, Zorba 2.5 contains more then 30 bug fixes spread across all parts of the system from XQuery modules, compiler, and runtime all the way down to the store. Please see our &lt;a href="https://launchpadlibrarian.net/107506719/ChangeLog"&gt;ChangeLog&lt;/a&gt; for an exhaustive list.&lt;/p&gt;
&lt;p&gt;As always, we strongly appreciate your bug reports and your feedback. Until then: May the FLWOR be with you!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>XML Streaming with XQuery</title><id>/60027975996/xml-streaming-with-xquery</id><summary>Are you familiar with that awkward moment when you realize that fn:doc() is no good to deal with the 24 GB XML file you would like to process? Here’s a quick tip that will make you feel like an XML Rock Star.</summary><updated>Thu, 31 May 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;Are you familiar with that awkward moment when you realize that &lt;em&gt;fn:doc()&lt;/em&gt; is no good to deal with the &lt;a href="http://dumps.wikimedia.org/enwikibooks/20120520/"&gt;24&amp;#160;GB XML file&lt;/a&gt; you would like to process? Here&amp;#8217;s a quick tip that will make you feel like an &lt;a href="http://www.youtube.com/watch?v=a8SNp_cQfrA"&gt;XML Rock Star&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.zorba.io/documentation/latest/modules/zorba/data-converters/xml/?anchor=parse-2"&gt;xml:parse()&lt;/a&gt; is the Swiss army knife of XML parsing. This function provides the same parsing utilities from top notch XML libraries but in the XQuery userland: from DTD or XML Schema validation to XML entities and XIncludes subsitutions. It prevents you from doing unnecessary round-tripping between XQuery and other programming languages.&lt;/p&gt;
&lt;p&gt;Moreover, this function is especially convenient for parsing large documents or streams of data. For instance, in this &lt;a href="http://www.zorba-xquery.com/html/demo#CGPfEyXKvDwDfgzek/VTOIAIrJ8="&gt;live example&lt;/a&gt;, even tough we fetch a 700MB XML document via HTTP, Zorba only consumes the required resources to compute the result. So how does this work?&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s dive in.&lt;/p&gt;
&lt;p&gt;We would like to parse a &lt;a href="http://dumps.wikimedia.org/enwikibooks/20120520/"&gt;dump of the English wikibooks&lt;/a&gt; and create a timeline of all pages related to XQuery&lt;/p&gt;
&lt;p&gt;In a first step, we are reading a Wikibooks dataset (available at &lt;a href="http://dumps.wikimedia.org/enwikibooks/"&gt;&lt;a href="http://dumps.wikimedia.org/enwikibooks"&gt;http://dumps.wikimedia.org/enwikibooks&lt;/a&gt;&lt;/a&gt;) from a file. The dataset used in the example is a database dump containing the metadata of all pages in order to get the creation date of each page (e.g. enwikibooks-20120520-pages-meta-history.xml). After this, we use &lt;a href="http://www.zorba.io/documentation/latest/modules/zorba/data-converters/xml/?anchor=parse-2"&gt;xml:parse()&lt;/a&gt; to parse the string into XML fragments (i.e. the page elements in the dataset) and iterate over each such fragment.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;file&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/file"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://zorba.io/modules/xml"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;schema&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;opt&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://zorba.io/modules/xml-options"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$raw-data&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;file:read-text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"enwikibooks-20120520-pages-meta-history.xml"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$pages&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;p:parse&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$raw-data&lt;/span&gt;&lt;span class="text"&gt;, &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;opt:options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                                   &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;opt:parse-external-parsed-entity&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;opt:skip-root-nodes&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"1"&lt;/span&gt;&lt;span class="text"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                                 &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;opt:options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$page&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$pages&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$page&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In the code snippet above, it&amp;#8217;s important to note that the execution happens in a streaming manner from top to bottom. First, the string returned by &lt;em&gt;file:read-text()&lt;/em&gt; is streamed and never entirely materialized in memory. That is, the 24GB of raw data will never be loaded into memory at once. Second, we ask the XML parser to only return the children of the document&amp;#8217;s root element as a sequence of elements. This is done using the &lt;em&gt;"&amp;lt;opt:parse-external-parsed-entity opt:skip-root-nodes="1"/&amp;gt;"&lt;/em&gt; option. It makes sure that the entire document is never materialized in memory and the resulting sequence of elements can be processed in a streaming fashion.&lt;/p&gt;
&lt;p&gt;Once this is done, generating the timeline is a piece of cake. We select only the pages whose title starts with XQuery. For each XQuery page, we compute the creation date of the first revision of that page. The full query is available below.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;file&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/file"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://zorba.io/modules/xml"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;schema&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;opt&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://zorba.io/modules/xml-options"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;w&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.mediawiki.org/xml/export-0.6/"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$raw-data&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;file:read-text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"enwikibooks-20120520-pages-meta-history.xml"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$pages&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;p:parse&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$raw-data&lt;/span&gt;&lt;span class="text"&gt;, &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;opt:options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                                   &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;opt:parse-external-parsed-entity&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;opt:skip-root-nodes&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"1"&lt;/span&gt;&lt;span class="text"&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                                 &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;opt:options&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$page&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$pages&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;where&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;starts-with&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$page&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;w&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;title&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"XQuery"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$title&lt;/span&gt;&lt;span class="text"&gt;          :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$page&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;w&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;title&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$creation-date&lt;/span&gt;&lt;span class="text"&gt;  :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;min&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$page&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;w&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;revision&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;w&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;timestamp&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;xs:dateTime&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="text"&gt;.&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;page&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;title&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"{$title}"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;date&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"{$creation-date}"&lt;/span&gt;&lt;span class="text"&gt; /&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Pretty simple, no?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;xml:parse()&lt;/em&gt; is to XML what &lt;a href="http://www.zorba-xquery.com/documentation/latest/modules/zorba/languages/xqxq"&gt;XQXQ&lt;/a&gt; is to XQuery. We are looking to provide a rich programming experience that will enable developers to stay in the XQuery userland and avoid unnecessary roundtrips between XQuery and another technology.&lt;/p&gt;
&lt;p&gt;Traditional XML streaming APIs such as XMLReader or SAX provide very good performance but have extremely low productivity. From this perspective, &lt;em&gt;xml:parse()&lt;/em&gt; is quite an interesting function because it does not give up on anything. This function provides steady performance and is 100% bound to the XQuery processing model.&lt;/p&gt;
&lt;img alt="xml:parse() vs fn:doc() vs XMLReader/SAX" src="/images/blog/xml-parse.png"/&gt;&lt;p&gt;We hope that you will take &lt;em&gt;xml:parse()&lt;/em&gt; for a ride and send us feedback. And as always, may the FLWOR be with you! ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>Caching Results of Functions</title><id>/60027902618/caching-results-of-functions</id><summary>Caching of function results may improve performance if computationally expensive functions are invoked multiple times with the same arguments.

  If the optimization level is O1 or higher, Zorba automatically caches results of recursive, deterministic, and non-sequential functions whose parameter and return types are subtypes of xs:anyAtomicType. Specifically, if such a function is called more than once with the same arguments, the result of the first call will be cached and subsequent calls will return the cached value without re-evaluating the function.</summary><updated>Mon, 16 Apr 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;Caching of function results may improve performance if computationally expensive functions are invoked multiple times with the same arguments.&lt;/p&gt;
&lt;p&gt;If the optimization level is &lt;a href="http://www.zorba-xquery.com/html/documentation/2.1.0/cxx/structZorba__CompilerHints"&gt;O1 or higher&lt;/a&gt;, Zorba automatically caches results of recursive, deterministic, and non-sequential functions whose parameter and return types are subtypes of &lt;em&gt;xs:anyAtomicType&lt;/em&gt;. Specifically, if such a function is called more than once with the same arguments, the result of the first call will be cached and subsequent calls will return the cached value without re-evaluating the function.&lt;/p&gt;
&lt;p&gt;For example, in the following recursive function computing a fibonacci number, each result is automatically cached and therefore performance dramatically improves.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:fib&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$n&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;integer&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;integer&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$n&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;eq&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;0&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;then&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;else&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$n&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;eq&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;then&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;else&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:fib&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$n&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;+&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:fib&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$n&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="support function"&gt;local:fib&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="constant"&gt;90&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In order to disable function caching explicitly, the user can specify the no-cache annotation:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;an&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/annotations"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; %&lt;/span&gt;&lt;span class="identifier"&gt;an&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;no&lt;/span&gt;&lt;span class="keyword operator"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;cache&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:fib&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$n&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;integer&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;integer&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="text"&gt; ... &lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In the above example with caching, the complexity of the function is reduced from &lt;em&gt;O(1.6&lt;sup&gt;&lt;small&gt;n&lt;/small&gt;&lt;/sup&gt;)&lt;/em&gt; to &lt;em&gt;O(n)&lt;/em&gt;. Just to give you an impression about the difference in raw execution time: The query with caching gives the result in a couple of milliseconds whereas the query without caching virtually never finishes. Also, executing the query with several other XQuery processors didn&amp;#8217;t give a result within a reasonable amount of time.&lt;/p&gt;
&lt;p&gt;This powerful optimization is possible because of Zorba&amp;#8217;s classification of functions into simple, nondeterministic, and sequential. While the results of simple functions can be cached without changing the semantics of the query, the result of nondeterministic or sequential functions can not be cached. For example, if the result of a sequential function that sends an HTTP POST request (using the http-client module) were cached, the HTTP request would be made only once - which is not what the user expected. Similarly, the result of a nondeterministic function (e.g., one returning random numbers) can not be cached without changing the semantics of the query.&lt;/p&gt;
&lt;p&gt;In addition to automatic caching, the user may use the cache annotation to enforce caching of functions whose result would not have been automatically cached. However, this only works if the function is not updating and its parameter and return types are subtypes of xs:anyAtomicType; otherwise, Zorba will raise a warning (&lt;em&gt;zwarn:ZWST0005&lt;/em&gt;) and ignore the cache annotation.&lt;/p&gt;
&lt;p&gt;Please note that for reasons already given above, explicitly enforcing caching for sequential or nondeterministic functions might not give the intended result. In such cases, Zorba will raise a warning (&lt;em&gt;zwarn:ZWST0006&lt;/em&gt;) but still obey the cache annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>JSON Streaming with XQuery</title><id>/60027825488/json-streaming-with-xquery</id><summary>Zorba 2.2 significantly improves the processing of XML, JSON, and textual streams. In this post, we would like to showcase how XQuery can be leveraged to build applications on top of the Twitter Streaming API.</summary><updated>Fri, 30 Mar 2012 00:00:00 -0400</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;&lt;img alt="image" src="/images/blog/googleearth.png"/&gt;&lt;a href="http://www.zorba-xquery.com/html/entry/2012/03/22/Zorba_22"&gt;Zorba 2.2&lt;/a&gt; significantly improves the processing of XML, JSON, and textual streams. In this post, we would like to showcase how XQuery can be leveraged to build applications on top of the &lt;a href="https://dev.twitter.com/docs/streaming-api"&gt;Twitter Streaming API&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Application&lt;/h2&gt;
&lt;p&gt;The application we would like to build is fairly trivial. First, we fetch a stream of public statuses from Twitter (aka tweets). Each tweet is parsed as JSON. If the tweet is geo-tagged, we transform it into a &lt;a href="https://developers.google.com/kml/documentation/kml_tut#placemarks"&gt;KML placemark&lt;/a&gt;. Finally, we store the tweets into a KML document.&lt;/p&gt;
&lt;p&gt;To keep the KML document fresh with the latest tweets, we will overwrite it every time an arbitrary number of tweets have been processed. To visualize the Twitter updates with Google earth, we will create a &lt;a href="https://developers.google.com/kml/documentation/kml_tut#network_links"&gt;KML Network Link&lt;/a&gt; that points to the KML document updated by Zorba.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s dive in.&lt;/p&gt;
&lt;h2&gt;The Tweets&lt;/h2&gt;
&lt;p&gt;First things first: we fetch a stream of tweets from Twitter.&lt;/p&gt;
&lt;p&gt;We will use the &lt;a href="https://dev.twitter.com/docs/streaming-api/methods"&gt;statuses/sample&lt;/a&gt; method from the Twitter Streaming API. This method returns a random sample of tweets. Since this method is returning a stream, the connection between the client and the server will virtually never end.&lt;/p&gt;
&lt;p&gt;The good news is that &lt;a href="http://www.zorba-xquery.com/html/modules/expath/http-client"&gt;EXPath HTTP Client implementation in Zorba&lt;/a&gt; streams HTTP responses. This is particularly well suited to process large amount of data efficiently that are returned from an HTTP server. This feature is also a savior in this particular application scenario since the HTTP response we would like to process is never-ending.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s go ahead and write a small query that fetches the stream of tweets. We ask the HTTP client to serialize the HTTP response as text by using the attribute &lt;em&gt;override-media-type=&amp;#8221;text/plain&amp;#8221;&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"https://stream.twitter.com/1/statuses/sample.json"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"GET"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                &lt;/span&gt;&lt;span class="meta tag"&gt;username&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"xqueryblog"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                &lt;/span&gt;&lt;span class="meta tag"&gt;password&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"1qaz2w"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                &lt;/span&gt;&lt;span class="meta tag"&gt;override-media-type&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"text/plain"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  /&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;If you execute this query, you will notice that the HTTP response from the &lt;em&gt;send-request()&lt;/em&gt; function is already being serialized even thought the HTTP connection is not closed yet. Pretty cool, no?&lt;/p&gt;
&lt;p&gt;At this point, we want to transform the stream into a sequence of tweets. By default, the Twitter API delimits each JSON objects with a carriage return character (&lt;em&gt;&amp;amp;#13;&lt;/em&gt;). Zorba provides a &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/xdm/atomic/string#split-2"&gt;split()&lt;/a&gt; function to return a sequence of strings from an input. This function is similar to &lt;em&gt;fn:tokenize()&lt;/em&gt; but doesn&amp;#8217;t use a regular expression as a separator. This restriction makes it easier to split large/infinite strings in a streaming manner.&lt;/p&gt;
&lt;p&gt;In the code snippet below, we split the response for each tweet and parse its JSON representation using the &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/data-converters/json"&gt;JSON module&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;http&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://expath.org/ns/http-client"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/string"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;module&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;json&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://www.zorba-xquery.com/modules/converters/json"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                &lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;   &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"http://john.snelson.org.uk/parsing-json-into-xquery"&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:parse-tweets&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$stream&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;element&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="keyword"&gt;json&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$raw-tweets&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;string:split&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$stream&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"&amp;amp;#13;"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$raw-tweet&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$raw-tweets&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;json:parse&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$raw-tweet&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;      &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$stream&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"https://stream.twitter.com/1/statuses/sample.json"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                  &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"GET"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                  &lt;/span&gt;&lt;span class="meta tag"&gt;username&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"xqueryblog"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                  &lt;/span&gt;&lt;span class="meta tag"&gt;password&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"1qaz2w"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                  &lt;/span&gt;&lt;span class="meta tag"&gt;override-media-type&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"text/plain"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  /&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="support function"&gt;local:parse-tweets&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$stream&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In the query above, the predicate &lt;em&gt;[2]&lt;/em&gt; means that we are only interested by the HTTP response body. The HTTP response status code and headers are available in the first item of the function result. Examples on how to use the EXPath HTTP client are available in the&lt;a href="http://www.zorba-xquery.com/html/demo"&gt;Zorba live demo&lt;/a&gt; interface.&lt;/p&gt;
&lt;p&gt;Some tweets contain unicode characters that are not supported in XML 1.0. Therefore, you should run the query above by setting the version parameter from the XML serialization to 1.1:&lt;/p&gt;
&lt;pre class="ace-static"&gt;$zorba -q streaming-example.xq -f -i -z version="1.1"&lt;/pre&gt;
&lt;h2&gt;The Placemarks&lt;/h2&gt;
&lt;p&gt;The next step is to transform each tweet into a KML placemark. As you can see in the code snippet below, this is a pretty straightforward operation.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:placemark&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$json&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;element&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="keyword"&gt;json&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$coordinates&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$json&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"coordinates"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"coordinates"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="keyword"&gt;item&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$lat&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$coordinates&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$long&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$coordinates&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$coordinates&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$lat&lt;/span&gt;&lt;span class="text"&gt; || &lt;/span&gt;&lt;span class="string"&gt;", "&lt;/span&gt;&lt;span class="text"&gt; || &lt;/span&gt;&lt;span class="variable"&gt;$long&lt;/span&gt;&lt;span class="text"&gt; || &lt;/span&gt;&lt;span class="string"&gt;", 0"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;Placemark&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;xmlns&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.opengis.net/kml/2.2"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;name&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="variable"&gt;$json&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"name"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;name&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;visibility&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;visibility&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;description&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="variable"&gt;$json&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"text"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;description&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;Style&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;IconStyle&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;scale&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;scale&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;Icon&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;          &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="variable"&gt;$json&lt;/span&gt;&lt;span class="text"&gt;//&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"profile_image_url"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="support function"&gt;text&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;Icon&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;IconStyle&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;LabelStyle&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;scale&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;scale&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;LabelStyle&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;Style&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;Point&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;extrude&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;0&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;extrude&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;tessellate&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;tessellate&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;coordinates&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="variable"&gt;$coordinates&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;coordinates&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;Point&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;Placemark&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href="http://bazaar.launchpad.net/~zorba-coders/zorba/demos/view/head:/twitter-streaming/example3.xq"&gt;example3.xq&lt;/a&gt; to use this function directly with the Twitter API.&lt;/p&gt;
&lt;h2&gt;Google Earth Integration&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;re almost there. To integrate with Google Earth, we need to add some scripting to our query. First, we define a function named&lt;em&gt;fetch-placemarks($limit)&lt;/em&gt;. This function will fetch a certain number of tweets from Twitter and transform them into KML placemarks. The number of tweets to fetch is set by the &lt;em&gt;$limit&lt;/em&gt; parameter. See the function definition below.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="keyword"&gt;declare&lt;/span&gt;&lt;span class="text"&gt; %&lt;/span&gt;&lt;span class="identifier"&gt;ann&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;sequential&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;function&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:fetch-placemarks&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$limit&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="identifier"&gt;xs&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;integer&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="keyword"&gt;as&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;element&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;Placemark&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$stream&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="support function"&gt;http:send-request&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;http:request&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;href&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"https://stream.twitter.com/1/statuses/sample.json"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                    &lt;/span&gt;&lt;span class="meta tag"&gt;method&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"GET"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                    &lt;/span&gt;&lt;span class="meta tag"&gt;username&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"xqueryblog"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                    &lt;/span&gt;&lt;span class="meta tag"&gt;password&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"1qaz2w"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;                    &lt;/span&gt;&lt;span class="meta tag"&gt;override-media-type&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"text/plain"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    /&amp;gt;&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="constant"&gt;2&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tweets&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:parse-tweets&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$stream&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tweets&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;subsequence&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$tweets&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$limit&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tweet&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword"&gt;in&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tweets&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;where&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$tweet&lt;/span&gt;&lt;span class="text"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;span class="text"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;span class="lparen"&gt;[&lt;/span&gt;&lt;span class="text"&gt;@&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"coordinates"&lt;/span&gt;&lt;span class="rparen"&gt;]&lt;/span&gt;&lt;span class="text"&gt;/@&lt;/span&gt;&lt;span class="identifier"&gt;type&lt;/span&gt;&lt;span class="text"&gt; !&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="string"&gt;"null"&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:placemark&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$tweet&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This function invokes &lt;em&gt;parse-tweets()&lt;/em&gt; which is the exact same function that we declared previously. The main query expression an infinite loop to fetch the KML placemarks from a Twitter stream and store it into a KML document named &lt;em&gt;tweets.xml&lt;/em&gt;. For each &lt;em&gt;while&lt;/em&gt;iteration, the &lt;em&gt;tweets.xml&lt;/em&gt; document will be refreshed with new content. This is done in the main query below.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="comment"&gt;(:&lt;/span&gt;&lt;span class="comment"&gt; XQuery 4ever :)&lt;/span&gt;&lt;br/&gt;&lt;span class="support function"&gt;while&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="support function"&gt;true&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="support function"&gt;trace&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"..."&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="string"&gt;"refresh KML document"&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$placemarks&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;local:fetch-placemarks&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="constant"&gt;1000&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="keyword"&gt;let&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="variable"&gt;$kml&lt;/span&gt;&lt;span class="text"&gt; :&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;   &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;kml&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;xmlns&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.opengis.net/kml/2.2"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;         &lt;/span&gt;&lt;span class="meta tag"&gt;xmlns:atom&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.w3.org/2005/Atom"&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;         &lt;/span&gt;&lt;span class="meta tag"&gt;xmlns:gx&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.google.com/kml/ext/2.2"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;Document&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;name&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;Tweets&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;name&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;visibility&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;span class="constant"&gt;1&lt;/span&gt;&lt;span class="text"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;visibility&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;&lt;/span&gt;&lt;span class="meta tag"&gt;Folder&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="meta tag"&gt;id&lt;/span&gt;&lt;span class="text"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"tweets"&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &lt;/span&gt;&lt;span class="lparen"&gt;{&lt;/span&gt;&lt;span class="variable"&gt;$placemarks&lt;/span&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;        &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;Folder&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;      &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;Document&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;   &amp;lt;/&lt;/span&gt;&lt;span class="meta tag"&gt;kml&lt;/span&gt;&lt;span class="text"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;   &lt;/span&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="support function"&gt;file:write&lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"tweets.kml"&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="variable"&gt;$kml&lt;/span&gt;&lt;span class="text"&gt;, &lt;/span&gt;&lt;span class="lparen"&gt;(&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="rparen"&gt;)&lt;/span&gt;&lt;span class="text"&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class="rparen"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the main query invokes &lt;em&gt;fetch-placemarks()&lt;/em&gt; which is the exact same function that we declared previously.&lt;/p&gt;
&lt;p&gt;Finally, we create &lt;a href="https://developers.google.com/kml/documentation/kml_tut#network_links"&gt;network link&lt;/a&gt; that points to &lt;em&gt;tweets.xml&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="xml_pe"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;kml&lt;/span&gt;&lt;span class="text"&gt; &lt;/span&gt;&lt;span class="entity other.attribute-name"&gt;xmlns&lt;/span&gt;&lt;span class="keyword operator"&gt;=&lt;/span&gt;&lt;span class="string"&gt;"http://www.opengis.net/kml/2.2"&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;NetworkLink&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;name&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;Realtime Tweets&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;name&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;Link&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;href&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;file:///{PATH}/tweets.kml&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;href&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;refreshMode&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;onInterval&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;refreshMode&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;    &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;refreshInterval&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="text"&gt;5&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;refreshInterval&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="text"&gt;  &lt;/span&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;Link&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;NetworkLink&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class="meta tag"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="meta tag.tag-name"&gt;kml&lt;/span&gt;&lt;span class="meta tag"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Add the network link to Google Earth and that&amp;#8217;s it &amp;#8212; we&amp;#8217;re done.&lt;/p&gt;
&lt;img alt="image" src="/images/blog/randomtweets.png"/&gt;&lt;br/&gt;&lt;h2&gt;Take-Away&lt;/h2&gt;
&lt;p&gt;The source code of this application is available on &lt;a href="http://bazaar.launchpad.net/~zorba-coders/zorba/demos/files/head:/twitter-streaming/"&gt;Launchpad&lt;/a&gt;. We hope that you will put Zorba streaming capabilities to the test.&lt;/p&gt;
&lt;p&gt;If you are looking for more complex JSON processing with XQuery, you should checkout the &lt;a href="http://www.zorba-xquery.com/html/jsoniq"&gt;Zorba JSONiq development branch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>Zorba 2.2, aka Coeus</title><id>/60027695561/zorba-22-aka-coeus</id><summary>We are very excited to announce the release of Zorba 2.2, codename Coeus. It is available in our download section.</summary><updated>Thu, 01 Mar 2012 00:00:00 -0500</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;div&gt;
&lt;p&gt;We are very excited to announce the release of Zorba 2.2, codename &lt;a href="http://en.wikipedia.org/wiki/Coeus"&gt;Coeus&lt;/a&gt;. It is available in our &lt;a href="http://www.zorba-xquery.com/html/download"&gt;download section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what&amp;#8217;s new?&lt;/p&gt;
&lt;h2&gt;New features&lt;/h2&gt;
&lt;p&gt;First, we are introducing a new &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/xdm/atomic/uri"&gt;module for decoding URIs&lt;/a&gt;. Then we worked on several improvements to enable the processing of XML, JSON, and text in streaming manner. The new &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/data-converters/xml#parse-xml-fragment-2"&gt;parse-xml-fragment()&lt;/a&gt; function has been reworked to parse and process huge chunks of XML data as streams. The &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/data-converters/json"&gt;JSON module&lt;/a&gt; has been dramatically improved and is now able to parse and serialize streams of JSON documents. We are introducing a new &lt;a href="http://www.zorba-xquery.com/html/modules/zorba/xdm/atomic/string#split-2"&gt;split()&lt;/a&gt; function to tokenize streamable strings. Finally, &lt;a href="http://www.zorba-xquery.com/html/modules/expath/file#read-text-2"&gt;file:read-text()&lt;/a&gt; and &lt;a href="http://www.zorba-xquery.com/html/modules/expath/http-client#send-request-1"&gt;http:send-request()&lt;/a&gt; are now supporting arbitrary text encodings.&lt;/p&gt;
&lt;p&gt;The ItemFactory from the &lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classes"&gt;Zorba C++ API&lt;/a&gt; has been extended with methods: &lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classzorba_1_1ItemFactory#a5ee4a08dc9d22cd45133f1306ccaa368"&gt;createDayTimeDuration&lt;/a&gt;, &lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classzorba_1_1ItemFactory#ae2c0fdefd2515bed1a2ef479ac99883f"&gt;createYearMonthDuration&lt;/a&gt;,&lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classzorba_1_1ItemFactory#ad67a518abfd2df801f5617ec2365fe1d"&gt;createDocumentNode&lt;/a&gt;, &lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classzorba_1_1ItemFactory#a7f88edbf86f43e744fae61e3a7ca3a11"&gt;createCommentNode&lt;/a&gt;, and &lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classzorba_1_1ItemFactory#ab3ebb9de0413dd8bf831e39c85d8632e"&gt;createPiNode()&lt;/a&gt;. Also the StaticContext contains two new methods: &lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classzorba_1_1StaticContext#ac0d94cd0e4fb3f821a4273ecd9273253"&gt;getFunctions()&lt;/a&gt;and &lt;a href="http://www.zorba-xquery.com/html/documentation/2.2.0/cxx/classzorba_1_1StaticContext#a7f7c934ef18c6e8f5153f4c1315a72b5"&gt;getNamespaceBindings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The new PHP interface that we &lt;a href="http://www.zorba-xquery.com/html/entry/2011/12/27/PHP_Meets_XQuery"&gt;introduced&lt;/a&gt; in December is now shipped by default with Zorba and contains several improvements.&lt;/p&gt;
&lt;p&gt;Last but not least, you can forget about &lt;em&gt;fn:concat()&lt;/em&gt; and use the &lt;a href="http://www.w3.org/TR/xquery-30/#id-string-concat-expr"&gt;XQuery 3.0 string concatenation expressions&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="ace-static"&gt;&lt;span class="string"&gt;"Hello "&lt;/span&gt;&lt;span class="text"&gt; || &lt;/span&gt;&lt;span class="string"&gt;"Zorba "&lt;/span&gt;&lt;span class="text"&gt; || &lt;/span&gt;&lt;span class="string"&gt;"2.2"&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;Optimizations&lt;/h2&gt;
&lt;p&gt;Results of deterministic functions with atomic parameters and return types are cached by the runtime. This behavior can be controlled with the &lt;em&gt;%ann:cache&lt;/em&gt; and &lt;em&gt;%ann:no-cache&lt;/em&gt; annotations.&lt;/p&gt;
&lt;p&gt;Input nodes in nodes constructors are not copied systematically anymore. This behavior can be controlled with the &lt;em&gt;%ann:propagates-input-nodes&lt;/em&gt; and &lt;em&gt;%ann:must-copy-input-nodes&lt;/em&gt; annotations.&lt;/p&gt;
&lt;p&gt;Several performance improvements have been implemented: type operators, base64Binary processing, and other XQuery expressions.&lt;/p&gt;
&lt;h2&gt;Bug Reports&lt;/h2&gt;
&lt;p&gt;We pinned down more than thirty bug reports. You can find a comprehensive list of these bugs in our &lt;a href="https://launchpadlibrarian.net/97678336/ChangeLog"&gt;ChangeLog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;That&amp;#8217;s All Folks!&lt;/h2&gt;
&lt;p&gt;Please checkout the &lt;a href="https://launchpadlibrarian.net/97678336/ChangeLog"&gt;2.2 ChangeLog&lt;/a&gt; for the complete list of changes in this new version of Zorba.&lt;/p&gt;
&lt;p&gt;During the upcoming weeks, we will go over some of these new features in more details and showcase how they can be leveraged in your applications.&lt;/p&gt;
&lt;p&gt;We are actively working on our next milestone, &lt;a href="https://launchpad.net/zorba/+milestone/2.5"&gt;Zorba 2.5 &amp;#8220;Dionysus&amp;#8221;&lt;/a&gt;. Please keep us posted with &lt;a href="https://bugs.launchpad.net/zorba"&gt;bugs reports&lt;/a&gt; and &lt;a href="http://zorba.uservoice.com/forums/145664-what-should-we-work-on-next-"&gt;feedback&lt;/a&gt;. We strongly appreciate those.&lt;/p&gt;
&lt;p&gt;We hope you enjoy Zorba 2.2 and stay tuned for more.&lt;/p&gt;
&lt;p&gt;In the meantime, may the FLWOR be with you!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>Zorba @ FOSDEM</title><id>/60027643315/zorba--fosdem</id><summary>When you arrive in a room full of hackers decorated with 4chan memes, you know that you just landed at FOSDEM.</summary><updated>Thu, 01 Mar 2012 00:00:00 -0500</updated><content type="html">&lt;div class="entry-info"&gt;
&lt;p&gt;When you arrive in a room full of hackers decorated with &lt;a href="http://www.zorba-xquery.com/images/blog/philosoraptor.jpg"&gt;4chan memes&lt;/a&gt;, you know that you just landed at &lt;a href="http://fosdem.org/"&gt;FOSDEM&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="entry-content"&gt;
&lt;p&gt;FOSDEM is one of the biggest open source developer meetings in the world. For anyone interested in open source software development and Belgium beers, it is the place to be.&lt;/p&gt;
&lt;p&gt;We took advantage of the &lt;a href="http://fosdem.org/2012/schedule/tracks/lightningtalks"&gt;lightning talks sessions&lt;/a&gt; to give a brief overview of the Zorba XQuery Processor.&lt;/p&gt;
&lt;p&gt;See video below.&lt;/p&gt;
&lt;iframe frameborder="0" height="315" src="http://www.youtube.com/embed/M0WWfo8fusg" width="420"&gt;&lt;/iframe&gt;&lt;/div&gt;</content></entry><entry><title>From XML Prague with Love</title><id>/60027582262/from-xml-prague-with-love</id><summary>XML &amp; Prague. Does it get any better than this for angle brackets aficionados?
  Every year, XML Prague is one of the most exciting events of the year for the Zorba development team.
  And for the 2012 edition, the organisation committee pulled out all the stops.</summary><updated>Fri, 17 Feb 2012 00:00:00 -0500</updated><content type="html">&lt;div class="entry-content"&gt;
&lt;p&gt;XML &amp;amp; Prague. Does it get any better than this for angle brackets aficionados?&lt;br/&gt;Every year, &lt;a href="http://www.xmlprague.cz/"&gt;XML Prague&lt;/a&gt; is one of the most exciting events of the year for the Zorba development team.&lt;br/&gt;And for the 2012 edition, the organisation committee pulled out all the stops.&lt;/p&gt;
&lt;p&gt;Contributors to the Zorba project were attending the conference. From the left to the right: Rodolfo Ochoa (Oracle), Dennis Knochenwefel (28msec), David Graf (28msec), and Juan Zacarias (Oracle).&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/527ccf1b6d3a3bc81ada62576491f262/tumblr_inline_mx6mr0HhSr1rjv2qx.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;It all began on Thursday, February 10th, with the &lt;a href="http://www.xmlprague.cz/2012/pre-conference-friday.html"&gt;The pre-conference day&lt;/a&gt;. Various sessions were held with three XML databases on the menu: &lt;a href="http://exist.sourceforge.net/"&gt;eXist-db&lt;/a&gt;, &lt;a href="http://basex.org/"&gt;BaseX&lt;/a&gt;, and &lt;a href="http://www.28msec.com/"&gt;28msec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that 28msec leverages Zorba to run queries and web applications entirely written in XQuery. In a nutshell, 28msec is putting Zorba to the Cloud and is backing it with a scalable store.&lt;/p&gt;
&lt;p&gt;The pre-conference day was just an appetizer for the main conference track on Saturday and Sunday. The videos of all the talks are available on the &lt;a href="http://www.xmlprague.cz/2012/files/video-archive-1.html"&gt;XML Prague TV archive&lt;/a&gt;. XQuery was well represented with a couple of very interesting talks.&lt;/p&gt;
&lt;p&gt;First, Jonathan Robie and Michael Kay introduced us to the &lt;a href="http://www.xmlprague.cz/2012/sessions.html#Whats-New-in-XPath/XSLT/XQuery-3.0-and-XML-Schema-1.1"&gt;novelties in XQuery &amp;amp; XSLT 3.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/13939f58031a7f95a1308d1d6c87493a/tumblr_inline_mx6mrmxsAf1rjv2qx.jpg"/&gt;&lt;/p&gt;

&lt;p&gt;Then Adam Retter presented an elegant set of &lt;a href="http://www.xmlprague.cz/2012/sessions.html#RESTful-XQuery---Standardised-XQuery-3.0-Annotations-for-REST"&gt;XQuery 3.0 annotations&lt;/a&gt; to build RESTful XQuery applications.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/e51c819aef0e89a6105e56a793271138/tumblr_inline_mx6ms0YPP91rjv2qx.jpg"/&gt;&lt;/p&gt;

&lt;p&gt;Finally, John Snelson showcased &lt;a href="http://www.xmlprague.cz/2012/sessions.html#Transform.XQ-A-Transformation-Library-for-XQuery-3.0"&gt;transform.xq&lt;/a&gt; a pure XQuery 3.0 library that brings the template-matching paradigm from XSLT to XQuery developments.&lt;/p&gt;

&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/58be546a9fab066f8b8d041d32a1243c/tumblr_inline_mx6msfF82G1rjv2qx.jpg"/&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
The different sessions gave a great insight on how the new features in XQuery 3.0 can be leveraged to build a new generation of XQuery applications.
&lt;p&gt;The most disruptive talk during the conference was undoubtedly the introduction of &lt;a href="http://jsoniq.org/"&gt;JSONiq&lt;/a&gt; by Jonathan Robie. JSONiq extends the XQuery Data Model with JSON entities. The project has two goals:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;To provide the expertise and maturity of XQuery to JSON-oriented systems such as NoSQL databases.&lt;/li&gt;
&lt;li&gt;To provide first-class support for JSON to XQuery applications.&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;Zorba implements JSONiq in &lt;a href="https://code.launchpad.net/~zorba-coders/zorba/jsoniq"&gt;a development branch&lt;/a&gt;. You can try it live &lt;a href="http://www.zorba-xquery.com/html/jsoniq"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://media.tumblr.com/5822d76759ad117eec65f5687364cd97/tumblr_inline_mx6mt0lqwq1rjv2qx.jpg"/&gt;&lt;/p&gt;

&lt;p&gt;An enormous Thank You to the XMLPrague organization comittee and to all speakers for such an inspiring weekend.&lt;br/&gt;Looking forward to the next edition.&lt;/p&gt;
&lt;/div&gt;</content></entry></feed>